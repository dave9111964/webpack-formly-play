/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by david on 5/29/15.
	 */

	/* global angular */
	(function() {

	    'use strict';
	    __webpack_require__(1)();

	    var app = angular.module('formlyExample', [
	        'formly',
	        'formlyBootstrap',
	        __webpack_require__(41).name
	    ]);

	    angular.element(document).ready(function(){
	        angular.bootstrap(document.getElementById("ngapp"), ["formlyExample"]);
	    });

	    __webpack_require__(50);

	})();


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by david on 5/29/15.
	 */

	//export {
	var vendors = function(){
	    __webpack_require__(2);
	    __webpack_require__(6);
	    __webpack_require__(7);
	    __webpack_require__(9);
	    __webpack_require__(11);
	    //require('../node_modules/angular2/node_modules/traceur');
	    //require('../node_modules/angular2/angular2_sfx');
	//    require('../node_modules/angular2/angular2');
	    //require('../node_modules/angular2/annotations');
	    __webpack_require__(38);
	    __webpack_require__(40);
	};

	module.exports = vendors;


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(3);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(5)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../node_modules/css-loader/index.js!./../node_modules/less-loader/index.js!./index.less", function() {
				var newContent = require("!!./../node_modules/css-loader/index.js!./../node_modules/less-loader/index.js!./index.less");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(4)();
	exports.push([module.id, "step-two {\n  background: red;\n  text-shadow: 2px 2px #FF0000;\n  position: relative;\n  -webkit-animation: mymove 5s infinite;\n  animation: mymove 5s infinite;\n}\n/* Chrome, Safari, Opera */\n-webkit-animation mymove 0% {\n  top: 0px;\n}\n-webkit-animation mymove 25% {\n  top: 200px;\n}\n-webkit-animation mymove 75% {\n  top: 50px;\n}\n-webkit-animation mymove 100% {\n  top: 100px;\n}\n/* Standard syntax */\n@keyframes mymove {\n  0% {\n    top: 0px;\n  }\n  25% {\n    top: 200px;\n  }\n  75% {\n    top: 50px;\n  }\n  100% {\n    top: 100px;\n  }\n}\nstep-one {\n  background-color: yellow;\n}\nstep-one select {\n  color: #FF0000;\n  border-style: solid;\n  border-color: #ff0000 #00ff00 #0000ff #fa00ff;\n  text-shadow: 2px 2px #ff0000;\n}\nstep-one input {\n  color: #00ff00;\n  text-shadow: 2px 2px #ff0000;\n}\nstep-one .form_control {\n  color: #FF0000;\n  border-style: solid;\n  border-color: #ff0000 #00ff00 #0000ff #fa00ff;\n  text-shadow: 2px 2px #ff0000;\n}\nstep-one .step_one {\n  color: #FF0000;\n  border-color: #ff0000 #00ff00 #0000ff #fa00ff;\n  text-shadow: 2px 2px #ff0000;\n}\n#notesm {\n  color: #FF0000;\n  border-style: solid;\n  border-color: #ff0000 #00ff00 #0000ff #fa00ff;\n  text-shadow: 2px 2px #ff0000;\n}\n.ng2header {\n  color: rgba(0, 0, 204, 0.9);\n}\n.browsehappy {\n  margin: 0.2em 0;\n  background: #ccc;\n  color: #000;\n  padding: 0.2em 0;\n}\nbody {\n  padding: 0 !important;\n  background-color: #EEEEEE;\n}\na {\n  text-decoration: none;\n}\n/* styles */\n.form-pending {\n  color: rgba(0, 0, 0, 0.541176);\n  font-size: 0.85em;\n  list-style: none;\n}\n.form-error {\n  color: #F44336;\n  font-size: 0.85em;\n  list-style: none;\n}\n", ""]);

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	// 
	module.exports = function() {
		var list = [];

		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};

		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(var i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0;

	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}

		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();

		var styles = listToStyles(list);
		addStylesToDom(styles, options);

		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}

	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}

	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}

	function createStyleElement() {
		var styleElement = document.createElement("style");
		var head = getHeadElement();
		styleElement.type = "text/css";
		head.appendChild(styleElement);
		return styleElement;
	}

	function createLinkElement() {
		var linkElement = document.createElement("link");
		var head = getHeadElement();
		linkElement.rel = "stylesheet";
		head.appendChild(linkElement);
		return linkElement;
	}

	function addStyle(obj, options) {
		var styleElement, update, remove;

		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement());
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement();
			update = updateLink.bind(null, styleElement);
			remove = function() {
				styleElement.parentNode.removeChild(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement();
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				styleElement.parentNode.removeChild(styleElement);
			};
		}

		update(obj);

		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}

	var replaceText = (function () {
		var textStore = [];

		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();

	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;

		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}

	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
		var sourceMap = obj.sourceMap;

		if(media) {
			styleElement.setAttribute("media", media)
		}

		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}

	function updateLink(linkElement, obj) {
		var css = obj.css;
		var media = obj.media;
		var sourceMap = obj.sourceMap;

		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}

		var blob = new Blob([css], { type: "text/css" });

		var oldSrc = linkElement.href;

		linkElement.href = URL.createObjectURL(blob);

		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = {
	  scripts: {
	    'transition': true,
	    'alert': true,
	    'button': true,
	    'carousel': true,
	    'collapse': true,
	    'dropdown': true,
	    'modal': true,
	    'tooltip': true,
	    'popover': true,
	    'scrollspy': true,
	    'tab': true,
	    'affix': true
	  },
	  styles: {
	    "mixins": true,

	    "normalize": true,
	    "print": true,

	    "scaffolding": true,
	    "type": true,
	    "code": true,
	    "grid": true,
	    "tables": true,
	    "forms": true,
	    "buttons": true,

	    "component-animations": true,
	    "glyphicons": true,
	    "dropdowns": true,
	    "button-groups": true,
	    "input-groups": true,
	    "navs": true,
	    "navbar": true,
	    "breadcrumbs": true,
	    "pagination": true,
	    "pager": true,
	    "labels": true,
	    "badges": true,
	    "jumbotron": true,
	    "thumbnails": true,
	    "alerts": true,
	    "progress-bars": true,
	    "media": true,
	    "list-group": true,
	    "panels": true,
	    "wells": true,
	    "close": true,

	    "modals": true,
	    "tooltip": true,
	    "popovers": true,
	    "carousel": true,

	    "utilities": true,
	    "responsive-utilities": true
	  }
	};



/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(8);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(5)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../css-loader/index.js!./../less-loader/index.js!./bootstrap.config.less", function() {
				var newContent = require("!!./../css-loader/index.js!./../less-loader/index.js!./bootstrap.config.less");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(4)();
	exports.push([module.id, "", ""]);

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(10);
	module.exports = angular;


/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @license AngularJS v1.4.0
	 * (c) 2010-2015 Google, Inc. http://angularjs.org
	 * License: MIT
	 */
	(function(window, document, undefined) {'use strict';

	/**
	 * @description
	 *
	 * This object provides a utility for producing rich Error messages within
	 * Angular. It can be called as follows:
	 *
	 * var exampleMinErr = minErr('example');
	 * throw exampleMinErr('one', 'This {0} is {1}', foo, bar);
	 *
	 * The above creates an instance of minErr in the example namespace. The
	 * resulting error will have a namespaced error code of example.one.  The
	 * resulting error will replace {0} with the value of foo, and {1} with the
	 * value of bar. The object is not restricted in the number of arguments it can
	 * take.
	 *
	 * If fewer arguments are specified than necessary for interpolation, the extra
	 * interpolation markers will be preserved in the final string.
	 *
	 * Since data will be parsed statically during a build step, some restrictions
	 * are applied with respect to how minErr instances are created and called.
	 * Instances should have names of the form namespaceMinErr for a minErr created
	 * using minErr('namespace') . Error codes, namespaces and template strings
	 * should all be static strings, not variables or general expressions.
	 *
	 * @param {string} module The namespace to use for the new minErr instance.
	 * @param {function} ErrorConstructor Custom error constructor to be instantiated when returning
	 *   error from returned function, for cases when a particular type of error is useful.
	 * @returns {function(code:string, template:string, ...templateArgs): Error} minErr instance
	 */

	function minErr(module, ErrorConstructor) {
	  ErrorConstructor = ErrorConstructor || Error;
	  return function() {
	    var SKIP_INDEXES = 2;

	    var templateArgs = arguments,
	      code = templateArgs[0],
	      message = '[' + (module ? module + ':' : '') + code + '] ',
	      template = templateArgs[1],
	      paramPrefix, i;

	    message += template.replace(/\{\d+\}/g, function(match) {
	      var index = +match.slice(1, -1),
	        shiftedIndex = index + SKIP_INDEXES;

	      if (shiftedIndex < templateArgs.length) {
	        return toDebugString(templateArgs[shiftedIndex]);
	      }

	      return match;
	    });

	    message += '\nhttp://errors.angularjs.org/1.4.0/' +
	      (module ? module + '/' : '') + code;

	    for (i = SKIP_INDEXES, paramPrefix = '?'; i < templateArgs.length; i++, paramPrefix = '&') {
	      message += paramPrefix + 'p' + (i - SKIP_INDEXES) + '=' +
	        encodeURIComponent(toDebugString(templateArgs[i]));
	    }

	    return new ErrorConstructor(message);
	  };
	}

	/* We need to tell jshint what variables are being exported */
	/* global angular: true,
	  msie: true,
	  jqLite: true,
	  jQuery: true,
	  slice: true,
	  splice: true,
	  push: true,
	  toString: true,
	  ngMinErr: true,
	  angularModule: true,
	  uid: true,
	  REGEX_STRING_REGEXP: true,
	  VALIDITY_STATE_PROPERTY: true,

	  lowercase: true,
	  uppercase: true,
	  manualLowercase: true,
	  manualUppercase: true,
	  nodeName_: true,
	  isArrayLike: true,
	  forEach: true,
	  forEachSorted: true,
	  reverseParams: true,
	  nextUid: true,
	  setHashKey: true,
	  extend: true,
	  toInt: true,
	  inherit: true,
	  merge: true,
	  noop: true,
	  identity: true,
	  valueFn: true,
	  isUndefined: true,
	  isDefined: true,
	  isObject: true,
	  isBlankObject: true,
	  isString: true,
	  isNumber: true,
	  isDate: true,
	  isArray: true,
	  isFunction: true,
	  isRegExp: true,
	  isWindow: true,
	  isScope: true,
	  isFile: true,
	  isFormData: true,
	  isBlob: true,
	  isBoolean: true,
	  isPromiseLike: true,
	  trim: true,
	  escapeForRegexp: true,
	  isElement: true,
	  makeMap: true,
	  includes: true,
	  arrayRemove: true,
	  copy: true,
	  shallowCopy: true,
	  equals: true,
	  csp: true,
	  jq: true,
	  concat: true,
	  sliceArgs: true,
	  bind: true,
	  toJsonReplacer: true,
	  toJson: true,
	  fromJson: true,
	  convertTimezoneToLocal: true,
	  timezoneToOffset: true,
	  startingTag: true,
	  tryDecodeURIComponent: true,
	  parseKeyValue: true,
	  toKeyValue: true,
	  encodeUriSegment: true,
	  encodeUriQuery: true,
	  angularInit: true,
	  bootstrap: true,
	  getTestability: true,
	  snake_case: true,
	  bindJQuery: true,
	  assertArg: true,
	  assertArgFn: true,
	  assertNotHasOwnProperty: true,
	  getter: true,
	  getBlockNodes: true,
	  hasOwnProperty: true,
	  createMap: true,

	  NODE_TYPE_ELEMENT: true,
	  NODE_TYPE_ATTRIBUTE: true,
	  NODE_TYPE_TEXT: true,
	  NODE_TYPE_COMMENT: true,
	  NODE_TYPE_DOCUMENT: true,
	  NODE_TYPE_DOCUMENT_FRAGMENT: true,
	*/

	////////////////////////////////////

	/**
	 * @ngdoc module
	 * @name ng
	 * @module ng
	 * @description
	 *
	 * # ng (core module)
	 * The ng module is loaded by default when an AngularJS application is started. The module itself
	 * contains the essential components for an AngularJS application to function. The table below
	 * lists a high level breakdown of each of the services/factories, filters, directives and testing
	 * components available within this core module.
	 *
	 * <div doc-module-components="ng"></div>
	 */

	var REGEX_STRING_REGEXP = /^\/(.+)\/([a-z]*)$/;

	// The name of a form control's ValidityState property.
	// This is used so that it's possible for internal tests to create mock ValidityStates.
	var VALIDITY_STATE_PROPERTY = 'validity';

	/**
	 * @ngdoc function
	 * @name angular.lowercase
	 * @module ng
	 * @kind function
	 *
	 * @description Converts the specified string to lowercase.
	 * @param {string} string String to be converted to lowercase.
	 * @returns {string} Lowercased string.
	 */
	var lowercase = function(string) {return isString(string) ? string.toLowerCase() : string;};
	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * @ngdoc function
	 * @name angular.uppercase
	 * @module ng
	 * @kind function
	 *
	 * @description Converts the specified string to uppercase.
	 * @param {string} string String to be converted to uppercase.
	 * @returns {string} Uppercased string.
	 */
	var uppercase = function(string) {return isString(string) ? string.toUpperCase() : string;};


	var manualLowercase = function(s) {
	  /* jshint bitwise: false */
	  return isString(s)
	      ? s.replace(/[A-Z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) | 32);})
	      : s;
	};
	var manualUppercase = function(s) {
	  /* jshint bitwise: false */
	  return isString(s)
	      ? s.replace(/[a-z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) & ~32);})
	      : s;
	};


	// String#toLowerCase and String#toUpperCase don't produce correct results in browsers with Turkish
	// locale, for this reason we need to detect this case and redefine lowercase/uppercase methods
	// with correct but slower alternatives.
	if ('i' !== 'I'.toLowerCase()) {
	  lowercase = manualLowercase;
	  uppercase = manualUppercase;
	}


	var
	    msie,             // holds major version number for IE, or NaN if UA is not IE.
	    jqLite,           // delay binding since jQuery could be loaded after us.
	    jQuery,           // delay binding
	    slice             = [].slice,
	    splice            = [].splice,
	    push              = [].push,
	    toString          = Object.prototype.toString,
	    getPrototypeOf    = Object.getPrototypeOf,
	    ngMinErr          = minErr('ng'),

	    /** @name angular */
	    angular           = window.angular || (window.angular = {}),
	    angularModule,
	    uid               = 0;

	/**
	 * documentMode is an IE-only property
	 * http://msdn.microsoft.com/en-us/library/ie/cc196988(v=vs.85).aspx
	 */
	msie = document.documentMode;


	/**
	 * @private
	 * @param {*} obj
	 * @return {boolean} Returns true if `obj` is an array or array-like object (NodeList, Arguments,
	 *                   String ...)
	 */
	function isArrayLike(obj) {
	  if (obj == null || isWindow(obj)) {
	    return false;
	  }

	  // Support: iOS 8.2 (not reproducible in simulator)
	  // "length" in obj used to prevent JIT error (gh-11508)
	  var length = "length" in Object(obj) && obj.length;

	  if (obj.nodeType === NODE_TYPE_ELEMENT && length) {
	    return true;
	  }

	  return isString(obj) || isArray(obj) || length === 0 ||
	         typeof length === 'number' && length > 0 && (length - 1) in obj;
	}

	/**
	 * @ngdoc function
	 * @name angular.forEach
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Invokes the `iterator` function once for each item in `obj` collection, which can be either an
	 * object or an array. The `iterator` function is invoked with `iterator(value, key, obj)`, where `value`
	 * is the value of an object property or an array element, `key` is the object property key or
	 * array element index and obj is the `obj` itself. Specifying a `context` for the function is optional.
	 *
	 * It is worth noting that `.forEach` does not iterate over inherited properties because it filters
	 * using the `hasOwnProperty` method.
	 *
	 * Unlike ES262's
	 * [Array.prototype.forEach](http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.18),
	 * Providing 'undefined' or 'null' values for `obj` will not throw a TypeError, but rather just
	 * return the value provided.
	 *
	   ```js
	     var values = {name: 'misko', gender: 'male'};
	     var log = [];
	     angular.forEach(values, function(value, key) {
	       this.push(key + ': ' + value);
	     }, log);
	     expect(log).toEqual(['name: misko', 'gender: male']);
	   ```
	 *
	 * @param {Object|Array} obj Object to iterate over.
	 * @param {Function} iterator Iterator function.
	 * @param {Object=} context Object to become context (`this`) for the iterator function.
	 * @returns {Object|Array} Reference to `obj`.
	 */

	function forEach(obj, iterator, context) {
	  var key, length;
	  if (obj) {
	    if (isFunction(obj)) {
	      for (key in obj) {
	        // Need to check if hasOwnProperty exists,
	        // as on IE8 the result of querySelectorAll is an object without a hasOwnProperty function
	        if (key != 'prototype' && key != 'length' && key != 'name' && (!obj.hasOwnProperty || obj.hasOwnProperty(key))) {
	          iterator.call(context, obj[key], key, obj);
	        }
	      }
	    } else if (isArray(obj) || isArrayLike(obj)) {
	      var isPrimitive = typeof obj !== 'object';
	      for (key = 0, length = obj.length; key < length; key++) {
	        if (isPrimitive || key in obj) {
	          iterator.call(context, obj[key], key, obj);
	        }
	      }
	    } else if (obj.forEach && obj.forEach !== forEach) {
	        obj.forEach(iterator, context, obj);
	    } else if (isBlankObject(obj)) {
	      // createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty
	      for (key in obj) {
	        iterator.call(context, obj[key], key, obj);
	      }
	    } else if (typeof obj.hasOwnProperty === 'function') {
	      // Slow path for objects inheriting Object.prototype, hasOwnProperty check needed
	      for (key in obj) {
	        if (obj.hasOwnProperty(key)) {
	          iterator.call(context, obj[key], key, obj);
	        }
	      }
	    } else {
	      // Slow path for objects which do not have a method `hasOwnProperty`
	      for (key in obj) {
	        if (hasOwnProperty.call(obj, key)) {
	          iterator.call(context, obj[key], key, obj);
	        }
	      }
	    }
	  }
	  return obj;
	}

	function forEachSorted(obj, iterator, context) {
	  var keys = Object.keys(obj).sort();
	  for (var i = 0; i < keys.length; i++) {
	    iterator.call(context, obj[keys[i]], keys[i]);
	  }
	  return keys;
	}


	/**
	 * when using forEach the params are value, key, but it is often useful to have key, value.
	 * @param {function(string, *)} iteratorFn
	 * @returns {function(*, string)}
	 */
	function reverseParams(iteratorFn) {
	  return function(value, key) { iteratorFn(key, value); };
	}

	/**
	 * A consistent way of creating unique IDs in angular.
	 *
	 * Using simple numbers allows us to generate 28.6 million unique ids per second for 10 years before
	 * we hit number precision issues in JavaScript.
	 *
	 * Math.pow(2,53) / 60 / 60 / 24 / 365 / 10 = 28.6M
	 *
	 * @returns {number} an unique alpha-numeric string
	 */
	function nextUid() {
	  return ++uid;
	}


	/**
	 * Set or clear the hashkey for an object.
	 * @param obj object
	 * @param h the hashkey (!truthy to delete the hashkey)
	 */
	function setHashKey(obj, h) {
	  if (h) {
	    obj.$$hashKey = h;
	  } else {
	    delete obj.$$hashKey;
	  }
	}


	function baseExtend(dst, objs, deep) {
	  var h = dst.$$hashKey;

	  for (var i = 0, ii = objs.length; i < ii; ++i) {
	    var obj = objs[i];
	    if (!isObject(obj) && !isFunction(obj)) continue;
	    var keys = Object.keys(obj);
	    for (var j = 0, jj = keys.length; j < jj; j++) {
	      var key = keys[j];
	      var src = obj[key];

	      if (deep && isObject(src)) {
	        if (!isObject(dst[key])) dst[key] = isArray(src) ? [] : {};
	        baseExtend(dst[key], [src], true);
	      } else {
	        dst[key] = src;
	      }
	    }
	  }

	  setHashKey(dst, h);
	  return dst;
	}

	/**
	 * @ngdoc function
	 * @name angular.extend
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Extends the destination object `dst` by copying own enumerable properties from the `src` object(s)
	 * to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so
	 * by passing an empty object as the target: `var object = angular.extend({}, object1, object2)`.
	 *
	 * **Note:** Keep in mind that `angular.extend` does not support recursive merge (deep copy). Use
	 * {@link angular.merge} for this.
	 *
	 * @param {Object} dst Destination object.
	 * @param {...Object} src Source object(s).
	 * @returns {Object} Reference to `dst`.
	 */
	function extend(dst) {
	  return baseExtend(dst, slice.call(arguments, 1), false);
	}


	/**
	* @ngdoc function
	* @name angular.merge
	* @module ng
	* @kind function
	*
	* @description
	* Deeply extends the destination object `dst` by copying own enumerable properties from the `src` object(s)
	* to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so
	* by passing an empty object as the target: `var object = angular.merge({}, object1, object2)`.
	*
	* Unlike {@link angular.extend extend()}, `merge()` recursively descends into object properties of source
	* objects, performing a deep copy.
	*
	* @param {Object} dst Destination object.
	* @param {...Object} src Source object(s).
	* @returns {Object} Reference to `dst`.
	*/
	function merge(dst) {
	  return baseExtend(dst, slice.call(arguments, 1), true);
	}



	function toInt(str) {
	  return parseInt(str, 10);
	}


	function inherit(parent, extra) {
	  return extend(Object.create(parent), extra);
	}

	/**
	 * @ngdoc function
	 * @name angular.noop
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * A function that performs no operations. This function can be useful when writing code in the
	 * functional style.
	   ```js
	     function foo(callback) {
	       var result = calculateResult();
	       (callback || angular.noop)(result);
	     }
	   ```
	 */
	function noop() {}
	noop.$inject = [];


	/**
	 * @ngdoc function
	 * @name angular.identity
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * A function that returns its first argument. This function is useful when writing code in the
	 * functional style.
	 *
	   ```js
	     function transformer(transformationFn, value) {
	       return (transformationFn || angular.identity)(value);
	     };
	   ```
	  * @param {*} value to be returned.
	  * @returns {*} the value passed in.
	 */
	function identity($) {return $;}
	identity.$inject = [];


	function valueFn(value) {return function() {return value;};}

	/**
	 * @ngdoc function
	 * @name angular.isUndefined
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is undefined.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is undefined.
	 */
	function isUndefined(value) {return typeof value === 'undefined';}


	/**
	 * @ngdoc function
	 * @name angular.isDefined
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is defined.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is defined.
	 */
	function isDefined(value) {return typeof value !== 'undefined';}


	/**
	 * @ngdoc function
	 * @name angular.isObject
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is an `Object`. Unlike `typeof` in JavaScript, `null`s are not
	 * considered to be objects. Note that JavaScript arrays are objects.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is an `Object` but not `null`.
	 */
	function isObject(value) {
	  // http://jsperf.com/isobject4
	  return value !== null && typeof value === 'object';
	}


	/**
	 * Determine if a value is an object with a null prototype
	 *
	 * @returns {boolean} True if `value` is an `Object` with a null prototype
	 */
	function isBlankObject(value) {
	  return value !== null && typeof value === 'object' && !getPrototypeOf(value);
	}


	/**
	 * @ngdoc function
	 * @name angular.isString
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is a `String`.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `String`.
	 */
	function isString(value) {return typeof value === 'string';}


	/**
	 * @ngdoc function
	 * @name angular.isNumber
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is a `Number`.
	 *
	 * This includes the "special" numbers `NaN`, `+Infinity` and `-Infinity`.
	 *
	 * If you wish to exclude these then you can use the native
	 * [`isFinite'](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite)
	 * method.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `Number`.
	 */
	function isNumber(value) {return typeof value === 'number';}


	/**
	 * @ngdoc function
	 * @name angular.isDate
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a value is a date.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `Date`.
	 */
	function isDate(value) {
	  return toString.call(value) === '[object Date]';
	}


	/**
	 * @ngdoc function
	 * @name angular.isArray
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is an `Array`.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is an `Array`.
	 */
	var isArray = Array.isArray;

	/**
	 * @ngdoc function
	 * @name angular.isFunction
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is a `Function`.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `Function`.
	 */
	function isFunction(value) {return typeof value === 'function';}


	/**
	 * Determines if a value is a regular expression object.
	 *
	 * @private
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `RegExp`.
	 */
	function isRegExp(value) {
	  return toString.call(value) === '[object RegExp]';
	}


	/**
	 * Checks if `obj` is a window object.
	 *
	 * @private
	 * @param {*} obj Object to check
	 * @returns {boolean} True if `obj` is a window obj.
	 */
	function isWindow(obj) {
	  return obj && obj.window === obj;
	}


	function isScope(obj) {
	  return obj && obj.$evalAsync && obj.$watch;
	}


	function isFile(obj) {
	  return toString.call(obj) === '[object File]';
	}


	function isFormData(obj) {
	  return toString.call(obj) === '[object FormData]';
	}


	function isBlob(obj) {
	  return toString.call(obj) === '[object Blob]';
	}


	function isBoolean(value) {
	  return typeof value === 'boolean';
	}


	function isPromiseLike(obj) {
	  return obj && isFunction(obj.then);
	}


	var TYPED_ARRAY_REGEXP = /^\[object (Uint8(Clamped)?)|(Uint16)|(Uint32)|(Int8)|(Int16)|(Int32)|(Float(32)|(64))Array\]$/;
	function isTypedArray(value) {
	  return TYPED_ARRAY_REGEXP.test(toString.call(value));
	}


	var trim = function(value) {
	  return isString(value) ? value.trim() : value;
	};

	// Copied from:
	// http://docs.closure-library.googlecode.com/git/local_closure_goog_string_string.js.source.html#line1021
	// Prereq: s is a string.
	var escapeForRegexp = function(s) {
	  return s.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, '\\$1').
	           replace(/\x08/g, '\\x08');
	};


	/**
	 * @ngdoc function
	 * @name angular.isElement
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is a DOM element (or wrapped jQuery element).
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a DOM element (or wrapped jQuery element).
	 */
	function isElement(node) {
	  return !!(node &&
	    (node.nodeName  // we are a direct element
	    || (node.prop && node.attr && node.find)));  // we have an on and find method part of jQuery API
	}

	/**
	 * @param str 'key1,key2,...'
	 * @returns {object} in the form of {key1:true, key2:true, ...}
	 */
	function makeMap(str) {
	  var obj = {}, items = str.split(","), i;
	  for (i = 0; i < items.length; i++) {
	    obj[items[i]] = true;
	  }
	  return obj;
	}


	function nodeName_(element) {
	  return lowercase(element.nodeName || (element[0] && element[0].nodeName));
	}

	function includes(array, obj) {
	  return Array.prototype.indexOf.call(array, obj) != -1;
	}

	function arrayRemove(array, value) {
	  var index = array.indexOf(value);
	  if (index >= 0) {
	    array.splice(index, 1);
	  }
	  return index;
	}

	/**
	 * @ngdoc function
	 * @name angular.copy
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Creates a deep copy of `source`, which should be an object or an array.
	 *
	 * * If no destination is supplied, a copy of the object or array is created.
	 * * If a destination is provided, all of its elements (for arrays) or properties (for objects)
	 *   are deleted and then all elements/properties from the source are copied to it.
	 * * If `source` is not an object or array (inc. `null` and `undefined`), `source` is returned.
	 * * If `source` is identical to 'destination' an exception will be thrown.
	 *
	 * @param {*} source The source that will be used to make a copy.
	 *                   Can be any type, including primitives, `null`, and `undefined`.
	 * @param {(Object|Array)=} destination Destination into which the source is copied. If
	 *     provided, must be of the same type as `source`.
	 * @returns {*} The copy or updated `destination`, if `destination` was specified.
	 *
	 * @example
	 <example module="copyExample">
	 <file name="index.html">
	 <div ng-controller="ExampleController">
	 <form novalidate class="simple-form">
	 Name: <input type="text" ng-model="user.name" /><br />
	 E-mail: <input type="email" ng-model="user.email" /><br />
	 Gender: <input type="radio" ng-model="user.gender" value="male" />male
	 <input type="radio" ng-model="user.gender" value="female" />female<br />
	 <button ng-click="reset()">RESET</button>
	 <button ng-click="update(user)">SAVE</button>
	 </form>
	 <pre>form = {{user | json}}</pre>
	 <pre>master = {{master | json}}</pre>
	 </div>

	 <script>
	  angular.module('copyExample', [])
	    .controller('ExampleController', ['$scope', function($scope) {
	      $scope.master= {};

	      $scope.update = function(user) {
	        // Example with 1 argument
	        $scope.master= angular.copy(user);
	      };

	      $scope.reset = function() {
	        // Example with 2 arguments
	        angular.copy($scope.master, $scope.user);
	      };

	      $scope.reset();
	    }]);
	 </script>
	 </file>
	 </example>
	 */
	function copy(source, destination, stackSource, stackDest) {
	  if (isWindow(source) || isScope(source)) {
	    throw ngMinErr('cpws',
	      "Can't copy! Making copies of Window or Scope instances is not supported.");
	  }
	  if (isTypedArray(destination)) {
	    throw ngMinErr('cpta',
	      "Can't copy! TypedArray destination cannot be mutated.");
	  }

	  if (!destination) {
	    destination = source;
	    if (source) {
	      if (isArray(source)) {
	        destination = copy(source, [], stackSource, stackDest);
	      } else if (isTypedArray(source)) {
	        destination = new source.constructor(source);
	      } else if (isDate(source)) {
	        destination = new Date(source.getTime());
	      } else if (isRegExp(source)) {
	        destination = new RegExp(source.source, source.toString().match(/[^\/]*$/)[0]);
	        destination.lastIndex = source.lastIndex;
	      } else if (isObject(source)) {
	        var emptyObject = Object.create(getPrototypeOf(source));
	        destination = copy(source, emptyObject, stackSource, stackDest);
	      }
	    }
	  } else {
	    if (source === destination) throw ngMinErr('cpi',
	      "Can't copy! Source and destination are identical.");

	    stackSource = stackSource || [];
	    stackDest = stackDest || [];

	    if (isObject(source)) {
	      var index = stackSource.indexOf(source);
	      if (index !== -1) return stackDest[index];

	      stackSource.push(source);
	      stackDest.push(destination);
	    }

	    var result, key;
	    if (isArray(source)) {
	      destination.length = 0;
	      for (var i = 0; i < source.length; i++) {
	        result = copy(source[i], null, stackSource, stackDest);
	        if (isObject(source[i])) {
	          stackSource.push(source[i]);
	          stackDest.push(result);
	        }
	        destination.push(result);
	      }
	    } else {
	      var h = destination.$$hashKey;
	      if (isArray(destination)) {
	        destination.length = 0;
	      } else {
	        forEach(destination, function(value, key) {
	          delete destination[key];
	        });
	      }
	      if (isBlankObject(source)) {
	        // createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty
	        for (key in source) {
	          putValue(key, source[key], destination, stackSource, stackDest);
	        }
	      } else if (source && typeof source.hasOwnProperty === 'function') {
	        // Slow path, which must rely on hasOwnProperty
	        for (key in source) {
	          if (source.hasOwnProperty(key)) {
	            putValue(key, source[key], destination, stackSource, stackDest);
	          }
	        }
	      } else {
	        // Slowest path --- hasOwnProperty can't be called as a method
	        for (key in source) {
	          if (hasOwnProperty.call(source, key)) {
	            putValue(key, source[key], destination, stackSource, stackDest);
	          }
	        }
	      }
	      setHashKey(destination,h);
	    }
	  }
	  return destination;

	  function putValue(key, val, destination, stackSource, stackDest) {
	    // No context allocation, trivial outer scope, easily inlined
	    var result = copy(val, null, stackSource, stackDest);
	    if (isObject(val)) {
	      stackSource.push(val);
	      stackDest.push(result);
	    }
	    destination[key] = result;
	  }
	}

	/**
	 * Creates a shallow copy of an object, an array or a primitive.
	 *
	 * Assumes that there are no proto properties for objects.
	 */
	function shallowCopy(src, dst) {
	  if (isArray(src)) {
	    dst = dst || [];

	    for (var i = 0, ii = src.length; i < ii; i++) {
	      dst[i] = src[i];
	    }
	  } else if (isObject(src)) {
	    dst = dst || {};

	    for (var key in src) {
	      if (!(key.charAt(0) === '$' && key.charAt(1) === '$')) {
	        dst[key] = src[key];
	      }
	    }
	  }

	  return dst || src;
	}


	/**
	 * @ngdoc function
	 * @name angular.equals
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if two objects or two values are equivalent. Supports value types, regular
	 * expressions, arrays and objects.
	 *
	 * Two objects or values are considered equivalent if at least one of the following is true:
	 *
	 * * Both objects or values pass `===` comparison.
	 * * Both objects or values are of the same type and all of their properties are equal by
	 *   comparing them with `angular.equals`.
	 * * Both values are NaN. (In JavaScript, NaN == NaN => false. But we consider two NaN as equal)
	 * * Both values represent the same regular expression (In JavaScript,
	 *   /abc/ == /abc/ => false. But we consider two regular expressions as equal when their textual
	 *   representation matches).
	 *
	 * During a property comparison, properties of `function` type and properties with names
	 * that begin with `$` are ignored.
	 *
	 * Scope and DOMWindow objects are being compared only by identify (`===`).
	 *
	 * @param {*} o1 Object or value to compare.
	 * @param {*} o2 Object or value to compare.
	 * @returns {boolean} True if arguments are equal.
	 */
	function equals(o1, o2) {
	  if (o1 === o2) return true;
	  if (o1 === null || o2 === null) return false;
	  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN
	  var t1 = typeof o1, t2 = typeof o2, length, key, keySet;
	  if (t1 == t2) {
	    if (t1 == 'object') {
	      if (isArray(o1)) {
	        if (!isArray(o2)) return false;
	        if ((length = o1.length) == o2.length) {
	          for (key = 0; key < length; key++) {
	            if (!equals(o1[key], o2[key])) return false;
	          }
	          return true;
	        }
	      } else if (isDate(o1)) {
	        if (!isDate(o2)) return false;
	        return equals(o1.getTime(), o2.getTime());
	      } else if (isRegExp(o1)) {
	        return isRegExp(o2) ? o1.toString() == o2.toString() : false;
	      } else {
	        if (isScope(o1) || isScope(o2) || isWindow(o1) || isWindow(o2) ||
	          isArray(o2) || isDate(o2) || isRegExp(o2)) return false;
	        keySet = createMap();
	        for (key in o1) {
	          if (key.charAt(0) === '$' || isFunction(o1[key])) continue;
	          if (!equals(o1[key], o2[key])) return false;
	          keySet[key] = true;
	        }
	        for (key in o2) {
	          if (!(key in keySet) &&
	              key.charAt(0) !== '$' &&
	              o2[key] !== undefined &&
	              !isFunction(o2[key])) return false;
	        }
	        return true;
	      }
	    }
	  }
	  return false;
	}

	var csp = function() {
	  if (isDefined(csp.isActive_)) return csp.isActive_;

	  var active = !!(document.querySelector('[ng-csp]') ||
	                  document.querySelector('[data-ng-csp]'));

	  if (!active) {
	    try {
	      /* jshint -W031, -W054 */
	      new Function('');
	      /* jshint +W031, +W054 */
	    } catch (e) {
	      active = true;
	    }
	  }

	  return (csp.isActive_ = active);
	};

	/**
	 * @ngdoc directive
	 * @module ng
	 * @name ngJq
	 *
	 * @element ANY
	 * @param {string=} ngJq the name of the library available under `window`
	 * to be used for angular.element
	 * @description
	 * Use this directive to force the angular.element library.  This should be
	 * used to force either jqLite by leaving ng-jq blank or setting the name of
	 * the jquery variable under window (eg. jQuery).
	 *
	 * Since angular looks for this directive when it is loaded (doesn't wait for the
	 * DOMContentLoaded event), it must be placed on an element that comes before the script
	 * which loads angular. Also, only the first instance of `ng-jq` will be used and all
	 * others ignored.
	 *
	 * @example
	 * This example shows how to force jqLite using the `ngJq` directive to the `html` tag.
	 ```html
	 <!doctype html>
	 <html ng-app ng-jq>
	 ...
	 ...
	 </html>
	 ```
	 * @example
	 * This example shows how to use a jQuery based library of a different name.
	 * The library name must be available at the top most 'window'.
	 ```html
	 <!doctype html>
	 <html ng-app ng-jq="jQueryLib">
	 ...
	 ...
	 </html>
	 ```
	 */
	var jq = function() {
	  if (isDefined(jq.name_)) return jq.name_;
	  var el;
	  var i, ii = ngAttrPrefixes.length, prefix, name;
	  for (i = 0; i < ii; ++i) {
	    prefix = ngAttrPrefixes[i];
	    if (el = document.querySelector('[' + prefix.replace(':', '\\:') + 'jq]')) {
	      name = el.getAttribute(prefix + 'jq');
	      break;
	    }
	  }

	  return (jq.name_ = name);
	};

	function concat(array1, array2, index) {
	  return array1.concat(slice.call(array2, index));
	}

	function sliceArgs(args, startIndex) {
	  return slice.call(args, startIndex || 0);
	}


	/* jshint -W101 */
	/**
	 * @ngdoc function
	 * @name angular.bind
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Returns a function which calls function `fn` bound to `self` (`self` becomes the `this` for
	 * `fn`). You can supply optional `args` that are prebound to the function. This feature is also
	 * known as [partial application](http://en.wikipedia.org/wiki/Partial_application), as
	 * distinguished from [function currying](http://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application).
	 *
	 * @param {Object} self Context which `fn` should be evaluated in.
	 * @param {function()} fn Function to be bound.
	 * @param {...*} args Optional arguments to be prebound to the `fn` function call.
	 * @returns {function()} Function that wraps the `fn` with all the specified bindings.
	 */
	/* jshint +W101 */
	function bind(self, fn) {
	  var curryArgs = arguments.length > 2 ? sliceArgs(arguments, 2) : [];
	  if (isFunction(fn) && !(fn instanceof RegExp)) {
	    return curryArgs.length
	      ? function() {
	          return arguments.length
	            ? fn.apply(self, concat(curryArgs, arguments, 0))
	            : fn.apply(self, curryArgs);
	        }
	      : function() {
	          return arguments.length
	            ? fn.apply(self, arguments)
	            : fn.call(self);
	        };
	  } else {
	    // in IE, native methods are not functions so they cannot be bound (note: they don't need to be)
	    return fn;
	  }
	}


	function toJsonReplacer(key, value) {
	  var val = value;

	  if (typeof key === 'string' && key.charAt(0) === '$' && key.charAt(1) === '$') {
	    val = undefined;
	  } else if (isWindow(value)) {
	    val = '$WINDOW';
	  } else if (value &&  document === value) {
	    val = '$DOCUMENT';
	  } else if (isScope(value)) {
	    val = '$SCOPE';
	  }

	  return val;
	}


	/**
	 * @ngdoc function
	 * @name angular.toJson
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Serializes input into a JSON-formatted string. Properties with leading $$ characters will be
	 * stripped since angular uses this notation internally.
	 *
	 * @param {Object|Array|Date|string|number} obj Input to be serialized into JSON.
	 * @param {boolean|number} [pretty=2] If set to true, the JSON output will contain newlines and whitespace.
	 *    If set to an integer, the JSON output will contain that many spaces per indentation.
	 * @returns {string|undefined} JSON-ified string representing `obj`.
	 */
	function toJson(obj, pretty) {
	  if (typeof obj === 'undefined') return undefined;
	  if (!isNumber(pretty)) {
	    pretty = pretty ? 2 : null;
	  }
	  return JSON.stringify(obj, toJsonReplacer, pretty);
	}


	/**
	 * @ngdoc function
	 * @name angular.fromJson
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Deserializes a JSON string.
	 *
	 * @param {string} json JSON string to deserialize.
	 * @returns {Object|Array|string|number} Deserialized JSON string.
	 */
	function fromJson(json) {
	  return isString(json)
	      ? JSON.parse(json)
	      : json;
	}


	function timezoneToOffset(timezone, fallback) {
	  var requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;
	  return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;
	}


	function addDateMinutes(date, minutes) {
	  date = new Date(date.getTime());
	  date.setMinutes(date.getMinutes() + minutes);
	  return date;
	}


	function convertTimezoneToLocal(date, timezone, reverse) {
	  reverse = reverse ? -1 : 1;
	  var timezoneOffset = timezoneToOffset(timezone, date.getTimezoneOffset());
	  return addDateMinutes(date, reverse * (timezoneOffset - date.getTimezoneOffset()));
	}


	/**
	 * @returns {string} Returns the string representation of the element.
	 */
	function startingTag(element) {
	  element = jqLite(element).clone();
	  try {
	    // turns out IE does not let you set .html() on elements which
	    // are not allowed to have children. So we just ignore it.
	    element.empty();
	  } catch (e) {}
	  var elemHtml = jqLite('<div>').append(element).html();
	  try {
	    return element[0].nodeType === NODE_TYPE_TEXT ? lowercase(elemHtml) :
	        elemHtml.
	          match(/^(<[^>]+>)/)[1].
	          replace(/^<([\w\-]+)/, function(match, nodeName) { return '<' + lowercase(nodeName); });
	  } catch (e) {
	    return lowercase(elemHtml);
	  }

	}


	/////////////////////////////////////////////////

	/**
	 * Tries to decode the URI component without throwing an exception.
	 *
	 * @private
	 * @param str value potential URI component to check.
	 * @returns {boolean} True if `value` can be decoded
	 * with the decodeURIComponent function.
	 */
	function tryDecodeURIComponent(value) {
	  try {
	    return decodeURIComponent(value);
	  } catch (e) {
	    // Ignore any invalid uri component
	  }
	}


	/**
	 * Parses an escaped url query string into key-value pairs.
	 * @returns {Object.<string,boolean|Array>}
	 */
	function parseKeyValue(/**string*/keyValue) {
	  var obj = {}, key_value, key;
	  forEach((keyValue || "").split('&'), function(keyValue) {
	    if (keyValue) {
	      key_value = keyValue.replace(/\+/g,'%20').split('=');
	      key = tryDecodeURIComponent(key_value[0]);
	      if (isDefined(key)) {
	        var val = isDefined(key_value[1]) ? tryDecodeURIComponent(key_value[1]) : true;
	        if (!hasOwnProperty.call(obj, key)) {
	          obj[key] = val;
	        } else if (isArray(obj[key])) {
	          obj[key].push(val);
	        } else {
	          obj[key] = [obj[key],val];
	        }
	      }
	    }
	  });
	  return obj;
	}

	function toKeyValue(obj) {
	  var parts = [];
	  forEach(obj, function(value, key) {
	    if (isArray(value)) {
	      forEach(value, function(arrayValue) {
	        parts.push(encodeUriQuery(key, true) +
	                   (arrayValue === true ? '' : '=' + encodeUriQuery(arrayValue, true)));
	      });
	    } else {
	    parts.push(encodeUriQuery(key, true) +
	               (value === true ? '' : '=' + encodeUriQuery(value, true)));
	    }
	  });
	  return parts.length ? parts.join('&') : '';
	}


	/**
	 * We need our custom method because encodeURIComponent is too aggressive and doesn't follow
	 * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path
	 * segments:
	 *    segment       = *pchar
	 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
	 *    pct-encoded   = "%" HEXDIG HEXDIG
	 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
	 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
	 *                     / "*" / "+" / "," / ";" / "="
	 */
	function encodeUriSegment(val) {
	  return encodeUriQuery(val, true).
	             replace(/%26/gi, '&').
	             replace(/%3D/gi, '=').
	             replace(/%2B/gi, '+');
	}


	/**
	 * This method is intended for encoding *key* or *value* parts of query component. We need a custom
	 * method because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be
	 * encoded per http://tools.ietf.org/html/rfc3986:
	 *    query       = *( pchar / "/" / "?" )
	 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
	 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
	 *    pct-encoded   = "%" HEXDIG HEXDIG
	 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
	 *                     / "*" / "+" / "," / ";" / "="
	 */
	function encodeUriQuery(val, pctEncodeSpaces) {
	  return encodeURIComponent(val).
	             replace(/%40/gi, '@').
	             replace(/%3A/gi, ':').
	             replace(/%24/g, '$').
	             replace(/%2C/gi, ',').
	             replace(/%3B/gi, ';').
	             replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));
	}

	var ngAttrPrefixes = ['ng-', 'data-ng-', 'ng:', 'x-ng-'];

	function getNgAttribute(element, ngAttr) {
	  var attr, i, ii = ngAttrPrefixes.length;
	  for (i = 0; i < ii; ++i) {
	    attr = ngAttrPrefixes[i] + ngAttr;
	    if (isString(attr = element.getAttribute(attr))) {
	      return attr;
	    }
	  }
	  return null;
	}

	/**
	 * @ngdoc directive
	 * @name ngApp
	 * @module ng
	 *
	 * @element ANY
	 * @param {angular.Module} ngApp an optional application
	 *   {@link angular.module module} name to load.
	 * @param {boolean=} ngStrictDi if this attribute is present on the app element, the injector will be
	 *   created in "strict-di" mode. This means that the application will fail to invoke functions which
	 *   do not use explicit function annotation (and are thus unsuitable for minification), as described
	 *   in {@link guide/di the Dependency Injection guide}, and useful debugging info will assist in
	 *   tracking down the root of these bugs.
	 *
	 * @description
	 *
	 * Use this directive to **auto-bootstrap** an AngularJS application. The `ngApp` directive
	 * designates the **root element** of the application and is typically placed near the root element
	 * of the page - e.g. on the `<body>` or `<html>` tags.
	 *
	 * Only one AngularJS application can be auto-bootstrapped per HTML document. The first `ngApp`
	 * found in the document will be used to define the root element to auto-bootstrap as an
	 * application. To run multiple applications in an HTML document you must manually bootstrap them using
	 * {@link angular.bootstrap} instead. AngularJS applications cannot be nested within each other.
	 *
	 * You can specify an **AngularJS module** to be used as the root module for the application.  This
	 * module will be loaded into the {@link auto.$injector} when the application is bootstrapped. It
	 * should contain the application code needed or have dependencies on other modules that will
	 * contain the code. See {@link angular.module} for more information.
	 *
	 * In the example below if the `ngApp` directive were not placed on the `html` element then the
	 * document would not be compiled, the `AppController` would not be instantiated and the `{{ a+b }}`
	 * would not be resolved to `3`.
	 *
	 * `ngApp` is the easiest, and most common way to bootstrap an application.
	 *
	 <example module="ngAppDemo">
	   <file name="index.html">
	   <div ng-controller="ngAppDemoController">
	     I can add: {{a}} + {{b}} =  {{ a+b }}
	   </div>
	   </file>
	   <file name="script.js">
	   angular.module('ngAppDemo', []).controller('ngAppDemoController', function($scope) {
	     $scope.a = 1;
	     $scope.b = 2;
	   });
	   </file>
	 </example>
	 *
	 * Using `ngStrictDi`, you would see something like this:
	 *
	 <example ng-app-included="true">
	   <file name="index.html">
	   <div ng-app="ngAppStrictDemo" ng-strict-di>
	       <div ng-controller="GoodController1">
	           I can add: {{a}} + {{b}} =  {{ a+b }}

	           <p>This renders because the controller does not fail to
	              instantiate, by using explicit annotation style (see
	              script.js for details)
	           </p>
	       </div>

	       <div ng-controller="GoodController2">
	           Name: <input ng-model="name"><br />
	           Hello, {{name}}!

	           <p>This renders because the controller does not fail to
	              instantiate, by using explicit annotation style
	              (see script.js for details)
	           </p>
	       </div>

	       <div ng-controller="BadController">
	           I can add: {{a}} + {{b}} =  {{ a+b }}

	           <p>The controller could not be instantiated, due to relying
	              on automatic function annotations (which are disabled in
	              strict mode). As such, the content of this section is not
	              interpolated, and there should be an error in your web console.
	           </p>
	       </div>
	   </div>
	   </file>
	   <file name="script.js">
	   angular.module('ngAppStrictDemo', [])
	     // BadController will fail to instantiate, due to relying on automatic function annotation,
	     // rather than an explicit annotation
	     .controller('BadController', function($scope) {
	       $scope.a = 1;
	       $scope.b = 2;
	     })
	     // Unlike BadController, GoodController1 and GoodController2 will not fail to be instantiated,
	     // due to using explicit annotations using the array style and $inject property, respectively.
	     .controller('GoodController1', ['$scope', function($scope) {
	       $scope.a = 1;
	       $scope.b = 2;
	     }])
	     .controller('GoodController2', GoodController2);
	     function GoodController2($scope) {
	       $scope.name = "World";
	     }
	     GoodController2.$inject = ['$scope'];
	   </file>
	   <file name="style.css">
	   div[ng-controller] {
	       margin-bottom: 1em;
	       -webkit-border-radius: 4px;
	       border-radius: 4px;
	       border: 1px solid;
	       padding: .5em;
	   }
	   div[ng-controller^=Good] {
	       border-color: #d6e9c6;
	       background-color: #dff0d8;
	       color: #3c763d;
	   }
	   div[ng-controller^=Bad] {
	       border-color: #ebccd1;
	       background-color: #f2dede;
	       color: #a94442;
	       margin-bottom: 0;
	   }
	   </file>
	 </example>
	 */
	function angularInit(element, bootstrap) {
	  var appElement,
	      module,
	      config = {};

	  // The element `element` has priority over any other element
	  forEach(ngAttrPrefixes, function(prefix) {
	    var name = prefix + 'app';

	    if (!appElement && element.hasAttribute && element.hasAttribute(name)) {
	      appElement = element;
	      module = element.getAttribute(name);
	    }
	  });
	  forEach(ngAttrPrefixes, function(prefix) {
	    var name = prefix + 'app';
	    var candidate;

	    if (!appElement && (candidate = element.querySelector('[' + name.replace(':', '\\:') + ']'))) {
	      appElement = candidate;
	      module = candidate.getAttribute(name);
	    }
	  });
	  if (appElement) {
	    config.strictDi = getNgAttribute(appElement, "strict-di") !== null;
	    bootstrap(appElement, module ? [module] : [], config);
	  }
	}

	/**
	 * @ngdoc function
	 * @name angular.bootstrap
	 * @module ng
	 * @description
	 * Use this function to manually start up angular application.
	 *
	 * See: {@link guide/bootstrap Bootstrap}
	 *
	 * Note that Protractor based end-to-end tests cannot use this function to bootstrap manually.
	 * They must use {@link ng.directive:ngApp ngApp}.
	 *
	 * Angular will detect if it has been loaded into the browser more than once and only allow the
	 * first loaded script to be bootstrapped and will report a warning to the browser console for
	 * each of the subsequent scripts. This prevents strange results in applications, where otherwise
	 * multiple instances of Angular try to work on the DOM.
	 *
	 * ```html
	 * <!doctype html>
	 * <html>
	 * <body>
	 * <div ng-controller="WelcomeController">
	 *   {{greeting}}
	 * </div>
	 *
	 * <script src="angular.js"></script>
	 * <script>
	 *   var app = angular.module('demo', [])
	 *   .controller('WelcomeController', function($scope) {
	 *       $scope.greeting = 'Welcome!';
	 *   });
	 *   angular.bootstrap(document, ['demo']);
	 * </script>
	 * </body>
	 * </html>
	 * ```
	 *
	 * @param {DOMElement} element DOM element which is the root of angular application.
	 * @param {Array<String|Function|Array>=} modules an array of modules to load into the application.
	 *     Each item in the array should be the name of a predefined module or a (DI annotated)
	 *     function that will be invoked by the injector as a `config` block.
	 *     See: {@link angular.module modules}
	 * @param {Object=} config an object for defining configuration options for the application. The
	 *     following keys are supported:
	 *
	 * * `strictDi` - disable automatic function annotation for the application. This is meant to
	 *   assist in finding bugs which break minified code. Defaults to `false`.
	 *
	 * @returns {auto.$injector} Returns the newly created injector for this app.
	 */
	function bootstrap(element, modules, config) {
	  if (!isObject(config)) config = {};
	  var defaultConfig = {
	    strictDi: false
	  };
	  config = extend(defaultConfig, config);
	  var doBootstrap = function() {
	    element = jqLite(element);

	    if (element.injector()) {
	      var tag = (element[0] === document) ? 'document' : startingTag(element);
	      //Encode angle brackets to prevent input from being sanitized to empty string #8683
	      throw ngMinErr(
	          'btstrpd',
	          "App Already Bootstrapped with this Element '{0}'",
	          tag.replace(/</,'&lt;').replace(/>/,'&gt;'));
	    }

	    modules = modules || [];
	    modules.unshift(['$provide', function($provide) {
	      $provide.value('$rootElement', element);
	    }]);

	    if (config.debugInfoEnabled) {
	      // Pushing so that this overrides `debugInfoEnabled` setting defined in user's `modules`.
	      modules.push(['$compileProvider', function($compileProvider) {
	        $compileProvider.debugInfoEnabled(true);
	      }]);
	    }

	    modules.unshift('ng');
	    var injector = createInjector(modules, config.strictDi);
	    injector.invoke(['$rootScope', '$rootElement', '$compile', '$injector',
	       function bootstrapApply(scope, element, compile, injector) {
	        scope.$apply(function() {
	          element.data('$injector', injector);
	          compile(element)(scope);
	        });
	      }]
	    );
	    return injector;
	  };

	  var NG_ENABLE_DEBUG_INFO = /^NG_ENABLE_DEBUG_INFO!/;
	  var NG_DEFER_BOOTSTRAP = /^NG_DEFER_BOOTSTRAP!/;

	  if (window && NG_ENABLE_DEBUG_INFO.test(window.name)) {
	    config.debugInfoEnabled = true;
	    window.name = window.name.replace(NG_ENABLE_DEBUG_INFO, '');
	  }

	  if (window && !NG_DEFER_BOOTSTRAP.test(window.name)) {
	    return doBootstrap();
	  }

	  window.name = window.name.replace(NG_DEFER_BOOTSTRAP, '');
	  angular.resumeBootstrap = function(extraModules) {
	    forEach(extraModules, function(module) {
	      modules.push(module);
	    });
	    return doBootstrap();
	  };

	  if (isFunction(angular.resumeDeferredBootstrap)) {
	    angular.resumeDeferredBootstrap();
	  }
	}

	/**
	 * @ngdoc function
	 * @name angular.reloadWithDebugInfo
	 * @module ng
	 * @description
	 * Use this function to reload the current application with debug information turned on.
	 * This takes precedence over a call to `$compileProvider.debugInfoEnabled(false)`.
	 *
	 * See {@link ng.$compileProvider#debugInfoEnabled} for more.
	 */
	function reloadWithDebugInfo() {
	  window.name = 'NG_ENABLE_DEBUG_INFO!' + window.name;
	  window.location.reload();
	}

	/**
	 * @name angular.getTestability
	 * @module ng
	 * @description
	 * Get the testability service for the instance of Angular on the given
	 * element.
	 * @param {DOMElement} element DOM element which is the root of angular application.
	 */
	function getTestability(rootElement) {
	  var injector = angular.element(rootElement).injector();
	  if (!injector) {
	    throw ngMinErr('test',
	      'no injector found for element argument to getTestability');
	  }
	  return injector.get('$$testability');
	}

	var SNAKE_CASE_REGEXP = /[A-Z]/g;
	function snake_case(name, separator) {
	  separator = separator || '_';
	  return name.replace(SNAKE_CASE_REGEXP, function(letter, pos) {
	    return (pos ? separator : '') + letter.toLowerCase();
	  });
	}

	var bindJQueryFired = false;
	var skipDestroyOnNextJQueryCleanData;
	function bindJQuery() {
	  var originalCleanData;

	  if (bindJQueryFired) {
	    return;
	  }

	  // bind to jQuery if present;
	  var jqName = jq();
	  jQuery = window.jQuery; // use default jQuery.
	  if (isDefined(jqName)) { // `ngJq` present
	    jQuery = jqName === null ? undefined : window[jqName]; // if empty; use jqLite. if not empty, use jQuery specified by `ngJq`.
	  }

	  // Use jQuery if it exists with proper functionality, otherwise default to us.
	  // Angular 1.2+ requires jQuery 1.7+ for on()/off() support.
	  // Angular 1.3+ technically requires at least jQuery 2.1+ but it may work with older
	  // versions. It will not work for sure with jQuery <1.7, though.
	  if (jQuery && jQuery.fn.on) {
	    jqLite = jQuery;
	    extend(jQuery.fn, {
	      scope: JQLitePrototype.scope,
	      isolateScope: JQLitePrototype.isolateScope,
	      controller: JQLitePrototype.controller,
	      injector: JQLitePrototype.injector,
	      inheritedData: JQLitePrototype.inheritedData
	    });

	    // All nodes removed from the DOM via various jQuery APIs like .remove()
	    // are passed through jQuery.cleanData. Monkey-patch this method to fire
	    // the $destroy event on all removed nodes.
	    originalCleanData = jQuery.cleanData;
	    jQuery.cleanData = function(elems) {
	      var events;
	      if (!skipDestroyOnNextJQueryCleanData) {
	        for (var i = 0, elem; (elem = elems[i]) != null; i++) {
	          events = jQuery._data(elem, "events");
	          if (events && events.$destroy) {
	            jQuery(elem).triggerHandler('$destroy');
	          }
	        }
	      } else {
	        skipDestroyOnNextJQueryCleanData = false;
	      }
	      originalCleanData(elems);
	    };
	  } else {
	    jqLite = JQLite;
	  }

	  angular.element = jqLite;

	  // Prevent double-proxying.
	  bindJQueryFired = true;
	}

	/**
	 * throw error if the argument is falsy.
	 */
	function assertArg(arg, name, reason) {
	  if (!arg) {
	    throw ngMinErr('areq', "Argument '{0}' is {1}", (name || '?'), (reason || "required"));
	  }
	  return arg;
	}

	function assertArgFn(arg, name, acceptArrayAnnotation) {
	  if (acceptArrayAnnotation && isArray(arg)) {
	      arg = arg[arg.length - 1];
	  }

	  assertArg(isFunction(arg), name, 'not a function, got ' +
	      (arg && typeof arg === 'object' ? arg.constructor.name || 'Object' : typeof arg));
	  return arg;
	}

	/**
	 * throw error if the name given is hasOwnProperty
	 * @param  {String} name    the name to test
	 * @param  {String} context the context in which the name is used, such as module or directive
	 */
	function assertNotHasOwnProperty(name, context) {
	  if (name === 'hasOwnProperty') {
	    throw ngMinErr('badname', "hasOwnProperty is not a valid {0} name", context);
	  }
	}

	/**
	 * Return the value accessible from the object by path. Any undefined traversals are ignored
	 * @param {Object} obj starting object
	 * @param {String} path path to traverse
	 * @param {boolean} [bindFnToScope=true]
	 * @returns {Object} value as accessible by path
	 */
	//TODO(misko): this function needs to be removed
	function getter(obj, path, bindFnToScope) {
	  if (!path) return obj;
	  var keys = path.split('.');
	  var key;
	  var lastInstance = obj;
	  var len = keys.length;

	  for (var i = 0; i < len; i++) {
	    key = keys[i];
	    if (obj) {
	      obj = (lastInstance = obj)[key];
	    }
	  }
	  if (!bindFnToScope && isFunction(obj)) {
	    return bind(lastInstance, obj);
	  }
	  return obj;
	}

	/**
	 * Return the DOM siblings between the first and last node in the given array.
	 * @param {Array} array like object
	 * @returns {jqLite} jqLite collection containing the nodes
	 */
	function getBlockNodes(nodes) {
	  // TODO(perf): just check if all items in `nodes` are siblings and if they are return the original
	  //             collection, otherwise update the original collection.
	  var node = nodes[0];
	  var endNode = nodes[nodes.length - 1];
	  var blockNodes = [node];

	  do {
	    node = node.nextSibling;
	    if (!node) break;
	    blockNodes.push(node);
	  } while (node !== endNode);

	  return jqLite(blockNodes);
	}


	/**
	 * Creates a new object without a prototype. This object is useful for lookup without having to
	 * guard against prototypically inherited properties via hasOwnProperty.
	 *
	 * Related micro-benchmarks:
	 * - http://jsperf.com/object-create2
	 * - http://jsperf.com/proto-map-lookup/2
	 * - http://jsperf.com/for-in-vs-object-keys2
	 *
	 * @returns {Object}
	 */
	function createMap() {
	  return Object.create(null);
	}

	var NODE_TYPE_ELEMENT = 1;
	var NODE_TYPE_ATTRIBUTE = 2;
	var NODE_TYPE_TEXT = 3;
	var NODE_TYPE_COMMENT = 8;
	var NODE_TYPE_DOCUMENT = 9;
	var NODE_TYPE_DOCUMENT_FRAGMENT = 11;

	/**
	 * @ngdoc type
	 * @name angular.Module
	 * @module ng
	 * @description
	 *
	 * Interface for configuring angular {@link angular.module modules}.
	 */

	function setupModuleLoader(window) {

	  var $injectorMinErr = minErr('$injector');
	  var ngMinErr = minErr('ng');

	  function ensure(obj, name, factory) {
	    return obj[name] || (obj[name] = factory());
	  }

	  var angular = ensure(window, 'angular', Object);

	  // We need to expose `angular.$$minErr` to modules such as `ngResource` that reference it during bootstrap
	  angular.$$minErr = angular.$$minErr || minErr;

	  return ensure(angular, 'module', function() {
	    /** @type {Object.<string, angular.Module>} */
	    var modules = {};

	    /**
	     * @ngdoc function
	     * @name angular.module
	     * @module ng
	     * @description
	     *
	     * The `angular.module` is a global place for creating, registering and retrieving Angular
	     * modules.
	     * All modules (angular core or 3rd party) that should be available to an application must be
	     * registered using this mechanism.
	     *
	     * When passed two or more arguments, a new module is created.  If passed only one argument, an
	     * existing module (the name passed as the first argument to `module`) is retrieved.
	     *
	     *
	     * # Module
	     *
	     * A module is a collection of services, directives, controllers, filters, and configuration information.
	     * `angular.module` is used to configure the {@link auto.$injector $injector}.
	     *
	     * ```js
	     * // Create a new module
	     * var myModule = angular.module('myModule', []);
	     *
	     * // register a new service
	     * myModule.value('appName', 'MyCoolApp');
	     *
	     * // configure existing services inside initialization blocks.
	     * myModule.config(['$locationProvider', function($locationProvider) {
	     *   // Configure existing providers
	     *   $locationProvider.hashPrefix('!');
	     * }]);
	     * ```
	     *
	     * Then you can create an injector and load your modules like this:
	     *
	     * ```js
	     * var injector = angular.injector(['ng', 'myModule'])
	     * ```
	     *
	     * However it's more likely that you'll just use
	     * {@link ng.directive:ngApp ngApp} or
	     * {@link angular.bootstrap} to simplify this process for you.
	     *
	     * @param {!string} name The name of the module to create or retrieve.
	     * @param {!Array.<string>=} requires If specified then new module is being created. If
	     *        unspecified then the module is being retrieved for further configuration.
	     * @param {Function=} configFn Optional configuration function for the module. Same as
	     *        {@link angular.Module#config Module#config()}.
	     * @returns {module} new module with the {@link angular.Module} api.
	     */
	    return function module(name, requires, configFn) {
	      var assertNotHasOwnProperty = function(name, context) {
	        if (name === 'hasOwnProperty') {
	          throw ngMinErr('badname', 'hasOwnProperty is not a valid {0} name', context);
	        }
	      };

	      assertNotHasOwnProperty(name, 'module');
	      if (requires && modules.hasOwnProperty(name)) {
	        modules[name] = null;
	      }
	      return ensure(modules, name, function() {
	        if (!requires) {
	          throw $injectorMinErr('nomod', "Module '{0}' is not available! You either misspelled " +
	             "the module name or forgot to load it. If registering a module ensure that you " +
	             "specify the dependencies as the second argument.", name);
	        }

	        /** @type {!Array.<Array.<*>>} */
	        var invokeQueue = [];

	        /** @type {!Array.<Function>} */
	        var configBlocks = [];

	        /** @type {!Array.<Function>} */
	        var runBlocks = [];

	        var config = invokeLater('$injector', 'invoke', 'push', configBlocks);

	        /** @type {angular.Module} */
	        var moduleInstance = {
	          // Private state
	          _invokeQueue: invokeQueue,
	          _configBlocks: configBlocks,
	          _runBlocks: runBlocks,

	          /**
	           * @ngdoc property
	           * @name angular.Module#requires
	           * @module ng
	           *
	           * @description
	           * Holds the list of modules which the injector will load before the current module is
	           * loaded.
	           */
	          requires: requires,

	          /**
	           * @ngdoc property
	           * @name angular.Module#name
	           * @module ng
	           *
	           * @description
	           * Name of the module.
	           */
	          name: name,


	          /**
	           * @ngdoc method
	           * @name angular.Module#provider
	           * @module ng
	           * @param {string} name service name
	           * @param {Function} providerType Construction function for creating new instance of the
	           *                                service.
	           * @description
	           * See {@link auto.$provide#provider $provide.provider()}.
	           */
	          provider: invokeLater('$provide', 'provider'),

	          /**
	           * @ngdoc method
	           * @name angular.Module#factory
	           * @module ng
	           * @param {string} name service name
	           * @param {Function} providerFunction Function for creating new instance of the service.
	           * @description
	           * See {@link auto.$provide#factory $provide.factory()}.
	           */
	          factory: invokeLater('$provide', 'factory'),

	          /**
	           * @ngdoc method
	           * @name angular.Module#service
	           * @module ng
	           * @param {string} name service name
	           * @param {Function} constructor A constructor function that will be instantiated.
	           * @description
	           * See {@link auto.$provide#service $provide.service()}.
	           */
	          service: invokeLater('$provide', 'service'),

	          /**
	           * @ngdoc method
	           * @name angular.Module#value
	           * @module ng
	           * @param {string} name service name
	           * @param {*} object Service instance object.
	           * @description
	           * See {@link auto.$provide#value $provide.value()}.
	           */
	          value: invokeLater('$provide', 'value'),

	          /**
	           * @ngdoc method
	           * @name angular.Module#constant
	           * @module ng
	           * @param {string} name constant name
	           * @param {*} object Constant value.
	           * @description
	           * Because the constant are fixed, they get applied before other provide methods.
	           * See {@link auto.$provide#constant $provide.constant()}.
	           */
	          constant: invokeLater('$provide', 'constant', 'unshift'),

	           /**
	           * @ngdoc method
	           * @name angular.Module#decorator
	           * @module ng
	           * @param {string} The name of the service to decorate.
	           * @param {Function} This function will be invoked when the service needs to be
	           *                                    instantiated and should return the decorated service instance.
	           * @description
	           * See {@link auto.$provide#decorator $provide.decorator()}.
	           */
	          decorator: invokeLater('$provide', 'decorator'),

	          /**
	           * @ngdoc method
	           * @name angular.Module#animation
	           * @module ng
	           * @param {string} name animation name
	           * @param {Function} animationFactory Factory function for creating new instance of an
	           *                                    animation.
	           * @description
	           *
	           * **NOTE**: animations take effect only if the **ngAnimate** module is loaded.
	           *
	           *
	           * Defines an animation hook that can be later used with
	           * {@link $animate $animate} service and directives that use this service.
	           *
	           * ```js
	           * module.animation('.animation-name', function($inject1, $inject2) {
	           *   return {
	           *     eventName : function(element, done) {
	           *       //code to run the animation
	           *       //once complete, then run done()
	           *       return function cancellationFunction(element) {
	           *         //code to cancel the animation
	           *       }
	           *     }
	           *   }
	           * })
	           * ```
	           *
	           * See {@link ng.$animateProvider#register $animateProvider.register()} and
	           * {@link ngAnimate ngAnimate module} for more information.
	           */
	          animation: invokeLater('$animateProvider', 'register'),

	          /**
	           * @ngdoc method
	           * @name angular.Module#filter
	           * @module ng
	           * @param {string} name Filter name - this must be a valid angular expression identifier
	           * @param {Function} filterFactory Factory function for creating new instance of filter.
	           * @description
	           * See {@link ng.$filterProvider#register $filterProvider.register()}.
	           *
	           * <div class="alert alert-warning">
	           * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
	           * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
	           * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
	           * (`myapp_subsection_filterx`).
	           * </div>
	           */
	          filter: invokeLater('$filterProvider', 'register'),

	          /**
	           * @ngdoc method
	           * @name angular.Module#controller
	           * @module ng
	           * @param {string|Object} name Controller name, or an object map of controllers where the
	           *    keys are the names and the values are the constructors.
	           * @param {Function} constructor Controller constructor function.
	           * @description
	           * See {@link ng.$controllerProvider#register $controllerProvider.register()}.
	           */
	          controller: invokeLater('$controllerProvider', 'register'),

	          /**
	           * @ngdoc method
	           * @name angular.Module#directive
	           * @module ng
	           * @param {string|Object} name Directive name, or an object map of directives where the
	           *    keys are the names and the values are the factories.
	           * @param {Function} directiveFactory Factory function for creating new instance of
	           * directives.
	           * @description
	           * See {@link ng.$compileProvider#directive $compileProvider.directive()}.
	           */
	          directive: invokeLater('$compileProvider', 'directive'),

	          /**
	           * @ngdoc method
	           * @name angular.Module#config
	           * @module ng
	           * @param {Function} configFn Execute this function on module load. Useful for service
	           *    configuration.
	           * @description
	           * Use this method to register work which needs to be performed on module loading.
	           * For more about how to configure services, see
	           * {@link providers#provider-recipe Provider Recipe}.
	           */
	          config: config,

	          /**
	           * @ngdoc method
	           * @name angular.Module#run
	           * @module ng
	           * @param {Function} initializationFn Execute this function after injector creation.
	           *    Useful for application initialization.
	           * @description
	           * Use this method to register work which should be performed when the injector is done
	           * loading all modules.
	           */
	          run: function(block) {
	            runBlocks.push(block);
	            return this;
	          }
	        };

	        if (configFn) {
	          config(configFn);
	        }

	        return moduleInstance;

	        /**
	         * @param {string} provider
	         * @param {string} method
	         * @param {String=} insertMethod
	         * @returns {angular.Module}
	         */
	        function invokeLater(provider, method, insertMethod, queue) {
	          if (!queue) queue = invokeQueue;
	          return function() {
	            queue[insertMethod || 'push']([provider, method, arguments]);
	            return moduleInstance;
	          };
	        }
	      });
	    };
	  });

	}

	/* global: toDebugString: true */

	function serializeObject(obj) {
	  var seen = [];

	  return JSON.stringify(obj, function(key, val) {
	    val = toJsonReplacer(key, val);
	    if (isObject(val)) {

	      if (seen.indexOf(val) >= 0) return '<<already seen>>';

	      seen.push(val);
	    }
	    return val;
	  });
	}

	function toDebugString(obj) {
	  if (typeof obj === 'function') {
	    return obj.toString().replace(/ \{[\s\S]*$/, '');
	  } else if (typeof obj === 'undefined') {
	    return 'undefined';
	  } else if (typeof obj !== 'string') {
	    return serializeObject(obj);
	  }
	  return obj;
	}

	/* global angularModule: true,
	  version: true,

	  $LocaleProvider,
	  $CompileProvider,

	  htmlAnchorDirective,
	  inputDirective,
	  inputDirective,
	  formDirective,
	  scriptDirective,
	  selectDirective,
	  styleDirective,
	  optionDirective,
	  ngBindDirective,
	  ngBindHtmlDirective,
	  ngBindTemplateDirective,
	  ngClassDirective,
	  ngClassEvenDirective,
	  ngClassOddDirective,
	  ngCspDirective,
	  ngCloakDirective,
	  ngControllerDirective,
	  ngFormDirective,
	  ngHideDirective,
	  ngIfDirective,
	  ngIncludeDirective,
	  ngIncludeFillContentDirective,
	  ngInitDirective,
	  ngNonBindableDirective,
	  ngPluralizeDirective,
	  ngRepeatDirective,
	  ngShowDirective,
	  ngStyleDirective,
	  ngSwitchDirective,
	  ngSwitchWhenDirective,
	  ngSwitchDefaultDirective,
	  ngOptionsDirective,
	  ngTranscludeDirective,
	  ngModelDirective,
	  ngListDirective,
	  ngChangeDirective,
	  patternDirective,
	  patternDirective,
	  requiredDirective,
	  requiredDirective,
	  minlengthDirective,
	  minlengthDirective,
	  maxlengthDirective,
	  maxlengthDirective,
	  ngValueDirective,
	  ngModelOptionsDirective,
	  ngAttributeAliasDirectives,
	  ngEventDirectives,

	  $AnchorScrollProvider,
	  $AnimateProvider,
	  $$CoreAnimateQueueProvider,
	  $$CoreAnimateRunnerProvider,
	  $BrowserProvider,
	  $CacheFactoryProvider,
	  $ControllerProvider,
	  $DocumentProvider,
	  $ExceptionHandlerProvider,
	  $FilterProvider,
	  $InterpolateProvider,
	  $IntervalProvider,
	  $$HashMapProvider,
	  $HttpProvider,
	  $HttpParamSerializerProvider,
	  $HttpParamSerializerJQLikeProvider,
	  $HttpBackendProvider,
	  $LocationProvider,
	  $LogProvider,
	  $ParseProvider,
	  $RootScopeProvider,
	  $QProvider,
	  $$QProvider,
	  $$SanitizeUriProvider,
	  $SceProvider,
	  $SceDelegateProvider,
	  $SnifferProvider,
	  $TemplateCacheProvider,
	  $TemplateRequestProvider,
	  $$TestabilityProvider,
	  $TimeoutProvider,
	  $$RAFProvider,
	  $$AsyncCallbackProvider,
	  $WindowProvider,
	  $$jqLiteProvider,
	  $$CookieReaderProvider
	*/


	/**
	 * @ngdoc object
	 * @name angular.version
	 * @module ng
	 * @description
	 * An object that contains information about the current AngularJS version. This object has the
	 * following properties:
	 *
	 * - `full` – `{string}` – Full version string, such as "0.9.18".
	 * - `major` – `{number}` – Major version number, such as "0".
	 * - `minor` – `{number}` – Minor version number, such as "9".
	 * - `dot` – `{number}` – Dot version number, such as "18".
	 * - `codeName` – `{string}` – Code name of the release, such as "jiggling-armfat".
	 */
	var version = {
	  full: '1.4.0',    // all of these placeholder strings will be replaced by grunt's
	  major: 1,    // package task
	  minor: 4,
	  dot: 0,
	  codeName: 'jaracimrman-existence'
	};


	function publishExternalAPI(angular) {
	  extend(angular, {
	    'bootstrap': bootstrap,
	    'copy': copy,
	    'extend': extend,
	    'merge': merge,
	    'equals': equals,
	    'element': jqLite,
	    'forEach': forEach,
	    'injector': createInjector,
	    'noop': noop,
	    'bind': bind,
	    'toJson': toJson,
	    'fromJson': fromJson,
	    'identity': identity,
	    'isUndefined': isUndefined,
	    'isDefined': isDefined,
	    'isString': isString,
	    'isFunction': isFunction,
	    'isObject': isObject,
	    'isNumber': isNumber,
	    'isElement': isElement,
	    'isArray': isArray,
	    'version': version,
	    'isDate': isDate,
	    'lowercase': lowercase,
	    'uppercase': uppercase,
	    'callbacks': {counter: 0},
	    'getTestability': getTestability,
	    '$$minErr': minErr,
	    '$$csp': csp,
	    'reloadWithDebugInfo': reloadWithDebugInfo
	  });

	  angularModule = setupModuleLoader(window);
	  try {
	    angularModule('ngLocale');
	  } catch (e) {
	    angularModule('ngLocale', []).provider('$locale', $LocaleProvider);
	  }

	  angularModule('ng', ['ngLocale'], ['$provide',
	    function ngModule($provide) {
	      // $$sanitizeUriProvider needs to be before $compileProvider as it is used by it.
	      $provide.provider({
	        $$sanitizeUri: $$SanitizeUriProvider
	      });
	      $provide.provider('$compile', $CompileProvider).
	        directive({
	            a: htmlAnchorDirective,
	            input: inputDirective,
	            textarea: inputDirective,
	            form: formDirective,
	            script: scriptDirective,
	            select: selectDirective,
	            style: styleDirective,
	            option: optionDirective,
	            ngBind: ngBindDirective,
	            ngBindHtml: ngBindHtmlDirective,
	            ngBindTemplate: ngBindTemplateDirective,
	            ngClass: ngClassDirective,
	            ngClassEven: ngClassEvenDirective,
	            ngClassOdd: ngClassOddDirective,
	            ngCloak: ngCloakDirective,
	            ngController: ngControllerDirective,
	            ngForm: ngFormDirective,
	            ngHide: ngHideDirective,
	            ngIf: ngIfDirective,
	            ngInclude: ngIncludeDirective,
	            ngInit: ngInitDirective,
	            ngNonBindable: ngNonBindableDirective,
	            ngPluralize: ngPluralizeDirective,
	            ngRepeat: ngRepeatDirective,
	            ngShow: ngShowDirective,
	            ngStyle: ngStyleDirective,
	            ngSwitch: ngSwitchDirective,
	            ngSwitchWhen: ngSwitchWhenDirective,
	            ngSwitchDefault: ngSwitchDefaultDirective,
	            ngOptions: ngOptionsDirective,
	            ngTransclude: ngTranscludeDirective,
	            ngModel: ngModelDirective,
	            ngList: ngListDirective,
	            ngChange: ngChangeDirective,
	            pattern: patternDirective,
	            ngPattern: patternDirective,
	            required: requiredDirective,
	            ngRequired: requiredDirective,
	            minlength: minlengthDirective,
	            ngMinlength: minlengthDirective,
	            maxlength: maxlengthDirective,
	            ngMaxlength: maxlengthDirective,
	            ngValue: ngValueDirective,
	            ngModelOptions: ngModelOptionsDirective
	        }).
	        directive({
	          ngInclude: ngIncludeFillContentDirective
	        }).
	        directive(ngAttributeAliasDirectives).
	        directive(ngEventDirectives);
	      $provide.provider({
	        $anchorScroll: $AnchorScrollProvider,
	        $animate: $AnimateProvider,
	        $$animateQueue: $$CoreAnimateQueueProvider,
	        $$AnimateRunner: $$CoreAnimateRunnerProvider,
	        $browser: $BrowserProvider,
	        $cacheFactory: $CacheFactoryProvider,
	        $controller: $ControllerProvider,
	        $document: $DocumentProvider,
	        $exceptionHandler: $ExceptionHandlerProvider,
	        $filter: $FilterProvider,
	        $interpolate: $InterpolateProvider,
	        $interval: $IntervalProvider,
	        $http: $HttpProvider,
	        $httpParamSerializer: $HttpParamSerializerProvider,
	        $httpParamSerializerJQLike: $HttpParamSerializerJQLikeProvider,
	        $httpBackend: $HttpBackendProvider,
	        $location: $LocationProvider,
	        $log: $LogProvider,
	        $parse: $ParseProvider,
	        $rootScope: $RootScopeProvider,
	        $q: $QProvider,
	        $$q: $$QProvider,
	        $sce: $SceProvider,
	        $sceDelegate: $SceDelegateProvider,
	        $sniffer: $SnifferProvider,
	        $templateCache: $TemplateCacheProvider,
	        $templateRequest: $TemplateRequestProvider,
	        $$testability: $$TestabilityProvider,
	        $timeout: $TimeoutProvider,
	        $window: $WindowProvider,
	        $$rAF: $$RAFProvider,
	        $$asyncCallback: $$AsyncCallbackProvider,
	        $$jqLite: $$jqLiteProvider,
	        $$HashMap: $$HashMapProvider,
	        $$cookieReader: $$CookieReaderProvider
	      });
	    }
	  ]);
	}

	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 *     Any commits to this file should be reviewed with security in mind.  *
	 *   Changes to this file can potentially create security vulnerabilities. *
	 *          An approval from 2 Core members with history of modifying      *
	 *                         this file is required.                          *
	 *                                                                         *
	 *  Does the change somehow allow for arbitrary javascript to be executed? *
	 *    Or allows for someone to change the prototype of built-in objects?   *
	 *     Or gives undesired access to variables likes document or window?    *
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

	/* global JQLitePrototype: true,
	  addEventListenerFn: true,
	  removeEventListenerFn: true,
	  BOOLEAN_ATTR: true,
	  ALIASED_ATTR: true,
	*/

	//////////////////////////////////
	//JQLite
	//////////////////////////////////

	/**
	 * @ngdoc function
	 * @name angular.element
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Wraps a raw DOM element or HTML string as a [jQuery](http://jquery.com) element.
	 *
	 * If jQuery is available, `angular.element` is an alias for the
	 * [jQuery](http://api.jquery.com/jQuery/) function. If jQuery is not available, `angular.element`
	 * delegates to Angular's built-in subset of jQuery, called "jQuery lite" or "jqLite."
	 *
	 * <div class="alert alert-success">jqLite is a tiny, API-compatible subset of jQuery that allows
	 * Angular to manipulate the DOM in a cross-browser compatible way. **jqLite** implements only the most
	 * commonly needed functionality with the goal of having a very small footprint.</div>
	 *
	 * To use `jQuery`, simply ensure it is loaded before the `angular.js` file.
	 *
	 * <div class="alert">**Note:** all element references in Angular are always wrapped with jQuery or
	 * jqLite; they are never raw DOM references.</div>
	 *
	 * ## Angular's jqLite
	 * jqLite provides only the following jQuery methods:
	 *
	 * - [`addClass()`](http://api.jquery.com/addClass/)
	 * - [`after()`](http://api.jquery.com/after/)
	 * - [`append()`](http://api.jquery.com/append/)
	 * - [`attr()`](http://api.jquery.com/attr/) - Does not support functions as parameters
	 * - [`bind()`](http://api.jquery.com/bind/) - Does not support namespaces, selectors or eventData
	 * - [`children()`](http://api.jquery.com/children/) - Does not support selectors
	 * - [`clone()`](http://api.jquery.com/clone/)
	 * - [`contents()`](http://api.jquery.com/contents/)
	 * - [`css()`](http://api.jquery.com/css/) - Only retrieves inline-styles, does not call `getComputedStyle()`. As a setter, does not convert numbers to strings or append 'px'.
	 * - [`data()`](http://api.jquery.com/data/)
	 * - [`detach()`](http://api.jquery.com/detach/)
	 * - [`empty()`](http://api.jquery.com/empty/)
	 * - [`eq()`](http://api.jquery.com/eq/)
	 * - [`find()`](http://api.jquery.com/find/) - Limited to lookups by tag name
	 * - [`hasClass()`](http://api.jquery.com/hasClass/)
	 * - [`html()`](http://api.jquery.com/html/)
	 * - [`next()`](http://api.jquery.com/next/) - Does not support selectors
	 * - [`on()`](http://api.jquery.com/on/) - Does not support namespaces, selectors or eventData
	 * - [`off()`](http://api.jquery.com/off/) - Does not support namespaces or selectors
	 * - [`one()`](http://api.jquery.com/one/) - Does not support namespaces or selectors
	 * - [`parent()`](http://api.jquery.com/parent/) - Does not support selectors
	 * - [`prepend()`](http://api.jquery.com/prepend/)
	 * - [`prop()`](http://api.jquery.com/prop/)
	 * - [`ready()`](http://api.jquery.com/ready/)
	 * - [`remove()`](http://api.jquery.com/remove/)
	 * - [`removeAttr()`](http://api.jquery.com/removeAttr/)
	 * - [`removeClass()`](http://api.jquery.com/removeClass/)
	 * - [`removeData()`](http://api.jquery.com/removeData/)
	 * - [`replaceWith()`](http://api.jquery.com/replaceWith/)
	 * - [`text()`](http://api.jquery.com/text/)
	 * - [`toggleClass()`](http://api.jquery.com/toggleClass/)
	 * - [`triggerHandler()`](http://api.jquery.com/triggerHandler/) - Passes a dummy event object to handlers.
	 * - [`unbind()`](http://api.jquery.com/unbind/) - Does not support namespaces
	 * - [`val()`](http://api.jquery.com/val/)
	 * - [`wrap()`](http://api.jquery.com/wrap/)
	 *
	 * ## jQuery/jqLite Extras
	 * Angular also provides the following additional methods and events to both jQuery and jqLite:
	 *
	 * ### Events
	 * - `$destroy` - AngularJS intercepts all jqLite/jQuery's DOM destruction apis and fires this event
	 *    on all DOM nodes being removed.  This can be used to clean up any 3rd party bindings to the DOM
	 *    element before it is removed.
	 *
	 * ### Methods
	 * - `controller(name)` - retrieves the controller of the current element or its parent. By default
	 *   retrieves controller associated with the `ngController` directive. If `name` is provided as
	 *   camelCase directive name, then the controller for this directive will be retrieved (e.g.
	 *   `'ngModel'`).
	 * - `injector()` - retrieves the injector of the current element or its parent.
	 * - `scope()` - retrieves the {@link ng.$rootScope.Scope scope} of the current
	 *   element or its parent. Requires {@link guide/production#disabling-debug-data Debug Data} to
	 *   be enabled.
	 * - `isolateScope()` - retrieves an isolate {@link ng.$rootScope.Scope scope} if one is attached directly to the
	 *   current element. This getter should be used only on elements that contain a directive which starts a new isolate
	 *   scope. Calling `scope()` on this element always returns the original non-isolate scope.
	 *   Requires {@link guide/production#disabling-debug-data Debug Data} to be enabled.
	 * - `inheritedData()` - same as `data()`, but walks up the DOM until a value is found or the top
	 *   parent element is reached.
	 *
	 * @param {string|DOMElement} element HTML string or DOMElement to be wrapped into jQuery.
	 * @returns {Object} jQuery object.
	 */

	JQLite.expando = 'ng339';

	var jqCache = JQLite.cache = {},
	    jqId = 1,
	    addEventListenerFn = function(element, type, fn) {
	      element.addEventListener(type, fn, false);
	    },
	    removeEventListenerFn = function(element, type, fn) {
	      element.removeEventListener(type, fn, false);
	    };

	/*
	 * !!! This is an undocumented "private" function !!!
	 */
	JQLite._data = function(node) {
	  //jQuery always returns an object on cache miss
	  return this.cache[node[this.expando]] || {};
	};

	function jqNextId() { return ++jqId; }


	var SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g;
	var MOZ_HACK_REGEXP = /^moz([A-Z])/;
	var MOUSE_EVENT_MAP= { mouseleave: "mouseout", mouseenter: "mouseover"};
	var jqLiteMinErr = minErr('jqLite');

	/**
	 * Converts snake_case to camelCase.
	 * Also there is special case for Moz prefix starting with upper case letter.
	 * @param name Name to normalize
	 */
	function camelCase(name) {
	  return name.
	    replace(SPECIAL_CHARS_REGEXP, function(_, separator, letter, offset) {
	      return offset ? letter.toUpperCase() : letter;
	    }).
	    replace(MOZ_HACK_REGEXP, 'Moz$1');
	}

	var SINGLE_TAG_REGEXP = /^<(\w+)\s*\/?>(?:<\/\1>|)$/;
	var HTML_REGEXP = /<|&#?\w+;/;
	var TAG_NAME_REGEXP = /<([\w:]+)/;
	var XHTML_TAG_REGEXP = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi;

	var wrapMap = {
	  'option': [1, '<select multiple="multiple">', '</select>'],

	  'thead': [1, '<table>', '</table>'],
	  'col': [2, '<table><colgroup>', '</colgroup></table>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],
	  'td': [3, '<table><tbody><tr>', '</tr></tbody></table>'],
	  '_default': [0, "", ""]
	};

	wrapMap.optgroup = wrapMap.option;
	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;


	function jqLiteIsTextNode(html) {
	  return !HTML_REGEXP.test(html);
	}

	function jqLiteAcceptsData(node) {
	  // The window object can accept data but has no nodeType
	  // Otherwise we are only interested in elements (1) and documents (9)
	  var nodeType = node.nodeType;
	  return nodeType === NODE_TYPE_ELEMENT || !nodeType || nodeType === NODE_TYPE_DOCUMENT;
	}

	function jqLiteBuildFragment(html, context) {
	  var tmp, tag, wrap,
	      fragment = context.createDocumentFragment(),
	      nodes = [], i;

	  if (jqLiteIsTextNode(html)) {
	    // Convert non-html into a text node
	    nodes.push(context.createTextNode(html));
	  } else {
	    // Convert html into DOM nodes
	    tmp = tmp || fragment.appendChild(context.createElement("div"));
	    tag = (TAG_NAME_REGEXP.exec(html) || ["", ""])[1].toLowerCase();
	    wrap = wrapMap[tag] || wrapMap._default;
	    tmp.innerHTML = wrap[1] + html.replace(XHTML_TAG_REGEXP, "<$1></$2>") + wrap[2];

	    // Descend through wrappers to the right content
	    i = wrap[0];
	    while (i--) {
	      tmp = tmp.lastChild;
	    }

	    nodes = concat(nodes, tmp.childNodes);

	    tmp = fragment.firstChild;
	    tmp.textContent = "";
	  }

	  // Remove wrapper from fragment
	  fragment.textContent = "";
	  fragment.innerHTML = ""; // Clear inner HTML
	  forEach(nodes, function(node) {
	    fragment.appendChild(node);
	  });

	  return fragment;
	}

	function jqLiteParseHTML(html, context) {
	  context = context || document;
	  var parsed;

	  if ((parsed = SINGLE_TAG_REGEXP.exec(html))) {
	    return [context.createElement(parsed[1])];
	  }

	  if ((parsed = jqLiteBuildFragment(html, context))) {
	    return parsed.childNodes;
	  }

	  return [];
	}

	/////////////////////////////////////////////
	function JQLite(element) {
	  if (element instanceof JQLite) {
	    return element;
	  }

	  var argIsString;

	  if (isString(element)) {
	    element = trim(element);
	    argIsString = true;
	  }
	  if (!(this instanceof JQLite)) {
	    if (argIsString && element.charAt(0) != '<') {
	      throw jqLiteMinErr('nosel', 'Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element');
	    }
	    return new JQLite(element);
	  }

	  if (argIsString) {
	    jqLiteAddNodes(this, jqLiteParseHTML(element));
	  } else {
	    jqLiteAddNodes(this, element);
	  }
	}

	function jqLiteClone(element) {
	  return element.cloneNode(true);
	}

	function jqLiteDealoc(element, onlyDescendants) {
	  if (!onlyDescendants) jqLiteRemoveData(element);

	  if (element.querySelectorAll) {
	    var descendants = element.querySelectorAll('*');
	    for (var i = 0, l = descendants.length; i < l; i++) {
	      jqLiteRemoveData(descendants[i]);
	    }
	  }
	}

	function jqLiteOff(element, type, fn, unsupported) {
	  if (isDefined(unsupported)) throw jqLiteMinErr('offargs', 'jqLite#off() does not support the `selector` argument');

	  var expandoStore = jqLiteExpandoStore(element);
	  var events = expandoStore && expandoStore.events;
	  var handle = expandoStore && expandoStore.handle;

	  if (!handle) return; //no listeners registered

	  if (!type) {
	    for (type in events) {
	      if (type !== '$destroy') {
	        removeEventListenerFn(element, type, handle);
	      }
	      delete events[type];
	    }
	  } else {
	    forEach(type.split(' '), function(type) {
	      if (isDefined(fn)) {
	        var listenerFns = events[type];
	        arrayRemove(listenerFns || [], fn);
	        if (listenerFns && listenerFns.length > 0) {
	          return;
	        }
	      }

	      removeEventListenerFn(element, type, handle);
	      delete events[type];
	    });
	  }
	}

	function jqLiteRemoveData(element, name) {
	  var expandoId = element.ng339;
	  var expandoStore = expandoId && jqCache[expandoId];

	  if (expandoStore) {
	    if (name) {
	      delete expandoStore.data[name];
	      return;
	    }

	    if (expandoStore.handle) {
	      if (expandoStore.events.$destroy) {
	        expandoStore.handle({}, '$destroy');
	      }
	      jqLiteOff(element);
	    }
	    delete jqCache[expandoId];
	    element.ng339 = undefined; // don't delete DOM expandos. IE and Chrome don't like it
	  }
	}


	function jqLiteExpandoStore(element, createIfNecessary) {
	  var expandoId = element.ng339,
	      expandoStore = expandoId && jqCache[expandoId];

	  if (createIfNecessary && !expandoStore) {
	    element.ng339 = expandoId = jqNextId();
	    expandoStore = jqCache[expandoId] = {events: {}, data: {}, handle: undefined};
	  }

	  return expandoStore;
	}


	function jqLiteData(element, key, value) {
	  if (jqLiteAcceptsData(element)) {

	    var isSimpleSetter = isDefined(value);
	    var isSimpleGetter = !isSimpleSetter && key && !isObject(key);
	    var massGetter = !key;
	    var expandoStore = jqLiteExpandoStore(element, !isSimpleGetter);
	    var data = expandoStore && expandoStore.data;

	    if (isSimpleSetter) { // data('key', value)
	      data[key] = value;
	    } else {
	      if (massGetter) {  // data()
	        return data;
	      } else {
	        if (isSimpleGetter) { // data('key')
	          // don't force creation of expandoStore if it doesn't exist yet
	          return data && data[key];
	        } else { // mass-setter: data({key1: val1, key2: val2})
	          extend(data, key);
	        }
	      }
	    }
	  }
	}

	function jqLiteHasClass(element, selector) {
	  if (!element.getAttribute) return false;
	  return ((" " + (element.getAttribute('class') || '') + " ").replace(/[\n\t]/g, " ").
	      indexOf(" " + selector + " ") > -1);
	}

	function jqLiteRemoveClass(element, cssClasses) {
	  if (cssClasses && element.setAttribute) {
	    forEach(cssClasses.split(' '), function(cssClass) {
	      element.setAttribute('class', trim(
	          (" " + (element.getAttribute('class') || '') + " ")
	          .replace(/[\n\t]/g, " ")
	          .replace(" " + trim(cssClass) + " ", " "))
	      );
	    });
	  }
	}

	function jqLiteAddClass(element, cssClasses) {
	  if (cssClasses && element.setAttribute) {
	    var existingClasses = (' ' + (element.getAttribute('class') || '') + ' ')
	                            .replace(/[\n\t]/g, " ");

	    forEach(cssClasses.split(' '), function(cssClass) {
	      cssClass = trim(cssClass);
	      if (existingClasses.indexOf(' ' + cssClass + ' ') === -1) {
	        existingClasses += cssClass + ' ';
	      }
	    });

	    element.setAttribute('class', trim(existingClasses));
	  }
	}


	function jqLiteAddNodes(root, elements) {
	  // THIS CODE IS VERY HOT. Don't make changes without benchmarking.

	  if (elements) {

	    // if a Node (the most common case)
	    if (elements.nodeType) {
	      root[root.length++] = elements;
	    } else {
	      var length = elements.length;

	      // if an Array or NodeList and not a Window
	      if (typeof length === 'number' && elements.window !== elements) {
	        if (length) {
	          for (var i = 0; i < length; i++) {
	            root[root.length++] = elements[i];
	          }
	        }
	      } else {
	        root[root.length++] = elements;
	      }
	    }
	  }
	}


	function jqLiteController(element, name) {
	  return jqLiteInheritedData(element, '$' + (name || 'ngController') + 'Controller');
	}

	function jqLiteInheritedData(element, name, value) {
	  // if element is the document object work with the html element instead
	  // this makes $(document).scope() possible
	  if (element.nodeType == NODE_TYPE_DOCUMENT) {
	    element = element.documentElement;
	  }
	  var names = isArray(name) ? name : [name];

	  while (element) {
	    for (var i = 0, ii = names.length; i < ii; i++) {
	      if ((value = jqLite.data(element, names[i])) !== undefined) return value;
	    }

	    // If dealing with a document fragment node with a host element, and no parent, use the host
	    // element as the parent. This enables directives within a Shadow DOM or polyfilled Shadow DOM
	    // to lookup parent controllers.
	    element = element.parentNode || (element.nodeType === NODE_TYPE_DOCUMENT_FRAGMENT && element.host);
	  }
	}

	function jqLiteEmpty(element) {
	  jqLiteDealoc(element, true);
	  while (element.firstChild) {
	    element.removeChild(element.firstChild);
	  }
	}

	function jqLiteRemove(element, keepData) {
	  if (!keepData) jqLiteDealoc(element);
	  var parent = element.parentNode;
	  if (parent) parent.removeChild(element);
	}


	function jqLiteDocumentLoaded(action, win) {
	  win = win || window;
	  if (win.document.readyState === 'complete') {
	    // Force the action to be run async for consistent behaviour
	    // from the action's point of view
	    // i.e. it will definitely not be in a $apply
	    win.setTimeout(action);
	  } else {
	    // No need to unbind this handler as load is only ever called once
	    jqLite(win).on('load', action);
	  }
	}

	//////////////////////////////////////////
	// Functions which are declared directly.
	//////////////////////////////////////////
	var JQLitePrototype = JQLite.prototype = {
	  ready: function(fn) {
	    var fired = false;

	    function trigger() {
	      if (fired) return;
	      fired = true;
	      fn();
	    }

	    // check if document is already loaded
	    if (document.readyState === 'complete') {
	      setTimeout(trigger);
	    } else {
	      this.on('DOMContentLoaded', trigger); // works for modern browsers and IE9
	      // we can not use jqLite since we are not done loading and jQuery could be loaded later.
	      // jshint -W064
	      JQLite(window).on('load', trigger); // fallback to window.onload for others
	      // jshint +W064
	    }
	  },
	  toString: function() {
	    var value = [];
	    forEach(this, function(e) { value.push('' + e);});
	    return '[' + value.join(', ') + ']';
	  },

	  eq: function(index) {
	      return (index >= 0) ? jqLite(this[index]) : jqLite(this[this.length + index]);
	  },

	  length: 0,
	  push: push,
	  sort: [].sort,
	  splice: [].splice
	};

	//////////////////////////////////////////
	// Functions iterating getter/setters.
	// these functions return self on setter and
	// value on get.
	//////////////////////////////////////////
	var BOOLEAN_ATTR = {};
	forEach('multiple,selected,checked,disabled,readOnly,required,open'.split(','), function(value) {
	  BOOLEAN_ATTR[lowercase(value)] = value;
	});
	var BOOLEAN_ELEMENTS = {};
	forEach('input,select,option,textarea,button,form,details'.split(','), function(value) {
	  BOOLEAN_ELEMENTS[value] = true;
	});
	var ALIASED_ATTR = {
	  'ngMinlength': 'minlength',
	  'ngMaxlength': 'maxlength',
	  'ngMin': 'min',
	  'ngMax': 'max',
	  'ngPattern': 'pattern'
	};

	function getBooleanAttrName(element, name) {
	  // check dom last since we will most likely fail on name
	  var booleanAttr = BOOLEAN_ATTR[name.toLowerCase()];

	  // booleanAttr is here twice to minimize DOM access
	  return booleanAttr && BOOLEAN_ELEMENTS[nodeName_(element)] && booleanAttr;
	}

	function getAliasedAttrName(element, name) {
	  var nodeName = element.nodeName;
	  return (nodeName === 'INPUT' || nodeName === 'TEXTAREA') && ALIASED_ATTR[name];
	}

	forEach({
	  data: jqLiteData,
	  removeData: jqLiteRemoveData
	}, function(fn, name) {
	  JQLite[name] = fn;
	});

	forEach({
	  data: jqLiteData,
	  inheritedData: jqLiteInheritedData,

	  scope: function(element) {
	    // Can't use jqLiteData here directly so we stay compatible with jQuery!
	    return jqLite.data(element, '$scope') || jqLiteInheritedData(element.parentNode || element, ['$isolateScope', '$scope']);
	  },

	  isolateScope: function(element) {
	    // Can't use jqLiteData here directly so we stay compatible with jQuery!
	    return jqLite.data(element, '$isolateScope') || jqLite.data(element, '$isolateScopeNoTemplate');
	  },

	  controller: jqLiteController,

	  injector: function(element) {
	    return jqLiteInheritedData(element, '$injector');
	  },

	  removeAttr: function(element, name) {
	    element.removeAttribute(name);
	  },

	  hasClass: jqLiteHasClass,

	  css: function(element, name, value) {
	    name = camelCase(name);

	    if (isDefined(value)) {
	      element.style[name] = value;
	    } else {
	      return element.style[name];
	    }
	  },

	  attr: function(element, name, value) {
	    var nodeType = element.nodeType;
	    if (nodeType === NODE_TYPE_TEXT || nodeType === NODE_TYPE_ATTRIBUTE || nodeType === NODE_TYPE_COMMENT) {
	      return;
	    }
	    var lowercasedName = lowercase(name);
	    if (BOOLEAN_ATTR[lowercasedName]) {
	      if (isDefined(value)) {
	        if (!!value) {
	          element[name] = true;
	          element.setAttribute(name, lowercasedName);
	        } else {
	          element[name] = false;
	          element.removeAttribute(lowercasedName);
	        }
	      } else {
	        return (element[name] ||
	                 (element.attributes.getNamedItem(name) || noop).specified)
	               ? lowercasedName
	               : undefined;
	      }
	    } else if (isDefined(value)) {
	      element.setAttribute(name, value);
	    } else if (element.getAttribute) {
	      // the extra argument "2" is to get the right thing for a.href in IE, see jQuery code
	      // some elements (e.g. Document) don't have get attribute, so return undefined
	      var ret = element.getAttribute(name, 2);
	      // normalize non-existing attributes to undefined (as jQuery)
	      return ret === null ? undefined : ret;
	    }
	  },

	  prop: function(element, name, value) {
	    if (isDefined(value)) {
	      element[name] = value;
	    } else {
	      return element[name];
	    }
	  },

	  text: (function() {
	    getText.$dv = '';
	    return getText;

	    function getText(element, value) {
	      if (isUndefined(value)) {
	        var nodeType = element.nodeType;
	        return (nodeType === NODE_TYPE_ELEMENT || nodeType === NODE_TYPE_TEXT) ? element.textContent : '';
	      }
	      element.textContent = value;
	    }
	  })(),

	  val: function(element, value) {
	    if (isUndefined(value)) {
	      if (element.multiple && nodeName_(element) === 'select') {
	        var result = [];
	        forEach(element.options, function(option) {
	          if (option.selected) {
	            result.push(option.value || option.text);
	          }
	        });
	        return result.length === 0 ? null : result;
	      }
	      return element.value;
	    }
	    element.value = value;
	  },

	  html: function(element, value) {
	    if (isUndefined(value)) {
	      return element.innerHTML;
	    }
	    jqLiteDealoc(element, true);
	    element.innerHTML = value;
	  },

	  empty: jqLiteEmpty
	}, function(fn, name) {
	  /**
	   * Properties: writes return selection, reads return first value
	   */
	  JQLite.prototype[name] = function(arg1, arg2) {
	    var i, key;
	    var nodeCount = this.length;

	    // jqLiteHasClass has only two arguments, but is a getter-only fn, so we need to special-case it
	    // in a way that survives minification.
	    // jqLiteEmpty takes no arguments but is a setter.
	    if (fn !== jqLiteEmpty &&
	        (((fn.length == 2 && (fn !== jqLiteHasClass && fn !== jqLiteController)) ? arg1 : arg2) === undefined)) {
	      if (isObject(arg1)) {

	        // we are a write, but the object properties are the key/values
	        for (i = 0; i < nodeCount; i++) {
	          if (fn === jqLiteData) {
	            // data() takes the whole object in jQuery
	            fn(this[i], arg1);
	          } else {
	            for (key in arg1) {
	              fn(this[i], key, arg1[key]);
	            }
	          }
	        }
	        // return self for chaining
	        return this;
	      } else {
	        // we are a read, so read the first child.
	        // TODO: do we still need this?
	        var value = fn.$dv;
	        // Only if we have $dv do we iterate over all, otherwise it is just the first element.
	        var jj = (value === undefined) ? Math.min(nodeCount, 1) : nodeCount;
	        for (var j = 0; j < jj; j++) {
	          var nodeValue = fn(this[j], arg1, arg2);
	          value = value ? value + nodeValue : nodeValue;
	        }
	        return value;
	      }
	    } else {
	      // we are a write, so apply to all children
	      for (i = 0; i < nodeCount; i++) {
	        fn(this[i], arg1, arg2);
	      }
	      // return self for chaining
	      return this;
	    }
	  };
	});

	function createEventHandler(element, events) {
	  var eventHandler = function(event, type) {
	    // jQuery specific api
	    event.isDefaultPrevented = function() {
	      return event.defaultPrevented;
	    };

	    var eventFns = events[type || event.type];
	    var eventFnsLength = eventFns ? eventFns.length : 0;

	    if (!eventFnsLength) return;

	    if (isUndefined(event.immediatePropagationStopped)) {
	      var originalStopImmediatePropagation = event.stopImmediatePropagation;
	      event.stopImmediatePropagation = function() {
	        event.immediatePropagationStopped = true;

	        if (event.stopPropagation) {
	          event.stopPropagation();
	        }

	        if (originalStopImmediatePropagation) {
	          originalStopImmediatePropagation.call(event);
	        }
	      };
	    }

	    event.isImmediatePropagationStopped = function() {
	      return event.immediatePropagationStopped === true;
	    };

	    // Copy event handlers in case event handlers array is modified during execution.
	    if ((eventFnsLength > 1)) {
	      eventFns = shallowCopy(eventFns);
	    }

	    for (var i = 0; i < eventFnsLength; i++) {
	      if (!event.isImmediatePropagationStopped()) {
	        eventFns[i].call(element, event);
	      }
	    }
	  };

	  // TODO: this is a hack for angularMocks/clearDataCache that makes it possible to deregister all
	  //       events on `element`
	  eventHandler.elem = element;
	  return eventHandler;
	}

	//////////////////////////////////////////
	// Functions iterating traversal.
	// These functions chain results into a single
	// selector.
	//////////////////////////////////////////
	forEach({
	  removeData: jqLiteRemoveData,

	  on: function jqLiteOn(element, type, fn, unsupported) {
	    if (isDefined(unsupported)) throw jqLiteMinErr('onargs', 'jqLite#on() does not support the `selector` or `eventData` parameters');

	    // Do not add event handlers to non-elements because they will not be cleaned up.
	    if (!jqLiteAcceptsData(element)) {
	      return;
	    }

	    var expandoStore = jqLiteExpandoStore(element, true);
	    var events = expandoStore.events;
	    var handle = expandoStore.handle;

	    if (!handle) {
	      handle = expandoStore.handle = createEventHandler(element, events);
	    }

	    // http://jsperf.com/string-indexof-vs-split
	    var types = type.indexOf(' ') >= 0 ? type.split(' ') : [type];
	    var i = types.length;

	    while (i--) {
	      type = types[i];
	      var eventFns = events[type];

	      if (!eventFns) {
	        events[type] = [];

	        if (type === 'mouseenter' || type === 'mouseleave') {
	          // Refer to jQuery's implementation of mouseenter & mouseleave
	          // Read about mouseenter and mouseleave:
	          // http://www.quirksmode.org/js/events_mouse.html#link8

	          jqLiteOn(element, MOUSE_EVENT_MAP[type], function(event) {
	            var target = this, related = event.relatedTarget;
	            // For mousenter/leave call the handler if related is outside the target.
	            // NB: No relatedTarget if the mouse left/entered the browser window
	            if (!related || (related !== target && !target.contains(related))) {
	              handle(event, type);
	            }
	          });

	        } else {
	          if (type !== '$destroy') {
	            addEventListenerFn(element, type, handle);
	          }
	        }
	        eventFns = events[type];
	      }
	      eventFns.push(fn);
	    }
	  },

	  off: jqLiteOff,

	  one: function(element, type, fn) {
	    element = jqLite(element);

	    //add the listener twice so that when it is called
	    //you can remove the original function and still be
	    //able to call element.off(ev, fn) normally
	    element.on(type, function onFn() {
	      element.off(type, fn);
	      element.off(type, onFn);
	    });
	    element.on(type, fn);
	  },

	  replaceWith: function(element, replaceNode) {
	    var index, parent = element.parentNode;
	    jqLiteDealoc(element);
	    forEach(new JQLite(replaceNode), function(node) {
	      if (index) {
	        parent.insertBefore(node, index.nextSibling);
	      } else {
	        parent.replaceChild(node, element);
	      }
	      index = node;
	    });
	  },

	  children: function(element) {
	    var children = [];
	    forEach(element.childNodes, function(element) {
	      if (element.nodeType === NODE_TYPE_ELEMENT) {
	        children.push(element);
	      }
	    });
	    return children;
	  },

	  contents: function(element) {
	    return element.contentDocument || element.childNodes || [];
	  },

	  append: function(element, node) {
	    var nodeType = element.nodeType;
	    if (nodeType !== NODE_TYPE_ELEMENT && nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT) return;

	    node = new JQLite(node);

	    for (var i = 0, ii = node.length; i < ii; i++) {
	      var child = node[i];
	      element.appendChild(child);
	    }
	  },

	  prepend: function(element, node) {
	    if (element.nodeType === NODE_TYPE_ELEMENT) {
	      var index = element.firstChild;
	      forEach(new JQLite(node), function(child) {
	        element.insertBefore(child, index);
	      });
	    }
	  },

	  wrap: function(element, wrapNode) {
	    wrapNode = jqLite(wrapNode).eq(0).clone()[0];
	    var parent = element.parentNode;
	    if (parent) {
	      parent.replaceChild(wrapNode, element);
	    }
	    wrapNode.appendChild(element);
	  },

	  remove: jqLiteRemove,

	  detach: function(element) {
	    jqLiteRemove(element, true);
	  },

	  after: function(element, newElement) {
	    var index = element, parent = element.parentNode;
	    newElement = new JQLite(newElement);

	    for (var i = 0, ii = newElement.length; i < ii; i++) {
	      var node = newElement[i];
	      parent.insertBefore(node, index.nextSibling);
	      index = node;
	    }
	  },

	  addClass: jqLiteAddClass,
	  removeClass: jqLiteRemoveClass,

	  toggleClass: function(element, selector, condition) {
	    if (selector) {
	      forEach(selector.split(' '), function(className) {
	        var classCondition = condition;
	        if (isUndefined(classCondition)) {
	          classCondition = !jqLiteHasClass(element, className);
	        }
	        (classCondition ? jqLiteAddClass : jqLiteRemoveClass)(element, className);
	      });
	    }
	  },

	  parent: function(element) {
	    var parent = element.parentNode;
	    return parent && parent.nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT ? parent : null;
	  },

	  next: function(element) {
	    return element.nextElementSibling;
	  },

	  find: function(element, selector) {
	    if (element.getElementsByTagName) {
	      return element.getElementsByTagName(selector);
	    } else {
	      return [];
	    }
	  },

	  clone: jqLiteClone,

	  triggerHandler: function(element, event, extraParameters) {

	    var dummyEvent, eventFnsCopy, handlerArgs;
	    var eventName = event.type || event;
	    var expandoStore = jqLiteExpandoStore(element);
	    var events = expandoStore && expandoStore.events;
	    var eventFns = events && events[eventName];

	    if (eventFns) {
	      // Create a dummy event to pass to the handlers
	      dummyEvent = {
	        preventDefault: function() { this.defaultPrevented = true; },
	        isDefaultPrevented: function() { return this.defaultPrevented === true; },
	        stopImmediatePropagation: function() { this.immediatePropagationStopped = true; },
	        isImmediatePropagationStopped: function() { return this.immediatePropagationStopped === true; },
	        stopPropagation: noop,
	        type: eventName,
	        target: element
	      };

	      // If a custom event was provided then extend our dummy event with it
	      if (event.type) {
	        dummyEvent = extend(dummyEvent, event);
	      }

	      // Copy event handlers in case event handlers array is modified during execution.
	      eventFnsCopy = shallowCopy(eventFns);
	      handlerArgs = extraParameters ? [dummyEvent].concat(extraParameters) : [dummyEvent];

	      forEach(eventFnsCopy, function(fn) {
	        if (!dummyEvent.isImmediatePropagationStopped()) {
	          fn.apply(element, handlerArgs);
	        }
	      });
	    }
	  }
	}, function(fn, name) {
	  /**
	   * chaining functions
	   */
	  JQLite.prototype[name] = function(arg1, arg2, arg3) {
	    var value;

	    for (var i = 0, ii = this.length; i < ii; i++) {
	      if (isUndefined(value)) {
	        value = fn(this[i], arg1, arg2, arg3);
	        if (isDefined(value)) {
	          // any function which returns a value needs to be wrapped
	          value = jqLite(value);
	        }
	      } else {
	        jqLiteAddNodes(value, fn(this[i], arg1, arg2, arg3));
	      }
	    }
	    return isDefined(value) ? value : this;
	  };

	  // bind legacy bind/unbind to on/off
	  JQLite.prototype.bind = JQLite.prototype.on;
	  JQLite.prototype.unbind = JQLite.prototype.off;
	});


	// Provider for private $$jqLite service
	function $$jqLiteProvider() {
	  this.$get = function $$jqLite() {
	    return extend(JQLite, {
	      hasClass: function(node, classes) {
	        if (node.attr) node = node[0];
	        return jqLiteHasClass(node, classes);
	      },
	      addClass: function(node, classes) {
	        if (node.attr) node = node[0];
	        return jqLiteAddClass(node, classes);
	      },
	      removeClass: function(node, classes) {
	        if (node.attr) node = node[0];
	        return jqLiteRemoveClass(node, classes);
	      }
	    });
	  };
	}

	/**
	 * Computes a hash of an 'obj'.
	 * Hash of a:
	 *  string is string
	 *  number is number as string
	 *  object is either result of calling $$hashKey function on the object or uniquely generated id,
	 *         that is also assigned to the $$hashKey property of the object.
	 *
	 * @param obj
	 * @returns {string} hash string such that the same input will have the same hash string.
	 *         The resulting string key is in 'type:hashKey' format.
	 */
	function hashKey(obj, nextUidFn) {
	  var key = obj && obj.$$hashKey;

	  if (key) {
	    if (typeof key === 'function') {
	      key = obj.$$hashKey();
	    }
	    return key;
	  }

	  var objType = typeof obj;
	  if (objType == 'function' || (objType == 'object' && obj !== null)) {
	    key = obj.$$hashKey = objType + ':' + (nextUidFn || nextUid)();
	  } else {
	    key = objType + ':' + obj;
	  }

	  return key;
	}

	/**
	 * HashMap which can use objects as keys
	 */
	function HashMap(array, isolatedUid) {
	  if (isolatedUid) {
	    var uid = 0;
	    this.nextUid = function() {
	      return ++uid;
	    };
	  }
	  forEach(array, this.put, this);
	}
	HashMap.prototype = {
	  /**
	   * Store key value pair
	   * @param key key to store can be any type
	   * @param value value to store can be any type
	   */
	  put: function(key, value) {
	    this[hashKey(key, this.nextUid)] = value;
	  },

	  /**
	   * @param key
	   * @returns {Object} the value for the key
	   */
	  get: function(key) {
	    return this[hashKey(key, this.nextUid)];
	  },

	  /**
	   * Remove the key/value pair
	   * @param key
	   */
	  remove: function(key) {
	    var value = this[key = hashKey(key, this.nextUid)];
	    delete this[key];
	    return value;
	  }
	};

	var $$HashMapProvider = [function() {
	  this.$get = [function() {
	    return HashMap;
	  }];
	}];

	/**
	 * @ngdoc function
	 * @module ng
	 * @name angular.injector
	 * @kind function
	 *
	 * @description
	 * Creates an injector object that can be used for retrieving services as well as for
	 * dependency injection (see {@link guide/di dependency injection}).
	 *
	 * @param {Array.<string|Function>} modules A list of module functions or their aliases. See
	 *     {@link angular.module}. The `ng` module must be explicitly added.
	 * @param {boolean=} [strictDi=false] Whether the injector should be in strict mode, which
	 *     disallows argument name annotation inference.
	 * @returns {injector} Injector object. See {@link auto.$injector $injector}.
	 *
	 * @example
	 * Typical usage
	 * ```js
	 *   // create an injector
	 *   var $injector = angular.injector(['ng']);
	 *
	 *   // use the injector to kick off your application
	 *   // use the type inference to auto inject arguments, or use implicit injection
	 *   $injector.invoke(function($rootScope, $compile, $document) {
	 *     $compile($document)($rootScope);
	 *     $rootScope.$digest();
	 *   });
	 * ```
	 *
	 * Sometimes you want to get access to the injector of a currently running Angular app
	 * from outside Angular. Perhaps, you want to inject and compile some markup after the
	 * application has been bootstrapped. You can do this using the extra `injector()` added
	 * to JQuery/jqLite elements. See {@link angular.element}.
	 *
	 * *This is fairly rare but could be the case if a third party library is injecting the
	 * markup.*
	 *
	 * In the following example a new block of HTML containing a `ng-controller`
	 * directive is added to the end of the document body by JQuery. We then compile and link
	 * it into the current AngularJS scope.
	 *
	 * ```js
	 * var $div = $('<div ng-controller="MyCtrl">{{content.label}}</div>');
	 * $(document.body).append($div);
	 *
	 * angular.element(document).injector().invoke(function($compile) {
	 *   var scope = angular.element($div).scope();
	 *   $compile($div)(scope);
	 * });
	 * ```
	 */


	/**
	 * @ngdoc module
	 * @name auto
	 * @description
	 *
	 * Implicit module which gets automatically added to each {@link auto.$injector $injector}.
	 */

	var FN_ARGS = /^function\s*[^\(]*\(\s*([^\)]*)\)/m;
	var FN_ARG_SPLIT = /,/;
	var FN_ARG = /^\s*(_?)(\S+?)\1\s*$/;
	var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
	var $injectorMinErr = minErr('$injector');

	function anonFn(fn) {
	  // For anonymous functions, showing at the very least the function signature can help in
	  // debugging.
	  var fnText = fn.toString().replace(STRIP_COMMENTS, ''),
	      args = fnText.match(FN_ARGS);
	  if (args) {
	    return 'function(' + (args[1] || '').replace(/[\s\r\n]+/, ' ') + ')';
	  }
	  return 'fn';
	}

	function annotate(fn, strictDi, name) {
	  var $inject,
	      fnText,
	      argDecl,
	      last;

	  if (typeof fn === 'function') {
	    if (!($inject = fn.$inject)) {
	      $inject = [];
	      if (fn.length) {
	        if (strictDi) {
	          if (!isString(name) || !name) {
	            name = fn.name || anonFn(fn);
	          }
	          throw $injectorMinErr('strictdi',
	            '{0} is not using explicit annotation and cannot be invoked in strict mode', name);
	        }
	        fnText = fn.toString().replace(STRIP_COMMENTS, '');
	        argDecl = fnText.match(FN_ARGS);
	        forEach(argDecl[1].split(FN_ARG_SPLIT), function(arg) {
	          arg.replace(FN_ARG, function(all, underscore, name) {
	            $inject.push(name);
	          });
	        });
	      }
	      fn.$inject = $inject;
	    }
	  } else if (isArray(fn)) {
	    last = fn.length - 1;
	    assertArgFn(fn[last], 'fn');
	    $inject = fn.slice(0, last);
	  } else {
	    assertArgFn(fn, 'fn', true);
	  }
	  return $inject;
	}

	///////////////////////////////////////

	/**
	 * @ngdoc service
	 * @name $injector
	 *
	 * @description
	 *
	 * `$injector` is used to retrieve object instances as defined by
	 * {@link auto.$provide provider}, instantiate types, invoke methods,
	 * and load modules.
	 *
	 * The following always holds true:
	 *
	 * ```js
	 *   var $injector = angular.injector();
	 *   expect($injector.get('$injector')).toBe($injector);
	 *   expect($injector.invoke(function($injector) {
	 *     return $injector;
	 *   })).toBe($injector);
	 * ```
	 *
	 * # Injection Function Annotation
	 *
	 * JavaScript does not have annotations, and annotations are needed for dependency injection. The
	 * following are all valid ways of annotating function with injection arguments and are equivalent.
	 *
	 * ```js
	 *   // inferred (only works if code not minified/obfuscated)
	 *   $injector.invoke(function(serviceA){});
	 *
	 *   // annotated
	 *   function explicit(serviceA) {};
	 *   explicit.$inject = ['serviceA'];
	 *   $injector.invoke(explicit);
	 *
	 *   // inline
	 *   $injector.invoke(['serviceA', function(serviceA){}]);
	 * ```
	 *
	 * ## Inference
	 *
	 * In JavaScript calling `toString()` on a function returns the function definition. The definition
	 * can then be parsed and the function arguments can be extracted. This method of discovering
	 * annotations is disallowed when the injector is in strict mode.
	 * *NOTE:* This does not work with minification, and obfuscation tools since these tools change the
	 * argument names.
	 *
	 * ## `$inject` Annotation
	 * By adding an `$inject` property onto a function the injection parameters can be specified.
	 *
	 * ## Inline
	 * As an array of injection names, where the last item in the array is the function to call.
	 */

	/**
	 * @ngdoc method
	 * @name $injector#get
	 *
	 * @description
	 * Return an instance of the service.
	 *
	 * @param {string} name The name of the instance to retrieve.
	 * @param {string=} caller An optional string to provide the origin of the function call for error messages.
	 * @return {*} The instance.
	 */

	/**
	 * @ngdoc method
	 * @name $injector#invoke
	 *
	 * @description
	 * Invoke the method and supply the method arguments from the `$injector`.
	 *
	 * @param {Function|Array.<string|Function>} fn The injectable function to invoke. Function parameters are
	 *   injected according to the {@link guide/di $inject Annotation} rules.
	 * @param {Object=} self The `this` for the invoked method.
	 * @param {Object=} locals Optional object. If preset then any argument names are read from this
	 *                         object first, before the `$injector` is consulted.
	 * @returns {*} the value returned by the invoked `fn` function.
	 */

	/**
	 * @ngdoc method
	 * @name $injector#has
	 *
	 * @description
	 * Allows the user to query if the particular service exists.
	 *
	 * @param {string} name Name of the service to query.
	 * @returns {boolean} `true` if injector has given service.
	 */

	/**
	 * @ngdoc method
	 * @name $injector#instantiate
	 * @description
	 * Create a new instance of JS type. The method takes a constructor function, invokes the new
	 * operator, and supplies all of the arguments to the constructor function as specified by the
	 * constructor annotation.
	 *
	 * @param {Function} Type Annotated constructor function.
	 * @param {Object=} locals Optional object. If preset then any argument names are read from this
	 * object first, before the `$injector` is consulted.
	 * @returns {Object} new instance of `Type`.
	 */

	/**
	 * @ngdoc method
	 * @name $injector#annotate
	 *
	 * @description
	 * Returns an array of service names which the function is requesting for injection. This API is
	 * used by the injector to determine which services need to be injected into the function when the
	 * function is invoked. There are three ways in which the function can be annotated with the needed
	 * dependencies.
	 *
	 * # Argument names
	 *
	 * The simplest form is to extract the dependencies from the arguments of the function. This is done
	 * by converting the function into a string using `toString()` method and extracting the argument
	 * names.
	 * ```js
	 *   // Given
	 *   function MyController($scope, $route) {
	 *     // ...
	 *   }
	 *
	 *   // Then
	 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
	 * ```
	 *
	 * You can disallow this method by using strict injection mode.
	 *
	 * This method does not work with code minification / obfuscation. For this reason the following
	 * annotation strategies are supported.
	 *
	 * # The `$inject` property
	 *
	 * If a function has an `$inject` property and its value is an array of strings, then the strings
	 * represent names of services to be injected into the function.
	 * ```js
	 *   // Given
	 *   var MyController = function(obfuscatedScope, obfuscatedRoute) {
	 *     // ...
	 *   }
	 *   // Define function dependencies
	 *   MyController['$inject'] = ['$scope', '$route'];
	 *
	 *   // Then
	 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
	 * ```
	 *
	 * # The array notation
	 *
	 * It is often desirable to inline Injected functions and that's when setting the `$inject` property
	 * is very inconvenient. In these situations using the array notation to specify the dependencies in
	 * a way that survives minification is a better choice:
	 *
	 * ```js
	 *   // We wish to write this (not minification / obfuscation safe)
	 *   injector.invoke(function($compile, $rootScope) {
	 *     // ...
	 *   });
	 *
	 *   // We are forced to write break inlining
	 *   var tmpFn = function(obfuscatedCompile, obfuscatedRootScope) {
	 *     // ...
	 *   };
	 *   tmpFn.$inject = ['$compile', '$rootScope'];
	 *   injector.invoke(tmpFn);
	 *
	 *   // To better support inline function the inline annotation is supported
	 *   injector.invoke(['$compile', '$rootScope', function(obfCompile, obfRootScope) {
	 *     // ...
	 *   }]);
	 *
	 *   // Therefore
	 *   expect(injector.annotate(
	 *      ['$compile', '$rootScope', function(obfus_$compile, obfus_$rootScope) {}])
	 *    ).toEqual(['$compile', '$rootScope']);
	 * ```
	 *
	 * @param {Function|Array.<string|Function>} fn Function for which dependent service names need to
	 * be retrieved as described above.
	 *
	 * @param {boolean=} [strictDi=false] Disallow argument name annotation inference.
	 *
	 * @returns {Array.<string>} The names of the services which the function requires.
	 */




	/**
	 * @ngdoc service
	 * @name $provide
	 *
	 * @description
	 *
	 * The {@link auto.$provide $provide} service has a number of methods for registering components
	 * with the {@link auto.$injector $injector}. Many of these functions are also exposed on
	 * {@link angular.Module}.
	 *
	 * An Angular **service** is a singleton object created by a **service factory**.  These **service
	 * factories** are functions which, in turn, are created by a **service provider**.
	 * The **service providers** are constructor functions. When instantiated they must contain a
	 * property called `$get`, which holds the **service factory** function.
	 *
	 * When you request a service, the {@link auto.$injector $injector} is responsible for finding the
	 * correct **service provider**, instantiating it and then calling its `$get` **service factory**
	 * function to get the instance of the **service**.
	 *
	 * Often services have no configuration options and there is no need to add methods to the service
	 * provider.  The provider will be no more than a constructor function with a `$get` property. For
	 * these cases the {@link auto.$provide $provide} service has additional helper methods to register
	 * services without specifying a provider.
	 *
	 * * {@link auto.$provide#provider provider(provider)} - registers a **service provider** with the
	 *     {@link auto.$injector $injector}
	 * * {@link auto.$provide#constant constant(obj)} - registers a value/object that can be accessed by
	 *     providers and services.
	 * * {@link auto.$provide#value value(obj)} - registers a value/object that can only be accessed by
	 *     services, not providers.
	 * * {@link auto.$provide#factory factory(fn)} - registers a service **factory function**, `fn`,
	 *     that will be wrapped in a **service provider** object, whose `$get` property will contain the
	 *     given factory function.
	 * * {@link auto.$provide#service service(class)} - registers a **constructor function**, `class`
	 *     that will be wrapped in a **service provider** object, whose `$get` property will instantiate
	 *      a new object using the given constructor function.
	 *
	 * See the individual methods for more information and examples.
	 */

	/**
	 * @ngdoc method
	 * @name $provide#provider
	 * @description
	 *
	 * Register a **provider function** with the {@link auto.$injector $injector}. Provider functions
	 * are constructor functions, whose instances are responsible for "providing" a factory for a
	 * service.
	 *
	 * Service provider names start with the name of the service they provide followed by `Provider`.
	 * For example, the {@link ng.$log $log} service has a provider called
	 * {@link ng.$logProvider $logProvider}.
	 *
	 * Service provider objects can have additional methods which allow configuration of the provider
	 * and its service. Importantly, you can configure what kind of service is created by the `$get`
	 * method, or how that service will act. For example, the {@link ng.$logProvider $logProvider} has a
	 * method {@link ng.$logProvider#debugEnabled debugEnabled}
	 * which lets you specify whether the {@link ng.$log $log} service will log debug messages to the
	 * console or not.
	 *
	 * @param {string} name The name of the instance. NOTE: the provider will be available under `name +
	                        'Provider'` key.
	 * @param {(Object|function())} provider If the provider is:
	 *
	 *   - `Object`: then it should have a `$get` method. The `$get` method will be invoked using
	 *     {@link auto.$injector#invoke $injector.invoke()} when an instance needs to be created.
	 *   - `Constructor`: a new instance of the provider will be created using
	 *     {@link auto.$injector#instantiate $injector.instantiate()}, then treated as `object`.
	 *
	 * @returns {Object} registered provider instance

	 * @example
	 *
	 * The following example shows how to create a simple event tracking service and register it using
	 * {@link auto.$provide#provider $provide.provider()}.
	 *
	 * ```js
	 *  // Define the eventTracker provider
	 *  function EventTrackerProvider() {
	 *    var trackingUrl = '/track';
	 *
	 *    // A provider method for configuring where the tracked events should been saved
	 *    this.setTrackingUrl = function(url) {
	 *      trackingUrl = url;
	 *    };
	 *
	 *    // The service factory function
	 *    this.$get = ['$http', function($http) {
	 *      var trackedEvents = {};
	 *      return {
	 *        // Call this to track an event
	 *        event: function(event) {
	 *          var count = trackedEvents[event] || 0;
	 *          count += 1;
	 *          trackedEvents[event] = count;
	 *          return count;
	 *        },
	 *        // Call this to save the tracked events to the trackingUrl
	 *        save: function() {
	 *          $http.post(trackingUrl, trackedEvents);
	 *        }
	 *      };
	 *    }];
	 *  }
	 *
	 *  describe('eventTracker', function() {
	 *    var postSpy;
	 *
	 *    beforeEach(module(function($provide) {
	 *      // Register the eventTracker provider
	 *      $provide.provider('eventTracker', EventTrackerProvider);
	 *    }));
	 *
	 *    beforeEach(module(function(eventTrackerProvider) {
	 *      // Configure eventTracker provider
	 *      eventTrackerProvider.setTrackingUrl('/custom-track');
	 *    }));
	 *
	 *    it('tracks events', inject(function(eventTracker) {
	 *      expect(eventTracker.event('login')).toEqual(1);
	 *      expect(eventTracker.event('login')).toEqual(2);
	 *    }));
	 *
	 *    it('saves to the tracking url', inject(function(eventTracker, $http) {
	 *      postSpy = spyOn($http, 'post');
	 *      eventTracker.event('login');
	 *      eventTracker.save();
	 *      expect(postSpy).toHaveBeenCalled();
	 *      expect(postSpy.mostRecentCall.args[0]).not.toEqual('/track');
	 *      expect(postSpy.mostRecentCall.args[0]).toEqual('/custom-track');
	 *      expect(postSpy.mostRecentCall.args[1]).toEqual({ 'login': 1 });
	 *    }));
	 *  });
	 * ```
	 */

	/**
	 * @ngdoc method
	 * @name $provide#factory
	 * @description
	 *
	 * Register a **service factory**, which will be called to return the service instance.
	 * This is short for registering a service where its provider consists of only a `$get` property,
	 * which is the given service factory function.
	 * You should use {@link auto.$provide#factory $provide.factory(getFn)} if you do not need to
	 * configure your service in a provider.
	 *
	 * @param {string} name The name of the instance.
	 * @param {Function|Array.<string|Function>} $getFn The injectable $getFn for the instance creation.
	 *                      Internally this is a short hand for `$provide.provider(name, {$get: $getFn})`.
	 * @returns {Object} registered provider instance
	 *
	 * @example
	 * Here is an example of registering a service
	 * ```js
	 *   $provide.factory('ping', ['$http', function($http) {
	 *     return function ping() {
	 *       return $http.send('/ping');
	 *     };
	 *   }]);
	 * ```
	 * You would then inject and use this service like this:
	 * ```js
	 *   someModule.controller('Ctrl', ['ping', function(ping) {
	 *     ping();
	 *   }]);
	 * ```
	 */


	/**
	 * @ngdoc method
	 * @name $provide#service
	 * @description
	 *
	 * Register a **service constructor**, which will be invoked with `new` to create the service
	 * instance.
	 * This is short for registering a service where its provider's `$get` property is the service
	 * constructor function that will be used to instantiate the service instance.
	 *
	 * You should use {@link auto.$provide#service $provide.service(class)} if you define your service
	 * as a type/class.
	 *
	 * @param {string} name The name of the instance.
	 * @param {Function|Array.<string|Function>} constructor An injectable class (constructor function)
	 *     that will be instantiated.
	 * @returns {Object} registered provider instance
	 *
	 * @example
	 * Here is an example of registering a service using
	 * {@link auto.$provide#service $provide.service(class)}.
	 * ```js
	 *   var Ping = function($http) {
	 *     this.$http = $http;
	 *   };
	 *
	 *   Ping.$inject = ['$http'];
	 *
	 *   Ping.prototype.send = function() {
	 *     return this.$http.get('/ping');
	 *   };
	 *   $provide.service('ping', Ping);
	 * ```
	 * You would then inject and use this service like this:
	 * ```js
	 *   someModule.controller('Ctrl', ['ping', function(ping) {
	 *     ping.send();
	 *   }]);
	 * ```
	 */


	/**
	 * @ngdoc method
	 * @name $provide#value
	 * @description
	 *
	 * Register a **value service** with the {@link auto.$injector $injector}, such as a string, a
	 * number, an array, an object or a function.  This is short for registering a service where its
	 * provider's `$get` property is a factory function that takes no arguments and returns the **value
	 * service**.
	 *
	 * Value services are similar to constant services, except that they cannot be injected into a
	 * module configuration function (see {@link angular.Module#config}) but they can be overridden by
	 * an Angular
	 * {@link auto.$provide#decorator decorator}.
	 *
	 * @param {string} name The name of the instance.
	 * @param {*} value The value.
	 * @returns {Object} registered provider instance
	 *
	 * @example
	 * Here are some examples of creating value services.
	 * ```js
	 *   $provide.value('ADMIN_USER', 'admin');
	 *
	 *   $provide.value('RoleLookup', { admin: 0, writer: 1, reader: 2 });
	 *
	 *   $provide.value('halfOf', function(value) {
	 *     return value / 2;
	 *   });
	 * ```
	 */


	/**
	 * @ngdoc method
	 * @name $provide#constant
	 * @description
	 *
	 * Register a **constant service**, such as a string, a number, an array, an object or a function,
	 * with the {@link auto.$injector $injector}. Unlike {@link auto.$provide#value value} it can be
	 * injected into a module configuration function (see {@link angular.Module#config}) and it cannot
	 * be overridden by an Angular {@link auto.$provide#decorator decorator}.
	 *
	 * @param {string} name The name of the constant.
	 * @param {*} value The constant value.
	 * @returns {Object} registered instance
	 *
	 * @example
	 * Here a some examples of creating constants:
	 * ```js
	 *   $provide.constant('SHARD_HEIGHT', 306);
	 *
	 *   $provide.constant('MY_COLOURS', ['red', 'blue', 'grey']);
	 *
	 *   $provide.constant('double', function(value) {
	 *     return value * 2;
	 *   });
	 * ```
	 */


	/**
	 * @ngdoc method
	 * @name $provide#decorator
	 * @description
	 *
	 * Register a **service decorator** with the {@link auto.$injector $injector}. A service decorator
	 * intercepts the creation of a service, allowing it to override or modify the behaviour of the
	 * service. The object returned by the decorator may be the original service, or a new service
	 * object which replaces or wraps and delegates to the original service.
	 *
	 * @param {string} name The name of the service to decorate.
	 * @param {Function|Array.<string|Function>} decorator This function will be invoked when the service needs to be
	 *    instantiated and should return the decorated service instance. The function is called using
	 *    the {@link auto.$injector#invoke injector.invoke} method and is therefore fully injectable.
	 *    Local injection arguments:
	 *
	 *    * `$delegate` - The original service instance, which can be monkey patched, configured,
	 *      decorated or delegated to.
	 *
	 * @example
	 * Here we decorate the {@link ng.$log $log} service to convert warnings to errors by intercepting
	 * calls to {@link ng.$log#error $log.warn()}.
	 * ```js
	 *   $provide.decorator('$log', ['$delegate', function($delegate) {
	 *     $delegate.warn = $delegate.error;
	 *     return $delegate;
	 *   }]);
	 * ```
	 */


	function createInjector(modulesToLoad, strictDi) {
	  strictDi = (strictDi === true);
	  var INSTANTIATING = {},
	      providerSuffix = 'Provider',
	      path = [],
	      loadedModules = new HashMap([], true),
	      providerCache = {
	        $provide: {
	            provider: supportObject(provider),
	            factory: supportObject(factory),
	            service: supportObject(service),
	            value: supportObject(value),
	            constant: supportObject(constant),
	            decorator: decorator
	          }
	      },
	      providerInjector = (providerCache.$injector =
	          createInternalInjector(providerCache, function(serviceName, caller) {
	            if (angular.isString(caller)) {
	              path.push(caller);
	            }
	            throw $injectorMinErr('unpr', "Unknown provider: {0}", path.join(' <- '));
	          })),
	      instanceCache = {},
	      instanceInjector = (instanceCache.$injector =
	          createInternalInjector(instanceCache, function(serviceName, caller) {
	            var provider = providerInjector.get(serviceName + providerSuffix, caller);
	            return instanceInjector.invoke(provider.$get, provider, undefined, serviceName);
	          }));


	  forEach(loadModules(modulesToLoad), function(fn) { instanceInjector.invoke(fn || noop); });

	  return instanceInjector;

	  ////////////////////////////////////
	  // $provider
	  ////////////////////////////////////

	  function supportObject(delegate) {
	    return function(key, value) {
	      if (isObject(key)) {
	        forEach(key, reverseParams(delegate));
	      } else {
	        return delegate(key, value);
	      }
	    };
	  }

	  function provider(name, provider_) {
	    assertNotHasOwnProperty(name, 'service');
	    if (isFunction(provider_) || isArray(provider_)) {
	      provider_ = providerInjector.instantiate(provider_);
	    }
	    if (!provider_.$get) {
	      throw $injectorMinErr('pget', "Provider '{0}' must define $get factory method.", name);
	    }
	    return providerCache[name + providerSuffix] = provider_;
	  }

	  function enforceReturnValue(name, factory) {
	    return function enforcedReturnValue() {
	      var result = instanceInjector.invoke(factory, this);
	      if (isUndefined(result)) {
	        throw $injectorMinErr('undef', "Provider '{0}' must return a value from $get factory method.", name);
	      }
	      return result;
	    };
	  }

	  function factory(name, factoryFn, enforce) {
	    return provider(name, {
	      $get: enforce !== false ? enforceReturnValue(name, factoryFn) : factoryFn
	    });
	  }

	  function service(name, constructor) {
	    return factory(name, ['$injector', function($injector) {
	      return $injector.instantiate(constructor);
	    }]);
	  }

	  function value(name, val) { return factory(name, valueFn(val), false); }

	  function constant(name, value) {
	    assertNotHasOwnProperty(name, 'constant');
	    providerCache[name] = value;
	    instanceCache[name] = value;
	  }

	  function decorator(serviceName, decorFn) {
	    var origProvider = providerInjector.get(serviceName + providerSuffix),
	        orig$get = origProvider.$get;

	    origProvider.$get = function() {
	      var origInstance = instanceInjector.invoke(orig$get, origProvider);
	      return instanceInjector.invoke(decorFn, null, {$delegate: origInstance});
	    };
	  }

	  ////////////////////////////////////
	  // Module Loading
	  ////////////////////////////////////
	  function loadModules(modulesToLoad) {
	    var runBlocks = [], moduleFn;
	    forEach(modulesToLoad, function(module) {
	      if (loadedModules.get(module)) return;
	      loadedModules.put(module, true);

	      function runInvokeQueue(queue) {
	        var i, ii;
	        for (i = 0, ii = queue.length; i < ii; i++) {
	          var invokeArgs = queue[i],
	              provider = providerInjector.get(invokeArgs[0]);

	          provider[invokeArgs[1]].apply(provider, invokeArgs[2]);
	        }
	      }

	      try {
	        if (isString(module)) {
	          moduleFn = angularModule(module);
	          runBlocks = runBlocks.concat(loadModules(moduleFn.requires)).concat(moduleFn._runBlocks);
	          runInvokeQueue(moduleFn._invokeQueue);
	          runInvokeQueue(moduleFn._configBlocks);
	        } else if (isFunction(module)) {
	            runBlocks.push(providerInjector.invoke(module));
	        } else if (isArray(module)) {
	            runBlocks.push(providerInjector.invoke(module));
	        } else {
	          assertArgFn(module, 'module');
	        }
	      } catch (e) {
	        if (isArray(module)) {
	          module = module[module.length - 1];
	        }
	        if (e.message && e.stack && e.stack.indexOf(e.message) == -1) {
	          // Safari & FF's stack traces don't contain error.message content
	          // unlike those of Chrome and IE
	          // So if stack doesn't contain message, we create a new string that contains both.
	          // Since error.stack is read-only in Safari, I'm overriding e and not e.stack here.
	          /* jshint -W022 */
	          e = e.message + '\n' + e.stack;
	        }
	        throw $injectorMinErr('modulerr', "Failed to instantiate module {0} due to:\n{1}",
	                  module, e.stack || e.message || e);
	      }
	    });
	    return runBlocks;
	  }

	  ////////////////////////////////////
	  // internal Injector
	  ////////////////////////////////////

	  function createInternalInjector(cache, factory) {

	    function getService(serviceName, caller) {
	      if (cache.hasOwnProperty(serviceName)) {
	        if (cache[serviceName] === INSTANTIATING) {
	          throw $injectorMinErr('cdep', 'Circular dependency found: {0}',
	                    serviceName + ' <- ' + path.join(' <- '));
	        }
	        return cache[serviceName];
	      } else {
	        try {
	          path.unshift(serviceName);
	          cache[serviceName] = INSTANTIATING;
	          return cache[serviceName] = factory(serviceName, caller);
	        } catch (err) {
	          if (cache[serviceName] === INSTANTIATING) {
	            delete cache[serviceName];
	          }
	          throw err;
	        } finally {
	          path.shift();
	        }
	      }
	    }

	    function invoke(fn, self, locals, serviceName) {
	      if (typeof locals === 'string') {
	        serviceName = locals;
	        locals = null;
	      }

	      var args = [],
	          $inject = createInjector.$$annotate(fn, strictDi, serviceName),
	          length, i,
	          key;

	      for (i = 0, length = $inject.length; i < length; i++) {
	        key = $inject[i];
	        if (typeof key !== 'string') {
	          throw $injectorMinErr('itkn',
	                  'Incorrect injection token! Expected service name as string, got {0}', key);
	        }
	        args.push(
	          locals && locals.hasOwnProperty(key)
	          ? locals[key]
	          : getService(key, serviceName)
	        );
	      }
	      if (isArray(fn)) {
	        fn = fn[length];
	      }

	      // http://jsperf.com/angularjs-invoke-apply-vs-switch
	      // #5388
	      return fn.apply(self, args);
	    }

	    function instantiate(Type, locals, serviceName) {
	      // Check if Type is annotated and use just the given function at n-1 as parameter
	      // e.g. someModule.factory('greeter', ['$window', function(renamed$window) {}]);
	      // Object creation: http://jsperf.com/create-constructor/2
	      var instance = Object.create((isArray(Type) ? Type[Type.length - 1] : Type).prototype || null);
	      var returnedValue = invoke(Type, instance, locals, serviceName);

	      return isObject(returnedValue) || isFunction(returnedValue) ? returnedValue : instance;
	    }

	    return {
	      invoke: invoke,
	      instantiate: instantiate,
	      get: getService,
	      annotate: createInjector.$$annotate,
	      has: function(name) {
	        return providerCache.hasOwnProperty(name + providerSuffix) || cache.hasOwnProperty(name);
	      }
	    };
	  }
	}

	createInjector.$$annotate = annotate;

	/**
	 * @ngdoc provider
	 * @name $anchorScrollProvider
	 *
	 * @description
	 * Use `$anchorScrollProvider` to disable automatic scrolling whenever
	 * {@link ng.$location#hash $location.hash()} changes.
	 */
	function $AnchorScrollProvider() {

	  var autoScrollingEnabled = true;

	  /**
	   * @ngdoc method
	   * @name $anchorScrollProvider#disableAutoScrolling
	   *
	   * @description
	   * By default, {@link ng.$anchorScroll $anchorScroll()} will automatically detect changes to
	   * {@link ng.$location#hash $location.hash()} and scroll to the element matching the new hash.<br />
	   * Use this method to disable automatic scrolling.
	   *
	   * If automatic scrolling is disabled, one must explicitly call
	   * {@link ng.$anchorScroll $anchorScroll()} in order to scroll to the element related to the
	   * current hash.
	   */
	  this.disableAutoScrolling = function() {
	    autoScrollingEnabled = false;
	  };

	  /**
	   * @ngdoc service
	   * @name $anchorScroll
	   * @kind function
	   * @requires $window
	   * @requires $location
	   * @requires $rootScope
	   *
	   * @description
	   * When called, it scrolls to the element related to the specified `hash` or (if omitted) to the
	   * current value of {@link ng.$location#hash $location.hash()}, according to the rules specified
	   * in the
	   * [HTML5 spec](http://dev.w3.org/html5/spec/Overview.html#the-indicated-part-of-the-document).
	   *
	   * It also watches the {@link ng.$location#hash $location.hash()} and automatically scrolls to
	   * match any anchor whenever it changes. This can be disabled by calling
	   * {@link ng.$anchorScrollProvider#disableAutoScrolling $anchorScrollProvider.disableAutoScrolling()}.
	   *
	   * Additionally, you can use its {@link ng.$anchorScroll#yOffset yOffset} property to specify a
	   * vertical scroll-offset (either fixed or dynamic).
	   *
	   * @param {string=} hash The hash specifying the element to scroll to. If omitted, the value of
	   *                       {@link ng.$location#hash $location.hash()} will be used.
	   *
	   * @property {(number|function|jqLite)} yOffset
	   * If set, specifies a vertical scroll-offset. This is often useful when there are fixed
	   * positioned elements at the top of the page, such as navbars, headers etc.
	   *
	   * `yOffset` can be specified in various ways:
	   * - **number**: A fixed number of pixels to be used as offset.<br /><br />
	   * - **function**: A getter function called everytime `$anchorScroll()` is executed. Must return
	   *   a number representing the offset (in pixels).<br /><br />
	   * - **jqLite**: A jqLite/jQuery element to be used for specifying the offset. The distance from
	   *   the top of the page to the element's bottom will be used as offset.<br />
	   *   **Note**: The element will be taken into account only as long as its `position` is set to
	   *   `fixed`. This option is useful, when dealing with responsive navbars/headers that adjust
	   *   their height and/or positioning according to the viewport's size.
	   *
	   * <br />
	   * <div class="alert alert-warning">
	   * In order for `yOffset` to work properly, scrolling should take place on the document's root and
	   * not some child element.
	   * </div>
	   *
	   * @example
	     <example module="anchorScrollExample">
	       <file name="index.html">
	         <div id="scrollArea" ng-controller="ScrollController">
	           <a ng-click="gotoBottom()">Go to bottom</a>
	           <a id="bottom"></a> You're at the bottom!
	         </div>
	       </file>
	       <file name="script.js">
	         angular.module('anchorScrollExample', [])
	           .controller('ScrollController', ['$scope', '$location', '$anchorScroll',
	             function ($scope, $location, $anchorScroll) {
	               $scope.gotoBottom = function() {
	                 // set the location.hash to the id of
	                 // the element you wish to scroll to.
	                 $location.hash('bottom');

	                 // call $anchorScroll()
	                 $anchorScroll();
	               };
	             }]);
	       </file>
	       <file name="style.css">
	         #scrollArea {
	           height: 280px;
	           overflow: auto;
	         }

	         #bottom {
	           display: block;
	           margin-top: 2000px;
	         }
	       </file>
	     </example>
	   *
	   * <hr />
	   * The example below illustrates the use of a vertical scroll-offset (specified as a fixed value).
	   * See {@link ng.$anchorScroll#yOffset $anchorScroll.yOffset} for more details.
	   *
	   * @example
	     <example module="anchorScrollOffsetExample">
	       <file name="index.html">
	         <div class="fixed-header" ng-controller="headerCtrl">
	           <a href="" ng-click="gotoAnchor(x)" ng-repeat="x in [1,2,3,4,5]">
	             Go to anchor {{x}}
	           </a>
	         </div>
	         <div id="anchor{{x}}" class="anchor" ng-repeat="x in [1,2,3,4,5]">
	           Anchor {{x}} of 5
	         </div>
	       </file>
	       <file name="script.js">
	         angular.module('anchorScrollOffsetExample', [])
	           .run(['$anchorScroll', function($anchorScroll) {
	             $anchorScroll.yOffset = 50;   // always scroll by 50 extra pixels
	           }])
	           .controller('headerCtrl', ['$anchorScroll', '$location', '$scope',
	             function ($anchorScroll, $location, $scope) {
	               $scope.gotoAnchor = function(x) {
	                 var newHash = 'anchor' + x;
	                 if ($location.hash() !== newHash) {
	                   // set the $location.hash to `newHash` and
	                   // $anchorScroll will automatically scroll to it
	                   $location.hash('anchor' + x);
	                 } else {
	                   // call $anchorScroll() explicitly,
	                   // since $location.hash hasn't changed
	                   $anchorScroll();
	                 }
	               };
	             }
	           ]);
	       </file>
	       <file name="style.css">
	         body {
	           padding-top: 50px;
	         }

	         .anchor {
	           border: 2px dashed DarkOrchid;
	           padding: 10px 10px 200px 10px;
	         }

	         .fixed-header {
	           background-color: rgba(0, 0, 0, 0.2);
	           height: 50px;
	           position: fixed;
	           top: 0; left: 0; right: 0;
	         }

	         .fixed-header > a {
	           display: inline-block;
	           margin: 5px 15px;
	         }
	       </file>
	     </example>
	   */
	  this.$get = ['$window', '$location', '$rootScope', function($window, $location, $rootScope) {
	    var document = $window.document;

	    // Helper function to get first anchor from a NodeList
	    // (using `Array#some()` instead of `angular#forEach()` since it's more performant
	    //  and working in all supported browsers.)
	    function getFirstAnchor(list) {
	      var result = null;
	      Array.prototype.some.call(list, function(element) {
	        if (nodeName_(element) === 'a') {
	          result = element;
	          return true;
	        }
	      });
	      return result;
	    }

	    function getYOffset() {

	      var offset = scroll.yOffset;

	      if (isFunction(offset)) {
	        offset = offset();
	      } else if (isElement(offset)) {
	        var elem = offset[0];
	        var style = $window.getComputedStyle(elem);
	        if (style.position !== 'fixed') {
	          offset = 0;
	        } else {
	          offset = elem.getBoundingClientRect().bottom;
	        }
	      } else if (!isNumber(offset)) {
	        offset = 0;
	      }

	      return offset;
	    }

	    function scrollTo(elem) {
	      if (elem) {
	        elem.scrollIntoView();

	        var offset = getYOffset();

	        if (offset) {
	          // `offset` is the number of pixels we should scroll UP in order to align `elem` properly.
	          // This is true ONLY if the call to `elem.scrollIntoView()` initially aligns `elem` at the
	          // top of the viewport.
	          //
	          // IF the number of pixels from the top of `elem` to the end of the page's content is less
	          // than the height of the viewport, then `elem.scrollIntoView()` will align the `elem` some
	          // way down the page.
	          //
	          // This is often the case for elements near the bottom of the page.
	          //
	          // In such cases we do not need to scroll the whole `offset` up, just the difference between
	          // the top of the element and the offset, which is enough to align the top of `elem` at the
	          // desired position.
	          var elemTop = elem.getBoundingClientRect().top;
	          $window.scrollBy(0, elemTop - offset);
	        }
	      } else {
	        $window.scrollTo(0, 0);
	      }
	    }

	    function scroll(hash) {
	      hash = isString(hash) ? hash : $location.hash();
	      var elm;

	      // empty hash, scroll to the top of the page
	      if (!hash) scrollTo(null);

	      // element with given id
	      else if ((elm = document.getElementById(hash))) scrollTo(elm);

	      // first anchor with given name :-D
	      else if ((elm = getFirstAnchor(document.getElementsByName(hash)))) scrollTo(elm);

	      // no element and hash == 'top', scroll to the top of the page
	      else if (hash === 'top') scrollTo(null);
	    }

	    // does not scroll when user clicks on anchor link that is currently on
	    // (no url change, no $location.hash() change), browser native does scroll
	    if (autoScrollingEnabled) {
	      $rootScope.$watch(function autoScrollWatch() {return $location.hash();},
	        function autoScrollWatchAction(newVal, oldVal) {
	          // skip the initial scroll if $location.hash is empty
	          if (newVal === oldVal && newVal === '') return;

	          jqLiteDocumentLoaded(function() {
	            $rootScope.$evalAsync(scroll);
	          });
	        });
	    }

	    return scroll;
	  }];
	}

	var $animateMinErr = minErr('$animate');
	var ELEMENT_NODE = 1;
	var NG_ANIMATE_CLASSNAME = 'ng-animate';

	function mergeClasses(a,b) {
	  if (!a && !b) return '';
	  if (!a) return b;
	  if (!b) return a;
	  if (isArray(a)) a = a.join(' ');
	  if (isArray(b)) b = b.join(' ');
	  return a + ' ' + b;
	}

	function extractElementNode(element) {
	  for (var i = 0; i < element.length; i++) {
	    var elm = element[i];
	    if (elm.nodeType === ELEMENT_NODE) {
	      return elm;
	    }
	  }
	}

	function splitClasses(classes) {
	  if (isString(classes)) {
	    classes = classes.split(' ');
	  }

	  // Use createMap() to prevent class assumptions involving property names in
	  // Object.prototype
	  var obj = createMap();
	  forEach(classes, function(klass) {
	    // sometimes the split leaves empty string values
	    // incase extra spaces were applied to the options
	    if (klass.length) {
	      obj[klass] = true;
	    }
	  });
	  return obj;
	}

	// if any other type of options value besides an Object value is
	// passed into the $animate.method() animation then this helper code
	// will be run which will ignore it. While this patch is not the
	// greatest solution to this, a lot of existing plugins depend on
	// $animate to either call the callback (< 1.2) or return a promise
	// that can be changed. This helper function ensures that the options
	// are wiped clean incase a callback function is provided.
	function prepareAnimateOptions(options) {
	  return isObject(options)
	      ? options
	      : {};
	}

	var $$CoreAnimateRunnerProvider = function() {
	  this.$get = ['$q', '$$rAF', function($q, $$rAF) {
	    function AnimateRunner() {}
	    AnimateRunner.all = noop;
	    AnimateRunner.chain = noop;
	    AnimateRunner.prototype = {
	      end: noop,
	      cancel: noop,
	      resume: noop,
	      pause: noop,
	      complete: noop,
	      then: function(pass, fail) {
	        return $q(function(resolve) {
	          $$rAF(function() {
	            resolve();
	          });
	        }).then(pass, fail);
	      }
	    };
	    return AnimateRunner;
	  }];
	};

	// this is prefixed with Core since it conflicts with
	// the animateQueueProvider defined in ngAnimate/animateQueue.js
	var $$CoreAnimateQueueProvider = function() {
	  var postDigestQueue = new HashMap();
	  var postDigestElements = [];

	  this.$get = ['$$AnimateRunner', '$rootScope',
	       function($$AnimateRunner,   $rootScope) {
	    return {
	      enabled: noop,
	      on: noop,
	      off: noop,
	      pin: noop,

	      push: function(element, event, options, domOperation) {
	        domOperation        && domOperation();

	        options = options || {};
	        options.from        && element.css(options.from);
	        options.to          && element.css(options.to);

	        if (options.addClass || options.removeClass) {
	          addRemoveClassesPostDigest(element, options.addClass, options.removeClass);
	        }

	        return new $$AnimateRunner(); // jshint ignore:line
	      }
	    };

	    function addRemoveClassesPostDigest(element, add, remove) {
	      var data = postDigestQueue.get(element);
	      var classVal;

	      if (!data) {
	        postDigestQueue.put(element, data = {});
	        postDigestElements.push(element);
	      }

	      if (add) {
	        forEach(add.split(' '), function(className) {
	          if (className) {
	            data[className] = true;
	          }
	        });
	      }

	      if (remove) {
	        forEach(remove.split(' '), function(className) {
	          if (className) {
	            data[className] = false;
	          }
	        });
	      }

	      if (postDigestElements.length > 1) return;

	      $rootScope.$$postDigest(function() {
	        forEach(postDigestElements, function(element) {
	          var data = postDigestQueue.get(element);
	          if (data) {
	            var existing = splitClasses(element.attr('class'));
	            var toAdd = '';
	            var toRemove = '';
	            forEach(data, function(status, className) {
	              var hasClass = !!existing[className];
	              if (status !== hasClass) {
	                if (status) {
	                  toAdd += (toAdd.length ? ' ' : '') + className;
	                } else {
	                  toRemove += (toRemove.length ? ' ' : '') + className;
	                }
	              }
	            });

	            forEach(element, function(elm) {
	              toAdd    && jqLiteAddClass(elm, toAdd);
	              toRemove && jqLiteRemoveClass(elm, toRemove);
	            });
	            postDigestQueue.remove(element);
	          }
	        });

	        postDigestElements.length = 0;
	      });
	    }
	  }];
	};

	/**
	 * @ngdoc provider
	 * @name $animateProvider
	 *
	 * @description
	 * Default implementation of $animate that doesn't perform any animations, instead just
	 * synchronously performs DOM updates and resolves the returned runner promise.
	 *
	 * In order to enable animations the `ngAnimate` module has to be loaded.
	 *
	 * To see the functional implementation check out `src/ngAnimate/animate.js`.
	 */
	var $AnimateProvider = ['$provide', function($provide) {
	  var provider = this;

	  this.$$registeredAnimations = Object.create(null);

	   /**
	   * @ngdoc method
	   * @name $animateProvider#register
	   *
	   * @description
	   * Registers a new injectable animation factory function. The factory function produces the
	   * animation object which contains callback functions for each event that is expected to be
	   * animated.
	   *
	   *   * `eventFn`: `function(element, ... , doneFunction, options)`
	   *   The element to animate, the `doneFunction` and the options fed into the animation. Depending
	   *   on the type of animation additional arguments will be injected into the animation function. The
	   *   list below explains the function signatures for the different animation methods:
	   *
	   *   - setClass: function(element, addedClasses, removedClasses, doneFunction, options)
	   *   - addClass: function(element, addedClasses, doneFunction, options)
	   *   - removeClass: function(element, removedClasses, doneFunction, options)
	   *   - enter, leave, move: function(element, doneFunction, options)
	   *   - animate: function(element, fromStyles, toStyles, doneFunction, options)
	   *
	   *   Make sure to trigger the `doneFunction` once the animation is fully complete.
	   *
	   * ```js
	   *   return {
	   *     //enter, leave, move signature
	   *     eventFn : function(element, done, options) {
	   *       //code to run the animation
	   *       //once complete, then run done()
	   *       return function endFunction(wasCancelled) {
	   *         //code to cancel the animation
	   *       }
	   *     }
	   *   }
	   * ```
	   *
	   * @param {string} name The name of the animation (this is what the class-based CSS value will be compared to).
	   * @param {Function} factory The factory function that will be executed to return the animation
	   *                           object.
	   */
	  this.register = function(name, factory) {
	    if (name && name.charAt(0) !== '.') {
	      throw $animateMinErr('notcsel', "Expecting class selector starting with '.' got '{0}'.", name);
	    }

	    var key = name + '-animation';
	    provider.$$registeredAnimations[name.substr(1)] = key;
	    $provide.factory(key, factory);
	  };

	  /**
	   * @ngdoc method
	   * @name $animateProvider#classNameFilter
	   *
	   * @description
	   * Sets and/or returns the CSS class regular expression that is checked when performing
	   * an animation. Upon bootstrap the classNameFilter value is not set at all and will
	   * therefore enable $animate to attempt to perform an animation on any element that is triggered.
	   * When setting the `classNameFilter` value, animations will only be performed on elements
	   * that successfully match the filter expression. This in turn can boost performance
	   * for low-powered devices as well as applications containing a lot of structural operations.
	   * @param {RegExp=} expression The className expression which will be checked against all animations
	   * @return {RegExp} The current CSS className expression value. If null then there is no expression value
	   */
	  this.classNameFilter = function(expression) {
	    if (arguments.length === 1) {
	      this.$$classNameFilter = (expression instanceof RegExp) ? expression : null;
	      if (this.$$classNameFilter) {
	        var reservedRegex = new RegExp("(\\s+|\\/)" + NG_ANIMATE_CLASSNAME + "(\\s+|\\/)");
	        if (reservedRegex.test(this.$$classNameFilter.toString())) {
	          throw $animateMinErr('nongcls','$animateProvider.classNameFilter(regex) prohibits accepting a regex value which matches/contains the "{0}" CSS class.', NG_ANIMATE_CLASSNAME);

	        }
	      }
	    }
	    return this.$$classNameFilter;
	  };

	  this.$get = ['$$animateQueue', function($$animateQueue) {
	    function domInsert(element, parentElement, afterElement) {
	      // if for some reason the previous element was removed
	      // from the dom sometime before this code runs then let's
	      // just stick to using the parent element as the anchor
	      if (afterElement) {
	        var afterNode = extractElementNode(afterElement);
	        if (afterNode && !afterNode.parentNode && !afterNode.previousElementSibling) {
	          afterElement = null;
	        }
	      }
	      afterElement ? afterElement.after(element) : parentElement.prepend(element);
	    }

	    /**
	     * @ngdoc service
	     * @name $animate
	     * @description The $animate service exposes a series of DOM utility methods that provide support
	     * for animation hooks. The default behavior is the application of DOM operations, however,
	     * when an animation is detected (and animations are enabled), $animate will do the heavy lifting
	     * to ensure that animation runs with the triggered DOM operation.
	     *
	     * By default $animate doesn't trigger an animations. This is because the `ngAnimate` module isn't
	     * included and only when it is active then the animation hooks that `$animate` triggers will be
	     * functional. Once active then all structural `ng-` directives will trigger animations as they perform
	     * their DOM-related operations (enter, leave and move). Other directives such as `ngClass`,
	     * `ngShow`, `ngHide` and `ngMessages` also provide support for animations.
	     *
	     * It is recommended that the`$animate` service is always used when executing DOM-related procedures within directives.
	     *
	     * To learn more about enabling animation support, click here to visit the
	     * {@link ngAnimate ngAnimate module page}.
	     */
	    return {
	      // we don't call it directly since non-existant arguments may
	      // be interpreted as null within the sub enabled function

	      /**
	       *
	       * @ngdoc method
	       * @name $animate#on
	       * @kind function
	       * @description Sets up an event listener to fire whenever the animation event (enter, leave, move, etc...)
	       *    has fired on the given element or among any of its children. Once the listener is fired, the provided callback
	       *    is fired with the following params:
	       *
	       * ```js
	       * $animate.on('enter', container,
	       *    function callback(element, phase) {
	       *      // cool we detected an enter animation within the container
	       *    }
	       * );
	       * ```
	       *
	       * @param {string} event the animation event that will be captured (e.g. enter, leave, move, addClass, removeClass, etc...)
	       * @param {DOMElement} container the container element that will capture each of the animation events that are fired on itself
	       *     as well as among its children
	       * @param {Function} callback the callback function that will be fired when the listener is triggered
	       *
	       * The arguments present in the callback function are:
	       * * `element` - The captured DOM element that the animation was fired on.
	       * * `phase` - The phase of the animation. The two possible phases are **start** (when the animation starts) and **close** (when it ends).
	       */
	      on: $$animateQueue.on,

	      /**
	       *
	       * @ngdoc method
	       * @name $animate#off
	       * @kind function
	       * @description Deregisters an event listener based on the event which has been associated with the provided element. This method
	       * can be used in three different ways depending on the arguments:
	       *
	       * ```js
	       * // remove all the animation event listeners listening for `enter`
	       * $animate.off('enter');
	       *
	       * // remove all the animation event listeners listening for `enter` on the given element and its children
	       * $animate.off('enter', container);
	       *
	       * // remove the event listener function provided by `listenerFn` that is set
	       * // to listen for `enter` on the given `element` as well as its children
	       * $animate.off('enter', container, callback);
	       * ```
	       *
	       * @param {string} event the animation event (e.g. enter, leave, move, addClass, removeClass, etc...)
	       * @param {DOMElement=} container the container element the event listener was placed on
	       * @param {Function=} callback the callback function that was registered as the listener
	       */
	      off: $$animateQueue.off,

	      /**
	       * @ngdoc method
	       * @name $animate#pin
	       * @kind function
	       * @description Associates the provided element with a host parent element to allow the element to be animated even if it exists
	       *    outside of the DOM structure of the Angular application. By doing so, any animation triggered via `$animate` can be issued on the
	       *    element despite being outside the realm of the application or within another application. Say for example if the application
	       *    was bootstrapped on an element that is somewhere inside of the `<body>` tag, but we wanted to allow for an element to be situated
	       *    as a direct child of `document.body`, then this can be achieved by pinning the element via `$animate.pin(element)`. Keep in mind
	       *    that calling `$animate.pin(element, parentElement)` will not actually insert into the DOM anywhere; it will just create the association.
	       *
	       *    Note that this feature is only active when the `ngAnimate` module is used.
	       *
	       * @param {DOMElement} element the external element that will be pinned
	       * @param {DOMElement} parentElement the host parent element that will be associated with the external element
	       */
	      pin: $$animateQueue.pin,

	      /**
	       *
	       * @ngdoc method
	       * @name $animate#enabled
	       * @kind function
	       * @description Used to get and set whether animations are enabled or not on the entire application or on an element and its children. This
	       * function can be called in four ways:
	       *
	       * ```js
	       * // returns true or false
	       * $animate.enabled();
	       *
	       * // changes the enabled state for all animations
	       * $animate.enabled(false);
	       * $animate.enabled(true);
	       *
	       * // returns true or false if animations are enabled for an element
	       * $animate.enabled(element);
	       *
	       * // changes the enabled state for an element and its children
	       * $animate.enabled(element, true);
	       * $animate.enabled(element, false);
	       * ```
	       *
	       * @param {DOMElement=} element the element that will be considered for checking/setting the enabled state
	       * @param {boolean=} enabled whether or not the animations will be enabled for the element
	       *
	       * @return {boolean} whether or not animations are enabled
	       */
	      enabled: $$animateQueue.enabled,

	      /**
	       * @ngdoc method
	       * @name $animate#cancel
	       * @kind function
	       * @description Cancels the provided animation.
	       *
	       * @param {Promise} animationPromise The animation promise that is returned when an animation is started.
	       */
	      cancel: function(runner) {
	        runner.end && runner.end();
	      },

	      /**
	       *
	       * @ngdoc method
	       * @name $animate#enter
	       * @kind function
	       * @description Inserts the element into the DOM either after the `after` element (if provided) or
	       *   as the first child within the `parent` element and then triggers an animation.
	       *   A promise is returned that will be resolved during the next digest once the animation
	       *   has completed.
	       *
	       * @param {DOMElement} element the element which will be inserted into the DOM
	       * @param {DOMElement} parent the parent element which will append the element as
	       *   a child (so long as the after element is not present)
	       * @param {DOMElement=} after the sibling element after which the element will be appended
	       * @param {object=} options an optional collection of options/styles that will be applied to the element
	       *
	       * @return {Promise} the animation callback promise
	       */
	      enter: function(element, parent, after, options) {
	        parent = parent && jqLite(parent);
	        after = after && jqLite(after);
	        parent = parent || after.parent();
	        domInsert(element, parent, after);
	        return $$animateQueue.push(element, 'enter', prepareAnimateOptions(options));
	      },

	      /**
	       *
	       * @ngdoc method
	       * @name $animate#move
	       * @kind function
	       * @description Inserts (moves) the element into its new position in the DOM either after
	       *   the `after` element (if provided) or as the first child within the `parent` element
	       *   and then triggers an animation. A promise is returned that will be resolved
	       *   during the next digest once the animation has completed.
	       *
	       * @param {DOMElement} element the element which will be moved into the new DOM position
	       * @param {DOMElement} parent the parent element which will append the element as
	       *   a child (so long as the after element is not present)
	       * @param {DOMElement=} after the sibling element after which the element will be appended
	       * @param {object=} options an optional collection of options/styles that will be applied to the element
	       *
	       * @return {Promise} the animation callback promise
	       */
	      move: function(element, parent, after, options) {
	        parent = parent && jqLite(parent);
	        after = after && jqLite(after);
	        parent = parent || after.parent();
	        domInsert(element, parent, after);
	        return $$animateQueue.push(element, 'move', prepareAnimateOptions(options));
	      },

	      /**
	       * @ngdoc method
	       * @name $animate#leave
	       * @kind function
	       * @description Triggers an animation and then removes the element from the DOM.
	       * When the function is called a promise is returned that will be resolved during the next
	       * digest once the animation has completed.
	       *
	       * @param {DOMElement} element the element which will be removed from the DOM
	       * @param {object=} options an optional collection of options/styles that will be applied to the element
	       *
	       * @return {Promise} the animation callback promise
	       */
	      leave: function(element, options) {
	        return $$animateQueue.push(element, 'leave', prepareAnimateOptions(options), function() {
	          element.remove();
	        });
	      },

	      /**
	       * @ngdoc method
	       * @name $animate#addClass
	       * @kind function
	       *
	       * @description Triggers an addClass animation surrounding the addition of the provided CSS class(es). Upon
	       *   execution, the addClass operation will only be handled after the next digest and it will not trigger an
	       *   animation if element already contains the CSS class or if the class is removed at a later step.
	       *   Note that class-based animations are treated differently compared to structural animations
	       *   (like enter, move and leave) since the CSS classes may be added/removed at different points
	       *   depending if CSS or JavaScript animations are used.
	       *
	       * @param {DOMElement} element the element which the CSS classes will be applied to
	       * @param {string} className the CSS class(es) that will be added (multiple classes are separated via spaces)
	       * @param {object=} options an optional collection of options/styles that will be applied to the element
	       *
	       * @return {Promise} the animation callback promise
	       */
	      addClass: function(element, className, options) {
	        options = prepareAnimateOptions(options);
	        options.addClass = mergeClasses(options.addclass, className);
	        return $$animateQueue.push(element, 'addClass', options);
	      },

	      /**
	       * @ngdoc method
	       * @name $animate#removeClass
	       * @kind function
	       *
	       * @description Triggers a removeClass animation surrounding the removal of the provided CSS class(es). Upon
	       *   execution, the removeClass operation will only be handled after the next digest and it will not trigger an
	       *   animation if element does not contain the CSS class or if the class is added at a later step.
	       *   Note that class-based animations are treated differently compared to structural animations
	       *   (like enter, move and leave) since the CSS classes may be added/removed at different points
	       *   depending if CSS or JavaScript animations are used.
	       *
	       * @param {DOMElement} element the element which the CSS classes will be applied to
	       * @param {string} className the CSS class(es) that will be removed (multiple classes are separated via spaces)
	       * @param {object=} options an optional collection of options/styles that will be applied to the element
	       *
	       * @return {Promise} the animation callback promise
	       */
	      removeClass: function(element, className, options) {
	        options = prepareAnimateOptions(options);
	        options.removeClass = mergeClasses(options.removeClass, className);
	        return $$animateQueue.push(element, 'removeClass', options);
	      },

	      /**
	       * @ngdoc method
	       * @name $animate#setClass
	       * @kind function
	       *
	       * @description Performs both the addition and removal of a CSS classes on an element and (during the process)
	       *    triggers an animation surrounding the class addition/removal. Much like `$animate.addClass` and
	       *    `$animate.removeClass`, `setClass` will only evaluate the classes being added/removed once a digest has
	       *    passed. Note that class-based animations are treated differently compared to structural animations
	       *    (like enter, move and leave) since the CSS classes may be added/removed at different points
	       *    depending if CSS or JavaScript animations are used.
	       *
	       * @param {DOMElement} element the element which the CSS classes will be applied to
	       * @param {string} add the CSS class(es) that will be added (multiple classes are separated via spaces)
	       * @param {string} remove the CSS class(es) that will be removed (multiple classes are separated via spaces)
	       * @param {object=} options an optional collection of options/styles that will be applied to the element
	       *
	       * @return {Promise} the animation callback promise
	       */
	      setClass: function(element, add, remove, options) {
	        options = prepareAnimateOptions(options);
	        options.addClass = mergeClasses(options.addClass, add);
	        options.removeClass = mergeClasses(options.removeClass, remove);
	        return $$animateQueue.push(element, 'setClass', options);
	      },

	      /**
	       * @ngdoc method
	       * @name $animate#animate
	       * @kind function
	       *
	       * @description Performs an inline animation on the element which applies the provided to and from CSS styles to the element.
	       * If any detected CSS transition, keyframe or JavaScript matches the provided className value then the animation will take
	       * on the provided styles. For example, if a transition animation is set for the given className then the provided from and
	       * to styles will be applied alongside the given transition. If a JavaScript animation is detected then the provided styles
	       * will be given in as function paramters into the `animate` method (or as apart of the `options` parameter).
	       *
	       * @param {DOMElement} element the element which the CSS styles will be applied to
	       * @param {object} from the from (starting) CSS styles that will be applied to the element and across the animation.
	       * @param {object} to the to (destination) CSS styles that will be applied to the element and across the animation.
	       * @param {string=} className an optional CSS class that will be applied to the element for the duration of the animation. If
	       *    this value is left as empty then a CSS class of `ng-inline-animate` will be applied to the element.
	       *    (Note that if no animation is detected then this value will not be appplied to the element.)
	       * @param {object=} options an optional collection of options/styles that will be applied to the element
	       *
	       * @return {Promise} the animation callback promise
	       */
	      animate: function(element, from, to, className, options) {
	        options = prepareAnimateOptions(options);
	        options.from = options.from ? extend(options.from, from) : from;
	        options.to   = options.to   ? extend(options.to, to)     : to;

	        className = className || 'ng-inline-animate';
	        options.tempClasses = mergeClasses(options.tempClasses, className);
	        return $$animateQueue.push(element, 'animate', options);
	      }
	    };
	  }];
	}];

	function $$AsyncCallbackProvider() {
	  this.$get = ['$$rAF', '$timeout', function($$rAF, $timeout) {
	    return $$rAF.supported
	      ? function(fn) { return $$rAF(fn); }
	      : function(fn) {
	        return $timeout(fn, 0, false);
	      };
	  }];
	}

	/* global stripHash: true */

	/**
	 * ! This is a private undocumented service !
	 *
	 * @name $browser
	 * @requires $log
	 * @description
	 * This object has two goals:
	 *
	 * - hide all the global state in the browser caused by the window object
	 * - abstract away all the browser specific features and inconsistencies
	 *
	 * For tests we provide {@link ngMock.$browser mock implementation} of the `$browser`
	 * service, which can be used for convenient testing of the application without the interaction with
	 * the real browser apis.
	 */
	/**
	 * @param {object} window The global window object.
	 * @param {object} document jQuery wrapped document.
	 * @param {object} $log window.console or an object with the same interface.
	 * @param {object} $sniffer $sniffer service
	 */
	function Browser(window, document, $log, $sniffer) {
	  var self = this,
	      rawDocument = document[0],
	      location = window.location,
	      history = window.history,
	      setTimeout = window.setTimeout,
	      clearTimeout = window.clearTimeout,
	      pendingDeferIds = {};

	  self.isMock = false;

	  var outstandingRequestCount = 0;
	  var outstandingRequestCallbacks = [];

	  // TODO(vojta): remove this temporary api
	  self.$$completeOutstandingRequest = completeOutstandingRequest;
	  self.$$incOutstandingRequestCount = function() { outstandingRequestCount++; };

	  /**
	   * Executes the `fn` function(supports currying) and decrements the `outstandingRequestCallbacks`
	   * counter. If the counter reaches 0, all the `outstandingRequestCallbacks` are executed.
	   */
	  function completeOutstandingRequest(fn) {
	    try {
	      fn.apply(null, sliceArgs(arguments, 1));
	    } finally {
	      outstandingRequestCount--;
	      if (outstandingRequestCount === 0) {
	        while (outstandingRequestCallbacks.length) {
	          try {
	            outstandingRequestCallbacks.pop()();
	          } catch (e) {
	            $log.error(e);
	          }
	        }
	      }
	    }
	  }

	  function getHash(url) {
	    var index = url.indexOf('#');
	    return index === -1 ? '' : url.substr(index + 1);
	  }

	  /**
	   * @private
	   * Note: this method is used only by scenario runner
	   * TODO(vojta): prefix this method with $$ ?
	   * @param {function()} callback Function that will be called when no outstanding request
	   */
	  self.notifyWhenNoOutstandingRequests = function(callback) {
	    if (outstandingRequestCount === 0) {
	      callback();
	    } else {
	      outstandingRequestCallbacks.push(callback);
	    }
	  };

	  //////////////////////////////////////////////////////////////
	  // URL API
	  //////////////////////////////////////////////////////////////

	  var cachedState, lastHistoryState,
	      lastBrowserUrl = location.href,
	      baseElement = document.find('base'),
	      reloadLocation = null;

	  cacheState();
	  lastHistoryState = cachedState;

	  /**
	   * @name $browser#url
	   *
	   * @description
	   * GETTER:
	   * Without any argument, this method just returns current value of location.href.
	   *
	   * SETTER:
	   * With at least one argument, this method sets url to new value.
	   * If html5 history api supported, pushState/replaceState is used, otherwise
	   * location.href/location.replace is used.
	   * Returns its own instance to allow chaining
	   *
	   * NOTE: this api is intended for use only by the $location service. Please use the
	   * {@link ng.$location $location service} to change url.
	   *
	   * @param {string} url New url (when used as setter)
	   * @param {boolean=} replace Should new url replace current history record?
	   * @param {object=} state object to use with pushState/replaceState
	   */
	  self.url = function(url, replace, state) {
	    // In modern browsers `history.state` is `null` by default; treating it separately
	    // from `undefined` would cause `$browser.url('/foo')` to change `history.state`
	    // to undefined via `pushState`. Instead, let's change `undefined` to `null` here.
	    if (isUndefined(state)) {
	      state = null;
	    }

	    // Android Browser BFCache causes location, history reference to become stale.
	    if (location !== window.location) location = window.location;
	    if (history !== window.history) history = window.history;

	    // setter
	    if (url) {
	      var sameState = lastHistoryState === state;

	      // Don't change anything if previous and current URLs and states match. This also prevents
	      // IE<10 from getting into redirect loop when in LocationHashbangInHtml5Url mode.
	      // See https://github.com/angular/angular.js/commit/ffb2701
	      if (lastBrowserUrl === url && (!$sniffer.history || sameState)) {
	        return self;
	      }
	      var sameBase = lastBrowserUrl && stripHash(lastBrowserUrl) === stripHash(url);
	      lastBrowserUrl = url;
	      lastHistoryState = state;
	      // Don't use history API if only the hash changed
	      // due to a bug in IE10/IE11 which leads
	      // to not firing a `hashchange` nor `popstate` event
	      // in some cases (see #9143).
	      if ($sniffer.history && (!sameBase || !sameState)) {
	        history[replace ? 'replaceState' : 'pushState'](state, '', url);
	        cacheState();
	        // Do the assignment again so that those two variables are referentially identical.
	        lastHistoryState = cachedState;
	      } else {
	        if (!sameBase) {
	          reloadLocation = url;
	        }
	        if (replace) {
	          location.replace(url);
	        } else if (!sameBase) {
	          location.href = url;
	        } else {
	          location.hash = getHash(url);
	        }
	      }
	      return self;
	    // getter
	    } else {
	      // - reloadLocation is needed as browsers don't allow to read out
	      //   the new location.href if a reload happened.
	      // - the replacement is a workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=407172
	      return reloadLocation || location.href.replace(/%27/g,"'");
	    }
	  };

	  /**
	   * @name $browser#state
	   *
	   * @description
	   * This method is a getter.
	   *
	   * Return history.state or null if history.state is undefined.
	   *
	   * @returns {object} state
	   */
	  self.state = function() {
	    return cachedState;
	  };

	  var urlChangeListeners = [],
	      urlChangeInit = false;

	  function cacheStateAndFireUrlChange() {
	    cacheState();
	    fireUrlChange();
	  }

	  function getCurrentState() {
	    try {
	      return history.state;
	    } catch (e) {
	      // MSIE can reportedly throw when there is no state (UNCONFIRMED).
	    }
	  }

	  // This variable should be used *only* inside the cacheState function.
	  var lastCachedState = null;
	  function cacheState() {
	    // This should be the only place in $browser where `history.state` is read.
	    cachedState = getCurrentState();
	    cachedState = isUndefined(cachedState) ? null : cachedState;

	    // Prevent callbacks fo fire twice if both hashchange & popstate were fired.
	    if (equals(cachedState, lastCachedState)) {
	      cachedState = lastCachedState;
	    }
	    lastCachedState = cachedState;
	  }

	  function fireUrlChange() {
	    if (lastBrowserUrl === self.url() && lastHistoryState === cachedState) {
	      return;
	    }

	    lastBrowserUrl = self.url();
	    lastHistoryState = cachedState;
	    forEach(urlChangeListeners, function(listener) {
	      listener(self.url(), cachedState);
	    });
	  }

	  /**
	   * @name $browser#onUrlChange
	   *
	   * @description
	   * Register callback function that will be called, when url changes.
	   *
	   * It's only called when the url is changed from outside of angular:
	   * - user types different url into address bar
	   * - user clicks on history (forward/back) button
	   * - user clicks on a link
	   *
	   * It's not called when url is changed by $browser.url() method
	   *
	   * The listener gets called with new url as parameter.
	   *
	   * NOTE: this api is intended for use only by the $location service. Please use the
	   * {@link ng.$location $location service} to monitor url changes in angular apps.
	   *
	   * @param {function(string)} listener Listener function to be called when url changes.
	   * @return {function(string)} Returns the registered listener fn - handy if the fn is anonymous.
	   */
	  self.onUrlChange = function(callback) {
	    // TODO(vojta): refactor to use node's syntax for events
	    if (!urlChangeInit) {
	      // We listen on both (hashchange/popstate) when available, as some browsers (e.g. Opera)
	      // don't fire popstate when user change the address bar and don't fire hashchange when url
	      // changed by push/replaceState

	      // html5 history api - popstate event
	      if ($sniffer.history) jqLite(window).on('popstate', cacheStateAndFireUrlChange);
	      // hashchange event
	      jqLite(window).on('hashchange', cacheStateAndFireUrlChange);

	      urlChangeInit = true;
	    }

	    urlChangeListeners.push(callback);
	    return callback;
	  };

	  /**
	   * @private
	   * Remove popstate and hashchange handler from window.
	   *
	   * NOTE: this api is intended for use only by $rootScope.
	   */
	  self.$$applicationDestroyed = function() {
	    jqLite(window).off('hashchange popstate', cacheStateAndFireUrlChange);
	  };

	  /**
	   * Checks whether the url has changed outside of Angular.
	   * Needs to be exported to be able to check for changes that have been done in sync,
	   * as hashchange/popstate events fire in async.
	   */
	  self.$$checkUrlChange = fireUrlChange;

	  //////////////////////////////////////////////////////////////
	  // Misc API
	  //////////////////////////////////////////////////////////////

	  /**
	   * @name $browser#baseHref
	   *
	   * @description
	   * Returns current <base href>
	   * (always relative - without domain)
	   *
	   * @returns {string} The current base href
	   */
	  self.baseHref = function() {
	    var href = baseElement.attr('href');
	    return href ? href.replace(/^(https?\:)?\/\/[^\/]*/, '') : '';
	  };

	  /**
	   * @name $browser#defer
	   * @param {function()} fn A function, who's execution should be deferred.
	   * @param {number=} [delay=0] of milliseconds to defer the function execution.
	   * @returns {*} DeferId that can be used to cancel the task via `$browser.defer.cancel()`.
	   *
	   * @description
	   * Executes a fn asynchronously via `setTimeout(fn, delay)`.
	   *
	   * Unlike when calling `setTimeout` directly, in test this function is mocked and instead of using
	   * `setTimeout` in tests, the fns are queued in an array, which can be programmatically flushed
	   * via `$browser.defer.flush()`.
	   *
	   */
	  self.defer = function(fn, delay) {
	    var timeoutId;
	    outstandingRequestCount++;
	    timeoutId = setTimeout(function() {
	      delete pendingDeferIds[timeoutId];
	      completeOutstandingRequest(fn);
	    }, delay || 0);
	    pendingDeferIds[timeoutId] = true;
	    return timeoutId;
	  };


	  /**
	   * @name $browser#defer.cancel
	   *
	   * @description
	   * Cancels a deferred task identified with `deferId`.
	   *
	   * @param {*} deferId Token returned by the `$browser.defer` function.
	   * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
	   *                    canceled.
	   */
	  self.defer.cancel = function(deferId) {
	    if (pendingDeferIds[deferId]) {
	      delete pendingDeferIds[deferId];
	      clearTimeout(deferId);
	      completeOutstandingRequest(noop);
	      return true;
	    }
	    return false;
	  };

	}

	function $BrowserProvider() {
	  this.$get = ['$window', '$log', '$sniffer', '$document',
	      function($window, $log, $sniffer, $document) {
	        return new Browser($window, $document, $log, $sniffer);
	      }];
	}

	/**
	 * @ngdoc service
	 * @name $cacheFactory
	 *
	 * @description
	 * Factory that constructs {@link $cacheFactory.Cache Cache} objects and gives access to
	 * them.
	 *
	 * ```js
	 *
	 *  var cache = $cacheFactory('cacheId');
	 *  expect($cacheFactory.get('cacheId')).toBe(cache);
	 *  expect($cacheFactory.get('noSuchCacheId')).not.toBeDefined();
	 *
	 *  cache.put("key", "value");
	 *  cache.put("another key", "another value");
	 *
	 *  // We've specified no options on creation
	 *  expect(cache.info()).toEqual({id: 'cacheId', size: 2});
	 *
	 * ```
	 *
	 *
	 * @param {string} cacheId Name or id of the newly created cache.
	 * @param {object=} options Options object that specifies the cache behavior. Properties:
	 *
	 *   - `{number=}` `capacity` — turns the cache into LRU cache.
	 *
	 * @returns {object} Newly created cache object with the following set of methods:
	 *
	 * - `{object}` `info()` — Returns id, size, and options of cache.
	 * - `{{*}}` `put({string} key, {*} value)` — Puts a new key-value pair into the cache and returns
	 *   it.
	 * - `{{*}}` `get({string} key)` — Returns cached value for `key` or undefined for cache miss.
	 * - `{void}` `remove({string} key)` — Removes a key-value pair from the cache.
	 * - `{void}` `removeAll()` — Removes all cached values.
	 * - `{void}` `destroy()` — Removes references to this cache from $cacheFactory.
	 *
	 * @example
	   <example module="cacheExampleApp">
	     <file name="index.html">
	       <div ng-controller="CacheController">
	         <input ng-model="newCacheKey" placeholder="Key">
	         <input ng-model="newCacheValue" placeholder="Value">
	         <button ng-click="put(newCacheKey, newCacheValue)">Cache</button>

	         <p ng-if="keys.length">Cached Values</p>
	         <div ng-repeat="key in keys">
	           <span ng-bind="key"></span>
	           <span>: </span>
	           <b ng-bind="cache.get(key)"></b>
	         </div>

	         <p>Cache Info</p>
	         <div ng-repeat="(key, value) in cache.info()">
	           <span ng-bind="key"></span>
	           <span>: </span>
	           <b ng-bind="value"></b>
	         </div>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('cacheExampleApp', []).
	         controller('CacheController', ['$scope', '$cacheFactory', function($scope, $cacheFactory) {
	           $scope.keys = [];
	           $scope.cache = $cacheFactory('cacheId');
	           $scope.put = function(key, value) {
	             if ($scope.cache.get(key) === undefined) {
	               $scope.keys.push(key);
	             }
	             $scope.cache.put(key, value === undefined ? null : value);
	           };
	         }]);
	     </file>
	     <file name="style.css">
	       p {
	         margin: 10px 0 3px;
	       }
	     </file>
	   </example>
	 */
	function $CacheFactoryProvider() {

	  this.$get = function() {
	    var caches = {};

	    function cacheFactory(cacheId, options) {
	      if (cacheId in caches) {
	        throw minErr('$cacheFactory')('iid', "CacheId '{0}' is already taken!", cacheId);
	      }

	      var size = 0,
	          stats = extend({}, options, {id: cacheId}),
	          data = {},
	          capacity = (options && options.capacity) || Number.MAX_VALUE,
	          lruHash = {},
	          freshEnd = null,
	          staleEnd = null;

	      /**
	       * @ngdoc type
	       * @name $cacheFactory.Cache
	       *
	       * @description
	       * A cache object used to store and retrieve data, primarily used by
	       * {@link $http $http} and the {@link ng.directive:script script} directive to cache
	       * templates and other data.
	       *
	       * ```js
	       *  angular.module('superCache')
	       *    .factory('superCache', ['$cacheFactory', function($cacheFactory) {
	       *      return $cacheFactory('super-cache');
	       *    }]);
	       * ```
	       *
	       * Example test:
	       *
	       * ```js
	       *  it('should behave like a cache', inject(function(superCache) {
	       *    superCache.put('key', 'value');
	       *    superCache.put('another key', 'another value');
	       *
	       *    expect(superCache.info()).toEqual({
	       *      id: 'super-cache',
	       *      size: 2
	       *    });
	       *
	       *    superCache.remove('another key');
	       *    expect(superCache.get('another key')).toBeUndefined();
	       *
	       *    superCache.removeAll();
	       *    expect(superCache.info()).toEqual({
	       *      id: 'super-cache',
	       *      size: 0
	       *    });
	       *  }));
	       * ```
	       */
	      return caches[cacheId] = {

	        /**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#put
	         * @kind function
	         *
	         * @description
	         * Inserts a named entry into the {@link $cacheFactory.Cache Cache} object to be
	         * retrieved later, and incrementing the size of the cache if the key was not already
	         * present in the cache. If behaving like an LRU cache, it will also remove stale
	         * entries from the set.
	         *
	         * It will not insert undefined values into the cache.
	         *
	         * @param {string} key the key under which the cached data is stored.
	         * @param {*} value the value to store alongside the key. If it is undefined, the key
	         *    will not be stored.
	         * @returns {*} the value stored.
	         */
	        put: function(key, value) {
	          if (isUndefined(value)) return;
	          if (capacity < Number.MAX_VALUE) {
	            var lruEntry = lruHash[key] || (lruHash[key] = {key: key});

	            refresh(lruEntry);
	          }

	          if (!(key in data)) size++;
	          data[key] = value;

	          if (size > capacity) {
	            this.remove(staleEnd.key);
	          }

	          return value;
	        },

	        /**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#get
	         * @kind function
	         *
	         * @description
	         * Retrieves named data stored in the {@link $cacheFactory.Cache Cache} object.
	         *
	         * @param {string} key the key of the data to be retrieved
	         * @returns {*} the value stored.
	         */
	        get: function(key) {
	          if (capacity < Number.MAX_VALUE) {
	            var lruEntry = lruHash[key];

	            if (!lruEntry) return;

	            refresh(lruEntry);
	          }

	          return data[key];
	        },


	        /**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#remove
	         * @kind function
	         *
	         * @description
	         * Removes an entry from the {@link $cacheFactory.Cache Cache} object.
	         *
	         * @param {string} key the key of the entry to be removed
	         */
	        remove: function(key) {
	          if (capacity < Number.MAX_VALUE) {
	            var lruEntry = lruHash[key];

	            if (!lruEntry) return;

	            if (lruEntry == freshEnd) freshEnd = lruEntry.p;
	            if (lruEntry == staleEnd) staleEnd = lruEntry.n;
	            link(lruEntry.n,lruEntry.p);

	            delete lruHash[key];
	          }

	          delete data[key];
	          size--;
	        },


	        /**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#removeAll
	         * @kind function
	         *
	         * @description
	         * Clears the cache object of any entries.
	         */
	        removeAll: function() {
	          data = {};
	          size = 0;
	          lruHash = {};
	          freshEnd = staleEnd = null;
	        },


	        /**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#destroy
	         * @kind function
	         *
	         * @description
	         * Destroys the {@link $cacheFactory.Cache Cache} object entirely,
	         * removing it from the {@link $cacheFactory $cacheFactory} set.
	         */
	        destroy: function() {
	          data = null;
	          stats = null;
	          lruHash = null;
	          delete caches[cacheId];
	        },


	        /**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#info
	         * @kind function
	         *
	         * @description
	         * Retrieve information regarding a particular {@link $cacheFactory.Cache Cache}.
	         *
	         * @returns {object} an object with the following properties:
	         *   <ul>
	         *     <li>**id**: the id of the cache instance</li>
	         *     <li>**size**: the number of entries kept in the cache instance</li>
	         *     <li>**...**: any additional properties from the options object when creating the
	         *       cache.</li>
	         *   </ul>
	         */
	        info: function() {
	          return extend({}, stats, {size: size});
	        }
	      };


	      /**
	       * makes the `entry` the freshEnd of the LRU linked list
	       */
	      function refresh(entry) {
	        if (entry != freshEnd) {
	          if (!staleEnd) {
	            staleEnd = entry;
	          } else if (staleEnd == entry) {
	            staleEnd = entry.n;
	          }

	          link(entry.n, entry.p);
	          link(entry, freshEnd);
	          freshEnd = entry;
	          freshEnd.n = null;
	        }
	      }


	      /**
	       * bidirectionally links two entries of the LRU linked list
	       */
	      function link(nextEntry, prevEntry) {
	        if (nextEntry != prevEntry) {
	          if (nextEntry) nextEntry.p = prevEntry; //p stands for previous, 'prev' didn't minify
	          if (prevEntry) prevEntry.n = nextEntry; //n stands for next, 'next' didn't minify
	        }
	      }
	    }


	  /**
	   * @ngdoc method
	   * @name $cacheFactory#info
	   *
	   * @description
	   * Get information about all the caches that have been created
	   *
	   * @returns {Object} - key-value map of `cacheId` to the result of calling `cache#info`
	   */
	    cacheFactory.info = function() {
	      var info = {};
	      forEach(caches, function(cache, cacheId) {
	        info[cacheId] = cache.info();
	      });
	      return info;
	    };


	  /**
	   * @ngdoc method
	   * @name $cacheFactory#get
	   *
	   * @description
	   * Get access to a cache object by the `cacheId` used when it was created.
	   *
	   * @param {string} cacheId Name or id of a cache to access.
	   * @returns {object} Cache object identified by the cacheId or undefined if no such cache.
	   */
	    cacheFactory.get = function(cacheId) {
	      return caches[cacheId];
	    };


	    return cacheFactory;
	  };
	}

	/**
	 * @ngdoc service
	 * @name $templateCache
	 *
	 * @description
	 * The first time a template is used, it is loaded in the template cache for quick retrieval. You
	 * can load templates directly into the cache in a `script` tag, or by consuming the
	 * `$templateCache` service directly.
	 *
	 * Adding via the `script` tag:
	 *
	 * ```html
	 *   <script type="text/ng-template" id="templateId.html">
	 *     <p>This is the content of the template</p>
	 *   </script>
	 * ```
	 *
	 * **Note:** the `script` tag containing the template does not need to be included in the `head` of
	 * the document, but it must be a descendent of the {@link ng.$rootElement $rootElement} (IE,
	 * element with ng-app attribute), otherwise the template will be ignored.
	 *
	 * Adding via the `$templateCache` service:
	 *
	 * ```js
	 * var myApp = angular.module('myApp', []);
	 * myApp.run(function($templateCache) {
	 *   $templateCache.put('templateId.html', 'This is the content of the template');
	 * });
	 * ```
	 *
	 * To retrieve the template later, simply use it in your HTML:
	 * ```html
	 * <div ng-include=" 'templateId.html' "></div>
	 * ```
	 *
	 * or get it via Javascript:
	 * ```js
	 * $templateCache.get('templateId.html')
	 * ```
	 *
	 * See {@link ng.$cacheFactory $cacheFactory}.
	 *
	 */
	function $TemplateCacheProvider() {
	  this.$get = ['$cacheFactory', function($cacheFactory) {
	    return $cacheFactory('templates');
	  }];
	}

	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 *     Any commits to this file should be reviewed with security in mind.  *
	 *   Changes to this file can potentially create security vulnerabilities. *
	 *          An approval from 2 Core members with history of modifying      *
	 *                         this file is required.                          *
	 *                                                                         *
	 *  Does the change somehow allow for arbitrary javascript to be executed? *
	 *    Or allows for someone to change the prototype of built-in objects?   *
	 *     Or gives undesired access to variables likes document or window?    *
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

	/* ! VARIABLE/FUNCTION NAMING CONVENTIONS THAT APPLY TO THIS FILE!
	 *
	 * DOM-related variables:
	 *
	 * - "node" - DOM Node
	 * - "element" - DOM Element or Node
	 * - "$node" or "$element" - jqLite-wrapped node or element
	 *
	 *
	 * Compiler related stuff:
	 *
	 * - "linkFn" - linking fn of a single directive
	 * - "nodeLinkFn" - function that aggregates all linking fns for a particular node
	 * - "childLinkFn" -  function that aggregates all linking fns for child nodes of a particular node
	 * - "compositeLinkFn" - function that aggregates all linking fns for a compilation root (nodeList)
	 */


	/**
	 * @ngdoc service
	 * @name $compile
	 * @kind function
	 *
	 * @description
	 * Compiles an HTML string or DOM into a template and produces a template function, which
	 * can then be used to link {@link ng.$rootScope.Scope `scope`} and the template together.
	 *
	 * The compilation is a process of walking the DOM tree and matching DOM elements to
	 * {@link ng.$compileProvider#directive directives}.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** This document is an in-depth reference of all directive options.
	 * For a gentle introduction to directives with examples of common use cases,
	 * see the {@link guide/directive directive guide}.
	 * </div>
	 *
	 * ## Comprehensive Directive API
	 *
	 * There are many different options for a directive.
	 *
	 * The difference resides in the return value of the factory function.
	 * You can either return a "Directive Definition Object" (see below) that defines the directive properties,
	 * or just the `postLink` function (all other properties will have the default values).
	 *
	 * <div class="alert alert-success">
	 * **Best Practice:** It's recommended to use the "directive definition object" form.
	 * </div>
	 *
	 * Here's an example directive declared with a Directive Definition Object:
	 *
	 * ```js
	 *   var myModule = angular.module(...);
	 *
	 *   myModule.directive('directiveName', function factory(injectables) {
	 *     var directiveDefinitionObject = {
	 *       priority: 0,
	 *       template: '<div></div>', // or // function(tElement, tAttrs) { ... },
	 *       // or
	 *       // templateUrl: 'directive.html', // or // function(tElement, tAttrs) { ... },
	 *       transclude: false,
	 *       restrict: 'A',
	 *       templateNamespace: 'html',
	 *       scope: false,
	 *       controller: function($scope, $element, $attrs, $transclude, otherInjectables) { ... },
	 *       controllerAs: 'stringIdentifier',
	 *       bindToController: false,
	 *       require: 'siblingDirectiveName', // or // ['^parentDirectiveName', '?optionalDirectiveName', '?^optionalParent'],
	 *       compile: function compile(tElement, tAttrs, transclude) {
	 *         return {
	 *           pre: function preLink(scope, iElement, iAttrs, controller) { ... },
	 *           post: function postLink(scope, iElement, iAttrs, controller) { ... }
	 *         }
	 *         // or
	 *         // return function postLink( ... ) { ... }
	 *       },
	 *       // or
	 *       // link: {
	 *       //  pre: function preLink(scope, iElement, iAttrs, controller) { ... },
	 *       //  post: function postLink(scope, iElement, iAttrs, controller) { ... }
	 *       // }
	 *       // or
	 *       // link: function postLink( ... ) { ... }
	 *     };
	 *     return directiveDefinitionObject;
	 *   });
	 * ```
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Any unspecified options will use the default value. You can see the default values below.
	 * </div>
	 *
	 * Therefore the above can be simplified as:
	 *
	 * ```js
	 *   var myModule = angular.module(...);
	 *
	 *   myModule.directive('directiveName', function factory(injectables) {
	 *     var directiveDefinitionObject = {
	 *       link: function postLink(scope, iElement, iAttrs) { ... }
	 *     };
	 *     return directiveDefinitionObject;
	 *     // or
	 *     // return function postLink(scope, iElement, iAttrs) { ... }
	 *   });
	 * ```
	 *
	 *
	 *
	 * ### Directive Definition Object
	 *
	 * The directive definition object provides instructions to the {@link ng.$compile
	 * compiler}. The attributes are:
	 *
	 * #### `multiElement`
	 * When this property is set to true, the HTML compiler will collect DOM nodes between
	 * nodes with the attributes `directive-name-start` and `directive-name-end`, and group them
	 * together as the directive elements. It is recommended that this feature be used on directives
	 * which are not strictly behavioural (such as {@link ngClick}), and which
	 * do not manipulate or replace child nodes (such as {@link ngInclude}).
	 *
	 * #### `priority`
	 * When there are multiple directives defined on a single DOM element, sometimes it
	 * is necessary to specify the order in which the directives are applied. The `priority` is used
	 * to sort the directives before their `compile` functions get called. Priority is defined as a
	 * number. Directives with greater numerical `priority` are compiled first. Pre-link functions
	 * are also run in priority order, but post-link functions are run in reverse order. The order
	 * of directives with the same priority is undefined. The default priority is `0`.
	 *
	 * #### `terminal`
	 * If set to true then the current `priority` will be the last set of directives
	 * which will execute (any directives at the current priority will still execute
	 * as the order of execution on same `priority` is undefined). Note that expressions
	 * and other directives used in the directive's template will also be excluded from execution.
	 *
	 * #### `scope`
	 * **If set to `true`,** then a new scope will be created for this directive. If multiple directives on the
	 * same element request a new scope, only one new scope is created. The new scope rule does not
	 * apply for the root of the template since the root of the template always gets a new scope.
	 *
	 * **If set to `{}` (object hash),** then a new "isolate" scope is created. The 'isolate' scope differs from
	 * normal scope in that it does not prototypically inherit from the parent scope. This is useful
	 * when creating reusable components, which should not accidentally read or modify data in the
	 * parent scope.
	 *
	 * The 'isolate' scope takes an object hash which defines a set of local scope properties
	 * derived from the parent scope. These local properties are useful for aliasing values for
	 * templates. Locals definition is a hash of local scope property to its source:
	 *
	 * * `@` or `@attr` - bind a local scope property to the value of DOM attribute. The result is
	 *   always a string since DOM attributes are strings. If no `attr` name is specified  then the
	 *   attribute name is assumed to be the same as the local name.
	 *   Given `<widget my-attr="hello {{name}}">` and widget definition
	 *   of `scope: { localName:'@myAttr' }`, then widget scope property `localName` will reflect
	 *   the interpolated value of `hello {{name}}`. As the `name` attribute changes so will the
	 *   `localName` property on the widget scope. The `name` is read from the parent scope (not
	 *   component scope).
	 *
	 * * `=` or `=attr` - set up bi-directional binding between a local scope property and the
	 *   parent scope property of name defined via the value of the `attr` attribute. If no `attr`
	 *   name is specified then the attribute name is assumed to be the same as the local name.
	 *   Given `<widget my-attr="parentModel">` and widget definition of
	 *   `scope: { localModel:'=myAttr' }`, then widget scope property `localModel` will reflect the
	 *   value of `parentModel` on the parent scope. Any changes to `parentModel` will be reflected
	 *   in `localModel` and any changes in `localModel` will reflect in `parentModel`. If the parent
	 *   scope property doesn't exist, it will throw a NON_ASSIGNABLE_MODEL_EXPRESSION exception. You
	 *   can avoid this behavior using `=?` or `=?attr` in order to flag the property as optional. If
	 *   you want to shallow watch for changes (i.e. $watchCollection instead of $watch) you can use
	 *   `=*` or `=*attr` (`=*?` or `=*?attr` if the property is optional).
	 *
	 * * `&` or `&attr` - provides a way to execute an expression in the context of the parent scope.
	 *   If no `attr` name is specified then the attribute name is assumed to be the same as the
	 *   local name. Given `<widget my-attr="count = count + value">` and widget definition of
	 *   `scope: { localFn:'&myAttr' }`, then isolate scope property `localFn` will point to
	 *   a function wrapper for the `count = count + value` expression. Often it's desirable to
	 *   pass data from the isolated scope via an expression to the parent scope, this can be
	 *   done by passing a map of local variable names and values into the expression wrapper fn.
	 *   For example, if the expression is `increment(amount)` then we can specify the amount value
	 *   by calling the `localFn` as `localFn({amount: 22})`.
	 *
	 *
	 * #### `bindToController`
	 * When an isolate scope is used for a component (see above), and `controllerAs` is used, `bindToController: true` will
	 * allow a component to have its properties bound to the controller, rather than to scope. When the controller
	 * is instantiated, the initial values of the isolate scope bindings are already available.
	 *
	 * #### `controller`
	 * Controller constructor function. The controller is instantiated before the
	 * pre-linking phase and it is shared with other directives (see
	 * `require` attribute). This allows the directives to communicate with each other and augment
	 * each other's behavior. The controller is injectable (and supports bracket notation) with the following locals:
	 *
	 * * `$scope` - Current scope associated with the element
	 * * `$element` - Current element
	 * * `$attrs` - Current attributes object for the element
	 * * `$transclude` - A transclude linking function pre-bound to the correct transclusion scope:
	 *   `function([scope], cloneLinkingFn, futureParentElement)`.
	 *    * `scope`: optional argument to override the scope.
	 *    * `cloneLinkingFn`: optional argument to create clones of the original transcluded content.
	 *    * `futureParentElement`:
	 *        * defines the parent to which the `cloneLinkingFn` will add the cloned elements.
	 *        * default: `$element.parent()` resp. `$element` for `transclude:'element'` resp. `transclude:true`.
	 *        * only needed for transcludes that are allowed to contain non html elements (e.g. SVG elements)
	 *          and when the `cloneLinkinFn` is passed,
	 *          as those elements need to created and cloned in a special way when they are defined outside their
	 *          usual containers (e.g. like `<svg>`).
	 *        * See also the `directive.templateNamespace` property.
	 *
	 *
	 * #### `require`
	 * Require another directive and inject its controller as the fourth argument to the linking function. The
	 * `require` takes a string name (or array of strings) of the directive(s) to pass in. If an array is used, the
	 * injected argument will be an array in corresponding order. If no such directive can be
	 * found, or if the directive does not have a controller, then an error is raised (unless no link function
	 * is specified, in which case error checking is skipped). The name can be prefixed with:
	 *
	 * * (no prefix) - Locate the required controller on the current element. Throw an error if not found.
	 * * `?` - Attempt to locate the required controller or pass `null` to the `link` fn if not found.
	 * * `^` - Locate the required controller by searching the element and its parents. Throw an error if not found.
	 * * `^^` - Locate the required controller by searching the element's parents. Throw an error if not found.
	 * * `?^` - Attempt to locate the required controller by searching the element and its parents or pass
	 *   `null` to the `link` fn if not found.
	 * * `?^^` - Attempt to locate the required controller by searching the element's parents, or pass
	 *   `null` to the `link` fn if not found.
	 *
	 *
	 * #### `controllerAs`
	 * Identifier name for a reference to the controller in the directive's scope.
	 * This allows the controller to be referenced from the directive template. The directive
	 * needs to define a scope for this configuration to be used. Useful in the case when
	 * directive is used as component.
	 *
	 *
	 * #### `restrict`
	 * String of subset of `EACM` which restricts the directive to a specific directive
	 * declaration style. If omitted, the defaults (elements and attributes) are used.
	 *
	 * * `E` - Element name (default): `<my-directive></my-directive>`
	 * * `A` - Attribute (default): `<div my-directive="exp"></div>`
	 * * `C` - Class: `<div class="my-directive: exp;"></div>`
	 * * `M` - Comment: `<!-- directive: my-directive exp -->`
	 *
	 *
	 * #### `templateNamespace`
	 * String representing the document type used by the markup in the template.
	 * AngularJS needs this information as those elements need to be created and cloned
	 * in a special way when they are defined outside their usual containers like `<svg>` and `<math>`.
	 *
	 * * `html` - All root nodes in the template are HTML. Root nodes may also be
	 *   top-level elements such as `<svg>` or `<math>`.
	 * * `svg` - The root nodes in the template are SVG elements (excluding `<math>`).
	 * * `math` - The root nodes in the template are MathML elements (excluding `<svg>`).
	 *
	 * If no `templateNamespace` is specified, then the namespace is considered to be `html`.
	 *
	 * #### `template`
	 * HTML markup that may:
	 * * Replace the contents of the directive's element (default).
	 * * Replace the directive's element itself (if `replace` is true - DEPRECATED).
	 * * Wrap the contents of the directive's element (if `transclude` is true).
	 *
	 * Value may be:
	 *
	 * * A string. For example `<div red-on-hover>{{delete_str}}</div>`.
	 * * A function which takes two arguments `tElement` and `tAttrs` (described in the `compile`
	 *   function api below) and returns a string value.
	 *
	 *
	 * #### `templateUrl`
	 * This is similar to `template` but the template is loaded from the specified URL, asynchronously.
	 *
	 * Because template loading is asynchronous the compiler will suspend compilation of directives on that element
	 * for later when the template has been resolved.  In the meantime it will continue to compile and link
	 * sibling and parent elements as though this element had not contained any directives.
	 *
	 * The compiler does not suspend the entire compilation to wait for templates to be loaded because this
	 * would result in the whole app "stalling" until all templates are loaded asynchronously - even in the
	 * case when only one deeply nested directive has `templateUrl`.
	 *
	 * Template loading is asynchronous even if the template has been preloaded into the {@link $templateCache}
	 *
	 * You can specify `templateUrl` as a string representing the URL or as a function which takes two
	 * arguments `tElement` and `tAttrs` (described in the `compile` function api below) and returns
	 * a string value representing the url.  In either case, the template URL is passed through {@link
	 * $sce#getTrustedResourceUrl $sce.getTrustedResourceUrl}.
	 *
	 *
	 * #### `replace` ([*DEPRECATED*!], will be removed in next major release - i.e. v2.0)
	 * specify what the template should replace. Defaults to `false`.
	 *
	 * * `true` - the template will replace the directive's element.
	 * * `false` - the template will replace the contents of the directive's element.
	 *
	 * The replacement process migrates all of the attributes / classes from the old element to the new
	 * one. See the {@link guide/directive#template-expanding-directive
	 * Directives Guide} for an example.
	 *
	 * There are very few scenarios where element replacement is required for the application function,
	 * the main one being reusable custom components that are used within SVG contexts
	 * (because SVG doesn't work with custom elements in the DOM tree).
	 *
	 * #### `transclude`
	 * Extract the contents of the element where the directive appears and make it available to the directive.
	 * The contents are compiled and provided to the directive as a **transclusion function**. See the
	 * {@link $compile#transclusion Transclusion} section below.
	 *
	 * There are two kinds of transclusion depending upon whether you want to transclude just the contents of the
	 * directive's element or the entire element:
	 *
	 * * `true` - transclude the content (i.e. the child nodes) of the directive's element.
	 * * `'element'` - transclude the whole of the directive's element including any directives on this
	 *   element that defined at a lower priority than this directive. When used, the `template`
	 *   property is ignored.
	 *
	 *
	 * #### `compile`
	 *
	 * ```js
	 *   function compile(tElement, tAttrs, transclude) { ... }
	 * ```
	 *
	 * The compile function deals with transforming the template DOM. Since most directives do not do
	 * template transformation, it is not used often. The compile function takes the following arguments:
	 *
	 *   * `tElement` - template element - The element where the directive has been declared. It is
	 *     safe to do template transformation on the element and child elements only.
	 *
	 *   * `tAttrs` - template attributes - Normalized list of attributes declared on this element shared
	 *     between all directive compile functions.
	 *
	 *   * `transclude` -  [*DEPRECATED*!] A transclude linking function: `function(scope, cloneLinkingFn)`
	 *
	 * <div class="alert alert-warning">
	 * **Note:** The template instance and the link instance may be different objects if the template has
	 * been cloned. For this reason it is **not** safe to do anything other than DOM transformations that
	 * apply to all cloned DOM nodes within the compile function. Specifically, DOM listener registration
	 * should be done in a linking function rather than in a compile function.
	 * </div>

	 * <div class="alert alert-warning">
	 * **Note:** The compile function cannot handle directives that recursively use themselves in their
	 * own templates or compile functions. Compiling these directives results in an infinite loop and a
	 * stack overflow errors.
	 *
	 * This can be avoided by manually using $compile in the postLink function to imperatively compile
	 * a directive's template instead of relying on automatic template compilation via `template` or
	 * `templateUrl` declaration or manual compilation inside the compile function.
	 * </div>
	 *
	 * <div class="alert alert-danger">
	 * **Note:** The `transclude` function that is passed to the compile function is deprecated, as it
	 *   e.g. does not know about the right outer scope. Please use the transclude function that is passed
	 *   to the link function instead.
	 * </div>

	 * A compile function can have a return value which can be either a function or an object.
	 *
	 * * returning a (post-link) function - is equivalent to registering the linking function via the
	 *   `link` property of the config object when the compile function is empty.
	 *
	 * * returning an object with function(s) registered via `pre` and `post` properties - allows you to
	 *   control when a linking function should be called during the linking phase. See info about
	 *   pre-linking and post-linking functions below.
	 *
	 *
	 * #### `link`
	 * This property is used only if the `compile` property is not defined.
	 *
	 * ```js
	 *   function link(scope, iElement, iAttrs, controller, transcludeFn) { ... }
	 * ```
	 *
	 * The link function is responsible for registering DOM listeners as well as updating the DOM. It is
	 * executed after the template has been cloned. This is where most of the directive logic will be
	 * put.
	 *
	 *   * `scope` - {@link ng.$rootScope.Scope Scope} - The scope to be used by the
	 *     directive for registering {@link ng.$rootScope.Scope#$watch watches}.
	 *
	 *   * `iElement` - instance element - The element where the directive is to be used. It is safe to
	 *     manipulate the children of the element only in `postLink` function since the children have
	 *     already been linked.
	 *
	 *   * `iAttrs` - instance attributes - Normalized list of attributes declared on this element shared
	 *     between all directive linking functions.
	 *
	 *   * `controller` - the directive's required controller instance(s) - Instances are shared
	 *     among all directives, which allows the directives to use the controllers as a communication
	 *     channel. The exact value depends on the directive's `require` property:
	 *       * `string`: the controller instance
	 *       * `array`: array of controller instances
	 *       * no controller(s) required: `undefined`
	 *
	 *     If a required controller cannot be found, and it is optional, the instance is `null`,
	 *     otherwise the {@link error:$compile:ctreq Missing Required Controller} error is thrown.
	 *
	 *   * `transcludeFn` - A transclude linking function pre-bound to the correct transclusion scope.
	 *     This is the same as the `$transclude`
	 *     parameter of directive controllers, see there for details.
	 *     `function([scope], cloneLinkingFn, futureParentElement)`.
	 *
	 * #### Pre-linking function
	 *
	 * Executed before the child elements are linked. Not safe to do DOM transformation since the
	 * compiler linking function will fail to locate the correct elements for linking.
	 *
	 * #### Post-linking function
	 *
	 * Executed after the child elements are linked.
	 *
	 * Note that child elements that contain `templateUrl` directives will not have been compiled
	 * and linked since they are waiting for their template to load asynchronously and their own
	 * compilation and linking has been suspended until that occurs.
	 *
	 * It is safe to do DOM transformation in the post-linking function on elements that are not waiting
	 * for their async templates to be resolved.
	 *
	 *
	 * ### Transclusion
	 *
	 * Transclusion is the process of extracting a collection of DOM element from one part of the DOM and
	 * copying them to another part of the DOM, while maintaining their connection to the original AngularJS
	 * scope from where they were taken.
	 *
	 * Transclusion is used (often with {@link ngTransclude}) to insert the
	 * original contents of a directive's element into a specified place in the template of the directive.
	 * The benefit of transclusion, over simply moving the DOM elements manually, is that the transcluded
	 * content has access to the properties on the scope from which it was taken, even if the directive
	 * has isolated scope.
	 * See the {@link guide/directive#creating-a-directive-that-wraps-other-elements Directives Guide}.
	 *
	 * This makes it possible for the widget to have private state for its template, while the transcluded
	 * content has access to its originating scope.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** When testing an element transclude directive you must not place the directive at the root of the
	 * DOM fragment that is being compiled. See {@link guide/unit-testing#testing-transclusion-directives
	 * Testing Transclusion Directives}.
	 * </div>
	 *
	 * #### Transclusion Functions
	 *
	 * When a directive requests transclusion, the compiler extracts its contents and provides a **transclusion
	 * function** to the directive's `link` function and `controller`. This transclusion function is a special
	 * **linking function** that will return the compiled contents linked to a new transclusion scope.
	 *
	 * <div class="alert alert-info">
	 * If you are just using {@link ngTransclude} then you don't need to worry about this function, since
	 * ngTransclude will deal with it for us.
	 * </div>
	 *
	 * If you want to manually control the insertion and removal of the transcluded content in your directive
	 * then you must use this transclude function. When you call a transclude function it returns a a jqLite/JQuery
	 * object that contains the compiled DOM, which is linked to the correct transclusion scope.
	 *
	 * When you call a transclusion function you can pass in a **clone attach function**. This function accepts
	 * two parameters, `function(clone, scope) { ... }`, where the `clone` is a fresh compiled copy of your transcluded
	 * content and the `scope` is the newly created transclusion scope, to which the clone is bound.
	 *
	 * <div class="alert alert-info">
	 * **Best Practice**: Always provide a `cloneFn` (clone attach function) when you call a translude function
	 * since you then get a fresh clone of the original DOM and also have access to the new transclusion scope.
	 * </div>
	 *
	 * It is normal practice to attach your transcluded content (`clone`) to the DOM inside your **clone
	 * attach function**:
	 *
	 * ```js
	 * var transcludedContent, transclusionScope;
	 *
	 * $transclude(function(clone, scope) {
	 *   element.append(clone);
	 *   transcludedContent = clone;
	 *   transclusionScope = scope;
	 * });
	 * ```
	 *
	 * Later, if you want to remove the transcluded content from your DOM then you should also destroy the
	 * associated transclusion scope:
	 *
	 * ```js
	 * transcludedContent.remove();
	 * transclusionScope.$destroy();
	 * ```
	 *
	 * <div class="alert alert-info">
	 * **Best Practice**: if you intend to add and remove transcluded content manually in your directive
	 * (by calling the transclude function to get the DOM and calling `element.remove()` to remove it),
	 * then you are also responsible for calling `$destroy` on the transclusion scope.
	 * </div>
	 *
	 * The built-in DOM manipulation directives, such as {@link ngIf}, {@link ngSwitch} and {@link ngRepeat}
	 * automatically destroy their transluded clones as necessary so you do not need to worry about this if
	 * you are simply using {@link ngTransclude} to inject the transclusion into your directive.
	 *
	 *
	 * #### Transclusion Scopes
	 *
	 * When you call a transclude function it returns a DOM fragment that is pre-bound to a **transclusion
	 * scope**. This scope is special, in that it is a child of the directive's scope (and so gets destroyed
	 * when the directive's scope gets destroyed) but it inherits the properties of the scope from which it
	 * was taken.
	 *
	 * For example consider a directive that uses transclusion and isolated scope. The DOM hierarchy might look
	 * like this:
	 *
	 * ```html
	 * <div ng-app>
	 *   <div isolate>
	 *     <div transclusion>
	 *     </div>
	 *   </div>
	 * </div>
	 * ```
	 *
	 * The `$parent` scope hierarchy will look like this:
	 *
	 * ```
	 * - $rootScope
	 *   - isolate
	 *     - transclusion
	 * ```
	 *
	 * but the scopes will inherit prototypically from different scopes to their `$parent`.
	 *
	 * ```
	 * - $rootScope
	 *   - transclusion
	 * - isolate
	 * ```
	 *
	 *
	 * ### Attributes
	 *
	 * The {@link ng.$compile.directive.Attributes Attributes} object - passed as a parameter in the
	 * `link()` or `compile()` functions. It has a variety of uses.
	 *
	 * accessing *Normalized attribute names:*
	 * Directives like 'ngBind' can be expressed in many ways: 'ng:bind', `data-ng-bind`, or 'x-ng-bind'.
	 * the attributes object allows for normalized access to
	 *   the attributes.
	 *
	 * * *Directive inter-communication:* All directives share the same instance of the attributes
	 *   object which allows the directives to use the attributes object as inter directive
	 *   communication.
	 *
	 * * *Supports interpolation:* Interpolation attributes are assigned to the attribute object
	 *   allowing other directives to read the interpolated value.
	 *
	 * * *Observing interpolated attributes:* Use `$observe` to observe the value changes of attributes
	 *   that contain interpolation (e.g. `src="{{bar}}"`). Not only is this very efficient but it's also
	 *   the only way to easily get the actual value because during the linking phase the interpolation
	 *   hasn't been evaluated yet and so the value is at this time set to `undefined`.
	 *
	 * ```js
	 * function linkingFn(scope, elm, attrs, ctrl) {
	 *   // get the attribute value
	 *   console.log(attrs.ngModel);
	 *
	 *   // change the attribute
	 *   attrs.$set('ngModel', 'new value');
	 *
	 *   // observe changes to interpolated attribute
	 *   attrs.$observe('ngModel', function(value) {
	 *     console.log('ngModel has changed value to ' + value);
	 *   });
	 * }
	 * ```
	 *
	 * ## Example
	 *
	 * <div class="alert alert-warning">
	 * **Note**: Typically directives are registered with `module.directive`. The example below is
	 * to illustrate how `$compile` works.
	 * </div>
	 *
	 <example module="compileExample">
	   <file name="index.html">
	    <script>
	      angular.module('compileExample', [], function($compileProvider) {
	        // configure new 'compile' directive by passing a directive
	        // factory function. The factory function injects the '$compile'
	        $compileProvider.directive('compile', function($compile) {
	          // directive factory creates a link function
	          return function(scope, element, attrs) {
	            scope.$watch(
	              function(scope) {
	                 // watch the 'compile' expression for changes
	                return scope.$eval(attrs.compile);
	              },
	              function(value) {
	                // when the 'compile' expression changes
	                // assign it into the current DOM
	                element.html(value);

	                // compile the new DOM and link it to the current
	                // scope.
	                // NOTE: we only compile .childNodes so that
	                // we don't get into infinite loop compiling ourselves
	                $compile(element.contents())(scope);
	              }
	            );
	          };
	        });
	      })
	      .controller('GreeterController', ['$scope', function($scope) {
	        $scope.name = 'Angular';
	        $scope.html = 'Hello {{name}}';
	      }]);
	    </script>
	    <div ng-controller="GreeterController">
	      <input ng-model="name"> <br/>
	      <textarea ng-model="html"></textarea> <br/>
	      <div compile="html"></div>
	    </div>
	   </file>
	   <file name="protractor.js" type="protractor">
	     it('should auto compile', function() {
	       var textarea = $('textarea');
	       var output = $('div[compile]');
	       // The initial state reads 'Hello Angular'.
	       expect(output.getText()).toBe('Hello Angular');
	       textarea.clear();
	       textarea.sendKeys('{{name}}!');
	       expect(output.getText()).toBe('Angular!');
	     });
	   </file>
	 </example>

	 *
	 *
	 * @param {string|DOMElement} element Element or HTML string to compile into a template function.
	 * @param {function(angular.Scope, cloneAttachFn=)} transclude function available to directives - DEPRECATED.
	 *
	 * <div class="alert alert-danger">
	 * **Note:** Passing a `transclude` function to the $compile function is deprecated, as it
	 *   e.g. will not use the right outer scope. Please pass the transclude function as a
	 *   `parentBoundTranscludeFn` to the link function instead.
	 * </div>
	 *
	 * @param {number} maxPriority only apply directives lower than given priority (Only effects the
	 *                 root element(s), not their children)
	 * @returns {function(scope, cloneAttachFn=, options=)} a link function which is used to bind template
	 * (a DOM element/tree) to a scope. Where:
	 *
	 *  * `scope` - A {@link ng.$rootScope.Scope Scope} to bind to.
	 *  * `cloneAttachFn` - If `cloneAttachFn` is provided, then the link function will clone the
	 *  `template` and call the `cloneAttachFn` function allowing the caller to attach the
	 *  cloned elements to the DOM document at the appropriate place. The `cloneAttachFn` is
	 *  called as: <br/> `cloneAttachFn(clonedElement, scope)` where:
	 *
	 *      * `clonedElement` - is a clone of the original `element` passed into the compiler.
	 *      * `scope` - is the current scope with which the linking function is working with.
	 *
	 *  * `options` - An optional object hash with linking options. If `options` is provided, then the following
	 *  keys may be used to control linking behavior:
	 *
	 *      * `parentBoundTranscludeFn` - the transclude function made available to
	 *        directives; if given, it will be passed through to the link functions of
	 *        directives found in `element` during compilation.
	 *      * `transcludeControllers` - an object hash with keys that map controller names
	 *        to controller instances; if given, it will make the controllers
	 *        available to directives.
	 *      * `futureParentElement` - defines the parent to which the `cloneAttachFn` will add
	 *        the cloned elements; only needed for transcludes that are allowed to contain non html
	 *        elements (e.g. SVG elements). See also the directive.controller property.
	 *
	 * Calling the linking function returns the element of the template. It is either the original
	 * element passed in, or the clone of the element if the `cloneAttachFn` is provided.
	 *
	 * After linking the view is not updated until after a call to $digest which typically is done by
	 * Angular automatically.
	 *
	 * If you need access to the bound view, there are two ways to do it:
	 *
	 * - If you are not asking the linking function to clone the template, create the DOM element(s)
	 *   before you send them to the compiler and keep this reference around.
	 *   ```js
	 *     var element = $compile('<p>{{total}}</p>')(scope);
	 *   ```
	 *
	 * - if on the other hand, you need the element to be cloned, the view reference from the original
	 *   example would not point to the clone, but rather to the original template that was cloned. In
	 *   this case, you can access the clone via the cloneAttachFn:
	 *   ```js
	 *     var templateElement = angular.element('<p>{{total}}</p>'),
	 *         scope = ....;
	 *
	 *     var clonedElement = $compile(templateElement)(scope, function(clonedElement, scope) {
	 *       //attach the clone to DOM document at the right place
	 *     });
	 *
	 *     //now we have reference to the cloned DOM via `clonedElement`
	 *   ```
	 *
	 *
	 * For information on how the compiler works, see the
	 * {@link guide/compiler Angular HTML Compiler} section of the Developer Guide.
	 */

	var $compileMinErr = minErr('$compile');

	/**
	 * @ngdoc provider
	 * @name $compileProvider
	 *
	 * @description
	 */
	$CompileProvider.$inject = ['$provide', '$$sanitizeUriProvider'];
	function $CompileProvider($provide, $$sanitizeUriProvider) {
	  var hasDirectives = {},
	      Suffix = 'Directive',
	      COMMENT_DIRECTIVE_REGEXP = /^\s*directive\:\s*([\w\-]+)\s+(.*)$/,
	      CLASS_DIRECTIVE_REGEXP = /(([\w\-]+)(?:\:([^;]+))?;?)/,
	      ALL_OR_NOTHING_ATTRS = makeMap('ngSrc,ngSrcset,src,srcset'),
	      REQUIRE_PREFIX_REGEXP = /^(?:(\^\^?)?(\?)?(\^\^?)?)?/;

	  // Ref: http://developers.whatwg.org/webappapis.html#event-handler-idl-attributes
	  // The assumption is that future DOM event attribute names will begin with
	  // 'on' and be composed of only English letters.
	  var EVENT_HANDLER_ATTR_REGEXP = /^(on[a-z]+|formaction)$/;

	  function parseIsolateBindings(scope, directiveName, isController) {
	    var LOCAL_REGEXP = /^\s*([@&]|=(\*?))(\??)\s*(\w*)\s*$/;

	    var bindings = {};

	    forEach(scope, function(definition, scopeName) {
	      var match = definition.match(LOCAL_REGEXP);

	      if (!match) {
	        throw $compileMinErr('iscp',
	            "Invalid {3} for directive '{0}'." +
	            " Definition: {... {1}: '{2}' ...}",
	            directiveName, scopeName, definition,
	            (isController ? "controller bindings definition" :
	            "isolate scope definition"));
	      }

	      bindings[scopeName] = {
	        mode: match[1][0],
	        collection: match[2] === '*',
	        optional: match[3] === '?',
	        attrName: match[4] || scopeName
	      };
	    });

	    return bindings;
	  }

	  function parseDirectiveBindings(directive, directiveName) {
	    var bindings = {
	      isolateScope: null,
	      bindToController: null
	    };
	    if (isObject(directive.scope)) {
	      if (directive.bindToController === true) {
	        bindings.bindToController = parseIsolateBindings(directive.scope,
	                                                         directiveName, true);
	        bindings.isolateScope = {};
	      } else {
	        bindings.isolateScope = parseIsolateBindings(directive.scope,
	                                                     directiveName, false);
	      }
	    }
	    if (isObject(directive.bindToController)) {
	      bindings.bindToController =
	          parseIsolateBindings(directive.bindToController, directiveName, true);
	    }
	    if (isObject(bindings.bindToController)) {
	      var controller = directive.controller;
	      var controllerAs = directive.controllerAs;
	      if (!controller) {
	        // There is no controller, there may or may not be a controllerAs property
	        throw $compileMinErr('noctrl',
	              "Cannot bind to controller without directive '{0}'s controller.",
	              directiveName);
	      } else if (!identifierForController(controller, controllerAs)) {
	        // There is a controller, but no identifier or controllerAs property
	        throw $compileMinErr('noident',
	              "Cannot bind to controller without identifier for directive '{0}'.",
	              directiveName);
	      }
	    }
	    return bindings;
	  }

	  function assertValidDirectiveName(name) {
	    var letter = name.charAt(0);
	    if (!letter || letter !== lowercase(letter)) {
	      throw $compileMinErr('baddir', "Directive name '{0}' is invalid. The first character must be a lowercase letter", name);
	    }
	    if (name !== name.trim()) {
	      throw $compileMinErr('baddir',
	            "Directive name '{0}' is invalid. The name should not contain leading or trailing whitespaces",
	            name);
	    }
	  }

	  /**
	   * @ngdoc method
	   * @name $compileProvider#directive
	   * @kind function
	   *
	   * @description
	   * Register a new directive with the compiler.
	   *
	   * @param {string|Object} name Name of the directive in camel-case (i.e. <code>ngBind</code> which
	   *    will match as <code>ng-bind</code>), or an object map of directives where the keys are the
	   *    names and the values are the factories.
	   * @param {Function|Array} directiveFactory An injectable directive factory function. See
	   *    {@link guide/directive} for more info.
	   * @returns {ng.$compileProvider} Self for chaining.
	   */
	   this.directive = function registerDirective(name, directiveFactory) {
	    assertNotHasOwnProperty(name, 'directive');
	    if (isString(name)) {
	      assertValidDirectiveName(name);
	      assertArg(directiveFactory, 'directiveFactory');
	      if (!hasDirectives.hasOwnProperty(name)) {
	        hasDirectives[name] = [];
	        $provide.factory(name + Suffix, ['$injector', '$exceptionHandler',
	          function($injector, $exceptionHandler) {
	            var directives = [];
	            forEach(hasDirectives[name], function(directiveFactory, index) {
	              try {
	                var directive = $injector.invoke(directiveFactory);
	                if (isFunction(directive)) {
	                  directive = { compile: valueFn(directive) };
	                } else if (!directive.compile && directive.link) {
	                  directive.compile = valueFn(directive.link);
	                }
	                directive.priority = directive.priority || 0;
	                directive.index = index;
	                directive.name = directive.name || name;
	                directive.require = directive.require || (directive.controller && directive.name);
	                directive.restrict = directive.restrict || 'EA';
	                var bindings = directive.$$bindings =
	                    parseDirectiveBindings(directive, directive.name);
	                if (isObject(bindings.isolateScope)) {
	                  directive.$$isolateBindings = bindings.isolateScope;
	                }
	                directives.push(directive);
	              } catch (e) {
	                $exceptionHandler(e);
	              }
	            });
	            return directives;
	          }]);
	      }
	      hasDirectives[name].push(directiveFactory);
	    } else {
	      forEach(name, reverseParams(registerDirective));
	    }
	    return this;
	  };


	  /**
	   * @ngdoc method
	   * @name $compileProvider#aHrefSanitizationWhitelist
	   * @kind function
	   *
	   * @description
	   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
	   * urls during a[href] sanitization.
	   *
	   * The sanitization is a security measure aimed at preventing XSS attacks via html links.
	   *
	   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
	   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
	   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
	   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
	   *
	   * @param {RegExp=} regexp New regexp to whitelist urls with.
	   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
	   *    chaining otherwise.
	   */
	  this.aHrefSanitizationWhitelist = function(regexp) {
	    if (isDefined(regexp)) {
	      $$sanitizeUriProvider.aHrefSanitizationWhitelist(regexp);
	      return this;
	    } else {
	      return $$sanitizeUriProvider.aHrefSanitizationWhitelist();
	    }
	  };


	  /**
	   * @ngdoc method
	   * @name $compileProvider#imgSrcSanitizationWhitelist
	   * @kind function
	   *
	   * @description
	   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
	   * urls during img[src] sanitization.
	   *
	   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
	   *
	   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
	   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
	   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
	   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
	   *
	   * @param {RegExp=} regexp New regexp to whitelist urls with.
	   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
	   *    chaining otherwise.
	   */
	  this.imgSrcSanitizationWhitelist = function(regexp) {
	    if (isDefined(regexp)) {
	      $$sanitizeUriProvider.imgSrcSanitizationWhitelist(regexp);
	      return this;
	    } else {
	      return $$sanitizeUriProvider.imgSrcSanitizationWhitelist();
	    }
	  };

	  /**
	   * @ngdoc method
	   * @name  $compileProvider#debugInfoEnabled
	   *
	   * @param {boolean=} enabled update the debugInfoEnabled state if provided, otherwise just return the
	   * current debugInfoEnabled state
	   * @returns {*} current value if used as getter or itself (chaining) if used as setter
	   *
	   * @kind function
	   *
	   * @description
	   * Call this method to enable/disable various debug runtime information in the compiler such as adding
	   * binding information and a reference to the current scope on to DOM elements.
	   * If enabled, the compiler will add the following to DOM elements that have been bound to the scope
	   * * `ng-binding` CSS class
	   * * `$binding` data property containing an array of the binding expressions
	   *
	   * You may want to disable this in production for a significant performance boost. See
	   * {@link guide/production#disabling-debug-data Disabling Debug Data} for more.
	   *
	   * The default value is true.
	   */
	  var debugInfoEnabled = true;
	  this.debugInfoEnabled = function(enabled) {
	    if (isDefined(enabled)) {
	      debugInfoEnabled = enabled;
	      return this;
	    }
	    return debugInfoEnabled;
	  };

	  this.$get = [
	            '$injector', '$interpolate', '$exceptionHandler', '$templateRequest', '$parse',
	            '$controller', '$rootScope', '$document', '$sce', '$animate', '$$sanitizeUri',
	    function($injector,   $interpolate,   $exceptionHandler,   $templateRequest,   $parse,
	             $controller,   $rootScope,   $document,   $sce,   $animate,   $$sanitizeUri) {

	    var Attributes = function(element, attributesToCopy) {
	      if (attributesToCopy) {
	        var keys = Object.keys(attributesToCopy);
	        var i, l, key;

	        for (i = 0, l = keys.length; i < l; i++) {
	          key = keys[i];
	          this[key] = attributesToCopy[key];
	        }
	      } else {
	        this.$attr = {};
	      }

	      this.$$element = element;
	    };

	    Attributes.prototype = {
	      /**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$normalize
	       * @kind function
	       *
	       * @description
	       * Converts an attribute name (e.g. dash/colon/underscore-delimited string, optionally prefixed with `x-` or
	       * `data-`) to its normalized, camelCase form.
	       *
	       * Also there is special case for Moz prefix starting with upper case letter.
	       *
	       * For further information check out the guide on {@link guide/directive#matching-directives Matching Directives}
	       *
	       * @param {string} name Name to normalize
	       */
	      $normalize: directiveNormalize,


	      /**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$addClass
	       * @kind function
	       *
	       * @description
	       * Adds the CSS class value specified by the classVal parameter to the element. If animations
	       * are enabled then an animation will be triggered for the class addition.
	       *
	       * @param {string} classVal The className value that will be added to the element
	       */
	      $addClass: function(classVal) {
	        if (classVal && classVal.length > 0) {
	          $animate.addClass(this.$$element, classVal);
	        }
	      },

	      /**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$removeClass
	       * @kind function
	       *
	       * @description
	       * Removes the CSS class value specified by the classVal parameter from the element. If
	       * animations are enabled then an animation will be triggered for the class removal.
	       *
	       * @param {string} classVal The className value that will be removed from the element
	       */
	      $removeClass: function(classVal) {
	        if (classVal && classVal.length > 0) {
	          $animate.removeClass(this.$$element, classVal);
	        }
	      },

	      /**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$updateClass
	       * @kind function
	       *
	       * @description
	       * Adds and removes the appropriate CSS class values to the element based on the difference
	       * between the new and old CSS class values (specified as newClasses and oldClasses).
	       *
	       * @param {string} newClasses The current CSS className value
	       * @param {string} oldClasses The former CSS className value
	       */
	      $updateClass: function(newClasses, oldClasses) {
	        var toAdd = tokenDifference(newClasses, oldClasses);
	        if (toAdd && toAdd.length) {
	          $animate.addClass(this.$$element, toAdd);
	        }

	        var toRemove = tokenDifference(oldClasses, newClasses);
	        if (toRemove && toRemove.length) {
	          $animate.removeClass(this.$$element, toRemove);
	        }
	      },

	      /**
	       * Set a normalized attribute on the element in a way such that all directives
	       * can share the attribute. This function properly handles boolean attributes.
	       * @param {string} key Normalized key. (ie ngAttribute)
	       * @param {string|boolean} value The value to set. If `null` attribute will be deleted.
	       * @param {boolean=} writeAttr If false, does not write the value to DOM element attribute.
	       *     Defaults to true.
	       * @param {string=} attrName Optional none normalized name. Defaults to key.
	       */
	      $set: function(key, value, writeAttr, attrName) {
	        // TODO: decide whether or not to throw an error if "class"
	        //is set through this function since it may cause $updateClass to
	        //become unstable.

	        var node = this.$$element[0],
	            booleanKey = getBooleanAttrName(node, key),
	            aliasedKey = getAliasedAttrName(node, key),
	            observer = key,
	            nodeName;

	        if (booleanKey) {
	          this.$$element.prop(key, value);
	          attrName = booleanKey;
	        } else if (aliasedKey) {
	          this[aliasedKey] = value;
	          observer = aliasedKey;
	        }

	        this[key] = value;

	        // translate normalized key to actual key
	        if (attrName) {
	          this.$attr[key] = attrName;
	        } else {
	          attrName = this.$attr[key];
	          if (!attrName) {
	            this.$attr[key] = attrName = snake_case(key, '-');
	          }
	        }

	        nodeName = nodeName_(this.$$element);

	        if ((nodeName === 'a' && key === 'href') ||
	            (nodeName === 'img' && key === 'src')) {
	          // sanitize a[href] and img[src] values
	          this[key] = value = $$sanitizeUri(value, key === 'src');
	        } else if (nodeName === 'img' && key === 'srcset') {
	          // sanitize img[srcset] values
	          var result = "";

	          // first check if there are spaces because it's not the same pattern
	          var trimmedSrcset = trim(value);
	          //                (   999x   ,|   999w   ,|   ,|,   )
	          var srcPattern = /(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/;
	          var pattern = /\s/.test(trimmedSrcset) ? srcPattern : /(,)/;

	          // split srcset into tuple of uri and descriptor except for the last item
	          var rawUris = trimmedSrcset.split(pattern);

	          // for each tuples
	          var nbrUrisWith2parts = Math.floor(rawUris.length / 2);
	          for (var i = 0; i < nbrUrisWith2parts; i++) {
	            var innerIdx = i * 2;
	            // sanitize the uri
	            result += $$sanitizeUri(trim(rawUris[innerIdx]), true);
	            // add the descriptor
	            result += (" " + trim(rawUris[innerIdx + 1]));
	          }

	          // split the last item into uri and descriptor
	          var lastTuple = trim(rawUris[i * 2]).split(/\s/);

	          // sanitize the last uri
	          result += $$sanitizeUri(trim(lastTuple[0]), true);

	          // and add the last descriptor if any
	          if (lastTuple.length === 2) {
	            result += (" " + trim(lastTuple[1]));
	          }
	          this[key] = value = result;
	        }

	        if (writeAttr !== false) {
	          if (value === null || value === undefined) {
	            this.$$element.removeAttr(attrName);
	          } else {
	            this.$$element.attr(attrName, value);
	          }
	        }

	        // fire observers
	        var $$observers = this.$$observers;
	        $$observers && forEach($$observers[observer], function(fn) {
	          try {
	            fn(value);
	          } catch (e) {
	            $exceptionHandler(e);
	          }
	        });
	      },


	      /**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$observe
	       * @kind function
	       *
	       * @description
	       * Observes an interpolated attribute.
	       *
	       * The observer function will be invoked once during the next `$digest` following
	       * compilation. The observer is then invoked whenever the interpolated value
	       * changes.
	       *
	       * @param {string} key Normalized key. (ie ngAttribute) .
	       * @param {function(interpolatedValue)} fn Function that will be called whenever
	                the interpolated value of the attribute changes.
	       *        See the {@link guide/directive#text-and-attribute-bindings Directives} guide for more info.
	       * @returns {function()} Returns a deregistration function for this observer.
	       */
	      $observe: function(key, fn) {
	        var attrs = this,
	            $$observers = (attrs.$$observers || (attrs.$$observers = createMap())),
	            listeners = ($$observers[key] || ($$observers[key] = []));

	        listeners.push(fn);
	        $rootScope.$evalAsync(function() {
	          if (!listeners.$$inter && attrs.hasOwnProperty(key)) {
	            // no one registered attribute interpolation function, so lets call it manually
	            fn(attrs[key]);
	          }
	        });

	        return function() {
	          arrayRemove(listeners, fn);
	        };
	      }
	    };


	    function safeAddClass($element, className) {
	      try {
	        $element.addClass(className);
	      } catch (e) {
	        // ignore, since it means that we are trying to set class on
	        // SVG element, where class name is read-only.
	      }
	    }


	    var startSymbol = $interpolate.startSymbol(),
	        endSymbol = $interpolate.endSymbol(),
	        denormalizeTemplate = (startSymbol == '{{' || endSymbol  == '}}')
	            ? identity
	            : function denormalizeTemplate(template) {
	              return template.replace(/\{\{/g, startSymbol).replace(/}}/g, endSymbol);
	        },
	        NG_ATTR_BINDING = /^ngAttr[A-Z]/;

	    compile.$$addBindingInfo = debugInfoEnabled ? function $$addBindingInfo($element, binding) {
	      var bindings = $element.data('$binding') || [];

	      if (isArray(binding)) {
	        bindings = bindings.concat(binding);
	      } else {
	        bindings.push(binding);
	      }

	      $element.data('$binding', bindings);
	    } : noop;

	    compile.$$addBindingClass = debugInfoEnabled ? function $$addBindingClass($element) {
	      safeAddClass($element, 'ng-binding');
	    } : noop;

	    compile.$$addScopeInfo = debugInfoEnabled ? function $$addScopeInfo($element, scope, isolated, noTemplate) {
	      var dataName = isolated ? (noTemplate ? '$isolateScopeNoTemplate' : '$isolateScope') : '$scope';
	      $element.data(dataName, scope);
	    } : noop;

	    compile.$$addScopeClass = debugInfoEnabled ? function $$addScopeClass($element, isolated) {
	      safeAddClass($element, isolated ? 'ng-isolate-scope' : 'ng-scope');
	    } : noop;

	    return compile;

	    //================================

	    function compile($compileNodes, transcludeFn, maxPriority, ignoreDirective,
	                        previousCompileContext) {
	      if (!($compileNodes instanceof jqLite)) {
	        // jquery always rewraps, whereas we need to preserve the original selector so that we can
	        // modify it.
	        $compileNodes = jqLite($compileNodes);
	      }
	      // We can not compile top level text elements since text nodes can be merged and we will
	      // not be able to attach scope data to them, so we will wrap them in <span>
	      forEach($compileNodes, function(node, index) {
	        if (node.nodeType == NODE_TYPE_TEXT && node.nodeValue.match(/\S+/) /* non-empty */ ) {
	          $compileNodes[index] = jqLite(node).wrap('<span></span>').parent()[0];
	        }
	      });
	      var compositeLinkFn =
	              compileNodes($compileNodes, transcludeFn, $compileNodes,
	                           maxPriority, ignoreDirective, previousCompileContext);
	      compile.$$addScopeClass($compileNodes);
	      var namespace = null;
	      return function publicLinkFn(scope, cloneConnectFn, options) {
	        assertArg(scope, 'scope');

	        options = options || {};
	        var parentBoundTranscludeFn = options.parentBoundTranscludeFn,
	          transcludeControllers = options.transcludeControllers,
	          futureParentElement = options.futureParentElement;

	        // When `parentBoundTranscludeFn` is passed, it is a
	        // `controllersBoundTransclude` function (it was previously passed
	        // as `transclude` to directive.link) so we must unwrap it to get
	        // its `boundTranscludeFn`
	        if (parentBoundTranscludeFn && parentBoundTranscludeFn.$$boundTransclude) {
	          parentBoundTranscludeFn = parentBoundTranscludeFn.$$boundTransclude;
	        }

	        if (!namespace) {
	          namespace = detectNamespaceForChildElements(futureParentElement);
	        }
	        var $linkNode;
	        if (namespace !== 'html') {
	          // When using a directive with replace:true and templateUrl the $compileNodes
	          // (or a child element inside of them)
	          // might change, so we need to recreate the namespace adapted compileNodes
	          // for call to the link function.
	          // Note: This will already clone the nodes...
	          $linkNode = jqLite(
	            wrapTemplate(namespace, jqLite('<div>').append($compileNodes).html())
	          );
	        } else if (cloneConnectFn) {
	          // important!!: we must call our jqLite.clone() since the jQuery one is trying to be smart
	          // and sometimes changes the structure of the DOM.
	          $linkNode = JQLitePrototype.clone.call($compileNodes);
	        } else {
	          $linkNode = $compileNodes;
	        }

	        if (transcludeControllers) {
	          for (var controllerName in transcludeControllers) {
	            $linkNode.data('$' + controllerName + 'Controller', transcludeControllers[controllerName].instance);
	          }
	        }

	        compile.$$addScopeInfo($linkNode, scope);

	        if (cloneConnectFn) cloneConnectFn($linkNode, scope);
	        if (compositeLinkFn) compositeLinkFn(scope, $linkNode, $linkNode, parentBoundTranscludeFn);
	        return $linkNode;
	      };
	    }

	    function detectNamespaceForChildElements(parentElement) {
	      // TODO: Make this detect MathML as well...
	      var node = parentElement && parentElement[0];
	      if (!node) {
	        return 'html';
	      } else {
	        return nodeName_(node) !== 'foreignobject' && node.toString().match(/SVG/) ? 'svg' : 'html';
	      }
	    }

	    /**
	     * Compile function matches each node in nodeList against the directives. Once all directives
	     * for a particular node are collected their compile functions are executed. The compile
	     * functions return values - the linking functions - are combined into a composite linking
	     * function, which is the a linking function for the node.
	     *
	     * @param {NodeList} nodeList an array of nodes or NodeList to compile
	     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
	     *        scope argument is auto-generated to the new child of the transcluded parent scope.
	     * @param {DOMElement=} $rootElement If the nodeList is the root of the compilation tree then
	     *        the rootElement must be set the jqLite collection of the compile root. This is
	     *        needed so that the jqLite collection items can be replaced with widgets.
	     * @param {number=} maxPriority Max directive priority.
	     * @returns {Function} A composite linking function of all of the matched directives or null.
	     */
	    function compileNodes(nodeList, transcludeFn, $rootElement, maxPriority, ignoreDirective,
	                            previousCompileContext) {
	      var linkFns = [],
	          attrs, directives, nodeLinkFn, childNodes, childLinkFn, linkFnFound, nodeLinkFnFound;

	      for (var i = 0; i < nodeList.length; i++) {
	        attrs = new Attributes();

	        // we must always refer to nodeList[i] since the nodes can be replaced underneath us.
	        directives = collectDirectives(nodeList[i], [], attrs, i === 0 ? maxPriority : undefined,
	                                        ignoreDirective);

	        nodeLinkFn = (directives.length)
	            ? applyDirectivesToNode(directives, nodeList[i], attrs, transcludeFn, $rootElement,
	                                      null, [], [], previousCompileContext)
	            : null;

	        if (nodeLinkFn && nodeLinkFn.scope) {
	          compile.$$addScopeClass(attrs.$$element);
	        }

	        childLinkFn = (nodeLinkFn && nodeLinkFn.terminal ||
	                      !(childNodes = nodeList[i].childNodes) ||
	                      !childNodes.length)
	            ? null
	            : compileNodes(childNodes,
	                 nodeLinkFn ? (
	                  (nodeLinkFn.transcludeOnThisElement || !nodeLinkFn.templateOnThisElement)
	                     && nodeLinkFn.transclude) : transcludeFn);

	        if (nodeLinkFn || childLinkFn) {
	          linkFns.push(i, nodeLinkFn, childLinkFn);
	          linkFnFound = true;
	          nodeLinkFnFound = nodeLinkFnFound || nodeLinkFn;
	        }

	        //use the previous context only for the first element in the virtual group
	        previousCompileContext = null;
	      }

	      // return a linking function if we have found anything, null otherwise
	      return linkFnFound ? compositeLinkFn : null;

	      function compositeLinkFn(scope, nodeList, $rootElement, parentBoundTranscludeFn) {
	        var nodeLinkFn, childLinkFn, node, childScope, i, ii, idx, childBoundTranscludeFn;
	        var stableNodeList;


	        if (nodeLinkFnFound) {
	          // copy nodeList so that if a nodeLinkFn removes or adds an element at this DOM level our
	          // offsets don't get screwed up
	          var nodeListLength = nodeList.length;
	          stableNodeList = new Array(nodeListLength);

	          // create a sparse array by only copying the elements which have a linkFn
	          for (i = 0; i < linkFns.length; i+=3) {
	            idx = linkFns[i];
	            stableNodeList[idx] = nodeList[idx];
	          }
	        } else {
	          stableNodeList = nodeList;
	        }

	        for (i = 0, ii = linkFns.length; i < ii;) {
	          node = stableNodeList[linkFns[i++]];
	          nodeLinkFn = linkFns[i++];
	          childLinkFn = linkFns[i++];

	          if (nodeLinkFn) {
	            if (nodeLinkFn.scope) {
	              childScope = scope.$new();
	              compile.$$addScopeInfo(jqLite(node), childScope);
	              var destroyBindings = nodeLinkFn.$$destroyBindings;
	              if (destroyBindings) {
	                nodeLinkFn.$$destroyBindings = null;
	                childScope.$on('$destroyed', destroyBindings);
	              }
	            } else {
	              childScope = scope;
	            }

	            if (nodeLinkFn.transcludeOnThisElement) {
	              childBoundTranscludeFn = createBoundTranscludeFn(
	                  scope, nodeLinkFn.transclude, parentBoundTranscludeFn,
	                  nodeLinkFn.elementTranscludeOnThisElement);

	            } else if (!nodeLinkFn.templateOnThisElement && parentBoundTranscludeFn) {
	              childBoundTranscludeFn = parentBoundTranscludeFn;

	            } else if (!parentBoundTranscludeFn && transcludeFn) {
	              childBoundTranscludeFn = createBoundTranscludeFn(scope, transcludeFn);

	            } else {
	              childBoundTranscludeFn = null;
	            }

	            nodeLinkFn(childLinkFn, childScope, node, $rootElement, childBoundTranscludeFn,
	                       nodeLinkFn);

	          } else if (childLinkFn) {
	            childLinkFn(scope, node.childNodes, undefined, parentBoundTranscludeFn);
	          }
	        }
	      }
	    }

	    function createBoundTranscludeFn(scope, transcludeFn, previousBoundTranscludeFn, elementTransclusion) {

	      var boundTranscludeFn = function(transcludedScope, cloneFn, controllers, futureParentElement, containingScope) {

	        if (!transcludedScope) {
	          transcludedScope = scope.$new(false, containingScope);
	          transcludedScope.$$transcluded = true;
	        }

	        return transcludeFn(transcludedScope, cloneFn, {
	          parentBoundTranscludeFn: previousBoundTranscludeFn,
	          transcludeControllers: controllers,
	          futureParentElement: futureParentElement
	        });
	      };

	      return boundTranscludeFn;
	    }

	    /**
	     * Looks for directives on the given node and adds them to the directive collection which is
	     * sorted.
	     *
	     * @param node Node to search.
	     * @param directives An array to which the directives are added to. This array is sorted before
	     *        the function returns.
	     * @param attrs The shared attrs object which is used to populate the normalized attributes.
	     * @param {number=} maxPriority Max directive priority.
	     */
	    function collectDirectives(node, directives, attrs, maxPriority, ignoreDirective) {
	      var nodeType = node.nodeType,
	          attrsMap = attrs.$attr,
	          match,
	          className;

	      switch (nodeType) {
	        case NODE_TYPE_ELEMENT: /* Element */
	          // use the node name: <directive>
	          addDirective(directives,
	              directiveNormalize(nodeName_(node)), 'E', maxPriority, ignoreDirective);

	          // iterate over the attributes
	          for (var attr, name, nName, ngAttrName, value, isNgAttr, nAttrs = node.attributes,
	                   j = 0, jj = nAttrs && nAttrs.length; j < jj; j++) {
	            var attrStartName = false;
	            var attrEndName = false;

	            attr = nAttrs[j];
	            name = attr.name;
	            value = trim(attr.value);

	            // support ngAttr attribute binding
	            ngAttrName = directiveNormalize(name);
	            if (isNgAttr = NG_ATTR_BINDING.test(ngAttrName)) {
	              name = name.replace(PREFIX_REGEXP, '')
	                .substr(8).replace(/_(.)/g, function(match, letter) {
	                  return letter.toUpperCase();
	                });
	            }

	            var directiveNName = ngAttrName.replace(/(Start|End)$/, '');
	            if (directiveIsMultiElement(directiveNName)) {
	              if (ngAttrName === directiveNName + 'Start') {
	                attrStartName = name;
	                attrEndName = name.substr(0, name.length - 5) + 'end';
	                name = name.substr(0, name.length - 6);
	              }
	            }

	            nName = directiveNormalize(name.toLowerCase());
	            attrsMap[nName] = name;
	            if (isNgAttr || !attrs.hasOwnProperty(nName)) {
	                attrs[nName] = value;
	                if (getBooleanAttrName(node, nName)) {
	                  attrs[nName] = true; // presence means true
	                }
	            }
	            addAttrInterpolateDirective(node, directives, value, nName, isNgAttr);
	            addDirective(directives, nName, 'A', maxPriority, ignoreDirective, attrStartName,
	                          attrEndName);
	          }

	          // use class as directive
	          className = node.className;
	          if (isObject(className)) {
	              // Maybe SVGAnimatedString
	              className = className.animVal;
	          }
	          if (isString(className) && className !== '') {
	            while (match = CLASS_DIRECTIVE_REGEXP.exec(className)) {
	              nName = directiveNormalize(match[2]);
	              if (addDirective(directives, nName, 'C', maxPriority, ignoreDirective)) {
	                attrs[nName] = trim(match[3]);
	              }
	              className = className.substr(match.index + match[0].length);
	            }
	          }
	          break;
	        case NODE_TYPE_TEXT: /* Text Node */
	          addTextInterpolateDirective(directives, node.nodeValue);
	          break;
	        case NODE_TYPE_COMMENT: /* Comment */
	          try {
	            match = COMMENT_DIRECTIVE_REGEXP.exec(node.nodeValue);
	            if (match) {
	              nName = directiveNormalize(match[1]);
	              if (addDirective(directives, nName, 'M', maxPriority, ignoreDirective)) {
	                attrs[nName] = trim(match[2]);
	              }
	            }
	          } catch (e) {
	            // turns out that under some circumstances IE9 throws errors when one attempts to read
	            // comment's node value.
	            // Just ignore it and continue. (Can't seem to reproduce in test case.)
	          }
	          break;
	      }

	      directives.sort(byPriority);
	      return directives;
	    }

	    /**
	     * Given a node with an directive-start it collects all of the siblings until it finds
	     * directive-end.
	     * @param node
	     * @param attrStart
	     * @param attrEnd
	     * @returns {*}
	     */
	    function groupScan(node, attrStart, attrEnd) {
	      var nodes = [];
	      var depth = 0;
	      if (attrStart && node.hasAttribute && node.hasAttribute(attrStart)) {
	        do {
	          if (!node) {
	            throw $compileMinErr('uterdir',
	                      "Unterminated attribute, found '{0}' but no matching '{1}' found.",
	                      attrStart, attrEnd);
	          }
	          if (node.nodeType == NODE_TYPE_ELEMENT) {
	            if (node.hasAttribute(attrStart)) depth++;
	            if (node.hasAttribute(attrEnd)) depth--;
	          }
	          nodes.push(node);
	          node = node.nextSibling;
	        } while (depth > 0);
	      } else {
	        nodes.push(node);
	      }

	      return jqLite(nodes);
	    }

	    /**
	     * Wrapper for linking function which converts normal linking function into a grouped
	     * linking function.
	     * @param linkFn
	     * @param attrStart
	     * @param attrEnd
	     * @returns {Function}
	     */
	    function groupElementsLinkFnWrapper(linkFn, attrStart, attrEnd) {
	      return function(scope, element, attrs, controllers, transcludeFn) {
	        element = groupScan(element[0], attrStart, attrEnd);
	        return linkFn(scope, element, attrs, controllers, transcludeFn);
	      };
	    }

	    /**
	     * Once the directives have been collected, their compile functions are executed. This method
	     * is responsible for inlining directive templates as well as terminating the application
	     * of the directives if the terminal directive has been reached.
	     *
	     * @param {Array} directives Array of collected directives to execute their compile function.
	     *        this needs to be pre-sorted by priority order.
	     * @param {Node} compileNode The raw DOM node to apply the compile functions to
	     * @param {Object} templateAttrs The shared attribute function
	     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
	     *                                                  scope argument is auto-generated to the new
	     *                                                  child of the transcluded parent scope.
	     * @param {JQLite} jqCollection If we are working on the root of the compile tree then this
	     *                              argument has the root jqLite array so that we can replace nodes
	     *                              on it.
	     * @param {Object=} originalReplaceDirective An optional directive that will be ignored when
	     *                                           compiling the transclusion.
	     * @param {Array.<Function>} preLinkFns
	     * @param {Array.<Function>} postLinkFns
	     * @param {Object} previousCompileContext Context used for previous compilation of the current
	     *                                        node
	     * @returns {Function} linkFn
	     */
	    function applyDirectivesToNode(directives, compileNode, templateAttrs, transcludeFn,
	                                   jqCollection, originalReplaceDirective, preLinkFns, postLinkFns,
	                                   previousCompileContext) {
	      previousCompileContext = previousCompileContext || {};

	      var terminalPriority = -Number.MAX_VALUE,
	          newScopeDirective,
	          controllerDirectives = previousCompileContext.controllerDirectives,
	          newIsolateScopeDirective = previousCompileContext.newIsolateScopeDirective,
	          templateDirective = previousCompileContext.templateDirective,
	          nonTlbTranscludeDirective = previousCompileContext.nonTlbTranscludeDirective,
	          hasTranscludeDirective = false,
	          hasTemplate = false,
	          hasElementTranscludeDirective = previousCompileContext.hasElementTranscludeDirective,
	          $compileNode = templateAttrs.$$element = jqLite(compileNode),
	          directive,
	          directiveName,
	          $template,
	          replaceDirective = originalReplaceDirective,
	          childTranscludeFn = transcludeFn,
	          linkFn,
	          directiveValue;

	      // executes all directives on the current element
	      for (var i = 0, ii = directives.length; i < ii; i++) {
	        directive = directives[i];
	        var attrStart = directive.$$start;
	        var attrEnd = directive.$$end;

	        // collect multiblock sections
	        if (attrStart) {
	          $compileNode = groupScan(compileNode, attrStart, attrEnd);
	        }
	        $template = undefined;

	        if (terminalPriority > directive.priority) {
	          break; // prevent further processing of directives
	        }

	        if (directiveValue = directive.scope) {

	          // skip the check for directives with async templates, we'll check the derived sync
	          // directive when the template arrives
	          if (!directive.templateUrl) {
	            if (isObject(directiveValue)) {
	              // This directive is trying to add an isolated scope.
	              // Check that there is no scope of any kind already
	              assertNoDuplicate('new/isolated scope', newIsolateScopeDirective || newScopeDirective,
	                                directive, $compileNode);
	              newIsolateScopeDirective = directive;
	            } else {
	              // This directive is trying to add a child scope.
	              // Check that there is no isolated scope already
	              assertNoDuplicate('new/isolated scope', newIsolateScopeDirective, directive,
	                                $compileNode);
	            }
	          }

	          newScopeDirective = newScopeDirective || directive;
	        }

	        directiveName = directive.name;

	        if (!directive.templateUrl && directive.controller) {
	          directiveValue = directive.controller;
	          controllerDirectives = controllerDirectives || createMap();
	          assertNoDuplicate("'" + directiveName + "' controller",
	              controllerDirectives[directiveName], directive, $compileNode);
	          controllerDirectives[directiveName] = directive;
	        }

	        if (directiveValue = directive.transclude) {
	          hasTranscludeDirective = true;

	          // Special case ngIf and ngRepeat so that we don't complain about duplicate transclusion.
	          // This option should only be used by directives that know how to safely handle element transclusion,
	          // where the transcluded nodes are added or replaced after linking.
	          if (!directive.$$tlb) {
	            assertNoDuplicate('transclusion', nonTlbTranscludeDirective, directive, $compileNode);
	            nonTlbTranscludeDirective = directive;
	          }

	          if (directiveValue == 'element') {
	            hasElementTranscludeDirective = true;
	            terminalPriority = directive.priority;
	            $template = $compileNode;
	            $compileNode = templateAttrs.$$element =
	                jqLite(document.createComment(' ' + directiveName + ': ' +
	                                              templateAttrs[directiveName] + ' '));
	            compileNode = $compileNode[0];
	            replaceWith(jqCollection, sliceArgs($template), compileNode);

	            childTranscludeFn = compile($template, transcludeFn, terminalPriority,
	                                        replaceDirective && replaceDirective.name, {
	                                          // Don't pass in:
	                                          // - controllerDirectives - otherwise we'll create duplicates controllers
	                                          // - newIsolateScopeDirective or templateDirective - combining templates with
	                                          //   element transclusion doesn't make sense.
	                                          //
	                                          // We need only nonTlbTranscludeDirective so that we prevent putting transclusion
	                                          // on the same element more than once.
	                                          nonTlbTranscludeDirective: nonTlbTranscludeDirective
	                                        });
	          } else {
	            $template = jqLite(jqLiteClone(compileNode)).contents();
	            $compileNode.empty(); // clear contents
	            childTranscludeFn = compile($template, transcludeFn);
	          }
	        }

	        if (directive.template) {
	          hasTemplate = true;
	          assertNoDuplicate('template', templateDirective, directive, $compileNode);
	          templateDirective = directive;

	          directiveValue = (isFunction(directive.template))
	              ? directive.template($compileNode, templateAttrs)
	              : directive.template;

	          directiveValue = denormalizeTemplate(directiveValue);

	          if (directive.replace) {
	            replaceDirective = directive;
	            if (jqLiteIsTextNode(directiveValue)) {
	              $template = [];
	            } else {
	              $template = removeComments(wrapTemplate(directive.templateNamespace, trim(directiveValue)));
	            }
	            compileNode = $template[0];

	            if ($template.length != 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {
	              throw $compileMinErr('tplrt',
	                  "Template for directive '{0}' must have exactly one root element. {1}",
	                  directiveName, '');
	            }

	            replaceWith(jqCollection, $compileNode, compileNode);

	            var newTemplateAttrs = {$attr: {}};

	            // combine directives from the original node and from the template:
	            // - take the array of directives for this element
	            // - split it into two parts, those that already applied (processed) and those that weren't (unprocessed)
	            // - collect directives from the template and sort them by priority
	            // - combine directives as: processed + template + unprocessed
	            var templateDirectives = collectDirectives(compileNode, [], newTemplateAttrs);
	            var unprocessedDirectives = directives.splice(i + 1, directives.length - (i + 1));

	            if (newIsolateScopeDirective) {
	              markDirectivesAsIsolate(templateDirectives);
	            }
	            directives = directives.concat(templateDirectives).concat(unprocessedDirectives);
	            mergeTemplateAttributes(templateAttrs, newTemplateAttrs);

	            ii = directives.length;
	          } else {
	            $compileNode.html(directiveValue);
	          }
	        }

	        if (directive.templateUrl) {
	          hasTemplate = true;
	          assertNoDuplicate('template', templateDirective, directive, $compileNode);
	          templateDirective = directive;

	          if (directive.replace) {
	            replaceDirective = directive;
	          }

	          nodeLinkFn = compileTemplateUrl(directives.splice(i, directives.length - i), $compileNode,
	              templateAttrs, jqCollection, hasTranscludeDirective && childTranscludeFn, preLinkFns, postLinkFns, {
	                controllerDirectives: controllerDirectives,
	                newIsolateScopeDirective: newIsolateScopeDirective,
	                templateDirective: templateDirective,
	                nonTlbTranscludeDirective: nonTlbTranscludeDirective
	              });
	          ii = directives.length;
	        } else if (directive.compile) {
	          try {
	            linkFn = directive.compile($compileNode, templateAttrs, childTranscludeFn);
	            if (isFunction(linkFn)) {
	              addLinkFns(null, linkFn, attrStart, attrEnd);
	            } else if (linkFn) {
	              addLinkFns(linkFn.pre, linkFn.post, attrStart, attrEnd);
	            }
	          } catch (e) {
	            $exceptionHandler(e, startingTag($compileNode));
	          }
	        }

	        if (directive.terminal) {
	          nodeLinkFn.terminal = true;
	          terminalPriority = Math.max(terminalPriority, directive.priority);
	        }

	      }

	      nodeLinkFn.scope = newScopeDirective && newScopeDirective.scope === true;
	      nodeLinkFn.transcludeOnThisElement = hasTranscludeDirective;
	      nodeLinkFn.elementTranscludeOnThisElement = hasElementTranscludeDirective;
	      nodeLinkFn.templateOnThisElement = hasTemplate;
	      nodeLinkFn.transclude = childTranscludeFn;

	      previousCompileContext.hasElementTranscludeDirective = hasElementTranscludeDirective;

	      // might be normal or delayed nodeLinkFn depending on if templateUrl is present
	      return nodeLinkFn;

	      ////////////////////

	      function addLinkFns(pre, post, attrStart, attrEnd) {
	        if (pre) {
	          if (attrStart) pre = groupElementsLinkFnWrapper(pre, attrStart, attrEnd);
	          pre.require = directive.require;
	          pre.directiveName = directiveName;
	          if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
	            pre = cloneAndAnnotateFn(pre, {isolateScope: true});
	          }
	          preLinkFns.push(pre);
	        }
	        if (post) {
	          if (attrStart) post = groupElementsLinkFnWrapper(post, attrStart, attrEnd);
	          post.require = directive.require;
	          post.directiveName = directiveName;
	          if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
	            post = cloneAndAnnotateFn(post, {isolateScope: true});
	          }
	          postLinkFns.push(post);
	        }
	      }


	      function getControllers(directiveName, require, $element, elementControllers) {
	        var value;

	        if (isString(require)) {
	          var match = require.match(REQUIRE_PREFIX_REGEXP);
	          var name = require.substring(match[0].length);
	          var inheritType = match[1] || match[3];
	          var optional = match[2] === '?';

	          //If only parents then start at the parent element
	          if (inheritType === '^^') {
	            $element = $element.parent();
	          //Otherwise attempt getting the controller from elementControllers in case
	          //the element is transcluded (and has no data) and to avoid .data if possible
	          } else {
	            value = elementControllers && elementControllers[name];
	            value = value && value.instance;
	          }

	          if (!value) {
	            var dataName = '$' + name + 'Controller';
	            value = inheritType ? $element.inheritedData(dataName) : $element.data(dataName);
	          }

	          if (!value && !optional) {
	            throw $compileMinErr('ctreq',
	                "Controller '{0}', required by directive '{1}', can't be found!",
	                name, directiveName);
	          }
	        } else if (isArray(require)) {
	          value = [];
	          for (var i = 0, ii = require.length; i < ii; i++) {
	            value[i] = getControllers(directiveName, require[i], $element, elementControllers);
	          }
	        }

	        return value || null;
	      }

	      function setupControllers($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope) {
	        var elementControllers = createMap();
	        for (var controllerKey in controllerDirectives) {
	          var directive = controllerDirectives[controllerKey];
	          var locals = {
	            $scope: directive === newIsolateScopeDirective || directive.$$isolateScope ? isolateScope : scope,
	            $element: $element,
	            $attrs: attrs,
	            $transclude: transcludeFn
	          };

	          var controller = directive.controller;
	          if (controller == '@') {
	            controller = attrs[directive.name];
	          }

	          var controllerInstance = $controller(controller, locals, true, directive.controllerAs);

	          // For directives with element transclusion the element is a comment,
	          // but jQuery .data doesn't support attaching data to comment nodes as it's hard to
	          // clean up (http://bugs.jquery.com/ticket/8335).
	          // Instead, we save the controllers for the element in a local hash and attach to .data
	          // later, once we have the actual element.
	          elementControllers[directive.name] = controllerInstance;
	          if (!hasElementTranscludeDirective) {
	            $element.data('$' + directive.name + 'Controller', controllerInstance.instance);
	          }
	        }
	        return elementControllers;
	      }

	      function nodeLinkFn(childLinkFn, scope, linkNode, $rootElement, boundTranscludeFn,
	                          thisLinkFn) {
	        var i, ii, linkFn, controller, isolateScope, elementControllers, transcludeFn, $element,
	            attrs;

	        if (compileNode === linkNode) {
	          attrs = templateAttrs;
	          $element = templateAttrs.$$element;
	        } else {
	          $element = jqLite(linkNode);
	          attrs = new Attributes($element, templateAttrs);
	        }

	        if (newIsolateScopeDirective) {
	          isolateScope = scope.$new(true);
	        }

	        if (boundTranscludeFn) {
	          // track `boundTranscludeFn` so it can be unwrapped if `transcludeFn`
	          // is later passed as `parentBoundTranscludeFn` to `publicLinkFn`
	          transcludeFn = controllersBoundTransclude;
	          transcludeFn.$$boundTransclude = boundTranscludeFn;
	        }

	        if (controllerDirectives) {
	          elementControllers = setupControllers($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope);
	        }

	        if (newIsolateScopeDirective) {
	          // Initialize isolate scope bindings for new isolate scope directive.
	          compile.$$addScopeInfo($element, isolateScope, true, !(templateDirective && (templateDirective === newIsolateScopeDirective ||
	              templateDirective === newIsolateScopeDirective.$$originalDirective)));
	          compile.$$addScopeClass($element, true);
	          isolateScope.$$isolateBindings =
	              newIsolateScopeDirective.$$isolateBindings;
	          initializeDirectiveBindings(scope, attrs, isolateScope,
	                                      isolateScope.$$isolateBindings,
	                                      newIsolateScopeDirective, isolateScope);
	        }
	        if (elementControllers) {
	          // Initialize bindToController bindings for new/isolate scopes
	          var scopeDirective = newIsolateScopeDirective || newScopeDirective;
	          var bindings;
	          var controllerForBindings;
	          if (scopeDirective && elementControllers[scopeDirective.name]) {
	            bindings = scopeDirective.$$bindings.bindToController;
	            controller = elementControllers[scopeDirective.name];

	            if (controller && controller.identifier && bindings) {
	              controllerForBindings = controller;
	              thisLinkFn.$$destroyBindings =
	                  initializeDirectiveBindings(scope, attrs, controller.instance,
	                                              bindings, scopeDirective);
	            }
	          }
	          for (i in elementControllers) {
	            controller = elementControllers[i];
	            var controllerResult = controller();
	            if (controllerResult !== controller.instance) {
	              controller.instance = controllerResult;
	              $element.data('$' + directive.name + 'Controller', controllerResult);
	              if (controller === controllerForBindings) {
	                // Remove and re-install bindToController bindings
	                thisLinkFn.$$destroyBindings();
	                thisLinkFn.$$destroyBindings =
	                  initializeDirectiveBindings(scope, attrs, controllerResult, bindings, scopeDirective);
	              }
	            }
	          }
	        }

	        // PRELINKING
	        for (i = 0, ii = preLinkFns.length; i < ii; i++) {
	          linkFn = preLinkFns[i];
	          invokeLinkFn(linkFn,
	              linkFn.isolateScope ? isolateScope : scope,
	              $element,
	              attrs,
	              linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers),
	              transcludeFn
	          );
	        }

	        // RECURSION
	        // We only pass the isolate scope, if the isolate directive has a template,
	        // otherwise the child elements do not belong to the isolate directive.
	        var scopeToChild = scope;
	        if (newIsolateScopeDirective && (newIsolateScopeDirective.template || newIsolateScopeDirective.templateUrl === null)) {
	          scopeToChild = isolateScope;
	        }
	        childLinkFn && childLinkFn(scopeToChild, linkNode.childNodes, undefined, boundTranscludeFn);

	        // POSTLINKING
	        for (i = postLinkFns.length - 1; i >= 0; i--) {
	          linkFn = postLinkFns[i];
	          invokeLinkFn(linkFn,
	              linkFn.isolateScope ? isolateScope : scope,
	              $element,
	              attrs,
	              linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers),
	              transcludeFn
	          );
	        }

	        // This is the function that is injected as `$transclude`.
	        // Note: all arguments are optional!
	        function controllersBoundTransclude(scope, cloneAttachFn, futureParentElement) {
	          var transcludeControllers;

	          // No scope passed in:
	          if (!isScope(scope)) {
	            futureParentElement = cloneAttachFn;
	            cloneAttachFn = scope;
	            scope = undefined;
	          }

	          if (hasElementTranscludeDirective) {
	            transcludeControllers = elementControllers;
	          }
	          if (!futureParentElement) {
	            futureParentElement = hasElementTranscludeDirective ? $element.parent() : $element;
	          }
	          return boundTranscludeFn(scope, cloneAttachFn, transcludeControllers, futureParentElement, scopeToChild);
	        }
	      }
	    }

	    function markDirectivesAsIsolate(directives) {
	      // mark all directives as needing isolate scope.
	      for (var j = 0, jj = directives.length; j < jj; j++) {
	        directives[j] = inherit(directives[j], {$$isolateScope: true});
	      }
	    }

	    /**
	     * looks up the directive and decorates it with exception handling and proper parameters. We
	     * call this the boundDirective.
	     *
	     * @param {string} name name of the directive to look up.
	     * @param {string} location The directive must be found in specific format.
	     *   String containing any of theses characters:
	     *
	     *   * `E`: element name
	     *   * `A': attribute
	     *   * `C`: class
	     *   * `M`: comment
	     * @returns {boolean} true if directive was added.
	     */
	    function addDirective(tDirectives, name, location, maxPriority, ignoreDirective, startAttrName,
	                          endAttrName) {
	      if (name === ignoreDirective) return null;
	      var match = null;
	      if (hasDirectives.hasOwnProperty(name)) {
	        for (var directive, directives = $injector.get(name + Suffix),
	            i = 0, ii = directives.length; i < ii; i++) {
	          try {
	            directive = directives[i];
	            if ((maxPriority === undefined || maxPriority > directive.priority) &&
	                 directive.restrict.indexOf(location) != -1) {
	              if (startAttrName) {
	                directive = inherit(directive, {$$start: startAttrName, $$end: endAttrName});
	              }
	              tDirectives.push(directive);
	              match = directive;
	            }
	          } catch (e) { $exceptionHandler(e); }
	        }
	      }
	      return match;
	    }


	    /**
	     * looks up the directive and returns true if it is a multi-element directive,
	     * and therefore requires DOM nodes between -start and -end markers to be grouped
	     * together.
	     *
	     * @param {string} name name of the directive to look up.
	     * @returns true if directive was registered as multi-element.
	     */
	    function directiveIsMultiElement(name) {
	      if (hasDirectives.hasOwnProperty(name)) {
	        for (var directive, directives = $injector.get(name + Suffix),
	            i = 0, ii = directives.length; i < ii; i++) {
	          directive = directives[i];
	          if (directive.multiElement) {
	            return true;
	          }
	        }
	      }
	      return false;
	    }

	    /**
	     * When the element is replaced with HTML template then the new attributes
	     * on the template need to be merged with the existing attributes in the DOM.
	     * The desired effect is to have both of the attributes present.
	     *
	     * @param {object} dst destination attributes (original DOM)
	     * @param {object} src source attributes (from the directive template)
	     */
	    function mergeTemplateAttributes(dst, src) {
	      var srcAttr = src.$attr,
	          dstAttr = dst.$attr,
	          $element = dst.$$element;

	      // reapply the old attributes to the new element
	      forEach(dst, function(value, key) {
	        if (key.charAt(0) != '$') {
	          if (src[key] && src[key] !== value) {
	            value += (key === 'style' ? ';' : ' ') + src[key];
	          }
	          dst.$set(key, value, true, srcAttr[key]);
	        }
	      });

	      // copy the new attributes on the old attrs object
	      forEach(src, function(value, key) {
	        if (key == 'class') {
	          safeAddClass($element, value);
	          dst['class'] = (dst['class'] ? dst['class'] + ' ' : '') + value;
	        } else if (key == 'style') {
	          $element.attr('style', $element.attr('style') + ';' + value);
	          dst['style'] = (dst['style'] ? dst['style'] + ';' : '') + value;
	          // `dst` will never contain hasOwnProperty as DOM parser won't let it.
	          // You will get an "InvalidCharacterError: DOM Exception 5" error if you
	          // have an attribute like "has-own-property" or "data-has-own-property", etc.
	        } else if (key.charAt(0) != '$' && !dst.hasOwnProperty(key)) {
	          dst[key] = value;
	          dstAttr[key] = srcAttr[key];
	        }
	      });
	    }


	    function compileTemplateUrl(directives, $compileNode, tAttrs,
	        $rootElement, childTranscludeFn, preLinkFns, postLinkFns, previousCompileContext) {
	      var linkQueue = [],
	          afterTemplateNodeLinkFn,
	          afterTemplateChildLinkFn,
	          beforeTemplateCompileNode = $compileNode[0],
	          origAsyncDirective = directives.shift(),
	          derivedSyncDirective = inherit(origAsyncDirective, {
	            templateUrl: null, transclude: null, replace: null, $$originalDirective: origAsyncDirective
	          }),
	          templateUrl = (isFunction(origAsyncDirective.templateUrl))
	              ? origAsyncDirective.templateUrl($compileNode, tAttrs)
	              : origAsyncDirective.templateUrl,
	          templateNamespace = origAsyncDirective.templateNamespace;

	      $compileNode.empty();

	      $templateRequest($sce.getTrustedResourceUrl(templateUrl))
	        .then(function(content) {
	          var compileNode, tempTemplateAttrs, $template, childBoundTranscludeFn;

	          content = denormalizeTemplate(content);

	          if (origAsyncDirective.replace) {
	            if (jqLiteIsTextNode(content)) {
	              $template = [];
	            } else {
	              $template = removeComments(wrapTemplate(templateNamespace, trim(content)));
	            }
	            compileNode = $template[0];

	            if ($template.length != 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {
	              throw $compileMinErr('tplrt',
	                  "Template for directive '{0}' must have exactly one root element. {1}",
	                  origAsyncDirective.name, templateUrl);
	            }

	            tempTemplateAttrs = {$attr: {}};
	            replaceWith($rootElement, $compileNode, compileNode);
	            var templateDirectives = collectDirectives(compileNode, [], tempTemplateAttrs);

	            if (isObject(origAsyncDirective.scope)) {
	              markDirectivesAsIsolate(templateDirectives);
	            }
	            directives = templateDirectives.concat(directives);
	            mergeTemplateAttributes(tAttrs, tempTemplateAttrs);
	          } else {
	            compileNode = beforeTemplateCompileNode;
	            $compileNode.html(content);
	          }

	          directives.unshift(derivedSyncDirective);

	          afterTemplateNodeLinkFn = applyDirectivesToNode(directives, compileNode, tAttrs,
	              childTranscludeFn, $compileNode, origAsyncDirective, preLinkFns, postLinkFns,
	              previousCompileContext);
	          forEach($rootElement, function(node, i) {
	            if (node == compileNode) {
	              $rootElement[i] = $compileNode[0];
	            }
	          });
	          afterTemplateChildLinkFn = compileNodes($compileNode[0].childNodes, childTranscludeFn);

	          while (linkQueue.length) {
	            var scope = linkQueue.shift(),
	                beforeTemplateLinkNode = linkQueue.shift(),
	                linkRootElement = linkQueue.shift(),
	                boundTranscludeFn = linkQueue.shift(),
	                linkNode = $compileNode[0];

	            if (scope.$$destroyed) continue;

	            if (beforeTemplateLinkNode !== beforeTemplateCompileNode) {
	              var oldClasses = beforeTemplateLinkNode.className;

	              if (!(previousCompileContext.hasElementTranscludeDirective &&
	                  origAsyncDirective.replace)) {
	                // it was cloned therefore we have to clone as well.
	                linkNode = jqLiteClone(compileNode);
	              }
	              replaceWith(linkRootElement, jqLite(beforeTemplateLinkNode), linkNode);

	              // Copy in CSS classes from original node
	              safeAddClass(jqLite(linkNode), oldClasses);
	            }
	            if (afterTemplateNodeLinkFn.transcludeOnThisElement) {
	              childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
	            } else {
	              childBoundTranscludeFn = boundTranscludeFn;
	            }
	            afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, linkNode, $rootElement,
	              childBoundTranscludeFn, afterTemplateNodeLinkFn);
	          }
	          linkQueue = null;
	        });

	      return function delayedNodeLinkFn(ignoreChildLinkFn, scope, node, rootElement, boundTranscludeFn) {
	        var childBoundTranscludeFn = boundTranscludeFn;
	        if (scope.$$destroyed) return;
	        if (linkQueue) {
	          linkQueue.push(scope,
	                         node,
	                         rootElement,
	                         childBoundTranscludeFn);
	        } else {
	          if (afterTemplateNodeLinkFn.transcludeOnThisElement) {
	            childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
	          }
	          afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, node, rootElement, childBoundTranscludeFn,
	                                  afterTemplateNodeLinkFn);
	        }
	      };
	    }


	    /**
	     * Sorting function for bound directives.
	     */
	    function byPriority(a, b) {
	      var diff = b.priority - a.priority;
	      if (diff !== 0) return diff;
	      if (a.name !== b.name) return (a.name < b.name) ? -1 : 1;
	      return a.index - b.index;
	    }


	    function assertNoDuplicate(what, previousDirective, directive, element) {
	      if (previousDirective) {
	        throw $compileMinErr('multidir', 'Multiple directives [{0}, {1}] asking for {2} on: {3}',
	            previousDirective.name, directive.name, what, startingTag(element));
	      }
	    }


	    function addTextInterpolateDirective(directives, text) {
	      var interpolateFn = $interpolate(text, true);
	      if (interpolateFn) {
	        directives.push({
	          priority: 0,
	          compile: function textInterpolateCompileFn(templateNode) {
	            var templateNodeParent = templateNode.parent(),
	                hasCompileParent = !!templateNodeParent.length;

	            // When transcluding a template that has bindings in the root
	            // we don't have a parent and thus need to add the class during linking fn.
	            if (hasCompileParent) compile.$$addBindingClass(templateNodeParent);

	            return function textInterpolateLinkFn(scope, node) {
	              var parent = node.parent();
	              if (!hasCompileParent) compile.$$addBindingClass(parent);
	              compile.$$addBindingInfo(parent, interpolateFn.expressions);
	              scope.$watch(interpolateFn, function interpolateFnWatchAction(value) {
	                node[0].nodeValue = value;
	              });
	            };
	          }
	        });
	      }
	    }


	    function wrapTemplate(type, template) {
	      type = lowercase(type || 'html');
	      switch (type) {
	      case 'svg':
	      case 'math':
	        var wrapper = document.createElement('div');
	        wrapper.innerHTML = '<' + type + '>' + template + '</' + type + '>';
	        return wrapper.childNodes[0].childNodes;
	      default:
	        return template;
	      }
	    }


	    function getTrustedContext(node, attrNormalizedName) {
	      if (attrNormalizedName == "srcdoc") {
	        return $sce.HTML;
	      }
	      var tag = nodeName_(node);
	      // maction[xlink:href] can source SVG.  It's not limited to <maction>.
	      if (attrNormalizedName == "xlinkHref" ||
	          (tag == "form" && attrNormalizedName == "action") ||
	          (tag != "img" && (attrNormalizedName == "src" ||
	                            attrNormalizedName == "ngSrc"))) {
	        return $sce.RESOURCE_URL;
	      }
	    }


	    function addAttrInterpolateDirective(node, directives, value, name, allOrNothing) {
	      var trustedContext = getTrustedContext(node, name);
	      allOrNothing = ALL_OR_NOTHING_ATTRS[name] || allOrNothing;

	      var interpolateFn = $interpolate(value, true, trustedContext, allOrNothing);

	      // no interpolation found -> ignore
	      if (!interpolateFn) return;


	      if (name === "multiple" && nodeName_(node) === "select") {
	        throw $compileMinErr("selmulti",
	            "Binding to the 'multiple' attribute is not supported. Element: {0}",
	            startingTag(node));
	      }

	      directives.push({
	        priority: 100,
	        compile: function() {
	            return {
	              pre: function attrInterpolatePreLinkFn(scope, element, attr) {
	                var $$observers = (attr.$$observers || (attr.$$observers = {}));

	                if (EVENT_HANDLER_ATTR_REGEXP.test(name)) {
	                  throw $compileMinErr('nodomevents',
	                      "Interpolations for HTML DOM event attributes are disallowed.  Please use the " +
	                          "ng- versions (such as ng-click instead of onclick) instead.");
	                }

	                // If the attribute has changed since last $interpolate()ed
	                var newValue = attr[name];
	                if (newValue !== value) {
	                  // we need to interpolate again since the attribute value has been updated
	                  // (e.g. by another directive's compile function)
	                  // ensure unset/empty values make interpolateFn falsy
	                  interpolateFn = newValue && $interpolate(newValue, true, trustedContext, allOrNothing);
	                  value = newValue;
	                }

	                // if attribute was updated so that there is no interpolation going on we don't want to
	                // register any observers
	                if (!interpolateFn) return;

	                // initialize attr object so that it's ready in case we need the value for isolate
	                // scope initialization, otherwise the value would not be available from isolate
	                // directive's linking fn during linking phase
	                attr[name] = interpolateFn(scope);

	                ($$observers[name] || ($$observers[name] = [])).$$inter = true;
	                (attr.$$observers && attr.$$observers[name].$$scope || scope).
	                  $watch(interpolateFn, function interpolateFnWatchAction(newValue, oldValue) {
	                    //special case for class attribute addition + removal
	                    //so that class changes can tap into the animation
	                    //hooks provided by the $animate service. Be sure to
	                    //skip animations when the first digest occurs (when
	                    //both the new and the old values are the same) since
	                    //the CSS classes are the non-interpolated values
	                    if (name === 'class' && newValue != oldValue) {
	                      attr.$updateClass(newValue, oldValue);
	                    } else {
	                      attr.$set(name, newValue);
	                    }
	                  });
	              }
	            };
	          }
	      });
	    }


	    /**
	     * This is a special jqLite.replaceWith, which can replace items which
	     * have no parents, provided that the containing jqLite collection is provided.
	     *
	     * @param {JqLite=} $rootElement The root of the compile tree. Used so that we can replace nodes
	     *                               in the root of the tree.
	     * @param {JqLite} elementsToRemove The jqLite element which we are going to replace. We keep
	     *                                  the shell, but replace its DOM node reference.
	     * @param {Node} newNode The new DOM node.
	     */
	    function replaceWith($rootElement, elementsToRemove, newNode) {
	      var firstElementToRemove = elementsToRemove[0],
	          removeCount = elementsToRemove.length,
	          parent = firstElementToRemove.parentNode,
	          i, ii;

	      if ($rootElement) {
	        for (i = 0, ii = $rootElement.length; i < ii; i++) {
	          if ($rootElement[i] == firstElementToRemove) {
	            $rootElement[i++] = newNode;
	            for (var j = i, j2 = j + removeCount - 1,
	                     jj = $rootElement.length;
	                 j < jj; j++, j2++) {
	              if (j2 < jj) {
	                $rootElement[j] = $rootElement[j2];
	              } else {
	                delete $rootElement[j];
	              }
	            }
	            $rootElement.length -= removeCount - 1;

	            // If the replaced element is also the jQuery .context then replace it
	            // .context is a deprecated jQuery api, so we should set it only when jQuery set it
	            // http://api.jquery.com/context/
	            if ($rootElement.context === firstElementToRemove) {
	              $rootElement.context = newNode;
	            }
	            break;
	          }
	        }
	      }

	      if (parent) {
	        parent.replaceChild(newNode, firstElementToRemove);
	      }

	      // TODO(perf): what's this document fragment for? is it needed? can we at least reuse it?
	      var fragment = document.createDocumentFragment();
	      fragment.appendChild(firstElementToRemove);

	      // Copy over user data (that includes Angular's $scope etc.). Don't copy private
	      // data here because there's no public interface in jQuery to do that and copying over
	      // event listeners (which is the main use of private data) wouldn't work anyway.
	      jqLite(newNode).data(jqLite(firstElementToRemove).data());

	      // Remove data of the replaced element. We cannot just call .remove()
	      // on the element it since that would deallocate scope that is needed
	      // for the new node. Instead, remove the data "manually".
	      if (!jQuery) {
	        delete jqLite.cache[firstElementToRemove[jqLite.expando]];
	      } else {
	        // jQuery 2.x doesn't expose the data storage. Use jQuery.cleanData to clean up after
	        // the replaced element. The cleanData version monkey-patched by Angular would cause
	        // the scope to be trashed and we do need the very same scope to work with the new
	        // element. However, we cannot just cache the non-patched version and use it here as
	        // that would break if another library patches the method after Angular does (one
	        // example is jQuery UI). Instead, set a flag indicating scope destroying should be
	        // skipped this one time.
	        skipDestroyOnNextJQueryCleanData = true;
	        jQuery.cleanData([firstElementToRemove]);
	      }

	      for (var k = 1, kk = elementsToRemove.length; k < kk; k++) {
	        var element = elementsToRemove[k];
	        jqLite(element).remove(); // must do this way to clean up expando
	        fragment.appendChild(element);
	        delete elementsToRemove[k];
	      }

	      elementsToRemove[0] = newNode;
	      elementsToRemove.length = 1;
	    }


	    function cloneAndAnnotateFn(fn, annotation) {
	      return extend(function() { return fn.apply(null, arguments); }, fn, annotation);
	    }


	    function invokeLinkFn(linkFn, scope, $element, attrs, controllers, transcludeFn) {
	      try {
	        linkFn(scope, $element, attrs, controllers, transcludeFn);
	      } catch (e) {
	        $exceptionHandler(e, startingTag($element));
	      }
	    }


	    // Set up $watches for isolate scope and controller bindings. This process
	    // only occurs for isolate scopes and new scopes with controllerAs.
	    function initializeDirectiveBindings(scope, attrs, destination, bindings,
	                                         directive, newScope) {
	      var onNewScopeDestroyed;
	      forEach(bindings, function(definition, scopeName) {
	        var attrName = definition.attrName,
	        optional = definition.optional,
	        mode = definition.mode, // @, =, or &
	        lastValue,
	        parentGet, parentSet, compare;

	        switch (mode) {

	          case '@':
	            attrs.$observe(attrName, function(value) {
	              destination[scopeName] = value;
	            });
	            attrs.$$observers[attrName].$$scope = scope;
	            if (attrs[attrName]) {
	              // If the attribute has been provided then we trigger an interpolation to ensure
	              // the value is there for use in the link fn
	              destination[scopeName] = $interpolate(attrs[attrName])(scope);
	            }
	            break;

	          case '=':
	            if (optional && !attrs[attrName]) {
	              return;
	            }
	            parentGet = $parse(attrs[attrName]);
	            if (parentGet.literal) {
	              compare = equals;
	            } else {
	              compare = function(a, b) { return a === b || (a !== a && b !== b); };
	            }
	            parentSet = parentGet.assign || function() {
	              // reset the change, or we will throw this exception on every $digest
	              lastValue = destination[scopeName] = parentGet(scope);
	              throw $compileMinErr('nonassign',
	                  "Expression '{0}' used with directive '{1}' is non-assignable!",
	                  attrs[attrName], directive.name);
	            };
	            lastValue = destination[scopeName] = parentGet(scope);
	            var parentValueWatch = function parentValueWatch(parentValue) {
	              if (!compare(parentValue, destination[scopeName])) {
	                // we are out of sync and need to copy
	                if (!compare(parentValue, lastValue)) {
	                  // parent changed and it has precedence
	                  destination[scopeName] = parentValue;
	                } else {
	                  // if the parent can be assigned then do so
	                  parentSet(scope, parentValue = destination[scopeName]);
	                }
	              }
	              return lastValue = parentValue;
	            };
	            parentValueWatch.$stateful = true;
	            var unwatch;
	            if (definition.collection) {
	              unwatch = scope.$watchCollection(attrs[attrName], parentValueWatch);
	            } else {
	              unwatch = scope.$watch($parse(attrs[attrName], parentValueWatch), null, parentGet.literal);
	            }
	            onNewScopeDestroyed = (onNewScopeDestroyed || []);
	            onNewScopeDestroyed.push(unwatch);
	            break;

	          case '&':
	            // Don't assign Object.prototype method to scope
	            if (!attrs.hasOwnProperty(attrName) && optional) break;

	            parentGet = $parse(attrs[attrName]);

	            // Don't assign noop to destination if expression is not valid
	            if (parentGet === noop && optional) break;

	            destination[scopeName] = function(locals) {
	              return parentGet(scope, locals);
	            };
	            break;
	        }
	      });
	      var destroyBindings = onNewScopeDestroyed ? function destroyBindings() {
	        for (var i = 0, ii = onNewScopeDestroyed.length; i < ii; ++i) {
	          onNewScopeDestroyed[i]();
	        }
	      } : noop;
	      if (newScope && destroyBindings !== noop) {
	        newScope.$on('$destroy', destroyBindings);
	        return noop;
	      }
	      return destroyBindings;
	    }
	  }];
	}

	var PREFIX_REGEXP = /^((?:x|data)[\:\-_])/i;
	/**
	 * Converts all accepted directives format into proper directive name.
	 * @param name Name to normalize
	 */
	function directiveNormalize(name) {
	  return camelCase(name.replace(PREFIX_REGEXP, ''));
	}

	/**
	 * @ngdoc type
	 * @name $compile.directive.Attributes
	 *
	 * @description
	 * A shared object between directive compile / linking functions which contains normalized DOM
	 * element attributes. The values reflect current binding state `{{ }}`. The normalization is
	 * needed since all of these are treated as equivalent in Angular:
	 *
	 * ```
	 *    <span ng:bind="a" ng-bind="a" data-ng-bind="a" x-ng-bind="a">
	 * ```
	 */

	/**
	 * @ngdoc property
	 * @name $compile.directive.Attributes#$attr
	 *
	 * @description
	 * A map of DOM element attribute names to the normalized name. This is
	 * needed to do reverse lookup from normalized name back to actual name.
	 */


	/**
	 * @ngdoc method
	 * @name $compile.directive.Attributes#$set
	 * @kind function
	 *
	 * @description
	 * Set DOM element attribute value.
	 *
	 *
	 * @param {string} name Normalized element attribute name of the property to modify. The name is
	 *          reverse-translated using the {@link ng.$compile.directive.Attributes#$attr $attr}
	 *          property to the original name.
	 * @param {string} value Value to set the attribute to. The value can be an interpolated string.
	 */



	/**
	 * Closure compiler type information
	 */

	function nodesetLinkingFn(
	  /* angular.Scope */ scope,
	  /* NodeList */ nodeList,
	  /* Element */ rootElement,
	  /* function(Function) */ boundTranscludeFn
	) {}

	function directiveLinkingFn(
	  /* nodesetLinkingFn */ nodesetLinkingFn,
	  /* angular.Scope */ scope,
	  /* Node */ node,
	  /* Element */ rootElement,
	  /* function(Function) */ boundTranscludeFn
	) {}

	function tokenDifference(str1, str2) {
	  var values = '',
	      tokens1 = str1.split(/\s+/),
	      tokens2 = str2.split(/\s+/);

	  outer:
	  for (var i = 0; i < tokens1.length; i++) {
	    var token = tokens1[i];
	    for (var j = 0; j < tokens2.length; j++) {
	      if (token == tokens2[j]) continue outer;
	    }
	    values += (values.length > 0 ? ' ' : '') + token;
	  }
	  return values;
	}

	function removeComments(jqNodes) {
	  jqNodes = jqLite(jqNodes);
	  var i = jqNodes.length;

	  if (i <= 1) {
	    return jqNodes;
	  }

	  while (i--) {
	    var node = jqNodes[i];
	    if (node.nodeType === NODE_TYPE_COMMENT) {
	      splice.call(jqNodes, i, 1);
	    }
	  }
	  return jqNodes;
	}

	var $controllerMinErr = minErr('$controller');


	var CNTRL_REG = /^(\S+)(\s+as\s+(\w+))?$/;
	function identifierForController(controller, ident) {
	  if (ident && isString(ident)) return ident;
	  if (isString(controller)) {
	    var match = CNTRL_REG.exec(controller);
	    if (match) return match[3];
	  }
	}


	/**
	 * @ngdoc provider
	 * @name $controllerProvider
	 * @description
	 * The {@link ng.$controller $controller service} is used by Angular to create new
	 * controllers.
	 *
	 * This provider allows controller registration via the
	 * {@link ng.$controllerProvider#register register} method.
	 */
	function $ControllerProvider() {
	  var controllers = {},
	      globals = false;

	  /**
	   * @ngdoc method
	   * @name $controllerProvider#register
	   * @param {string|Object} name Controller name, or an object map of controllers where the keys are
	   *    the names and the values are the constructors.
	   * @param {Function|Array} constructor Controller constructor fn (optionally decorated with DI
	   *    annotations in the array notation).
	   */
	  this.register = function(name, constructor) {
	    assertNotHasOwnProperty(name, 'controller');
	    if (isObject(name)) {
	      extend(controllers, name);
	    } else {
	      controllers[name] = constructor;
	    }
	  };

	  /**
	   * @ngdoc method
	   * @name $controllerProvider#allowGlobals
	   * @description If called, allows `$controller` to find controller constructors on `window`
	   */
	  this.allowGlobals = function() {
	    globals = true;
	  };


	  this.$get = ['$injector', '$window', function($injector, $window) {

	    /**
	     * @ngdoc service
	     * @name $controller
	     * @requires $injector
	     *
	     * @param {Function|string} constructor If called with a function then it's considered to be the
	     *    controller constructor function. Otherwise it's considered to be a string which is used
	     *    to retrieve the controller constructor using the following steps:
	     *
	     *    * check if a controller with given name is registered via `$controllerProvider`
	     *    * check if evaluating the string on the current scope returns a constructor
	     *    * if $controllerProvider#allowGlobals, check `window[constructor]` on the global
	     *      `window` object (not recommended)
	     *
	     *    The string can use the `controller as property` syntax, where the controller instance is published
	     *    as the specified property on the `scope`; the `scope` must be injected into `locals` param for this
	     *    to work correctly.
	     *
	     * @param {Object} locals Injection locals for Controller.
	     * @return {Object} Instance of given controller.
	     *
	     * @description
	     * `$controller` service is responsible for instantiating controllers.
	     *
	     * It's just a simple call to {@link auto.$injector $injector}, but extracted into
	     * a service, so that one can override this service with [BC version](https://gist.github.com/1649788).
	     */
	    return function(expression, locals, later, ident) {
	      // PRIVATE API:
	      //   param `later` --- indicates that the controller's constructor is invoked at a later time.
	      //                     If true, $controller will allocate the object with the correct
	      //                     prototype chain, but will not invoke the controller until a returned
	      //                     callback is invoked.
	      //   param `ident` --- An optional label which overrides the label parsed from the controller
	      //                     expression, if any.
	      var instance, match, constructor, identifier;
	      later = later === true;
	      if (ident && isString(ident)) {
	        identifier = ident;
	      }

	      if (isString(expression)) {
	        match = expression.match(CNTRL_REG);
	        if (!match) {
	          throw $controllerMinErr('ctrlfmt',
	            "Badly formed controller string '{0}'. " +
	            "Must match `__name__ as __id__` or `__name__`.", expression);
	        }
	        constructor = match[1],
	        identifier = identifier || match[3];
	        expression = controllers.hasOwnProperty(constructor)
	            ? controllers[constructor]
	            : getter(locals.$scope, constructor, true) ||
	                (globals ? getter($window, constructor, true) : undefined);

	        assertArgFn(expression, constructor, true);
	      }

	      if (later) {
	        // Instantiate controller later:
	        // This machinery is used to create an instance of the object before calling the
	        // controller's constructor itself.
	        //
	        // This allows properties to be added to the controller before the constructor is
	        // invoked. Primarily, this is used for isolate scope bindings in $compile.
	        //
	        // This feature is not intended for use by applications, and is thus not documented
	        // publicly.
	        // Object creation: http://jsperf.com/create-constructor/2
	        var controllerPrototype = (isArray(expression) ?
	          expression[expression.length - 1] : expression).prototype;
	        instance = Object.create(controllerPrototype || null);

	        if (identifier) {
	          addIdentifier(locals, identifier, instance, constructor || expression.name);
	        }

	        var instantiate;
	        return instantiate = extend(function() {
	          var result = $injector.invoke(expression, instance, locals, constructor);
	          if (result !== instance && (isObject(result) || isFunction(result))) {
	            instance = result;
	            if (identifier) {
	              // If result changed, re-assign controllerAs value to scope.
	              addIdentifier(locals, identifier, instance, constructor || expression.name);
	            }
	          }
	          return instance;
	        }, {
	          instance: instance,
	          identifier: identifier
	        });
	      }

	      instance = $injector.instantiate(expression, locals, constructor);

	      if (identifier) {
	        addIdentifier(locals, identifier, instance, constructor || expression.name);
	      }

	      return instance;
	    };

	    function addIdentifier(locals, identifier, instance, name) {
	      if (!(locals && isObject(locals.$scope))) {
	        throw minErr('$controller')('noscp',
	          "Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.",
	          name, identifier);
	      }

	      locals.$scope[identifier] = instance;
	    }
	  }];
	}

	/**
	 * @ngdoc service
	 * @name $document
	 * @requires $window
	 *
	 * @description
	 * A {@link angular.element jQuery or jqLite} wrapper for the browser's `window.document` object.
	 *
	 * @example
	   <example module="documentExample">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <p>$document title: <b ng-bind="title"></b></p>
	         <p>window.document title: <b ng-bind="windowTitle"></b></p>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('documentExample', [])
	         .controller('ExampleController', ['$scope', '$document', function($scope, $document) {
	           $scope.title = $document[0].title;
	           $scope.windowTitle = angular.element(window.document)[0].title;
	         }]);
	     </file>
	   </example>
	 */
	function $DocumentProvider() {
	  this.$get = ['$window', function(window) {
	    return jqLite(window.document);
	  }];
	}

	/**
	 * @ngdoc service
	 * @name $exceptionHandler
	 * @requires ng.$log
	 *
	 * @description
	 * Any uncaught exception in angular expressions is delegated to this service.
	 * The default implementation simply delegates to `$log.error` which logs it into
	 * the browser console.
	 *
	 * In unit tests, if `angular-mocks.js` is loaded, this service is overridden by
	 * {@link ngMock.$exceptionHandler mock $exceptionHandler} which aids in testing.
	 *
	 * ## Example:
	 *
	 * ```js
	 *   angular.module('exceptionOverride', []).factory('$exceptionHandler', function() {
	 *     return function(exception, cause) {
	 *       exception.message += ' (caused by "' + cause + '")';
	 *       throw exception;
	 *     };
	 *   });
	 * ```
	 *
	 * This example will override the normal action of `$exceptionHandler`, to make angular
	 * exceptions fail hard when they happen, instead of just logging to the console.
	 *
	 * <hr />
	 * Note, that code executed in event-listeners (even those registered using jqLite's `on`/`bind`
	 * methods) does not delegate exceptions to the {@link ng.$exceptionHandler $exceptionHandler}
	 * (unless executed during a digest).
	 *
	 * If you wish, you can manually delegate exceptions, e.g.
	 * `try { ... } catch(e) { $exceptionHandler(e); }`
	 *
	 * @param {Error} exception Exception associated with the error.
	 * @param {string=} cause optional information about the context in which
	 *       the error was thrown.
	 *
	 */
	function $ExceptionHandlerProvider() {
	  this.$get = ['$log', function($log) {
	    return function(exception, cause) {
	      $log.error.apply($log, arguments);
	    };
	  }];
	}

	var APPLICATION_JSON = 'application/json';
	var CONTENT_TYPE_APPLICATION_JSON = {'Content-Type': APPLICATION_JSON + ';charset=utf-8'};
	var JSON_START = /^\[|^\{(?!\{)/;
	var JSON_ENDS = {
	  '[': /]$/,
	  '{': /}$/
	};
	var JSON_PROTECTION_PREFIX = /^\)\]\}',?\n/;

	function serializeValue(v) {
	  if (isObject(v)) {
	    return isDate(v) ? v.toISOString() : toJson(v);
	  }
	  return v;
	}


	function $HttpParamSerializerProvider() {
	  /**
	   * @ngdoc service
	   * @name $httpParamSerializer
	   * @description
	   *
	   * Default $http params serializer that converts objects to a part of a request URL
	   * according to the following rules:
	   * * `{'foo': 'bar'}` results in `foo=bar`
	   * * `{'foo': Date.now()}` results in `foo=2015-04-01T09%3A50%3A49.262Z` (`toISOString()` and encoded representation of a Date object)
	   * * `{'foo': ['bar', 'baz']}` results in `foo=bar&foo=baz` (repeated key for each array element)
	   * * `{'foo': {'bar':'baz'}}` results in `foo=%7B%22bar%22%3A%22baz%22%7D"` (stringified and encoded representation of an object)
	   * */
	  this.$get = function() {
	    return function ngParamSerializer(params) {
	      if (!params) return '';
	      var parts = [];
	      forEachSorted(params, function(value, key) {
	        if (value === null || isUndefined(value)) return;
	        if (isArray(value)) {
	          forEach(value, function(v, k) {
	            parts.push(encodeUriQuery(key)  + '=' + encodeUriQuery(serializeValue(v)));
	          });
	        } else {
	          parts.push(encodeUriQuery(key) + '=' + encodeUriQuery(serializeValue(value)));
	        }
	      });

	      return parts.join('&');
	    };
	  };
	}

	function $HttpParamSerializerJQLikeProvider() {
	  /**
	   * @ngdoc service
	   * @name $httpParamSerializerJQLike
	   * @description
	   *
	   * Alternative $http params serializer that follows jQuery's [`param()`](http://api.jquery.com/jquery.param/) method logic.
	   * */
	  this.$get = function() {
	    return function jQueryLikeParamSerializer(params) {
	      if (!params) return '';
	      var parts = [];
	      serialize(params, '', true);
	      return parts.join('&');

	      function serialize(toSerialize, prefix, topLevel) {
	        if (toSerialize === null || isUndefined(toSerialize)) return;
	        if (isArray(toSerialize)) {
	          forEach(toSerialize, function(value) {
	            serialize(value, prefix + '[]');
	          });
	        } else if (isObject(toSerialize) && !isDate(toSerialize)) {
	          forEachSorted(toSerialize, function(value, key) {
	            serialize(value, prefix +
	                (topLevel ? '' : '[') +
	                key +
	                (topLevel ? '' : ']'));
	          });
	        } else {
	          parts.push(encodeUriQuery(prefix) + '=' + encodeUriQuery(serializeValue(toSerialize)));
	        }
	      }
	    };
	  };
	}

	function defaultHttpResponseTransform(data, headers) {
	  if (isString(data)) {
	    // Strip json vulnerability protection prefix and trim whitespace
	    var tempData = data.replace(JSON_PROTECTION_PREFIX, '').trim();

	    if (tempData) {
	      var contentType = headers('Content-Type');
	      if ((contentType && (contentType.indexOf(APPLICATION_JSON) === 0)) || isJsonLike(tempData)) {
	        data = fromJson(tempData);
	      }
	    }
	  }

	  return data;
	}

	function isJsonLike(str) {
	    var jsonStart = str.match(JSON_START);
	    return jsonStart && JSON_ENDS[jsonStart[0]].test(str);
	}

	/**
	 * Parse headers into key value object
	 *
	 * @param {string} headers Raw headers as a string
	 * @returns {Object} Parsed headers as key value object
	 */
	function parseHeaders(headers) {
	  var parsed = createMap(), i;

	  function fillInParsed(key, val) {
	    if (key) {
	      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
	    }
	  }

	  if (isString(headers)) {
	    forEach(headers.split('\n'), function(line) {
	      i = line.indexOf(':');
	      fillInParsed(lowercase(trim(line.substr(0, i))), trim(line.substr(i + 1)));
	    });
	  } else if (isObject(headers)) {
	    forEach(headers, function(headerVal, headerKey) {
	      fillInParsed(lowercase(headerKey), trim(headerVal));
	    });
	  }

	  return parsed;
	}


	/**
	 * Returns a function that provides access to parsed headers.
	 *
	 * Headers are lazy parsed when first requested.
	 * @see parseHeaders
	 *
	 * @param {(string|Object)} headers Headers to provide access to.
	 * @returns {function(string=)} Returns a getter function which if called with:
	 *
	 *   - if called with single an argument returns a single header value or null
	 *   - if called with no arguments returns an object containing all headers.
	 */
	function headersGetter(headers) {
	  var headersObj;

	  return function(name) {
	    if (!headersObj) headersObj =  parseHeaders(headers);

	    if (name) {
	      var value = headersObj[lowercase(name)];
	      if (value === void 0) {
	        value = null;
	      }
	      return value;
	    }

	    return headersObj;
	  };
	}


	/**
	 * Chain all given functions
	 *
	 * This function is used for both request and response transforming
	 *
	 * @param {*} data Data to transform.
	 * @param {function(string=)} headers HTTP headers getter fn.
	 * @param {number} status HTTP status code of the response.
	 * @param {(Function|Array.<Function>)} fns Function or an array of functions.
	 * @returns {*} Transformed data.
	 */
	function transformData(data, headers, status, fns) {
	  if (isFunction(fns)) {
	    return fns(data, headers, status);
	  }

	  forEach(fns, function(fn) {
	    data = fn(data, headers, status);
	  });

	  return data;
	}


	function isSuccess(status) {
	  return 200 <= status && status < 300;
	}


	/**
	 * @ngdoc provider
	 * @name $httpProvider
	 * @description
	 * Use `$httpProvider` to change the default behavior of the {@link ng.$http $http} service.
	 * */
	function $HttpProvider() {
	  /**
	   * @ngdoc property
	   * @name $httpProvider#defaults
	   * @description
	   *
	   * Object containing default values for all {@link ng.$http $http} requests.
	   *
	   * - **`defaults.cache`** - {Object} - an object built with {@link ng.$cacheFactory `$cacheFactory`}
	   * that will provide the cache for all requests who set their `cache` property to `true`.
	   * If you set the `default.cache = false` then only requests that specify their own custom
	   * cache object will be cached. See {@link $http#caching $http Caching} for more information.
	   *
	   * - **`defaults.xsrfCookieName`** - {string} - Name of cookie containing the XSRF token.
	   * Defaults value is `'XSRF-TOKEN'`.
	   *
	   * - **`defaults.xsrfHeaderName`** - {string} - Name of HTTP header to populate with the
	   * XSRF token. Defaults value is `'X-XSRF-TOKEN'`.
	   *
	   * - **`defaults.headers`** - {Object} - Default headers for all $http requests.
	   * Refer to {@link ng.$http#setting-http-headers $http} for documentation on
	   * setting default headers.
	   *     - **`defaults.headers.common`**
	   *     - **`defaults.headers.post`**
	   *     - **`defaults.headers.put`**
	   *     - **`defaults.headers.patch`**
	   *
	   * - **`defaults.paramSerializer`** - {string|function(Object<string,string>):string} - A function used to prepare string representation
	   * of request parameters (specified as an object).
	   * If specified as string, it is interpreted as a function registered with the {@link auto.$injector $injector}.
	   * Defaults to {@link ng.$httpParamSerializer $httpParamSerializer}.
	   *
	   **/
	  var defaults = this.defaults = {
	    // transform incoming response data
	    transformResponse: [defaultHttpResponseTransform],

	    // transform outgoing request data
	    transformRequest: [function(d) {
	      return isObject(d) && !isFile(d) && !isBlob(d) && !isFormData(d) ? toJson(d) : d;
	    }],

	    // default headers
	    headers: {
	      common: {
	        'Accept': 'application/json, text/plain, */*'
	      },
	      post:   shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
	      put:    shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
	      patch:  shallowCopy(CONTENT_TYPE_APPLICATION_JSON)
	    },

	    xsrfCookieName: 'XSRF-TOKEN',
	    xsrfHeaderName: 'X-XSRF-TOKEN',

	    paramSerializer: '$httpParamSerializer'
	  };

	  var useApplyAsync = false;
	  /**
	   * @ngdoc method
	   * @name $httpProvider#useApplyAsync
	   * @description
	   *
	   * Configure $http service to combine processing of multiple http responses received at around
	   * the same time via {@link ng.$rootScope.Scope#$applyAsync $rootScope.$applyAsync}. This can result in
	   * significant performance improvement for bigger applications that make many HTTP requests
	   * concurrently (common during application bootstrap).
	   *
	   * Defaults to false. If no value is specified, returns the current configured value.
	   *
	   * @param {boolean=} value If true, when requests are loaded, they will schedule a deferred
	   *    "apply" on the next tick, giving time for subsequent requests in a roughly ~10ms window
	   *    to load and share the same digest cycle.
	   *
	   * @returns {boolean|Object} If a value is specified, returns the $httpProvider for chaining.
	   *    otherwise, returns the current configured value.
	   **/
	  this.useApplyAsync = function(value) {
	    if (isDefined(value)) {
	      useApplyAsync = !!value;
	      return this;
	    }
	    return useApplyAsync;
	  };

	  /**
	   * @ngdoc property
	   * @name $httpProvider#interceptors
	   * @description
	   *
	   * Array containing service factories for all synchronous or asynchronous {@link ng.$http $http}
	   * pre-processing of request or postprocessing of responses.
	   *
	   * These service factories are ordered by request, i.e. they are applied in the same order as the
	   * array, on request, but reverse order, on response.
	   *
	   * {@link ng.$http#interceptors Interceptors detailed info}
	   **/
	  var interceptorFactories = this.interceptors = [];

	  this.$get = ['$httpBackend', '$$cookieReader', '$cacheFactory', '$rootScope', '$q', '$injector',
	      function($httpBackend, $$cookieReader, $cacheFactory, $rootScope, $q, $injector) {

	    var defaultCache = $cacheFactory('$http');

	    /**
	     * Make sure that default param serializer is exposed as a function
	     */
	    defaults.paramSerializer = isString(defaults.paramSerializer) ?
	      $injector.get(defaults.paramSerializer) : defaults.paramSerializer;

	    /**
	     * Interceptors stored in reverse order. Inner interceptors before outer interceptors.
	     * The reversal is needed so that we can build up the interception chain around the
	     * server request.
	     */
	    var reversedInterceptors = [];

	    forEach(interceptorFactories, function(interceptorFactory) {
	      reversedInterceptors.unshift(isString(interceptorFactory)
	          ? $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory));
	    });

	    /**
	     * @ngdoc service
	     * @kind function
	     * @name $http
	     * @requires ng.$httpBackend
	     * @requires $cacheFactory
	     * @requires $rootScope
	     * @requires $q
	     * @requires $injector
	     *
	     * @description
	     * The `$http` service is a core Angular service that facilitates communication with the remote
	     * HTTP servers via the browser's [XMLHttpRequest](https://developer.mozilla.org/en/xmlhttprequest)
	     * object or via [JSONP](http://en.wikipedia.org/wiki/JSONP).
	     *
	     * For unit testing applications that use `$http` service, see
	     * {@link ngMock.$httpBackend $httpBackend mock}.
	     *
	     * For a higher level of abstraction, please check out the {@link ngResource.$resource
	     * $resource} service.
	     *
	     * The $http API is based on the {@link ng.$q deferred/promise APIs} exposed by
	     * the $q service. While for simple usage patterns this doesn't matter much, for advanced usage
	     * it is important to familiarize yourself with these APIs and the guarantees they provide.
	     *
	     *
	     * ## General usage
	     * The `$http` service is a function which takes a single argument — a configuration object —
	     * that is used to generate an HTTP request and returns  a {@link ng.$q promise}
	     * with two $http specific methods: `success` and `error`.
	     *
	     * ```js
	     *   // Simple GET request example :
	     *   $http.get('/someUrl').
	     *     success(function(data, status, headers, config) {
	     *       // this callback will be called asynchronously
	     *       // when the response is available
	     *     }).
	     *     error(function(data, status, headers, config) {
	     *       // called asynchronously if an error occurs
	     *       // or server returns response with an error status.
	     *     });
	     * ```
	     *
	     * ```js
	     *   // Simple POST request example (passing data) :
	     *   $http.post('/someUrl', {msg:'hello word!'}).
	     *     success(function(data, status, headers, config) {
	     *       // this callback will be called asynchronously
	     *       // when the response is available
	     *     }).
	     *     error(function(data, status, headers, config) {
	     *       // called asynchronously if an error occurs
	     *       // or server returns response with an error status.
	     *     });
	     * ```
	     *
	     *
	     * Since the returned value of calling the $http function is a `promise`, you can also use
	     * the `then` method to register callbacks, and these callbacks will receive a single argument –
	     * an object representing the response. See the API signature and type info below for more
	     * details.
	     *
	     * A response status code between 200 and 299 is considered a success status and
	     * will result in the success callback being called. Note that if the response is a redirect,
	     * XMLHttpRequest will transparently follow it, meaning that the error callback will not be
	     * called for such responses.
	     *
	     * ## Writing Unit Tests that use $http
	     * When unit testing (using {@link ngMock ngMock}), it is necessary to call
	     * {@link ngMock.$httpBackend#flush $httpBackend.flush()} to flush each pending
	     * request using trained responses.
	     *
	     * ```
	     * $httpBackend.expectGET(...);
	     * $http.get(...);
	     * $httpBackend.flush();
	     * ```
	     *
	     * ## Shortcut methods
	     *
	     * Shortcut methods are also available. All shortcut methods require passing in the URL, and
	     * request data must be passed in for POST/PUT requests.
	     *
	     * ```js
	     *   $http.get('/someUrl').success(successCallback);
	     *   $http.post('/someUrl', data).success(successCallback);
	     * ```
	     *
	     * Complete list of shortcut methods:
	     *
	     * - {@link ng.$http#get $http.get}
	     * - {@link ng.$http#head $http.head}
	     * - {@link ng.$http#post $http.post}
	     * - {@link ng.$http#put $http.put}
	     * - {@link ng.$http#delete $http.delete}
	     * - {@link ng.$http#jsonp $http.jsonp}
	     * - {@link ng.$http#patch $http.patch}
	     *
	     *
	     * ## Setting HTTP Headers
	     *
	     * The $http service will automatically add certain HTTP headers to all requests. These defaults
	     * can be fully configured by accessing the `$httpProvider.defaults.headers` configuration
	     * object, which currently contains this default configuration:
	     *
	     * - `$httpProvider.defaults.headers.common` (headers that are common for all requests):
	     *   - `Accept: application/json, text/plain, * / *`
	     * - `$httpProvider.defaults.headers.post`: (header defaults for POST requests)
	     *   - `Content-Type: application/json`
	     * - `$httpProvider.defaults.headers.put` (header defaults for PUT requests)
	     *   - `Content-Type: application/json`
	     *
	     * To add or overwrite these defaults, simply add or remove a property from these configuration
	     * objects. To add headers for an HTTP method other than POST or PUT, simply add a new object
	     * with the lowercased HTTP method name as the key, e.g.
	     * `$httpProvider.defaults.headers.get = { 'My-Header' : 'value' }`.
	     *
	     * The defaults can also be set at runtime via the `$http.defaults` object in the same
	     * fashion. For example:
	     *
	     * ```
	     * module.run(function($http) {
	     *   $http.defaults.headers.common.Authorization = 'Basic YmVlcDpib29w'
	     * });
	     * ```
	     *
	     * In addition, you can supply a `headers` property in the config object passed when
	     * calling `$http(config)`, which overrides the defaults without changing them globally.
	     *
	     * To explicitly remove a header automatically added via $httpProvider.defaults.headers on a per request basis,
	     * Use the `headers` property, setting the desired header to `undefined`. For example:
	     *
	     * ```js
	     * var req = {
	     *  method: 'POST',
	     *  url: 'http://example.com',
	     *  headers: {
	     *    'Content-Type': undefined
	     *  },
	     *  data: { test: 'test' }
	     * }
	     *
	     * $http(req).success(function(){...}).error(function(){...});
	     * ```
	     *
	     * ## Transforming Requests and Responses
	     *
	     * Both requests and responses can be transformed using transformation functions: `transformRequest`
	     * and `transformResponse`. These properties can be a single function that returns
	     * the transformed value (`function(data, headersGetter, status)`) or an array of such transformation functions,
	     * which allows you to `push` or `unshift` a new transformation function into the transformation chain.
	     *
	     * ### Default Transformations
	     *
	     * The `$httpProvider` provider and `$http` service expose `defaults.transformRequest` and
	     * `defaults.transformResponse` properties. If a request does not provide its own transformations
	     * then these will be applied.
	     *
	     * You can augment or replace the default transformations by modifying these properties by adding to or
	     * replacing the array.
	     *
	     * Angular provides the following default transformations:
	     *
	     * Request transformations (`$httpProvider.defaults.transformRequest` and `$http.defaults.transformRequest`):
	     *
	     * - If the `data` property of the request configuration object contains an object, serialize it
	     *   into JSON format.
	     *
	     * Response transformations (`$httpProvider.defaults.transformResponse` and `$http.defaults.transformResponse`):
	     *
	     *  - If XSRF prefix is detected, strip it (see Security Considerations section below).
	     *  - If JSON response is detected, deserialize it using a JSON parser.
	     *
	     *
	     * ### Overriding the Default Transformations Per Request
	     *
	     * If you wish override the request/response transformations only for a single request then provide
	     * `transformRequest` and/or `transformResponse` properties on the configuration object passed
	     * into `$http`.
	     *
	     * Note that if you provide these properties on the config object the default transformations will be
	     * overwritten. If you wish to augment the default transformations then you must include them in your
	     * local transformation array.
	     *
	     * The following code demonstrates adding a new response transformation to be run after the default response
	     * transformations have been run.
	     *
	     * ```js
	     * function appendTransform(defaults, transform) {
	     *
	     *   // We can't guarantee that the default transformation is an array
	     *   defaults = angular.isArray(defaults) ? defaults : [defaults];
	     *
	     *   // Append the new transformation to the defaults
	     *   return defaults.concat(transform);
	     * }
	     *
	     * $http({
	     *   url: '...',
	     *   method: 'GET',
	     *   transformResponse: appendTransform($http.defaults.transformResponse, function(value) {
	     *     return doTransform(value);
	     *   })
	     * });
	     * ```
	     *
	     *
	     * ## Caching
	     *
	     * To enable caching, set the request configuration `cache` property to `true` (to use default
	     * cache) or to a custom cache object (built with {@link ng.$cacheFactory `$cacheFactory`}).
	     * When the cache is enabled, `$http` stores the response from the server in the specified
	     * cache. The next time the same request is made, the response is served from the cache without
	     * sending a request to the server.
	     *
	     * Note that even if the response is served from cache, delivery of the data is asynchronous in
	     * the same way that real requests are.
	     *
	     * If there are multiple GET requests for the same URL that should be cached using the same
	     * cache, but the cache is not populated yet, only one request to the server will be made and
	     * the remaining requests will be fulfilled using the response from the first request.
	     *
	     * You can change the default cache to a new object (built with
	     * {@link ng.$cacheFactory `$cacheFactory`}) by updating the
	     * {@link ng.$http#defaults `$http.defaults.cache`} property. All requests who set
	     * their `cache` property to `true` will now use this cache object.
	     *
	     * If you set the default cache to `false` then only requests that specify their own custom
	     * cache object will be cached.
	     *
	     * ## Interceptors
	     *
	     * Before you start creating interceptors, be sure to understand the
	     * {@link ng.$q $q and deferred/promise APIs}.
	     *
	     * For purposes of global error handling, authentication, or any kind of synchronous or
	     * asynchronous pre-processing of request or postprocessing of responses, it is desirable to be
	     * able to intercept requests before they are handed to the server and
	     * responses before they are handed over to the application code that
	     * initiated these requests. The interceptors leverage the {@link ng.$q
	     * promise APIs} to fulfill this need for both synchronous and asynchronous pre-processing.
	     *
	     * The interceptors are service factories that are registered with the `$httpProvider` by
	     * adding them to the `$httpProvider.interceptors` array. The factory is called and
	     * injected with dependencies (if specified) and returns the interceptor.
	     *
	     * There are two kinds of interceptors (and two kinds of rejection interceptors):
	     *
	     *   * `request`: interceptors get called with a http `config` object. The function is free to
	     *     modify the `config` object or create a new one. The function needs to return the `config`
	     *     object directly, or a promise containing the `config` or a new `config` object.
	     *   * `requestError`: interceptor gets called when a previous interceptor threw an error or
	     *     resolved with a rejection.
	     *   * `response`: interceptors get called with http `response` object. The function is free to
	     *     modify the `response` object or create a new one. The function needs to return the `response`
	     *     object directly, or as a promise containing the `response` or a new `response` object.
	     *   * `responseError`: interceptor gets called when a previous interceptor threw an error or
	     *     resolved with a rejection.
	     *
	     *
	     * ```js
	     *   // register the interceptor as a service
	     *   $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {
	     *     return {
	     *       // optional method
	     *       'request': function(config) {
	     *         // do something on success
	     *         return config;
	     *       },
	     *
	     *       // optional method
	     *      'requestError': function(rejection) {
	     *         // do something on error
	     *         if (canRecover(rejection)) {
	     *           return responseOrNewPromise
	     *         }
	     *         return $q.reject(rejection);
	     *       },
	     *
	     *
	     *
	     *       // optional method
	     *       'response': function(response) {
	     *         // do something on success
	     *         return response;
	     *       },
	     *
	     *       // optional method
	     *      'responseError': function(rejection) {
	     *         // do something on error
	     *         if (canRecover(rejection)) {
	     *           return responseOrNewPromise
	     *         }
	     *         return $q.reject(rejection);
	     *       }
	     *     };
	     *   });
	     *
	     *   $httpProvider.interceptors.push('myHttpInterceptor');
	     *
	     *
	     *   // alternatively, register the interceptor via an anonymous factory
	     *   $httpProvider.interceptors.push(function($q, dependency1, dependency2) {
	     *     return {
	     *      'request': function(config) {
	     *          // same as above
	     *       },
	     *
	     *       'response': function(response) {
	     *          // same as above
	     *       }
	     *     };
	     *   });
	     * ```
	     *
	     * ## Security Considerations
	     *
	     * When designing web applications, consider security threats from:
	     *
	     * - [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
	     * - [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)
	     *
	     * Both server and the client must cooperate in order to eliminate these threats. Angular comes
	     * pre-configured with strategies that address these issues, but for this to work backend server
	     * cooperation is required.
	     *
	     * ### JSON Vulnerability Protection
	     *
	     * A [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
	     * allows third party website to turn your JSON resource URL into
	     * [JSONP](http://en.wikipedia.org/wiki/JSONP) request under some conditions. To
	     * counter this your server can prefix all JSON requests with following string `")]}',\n"`.
	     * Angular will automatically strip the prefix before processing it as JSON.
	     *
	     * For example if your server needs to return:
	     * ```js
	     * ['one','two']
	     * ```
	     *
	     * which is vulnerable to attack, your server can return:
	     * ```js
	     * )]}',
	     * ['one','two']
	     * ```
	     *
	     * Angular will strip the prefix, before processing the JSON.
	     *
	     *
	     * ### Cross Site Request Forgery (XSRF) Protection
	     *
	     * [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery) is a technique by which
	     * an unauthorized site can gain your user's private data. Angular provides a mechanism
	     * to counter XSRF. When performing XHR requests, the $http service reads a token from a cookie
	     * (by default, `XSRF-TOKEN`) and sets it as an HTTP header (`X-XSRF-TOKEN`). Since only
	     * JavaScript that runs on your domain could read the cookie, your server can be assured that
	     * the XHR came from JavaScript running on your domain. The header will not be set for
	     * cross-domain requests.
	     *
	     * To take advantage of this, your server needs to set a token in a JavaScript readable session
	     * cookie called `XSRF-TOKEN` on the first HTTP GET request. On subsequent XHR requests the
	     * server can verify that the cookie matches `X-XSRF-TOKEN` HTTP header, and therefore be sure
	     * that only JavaScript running on your domain could have sent the request. The token must be
	     * unique for each user and must be verifiable by the server (to prevent the JavaScript from
	     * making up its own tokens). We recommend that the token is a digest of your site's
	     * authentication cookie with a [salt](https://en.wikipedia.org/wiki/Salt_(cryptography&#41;)
	     * for added security.
	     *
	     * The name of the headers can be specified using the xsrfHeaderName and xsrfCookieName
	     * properties of either $httpProvider.defaults at config-time, $http.defaults at run-time,
	     * or the per-request config object.
	     *
	     *
	     * @param {object} config Object describing the request to be made and how it should be
	     *    processed. The object has following properties:
	     *
	     *    - **method** – `{string}` – HTTP method (e.g. 'GET', 'POST', etc)
	     *    - **url** – `{string}` – Absolute or relative URL of the resource that is being requested.
	     *    - **params** – `{Object.<string|Object>}` – Map of strings or objects which will be turned
	     *      to `?key1=value1&key2=value2` after the url. If the value is not a string, it will be
	     *      JSONified.
	     *    - **data** – `{string|Object}` – Data to be sent as the request message data.
	     *    - **headers** – `{Object}` – Map of strings or functions which return strings representing
	     *      HTTP headers to send to the server. If the return value of a function is null, the
	     *      header will not be sent. Functions accept a config object as an argument.
	     *    - **xsrfHeaderName** – `{string}` – Name of HTTP header to populate with the XSRF token.
	     *    - **xsrfCookieName** – `{string}` – Name of cookie containing the XSRF token.
	     *    - **transformRequest** –
	     *      `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
	     *      transform function or an array of such functions. The transform function takes the http
	     *      request body and headers and returns its transformed (typically serialized) version.
	     *      See {@link ng.$http#overriding-the-default-transformations-per-request
	     *      Overriding the Default Transformations}
	     *    - **transformResponse** –
	     *      `{function(data, headersGetter, status)|Array.<function(data, headersGetter, status)>}` –
	     *      transform function or an array of such functions. The transform function takes the http
	     *      response body, headers and status and returns its transformed (typically deserialized) version.
	     *      See {@link ng.$http#overriding-the-default-transformations-per-request
	     *      Overriding the Default Transformations}
	     *    - **paramSerializer** - {string|function(Object<string,string>):string} - A function used to prepare string representation
	     *      of request parameters (specified as an object).
	     *      Is specified as string, it is interpreted as function registered in with the {$injector}.
	     *    - **cache** – `{boolean|Cache}` – If true, a default $http cache will be used to cache the
	     *      GET request, otherwise if a cache instance built with
	     *      {@link ng.$cacheFactory $cacheFactory}, this cache will be used for
	     *      caching.
	     *    - **timeout** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise}
	     *      that should abort the request when resolved.
	     *    - **withCredentials** - `{boolean}` - whether to set the `withCredentials` flag on the
	     *      XHR object. See [requests with credentials](https://developer.mozilla.org/docs/Web/HTTP/Access_control_CORS#Requests_with_credentials)
	     *      for more information.
	     *    - **responseType** - `{string}` - see
	     *      [requestType](https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest#responseType).
	     *
	     * @returns {HttpPromise} Returns a {@link ng.$q promise} object with the
	     *   standard `then` method and two http specific methods: `success` and `error`. The `then`
	     *   method takes two arguments a success and an error callback which will be called with a
	     *   response object. The `success` and `error` methods take a single argument - a function that
	     *   will be called when the request succeeds or fails respectively. The arguments passed into
	     *   these functions are destructured representation of the response object passed into the
	     *   `then` method. The response object has these properties:
	     *
	     *   - **data** – `{string|Object}` – The response body transformed with the transform
	     *     functions.
	     *   - **status** – `{number}` – HTTP status code of the response.
	     *   - **headers** – `{function([headerName])}` – Header getter function.
	     *   - **config** – `{Object}` – The configuration object that was used to generate the request.
	     *   - **statusText** – `{string}` – HTTP status text of the response.
	     *
	     * @property {Array.<Object>} pendingRequests Array of config objects for currently pending
	     *   requests. This is primarily meant to be used for debugging purposes.
	     *
	     *
	     * @example
	<example module="httpExample">
	<file name="index.html">
	  <div ng-controller="FetchController">
	    <select ng-model="method" aria-label="Request method">
	      <option>GET</option>
	      <option>JSONP</option>
	    </select>
	    <input type="text" ng-model="url" size="80" aria-label="URL" />
	    <button id="fetchbtn" ng-click="fetch()">fetch</button><br>
	    <button id="samplegetbtn" ng-click="updateModel('GET', 'http-hello.html')">Sample GET</button>
	    <button id="samplejsonpbtn"
	      ng-click="updateModel('JSONP',
	                    'https://angularjs.org/greet.php?callback=JSON_CALLBACK&name=Super%20Hero')">
	      Sample JSONP
	    </button>
	    <button id="invalidjsonpbtn"
	      ng-click="updateModel('JSONP', 'https://angularjs.org/doesntexist&callback=JSON_CALLBACK')">
	        Invalid JSONP
	      </button>
	    <pre>http status code: {{status}}</pre>
	    <pre>http response data: {{data}}</pre>
	  </div>
	</file>
	<file name="script.js">
	  angular.module('httpExample', [])
	    .controller('FetchController', ['$scope', '$http', '$templateCache',
	      function($scope, $http, $templateCache) {
	        $scope.method = 'GET';
	        $scope.url = 'http-hello.html';

	        $scope.fetch = function() {
	          $scope.code = null;
	          $scope.response = null;

	          $http({method: $scope.method, url: $scope.url, cache: $templateCache}).
	            success(function(data, status) {
	              $scope.status = status;
	              $scope.data = data;
	            }).
	            error(function(data, status) {
	              $scope.data = data || "Request failed";
	              $scope.status = status;
	          });
	        };

	        $scope.updateModel = function(method, url) {
	          $scope.method = method;
	          $scope.url = url;
	        };
	      }]);
	</file>
	<file name="http-hello.html">
	  Hello, $http!
	</file>
	<file name="protractor.js" type="protractor">
	  var status = element(by.binding('status'));
	  var data = element(by.binding('data'));
	  var fetchBtn = element(by.id('fetchbtn'));
	  var sampleGetBtn = element(by.id('samplegetbtn'));
	  var sampleJsonpBtn = element(by.id('samplejsonpbtn'));
	  var invalidJsonpBtn = element(by.id('invalidjsonpbtn'));

	  it('should make an xhr GET request', function() {
	    sampleGetBtn.click();
	    fetchBtn.click();
	    expect(status.getText()).toMatch('200');
	    expect(data.getText()).toMatch(/Hello, \$http!/);
	  });

	// Commented out due to flakes. See https://github.com/angular/angular.js/issues/9185
	// it('should make a JSONP request to angularjs.org', function() {
	//   sampleJsonpBtn.click();
	//   fetchBtn.click();
	//   expect(status.getText()).toMatch('200');
	//   expect(data.getText()).toMatch(/Super Hero!/);
	// });

	  it('should make JSONP request to invalid URL and invoke the error handler',
	      function() {
	    invalidJsonpBtn.click();
	    fetchBtn.click();
	    expect(status.getText()).toMatch('0');
	    expect(data.getText()).toMatch('Request failed');
	  });
	</file>
	</example>
	     */
	    function $http(requestConfig) {

	      if (!angular.isObject(requestConfig)) {
	        throw minErr('$http')('badreq', 'Http request configuration must be an object.  Received: {0}', requestConfig);
	      }

	      var config = extend({
	        method: 'get',
	        transformRequest: defaults.transformRequest,
	        transformResponse: defaults.transformResponse,
	        paramSerializer: defaults.paramSerializer
	      }, requestConfig);

	      config.headers = mergeHeaders(requestConfig);
	      config.method = uppercase(config.method);
	      config.paramSerializer = isString(config.paramSerializer) ?
	        $injector.get(config.paramSerializer) : config.paramSerializer;

	      var serverRequest = function(config) {
	        var headers = config.headers;
	        var reqData = transformData(config.data, headersGetter(headers), undefined, config.transformRequest);

	        // strip content-type if data is undefined
	        if (isUndefined(reqData)) {
	          forEach(headers, function(value, header) {
	            if (lowercase(header) === 'content-type') {
	                delete headers[header];
	            }
	          });
	        }

	        if (isUndefined(config.withCredentials) && !isUndefined(defaults.withCredentials)) {
	          config.withCredentials = defaults.withCredentials;
	        }

	        // send request
	        return sendReq(config, reqData).then(transformResponse, transformResponse);
	      };

	      var chain = [serverRequest, undefined];
	      var promise = $q.when(config);

	      // apply interceptors
	      forEach(reversedInterceptors, function(interceptor) {
	        if (interceptor.request || interceptor.requestError) {
	          chain.unshift(interceptor.request, interceptor.requestError);
	        }
	        if (interceptor.response || interceptor.responseError) {
	          chain.push(interceptor.response, interceptor.responseError);
	        }
	      });

	      while (chain.length) {
	        var thenFn = chain.shift();
	        var rejectFn = chain.shift();

	        promise = promise.then(thenFn, rejectFn);
	      }

	      promise.success = function(fn) {
	        assertArgFn(fn, 'fn');

	        promise.then(function(response) {
	          fn(response.data, response.status, response.headers, config);
	        });
	        return promise;
	      };

	      promise.error = function(fn) {
	        assertArgFn(fn, 'fn');

	        promise.then(null, function(response) {
	          fn(response.data, response.status, response.headers, config);
	        });
	        return promise;
	      };

	      return promise;

	      function transformResponse(response) {
	        // make a copy since the response must be cacheable
	        var resp = extend({}, response);
	        if (!response.data) {
	          resp.data = response.data;
	        } else {
	          resp.data = transformData(response.data, response.headers, response.status, config.transformResponse);
	        }
	        return (isSuccess(response.status))
	          ? resp
	          : $q.reject(resp);
	      }

	      function executeHeaderFns(headers, config) {
	        var headerContent, processedHeaders = {};

	        forEach(headers, function(headerFn, header) {
	          if (isFunction(headerFn)) {
	            headerContent = headerFn(config);
	            if (headerContent != null) {
	              processedHeaders[header] = headerContent;
	            }
	          } else {
	            processedHeaders[header] = headerFn;
	          }
	        });

	        return processedHeaders;
	      }

	      function mergeHeaders(config) {
	        var defHeaders = defaults.headers,
	            reqHeaders = extend({}, config.headers),
	            defHeaderName, lowercaseDefHeaderName, reqHeaderName;

	        defHeaders = extend({}, defHeaders.common, defHeaders[lowercase(config.method)]);

	        // using for-in instead of forEach to avoid unecessary iteration after header has been found
	        defaultHeadersIteration:
	        for (defHeaderName in defHeaders) {
	          lowercaseDefHeaderName = lowercase(defHeaderName);

	          for (reqHeaderName in reqHeaders) {
	            if (lowercase(reqHeaderName) === lowercaseDefHeaderName) {
	              continue defaultHeadersIteration;
	            }
	          }

	          reqHeaders[defHeaderName] = defHeaders[defHeaderName];
	        }

	        // execute if header value is a function for merged headers
	        return executeHeaderFns(reqHeaders, shallowCopy(config));
	      }
	    }

	    $http.pendingRequests = [];

	    /**
	     * @ngdoc method
	     * @name $http#get
	     *
	     * @description
	     * Shortcut method to perform `GET` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */

	    /**
	     * @ngdoc method
	     * @name $http#delete
	     *
	     * @description
	     * Shortcut method to perform `DELETE` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */

	    /**
	     * @ngdoc method
	     * @name $http#head
	     *
	     * @description
	     * Shortcut method to perform `HEAD` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */

	    /**
	     * @ngdoc method
	     * @name $http#jsonp
	     *
	     * @description
	     * Shortcut method to perform `JSONP` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request.
	     *                     The name of the callback should be the string `JSON_CALLBACK`.
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */
	    createShortMethods('get', 'delete', 'head', 'jsonp');

	    /**
	     * @ngdoc method
	     * @name $http#post
	     *
	     * @description
	     * Shortcut method to perform `POST` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request
	     * @param {*} data Request content
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */

	    /**
	     * @ngdoc method
	     * @name $http#put
	     *
	     * @description
	     * Shortcut method to perform `PUT` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request
	     * @param {*} data Request content
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */

	     /**
	      * @ngdoc method
	      * @name $http#patch
	      *
	      * @description
	      * Shortcut method to perform `PATCH` request.
	      *
	      * @param {string} url Relative or absolute URL specifying the destination of the request
	      * @param {*} data Request content
	      * @param {Object=} config Optional configuration object
	      * @returns {HttpPromise} Future object
	      */
	    createShortMethodsWithData('post', 'put', 'patch');

	        /**
	         * @ngdoc property
	         * @name $http#defaults
	         *
	         * @description
	         * Runtime equivalent of the `$httpProvider.defaults` property. Allows configuration of
	         * default headers, withCredentials as well as request and response transformations.
	         *
	         * See "Setting HTTP Headers" and "Transforming Requests and Responses" sections above.
	         */
	    $http.defaults = defaults;


	    return $http;


	    function createShortMethods(names) {
	      forEach(arguments, function(name) {
	        $http[name] = function(url, config) {
	          return $http(extend({}, config || {}, {
	            method: name,
	            url: url
	          }));
	        };
	      });
	    }


	    function createShortMethodsWithData(name) {
	      forEach(arguments, function(name) {
	        $http[name] = function(url, data, config) {
	          return $http(extend({}, config || {}, {
	            method: name,
	            url: url,
	            data: data
	          }));
	        };
	      });
	    }


	    /**
	     * Makes the request.
	     *
	     * !!! ACCESSES CLOSURE VARS:
	     * $httpBackend, defaults, $log, $rootScope, defaultCache, $http.pendingRequests
	     */
	    function sendReq(config, reqData) {
	      var deferred = $q.defer(),
	          promise = deferred.promise,
	          cache,
	          cachedResp,
	          reqHeaders = config.headers,
	          url = buildUrl(config.url, config.paramSerializer(config.params));

	      $http.pendingRequests.push(config);
	      promise.then(removePendingReq, removePendingReq);


	      if ((config.cache || defaults.cache) && config.cache !== false &&
	          (config.method === 'GET' || config.method === 'JSONP')) {
	        cache = isObject(config.cache) ? config.cache
	              : isObject(defaults.cache) ? defaults.cache
	              : defaultCache;
	      }

	      if (cache) {
	        cachedResp = cache.get(url);
	        if (isDefined(cachedResp)) {
	          if (isPromiseLike(cachedResp)) {
	            // cached request has already been sent, but there is no response yet
	            cachedResp.then(resolvePromiseWithResult, resolvePromiseWithResult);
	          } else {
	            // serving from cache
	            if (isArray(cachedResp)) {
	              resolvePromise(cachedResp[1], cachedResp[0], shallowCopy(cachedResp[2]), cachedResp[3]);
	            } else {
	              resolvePromise(cachedResp, 200, {}, 'OK');
	            }
	          }
	        } else {
	          // put the promise for the non-transformed response into cache as a placeholder
	          cache.put(url, promise);
	        }
	      }


	      // if we won't have the response in cache, set the xsrf headers and
	      // send the request to the backend
	      if (isUndefined(cachedResp)) {
	        var xsrfValue = urlIsSameOrigin(config.url)
	            ? $$cookieReader()[config.xsrfCookieName || defaults.xsrfCookieName]
	            : undefined;
	        if (xsrfValue) {
	          reqHeaders[(config.xsrfHeaderName || defaults.xsrfHeaderName)] = xsrfValue;
	        }

	        $httpBackend(config.method, url, reqData, done, reqHeaders, config.timeout,
	            config.withCredentials, config.responseType);
	      }

	      return promise;


	      /**
	       * Callback registered to $httpBackend():
	       *  - caches the response if desired
	       *  - resolves the raw $http promise
	       *  - calls $apply
	       */
	      function done(status, response, headersString, statusText) {
	        if (cache) {
	          if (isSuccess(status)) {
	            cache.put(url, [status, response, parseHeaders(headersString), statusText]);
	          } else {
	            // remove promise from the cache
	            cache.remove(url);
	          }
	        }

	        function resolveHttpPromise() {
	          resolvePromise(response, status, headersString, statusText);
	        }

	        if (useApplyAsync) {
	          $rootScope.$applyAsync(resolveHttpPromise);
	        } else {
	          resolveHttpPromise();
	          if (!$rootScope.$$phase) $rootScope.$apply();
	        }
	      }


	      /**
	       * Resolves the raw $http promise.
	       */
	      function resolvePromise(response, status, headers, statusText) {
	        // normalize internal statuses to 0
	        status = Math.max(status, 0);

	        (isSuccess(status) ? deferred.resolve : deferred.reject)({
	          data: response,
	          status: status,
	          headers: headersGetter(headers),
	          config: config,
	          statusText: statusText
	        });
	      }

	      function resolvePromiseWithResult(result) {
	        resolvePromise(result.data, result.status, shallowCopy(result.headers()), result.statusText);
	      }

	      function removePendingReq() {
	        var idx = $http.pendingRequests.indexOf(config);
	        if (idx !== -1) $http.pendingRequests.splice(idx, 1);
	      }
	    }


	    function buildUrl(url, serializedParams) {
	      if (serializedParams.length > 0) {
	        url += ((url.indexOf('?') == -1) ? '?' : '&') + serializedParams;
	      }
	      return url;
	    }
	  }];
	}

	function createXhr() {
	    return new window.XMLHttpRequest();
	}

	/**
	 * @ngdoc service
	 * @name $httpBackend
	 * @requires $window
	 * @requires $document
	 *
	 * @description
	 * HTTP backend used by the {@link ng.$http service} that delegates to
	 * XMLHttpRequest object or JSONP and deals with browser incompatibilities.
	 *
	 * You should never need to use this service directly, instead use the higher-level abstractions:
	 * {@link ng.$http $http} or {@link ngResource.$resource $resource}.
	 *
	 * During testing this implementation is swapped with {@link ngMock.$httpBackend mock
	 * $httpBackend} which can be trained with responses.
	 */
	function $HttpBackendProvider() {
	  this.$get = ['$browser', '$window', '$document', function($browser, $window, $document) {
	    return createHttpBackend($browser, createXhr, $browser.defer, $window.angular.callbacks, $document[0]);
	  }];
	}

	function createHttpBackend($browser, createXhr, $browserDefer, callbacks, rawDocument) {
	  // TODO(vojta): fix the signature
	  return function(method, url, post, callback, headers, timeout, withCredentials, responseType) {
	    $browser.$$incOutstandingRequestCount();
	    url = url || $browser.url();

	    if (lowercase(method) == 'jsonp') {
	      var callbackId = '_' + (callbacks.counter++).toString(36);
	      callbacks[callbackId] = function(data) {
	        callbacks[callbackId].data = data;
	        callbacks[callbackId].called = true;
	      };

	      var jsonpDone = jsonpReq(url.replace('JSON_CALLBACK', 'angular.callbacks.' + callbackId),
	          callbackId, function(status, text) {
	        completeRequest(callback, status, callbacks[callbackId].data, "", text);
	        callbacks[callbackId] = noop;
	      });
	    } else {

	      var xhr = createXhr();

	      xhr.open(method, url, true);
	      forEach(headers, function(value, key) {
	        if (isDefined(value)) {
	            xhr.setRequestHeader(key, value);
	        }
	      });

	      xhr.onload = function requestLoaded() {
	        var statusText = xhr.statusText || '';

	        // responseText is the old-school way of retrieving response (supported by IE8 & 9)
	        // response/responseType properties were introduced in XHR Level2 spec (supported by IE10)
	        var response = ('response' in xhr) ? xhr.response : xhr.responseText;

	        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
	        var status = xhr.status === 1223 ? 204 : xhr.status;

	        // fix status code when it is 0 (0 status is undocumented).
	        // Occurs when accessing file resources or on Android 4.1 stock browser
	        // while retrieving files from application cache.
	        if (status === 0) {
	          status = response ? 200 : urlResolve(url).protocol == 'file' ? 404 : 0;
	        }

	        completeRequest(callback,
	            status,
	            response,
	            xhr.getAllResponseHeaders(),
	            statusText);
	      };

	      var requestError = function() {
	        // The response is always empty
	        // See https://xhr.spec.whatwg.org/#request-error-steps and https://fetch.spec.whatwg.org/#concept-network-error
	        completeRequest(callback, -1, null, null, '');
	      };

	      xhr.onerror = requestError;
	      xhr.onabort = requestError;

	      if (withCredentials) {
	        xhr.withCredentials = true;
	      }

	      if (responseType) {
	        try {
	          xhr.responseType = responseType;
	        } catch (e) {
	          // WebKit added support for the json responseType value on 09/03/2013
	          // https://bugs.webkit.org/show_bug.cgi?id=73648. Versions of Safari prior to 7 are
	          // known to throw when setting the value "json" as the response type. Other older
	          // browsers implementing the responseType
	          //
	          // The json response type can be ignored if not supported, because JSON payloads are
	          // parsed on the client-side regardless.
	          if (responseType !== 'json') {
	            throw e;
	          }
	        }
	      }

	      xhr.send(post);
	    }

	    if (timeout > 0) {
	      var timeoutId = $browserDefer(timeoutRequest, timeout);
	    } else if (isPromiseLike(timeout)) {
	      timeout.then(timeoutRequest);
	    }


	    function timeoutRequest() {
	      jsonpDone && jsonpDone();
	      xhr && xhr.abort();
	    }

	    function completeRequest(callback, status, response, headersString, statusText) {
	      // cancel timeout and subsequent timeout promise resolution
	      if (timeoutId !== undefined) {
	        $browserDefer.cancel(timeoutId);
	      }
	      jsonpDone = xhr = null;

	      callback(status, response, headersString, statusText);
	      $browser.$$completeOutstandingRequest(noop);
	    }
	  };

	  function jsonpReq(url, callbackId, done) {
	    // we can't use jQuery/jqLite here because jQuery does crazy stuff with script elements, e.g.:
	    // - fetches local scripts via XHR and evals them
	    // - adds and immediately removes script elements from the document
	    var script = rawDocument.createElement('script'), callback = null;
	    script.type = "text/javascript";
	    script.src = url;
	    script.async = true;

	    callback = function(event) {
	      removeEventListenerFn(script, "load", callback);
	      removeEventListenerFn(script, "error", callback);
	      rawDocument.body.removeChild(script);
	      script = null;
	      var status = -1;
	      var text = "unknown";

	      if (event) {
	        if (event.type === "load" && !callbacks[callbackId].called) {
	          event = { type: "error" };
	        }
	        text = event.type;
	        status = event.type === "error" ? 404 : 200;
	      }

	      if (done) {
	        done(status, text);
	      }
	    };

	    addEventListenerFn(script, "load", callback);
	    addEventListenerFn(script, "error", callback);
	    rawDocument.body.appendChild(script);
	    return callback;
	  }
	}

	var $interpolateMinErr = angular.$interpolateMinErr = minErr('$interpolate');
	$interpolateMinErr.throwNoconcat = function(text) {
	  throw $interpolateMinErr('noconcat',
	      "Error while interpolating: {0}\nStrict Contextual Escaping disallows " +
	      "interpolations that concatenate multiple expressions when a trusted value is " +
	      "required.  See http://docs.angularjs.org/api/ng.$sce", text);
	};

	$interpolateMinErr.interr = function(text, err) {
	  return $interpolateMinErr('interr', "Can't interpolate: {0}\n{1}", text, err.toString());
	};

	/**
	 * @ngdoc provider
	 * @name $interpolateProvider
	 *
	 * @description
	 *
	 * Used for configuring the interpolation markup. Defaults to `{{` and `}}`.
	 *
	 * @example
	<example module="customInterpolationApp">
	<file name="index.html">
	<script>
	  var customInterpolationApp = angular.module('customInterpolationApp', []);

	  customInterpolationApp.config(function($interpolateProvider) {
	    $interpolateProvider.startSymbol('//');
	    $interpolateProvider.endSymbol('//');
	  });


	  customInterpolationApp.controller('DemoController', function() {
	      this.label = "This binding is brought you by // interpolation symbols.";
	  });
	</script>
	<div ng-app="App" ng-controller="DemoController as demo">
	    //demo.label//
	</div>
	</file>
	<file name="protractor.js" type="protractor">
	  it('should interpolate binding with custom symbols', function() {
	    expect(element(by.binding('demo.label')).getText()).toBe('This binding is brought you by // interpolation symbols.');
	  });
	</file>
	</example>
	 */
	function $InterpolateProvider() {
	  var startSymbol = '{{';
	  var endSymbol = '}}';

	  /**
	   * @ngdoc method
	   * @name $interpolateProvider#startSymbol
	   * @description
	   * Symbol to denote start of expression in the interpolated string. Defaults to `{{`.
	   *
	   * @param {string=} value new value to set the starting symbol to.
	   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
	   */
	  this.startSymbol = function(value) {
	    if (value) {
	      startSymbol = value;
	      return this;
	    } else {
	      return startSymbol;
	    }
	  };

	  /**
	   * @ngdoc method
	   * @name $interpolateProvider#endSymbol
	   * @description
	   * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
	   *
	   * @param {string=} value new value to set the ending symbol to.
	   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
	   */
	  this.endSymbol = function(value) {
	    if (value) {
	      endSymbol = value;
	      return this;
	    } else {
	      return endSymbol;
	    }
	  };


	  this.$get = ['$parse', '$exceptionHandler', '$sce', function($parse, $exceptionHandler, $sce) {
	    var startSymbolLength = startSymbol.length,
	        endSymbolLength = endSymbol.length,
	        escapedStartRegexp = new RegExp(startSymbol.replace(/./g, escape), 'g'),
	        escapedEndRegexp = new RegExp(endSymbol.replace(/./g, escape), 'g');

	    function escape(ch) {
	      return '\\\\\\' + ch;
	    }

	    function unescapeText(text) {
	      return text.replace(escapedStartRegexp, startSymbol).
	        replace(escapedEndRegexp, endSymbol);
	    }

	    function stringify(value) {
	      if (value == null) { // null || undefined
	        return '';
	      }
	      switch (typeof value) {
	        case 'string':
	          break;
	        case 'number':
	          value = '' + value;
	          break;
	        default:
	          value = toJson(value);
	      }

	      return value;
	    }

	    /**
	     * @ngdoc service
	     * @name $interpolate
	     * @kind function
	     *
	     * @requires $parse
	     * @requires $sce
	     *
	     * @description
	     *
	     * Compiles a string with markup into an interpolation function. This service is used by the
	     * HTML {@link ng.$compile $compile} service for data binding. See
	     * {@link ng.$interpolateProvider $interpolateProvider} for configuring the
	     * interpolation markup.
	     *
	     *
	     * ```js
	     *   var $interpolate = ...; // injected
	     *   var exp = $interpolate('Hello {{name | uppercase}}!');
	     *   expect(exp({name:'Angular'}).toEqual('Hello ANGULAR!');
	     * ```
	     *
	     * `$interpolate` takes an optional fourth argument, `allOrNothing`. If `allOrNothing` is
	     * `true`, the interpolation function will return `undefined` unless all embedded expressions
	     * evaluate to a value other than `undefined`.
	     *
	     * ```js
	     *   var $interpolate = ...; // injected
	     *   var context = {greeting: 'Hello', name: undefined };
	     *
	     *   // default "forgiving" mode
	     *   var exp = $interpolate('{{greeting}} {{name}}!');
	     *   expect(exp(context)).toEqual('Hello !');
	     *
	     *   // "allOrNothing" mode
	     *   exp = $interpolate('{{greeting}} {{name}}!', false, null, true);
	     *   expect(exp(context)).toBeUndefined();
	     *   context.name = 'Angular';
	     *   expect(exp(context)).toEqual('Hello Angular!');
	     * ```
	     *
	     * `allOrNothing` is useful for interpolating URLs. `ngSrc` and `ngSrcset` use this behavior.
	     *
	     * ####Escaped Interpolation
	     * $interpolate provides a mechanism for escaping interpolation markers. Start and end markers
	     * can be escaped by preceding each of their characters with a REVERSE SOLIDUS U+005C (backslash).
	     * It will be rendered as a regular start/end marker, and will not be interpreted as an expression
	     * or binding.
	     *
	     * This enables web-servers to prevent script injection attacks and defacing attacks, to some
	     * degree, while also enabling code examples to work without relying on the
	     * {@link ng.directive:ngNonBindable ngNonBindable} directive.
	     *
	     * **For security purposes, it is strongly encouraged that web servers escape user-supplied data,
	     * replacing angle brackets (&lt;, &gt;) with &amp;lt; and &amp;gt; respectively, and replacing all
	     * interpolation start/end markers with their escaped counterparts.**
	     *
	     * Escaped interpolation markers are only replaced with the actual interpolation markers in rendered
	     * output when the $interpolate service processes the text. So, for HTML elements interpolated
	     * by {@link ng.$compile $compile}, or otherwise interpolated with the `mustHaveExpression` parameter
	     * set to `true`, the interpolated text must contain an unescaped interpolation expression. As such,
	     * this is typically useful only when user-data is used in rendering a template from the server, or
	     * when otherwise untrusted data is used by a directive.
	     *
	     * <example>
	     *  <file name="index.html">
	     *    <div ng-init="username='A user'">
	     *      <p ng-init="apptitle='Escaping demo'">{{apptitle}}: \{\{ username = "defaced value"; \}\}
	     *        </p>
	     *      <p><strong>{{username}}</strong> attempts to inject code which will deface the
	     *        application, but fails to accomplish their task, because the server has correctly
	     *        escaped the interpolation start/end markers with REVERSE SOLIDUS U+005C (backslash)
	     *        characters.</p>
	     *      <p>Instead, the result of the attempted script injection is visible, and can be removed
	     *        from the database by an administrator.</p>
	     *    </div>
	     *  </file>
	     * </example>
	     *
	     * @param {string} text The text with markup to interpolate.
	     * @param {boolean=} mustHaveExpression if set to true then the interpolation string must have
	     *    embedded expression in order to return an interpolation function. Strings with no
	     *    embedded expression will return null for the interpolation function.
	     * @param {string=} trustedContext when provided, the returned function passes the interpolated
	     *    result through {@link ng.$sce#getTrusted $sce.getTrusted(interpolatedResult,
	     *    trustedContext)} before returning it.  Refer to the {@link ng.$sce $sce} service that
	     *    provides Strict Contextual Escaping for details.
	     * @param {boolean=} allOrNothing if `true`, then the returned function returns undefined
	     *    unless all embedded expressions evaluate to a value other than `undefined`.
	     * @returns {function(context)} an interpolation function which is used to compute the
	     *    interpolated string. The function has these parameters:
	     *
	     * - `context`: evaluation context for all expressions embedded in the interpolated text
	     */
	    function $interpolate(text, mustHaveExpression, trustedContext, allOrNothing) {
	      allOrNothing = !!allOrNothing;
	      var startIndex,
	          endIndex,
	          index = 0,
	          expressions = [],
	          parseFns = [],
	          textLength = text.length,
	          exp,
	          concat = [],
	          expressionPositions = [];

	      while (index < textLength) {
	        if (((startIndex = text.indexOf(startSymbol, index)) != -1) &&
	             ((endIndex = text.indexOf(endSymbol, startIndex + startSymbolLength)) != -1)) {
	          if (index !== startIndex) {
	            concat.push(unescapeText(text.substring(index, startIndex)));
	          }
	          exp = text.substring(startIndex + startSymbolLength, endIndex);
	          expressions.push(exp);
	          parseFns.push($parse(exp, parseStringifyInterceptor));
	          index = endIndex + endSymbolLength;
	          expressionPositions.push(concat.length);
	          concat.push('');
	        } else {
	          // we did not find an interpolation, so we have to add the remainder to the separators array
	          if (index !== textLength) {
	            concat.push(unescapeText(text.substring(index)));
	          }
	          break;
	        }
	      }

	      // Concatenating expressions makes it hard to reason about whether some combination of
	      // concatenated values are unsafe to use and could easily lead to XSS.  By requiring that a
	      // single expression be used for iframe[src], object[src], etc., we ensure that the value
	      // that's used is assigned or constructed by some JS code somewhere that is more testable or
	      // make it obvious that you bound the value to some user controlled value.  This helps reduce
	      // the load when auditing for XSS issues.
	      if (trustedContext && concat.length > 1) {
	          $interpolateMinErr.throwNoconcat(text);
	      }

	      if (!mustHaveExpression || expressions.length) {
	        var compute = function(values) {
	          for (var i = 0, ii = expressions.length; i < ii; i++) {
	            if (allOrNothing && isUndefined(values[i])) return;
	            concat[expressionPositions[i]] = values[i];
	          }
	          return concat.join('');
	        };

	        var getValue = function(value) {
	          return trustedContext ?
	            $sce.getTrusted(trustedContext, value) :
	            $sce.valueOf(value);
	        };

	        return extend(function interpolationFn(context) {
	            var i = 0;
	            var ii = expressions.length;
	            var values = new Array(ii);

	            try {
	              for (; i < ii; i++) {
	                values[i] = parseFns[i](context);
	              }

	              return compute(values);
	            } catch (err) {
	              $exceptionHandler($interpolateMinErr.interr(text, err));
	            }

	          }, {
	          // all of these properties are undocumented for now
	          exp: text, //just for compatibility with regular watchers created via $watch
	          expressions: expressions,
	          $$watchDelegate: function(scope, listener) {
	            var lastValue;
	            return scope.$watchGroup(parseFns, function interpolateFnWatcher(values, oldValues) {
	              var currValue = compute(values);
	              if (isFunction(listener)) {
	                listener.call(this, currValue, values !== oldValues ? lastValue : currValue, scope);
	              }
	              lastValue = currValue;
	            });
	          }
	        });
	      }

	      function parseStringifyInterceptor(value) {
	        try {
	          value = getValue(value);
	          return allOrNothing && !isDefined(value) ? value : stringify(value);
	        } catch (err) {
	          $exceptionHandler($interpolateMinErr.interr(text, err));
	        }
	      }
	    }


	    /**
	     * @ngdoc method
	     * @name $interpolate#startSymbol
	     * @description
	     * Symbol to denote the start of expression in the interpolated string. Defaults to `{{`.
	     *
	     * Use {@link ng.$interpolateProvider#startSymbol `$interpolateProvider.startSymbol`} to change
	     * the symbol.
	     *
	     * @returns {string} start symbol.
	     */
	    $interpolate.startSymbol = function() {
	      return startSymbol;
	    };


	    /**
	     * @ngdoc method
	     * @name $interpolate#endSymbol
	     * @description
	     * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
	     *
	     * Use {@link ng.$interpolateProvider#endSymbol `$interpolateProvider.endSymbol`} to change
	     * the symbol.
	     *
	     * @returns {string} end symbol.
	     */
	    $interpolate.endSymbol = function() {
	      return endSymbol;
	    };

	    return $interpolate;
	  }];
	}

	function $IntervalProvider() {
	  this.$get = ['$rootScope', '$window', '$q', '$$q',
	       function($rootScope,   $window,   $q,   $$q) {
	    var intervals = {};


	     /**
	      * @ngdoc service
	      * @name $interval
	      *
	      * @description
	      * Angular's wrapper for `window.setInterval`. The `fn` function is executed every `delay`
	      * milliseconds.
	      *
	      * The return value of registering an interval function is a promise. This promise will be
	      * notified upon each tick of the interval, and will be resolved after `count` iterations, or
	      * run indefinitely if `count` is not defined. The value of the notification will be the
	      * number of iterations that have run.
	      * To cancel an interval, call `$interval.cancel(promise)`.
	      *
	      * In tests you can use {@link ngMock.$interval#flush `$interval.flush(millis)`} to
	      * move forward by `millis` milliseconds and trigger any functions scheduled to run in that
	      * time.
	      *
	      * <div class="alert alert-warning">
	      * **Note**: Intervals created by this service must be explicitly destroyed when you are finished
	      * with them.  In particular they are not automatically destroyed when a controller's scope or a
	      * directive's element are destroyed.
	      * You should take this into consideration and make sure to always cancel the interval at the
	      * appropriate moment.  See the example below for more details on how and when to do this.
	      * </div>
	      *
	      * @param {function()} fn A function that should be called repeatedly.
	      * @param {number} delay Number of milliseconds between each function call.
	      * @param {number=} [count=0] Number of times to repeat. If not set, or 0, will repeat
	      *   indefinitely.
	      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
	      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
	      * @param {...*=} Pass additional parameters to the executed function.
	      * @returns {promise} A promise which will be notified on each iteration.
	      *
	      * @example
	      * <example module="intervalExample">
	      * <file name="index.html">
	      *   <script>
	      *     angular.module('intervalExample', [])
	      *       .controller('ExampleController', ['$scope', '$interval',
	      *         function($scope, $interval) {
	      *           $scope.format = 'M/d/yy h:mm:ss a';
	      *           $scope.blood_1 = 100;
	      *           $scope.blood_2 = 120;
	      *
	      *           var stop;
	      *           $scope.fight = function() {
	      *             // Don't start a new fight if we are already fighting
	      *             if ( angular.isDefined(stop) ) return;
	      *
	      *             stop = $interval(function() {
	      *               if ($scope.blood_1 > 0 && $scope.blood_2 > 0) {
	      *                 $scope.blood_1 = $scope.blood_1 - 3;
	      *                 $scope.blood_2 = $scope.blood_2 - 4;
	      *               } else {
	      *                 $scope.stopFight();
	      *               }
	      *             }, 100);
	      *           };
	      *
	      *           $scope.stopFight = function() {
	      *             if (angular.isDefined(stop)) {
	      *               $interval.cancel(stop);
	      *               stop = undefined;
	      *             }
	      *           };
	      *
	      *           $scope.resetFight = function() {
	      *             $scope.blood_1 = 100;
	      *             $scope.blood_2 = 120;
	      *           };
	      *
	      *           $scope.$on('$destroy', function() {
	      *             // Make sure that the interval is destroyed too
	      *             $scope.stopFight();
	      *           });
	      *         }])
	      *       // Register the 'myCurrentTime' directive factory method.
	      *       // We inject $interval and dateFilter service since the factory method is DI.
	      *       .directive('myCurrentTime', ['$interval', 'dateFilter',
	      *         function($interval, dateFilter) {
	      *           // return the directive link function. (compile function not needed)
	      *           return function(scope, element, attrs) {
	      *             var format,  // date format
	      *                 stopTime; // so that we can cancel the time updates
	      *
	      *             // used to update the UI
	      *             function updateTime() {
	      *               element.text(dateFilter(new Date(), format));
	      *             }
	      *
	      *             // watch the expression, and update the UI on change.
	      *             scope.$watch(attrs.myCurrentTime, function(value) {
	      *               format = value;
	      *               updateTime();
	      *             });
	      *
	      *             stopTime = $interval(updateTime, 1000);
	      *
	      *             // listen on DOM destroy (removal) event, and cancel the next UI update
	      *             // to prevent updating time after the DOM element was removed.
	      *             element.on('$destroy', function() {
	      *               $interval.cancel(stopTime);
	      *             });
	      *           }
	      *         }]);
	      *   </script>
	      *
	      *   <div>
	      *     <div ng-controller="ExampleController">
	      *       <label>Date format: <input ng-model="format"></label> <hr/>
	      *       Current time is: <span my-current-time="format"></span>
	      *       <hr/>
	      *       Blood 1 : <font color='red'>{{blood_1}}</font>
	      *       Blood 2 : <font color='red'>{{blood_2}}</font>
	      *       <button type="button" data-ng-click="fight()">Fight</button>
	      *       <button type="button" data-ng-click="stopFight()">StopFight</button>
	      *       <button type="button" data-ng-click="resetFight()">resetFight</button>
	      *     </div>
	      *   </div>
	      *
	      * </file>
	      * </example>
	      */
	    function interval(fn, delay, count, invokeApply) {
	      var hasParams = arguments.length > 4,
	          args = hasParams ? sliceArgs(arguments, 4) : [],
	          setInterval = $window.setInterval,
	          clearInterval = $window.clearInterval,
	          iteration = 0,
	          skipApply = (isDefined(invokeApply) && !invokeApply),
	          deferred = (skipApply ? $$q : $q).defer(),
	          promise = deferred.promise;

	      count = isDefined(count) ? count : 0;

	      promise.then(null, null, (!hasParams) ? fn : function() {
	        fn.apply(null, args);
	      });

	      promise.$$intervalId = setInterval(function tick() {
	        deferred.notify(iteration++);

	        if (count > 0 && iteration >= count) {
	          deferred.resolve(iteration);
	          clearInterval(promise.$$intervalId);
	          delete intervals[promise.$$intervalId];
	        }

	        if (!skipApply) $rootScope.$apply();

	      }, delay);

	      intervals[promise.$$intervalId] = deferred;

	      return promise;
	    }


	     /**
	      * @ngdoc method
	      * @name $interval#cancel
	      *
	      * @description
	      * Cancels a task associated with the `promise`.
	      *
	      * @param {promise} promise returned by the `$interval` function.
	      * @returns {boolean} Returns `true` if the task was successfully canceled.
	      */
	    interval.cancel = function(promise) {
	      if (promise && promise.$$intervalId in intervals) {
	        intervals[promise.$$intervalId].reject('canceled');
	        $window.clearInterval(promise.$$intervalId);
	        delete intervals[promise.$$intervalId];
	        return true;
	      }
	      return false;
	    };

	    return interval;
	  }];
	}

	/**
	 * @ngdoc service
	 * @name $locale
	 *
	 * @description
	 * $locale service provides localization rules for various Angular components. As of right now the
	 * only public api is:
	 *
	 * * `id` – `{string}` – locale id formatted as `languageId-countryId` (e.g. `en-us`)
	 */
	function $LocaleProvider() {
	  this.$get = function() {
	    return {
	      id: 'en-us',

	      NUMBER_FORMATS: {
	        DECIMAL_SEP: '.',
	        GROUP_SEP: ',',
	        PATTERNS: [
	          { // Decimal Pattern
	            minInt: 1,
	            minFrac: 0,
	            maxFrac: 3,
	            posPre: '',
	            posSuf: '',
	            negPre: '-',
	            negSuf: '',
	            gSize: 3,
	            lgSize: 3
	          },{ //Currency Pattern
	            minInt: 1,
	            minFrac: 2,
	            maxFrac: 2,
	            posPre: '\u00A4',
	            posSuf: '',
	            negPre: '(\u00A4',
	            negSuf: ')',
	            gSize: 3,
	            lgSize: 3
	          }
	        ],
	        CURRENCY_SYM: '$'
	      },

	      DATETIME_FORMATS: {
	        MONTH:
	            'January,February,March,April,May,June,July,August,September,October,November,December'
	            .split(','),
	        SHORTMONTH:  'Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec'.split(','),
	        DAY: 'Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday'.split(','),
	        SHORTDAY: 'Sun,Mon,Tue,Wed,Thu,Fri,Sat'.split(','),
	        AMPMS: ['AM','PM'],
	        medium: 'MMM d, y h:mm:ss a',
	        'short': 'M/d/yy h:mm a',
	        fullDate: 'EEEE, MMMM d, y',
	        longDate: 'MMMM d, y',
	        mediumDate: 'MMM d, y',
	        shortDate: 'M/d/yy',
	        mediumTime: 'h:mm:ss a',
	        shortTime: 'h:mm a',
	        ERANAMES: [
	          "Before Christ",
	          "Anno Domini"
	        ],
	        ERAS: [
	          "BC",
	          "AD"
	        ]
	      },

	      pluralCat: function(num) {
	        if (num === 1) {
	          return 'one';
	        }
	        return 'other';
	      }
	    };
	  };
	}

	var PATH_MATCH = /^([^\?#]*)(\?([^#]*))?(#(.*))?$/,
	    DEFAULT_PORTS = {'http': 80, 'https': 443, 'ftp': 21};
	var $locationMinErr = minErr('$location');


	/**
	 * Encode path using encodeUriSegment, ignoring forward slashes
	 *
	 * @param {string} path Path to encode
	 * @returns {string}
	 */
	function encodePath(path) {
	  var segments = path.split('/'),
	      i = segments.length;

	  while (i--) {
	    segments[i] = encodeUriSegment(segments[i]);
	  }

	  return segments.join('/');
	}

	function parseAbsoluteUrl(absoluteUrl, locationObj) {
	  var parsedUrl = urlResolve(absoluteUrl);

	  locationObj.$$protocol = parsedUrl.protocol;
	  locationObj.$$host = parsedUrl.hostname;
	  locationObj.$$port = toInt(parsedUrl.port) || DEFAULT_PORTS[parsedUrl.protocol] || null;
	}


	function parseAppUrl(relativeUrl, locationObj) {
	  var prefixed = (relativeUrl.charAt(0) !== '/');
	  if (prefixed) {
	    relativeUrl = '/' + relativeUrl;
	  }
	  var match = urlResolve(relativeUrl);
	  locationObj.$$path = decodeURIComponent(prefixed && match.pathname.charAt(0) === '/' ?
	      match.pathname.substring(1) : match.pathname);
	  locationObj.$$search = parseKeyValue(match.search);
	  locationObj.$$hash = decodeURIComponent(match.hash);

	  // make sure path starts with '/';
	  if (locationObj.$$path && locationObj.$$path.charAt(0) != '/') {
	    locationObj.$$path = '/' + locationObj.$$path;
	  }
	}


	/**
	 *
	 * @param {string} begin
	 * @param {string} whole
	 * @returns {string} returns text from whole after begin or undefined if it does not begin with
	 *                   expected string.
	 */
	function beginsWith(begin, whole) {
	  if (whole.indexOf(begin) === 0) {
	    return whole.substr(begin.length);
	  }
	}


	function stripHash(url) {
	  var index = url.indexOf('#');
	  return index == -1 ? url : url.substr(0, index);
	}

	function trimEmptyHash(url) {
	  return url.replace(/(#.+)|#$/, '$1');
	}


	function stripFile(url) {
	  return url.substr(0, stripHash(url).lastIndexOf('/') + 1);
	}

	/* return the server only (scheme://host:port) */
	function serverBase(url) {
	  return url.substring(0, url.indexOf('/', url.indexOf('//') + 2));
	}


	/**
	 * LocationHtml5Url represents an url
	 * This object is exposed as $location service when HTML5 mode is enabled and supported
	 *
	 * @constructor
	 * @param {string} appBase application base URL
	 * @param {string} basePrefix url path prefix
	 */
	function LocationHtml5Url(appBase, basePrefix) {
	  this.$$html5 = true;
	  basePrefix = basePrefix || '';
	  var appBaseNoFile = stripFile(appBase);
	  parseAbsoluteUrl(appBase, this);


	  /**
	   * Parse given html5 (regular) url string into properties
	   * @param {string} url HTML5 url
	   * @private
	   */
	  this.$$parse = function(url) {
	    var pathUrl = beginsWith(appBaseNoFile, url);
	    if (!isString(pathUrl)) {
	      throw $locationMinErr('ipthprfx', 'Invalid url "{0}", missing path prefix "{1}".', url,
	          appBaseNoFile);
	    }

	    parseAppUrl(pathUrl, this);

	    if (!this.$$path) {
	      this.$$path = '/';
	    }

	    this.$$compose();
	  };

	  /**
	   * Compose url and update `absUrl` property
	   * @private
	   */
	  this.$$compose = function() {
	    var search = toKeyValue(this.$$search),
	        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

	    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
	    this.$$absUrl = appBaseNoFile + this.$$url.substr(1); // first char is always '/'
	  };

	  this.$$parseLinkUrl = function(url, relHref) {
	    if (relHref && relHref[0] === '#') {
	      // special case for links to hash fragments:
	      // keep the old url and only replace the hash fragment
	      this.hash(relHref.slice(1));
	      return true;
	    }
	    var appUrl, prevAppUrl;
	    var rewrittenUrl;

	    if ((appUrl = beginsWith(appBase, url)) !== undefined) {
	      prevAppUrl = appUrl;
	      if ((appUrl = beginsWith(basePrefix, appUrl)) !== undefined) {
	        rewrittenUrl = appBaseNoFile + (beginsWith('/', appUrl) || appUrl);
	      } else {
	        rewrittenUrl = appBase + prevAppUrl;
	      }
	    } else if ((appUrl = beginsWith(appBaseNoFile, url)) !== undefined) {
	      rewrittenUrl = appBaseNoFile + appUrl;
	    } else if (appBaseNoFile == url + '/') {
	      rewrittenUrl = appBaseNoFile;
	    }
	    if (rewrittenUrl) {
	      this.$$parse(rewrittenUrl);
	    }
	    return !!rewrittenUrl;
	  };
	}


	/**
	 * LocationHashbangUrl represents url
	 * This object is exposed as $location service when developer doesn't opt into html5 mode.
	 * It also serves as the base class for html5 mode fallback on legacy browsers.
	 *
	 * @constructor
	 * @param {string} appBase application base URL
	 * @param {string} hashPrefix hashbang prefix
	 */
	function LocationHashbangUrl(appBase, hashPrefix) {
	  var appBaseNoFile = stripFile(appBase);

	  parseAbsoluteUrl(appBase, this);


	  /**
	   * Parse given hashbang url into properties
	   * @param {string} url Hashbang url
	   * @private
	   */
	  this.$$parse = function(url) {
	    var withoutBaseUrl = beginsWith(appBase, url) || beginsWith(appBaseNoFile, url);
	    var withoutHashUrl;

	    if (withoutBaseUrl.charAt(0) === '#') {

	      // The rest of the url starts with a hash so we have
	      // got either a hashbang path or a plain hash fragment
	      withoutHashUrl = beginsWith(hashPrefix, withoutBaseUrl);
	      if (isUndefined(withoutHashUrl)) {
	        // There was no hashbang prefix so we just have a hash fragment
	        withoutHashUrl = withoutBaseUrl;
	      }

	    } else {
	      // There was no hashbang path nor hash fragment:
	      // If we are in HTML5 mode we use what is left as the path;
	      // Otherwise we ignore what is left
	      withoutHashUrl = this.$$html5 ? withoutBaseUrl : '';
	    }

	    parseAppUrl(withoutHashUrl, this);

	    this.$$path = removeWindowsDriveName(this.$$path, withoutHashUrl, appBase);

	    this.$$compose();

	    /*
	     * In Windows, on an anchor node on documents loaded from
	     * the filesystem, the browser will return a pathname
	     * prefixed with the drive name ('/C:/path') when a
	     * pathname without a drive is set:
	     *  * a.setAttribute('href', '/foo')
	     *   * a.pathname === '/C:/foo' //true
	     *
	     * Inside of Angular, we're always using pathnames that
	     * do not include drive names for routing.
	     */
	    function removeWindowsDriveName(path, url, base) {
	      /*
	      Matches paths for file protocol on windows,
	      such as /C:/foo/bar, and captures only /foo/bar.
	      */
	      var windowsFilePathExp = /^\/[A-Z]:(\/.*)/;

	      var firstPathSegmentMatch;

	      //Get the relative path from the input URL.
	      if (url.indexOf(base) === 0) {
	        url = url.replace(base, '');
	      }

	      // The input URL intentionally contains a first path segment that ends with a colon.
	      if (windowsFilePathExp.exec(url)) {
	        return path;
	      }

	      firstPathSegmentMatch = windowsFilePathExp.exec(path);
	      return firstPathSegmentMatch ? firstPathSegmentMatch[1] : path;
	    }
	  };

	  /**
	   * Compose hashbang url and update `absUrl` property
	   * @private
	   */
	  this.$$compose = function() {
	    var search = toKeyValue(this.$$search),
	        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

	    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
	    this.$$absUrl = appBase + (this.$$url ? hashPrefix + this.$$url : '');
	  };

	  this.$$parseLinkUrl = function(url, relHref) {
	    if (stripHash(appBase) == stripHash(url)) {
	      this.$$parse(url);
	      return true;
	    }
	    return false;
	  };
	}


	/**
	 * LocationHashbangUrl represents url
	 * This object is exposed as $location service when html5 history api is enabled but the browser
	 * does not support it.
	 *
	 * @constructor
	 * @param {string} appBase application base URL
	 * @param {string} hashPrefix hashbang prefix
	 */
	function LocationHashbangInHtml5Url(appBase, hashPrefix) {
	  this.$$html5 = true;
	  LocationHashbangUrl.apply(this, arguments);

	  var appBaseNoFile = stripFile(appBase);

	  this.$$parseLinkUrl = function(url, relHref) {
	    if (relHref && relHref[0] === '#') {
	      // special case for links to hash fragments:
	      // keep the old url and only replace the hash fragment
	      this.hash(relHref.slice(1));
	      return true;
	    }

	    var rewrittenUrl;
	    var appUrl;

	    if (appBase == stripHash(url)) {
	      rewrittenUrl = url;
	    } else if ((appUrl = beginsWith(appBaseNoFile, url))) {
	      rewrittenUrl = appBase + hashPrefix + appUrl;
	    } else if (appBaseNoFile === url + '/') {
	      rewrittenUrl = appBaseNoFile;
	    }
	    if (rewrittenUrl) {
	      this.$$parse(rewrittenUrl);
	    }
	    return !!rewrittenUrl;
	  };

	  this.$$compose = function() {
	    var search = toKeyValue(this.$$search),
	        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

	    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
	    // include hashPrefix in $$absUrl when $$url is empty so IE8 & 9 do not reload page because of removal of '#'
	    this.$$absUrl = appBase + hashPrefix + this.$$url;
	  };

	}


	var locationPrototype = {

	  /**
	   * Are we in html5 mode?
	   * @private
	   */
	  $$html5: false,

	  /**
	   * Has any change been replacing?
	   * @private
	   */
	  $$replace: false,

	  /**
	   * @ngdoc method
	   * @name $location#absUrl
	   *
	   * @description
	   * This method is getter only.
	   *
	   * Return full url representation with all segments encoded according to rules specified in
	   * [RFC 3986](http://www.ietf.org/rfc/rfc3986.txt).
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var absUrl = $location.absUrl();
	   * // => "http://example.com/#/some/path?foo=bar&baz=xoxo"
	   * ```
	   *
	   * @return {string} full url
	   */
	  absUrl: locationGetter('$$absUrl'),

	  /**
	   * @ngdoc method
	   * @name $location#url
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Return url (e.g. `/path?a=b#hash`) when called without any parameter.
	   *
	   * Change path, search and hash, when called with parameter and return `$location`.
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var url = $location.url();
	   * // => "/some/path?foo=bar&baz=xoxo"
	   * ```
	   *
	   * @param {string=} url New url without base prefix (e.g. `/path?a=b#hash`)
	   * @return {string} url
	   */
	  url: function(url) {
	    if (isUndefined(url)) {
	      return this.$$url;
	    }

	    var match = PATH_MATCH.exec(url);
	    if (match[1] || url === '') this.path(decodeURIComponent(match[1]));
	    if (match[2] || match[1] || url === '') this.search(match[3] || '');
	    this.hash(match[5] || '');

	    return this;
	  },

	  /**
	   * @ngdoc method
	   * @name $location#protocol
	   *
	   * @description
	   * This method is getter only.
	   *
	   * Return protocol of current url.
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var protocol = $location.protocol();
	   * // => "http"
	   * ```
	   *
	   * @return {string} protocol of current url
	   */
	  protocol: locationGetter('$$protocol'),

	  /**
	   * @ngdoc method
	   * @name $location#host
	   *
	   * @description
	   * This method is getter only.
	   *
	   * Return host of current url.
	   *
	   * Note: compared to the non-angular version `location.host` which returns `hostname:port`, this returns the `hostname` portion only.
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var host = $location.host();
	   * // => "example.com"
	   *
	   * // given url http://user:password@example.com:8080/#/some/path?foo=bar&baz=xoxo
	   * host = $location.host();
	   * // => "example.com"
	   * host = location.host;
	   * // => "example.com:8080"
	   * ```
	   *
	   * @return {string} host of current url.
	   */
	  host: locationGetter('$$host'),

	  /**
	   * @ngdoc method
	   * @name $location#port
	   *
	   * @description
	   * This method is getter only.
	   *
	   * Return port of current url.
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var port = $location.port();
	   * // => 80
	   * ```
	   *
	   * @return {Number} port
	   */
	  port: locationGetter('$$port'),

	  /**
	   * @ngdoc method
	   * @name $location#path
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Return path of current url when called without any parameter.
	   *
	   * Change path when called with parameter and return `$location`.
	   *
	   * Note: Path should always begin with forward slash (/), this method will add the forward slash
	   * if it is missing.
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var path = $location.path();
	   * // => "/some/path"
	   * ```
	   *
	   * @param {(string|number)=} path New path
	   * @return {string} path
	   */
	  path: locationGetterSetter('$$path', function(path) {
	    path = path !== null ? path.toString() : '';
	    return path.charAt(0) == '/' ? path : '/' + path;
	  }),

	  /**
	   * @ngdoc method
	   * @name $location#search
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Return search part (as object) of current url when called without any parameter.
	   *
	   * Change search part when called with parameter and return `$location`.
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var searchObject = $location.search();
	   * // => {foo: 'bar', baz: 'xoxo'}
	   *
	   * // set foo to 'yipee'
	   * $location.search('foo', 'yipee');
	   * // $location.search() => {foo: 'yipee', baz: 'xoxo'}
	   * ```
	   *
	   * @param {string|Object.<string>|Object.<Array.<string>>} search New search params - string or
	   * hash object.
	   *
	   * When called with a single argument the method acts as a setter, setting the `search` component
	   * of `$location` to the specified value.
	   *
	   * If the argument is a hash object containing an array of values, these values will be encoded
	   * as duplicate search parameters in the url.
	   *
	   * @param {(string|Number|Array<string>|boolean)=} paramValue If `search` is a string or number, then `paramValue`
	   * will override only a single search property.
	   *
	   * If `paramValue` is an array, it will override the property of the `search` component of
	   * `$location` specified via the first argument.
	   *
	   * If `paramValue` is `null`, the property specified via the first argument will be deleted.
	   *
	   * If `paramValue` is `true`, the property specified via the first argument will be added with no
	   * value nor trailing equal sign.
	   *
	   * @return {Object} If called with no arguments returns the parsed `search` object. If called with
	   * one or more arguments returns `$location` object itself.
	   */
	  search: function(search, paramValue) {
	    switch (arguments.length) {
	      case 0:
	        return this.$$search;
	      case 1:
	        if (isString(search) || isNumber(search)) {
	          search = search.toString();
	          this.$$search = parseKeyValue(search);
	        } else if (isObject(search)) {
	          search = copy(search, {});
	          // remove object undefined or null properties
	          forEach(search, function(value, key) {
	            if (value == null) delete search[key];
	          });

	          this.$$search = search;
	        } else {
	          throw $locationMinErr('isrcharg',
	              'The first argument of the `$location#search()` call must be a string or an object.');
	        }
	        break;
	      default:
	        if (isUndefined(paramValue) || paramValue === null) {
	          delete this.$$search[search];
	        } else {
	          this.$$search[search] = paramValue;
	        }
	    }

	    this.$$compose();
	    return this;
	  },

	  /**
	   * @ngdoc method
	   * @name $location#hash
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Return hash fragment when called without any parameter.
	   *
	   * Change hash fragment when called with parameter and return `$location`.
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo#hashValue
	   * var hash = $location.hash();
	   * // => "hashValue"
	   * ```
	   *
	   * @param {(string|number)=} hash New hash fragment
	   * @return {string} hash
	   */
	  hash: locationGetterSetter('$$hash', function(hash) {
	    return hash !== null ? hash.toString() : '';
	  }),

	  /**
	   * @ngdoc method
	   * @name $location#replace
	   *
	   * @description
	   * If called, all changes to $location during current `$digest` will be replacing current history
	   * record, instead of adding new one.
	   */
	  replace: function() {
	    this.$$replace = true;
	    return this;
	  }
	};

	forEach([LocationHashbangInHtml5Url, LocationHashbangUrl, LocationHtml5Url], function(Location) {
	  Location.prototype = Object.create(locationPrototype);

	  /**
	   * @ngdoc method
	   * @name $location#state
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Return the history state object when called without any parameter.
	   *
	   * Change the history state object when called with one parameter and return `$location`.
	   * The state object is later passed to `pushState` or `replaceState`.
	   *
	   * NOTE: This method is supported only in HTML5 mode and only in browsers supporting
	   * the HTML5 History API (i.e. methods `pushState` and `replaceState`). If you need to support
	   * older browsers (like IE9 or Android < 4.0), don't use this method.
	   *
	   * @param {object=} state State object for pushState or replaceState
	   * @return {object} state
	   */
	  Location.prototype.state = function(state) {
	    if (!arguments.length) {
	      return this.$$state;
	    }

	    if (Location !== LocationHtml5Url || !this.$$html5) {
	      throw $locationMinErr('nostate', 'History API state support is available only ' +
	        'in HTML5 mode and only in browsers supporting HTML5 History API');
	    }
	    // The user might modify `stateObject` after invoking `$location.state(stateObject)`
	    // but we're changing the $$state reference to $browser.state() during the $digest
	    // so the modification window is narrow.
	    this.$$state = isUndefined(state) ? null : state;

	    return this;
	  };
	});


	function locationGetter(property) {
	  return function() {
	    return this[property];
	  };
	}


	function locationGetterSetter(property, preprocess) {
	  return function(value) {
	    if (isUndefined(value)) {
	      return this[property];
	    }

	    this[property] = preprocess(value);
	    this.$$compose();

	    return this;
	  };
	}


	/**
	 * @ngdoc service
	 * @name $location
	 *
	 * @requires $rootElement
	 *
	 * @description
	 * The $location service parses the URL in the browser address bar (based on the
	 * [window.location](https://developer.mozilla.org/en/window.location)) and makes the URL
	 * available to your application. Changes to the URL in the address bar are reflected into
	 * $location service and changes to $location are reflected into the browser address bar.
	 *
	 * **The $location service:**
	 *
	 * - Exposes the current URL in the browser address bar, so you can
	 *   - Watch and observe the URL.
	 *   - Change the URL.
	 * - Synchronizes the URL with the browser when the user
	 *   - Changes the address bar.
	 *   - Clicks the back or forward button (or clicks a History link).
	 *   - Clicks on a link.
	 * - Represents the URL object as a set of methods (protocol, host, port, path, search, hash).
	 *
	 * For more information see {@link guide/$location Developer Guide: Using $location}
	 */

	/**
	 * @ngdoc provider
	 * @name $locationProvider
	 * @description
	 * Use the `$locationProvider` to configure how the application deep linking paths are stored.
	 */
	function $LocationProvider() {
	  var hashPrefix = '',
	      html5Mode = {
	        enabled: false,
	        requireBase: true,
	        rewriteLinks: true
	      };

	  /**
	   * @ngdoc method
	   * @name $locationProvider#hashPrefix
	   * @description
	   * @param {string=} prefix Prefix for hash part (containing path and search)
	   * @returns {*} current value if used as getter or itself (chaining) if used as setter
	   */
	  this.hashPrefix = function(prefix) {
	    if (isDefined(prefix)) {
	      hashPrefix = prefix;
	      return this;
	    } else {
	      return hashPrefix;
	    }
	  };

	  /**
	   * @ngdoc method
	   * @name $locationProvider#html5Mode
	   * @description
	   * @param {(boolean|Object)=} mode If boolean, sets `html5Mode.enabled` to value.
	   *   If object, sets `enabled`, `requireBase` and `rewriteLinks` to respective values. Supported
	   *   properties:
	   *   - **enabled** – `{boolean}` – (default: false) If true, will rely on `history.pushState` to
	   *     change urls where supported. Will fall back to hash-prefixed paths in browsers that do not
	   *     support `pushState`.
	   *   - **requireBase** - `{boolean}` - (default: `true`) When html5Mode is enabled, specifies
	   *     whether or not a <base> tag is required to be present. If `enabled` and `requireBase` are
	   *     true, and a base tag is not present, an error will be thrown when `$location` is injected.
	   *     See the {@link guide/$location $location guide for more information}
	   *   - **rewriteLinks** - `{boolean}` - (default: `true`) When html5Mode is enabled,
	   *     enables/disables url rewriting for relative links.
	   *
	   * @returns {Object} html5Mode object if used as getter or itself (chaining) if used as setter
	   */
	  this.html5Mode = function(mode) {
	    if (isBoolean(mode)) {
	      html5Mode.enabled = mode;
	      return this;
	    } else if (isObject(mode)) {

	      if (isBoolean(mode.enabled)) {
	        html5Mode.enabled = mode.enabled;
	      }

	      if (isBoolean(mode.requireBase)) {
	        html5Mode.requireBase = mode.requireBase;
	      }

	      if (isBoolean(mode.rewriteLinks)) {
	        html5Mode.rewriteLinks = mode.rewriteLinks;
	      }

	      return this;
	    } else {
	      return html5Mode;
	    }
	  };

	  /**
	   * @ngdoc event
	   * @name $location#$locationChangeStart
	   * @eventType broadcast on root scope
	   * @description
	   * Broadcasted before a URL will change.
	   *
	   * This change can be prevented by calling
	   * `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on} for more
	   * details about event object. Upon successful change
	   * {@link ng.$location#$locationChangeSuccess $locationChangeSuccess} is fired.
	   *
	   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when
	   * the browser supports the HTML5 History API.
	   *
	   * @param {Object} angularEvent Synthetic event object.
	   * @param {string} newUrl New URL
	   * @param {string=} oldUrl URL that was before it was changed.
	   * @param {string=} newState New history state object
	   * @param {string=} oldState History state object that was before it was changed.
	   */

	  /**
	   * @ngdoc event
	   * @name $location#$locationChangeSuccess
	   * @eventType broadcast on root scope
	   * @description
	   * Broadcasted after a URL was changed.
	   *
	   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when
	   * the browser supports the HTML5 History API.
	   *
	   * @param {Object} angularEvent Synthetic event object.
	   * @param {string} newUrl New URL
	   * @param {string=} oldUrl URL that was before it was changed.
	   * @param {string=} newState New history state object
	   * @param {string=} oldState History state object that was before it was changed.
	   */

	  this.$get = ['$rootScope', '$browser', '$sniffer', '$rootElement', '$window',
	      function($rootScope, $browser, $sniffer, $rootElement, $window) {
	    var $location,
	        LocationMode,
	        baseHref = $browser.baseHref(), // if base[href] is undefined, it defaults to ''
	        initialUrl = $browser.url(),
	        appBase;

	    if (html5Mode.enabled) {
	      if (!baseHref && html5Mode.requireBase) {
	        throw $locationMinErr('nobase',
	          "$location in HTML5 mode requires a <base> tag to be present!");
	      }
	      appBase = serverBase(initialUrl) + (baseHref || '/');
	      LocationMode = $sniffer.history ? LocationHtml5Url : LocationHashbangInHtml5Url;
	    } else {
	      appBase = stripHash(initialUrl);
	      LocationMode = LocationHashbangUrl;
	    }
	    $location = new LocationMode(appBase, '#' + hashPrefix);
	    $location.$$parseLinkUrl(initialUrl, initialUrl);

	    $location.$$state = $browser.state();

	    var IGNORE_URI_REGEXP = /^\s*(javascript|mailto):/i;

	    function setBrowserUrlWithFallback(url, replace, state) {
	      var oldUrl = $location.url();
	      var oldState = $location.$$state;
	      try {
	        $browser.url(url, replace, state);

	        // Make sure $location.state() returns referentially identical (not just deeply equal)
	        // state object; this makes possible quick checking if the state changed in the digest
	        // loop. Checking deep equality would be too expensive.
	        $location.$$state = $browser.state();
	      } catch (e) {
	        // Restore old values if pushState fails
	        $location.url(oldUrl);
	        $location.$$state = oldState;

	        throw e;
	      }
	    }

	    $rootElement.on('click', function(event) {
	      // TODO(vojta): rewrite link when opening in new tab/window (in legacy browser)
	      // currently we open nice url link and redirect then

	      if (!html5Mode.rewriteLinks || event.ctrlKey || event.metaKey || event.shiftKey || event.which == 2 || event.button == 2) return;

	      var elm = jqLite(event.target);

	      // traverse the DOM up to find first A tag
	      while (nodeName_(elm[0]) !== 'a') {
	        // ignore rewriting if no A tag (reached root element, or no parent - removed from document)
	        if (elm[0] === $rootElement[0] || !(elm = elm.parent())[0]) return;
	      }

	      var absHref = elm.prop('href');
	      // get the actual href attribute - see
	      // http://msdn.microsoft.com/en-us/library/ie/dd347148(v=vs.85).aspx
	      var relHref = elm.attr('href') || elm.attr('xlink:href');

	      if (isObject(absHref) && absHref.toString() === '[object SVGAnimatedString]') {
	        // SVGAnimatedString.animVal should be identical to SVGAnimatedString.baseVal, unless during
	        // an animation.
	        absHref = urlResolve(absHref.animVal).href;
	      }

	      // Ignore when url is started with javascript: or mailto:
	      if (IGNORE_URI_REGEXP.test(absHref)) return;

	      if (absHref && !elm.attr('target') && !event.isDefaultPrevented()) {
	        if ($location.$$parseLinkUrl(absHref, relHref)) {
	          // We do a preventDefault for all urls that are part of the angular application,
	          // in html5mode and also without, so that we are able to abort navigation without
	          // getting double entries in the location history.
	          event.preventDefault();
	          // update location manually
	          if ($location.absUrl() != $browser.url()) {
	            $rootScope.$apply();
	            // hack to work around FF6 bug 684208 when scenario runner clicks on links
	            $window.angular['ff-684208-preventDefault'] = true;
	          }
	        }
	      }
	    });


	    // rewrite hashbang url <> html5 url
	    if (trimEmptyHash($location.absUrl()) != trimEmptyHash(initialUrl)) {
	      $browser.url($location.absUrl(), true);
	    }

	    var initializing = true;

	    // update $location when $browser url changes
	    $browser.onUrlChange(function(newUrl, newState) {
	      $rootScope.$evalAsync(function() {
	        var oldUrl = $location.absUrl();
	        var oldState = $location.$$state;
	        var defaultPrevented;

	        $location.$$parse(newUrl);
	        $location.$$state = newState;

	        defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl,
	            newState, oldState).defaultPrevented;

	        // if the location was changed by a `$locationChangeStart` handler then stop
	        // processing this location change
	        if ($location.absUrl() !== newUrl) return;

	        if (defaultPrevented) {
	          $location.$$parse(oldUrl);
	          $location.$$state = oldState;
	          setBrowserUrlWithFallback(oldUrl, false, oldState);
	        } else {
	          initializing = false;
	          afterLocationChange(oldUrl, oldState);
	        }
	      });
	      if (!$rootScope.$$phase) $rootScope.$digest();
	    });

	    // update browser
	    $rootScope.$watch(function $locationWatch() {
	      var oldUrl = trimEmptyHash($browser.url());
	      var newUrl = trimEmptyHash($location.absUrl());
	      var oldState = $browser.state();
	      var currentReplace = $location.$$replace;
	      var urlOrStateChanged = oldUrl !== newUrl ||
	        ($location.$$html5 && $sniffer.history && oldState !== $location.$$state);

	      if (initializing || urlOrStateChanged) {
	        initializing = false;

	        $rootScope.$evalAsync(function() {
	          var newUrl = $location.absUrl();
	          var defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl,
	              $location.$$state, oldState).defaultPrevented;

	          // if the location was changed by a `$locationChangeStart` handler then stop
	          // processing this location change
	          if ($location.absUrl() !== newUrl) return;

	          if (defaultPrevented) {
	            $location.$$parse(oldUrl);
	            $location.$$state = oldState;
	          } else {
	            if (urlOrStateChanged) {
	              setBrowserUrlWithFallback(newUrl, currentReplace,
	                                        oldState === $location.$$state ? null : $location.$$state);
	            }
	            afterLocationChange(oldUrl, oldState);
	          }
	        });
	      }

	      $location.$$replace = false;

	      // we don't need to return anything because $evalAsync will make the digest loop dirty when
	      // there is a change
	    });

	    return $location;

	    function afterLocationChange(oldUrl, oldState) {
	      $rootScope.$broadcast('$locationChangeSuccess', $location.absUrl(), oldUrl,
	        $location.$$state, oldState);
	    }
	}];
	}

	/**
	 * @ngdoc service
	 * @name $log
	 * @requires $window
	 *
	 * @description
	 * Simple service for logging. Default implementation safely writes the message
	 * into the browser's console (if present).
	 *
	 * The main purpose of this service is to simplify debugging and troubleshooting.
	 *
	 * The default is to log `debug` messages. You can use
	 * {@link ng.$logProvider ng.$logProvider#debugEnabled} to change this.
	 *
	 * @example
	   <example module="logExample">
	     <file name="script.js">
	       angular.module('logExample', [])
	         .controller('LogController', ['$scope', '$log', function($scope, $log) {
	           $scope.$log = $log;
	           $scope.message = 'Hello World!';
	         }]);
	     </file>
	     <file name="index.html">
	       <div ng-controller="LogController">
	         <p>Reload this page with open console, enter text and hit the log button...</p>
	         <label>Message:
	         <input type="text" ng-model="message" /></label>
	         <button ng-click="$log.log(message)">log</button>
	         <button ng-click="$log.warn(message)">warn</button>
	         <button ng-click="$log.info(message)">info</button>
	         <button ng-click="$log.error(message)">error</button>
	         <button ng-click="$log.debug(message)">debug</button>
	       </div>
	     </file>
	   </example>
	 */

	/**
	 * @ngdoc provider
	 * @name $logProvider
	 * @description
	 * Use the `$logProvider` to configure how the application logs messages
	 */
	function $LogProvider() {
	  var debug = true,
	      self = this;

	  /**
	   * @ngdoc method
	   * @name $logProvider#debugEnabled
	   * @description
	   * @param {boolean=} flag enable or disable debug level messages
	   * @returns {*} current value if used as getter or itself (chaining) if used as setter
	   */
	  this.debugEnabled = function(flag) {
	    if (isDefined(flag)) {
	      debug = flag;
	    return this;
	    } else {
	      return debug;
	    }
	  };

	  this.$get = ['$window', function($window) {
	    return {
	      /**
	       * @ngdoc method
	       * @name $log#log
	       *
	       * @description
	       * Write a log message
	       */
	      log: consoleLog('log'),

	      /**
	       * @ngdoc method
	       * @name $log#info
	       *
	       * @description
	       * Write an information message
	       */
	      info: consoleLog('info'),

	      /**
	       * @ngdoc method
	       * @name $log#warn
	       *
	       * @description
	       * Write a warning message
	       */
	      warn: consoleLog('warn'),

	      /**
	       * @ngdoc method
	       * @name $log#error
	       *
	       * @description
	       * Write an error message
	       */
	      error: consoleLog('error'),

	      /**
	       * @ngdoc method
	       * @name $log#debug
	       *
	       * @description
	       * Write a debug message
	       */
	      debug: (function() {
	        var fn = consoleLog('debug');

	        return function() {
	          if (debug) {
	            fn.apply(self, arguments);
	          }
	        };
	      }())
	    };

	    function formatError(arg) {
	      if (arg instanceof Error) {
	        if (arg.stack) {
	          arg = (arg.message && arg.stack.indexOf(arg.message) === -1)
	              ? 'Error: ' + arg.message + '\n' + arg.stack
	              : arg.stack;
	        } else if (arg.sourceURL) {
	          arg = arg.message + '\n' + arg.sourceURL + ':' + arg.line;
	        }
	      }
	      return arg;
	    }

	    function consoleLog(type) {
	      var console = $window.console || {},
	          logFn = console[type] || console.log || noop,
	          hasApply = false;

	      // Note: reading logFn.apply throws an error in IE11 in IE8 document mode.
	      // The reason behind this is that console.log has type "object" in IE8...
	      try {
	        hasApply = !!logFn.apply;
	      } catch (e) {}

	      if (hasApply) {
	        return function() {
	          var args = [];
	          forEach(arguments, function(arg) {
	            args.push(formatError(arg));
	          });
	          return logFn.apply(console, args);
	        };
	      }

	      // we are IE which either doesn't have window.console => this is noop and we do nothing,
	      // or we are IE where console.log doesn't have apply so we log at least first 2 args
	      return function(arg1, arg2) {
	        logFn(arg1, arg2 == null ? '' : arg2);
	      };
	    }
	  }];
	}

	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 *     Any commits to this file should be reviewed with security in mind.  *
	 *   Changes to this file can potentially create security vulnerabilities. *
	 *          An approval from 2 Core members with history of modifying      *
	 *                         this file is required.                          *
	 *                                                                         *
	 *  Does the change somehow allow for arbitrary javascript to be executed? *
	 *    Or allows for someone to change the prototype of built-in objects?   *
	 *     Or gives undesired access to variables likes document or window?    *
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

	var $parseMinErr = minErr('$parse');

	// Sandboxing Angular Expressions
	// ------------------------------
	// Angular expressions are generally considered safe because these expressions only have direct
	// access to `$scope` and locals. However, one can obtain the ability to execute arbitrary JS code by
	// obtaining a reference to native JS functions such as the Function constructor.
	//
	// As an example, consider the following Angular expression:
	//
	//   {}.toString.constructor('alert("evil JS code")')
	//
	// This sandboxing technique is not perfect and doesn't aim to be. The goal is to prevent exploits
	// against the expression language, but not to prevent exploits that were enabled by exposing
	// sensitive JavaScript or browser APIs on Scope. Exposing such objects on a Scope is never a good
	// practice and therefore we are not even trying to protect against interaction with an object
	// explicitly exposed in this way.
	//
	// In general, it is not possible to access a Window object from an angular expression unless a
	// window or some DOM object that has a reference to window is published onto a Scope.
	// Similarly we prevent invocations of function known to be dangerous, as well as assignments to
	// native objects.
	//
	// See https://docs.angularjs.org/guide/security


	function ensureSafeMemberName(name, fullExpression) {
	  if (name === "__defineGetter__" || name === "__defineSetter__"
	      || name === "__lookupGetter__" || name === "__lookupSetter__"
	      || name === "__proto__") {
	    throw $parseMinErr('isecfld',
	        'Attempting to access a disallowed field in Angular expressions! '
	        + 'Expression: {0}', fullExpression);
	  }
	  return name;
	}

	function ensureSafeObject(obj, fullExpression) {
	  // nifty check if obj is Function that is fast and works across iframes and other contexts
	  if (obj) {
	    if (obj.constructor === obj) {
	      throw $parseMinErr('isecfn',
	          'Referencing Function in Angular expressions is disallowed! Expression: {0}',
	          fullExpression);
	    } else if (// isWindow(obj)
	        obj.window === obj) {
	      throw $parseMinErr('isecwindow',
	          'Referencing the Window in Angular expressions is disallowed! Expression: {0}',
	          fullExpression);
	    } else if (// isElement(obj)
	        obj.children && (obj.nodeName || (obj.prop && obj.attr && obj.find))) {
	      throw $parseMinErr('isecdom',
	          'Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}',
	          fullExpression);
	    } else if (// block Object so that we can't get hold of dangerous Object.* methods
	        obj === Object) {
	      throw $parseMinErr('isecobj',
	          'Referencing Object in Angular expressions is disallowed! Expression: {0}',
	          fullExpression);
	    }
	  }
	  return obj;
	}

	var CALL = Function.prototype.call;
	var APPLY = Function.prototype.apply;
	var BIND = Function.prototype.bind;

	function ensureSafeFunction(obj, fullExpression) {
	  if (obj) {
	    if (obj.constructor === obj) {
	      throw $parseMinErr('isecfn',
	        'Referencing Function in Angular expressions is disallowed! Expression: {0}',
	        fullExpression);
	    } else if (obj === CALL || obj === APPLY || obj === BIND) {
	      throw $parseMinErr('isecff',
	        'Referencing call, apply or bind in Angular expressions is disallowed! Expression: {0}',
	        fullExpression);
	    }
	  }
	}

	var OPERATORS = createMap();
	forEach('+ - * / % === !== == != < > <= >= && || ! = |'.split(' '), function(operator) { OPERATORS[operator] = true; });
	var ESCAPE = {"n":"\n", "f":"\f", "r":"\r", "t":"\t", "v":"\v", "'":"'", '"':'"'};


	/////////////////////////////////////////


	/**
	 * @constructor
	 */
	var Lexer = function(options) {
	  this.options = options;
	};

	Lexer.prototype = {
	  constructor: Lexer,

	  lex: function(text) {
	    this.text = text;
	    this.index = 0;
	    this.tokens = [];

	    while (this.index < this.text.length) {
	      var ch = this.text.charAt(this.index);
	      if (ch === '"' || ch === "'") {
	        this.readString(ch);
	      } else if (this.isNumber(ch) || ch === '.' && this.isNumber(this.peek())) {
	        this.readNumber();
	      } else if (this.isIdent(ch)) {
	        this.readIdent();
	      } else if (this.is(ch, '(){}[].,;:?')) {
	        this.tokens.push({index: this.index, text: ch});
	        this.index++;
	      } else if (this.isWhitespace(ch)) {
	        this.index++;
	      } else {
	        var ch2 = ch + this.peek();
	        var ch3 = ch2 + this.peek(2);
	        var op1 = OPERATORS[ch];
	        var op2 = OPERATORS[ch2];
	        var op3 = OPERATORS[ch3];
	        if (op1 || op2 || op3) {
	          var token = op3 ? ch3 : (op2 ? ch2 : ch);
	          this.tokens.push({index: this.index, text: token, operator: true});
	          this.index += token.length;
	        } else {
	          this.throwError('Unexpected next character ', this.index, this.index + 1);
	        }
	      }
	    }
	    return this.tokens;
	  },

	  is: function(ch, chars) {
	    return chars.indexOf(ch) !== -1;
	  },

	  peek: function(i) {
	    var num = i || 1;
	    return (this.index + num < this.text.length) ? this.text.charAt(this.index + num) : false;
	  },

	  isNumber: function(ch) {
	    return ('0' <= ch && ch <= '9') && typeof ch === "string";
	  },

	  isWhitespace: function(ch) {
	    // IE treats non-breaking space as \u00A0
	    return (ch === ' ' || ch === '\r' || ch === '\t' ||
	            ch === '\n' || ch === '\v' || ch === '\u00A0');
	  },

	  isIdent: function(ch) {
	    return ('a' <= ch && ch <= 'z' ||
	            'A' <= ch && ch <= 'Z' ||
	            '_' === ch || ch === '$');
	  },

	  isExpOperator: function(ch) {
	    return (ch === '-' || ch === '+' || this.isNumber(ch));
	  },

	  throwError: function(error, start, end) {
	    end = end || this.index;
	    var colStr = (isDefined(start)
	            ? 's ' + start +  '-' + this.index + ' [' + this.text.substring(start, end) + ']'
	            : ' ' + end);
	    throw $parseMinErr('lexerr', 'Lexer Error: {0} at column{1} in expression [{2}].',
	        error, colStr, this.text);
	  },

	  readNumber: function() {
	    var number = '';
	    var start = this.index;
	    while (this.index < this.text.length) {
	      var ch = lowercase(this.text.charAt(this.index));
	      if (ch == '.' || this.isNumber(ch)) {
	        number += ch;
	      } else {
	        var peekCh = this.peek();
	        if (ch == 'e' && this.isExpOperator(peekCh)) {
	          number += ch;
	        } else if (this.isExpOperator(ch) &&
	            peekCh && this.isNumber(peekCh) &&
	            number.charAt(number.length - 1) == 'e') {
	          number += ch;
	        } else if (this.isExpOperator(ch) &&
	            (!peekCh || !this.isNumber(peekCh)) &&
	            number.charAt(number.length - 1) == 'e') {
	          this.throwError('Invalid exponent');
	        } else {
	          break;
	        }
	      }
	      this.index++;
	    }
	    this.tokens.push({
	      index: start,
	      text: number,
	      constant: true,
	      value: Number(number)
	    });
	  },

	  readIdent: function() {
	    var start = this.index;
	    while (this.index < this.text.length) {
	      var ch = this.text.charAt(this.index);
	      if (!(this.isIdent(ch) || this.isNumber(ch))) {
	        break;
	      }
	      this.index++;
	    }
	    this.tokens.push({
	      index: start,
	      text: this.text.slice(start, this.index),
	      identifier: true
	    });
	  },

	  readString: function(quote) {
	    var start = this.index;
	    this.index++;
	    var string = '';
	    var rawString = quote;
	    var escape = false;
	    while (this.index < this.text.length) {
	      var ch = this.text.charAt(this.index);
	      rawString += ch;
	      if (escape) {
	        if (ch === 'u') {
	          var hex = this.text.substring(this.index + 1, this.index + 5);
	          if (!hex.match(/[\da-f]{4}/i)) {
	            this.throwError('Invalid unicode escape [\\u' + hex + ']');
	          }
	          this.index += 4;
	          string += String.fromCharCode(parseInt(hex, 16));
	        } else {
	          var rep = ESCAPE[ch];
	          string = string + (rep || ch);
	        }
	        escape = false;
	      } else if (ch === '\\') {
	        escape = true;
	      } else if (ch === quote) {
	        this.index++;
	        this.tokens.push({
	          index: start,
	          text: rawString,
	          constant: true,
	          value: string
	        });
	        return;
	      } else {
	        string += ch;
	      }
	      this.index++;
	    }
	    this.throwError('Unterminated quote', start);
	  }
	};

	var AST = function(lexer, options) {
	  this.lexer = lexer;
	  this.options = options;
	};

	AST.Program = 'Program';
	AST.ExpressionStatement = 'ExpressionStatement';
	AST.AssignmentExpression = 'AssignmentExpression';
	AST.ConditionalExpression = 'ConditionalExpression';
	AST.LogicalExpression = 'LogicalExpression';
	AST.BinaryExpression = 'BinaryExpression';
	AST.UnaryExpression = 'UnaryExpression';
	AST.CallExpression = 'CallExpression';
	AST.MemberExpression = 'MemberExpression';
	AST.Identifier = 'Identifier';
	AST.Literal = 'Literal';
	AST.ArrayExpression = 'ArrayExpression';
	AST.Property = 'Property';
	AST.ObjectExpression = 'ObjectExpression';
	AST.ThisExpression = 'ThisExpression';

	// Internal use only
	AST.NGValueParameter = 'NGValueParameter';

	AST.prototype = {
	  ast: function(text) {
	    this.text = text;
	    this.tokens = this.lexer.lex(text);

	    var value = this.program();

	    if (this.tokens.length !== 0) {
	      this.throwError('is an unexpected token', this.tokens[0]);
	    }

	    return value;
	  },

	  program: function() {
	    var body = [];
	    while (true) {
	      if (this.tokens.length > 0 && !this.peek('}', ')', ';', ']'))
	        body.push(this.expressionStatement());
	      if (!this.expect(';')) {
	        return { type: AST.Program, body: body};
	      }
	    }
	  },

	  expressionStatement: function() {
	    return { type: AST.ExpressionStatement, expression: this.filterChain() };
	  },

	  filterChain: function() {
	    var left = this.expression();
	    var token;
	    while ((token = this.expect('|'))) {
	      left = this.filter(left);
	    }
	    return left;
	  },

	  expression: function() {
	    return this.assignment();
	  },

	  assignment: function() {
	    var result = this.ternary();
	    if (this.expect('=')) {
	      result = { type: AST.AssignmentExpression, left: result, right: this.assignment(), operator: '='};
	    }
	    return result;
	  },

	  ternary: function() {
	    var test = this.logicalOR();
	    var alternate;
	    var consequent;
	    if (this.expect('?')) {
	      alternate = this.expression();
	      if (this.consume(':')) {
	        consequent = this.expression();
	        return { type: AST.ConditionalExpression, test: test, alternate: alternate, consequent: consequent};
	      }
	    }
	    return test;
	  },

	  logicalOR: function() {
	    var left = this.logicalAND();
	    while (this.expect('||')) {
	      left = { type: AST.LogicalExpression, operator: '||', left: left, right: this.logicalAND() };
	    }
	    return left;
	  },

	  logicalAND: function() {
	    var left = this.equality();
	    while (this.expect('&&')) {
	      left = { type: AST.LogicalExpression, operator: '&&', left: left, right: this.equality()};
	    }
	    return left;
	  },

	  equality: function() {
	    var left = this.relational();
	    var token;
	    while ((token = this.expect('==','!=','===','!=='))) {
	      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.relational() };
	    }
	    return left;
	  },

	  relational: function() {
	    var left = this.additive();
	    var token;
	    while ((token = this.expect('<', '>', '<=', '>='))) {
	      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.additive() };
	    }
	    return left;
	  },

	  additive: function() {
	    var left = this.multiplicative();
	    var token;
	    while ((token = this.expect('+','-'))) {
	      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.multiplicative() };
	    }
	    return left;
	  },

	  multiplicative: function() {
	    var left = this.unary();
	    var token;
	    while ((token = this.expect('*','/','%'))) {
	      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.unary() };
	    }
	    return left;
	  },

	  unary: function() {
	    var token;
	    if ((token = this.expect('+', '-', '!'))) {
	      return { type: AST.UnaryExpression, operator: token.text, prefix: true, argument: this.unary() };
	    } else {
	      return this.primary();
	    }
	  },

	  primary: function() {
	    var primary;
	    if (this.expect('(')) {
	      primary = this.filterChain();
	      this.consume(')');
	    } else if (this.expect('[')) {
	      primary = this.arrayDeclaration();
	    } else if (this.expect('{')) {
	      primary = this.object();
	    } else if (this.constants.hasOwnProperty(this.peek().text)) {
	      primary = copy(this.constants[this.consume().text]);
	    } else if (this.peek().identifier) {
	      primary = this.identifier();
	    } else if (this.peek().constant) {
	      primary = this.constant();
	    } else {
	      this.throwError('not a primary expression', this.peek());
	    }

	    var next;
	    while ((next = this.expect('(', '[', '.'))) {
	      if (next.text === '(') {
	        primary = {type: AST.CallExpression, callee: primary, arguments: this.parseArguments() };
	        this.consume(')');
	      } else if (next.text === '[') {
	        primary = { type: AST.MemberExpression, object: primary, property: this.expression(), computed: true };
	        this.consume(']');
	      } else if (next.text === '.') {
	        primary = { type: AST.MemberExpression, object: primary, property: this.identifier(), computed: false };
	      } else {
	        this.throwError('IMPOSSIBLE');
	      }
	    }
	    return primary;
	  },

	  filter: function(baseExpression) {
	    var args = [baseExpression];
	    var result = {type: AST.CallExpression, callee: this.identifier(), arguments: args, filter: true};

	    while (this.expect(':')) {
	      args.push(this.expression());
	    }

	    return result;
	  },

	  parseArguments: function() {
	    var args = [];
	    if (this.peekToken().text !== ')') {
	      do {
	        args.push(this.expression());
	      } while (this.expect(','));
	    }
	    return args;
	  },

	  identifier: function() {
	    var token = this.consume();
	    if (!token.identifier) {
	      this.throwError('is not a valid identifier', token);
	    }
	    return { type: AST.Identifier, name: token.text };
	  },

	  constant: function() {
	    // TODO check that it is a constant
	    return { type: AST.Literal, value: this.consume().value };
	  },

	  arrayDeclaration: function() {
	    var elements = [];
	    if (this.peekToken().text !== ']') {
	      do {
	        if (this.peek(']')) {
	          // Support trailing commas per ES5.1.
	          break;
	        }
	        elements.push(this.expression());
	      } while (this.expect(','));
	    }
	    this.consume(']');

	    return { type: AST.ArrayExpression, elements: elements };
	  },

	  object: function() {
	    var properties = [], property;
	    if (this.peekToken().text !== '}') {
	      do {
	        if (this.peek('}')) {
	          // Support trailing commas per ES5.1.
	          break;
	        }
	        property = {type: AST.Property, kind: 'init'};
	        if (this.peek().constant) {
	          property.key = this.constant();
	        } else if (this.peek().identifier) {
	          property.key = this.identifier();
	        } else {
	          this.throwError("invalid key", this.peek());
	        }
	        this.consume(':');
	        property.value = this.expression();
	        properties.push(property);
	      } while (this.expect(','));
	    }
	    this.consume('}');

	    return {type: AST.ObjectExpression, properties: properties };
	  },

	  throwError: function(msg, token) {
	    throw $parseMinErr('syntax',
	        'Syntax Error: Token \'{0}\' {1} at column {2} of the expression [{3}] starting at [{4}].',
	          token.text, msg, (token.index + 1), this.text, this.text.substring(token.index));
	  },

	  consume: function(e1) {
	    if (this.tokens.length === 0) {
	      throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);
	    }

	    var token = this.expect(e1);
	    if (!token) {
	      this.throwError('is unexpected, expecting [' + e1 + ']', this.peek());
	    }
	    return token;
	  },

	  peekToken: function() {
	    if (this.tokens.length === 0) {
	      throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);
	    }
	    return this.tokens[0];
	  },

	  peek: function(e1, e2, e3, e4) {
	    return this.peekAhead(0, e1, e2, e3, e4);
	  },

	  peekAhead: function(i, e1, e2, e3, e4) {
	    if (this.tokens.length > i) {
	      var token = this.tokens[i];
	      var t = token.text;
	      if (t === e1 || t === e2 || t === e3 || t === e4 ||
	          (!e1 && !e2 && !e3 && !e4)) {
	        return token;
	      }
	    }
	    return false;
	  },

	  expect: function(e1, e2, e3, e4) {
	    var token = this.peek(e1, e2, e3, e4);
	    if (token) {
	      this.tokens.shift();
	      return token;
	    }
	    return false;
	  },


	  /* `undefined` is not a constant, it is an identifier,
	   * but using it as an identifier is not supported
	   */
	  constants: {
	    'true': { type: AST.Literal, value: true },
	    'false': { type: AST.Literal, value: false },
	    'null': { type: AST.Literal, value: null },
	    'undefined': {type: AST.Literal, value: undefined },
	    'this': {type: AST.ThisExpression }
	  }
	};

	function ifDefined(v, d) {
	  return typeof v !== 'undefined' ? v : d;
	}

	function plusFn(l, r) {
	  if (typeof l === 'undefined') return r;
	  if (typeof r === 'undefined') return l;
	  return l + r;
	}

	function isStateless($filter, filterName) {
	  var fn = $filter(filterName);
	  return !fn.$stateful;
	}

	function findConstantAndWatchExpressions(ast, $filter) {
	  var allConstants;
	  var argsToWatch;
	  switch (ast.type) {
	  case AST.Program:
	    allConstants = true;
	    forEach(ast.body, function(expr) {
	      findConstantAndWatchExpressions(expr.expression, $filter);
	      allConstants = allConstants && expr.expression.constant;
	    });
	    ast.constant = allConstants;
	    break;
	  case AST.Literal:
	    ast.constant = true;
	    ast.toWatch = [];
	    break;
	  case AST.UnaryExpression:
	    findConstantAndWatchExpressions(ast.argument, $filter);
	    ast.constant = ast.argument.constant;
	    ast.toWatch = ast.argument.toWatch;
	    break;
	  case AST.BinaryExpression:
	    findConstantAndWatchExpressions(ast.left, $filter);
	    findConstantAndWatchExpressions(ast.right, $filter);
	    ast.constant = ast.left.constant && ast.right.constant;
	    ast.toWatch = ast.left.toWatch.concat(ast.right.toWatch);
	    break;
	  case AST.LogicalExpression:
	    findConstantAndWatchExpressions(ast.left, $filter);
	    findConstantAndWatchExpressions(ast.right, $filter);
	    ast.constant = ast.left.constant && ast.right.constant;
	    ast.toWatch = ast.constant ? [] : [ast];
	    break;
	  case AST.ConditionalExpression:
	    findConstantAndWatchExpressions(ast.test, $filter);
	    findConstantAndWatchExpressions(ast.alternate, $filter);
	    findConstantAndWatchExpressions(ast.consequent, $filter);
	    ast.constant = ast.test.constant && ast.alternate.constant && ast.consequent.constant;
	    ast.toWatch = ast.constant ? [] : [ast];
	    break;
	  case AST.Identifier:
	    ast.constant = false;
	    ast.toWatch = [ast];
	    break;
	  case AST.MemberExpression:
	    findConstantAndWatchExpressions(ast.object, $filter);
	    if (ast.computed) {
	      findConstantAndWatchExpressions(ast.property, $filter);
	    }
	    ast.constant = ast.object.constant && (!ast.computed || ast.property.constant);
	    ast.toWatch = [ast];
	    break;
	  case AST.CallExpression:
	    allConstants = ast.filter ? isStateless($filter, ast.callee.name) : false;
	    argsToWatch = [];
	    forEach(ast.arguments, function(expr) {
	      findConstantAndWatchExpressions(expr, $filter);
	      allConstants = allConstants && expr.constant;
	      if (!expr.constant) {
	        argsToWatch.push.apply(argsToWatch, expr.toWatch);
	      }
	    });
	    ast.constant = allConstants;
	    ast.toWatch = ast.filter && isStateless($filter, ast.callee.name) ? argsToWatch : [ast];
	    break;
	  case AST.AssignmentExpression:
	    findConstantAndWatchExpressions(ast.left, $filter);
	    findConstantAndWatchExpressions(ast.right, $filter);
	    ast.constant = ast.left.constant && ast.right.constant;
	    ast.toWatch = [ast];
	    break;
	  case AST.ArrayExpression:
	    allConstants = true;
	    argsToWatch = [];
	    forEach(ast.elements, function(expr) {
	      findConstantAndWatchExpressions(expr, $filter);
	      allConstants = allConstants && expr.constant;
	      if (!expr.constant) {
	        argsToWatch.push.apply(argsToWatch, expr.toWatch);
	      }
	    });
	    ast.constant = allConstants;
	    ast.toWatch = argsToWatch;
	    break;
	  case AST.ObjectExpression:
	    allConstants = true;
	    argsToWatch = [];
	    forEach(ast.properties, function(property) {
	      findConstantAndWatchExpressions(property.value, $filter);
	      allConstants = allConstants && property.value.constant;
	      if (!property.value.constant) {
	        argsToWatch.push.apply(argsToWatch, property.value.toWatch);
	      }
	    });
	    ast.constant = allConstants;
	    ast.toWatch = argsToWatch;
	    break;
	  case AST.ThisExpression:
	    ast.constant = false;
	    ast.toWatch = [];
	    break;
	  }
	}

	function getInputs(body) {
	  if (body.length != 1) return;
	  var lastExpression = body[0].expression;
	  var candidate = lastExpression.toWatch;
	  if (candidate.length !== 1) return candidate;
	  return candidate[0] !== lastExpression ? candidate : undefined;
	}

	function isAssignable(ast) {
	  return ast.type === AST.Identifier || ast.type === AST.MemberExpression;
	}

	function assignableAST(ast) {
	  if (ast.body.length === 1 && isAssignable(ast.body[0].expression)) {
	    return {type: AST.AssignmentExpression, left: ast.body[0].expression, right: {type: AST.NGValueParameter}, operator: '='};
	  }
	}

	function isLiteral(ast) {
	  return ast.body.length === 0 ||
	      ast.body.length === 1 && (
	      ast.body[0].expression.type === AST.Literal ||
	      ast.body[0].expression.type === AST.ArrayExpression ||
	      ast.body[0].expression.type === AST.ObjectExpression);
	}

	function isConstant(ast) {
	  return ast.constant;
	}

	function ASTCompiler(astBuilder, $filter) {
	  this.astBuilder = astBuilder;
	  this.$filter = $filter;
	}

	ASTCompiler.prototype = {
	  compile: function(expression, expensiveChecks) {
	    var self = this;
	    var ast = this.astBuilder.ast(expression);
	    this.state = {
	      nextId: 0,
	      filters: {},
	      expensiveChecks: expensiveChecks,
	      fn: {vars: [], body: [], own: {}},
	      assign: {vars: [], body: [], own: {}},
	      inputs: []
	    };
	    findConstantAndWatchExpressions(ast, self.$filter);
	    var extra = '';
	    var assignable;
	    this.stage = 'assign';
	    if ((assignable = assignableAST(ast))) {
	      this.state.computing = 'assign';
	      var result = this.nextId();
	      this.recurse(assignable, result);
	      extra = 'fn.assign=' + this.generateFunction('assign', 's,v,l');
	    }
	    var toWatch = getInputs(ast.body);
	    self.stage = 'inputs';
	    forEach(toWatch, function(watch, key) {
	      var fnKey = 'fn' + key;
	      self.state[fnKey] = {vars: [], body: [], own: {}};
	      self.state.computing = fnKey;
	      var intoId = self.nextId();
	      self.recurse(watch, intoId);
	      self.return_(intoId);
	      self.state.inputs.push(fnKey);
	      watch.watchId = key;
	    });
	    this.state.computing = 'fn';
	    this.stage = 'main';
	    this.recurse(ast);
	    var fnString =
	      // The build and minification steps remove the string "use strict" from the code, but this is done using a regex.
	      // This is a workaround for this until we do a better job at only removing the prefix only when we should.
	      '"' + this.USE + ' ' + this.STRICT + '";\n' +
	      this.filterPrefix() +
	      'var fn=' + this.generateFunction('fn', 's,l,a,i') +
	      extra +
	      this.watchFns() +
	      'return fn;';

	    /* jshint -W054 */
	    var fn = (new Function('$filter',
	        'ensureSafeMemberName',
	        'ensureSafeObject',
	        'ensureSafeFunction',
	        'ifDefined',
	        'plus',
	        'text',
	        fnString))(
	          this.$filter,
	          ensureSafeMemberName,
	          ensureSafeObject,
	          ensureSafeFunction,
	          ifDefined,
	          plusFn,
	          expression);
	    /* jshint +W054 */
	    this.state = this.stage = undefined;
	    fn.literal = isLiteral(ast);
	    fn.constant = isConstant(ast);
	    return fn;
	  },

	  USE: 'use',

	  STRICT: 'strict',

	  watchFns: function() {
	    var result = [];
	    var fns = this.state.inputs;
	    var self = this;
	    forEach(fns, function(name) {
	      result.push('var ' + name + '=' + self.generateFunction(name, 's'));
	    });
	    if (fns.length) {
	      result.push('fn.inputs=[' + fns.join(',') + '];');
	    }
	    return result.join('');
	  },

	  generateFunction: function(name, params) {
	    return 'function(' + params + '){' +
	        this.varsPrefix(name) +
	        this.body(name) +
	        '};';
	  },

	  filterPrefix: function() {
	    var parts = [];
	    var self = this;
	    forEach(this.state.filters, function(id, filter) {
	      parts.push(id + '=$filter(' + self.escape(filter) + ')');
	    });
	    if (parts.length) return 'var ' + parts.join(',') + ';';
	    return '';
	  },

	  varsPrefix: function(section) {
	    return this.state[section].vars.length ? 'var ' + this.state[section].vars.join(',') + ';' : '';
	  },

	  body: function(section) {
	    return this.state[section].body.join('');
	  },

	  recurse: function(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {
	    var left, right, self = this, args, expression;
	    recursionFn = recursionFn || noop;
	    if (!skipWatchIdCheck && isDefined(ast.watchId)) {
	      intoId = intoId || this.nextId();
	      this.if_('i',
	        this.lazyAssign(intoId, this.computedMember('i', ast.watchId)),
	        this.lazyRecurse(ast, intoId, nameId, recursionFn, create, true)
	      );
	      return;
	    }
	    switch (ast.type) {
	    case AST.Program:
	      forEach(ast.body, function(expression, pos) {
	        self.recurse(expression.expression, undefined, undefined, function(expr) { right = expr; });
	        if (pos !== ast.body.length - 1) {
	          self.current().body.push(right, ';');
	        } else {
	          self.return_(right);
	        }
	      });
	      break;
	    case AST.Literal:
	      expression = this.escape(ast.value);
	      this.assign(intoId, expression);
	      recursionFn(expression);
	      break;
	    case AST.UnaryExpression:
	      this.recurse(ast.argument, undefined, undefined, function(expr) { right = expr; });
	      expression = ast.operator + '(' + this.ifDefined(right, 0) + ')';
	      this.assign(intoId, expression);
	      recursionFn(expression);
	      break;
	    case AST.BinaryExpression:
	      this.recurse(ast.left, undefined, undefined, function(expr) { left = expr; });
	      this.recurse(ast.right, undefined, undefined, function(expr) { right = expr; });
	      if (ast.operator === '+') {
	        expression = this.plus(left, right);
	      } else if (ast.operator === '-') {
	        expression = this.ifDefined(left, 0) + ast.operator + this.ifDefined(right, 0);
	      } else {
	        expression = '(' + left + ')' + ast.operator + '(' + right + ')';
	      }
	      this.assign(intoId, expression);
	      recursionFn(expression);
	      break;
	    case AST.LogicalExpression:
	      intoId = intoId || this.nextId();
	      self.recurse(ast.left, intoId);
	      self.if_(ast.operator === '&&' ? intoId : self.not(intoId), self.lazyRecurse(ast.right, intoId));
	      recursionFn(intoId);
	      break;
	    case AST.ConditionalExpression:
	      intoId = intoId || this.nextId();
	      self.recurse(ast.test, intoId);
	      self.if_(intoId, self.lazyRecurse(ast.alternate, intoId), self.lazyRecurse(ast.consequent, intoId));
	      recursionFn(intoId);
	      break;
	    case AST.Identifier:
	      intoId = intoId || this.nextId();
	      if (nameId) {
	        nameId.context = self.stage === 'inputs' ? 's' : this.assign(this.nextId(), this.getHasOwnProperty('l', ast.name) + '?l:s');
	        nameId.computed = false;
	        nameId.name = ast.name;
	      }
	      ensureSafeMemberName(ast.name);
	      self.if_(self.stage === 'inputs' || self.not(self.getHasOwnProperty('l', ast.name)),
	        function() {
	          self.if_(self.stage === 'inputs' || 's', function() {
	            if (create && create !== 1) {
	              self.if_(
	                self.not(self.nonComputedMember('s', ast.name)),
	                self.lazyAssign(self.nonComputedMember('s', ast.name), '{}'));
	            }
	            self.assign(intoId, self.nonComputedMember('s', ast.name));
	          });
	        }, intoId && self.lazyAssign(intoId, self.nonComputedMember('l', ast.name))
	        );
	      if (self.state.expensiveChecks || isPossiblyDangerousMemberName(ast.name)) {
	        self.addEnsureSafeObject(intoId);
	      }
	      recursionFn(intoId);
	      break;
	    case AST.MemberExpression:
	      left = nameId && (nameId.context = this.nextId()) || this.nextId();
	      intoId = intoId || this.nextId();
	      self.recurse(ast.object, left, undefined, function() {
	        self.if_(self.notNull(left), function() {
	          if (ast.computed) {
	            right = self.nextId();
	            self.recurse(ast.property, right);
	            self.addEnsureSafeMemberName(right);
	            if (create && create !== 1) {
	              self.if_(self.not(self.computedMember(left, right)), self.lazyAssign(self.computedMember(left, right), '{}'));
	            }
	            expression = self.ensureSafeObject(self.computedMember(left, right));
	            self.assign(intoId, expression);
	            if (nameId) {
	              nameId.computed = true;
	              nameId.name = right;
	            }
	          } else {
	            ensureSafeMemberName(ast.property.name);
	            if (create && create !== 1) {
	              self.if_(self.not(self.nonComputedMember(left, ast.property.name)), self.lazyAssign(self.nonComputedMember(left, ast.property.name), '{}'));
	            }
	            expression = self.nonComputedMember(left, ast.property.name);
	            if (self.state.expensiveChecks || isPossiblyDangerousMemberName(ast.property.name)) {
	              expression = self.ensureSafeObject(expression);
	            }
	            self.assign(intoId, expression);
	            if (nameId) {
	              nameId.computed = false;
	              nameId.name = ast.property.name;
	            }
	          }
	          recursionFn(intoId);
	        });
	      }, !!create);
	      break;
	    case AST.CallExpression:
	      intoId = intoId || this.nextId();
	      if (ast.filter) {
	        right = self.filter(ast.callee.name);
	        args = [];
	        forEach(ast.arguments, function(expr) {
	          var argument = self.nextId();
	          self.recurse(expr, argument);
	          args.push(argument);
	        });
	        expression = right + '(' + args.join(',') + ')';
	        self.assign(intoId, expression);
	        recursionFn(intoId);
	      } else {
	        right = self.nextId();
	        left = {};
	        args = [];
	        self.recurse(ast.callee, right, left, function() {
	          self.if_(self.notNull(right), function() {
	            self.addEnsureSafeFunction(right);
	            forEach(ast.arguments, function(expr) {
	              self.recurse(expr, self.nextId(), undefined, function(argument) {
	                args.push(self.ensureSafeObject(argument));
	              });
	            });
	            if (left.name) {
	              if (!self.state.expensiveChecks) {
	                self.addEnsureSafeObject(left.context);
	              }
	              expression = self.member(left.context, left.name, left.computed) + '(' + args.join(',') + ')';
	            } else {
	              expression = right + '(' + args.join(',') + ')';
	            }
	            expression = self.ensureSafeObject(expression);
	            self.assign(intoId, expression);
	            recursionFn(intoId);
	          });
	        });
	      }
	      break;
	    case AST.AssignmentExpression:
	      right = this.nextId();
	      left = {};
	      if (!isAssignable(ast.left)) {
	        throw $parseMinErr('lval', 'Trying to assing a value to a non l-value');
	      }
	      this.recurse(ast.left, undefined, left, function() {
	        self.if_(self.notNull(left.context), function() {
	          self.recurse(ast.right, right);
	          self.addEnsureSafeObject(self.member(left.context, left.name, left.computed));
	          expression = self.member(left.context, left.name, left.computed) + ast.operator + right;
	          self.assign(intoId, expression);
	          recursionFn(intoId || expression);
	        });
	      }, 1);
	      break;
	    case AST.ArrayExpression:
	      args = [];
	      forEach(ast.elements, function(expr) {
	        self.recurse(expr, self.nextId(), undefined, function(argument) {
	          args.push(argument);
	        });
	      });
	      expression = '[' + args.join(',') + ']';
	      this.assign(intoId, expression);
	      recursionFn(expression);
	      break;
	    case AST.ObjectExpression:
	      args = [];
	      forEach(ast.properties, function(property) {
	        self.recurse(property.value, self.nextId(), undefined, function(expr) {
	          args.push(self.escape(
	              property.key.type === AST.Identifier ? property.key.name :
	                ('' + property.key.value)) +
	              ':' + expr);
	        });
	      });
	      expression = '{' + args.join(',') + '}';
	      this.assign(intoId, expression);
	      recursionFn(expression);
	      break;
	    case AST.ThisExpression:
	      this.assign(intoId, 's');
	      recursionFn('s');
	      break;
	    case AST.NGValueParameter:
	      this.assign(intoId, 'v');
	      recursionFn('v');
	      break;
	    }
	  },

	  getHasOwnProperty: function(element, property) {
	    var key = element + '.' + property;
	    var own = this.current().own;
	    if (!own.hasOwnProperty(key)) {
	      own[key] = this.nextId(false, element + '&&(' + this.escape(property) + ' in ' + element + ')');
	    }
	    return own[key];
	  },

	  assign: function(id, value) {
	    if (!id) return;
	    this.current().body.push(id, '=', value, ';');
	    return id;
	  },

	  filter: function(filterName) {
	    if (!this.state.filters.hasOwnProperty(filterName)) {
	      this.state.filters[filterName] = this.nextId(true);
	    }
	    return this.state.filters[filterName];
	  },

	  ifDefined: function(id, defaultValue) {
	    return 'ifDefined(' + id + ',' + this.escape(defaultValue) + ')';
	  },

	  plus: function(left, right) {
	    return 'plus(' + left + ',' + right + ')';
	  },

	  return_: function(id) {
	    this.current().body.push('return ', id, ';');
	  },

	  if_: function(test, alternate, consequent) {
	    if (test === true) {
	      alternate();
	    } else {
	      var body = this.current().body;
	      body.push('if(', test, '){');
	      alternate();
	      body.push('}');
	      if (consequent) {
	        body.push('else{');
	        consequent();
	        body.push('}');
	      }
	    }
	  },

	  not: function(expression) {
	    return '!(' + expression + ')';
	  },

	  notNull: function(expression) {
	    return expression + '!=null';
	  },

	  nonComputedMember: function(left, right) {
	    return left + '.' + right;
	  },

	  computedMember: function(left, right) {
	    return left + '[' + right + ']';
	  },

	  member: function(left, right, computed) {
	    if (computed) return this.computedMember(left, right);
	    return this.nonComputedMember(left, right);
	  },

	  addEnsureSafeObject: function(item) {
	    this.current().body.push(this.ensureSafeObject(item), ';');
	  },

	  addEnsureSafeMemberName: function(item) {
	    this.current().body.push(this.ensureSafeMemberName(item), ';');
	  },

	  addEnsureSafeFunction: function(item) {
	    this.current().body.push(this.ensureSafeFunction(item), ';');
	  },

	  ensureSafeObject: function(item) {
	    return 'ensureSafeObject(' + item + ',text)';
	  },

	  ensureSafeMemberName: function(item) {
	    return 'ensureSafeMemberName(' + item + ',text)';
	  },

	  ensureSafeFunction: function(item) {
	    return 'ensureSafeFunction(' + item + ',text)';
	  },

	  lazyRecurse: function(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {
	    var self = this;
	    return function() {
	      self.recurse(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck);
	    };
	  },

	  lazyAssign: function(id, value) {
	    var self = this;
	    return function() {
	      self.assign(id, value);
	    };
	  },

	  stringEscapeRegex: /[^ a-zA-Z0-9]/g,

	  stringEscapeFn: function(c) {
	    return '\\u' + ('0000' + c.charCodeAt(0).toString(16)).slice(-4);
	  },

	  escape: function(value) {
	    if (isString(value)) return "'" + value.replace(this.stringEscapeRegex, this.stringEscapeFn) + "'";
	    if (isNumber(value)) return value.toString();
	    if (value === true) return 'true';
	    if (value === false) return 'false';
	    if (value === null) return 'null';
	    if (typeof value === 'undefined') return 'undefined';

	    throw $parseMinErr('esc', 'IMPOSSIBLE');
	  },

	  nextId: function(skip, init) {
	    var id = 'v' + (this.state.nextId++);
	    if (!skip) {
	      this.current().vars.push(id + (init ? '=' + init : ''));
	    }
	    return id;
	  },

	  current: function() {
	    return this.state[this.state.computing];
	  }
	};


	function ASTInterpreter(astBuilder, $filter) {
	  this.astBuilder = astBuilder;
	  this.$filter = $filter;
	}

	ASTInterpreter.prototype = {
	  compile: function(expression, expensiveChecks) {
	    var self = this;
	    var ast = this.astBuilder.ast(expression);
	    this.expression = expression;
	    this.expensiveChecks = expensiveChecks;
	    findConstantAndWatchExpressions(ast, self.$filter);
	    var assignable;
	    var assign;
	    if ((assignable = assignableAST(ast))) {
	      assign = this.recurse(assignable);
	    }
	    var toWatch = getInputs(ast.body);
	    var inputs;
	    if (toWatch) {
	      inputs = [];
	      forEach(toWatch, function(watch, key) {
	        var input = self.recurse(watch);
	        watch.input = input;
	        inputs.push(input);
	        watch.watchId = key;
	      });
	    }
	    var expressions = [];
	    forEach(ast.body, function(expression) {
	      expressions.push(self.recurse(expression.expression));
	    });
	    var fn = ast.body.length === 0 ? function() {} :
	             ast.body.length === 1 ? expressions[0] :
	             function(scope, locals) {
	               var lastValue;
	               forEach(expressions, function(exp) {
	                 lastValue = exp(scope, locals);
	               });
	               return lastValue;
	             };
	    if (assign) {
	      fn.assign = function(scope, value, locals) {
	        return assign(scope, locals, value);
	      };
	    }
	    if (inputs) {
	      fn.inputs = inputs;
	    }
	    fn.literal = isLiteral(ast);
	    fn.constant = isConstant(ast);
	    return fn;
	  },

	  recurse: function(ast, context, create) {
	    var left, right, self = this, args, expression;
	    if (ast.input) {
	      return this.inputs(ast.input, ast.watchId);
	    }
	    switch (ast.type) {
	    case AST.Literal:
	      return this.value(ast.value, context);
	    case AST.UnaryExpression:
	      right = this.recurse(ast.argument);
	      return this['unary' + ast.operator](right, context);
	    case AST.BinaryExpression:
	      left = this.recurse(ast.left);
	      right = this.recurse(ast.right);
	      return this['binary' + ast.operator](left, right, context);
	    case AST.LogicalExpression:
	      left = this.recurse(ast.left);
	      right = this.recurse(ast.right);
	      return this['binary' + ast.operator](left, right, context);
	    case AST.ConditionalExpression:
	      return this['ternary?:'](
	        this.recurse(ast.test),
	        this.recurse(ast.alternate),
	        this.recurse(ast.consequent),
	        context
	      );
	    case AST.Identifier:
	      ensureSafeMemberName(ast.name, self.expression);
	      return self.identifier(ast.name,
	                             self.expensiveChecks || isPossiblyDangerousMemberName(ast.name),
	                             context, create, self.expression);
	    case AST.MemberExpression:
	      left = this.recurse(ast.object, false, !!create);
	      if (!ast.computed) {
	        ensureSafeMemberName(ast.property.name, self.expression);
	        right = ast.property.name;
	      }
	      if (ast.computed) right = this.recurse(ast.property);
	      return ast.computed ?
	        this.computedMember(left, right, context, create, self.expression) :
	        this.nonComputedMember(left, right, self.expensiveChecks, context, create, self.expression);
	    case AST.CallExpression:
	      args = [];
	      forEach(ast.arguments, function(expr) {
	        args.push(self.recurse(expr));
	      });
	      if (ast.filter) right = this.$filter(ast.callee.name);
	      if (!ast.filter) right = this.recurse(ast.callee, true);
	      return ast.filter ?
	        function(scope, locals, assign, inputs) {
	          var values = [];
	          for (var i = 0; i < args.length; ++i) {
	            values.push(args[i](scope, locals, assign, inputs));
	          }
	          var value = right.apply(undefined, values, inputs);
	          return context ? {context: undefined, name: undefined, value: value} : value;
	        } :
	        function(scope, locals, assign, inputs) {
	          var rhs = right(scope, locals, assign, inputs);
	          var value;
	          if (rhs.value != null) {
	            ensureSafeObject(rhs.context, self.expression);
	            ensureSafeFunction(rhs.value, self.expression);
	            var values = [];
	            for (var i = 0; i < args.length; ++i) {
	              values.push(ensureSafeObject(args[i](scope, locals, assign, inputs), self.expression));
	            }
	            value = ensureSafeObject(rhs.value.apply(rhs.context, values), self.expression);
	          }
	          return context ? {value: value} : value;
	        };
	    case AST.AssignmentExpression:
	      left = this.recurse(ast.left, true, 1);
	      right = this.recurse(ast.right);
	      return function(scope, locals, assign, inputs) {
	        var lhs = left(scope, locals, assign, inputs);
	        var rhs = right(scope, locals, assign, inputs);
	        ensureSafeObject(lhs.value, self.expression);
	        lhs.context[lhs.name] = rhs;
	        return context ? {value: rhs} : rhs;
	      };
	    case AST.ArrayExpression:
	      args = [];
	      forEach(ast.elements, function(expr) {
	        args.push(self.recurse(expr));
	      });
	      return function(scope, locals, assign, inputs) {
	        var value = [];
	        for (var i = 0; i < args.length; ++i) {
	          value.push(args[i](scope, locals, assign, inputs));
	        }
	        return context ? {value: value} : value;
	      };
	    case AST.ObjectExpression:
	      args = [];
	      forEach(ast.properties, function(property) {
	        args.push({key: property.key.type === AST.Identifier ?
	                        property.key.name :
	                        ('' + property.key.value),
	                   value: self.recurse(property.value)
	        });
	      });
	      return function(scope, locals, assign, inputs) {
	        var value = {};
	        for (var i = 0; i < args.length; ++i) {
	          value[args[i].key] = args[i].value(scope, locals, assign, inputs);
	        }
	        return context ? {value: value} : value;
	      };
	    case AST.ThisExpression:
	      return function(scope) {
	        return context ? {value: scope} : scope;
	      };
	    case AST.NGValueParameter:
	      return function(scope, locals, assign, inputs) {
	        return context ? {value: assign} : assign;
	      };
	    }
	  },

	  'unary+': function(argument, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = argument(scope, locals, assign, inputs);
	      if (isDefined(arg)) {
	        arg = +arg;
	      } else {
	        arg = 0;
	      }
	      return context ? {value: arg} : arg;
	    };
	  },
	  'unary-': function(argument, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = argument(scope, locals, assign, inputs);
	      if (isDefined(arg)) {
	        arg = -arg;
	      } else {
	        arg = 0;
	      }
	      return context ? {value: arg} : arg;
	    };
	  },
	  'unary!': function(argument, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = !argument(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary+': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var lhs = left(scope, locals, assign, inputs);
	      var rhs = right(scope, locals, assign, inputs);
	      var arg = plusFn(lhs, rhs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary-': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var lhs = left(scope, locals, assign, inputs);
	      var rhs = right(scope, locals, assign, inputs);
	      var arg = (isDefined(lhs) ? lhs : 0) - (isDefined(rhs) ? rhs : 0);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary*': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) * right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary/': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) / right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary%': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) % right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary===': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) === right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary!==': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) !== right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary==': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) == right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary!=': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) != right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary<': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) < right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary>': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) > right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary<=': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) <= right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary>=': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) >= right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary&&': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) && right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary||': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) || right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'ternary?:': function(test, alternate, consequent, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = test(scope, locals, assign, inputs) ? alternate(scope, locals, assign, inputs) : consequent(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  value: function(value, context) {
	    return function() { return context ? {context: undefined, name: undefined, value: value} : value; };
	  },
	  identifier: function(name, expensiveChecks, context, create, expression) {
	    return function(scope, locals, assign, inputs) {
	      var base = locals && (name in locals) ? locals : scope;
	      if (create && create !== 1 && base && !(base[name])) {
	        base[name] = {};
	      }
	      var value = base ? base[name] : undefined;
	      if (expensiveChecks) {
	        ensureSafeObject(value, expression);
	      }
	      if (context) {
	        return {context: base, name: name, value: value};
	      } else {
	        return value;
	      }
	    };
	  },
	  computedMember: function(left, right, context, create, expression) {
	    return function(scope, locals, assign, inputs) {
	      var lhs = left(scope, locals, assign, inputs);
	      var rhs;
	      var value;
	      if (lhs != null) {
	        rhs = right(scope, locals, assign, inputs);
	        ensureSafeMemberName(rhs, expression);
	        if (create && create !== 1 && lhs && !(lhs[rhs])) {
	          lhs[rhs] = {};
	        }
	        value = lhs[rhs];
	        ensureSafeObject(value, expression);
	      }
	      if (context) {
	        return {context: lhs, name: rhs, value: value};
	      } else {
	        return value;
	      }
	    };
	  },
	  nonComputedMember: function(left, right, expensiveChecks, context, create, expression) {
	    return function(scope, locals, assign, inputs) {
	      var lhs = left(scope, locals, assign, inputs);
	      if (create && create !== 1 && lhs && !(lhs[right])) {
	        lhs[right] = {};
	      }
	      var value = lhs != null ? lhs[right] : undefined;
	      if (expensiveChecks || isPossiblyDangerousMemberName(right)) {
	        ensureSafeObject(value, expression);
	      }
	      if (context) {
	        return {context: lhs, name: right, value: value};
	      } else {
	        return value;
	      }
	    };
	  },
	  inputs: function(input, watchId) {
	    return function(scope, value, locals, inputs) {
	      if (inputs) return inputs[watchId];
	      return input(scope, value, locals);
	    };
	  }
	};

	/**
	 * @constructor
	 */
	var Parser = function(lexer, $filter, options) {
	  this.lexer = lexer;
	  this.$filter = $filter;
	  this.options = options;
	  this.ast = new AST(this.lexer);
	  this.astCompiler = options.csp ? new ASTInterpreter(this.ast, $filter) :
	                                   new ASTCompiler(this.ast, $filter);
	};

	Parser.prototype = {
	  constructor: Parser,

	  parse: function(text) {
	    return this.astCompiler.compile(text, this.options.expensiveChecks);
	  }
	};

	//////////////////////////////////////////////////
	// Parser helper functions
	//////////////////////////////////////////////////

	function setter(obj, path, setValue, fullExp) {
	  ensureSafeObject(obj, fullExp);

	  var element = path.split('.'), key;
	  for (var i = 0; element.length > 1; i++) {
	    key = ensureSafeMemberName(element.shift(), fullExp);
	    var propertyObj = ensureSafeObject(obj[key], fullExp);
	    if (!propertyObj) {
	      propertyObj = {};
	      obj[key] = propertyObj;
	    }
	    obj = propertyObj;
	  }
	  key = ensureSafeMemberName(element.shift(), fullExp);
	  ensureSafeObject(obj[key], fullExp);
	  obj[key] = setValue;
	  return setValue;
	}

	var getterFnCacheDefault = createMap();
	var getterFnCacheExpensive = createMap();

	function isPossiblyDangerousMemberName(name) {
	  return name == 'constructor';
	}

	var objectValueOf = Object.prototype.valueOf;

	function getValueOf(value) {
	  return isFunction(value.valueOf) ? value.valueOf() : objectValueOf.call(value);
	}

	///////////////////////////////////

	/**
	 * @ngdoc service
	 * @name $parse
	 * @kind function
	 *
	 * @description
	 *
	 * Converts Angular {@link guide/expression expression} into a function.
	 *
	 * ```js
	 *   var getter = $parse('user.name');
	 *   var setter = getter.assign;
	 *   var context = {user:{name:'angular'}};
	 *   var locals = {user:{name:'local'}};
	 *
	 *   expect(getter(context)).toEqual('angular');
	 *   setter(context, 'newValue');
	 *   expect(context.user.name).toEqual('newValue');
	 *   expect(getter(context, locals)).toEqual('local');
	 * ```
	 *
	 *
	 * @param {string} expression String expression to compile.
	 * @returns {function(context, locals)} a function which represents the compiled expression:
	 *
	 *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	 *      are evaluated against (typically a scope object).
	 *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	 *      `context`.
	 *
	 *    The returned function also has the following properties:
	 *      * `literal` – `{boolean}` – whether the expression's top-level node is a JavaScript
	 *        literal.
	 *      * `constant` – `{boolean}` – whether the expression is made entirely of JavaScript
	 *        constant literals.
	 *      * `assign` – `{?function(context, value)}` – if the expression is assignable, this will be
	 *        set to a function to change its value on the given context.
	 *
	 */


	/**
	 * @ngdoc provider
	 * @name $parseProvider
	 *
	 * @description
	 * `$parseProvider` can be used for configuring the default behavior of the {@link ng.$parse $parse}
	 *  service.
	 */
	function $ParseProvider() {
	  var cacheDefault = createMap();
	  var cacheExpensive = createMap();

	  this.$get = ['$filter', '$sniffer', function($filter, $sniffer) {
	    var $parseOptions = {
	          csp: $sniffer.csp,
	          expensiveChecks: false
	        },
	        $parseOptionsExpensive = {
	          csp: $sniffer.csp,
	          expensiveChecks: true
	        };

	    return function $parse(exp, interceptorFn, expensiveChecks) {
	      var parsedExpression, oneTime, cacheKey;

	      switch (typeof exp) {
	        case 'string':
	          exp = exp.trim();
	          cacheKey = exp;

	          var cache = (expensiveChecks ? cacheExpensive : cacheDefault);
	          parsedExpression = cache[cacheKey];

	          if (!parsedExpression) {
	            if (exp.charAt(0) === ':' && exp.charAt(1) === ':') {
	              oneTime = true;
	              exp = exp.substring(2);
	            }
	            var parseOptions = expensiveChecks ? $parseOptionsExpensive : $parseOptions;
	            var lexer = new Lexer(parseOptions);
	            var parser = new Parser(lexer, $filter, parseOptions);
	            parsedExpression = parser.parse(exp);
	            if (parsedExpression.constant) {
	              parsedExpression.$$watchDelegate = constantWatchDelegate;
	            } else if (oneTime) {
	              parsedExpression.$$watchDelegate = parsedExpression.literal ?
	                  oneTimeLiteralWatchDelegate : oneTimeWatchDelegate;
	            } else if (parsedExpression.inputs) {
	              parsedExpression.$$watchDelegate = inputsWatchDelegate;
	            }
	            cache[cacheKey] = parsedExpression;
	          }
	          return addInterceptor(parsedExpression, interceptorFn);

	        case 'function':
	          return addInterceptor(exp, interceptorFn);

	        default:
	          return noop;
	      }
	    };

	    function expressionInputDirtyCheck(newValue, oldValueOfValue) {

	      if (newValue == null || oldValueOfValue == null) { // null/undefined
	        return newValue === oldValueOfValue;
	      }

	      if (typeof newValue === 'object') {

	        // attempt to convert the value to a primitive type
	        // TODO(docs): add a note to docs that by implementing valueOf even objects and arrays can
	        //             be cheaply dirty-checked
	        newValue = getValueOf(newValue);

	        if (typeof newValue === 'object') {
	          // objects/arrays are not supported - deep-watching them would be too expensive
	          return false;
	        }

	        // fall-through to the primitive equality check
	      }

	      //Primitive or NaN
	      return newValue === oldValueOfValue || (newValue !== newValue && oldValueOfValue !== oldValueOfValue);
	    }

	    function inputsWatchDelegate(scope, listener, objectEquality, parsedExpression, prettyPrintExpression) {
	      var inputExpressions = parsedExpression.inputs;
	      var lastResult;

	      if (inputExpressions.length === 1) {
	        var oldInputValueOf = expressionInputDirtyCheck; // init to something unique so that equals check fails
	        inputExpressions = inputExpressions[0];
	        return scope.$watch(function expressionInputWatch(scope) {
	          var newInputValue = inputExpressions(scope);
	          if (!expressionInputDirtyCheck(newInputValue, oldInputValueOf)) {
	            lastResult = parsedExpression(scope, undefined, undefined, [newInputValue]);
	            oldInputValueOf = newInputValue && getValueOf(newInputValue);
	          }
	          return lastResult;
	        }, listener, objectEquality, prettyPrintExpression);
	      }

	      var oldInputValueOfValues = [];
	      var oldInputValues = [];
	      for (var i = 0, ii = inputExpressions.length; i < ii; i++) {
	        oldInputValueOfValues[i] = expressionInputDirtyCheck; // init to something unique so that equals check fails
	        oldInputValues[i] = null;
	      }

	      return scope.$watch(function expressionInputsWatch(scope) {
	        var changed = false;

	        for (var i = 0, ii = inputExpressions.length; i < ii; i++) {
	          var newInputValue = inputExpressions[i](scope);
	          if (changed || (changed = !expressionInputDirtyCheck(newInputValue, oldInputValueOfValues[i]))) {
	            oldInputValues[i] = newInputValue;
	            oldInputValueOfValues[i] = newInputValue && getValueOf(newInputValue);
	          }
	        }

	        if (changed) {
	          lastResult = parsedExpression(scope, undefined, undefined, oldInputValues);
	        }

	        return lastResult;
	      }, listener, objectEquality, prettyPrintExpression);
	    }

	    function oneTimeWatchDelegate(scope, listener, objectEquality, parsedExpression) {
	      var unwatch, lastValue;
	      return unwatch = scope.$watch(function oneTimeWatch(scope) {
	        return parsedExpression(scope);
	      }, function oneTimeListener(value, old, scope) {
	        lastValue = value;
	        if (isFunction(listener)) {
	          listener.apply(this, arguments);
	        }
	        if (isDefined(value)) {
	          scope.$$postDigest(function() {
	            if (isDefined(lastValue)) {
	              unwatch();
	            }
	          });
	        }
	      }, objectEquality);
	    }

	    function oneTimeLiteralWatchDelegate(scope, listener, objectEquality, parsedExpression) {
	      var unwatch, lastValue;
	      return unwatch = scope.$watch(function oneTimeWatch(scope) {
	        return parsedExpression(scope);
	      }, function oneTimeListener(value, old, scope) {
	        lastValue = value;
	        if (isFunction(listener)) {
	          listener.call(this, value, old, scope);
	        }
	        if (isAllDefined(value)) {
	          scope.$$postDigest(function() {
	            if (isAllDefined(lastValue)) unwatch();
	          });
	        }
	      }, objectEquality);

	      function isAllDefined(value) {
	        var allDefined = true;
	        forEach(value, function(val) {
	          if (!isDefined(val)) allDefined = false;
	        });
	        return allDefined;
	      }
	    }

	    function constantWatchDelegate(scope, listener, objectEquality, parsedExpression) {
	      var unwatch;
	      return unwatch = scope.$watch(function constantWatch(scope) {
	        return parsedExpression(scope);
	      }, function constantListener(value, old, scope) {
	        if (isFunction(listener)) {
	          listener.apply(this, arguments);
	        }
	        unwatch();
	      }, objectEquality);
	    }

	    function addInterceptor(parsedExpression, interceptorFn) {
	      if (!interceptorFn) return parsedExpression;
	      var watchDelegate = parsedExpression.$$watchDelegate;

	      var regularWatch =
	          watchDelegate !== oneTimeLiteralWatchDelegate &&
	          watchDelegate !== oneTimeWatchDelegate;

	      var fn = regularWatch ? function regularInterceptedExpression(scope, locals, assign, inputs) {
	        var value = parsedExpression(scope, locals, assign, inputs);
	        return interceptorFn(value, scope, locals);
	      } : function oneTimeInterceptedExpression(scope, locals, assign, inputs) {
	        var value = parsedExpression(scope, locals, assign, inputs);
	        var result = interceptorFn(value, scope, locals);
	        // we only return the interceptor's result if the
	        // initial value is defined (for bind-once)
	        return isDefined(value) ? result : value;
	      };

	      // Propagate $$watchDelegates other then inputsWatchDelegate
	      if (parsedExpression.$$watchDelegate &&
	          parsedExpression.$$watchDelegate !== inputsWatchDelegate) {
	        fn.$$watchDelegate = parsedExpression.$$watchDelegate;
	      } else if (!interceptorFn.$stateful) {
	        // If there is an interceptor, but no watchDelegate then treat the interceptor like
	        // we treat filters - it is assumed to be a pure function unless flagged with $stateful
	        fn.$$watchDelegate = inputsWatchDelegate;
	        fn.inputs = parsedExpression.inputs ? parsedExpression.inputs : [parsedExpression];
	      }

	      return fn;
	    }
	  }];
	}

	/**
	 * @ngdoc service
	 * @name $q
	 * @requires $rootScope
	 *
	 * @description
	 * A service that helps you run functions asynchronously, and use their return values (or exceptions)
	 * when they are done processing.
	 *
	 * This is an implementation of promises/deferred objects inspired by
	 * [Kris Kowal's Q](https://github.com/kriskowal/q).
	 *
	 * $q can be used in two fashions --- one which is more similar to Kris Kowal's Q or jQuery's Deferred
	 * implementations, and the other which resembles ES6 promises to some degree.
	 *
	 * # $q constructor
	 *
	 * The streamlined ES6 style promise is essentially just using $q as a constructor which takes a `resolver`
	 * function as the first argument. This is similar to the native Promise implementation from ES6 Harmony,
	 * see [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).
	 *
	 * While the constructor-style use is supported, not all of the supporting methods from ES6 Harmony promises are
	 * available yet.
	 *
	 * It can be used like so:
	 *
	 * ```js
	 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`
	 *   // are available in the current lexical scope (they could have been injected or passed in).
	 *
	 *   function asyncGreet(name) {
	 *     // perform some asynchronous operation, resolve or reject the promise when appropriate.
	 *     return $q(function(resolve, reject) {
	 *       setTimeout(function() {
	 *         if (okToGreet(name)) {
	 *           resolve('Hello, ' + name + '!');
	 *         } else {
	 *           reject('Greeting ' + name + ' is not allowed.');
	 *         }
	 *       }, 1000);
	 *     });
	 *   }
	 *
	 *   var promise = asyncGreet('Robin Hood');
	 *   promise.then(function(greeting) {
	 *     alert('Success: ' + greeting);
	 *   }, function(reason) {
	 *     alert('Failed: ' + reason);
	 *   });
	 * ```
	 *
	 * Note: progress/notify callbacks are not currently supported via the ES6-style interface.
	 *
	 * However, the more traditional CommonJS-style usage is still available, and documented below.
	 *
	 * [The CommonJS Promise proposal](http://wiki.commonjs.org/wiki/Promises) describes a promise as an
	 * interface for interacting with an object that represents the result of an action that is
	 * performed asynchronously, and may or may not be finished at any given point in time.
	 *
	 * From the perspective of dealing with error handling, deferred and promise APIs are to
	 * asynchronous programming what `try`, `catch` and `throw` keywords are to synchronous programming.
	 *
	 * ```js
	 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`
	 *   // are available in the current lexical scope (they could have been injected or passed in).
	 *
	 *   function asyncGreet(name) {
	 *     var deferred = $q.defer();
	 *
	 *     setTimeout(function() {
	 *       deferred.notify('About to greet ' + name + '.');
	 *
	 *       if (okToGreet(name)) {
	 *         deferred.resolve('Hello, ' + name + '!');
	 *       } else {
	 *         deferred.reject('Greeting ' + name + ' is not allowed.');
	 *       }
	 *     }, 1000);
	 *
	 *     return deferred.promise;
	 *   }
	 *
	 *   var promise = asyncGreet('Robin Hood');
	 *   promise.then(function(greeting) {
	 *     alert('Success: ' + greeting);
	 *   }, function(reason) {
	 *     alert('Failed: ' + reason);
	 *   }, function(update) {
	 *     alert('Got notification: ' + update);
	 *   });
	 * ```
	 *
	 * At first it might not be obvious why this extra complexity is worth the trouble. The payoff
	 * comes in the way of guarantees that promise and deferred APIs make, see
	 * https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md.
	 *
	 * Additionally the promise api allows for composition that is very hard to do with the
	 * traditional callback ([CPS](http://en.wikipedia.org/wiki/Continuation-passing_style)) approach.
	 * For more on this please see the [Q documentation](https://github.com/kriskowal/q) especially the
	 * section on serial or parallel joining of promises.
	 *
	 * # The Deferred API
	 *
	 * A new instance of deferred is constructed by calling `$q.defer()`.
	 *
	 * The purpose of the deferred object is to expose the associated Promise instance as well as APIs
	 * that can be used for signaling the successful or unsuccessful completion, as well as the status
	 * of the task.
	 *
	 * **Methods**
	 *
	 * - `resolve(value)` – resolves the derived promise with the `value`. If the value is a rejection
	 *   constructed via `$q.reject`, the promise will be rejected instead.
	 * - `reject(reason)` – rejects the derived promise with the `reason`. This is equivalent to
	 *   resolving it with a rejection constructed via `$q.reject`.
	 * - `notify(value)` - provides updates on the status of the promise's execution. This may be called
	 *   multiple times before the promise is either resolved or rejected.
	 *
	 * **Properties**
	 *
	 * - promise – `{Promise}` – promise object associated with this deferred.
	 *
	 *
	 * # The Promise API
	 *
	 * A new promise instance is created when a deferred instance is created and can be retrieved by
	 * calling `deferred.promise`.
	 *
	 * The purpose of the promise object is to allow for interested parties to get access to the result
	 * of the deferred task when it completes.
	 *
	 * **Methods**
	 *
	 * - `then(successCallback, errorCallback, notifyCallback)` – regardless of when the promise was or
	 *   will be resolved or rejected, `then` calls one of the success or error callbacks asynchronously
	 *   as soon as the result is available. The callbacks are called with a single argument: the result
	 *   or rejection reason. Additionally, the notify callback may be called zero or more times to
	 *   provide a progress indication, before the promise is resolved or rejected.
	 *
	 *   This method *returns a new promise* which is resolved or rejected via the return value of the
	 *   `successCallback`, `errorCallback` (unless that value is a promise, in which case it is resolved
	 *   with the value which is resolved in that promise using
	 *   [promise chaining](http://www.html5rocks.com/en/tutorials/es6/promises/#toc-promises-queues)).
	 *   It also notifies via the return value of the `notifyCallback` method. The promise cannot be
	 *   resolved or rejected from the notifyCallback method.
	 *
	 * - `catch(errorCallback)` – shorthand for `promise.then(null, errorCallback)`
	 *
	 * - `finally(callback, notifyCallback)` – allows you to observe either the fulfillment or rejection of a promise,
	 *   but to do so without modifying the final value. This is useful to release resources or do some
	 *   clean-up that needs to be done whether the promise was rejected or resolved. See the [full
	 *   specification](https://github.com/kriskowal/q/wiki/API-Reference#promisefinallycallback) for
	 *   more information.
	 *
	 * # Chaining promises
	 *
	 * Because calling the `then` method of a promise returns a new derived promise, it is easily
	 * possible to create a chain of promises:
	 *
	 * ```js
	 *   promiseB = promiseA.then(function(result) {
	 *     return result + 1;
	 *   });
	 *
	 *   // promiseB will be resolved immediately after promiseA is resolved and its value
	 *   // will be the result of promiseA incremented by 1
	 * ```
	 *
	 * It is possible to create chains of any length and since a promise can be resolved with another
	 * promise (which will defer its resolution further), it is possible to pause/defer resolution of
	 * the promises at any point in the chain. This makes it possible to implement powerful APIs like
	 * $http's response interceptors.
	 *
	 *
	 * # Differences between Kris Kowal's Q and $q
	 *
	 *  There are two main differences:
	 *
	 * - $q is integrated with the {@link ng.$rootScope.Scope} Scope model observation
	 *   mechanism in angular, which means faster propagation of resolution or rejection into your
	 *   models and avoiding unnecessary browser repaints, which would result in flickering UI.
	 * - Q has many more features than $q, but that comes at a cost of bytes. $q is tiny, but contains
	 *   all the important functionality needed for common async tasks.
	 *
	 *  # Testing
	 *
	 *  ```js
	 *    it('should simulate promise', inject(function($q, $rootScope) {
	 *      var deferred = $q.defer();
	 *      var promise = deferred.promise;
	 *      var resolvedValue;
	 *
	 *      promise.then(function(value) { resolvedValue = value; });
	 *      expect(resolvedValue).toBeUndefined();
	 *
	 *      // Simulate resolving of promise
	 *      deferred.resolve(123);
	 *      // Note that the 'then' function does not get called synchronously.
	 *      // This is because we want the promise API to always be async, whether or not
	 *      // it got called synchronously or asynchronously.
	 *      expect(resolvedValue).toBeUndefined();
	 *
	 *      // Propagate promise resolution to 'then' functions using $apply().
	 *      $rootScope.$apply();
	 *      expect(resolvedValue).toEqual(123);
	 *    }));
	 *  ```
	 *
	 * @param {function(function, function)} resolver Function which is responsible for resolving or
	 *   rejecting the newly created promise. The first parameter is a function which resolves the
	 *   promise, the second parameter is a function which rejects the promise.
	 *
	 * @returns {Promise} The newly created promise.
	 */
	function $QProvider() {

	  this.$get = ['$rootScope', '$exceptionHandler', function($rootScope, $exceptionHandler) {
	    return qFactory(function(callback) {
	      $rootScope.$evalAsync(callback);
	    }, $exceptionHandler);
	  }];
	}

	function $$QProvider() {
	  this.$get = ['$browser', '$exceptionHandler', function($browser, $exceptionHandler) {
	    return qFactory(function(callback) {
	      $browser.defer(callback);
	    }, $exceptionHandler);
	  }];
	}

	/**
	 * Constructs a promise manager.
	 *
	 * @param {function(function)} nextTick Function for executing functions in the next turn.
	 * @param {function(...*)} exceptionHandler Function into which unexpected exceptions are passed for
	 *     debugging purposes.
	 * @returns {object} Promise manager.
	 */
	function qFactory(nextTick, exceptionHandler) {
	  var $qMinErr = minErr('$q', TypeError);
	  function callOnce(self, resolveFn, rejectFn) {
	    var called = false;
	    function wrap(fn) {
	      return function(value) {
	        if (called) return;
	        called = true;
	        fn.call(self, value);
	      };
	    }

	    return [wrap(resolveFn), wrap(rejectFn)];
	  }

	  /**
	   * @ngdoc method
	   * @name ng.$q#defer
	   * @kind function
	   *
	   * @description
	   * Creates a `Deferred` object which represents a task which will finish in the future.
	   *
	   * @returns {Deferred} Returns a new instance of deferred.
	   */
	  var defer = function() {
	    return new Deferred();
	  };

	  function Promise() {
	    this.$$state = { status: 0 };
	  }

	  Promise.prototype = {
	    then: function(onFulfilled, onRejected, progressBack) {
	      var result = new Deferred();

	      this.$$state.pending = this.$$state.pending || [];
	      this.$$state.pending.push([result, onFulfilled, onRejected, progressBack]);
	      if (this.$$state.status > 0) scheduleProcessQueue(this.$$state);

	      return result.promise;
	    },

	    "catch": function(callback) {
	      return this.then(null, callback);
	    },

	    "finally": function(callback, progressBack) {
	      return this.then(function(value) {
	        return handleCallback(value, true, callback);
	      }, function(error) {
	        return handleCallback(error, false, callback);
	      }, progressBack);
	    }
	  };

	  //Faster, more basic than angular.bind http://jsperf.com/angular-bind-vs-custom-vs-native
	  function simpleBind(context, fn) {
	    return function(value) {
	      fn.call(context, value);
	    };
	  }

	  function processQueue(state) {
	    var fn, deferred, pending;

	    pending = state.pending;
	    state.processScheduled = false;
	    state.pending = undefined;
	    for (var i = 0, ii = pending.length; i < ii; ++i) {
	      deferred = pending[i][0];
	      fn = pending[i][state.status];
	      try {
	        if (isFunction(fn)) {
	          deferred.resolve(fn(state.value));
	        } else if (state.status === 1) {
	          deferred.resolve(state.value);
	        } else {
	          deferred.reject(state.value);
	        }
	      } catch (e) {
	        deferred.reject(e);
	        exceptionHandler(e);
	      }
	    }
	  }

	  function scheduleProcessQueue(state) {
	    if (state.processScheduled || !state.pending) return;
	    state.processScheduled = true;
	    nextTick(function() { processQueue(state); });
	  }

	  function Deferred() {
	    this.promise = new Promise();
	    //Necessary to support unbound execution :/
	    this.resolve = simpleBind(this, this.resolve);
	    this.reject = simpleBind(this, this.reject);
	    this.notify = simpleBind(this, this.notify);
	  }

	  Deferred.prototype = {
	    resolve: function(val) {
	      if (this.promise.$$state.status) return;
	      if (val === this.promise) {
	        this.$$reject($qMinErr(
	          'qcycle',
	          "Expected promise to be resolved with value other than itself '{0}'",
	          val));
	      } else {
	        this.$$resolve(val);
	      }

	    },

	    $$resolve: function(val) {
	      var then, fns;

	      fns = callOnce(this, this.$$resolve, this.$$reject);
	      try {
	        if ((isObject(val) || isFunction(val))) then = val && val.then;
	        if (isFunction(then)) {
	          this.promise.$$state.status = -1;
	          then.call(val, fns[0], fns[1], this.notify);
	        } else {
	          this.promise.$$state.value = val;
	          this.promise.$$state.status = 1;
	          scheduleProcessQueue(this.promise.$$state);
	        }
	      } catch (e) {
	        fns[1](e);
	        exceptionHandler(e);
	      }
	    },

	    reject: function(reason) {
	      if (this.promise.$$state.status) return;
	      this.$$reject(reason);
	    },

	    $$reject: function(reason) {
	      this.promise.$$state.value = reason;
	      this.promise.$$state.status = 2;
	      scheduleProcessQueue(this.promise.$$state);
	    },

	    notify: function(progress) {
	      var callbacks = this.promise.$$state.pending;

	      if ((this.promise.$$state.status <= 0) && callbacks && callbacks.length) {
	        nextTick(function() {
	          var callback, result;
	          for (var i = 0, ii = callbacks.length; i < ii; i++) {
	            result = callbacks[i][0];
	            callback = callbacks[i][3];
	            try {
	              result.notify(isFunction(callback) ? callback(progress) : progress);
	            } catch (e) {
	              exceptionHandler(e);
	            }
	          }
	        });
	      }
	    }
	  };

	  /**
	   * @ngdoc method
	   * @name $q#reject
	   * @kind function
	   *
	   * @description
	   * Creates a promise that is resolved as rejected with the specified `reason`. This api should be
	   * used to forward rejection in a chain of promises. If you are dealing with the last promise in
	   * a promise chain, you don't need to worry about it.
	   *
	   * When comparing deferreds/promises to the familiar behavior of try/catch/throw, think of
	   * `reject` as the `throw` keyword in JavaScript. This also means that if you "catch" an error via
	   * a promise error callback and you want to forward the error to the promise derived from the
	   * current promise, you have to "rethrow" the error by returning a rejection constructed via
	   * `reject`.
	   *
	   * ```js
	   *   promiseB = promiseA.then(function(result) {
	   *     // success: do something and resolve promiseB
	   *     //          with the old or a new result
	   *     return result;
	   *   }, function(reason) {
	   *     // error: handle the error if possible and
	   *     //        resolve promiseB with newPromiseOrValue,
	   *     //        otherwise forward the rejection to promiseB
	   *     if (canHandle(reason)) {
	   *      // handle the error and recover
	   *      return newPromiseOrValue;
	   *     }
	   *     return $q.reject(reason);
	   *   });
	   * ```
	   *
	   * @param {*} reason Constant, message, exception or an object representing the rejection reason.
	   * @returns {Promise} Returns a promise that was already resolved as rejected with the `reason`.
	   */
	  var reject = function(reason) {
	    var result = new Deferred();
	    result.reject(reason);
	    return result.promise;
	  };

	  var makePromise = function makePromise(value, resolved) {
	    var result = new Deferred();
	    if (resolved) {
	      result.resolve(value);
	    } else {
	      result.reject(value);
	    }
	    return result.promise;
	  };

	  var handleCallback = function handleCallback(value, isResolved, callback) {
	    var callbackOutput = null;
	    try {
	      if (isFunction(callback)) callbackOutput = callback();
	    } catch (e) {
	      return makePromise(e, false);
	    }
	    if (isPromiseLike(callbackOutput)) {
	      return callbackOutput.then(function() {
	        return makePromise(value, isResolved);
	      }, function(error) {
	        return makePromise(error, false);
	      });
	    } else {
	      return makePromise(value, isResolved);
	    }
	  };

	  /**
	   * @ngdoc method
	   * @name $q#when
	   * @kind function
	   *
	   * @description
	   * Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise.
	   * This is useful when you are dealing with an object that might or might not be a promise, or if
	   * the promise comes from a source that can't be trusted.
	   *
	   * @param {*} value Value or a promise
	   * @returns {Promise} Returns a promise of the passed value or promise
	   */


	  var when = function(value, callback, errback, progressBack) {
	    var result = new Deferred();
	    result.resolve(value);
	    return result.promise.then(callback, errback, progressBack);
	  };

	  /**
	   * @ngdoc method
	   * @name $q#all
	   * @kind function
	   *
	   * @description
	   * Combines multiple promises into a single promise that is resolved when all of the input
	   * promises are resolved.
	   *
	   * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.
	   * @returns {Promise} Returns a single promise that will be resolved with an array/hash of values,
	   *   each value corresponding to the promise at the same index/key in the `promises` array/hash.
	   *   If any of the promises is resolved with a rejection, this resulting promise will be rejected
	   *   with the same rejection value.
	   */

	  function all(promises) {
	    var deferred = new Deferred(),
	        counter = 0,
	        results = isArray(promises) ? [] : {};

	    forEach(promises, function(promise, key) {
	      counter++;
	      when(promise).then(function(value) {
	        if (results.hasOwnProperty(key)) return;
	        results[key] = value;
	        if (!(--counter)) deferred.resolve(results);
	      }, function(reason) {
	        if (results.hasOwnProperty(key)) return;
	        deferred.reject(reason);
	      });
	    });

	    if (counter === 0) {
	      deferred.resolve(results);
	    }

	    return deferred.promise;
	  }

	  var $Q = function Q(resolver) {
	    if (!isFunction(resolver)) {
	      throw $qMinErr('norslvr', "Expected resolverFn, got '{0}'", resolver);
	    }

	    if (!(this instanceof Q)) {
	      // More useful when $Q is the Promise itself.
	      return new Q(resolver);
	    }

	    var deferred = new Deferred();

	    function resolveFn(value) {
	      deferred.resolve(value);
	    }

	    function rejectFn(reason) {
	      deferred.reject(reason);
	    }

	    resolver(resolveFn, rejectFn);

	    return deferred.promise;
	  };

	  $Q.defer = defer;
	  $Q.reject = reject;
	  $Q.when = when;
	  $Q.all = all;

	  return $Q;
	}

	function $$RAFProvider() { //rAF
	  this.$get = ['$window', '$timeout', function($window, $timeout) {
	    var requestAnimationFrame = $window.requestAnimationFrame ||
	                                $window.webkitRequestAnimationFrame;

	    var cancelAnimationFrame = $window.cancelAnimationFrame ||
	                               $window.webkitCancelAnimationFrame ||
	                               $window.webkitCancelRequestAnimationFrame;

	    var rafSupported = !!requestAnimationFrame;
	    var rafFn = rafSupported
	      ? function(fn) {
	          var id = requestAnimationFrame(fn);
	          return function() {
	            cancelAnimationFrame(id);
	          };
	        }
	      : function(fn) {
	          var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666
	          return function() {
	            $timeout.cancel(timer);
	          };
	        };

	    queueFn.supported = rafSupported;

	    var cancelLastRAF;
	    var taskCount = 0;
	    var taskQueue = [];
	    return queueFn;

	    function flush() {
	      for (var i = 0; i < taskQueue.length; i++) {
	        var task = taskQueue[i];
	        if (task) {
	          taskQueue[i] = null;
	          task();
	        }
	      }
	      taskCount = taskQueue.length = 0;
	    }

	    function queueFn(asyncFn) {
	      var index = taskQueue.length;

	      taskCount++;
	      taskQueue.push(asyncFn);

	      if (index === 0) {
	        cancelLastRAF = rafFn(flush);
	      }

	      return function cancelQueueFn() {
	        if (index >= 0) {
	          taskQueue[index] = null;
	          index = null;

	          if (--taskCount === 0 && cancelLastRAF) {
	            cancelLastRAF();
	            cancelLastRAF = null;
	            taskQueue.length = 0;
	          }
	        }
	      };
	    }
	  }];
	}

	/**
	 * DESIGN NOTES
	 *
	 * The design decisions behind the scope are heavily favored for speed and memory consumption.
	 *
	 * The typical use of scope is to watch the expressions, which most of the time return the same
	 * value as last time so we optimize the operation.
	 *
	 * Closures construction is expensive in terms of speed as well as memory:
	 *   - No closures, instead use prototypical inheritance for API
	 *   - Internal state needs to be stored on scope directly, which means that private state is
	 *     exposed as $$____ properties
	 *
	 * Loop operations are optimized by using while(count--) { ... }
	 *   - this means that in order to keep the same order of execution as addition we have to add
	 *     items to the array at the beginning (unshift) instead of at the end (push)
	 *
	 * Child scopes are created and removed often
	 *   - Using an array would be slow since inserts in middle are expensive so we use linked list
	 *
	 * There are few watches then a lot of observers. This is why you don't want the observer to be
	 * implemented in the same way as watch. Watch requires return of initialization function which
	 * are expensive to construct.
	 */


	/**
	 * @ngdoc provider
	 * @name $rootScopeProvider
	 * @description
	 *
	 * Provider for the $rootScope service.
	 */

	/**
	 * @ngdoc method
	 * @name $rootScopeProvider#digestTtl
	 * @description
	 *
	 * Sets the number of `$digest` iterations the scope should attempt to execute before giving up and
	 * assuming that the model is unstable.
	 *
	 * The current default is 10 iterations.
	 *
	 * In complex applications it's possible that the dependencies between `$watch`s will result in
	 * several digest iterations. However if an application needs more than the default 10 digest
	 * iterations for its model to stabilize then you should investigate what is causing the model to
	 * continuously change during the digest.
	 *
	 * Increasing the TTL could have performance implications, so you should not change it without
	 * proper justification.
	 *
	 * @param {number} limit The number of digest iterations.
	 */


	/**
	 * @ngdoc service
	 * @name $rootScope
	 * @description
	 *
	 * Every application has a single root {@link ng.$rootScope.Scope scope}.
	 * All other scopes are descendant scopes of the root scope. Scopes provide separation
	 * between the model and the view, via a mechanism for watching the model for changes.
	 * They also provide an event emission/broadcast and subscription facility. See the
	 * {@link guide/scope developer guide on scopes}.
	 */
	function $RootScopeProvider() {
	  var TTL = 10;
	  var $rootScopeMinErr = minErr('$rootScope');
	  var lastDirtyWatch = null;
	  var applyAsyncId = null;

	  this.digestTtl = function(value) {
	    if (arguments.length) {
	      TTL = value;
	    }
	    return TTL;
	  };

	  function createChildScopeClass(parent) {
	    function ChildScope() {
	      this.$$watchers = this.$$nextSibling =
	          this.$$childHead = this.$$childTail = null;
	      this.$$listeners = {};
	      this.$$listenerCount = {};
	      this.$$watchersCount = 0;
	      this.$id = nextUid();
	      this.$$ChildScope = null;
	    }
	    ChildScope.prototype = parent;
	    return ChildScope;
	  }

	  this.$get = ['$injector', '$exceptionHandler', '$parse', '$browser',
	      function($injector, $exceptionHandler, $parse, $browser) {

	    function destroyChildScope($event) {
	        $event.currentScope.$$destroyed = true;
	    }

	    /**
	     * @ngdoc type
	     * @name $rootScope.Scope
	     *
	     * @description
	     * A root scope can be retrieved using the {@link ng.$rootScope $rootScope} key from the
	     * {@link auto.$injector $injector}. Child scopes are created using the
	     * {@link ng.$rootScope.Scope#$new $new()} method. (Most scopes are created automatically when
	     * compiled HTML template is executed.)
	     *
	     * Here is a simple scope snippet to show how you can interact with the scope.
	     * ```html
	     * <file src="./test/ng/rootScopeSpec.js" tag="docs1" />
	     * ```
	     *
	     * # Inheritance
	     * A scope can inherit from a parent scope, as in this example:
	     * ```js
	         var parent = $rootScope;
	         var child = parent.$new();

	         parent.salutation = "Hello";
	         expect(child.salutation).toEqual('Hello');

	         child.salutation = "Welcome";
	         expect(child.salutation).toEqual('Welcome');
	         expect(parent.salutation).toEqual('Hello');
	     * ```
	     *
	     * When interacting with `Scope` in tests, additional helper methods are available on the
	     * instances of `Scope` type. See {@link ngMock.$rootScope.Scope ngMock Scope} for additional
	     * details.
	     *
	     *
	     * @param {Object.<string, function()>=} providers Map of service factory which need to be
	     *                                       provided for the current scope. Defaults to {@link ng}.
	     * @param {Object.<string, *>=} instanceCache Provides pre-instantiated services which should
	     *                              append/override services provided by `providers`. This is handy
	     *                              when unit-testing and having the need to override a default
	     *                              service.
	     * @returns {Object} Newly created scope.
	     *
	     */
	    function Scope() {
	      this.$id = nextUid();
	      this.$$phase = this.$parent = this.$$watchers =
	                     this.$$nextSibling = this.$$prevSibling =
	                     this.$$childHead = this.$$childTail = null;
	      this.$root = this;
	      this.$$destroyed = false;
	      this.$$listeners = {};
	      this.$$listenerCount = {};
	      this.$$watchersCount = 0;
	      this.$$isolateBindings = null;
	    }

	    /**
	     * @ngdoc property
	     * @name $rootScope.Scope#$id
	     *
	     * @description
	     * Unique scope ID (monotonically increasing) useful for debugging.
	     */

	     /**
	      * @ngdoc property
	      * @name $rootScope.Scope#$parent
	      *
	      * @description
	      * Reference to the parent scope.
	      */

	      /**
	       * @ngdoc property
	       * @name $rootScope.Scope#$root
	       *
	       * @description
	       * Reference to the root scope.
	       */

	    Scope.prototype = {
	      constructor: Scope,
	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$new
	       * @kind function
	       *
	       * @description
	       * Creates a new child {@link ng.$rootScope.Scope scope}.
	       *
	       * The parent scope will propagate the {@link ng.$rootScope.Scope#$digest $digest()} event.
	       * The scope can be removed from the scope hierarchy using {@link ng.$rootScope.Scope#$destroy $destroy()}.
	       *
	       * {@link ng.$rootScope.Scope#$destroy $destroy()} must be called on a scope when it is
	       * desired for the scope and its child scopes to be permanently detached from the parent and
	       * thus stop participating in model change detection and listener notification by invoking.
	       *
	       * @param {boolean} isolate If true, then the scope does not prototypically inherit from the
	       *         parent scope. The scope is isolated, as it can not see parent scope properties.
	       *         When creating widgets, it is useful for the widget to not accidentally read parent
	       *         state.
	       *
	       * @param {Scope} [parent=this] The {@link ng.$rootScope.Scope `Scope`} that will be the `$parent`
	       *                              of the newly created scope. Defaults to `this` scope if not provided.
	       *                              This is used when creating a transclude scope to correctly place it
	       *                              in the scope hierarchy while maintaining the correct prototypical
	       *                              inheritance.
	       *
	       * @returns {Object} The newly created child scope.
	       *
	       */
	      $new: function(isolate, parent) {
	        var child;

	        parent = parent || this;

	        if (isolate) {
	          child = new Scope();
	          child.$root = this.$root;
	        } else {
	          // Only create a child scope class if somebody asks for one,
	          // but cache it to allow the VM to optimize lookups.
	          if (!this.$$ChildScope) {
	            this.$$ChildScope = createChildScopeClass(this);
	          }
	          child = new this.$$ChildScope();
	        }
	        child.$parent = parent;
	        child.$$prevSibling = parent.$$childTail;
	        if (parent.$$childHead) {
	          parent.$$childTail.$$nextSibling = child;
	          parent.$$childTail = child;
	        } else {
	          parent.$$childHead = parent.$$childTail = child;
	        }

	        // When the new scope is not isolated or we inherit from `this`, and
	        // the parent scope is destroyed, the property `$$destroyed` is inherited
	        // prototypically. In all other cases, this property needs to be set
	        // when the parent scope is destroyed.
	        // The listener needs to be added after the parent is set
	        if (isolate || parent != this) child.$on('$destroy', destroyChildScope);

	        return child;
	      },

	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$watch
	       * @kind function
	       *
	       * @description
	       * Registers a `listener` callback to be executed whenever the `watchExpression` changes.
	       *
	       * - The `watchExpression` is called on every call to {@link ng.$rootScope.Scope#$digest
	       *   $digest()} and should return the value that will be watched. (Since
	       *   {@link ng.$rootScope.Scope#$digest $digest()} reruns when it detects changes the
	       *   `watchExpression` can execute multiple times per
	       *   {@link ng.$rootScope.Scope#$digest $digest()} and should be idempotent.)
	       * - The `listener` is called only when the value from the current `watchExpression` and the
	       *   previous call to `watchExpression` are not equal (with the exception of the initial run,
	       *   see below). Inequality is determined according to reference inequality,
	       *   [strict comparison](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators)
	       *    via the `!==` Javascript operator, unless `objectEquality == true`
	       *   (see next point)
	       * - When `objectEquality == true`, inequality of the `watchExpression` is determined
	       *   according to the {@link angular.equals} function. To save the value of the object for
	       *   later comparison, the {@link angular.copy} function is used. This therefore means that
	       *   watching complex objects will have adverse memory and performance implications.
	       * - The watch `listener` may change the model, which may trigger other `listener`s to fire.
	       *   This is achieved by rerunning the watchers until no changes are detected. The rerun
	       *   iteration limit is 10 to prevent an infinite loop deadlock.
	       *
	       *
	       * If you want to be notified whenever {@link ng.$rootScope.Scope#$digest $digest} is called,
	       * you can register a `watchExpression` function with no `listener`. (Since `watchExpression`
	       * can execute multiple times per {@link ng.$rootScope.Scope#$digest $digest} cycle when a
	       * change is detected, be prepared for multiple calls to your listener.)
	       *
	       * After a watcher is registered with the scope, the `listener` fn is called asynchronously
	       * (via {@link ng.$rootScope.Scope#$evalAsync $evalAsync}) to initialize the
	       * watcher. In rare cases, this is undesirable because the listener is called when the result
	       * of `watchExpression` didn't change. To detect this scenario within the `listener` fn, you
	       * can compare the `newVal` and `oldVal`. If these two values are identical (`===`) then the
	       * listener was called due to initialization.
	       *
	       *
	       *
	       * # Example
	       * ```js
	           // let's assume that scope was dependency injected as the $rootScope
	           var scope = $rootScope;
	           scope.name = 'misko';
	           scope.counter = 0;

	           expect(scope.counter).toEqual(0);
	           scope.$watch('name', function(newValue, oldValue) {
	             scope.counter = scope.counter + 1;
	           });
	           expect(scope.counter).toEqual(0);

	           scope.$digest();
	           // the listener is always called during the first $digest loop after it was registered
	           expect(scope.counter).toEqual(1);

	           scope.$digest();
	           // but now it will not be called unless the value changes
	           expect(scope.counter).toEqual(1);

	           scope.name = 'adam';
	           scope.$digest();
	           expect(scope.counter).toEqual(2);



	           // Using a function as a watchExpression
	           var food;
	           scope.foodCounter = 0;
	           expect(scope.foodCounter).toEqual(0);
	           scope.$watch(
	             // This function returns the value being watched. It is called for each turn of the $digest loop
	             function() { return food; },
	             // This is the change listener, called when the value returned from the above function changes
	             function(newValue, oldValue) {
	               if ( newValue !== oldValue ) {
	                 // Only increment the counter if the value changed
	                 scope.foodCounter = scope.foodCounter + 1;
	               }
	             }
	           );
	           // No digest has been run so the counter will be zero
	           expect(scope.foodCounter).toEqual(0);

	           // Run the digest but since food has not changed count will still be zero
	           scope.$digest();
	           expect(scope.foodCounter).toEqual(0);

	           // Update food and run digest.  Now the counter will increment
	           food = 'cheeseburger';
	           scope.$digest();
	           expect(scope.foodCounter).toEqual(1);

	       * ```
	       *
	       *
	       *
	       * @param {(function()|string)} watchExpression Expression that is evaluated on each
	       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. A change in the return value triggers
	       *    a call to the `listener`.
	       *
	       *    - `string`: Evaluated as {@link guide/expression expression}
	       *    - `function(scope)`: called with current `scope` as a parameter.
	       * @param {function(newVal, oldVal, scope)} listener Callback called whenever the value
	       *    of `watchExpression` changes.
	       *
	       *    - `newVal` contains the current value of the `watchExpression`
	       *    - `oldVal` contains the previous value of the `watchExpression`
	       *    - `scope` refers to the current scope
	       * @param {boolean=} objectEquality Compare for object equality using {@link angular.equals} instead of
	       *     comparing for reference equality.
	       * @returns {function()} Returns a deregistration function for this listener.
	       */
	      $watch: function(watchExp, listener, objectEquality, prettyPrintExpression) {
	        var get = $parse(watchExp);

	        if (get.$$watchDelegate) {
	          return get.$$watchDelegate(this, listener, objectEquality, get, watchExp);
	        }
	        var scope = this,
	            array = scope.$$watchers,
	            watcher = {
	              fn: listener,
	              last: initWatchVal,
	              get: get,
	              exp: prettyPrintExpression || watchExp,
	              eq: !!objectEquality
	            };

	        lastDirtyWatch = null;

	        if (!isFunction(listener)) {
	          watcher.fn = noop;
	        }

	        if (!array) {
	          array = scope.$$watchers = [];
	        }
	        // we use unshift since we use a while loop in $digest for speed.
	        // the while loop reads in reverse order.
	        array.unshift(watcher);
	        incrementWatchersCount(this, 1);

	        return function deregisterWatch() {
	          if (arrayRemove(array, watcher) >= 0) {
	            incrementWatchersCount(scope, -1);
	          }
	          lastDirtyWatch = null;
	        };
	      },

	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$watchGroup
	       * @kind function
	       *
	       * @description
	       * A variant of {@link ng.$rootScope.Scope#$watch $watch()} where it watches an array of `watchExpressions`.
	       * If any one expression in the collection changes the `listener` is executed.
	       *
	       * - The items in the `watchExpressions` array are observed via standard $watch operation and are examined on every
	       *   call to $digest() to see if any items changes.
	       * - The `listener` is called whenever any expression in the `watchExpressions` array changes.
	       *
	       * @param {Array.<string|Function(scope)>} watchExpressions Array of expressions that will be individually
	       * watched using {@link ng.$rootScope.Scope#$watch $watch()}
	       *
	       * @param {function(newValues, oldValues, scope)} listener Callback called whenever the return value of any
	       *    expression in `watchExpressions` changes
	       *    The `newValues` array contains the current values of the `watchExpressions`, with the indexes matching
	       *    those of `watchExpression`
	       *    and the `oldValues` array contains the previous values of the `watchExpressions`, with the indexes matching
	       *    those of `watchExpression`
	       *    The `scope` refers to the current scope.
	       * @returns {function()} Returns a de-registration function for all listeners.
	       */
	      $watchGroup: function(watchExpressions, listener) {
	        var oldValues = new Array(watchExpressions.length);
	        var newValues = new Array(watchExpressions.length);
	        var deregisterFns = [];
	        var self = this;
	        var changeReactionScheduled = false;
	        var firstRun = true;

	        if (!watchExpressions.length) {
	          // No expressions means we call the listener ASAP
	          var shouldCall = true;
	          self.$evalAsync(function() {
	            if (shouldCall) listener(newValues, newValues, self);
	          });
	          return function deregisterWatchGroup() {
	            shouldCall = false;
	          };
	        }

	        if (watchExpressions.length === 1) {
	          // Special case size of one
	          return this.$watch(watchExpressions[0], function watchGroupAction(value, oldValue, scope) {
	            newValues[0] = value;
	            oldValues[0] = oldValue;
	            listener(newValues, (value === oldValue) ? newValues : oldValues, scope);
	          });
	        }

	        forEach(watchExpressions, function(expr, i) {
	          var unwatchFn = self.$watch(expr, function watchGroupSubAction(value, oldValue) {
	            newValues[i] = value;
	            oldValues[i] = oldValue;
	            if (!changeReactionScheduled) {
	              changeReactionScheduled = true;
	              self.$evalAsync(watchGroupAction);
	            }
	          });
	          deregisterFns.push(unwatchFn);
	        });

	        function watchGroupAction() {
	          changeReactionScheduled = false;

	          if (firstRun) {
	            firstRun = false;
	            listener(newValues, newValues, self);
	          } else {
	            listener(newValues, oldValues, self);
	          }
	        }

	        return function deregisterWatchGroup() {
	          while (deregisterFns.length) {
	            deregisterFns.shift()();
	          }
	        };
	      },


	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$watchCollection
	       * @kind function
	       *
	       * @description
	       * Shallow watches the properties of an object and fires whenever any of the properties change
	       * (for arrays, this implies watching the array items; for object maps, this implies watching
	       * the properties). If a change is detected, the `listener` callback is fired.
	       *
	       * - The `obj` collection is observed via standard $watch operation and is examined on every
	       *   call to $digest() to see if any items have been added, removed, or moved.
	       * - The `listener` is called whenever anything within the `obj` has changed. Examples include
	       *   adding, removing, and moving items belonging to an object or array.
	       *
	       *
	       * # Example
	       * ```js
	          $scope.names = ['igor', 'matias', 'misko', 'james'];
	          $scope.dataCount = 4;

	          $scope.$watchCollection('names', function(newNames, oldNames) {
	            $scope.dataCount = newNames.length;
	          });

	          expect($scope.dataCount).toEqual(4);
	          $scope.$digest();

	          //still at 4 ... no changes
	          expect($scope.dataCount).toEqual(4);

	          $scope.names.pop();
	          $scope.$digest();

	          //now there's been a change
	          expect($scope.dataCount).toEqual(3);
	       * ```
	       *
	       *
	       * @param {string|function(scope)} obj Evaluated as {@link guide/expression expression}. The
	       *    expression value should evaluate to an object or an array which is observed on each
	       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. Any shallow change within the
	       *    collection will trigger a call to the `listener`.
	       *
	       * @param {function(newCollection, oldCollection, scope)} listener a callback function called
	       *    when a change is detected.
	       *    - The `newCollection` object is the newly modified data obtained from the `obj` expression
	       *    - The `oldCollection` object is a copy of the former collection data.
	       *      Due to performance considerations, the`oldCollection` value is computed only if the
	       *      `listener` function declares two or more arguments.
	       *    - The `scope` argument refers to the current scope.
	       *
	       * @returns {function()} Returns a de-registration function for this listener. When the
	       *    de-registration function is executed, the internal watch operation is terminated.
	       */
	      $watchCollection: function(obj, listener) {
	        $watchCollectionInterceptor.$stateful = true;

	        var self = this;
	        // the current value, updated on each dirty-check run
	        var newValue;
	        // a shallow copy of the newValue from the last dirty-check run,
	        // updated to match newValue during dirty-check run
	        var oldValue;
	        // a shallow copy of the newValue from when the last change happened
	        var veryOldValue;
	        // only track veryOldValue if the listener is asking for it
	        var trackVeryOldValue = (listener.length > 1);
	        var changeDetected = 0;
	        var changeDetector = $parse(obj, $watchCollectionInterceptor);
	        var internalArray = [];
	        var internalObject = {};
	        var initRun = true;
	        var oldLength = 0;

	        function $watchCollectionInterceptor(_value) {
	          newValue = _value;
	          var newLength, key, bothNaN, newItem, oldItem;

	          // If the new value is undefined, then return undefined as the watch may be a one-time watch
	          if (isUndefined(newValue)) return;

	          if (!isObject(newValue)) { // if primitive
	            if (oldValue !== newValue) {
	              oldValue = newValue;
	              changeDetected++;
	            }
	          } else if (isArrayLike(newValue)) {
	            if (oldValue !== internalArray) {
	              // we are transitioning from something which was not an array into array.
	              oldValue = internalArray;
	              oldLength = oldValue.length = 0;
	              changeDetected++;
	            }

	            newLength = newValue.length;

	            if (oldLength !== newLength) {
	              // if lengths do not match we need to trigger change notification
	              changeDetected++;
	              oldValue.length = oldLength = newLength;
	            }
	            // copy the items to oldValue and look for changes.
	            for (var i = 0; i < newLength; i++) {
	              oldItem = oldValue[i];
	              newItem = newValue[i];

	              bothNaN = (oldItem !== oldItem) && (newItem !== newItem);
	              if (!bothNaN && (oldItem !== newItem)) {
	                changeDetected++;
	                oldValue[i] = newItem;
	              }
	            }
	          } else {
	            if (oldValue !== internalObject) {
	              // we are transitioning from something which was not an object into object.
	              oldValue = internalObject = {};
	              oldLength = 0;
	              changeDetected++;
	            }
	            // copy the items to oldValue and look for changes.
	            newLength = 0;
	            for (key in newValue) {
	              if (newValue.hasOwnProperty(key)) {
	                newLength++;
	                newItem = newValue[key];
	                oldItem = oldValue[key];

	                if (key in oldValue) {
	                  bothNaN = (oldItem !== oldItem) && (newItem !== newItem);
	                  if (!bothNaN && (oldItem !== newItem)) {
	                    changeDetected++;
	                    oldValue[key] = newItem;
	                  }
	                } else {
	                  oldLength++;
	                  oldValue[key] = newItem;
	                  changeDetected++;
	                }
	              }
	            }
	            if (oldLength > newLength) {
	              // we used to have more keys, need to find them and destroy them.
	              changeDetected++;
	              for (key in oldValue) {
	                if (!newValue.hasOwnProperty(key)) {
	                  oldLength--;
	                  delete oldValue[key];
	                }
	              }
	            }
	          }
	          return changeDetected;
	        }

	        function $watchCollectionAction() {
	          if (initRun) {
	            initRun = false;
	            listener(newValue, newValue, self);
	          } else {
	            listener(newValue, veryOldValue, self);
	          }

	          // make a copy for the next time a collection is changed
	          if (trackVeryOldValue) {
	            if (!isObject(newValue)) {
	              //primitive
	              veryOldValue = newValue;
	            } else if (isArrayLike(newValue)) {
	              veryOldValue = new Array(newValue.length);
	              for (var i = 0; i < newValue.length; i++) {
	                veryOldValue[i] = newValue[i];
	              }
	            } else { // if object
	              veryOldValue = {};
	              for (var key in newValue) {
	                if (hasOwnProperty.call(newValue, key)) {
	                  veryOldValue[key] = newValue[key];
	                }
	              }
	            }
	          }
	        }

	        return this.$watch(changeDetector, $watchCollectionAction);
	      },

	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$digest
	       * @kind function
	       *
	       * @description
	       * Processes all of the {@link ng.$rootScope.Scope#$watch watchers} of the current scope and
	       * its children. Because a {@link ng.$rootScope.Scope#$watch watcher}'s listener can change
	       * the model, the `$digest()` keeps calling the {@link ng.$rootScope.Scope#$watch watchers}
	       * until no more listeners are firing. This means that it is possible to get into an infinite
	       * loop. This function will throw `'Maximum iteration limit exceeded.'` if the number of
	       * iterations exceeds 10.
	       *
	       * Usually, you don't call `$digest()` directly in
	       * {@link ng.directive:ngController controllers} or in
	       * {@link ng.$compileProvider#directive directives}.
	       * Instead, you should call {@link ng.$rootScope.Scope#$apply $apply()} (typically from within
	       * a {@link ng.$compileProvider#directive directive}), which will force a `$digest()`.
	       *
	       * If you want to be notified whenever `$digest()` is called,
	       * you can register a `watchExpression` function with
	       * {@link ng.$rootScope.Scope#$watch $watch()} with no `listener`.
	       *
	       * In unit tests, you may need to call `$digest()` to simulate the scope life cycle.
	       *
	       * # Example
	       * ```js
	           var scope = ...;
	           scope.name = 'misko';
	           scope.counter = 0;

	           expect(scope.counter).toEqual(0);
	           scope.$watch('name', function(newValue, oldValue) {
	             scope.counter = scope.counter + 1;
	           });
	           expect(scope.counter).toEqual(0);

	           scope.$digest();
	           // the listener is always called during the first $digest loop after it was registered
	           expect(scope.counter).toEqual(1);

	           scope.$digest();
	           // but now it will not be called unless the value changes
	           expect(scope.counter).toEqual(1);

	           scope.name = 'adam';
	           scope.$digest();
	           expect(scope.counter).toEqual(2);
	       * ```
	       *
	       */
	      $digest: function() {
	        var watch, value, last,
	            watchers,
	            length,
	            dirty, ttl = TTL,
	            next, current, target = this,
	            watchLog = [],
	            logIdx, logMsg, asyncTask;

	        beginPhase('$digest');
	        // Check for changes to browser url that happened in sync before the call to $digest
	        $browser.$$checkUrlChange();

	        if (this === $rootScope && applyAsyncId !== null) {
	          // If this is the root scope, and $applyAsync has scheduled a deferred $apply(), then
	          // cancel the scheduled $apply and flush the queue of expressions to be evaluated.
	          $browser.defer.cancel(applyAsyncId);
	          flushApplyAsync();
	        }

	        lastDirtyWatch = null;

	        do { // "while dirty" loop
	          dirty = false;
	          current = target;

	          while (asyncQueue.length) {
	            try {
	              asyncTask = asyncQueue.shift();
	              asyncTask.scope.$eval(asyncTask.expression, asyncTask.locals);
	            } catch (e) {
	              $exceptionHandler(e);
	            }
	            lastDirtyWatch = null;
	          }

	          traverseScopesLoop:
	          do { // "traverse the scopes" loop
	            if ((watchers = current.$$watchers)) {
	              // process our watches
	              length = watchers.length;
	              while (length--) {
	                try {
	                  watch = watchers[length];
	                  // Most common watches are on primitives, in which case we can short
	                  // circuit it with === operator, only when === fails do we use .equals
	                  if (watch) {
	                    if ((value = watch.get(current)) !== (last = watch.last) &&
	                        !(watch.eq
	                            ? equals(value, last)
	                            : (typeof value === 'number' && typeof last === 'number'
	                               && isNaN(value) && isNaN(last)))) {
	                      dirty = true;
	                      lastDirtyWatch = watch;
	                      watch.last = watch.eq ? copy(value, null) : value;
	                      watch.fn(value, ((last === initWatchVal) ? value : last), current);
	                      if (ttl < 5) {
	                        logIdx = 4 - ttl;
	                        if (!watchLog[logIdx]) watchLog[logIdx] = [];
	                        watchLog[logIdx].push({
	                          msg: isFunction(watch.exp) ? 'fn: ' + (watch.exp.name || watch.exp.toString()) : watch.exp,
	                          newVal: value,
	                          oldVal: last
	                        });
	                      }
	                    } else if (watch === lastDirtyWatch) {
	                      // If the most recently dirty watcher is now clean, short circuit since the remaining watchers
	                      // have already been tested.
	                      dirty = false;
	                      break traverseScopesLoop;
	                    }
	                  }
	                } catch (e) {
	                  $exceptionHandler(e);
	                }
	              }
	            }

	            // Insanity Warning: scope depth-first traversal
	            // yes, this code is a bit crazy, but it works and we have tests to prove it!
	            // this piece should be kept in sync with the traversal in $broadcast
	            if (!(next = ((current.$$watchersCount && current.$$childHead) ||
	                (current !== target && current.$$nextSibling)))) {
	              while (current !== target && !(next = current.$$nextSibling)) {
	                current = current.$parent;
	              }
	            }
	          } while ((current = next));

	          // `break traverseScopesLoop;` takes us to here

	          if ((dirty || asyncQueue.length) && !(ttl--)) {
	            clearPhase();
	            throw $rootScopeMinErr('infdig',
	                '{0} $digest() iterations reached. Aborting!\n' +
	                'Watchers fired in the last 5 iterations: {1}',
	                TTL, watchLog);
	          }

	        } while (dirty || asyncQueue.length);

	        clearPhase();

	        while (postDigestQueue.length) {
	          try {
	            postDigestQueue.shift()();
	          } catch (e) {
	            $exceptionHandler(e);
	          }
	        }
	      },


	      /**
	       * @ngdoc event
	       * @name $rootScope.Scope#$destroy
	       * @eventType broadcast on scope being destroyed
	       *
	       * @description
	       * Broadcasted when a scope and its children are being destroyed.
	       *
	       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
	       * clean up DOM bindings before an element is removed from the DOM.
	       */

	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$destroy
	       * @kind function
	       *
	       * @description
	       * Removes the current scope (and all of its children) from the parent scope. Removal implies
	       * that calls to {@link ng.$rootScope.Scope#$digest $digest()} will no longer
	       * propagate to the current scope and its children. Removal also implies that the current
	       * scope is eligible for garbage collection.
	       *
	       * The `$destroy()` is usually used by directives such as
	       * {@link ng.directive:ngRepeat ngRepeat} for managing the
	       * unrolling of the loop.
	       *
	       * Just before a scope is destroyed, a `$destroy` event is broadcasted on this scope.
	       * Application code can register a `$destroy` event handler that will give it a chance to
	       * perform any necessary cleanup.
	       *
	       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
	       * clean up DOM bindings before an element is removed from the DOM.
	       */
	      $destroy: function() {
	        // We can't destroy a scope that has been already destroyed.
	        if (this.$$destroyed) return;
	        var parent = this.$parent;

	        this.$broadcast('$destroy');
	        this.$$destroyed = true;

	        if (this === $rootScope) {
	          //Remove handlers attached to window when $rootScope is removed
	          $browser.$$applicationDestroyed();
	        }

	        incrementWatchersCount(this, -this.$$watchersCount);
	        for (var eventName in this.$$listenerCount) {
	          decrementListenerCount(this, this.$$listenerCount[eventName], eventName);
	        }

	        // sever all the references to parent scopes (after this cleanup, the current scope should
	        // not be retained by any of our references and should be eligible for garbage collection)
	        if (parent && parent.$$childHead == this) parent.$$childHead = this.$$nextSibling;
	        if (parent && parent.$$childTail == this) parent.$$childTail = this.$$prevSibling;
	        if (this.$$prevSibling) this.$$prevSibling.$$nextSibling = this.$$nextSibling;
	        if (this.$$nextSibling) this.$$nextSibling.$$prevSibling = this.$$prevSibling;

	        // Disable listeners, watchers and apply/digest methods
	        this.$destroy = this.$digest = this.$apply = this.$evalAsync = this.$applyAsync = noop;
	        this.$on = this.$watch = this.$watchGroup = function() { return noop; };
	        this.$$listeners = {};

	        // All of the code below is bogus code that works around V8's memory leak via optimized code
	        // and inline caches.
	        //
	        // see:
	        // - https://code.google.com/p/v8/issues/detail?id=2073#c26
	        // - https://github.com/angular/angular.js/issues/6794#issuecomment-38648909
	        // - https://github.com/angular/angular.js/issues/1313#issuecomment-10378451

	        this.$parent = this.$$nextSibling = this.$$prevSibling = this.$$childHead =
	            this.$$childTail = this.$root = this.$$watchers = null;
	      },

	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$eval
	       * @kind function
	       *
	       * @description
	       * Executes the `expression` on the current scope and returns the result. Any exceptions in
	       * the expression are propagated (uncaught). This is useful when evaluating Angular
	       * expressions.
	       *
	       * # Example
	       * ```js
	           var scope = ng.$rootScope.Scope();
	           scope.a = 1;
	           scope.b = 2;

	           expect(scope.$eval('a+b')).toEqual(3);
	           expect(scope.$eval(function(scope){ return scope.a + scope.b; })).toEqual(3);
	       * ```
	       *
	       * @param {(string|function())=} expression An angular expression to be executed.
	       *
	       *    - `string`: execute using the rules as defined in  {@link guide/expression expression}.
	       *    - `function(scope)`: execute the function with the current `scope` parameter.
	       *
	       * @param {(object)=} locals Local variables object, useful for overriding values in scope.
	       * @returns {*} The result of evaluating the expression.
	       */
	      $eval: function(expr, locals) {
	        return $parse(expr)(this, locals);
	      },

	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$evalAsync
	       * @kind function
	       *
	       * @description
	       * Executes the expression on the current scope at a later point in time.
	       *
	       * The `$evalAsync` makes no guarantees as to when the `expression` will be executed, only
	       * that:
	       *
	       *   - it will execute after the function that scheduled the evaluation (preferably before DOM
	       *     rendering).
	       *   - at least one {@link ng.$rootScope.Scope#$digest $digest cycle} will be performed after
	       *     `expression` execution.
	       *
	       * Any exceptions from the execution of the expression are forwarded to the
	       * {@link ng.$exceptionHandler $exceptionHandler} service.
	       *
	       * __Note:__ if this function is called outside of a `$digest` cycle, a new `$digest` cycle
	       * will be scheduled. However, it is encouraged to always call code that changes the model
	       * from within an `$apply` call. That includes code evaluated via `$evalAsync`.
	       *
	       * @param {(string|function())=} expression An angular expression to be executed.
	       *
	       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
	       *    - `function(scope)`: execute the function with the current `scope` parameter.
	       *
	       * @param {(object)=} locals Local variables object, useful for overriding values in scope.
	       */
	      $evalAsync: function(expr, locals) {
	        // if we are outside of an $digest loop and this is the first time we are scheduling async
	        // task also schedule async auto-flush
	        if (!$rootScope.$$phase && !asyncQueue.length) {
	          $browser.defer(function() {
	            if (asyncQueue.length) {
	              $rootScope.$digest();
	            }
	          });
	        }

	        asyncQueue.push({scope: this, expression: expr, locals: locals});
	      },

	      $$postDigest: function(fn) {
	        postDigestQueue.push(fn);
	      },

	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$apply
	       * @kind function
	       *
	       * @description
	       * `$apply()` is used to execute an expression in angular from outside of the angular
	       * framework. (For example from browser DOM events, setTimeout, XHR or third party libraries).
	       * Because we are calling into the angular framework we need to perform proper scope life
	       * cycle of {@link ng.$exceptionHandler exception handling},
	       * {@link ng.$rootScope.Scope#$digest executing watches}.
	       *
	       * ## Life cycle
	       *
	       * # Pseudo-Code of `$apply()`
	       * ```js
	           function $apply(expr) {
	             try {
	               return $eval(expr);
	             } catch (e) {
	               $exceptionHandler(e);
	             } finally {
	               $root.$digest();
	             }
	           }
	       * ```
	       *
	       *
	       * Scope's `$apply()` method transitions through the following stages:
	       *
	       * 1. The {@link guide/expression expression} is executed using the
	       *    {@link ng.$rootScope.Scope#$eval $eval()} method.
	       * 2. Any exceptions from the execution of the expression are forwarded to the
	       *    {@link ng.$exceptionHandler $exceptionHandler} service.
	       * 3. The {@link ng.$rootScope.Scope#$watch watch} listeners are fired immediately after the
	       *    expression was executed using the {@link ng.$rootScope.Scope#$digest $digest()} method.
	       *
	       *
	       * @param {(string|function())=} exp An angular expression to be executed.
	       *
	       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
	       *    - `function(scope)`: execute the function with current `scope` parameter.
	       *
	       * @returns {*} The result of evaluating the expression.
	       */
	      $apply: function(expr) {
	        try {
	          beginPhase('$apply');
	          return this.$eval(expr);
	        } catch (e) {
	          $exceptionHandler(e);
	        } finally {
	          clearPhase();
	          try {
	            $rootScope.$digest();
	          } catch (e) {
	            $exceptionHandler(e);
	            throw e;
	          }
	        }
	      },

	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$applyAsync
	       * @kind function
	       *
	       * @description
	       * Schedule the invocation of $apply to occur at a later time. The actual time difference
	       * varies across browsers, but is typically around ~10 milliseconds.
	       *
	       * This can be used to queue up multiple expressions which need to be evaluated in the same
	       * digest.
	       *
	       * @param {(string|function())=} exp An angular expression to be executed.
	       *
	       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
	       *    - `function(scope)`: execute the function with current `scope` parameter.
	       */
	      $applyAsync: function(expr) {
	        var scope = this;
	        expr && applyAsyncQueue.push($applyAsyncExpression);
	        scheduleApplyAsync();

	        function $applyAsyncExpression() {
	          scope.$eval(expr);
	        }
	      },

	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$on
	       * @kind function
	       *
	       * @description
	       * Listens on events of a given type. See {@link ng.$rootScope.Scope#$emit $emit} for
	       * discussion of event life cycle.
	       *
	       * The event listener function format is: `function(event, args...)`. The `event` object
	       * passed into the listener has the following attributes:
	       *
	       *   - `targetScope` - `{Scope}`: the scope on which the event was `$emit`-ed or
	       *     `$broadcast`-ed.
	       *   - `currentScope` - `{Scope}`: the scope that is currently handling the event. Once the
	       *     event propagates through the scope hierarchy, this property is set to null.
	       *   - `name` - `{string}`: name of the event.
	       *   - `stopPropagation` - `{function=}`: calling `stopPropagation` function will cancel
	       *     further event propagation (available only for events that were `$emit`-ed).
	       *   - `preventDefault` - `{function}`: calling `preventDefault` sets `defaultPrevented` flag
	       *     to true.
	       *   - `defaultPrevented` - `{boolean}`: true if `preventDefault` was called.
	       *
	       * @param {string} name Event name to listen on.
	       * @param {function(event, ...args)} listener Function to call when the event is emitted.
	       * @returns {function()} Returns a deregistration function for this listener.
	       */
	      $on: function(name, listener) {
	        var namedListeners = this.$$listeners[name];
	        if (!namedListeners) {
	          this.$$listeners[name] = namedListeners = [];
	        }
	        namedListeners.push(listener);

	        var current = this;
	        do {
	          if (!current.$$listenerCount[name]) {
	            current.$$listenerCount[name] = 0;
	          }
	          current.$$listenerCount[name]++;
	        } while ((current = current.$parent));

	        var self = this;
	        return function() {
	          var indexOfListener = namedListeners.indexOf(listener);
	          if (indexOfListener !== -1) {
	            namedListeners[indexOfListener] = null;
	            decrementListenerCount(self, 1, name);
	          }
	        };
	      },


	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$emit
	       * @kind function
	       *
	       * @description
	       * Dispatches an event `name` upwards through the scope hierarchy notifying the
	       * registered {@link ng.$rootScope.Scope#$on} listeners.
	       *
	       * The event life cycle starts at the scope on which `$emit` was called. All
	       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
	       * notified. Afterwards, the event traverses upwards toward the root scope and calls all
	       * registered listeners along the way. The event will stop propagating if one of the listeners
	       * cancels it.
	       *
	       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
	       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
	       *
	       * @param {string} name Event name to emit.
	       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
	       * @return {Object} Event object (see {@link ng.$rootScope.Scope#$on}).
	       */
	      $emit: function(name, args) {
	        var empty = [],
	            namedListeners,
	            scope = this,
	            stopPropagation = false,
	            event = {
	              name: name,
	              targetScope: scope,
	              stopPropagation: function() {stopPropagation = true;},
	              preventDefault: function() {
	                event.defaultPrevented = true;
	              },
	              defaultPrevented: false
	            },
	            listenerArgs = concat([event], arguments, 1),
	            i, length;

	        do {
	          namedListeners = scope.$$listeners[name] || empty;
	          event.currentScope = scope;
	          for (i = 0, length = namedListeners.length; i < length; i++) {

	            // if listeners were deregistered, defragment the array
	            if (!namedListeners[i]) {
	              namedListeners.splice(i, 1);
	              i--;
	              length--;
	              continue;
	            }
	            try {
	              //allow all listeners attached to the current scope to run
	              namedListeners[i].apply(null, listenerArgs);
	            } catch (e) {
	              $exceptionHandler(e);
	            }
	          }
	          //if any listener on the current scope stops propagation, prevent bubbling
	          if (stopPropagation) {
	            event.currentScope = null;
	            return event;
	          }
	          //traverse upwards
	          scope = scope.$parent;
	        } while (scope);

	        event.currentScope = null;

	        return event;
	      },


	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$broadcast
	       * @kind function
	       *
	       * @description
	       * Dispatches an event `name` downwards to all child scopes (and their children) notifying the
	       * registered {@link ng.$rootScope.Scope#$on} listeners.
	       *
	       * The event life cycle starts at the scope on which `$broadcast` was called. All
	       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
	       * notified. Afterwards, the event propagates to all direct and indirect scopes of the current
	       * scope and calls all registered listeners along the way. The event cannot be canceled.
	       *
	       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
	       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
	       *
	       * @param {string} name Event name to broadcast.
	       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
	       * @return {Object} Event object, see {@link ng.$rootScope.Scope#$on}
	       */
	      $broadcast: function(name, args) {
	        var target = this,
	            current = target,
	            next = target,
	            event = {
	              name: name,
	              targetScope: target,
	              preventDefault: function() {
	                event.defaultPrevented = true;
	              },
	              defaultPrevented: false
	            };

	        if (!target.$$listenerCount[name]) return event;

	        var listenerArgs = concat([event], arguments, 1),
	            listeners, i, length;

	        //down while you can, then up and next sibling or up and next sibling until back at root
	        while ((current = next)) {
	          event.currentScope = current;
	          listeners = current.$$listeners[name] || [];
	          for (i = 0, length = listeners.length; i < length; i++) {
	            // if listeners were deregistered, defragment the array
	            if (!listeners[i]) {
	              listeners.splice(i, 1);
	              i--;
	              length--;
	              continue;
	            }

	            try {
	              listeners[i].apply(null, listenerArgs);
	            } catch (e) {
	              $exceptionHandler(e);
	            }
	          }

	          // Insanity Warning: scope depth-first traversal
	          // yes, this code is a bit crazy, but it works and we have tests to prove it!
	          // this piece should be kept in sync with the traversal in $digest
	          // (though it differs due to having the extra check for $$listenerCount)
	          if (!(next = ((current.$$listenerCount[name] && current.$$childHead) ||
	              (current !== target && current.$$nextSibling)))) {
	            while (current !== target && !(next = current.$$nextSibling)) {
	              current = current.$parent;
	            }
	          }
	        }

	        event.currentScope = null;
	        return event;
	      }
	    };

	    var $rootScope = new Scope();

	    //The internal queues. Expose them on the $rootScope for debugging/testing purposes.
	    var asyncQueue = $rootScope.$$asyncQueue = [];
	    var postDigestQueue = $rootScope.$$postDigestQueue = [];
	    var applyAsyncQueue = $rootScope.$$applyAsyncQueue = [];

	    return $rootScope;


	    function beginPhase(phase) {
	      if ($rootScope.$$phase) {
	        throw $rootScopeMinErr('inprog', '{0} already in progress', $rootScope.$$phase);
	      }

	      $rootScope.$$phase = phase;
	    }

	    function clearPhase() {
	      $rootScope.$$phase = null;
	    }

	    function incrementWatchersCount(current, count) {
	      do {
	        current.$$watchersCount += count;
	      } while ((current = current.$parent));
	    }

	    function decrementListenerCount(current, count, name) {
	      do {
	        current.$$listenerCount[name] -= count;

	        if (current.$$listenerCount[name] === 0) {
	          delete current.$$listenerCount[name];
	        }
	      } while ((current = current.$parent));
	    }

	    /**
	     * function used as an initial value for watchers.
	     * because it's unique we can easily tell it apart from other values
	     */
	    function initWatchVal() {}

	    function flushApplyAsync() {
	      while (applyAsyncQueue.length) {
	        try {
	          applyAsyncQueue.shift()();
	        } catch (e) {
	          $exceptionHandler(e);
	        }
	      }
	      applyAsyncId = null;
	    }

	    function scheduleApplyAsync() {
	      if (applyAsyncId === null) {
	        applyAsyncId = $browser.defer(function() {
	          $rootScope.$apply(flushApplyAsync);
	        });
	      }
	    }
	  }];
	}

	/**
	 * @description
	 * Private service to sanitize uris for links and images. Used by $compile and $sanitize.
	 */
	function $$SanitizeUriProvider() {
	  var aHrefSanitizationWhitelist = /^\s*(https?|ftp|mailto|tel|file):/,
	    imgSrcSanitizationWhitelist = /^\s*((https?|ftp|file|blob):|data:image\/)/;

	  /**
	   * @description
	   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
	   * urls during a[href] sanitization.
	   *
	   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
	   *
	   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
	   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
	   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
	   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
	   *
	   * @param {RegExp=} regexp New regexp to whitelist urls with.
	   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
	   *    chaining otherwise.
	   */
	  this.aHrefSanitizationWhitelist = function(regexp) {
	    if (isDefined(regexp)) {
	      aHrefSanitizationWhitelist = regexp;
	      return this;
	    }
	    return aHrefSanitizationWhitelist;
	  };


	  /**
	   * @description
	   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
	   * urls during img[src] sanitization.
	   *
	   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
	   *
	   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
	   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
	   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
	   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
	   *
	   * @param {RegExp=} regexp New regexp to whitelist urls with.
	   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
	   *    chaining otherwise.
	   */
	  this.imgSrcSanitizationWhitelist = function(regexp) {
	    if (isDefined(regexp)) {
	      imgSrcSanitizationWhitelist = regexp;
	      return this;
	    }
	    return imgSrcSanitizationWhitelist;
	  };

	  this.$get = function() {
	    return function sanitizeUri(uri, isImage) {
	      var regex = isImage ? imgSrcSanitizationWhitelist : aHrefSanitizationWhitelist;
	      var normalizedVal;
	      normalizedVal = urlResolve(uri).href;
	      if (normalizedVal !== '' && !normalizedVal.match(regex)) {
	        return 'unsafe:' + normalizedVal;
	      }
	      return uri;
	    };
	  };
	}

	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 *     Any commits to this file should be reviewed with security in mind.  *
	 *   Changes to this file can potentially create security vulnerabilities. *
	 *          An approval from 2 Core members with history of modifying      *
	 *                         this file is required.                          *
	 *                                                                         *
	 *  Does the change somehow allow for arbitrary javascript to be executed? *
	 *    Or allows for someone to change the prototype of built-in objects?   *
	 *     Or gives undesired access to variables likes document or window?    *
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

	var $sceMinErr = minErr('$sce');

	var SCE_CONTEXTS = {
	  HTML: 'html',
	  CSS: 'css',
	  URL: 'url',
	  // RESOURCE_URL is a subtype of URL used in contexts where a privileged resource is sourced from a
	  // url.  (e.g. ng-include, script src, templateUrl)
	  RESOURCE_URL: 'resourceUrl',
	  JS: 'js'
	};

	// Helper functions follow.

	function adjustMatcher(matcher) {
	  if (matcher === 'self') {
	    return matcher;
	  } else if (isString(matcher)) {
	    // Strings match exactly except for 2 wildcards - '*' and '**'.
	    // '*' matches any character except those from the set ':/.?&'.
	    // '**' matches any character (like .* in a RegExp).
	    // More than 2 *'s raises an error as it's ill defined.
	    if (matcher.indexOf('***') > -1) {
	      throw $sceMinErr('iwcard',
	          'Illegal sequence *** in string matcher.  String: {0}', matcher);
	    }
	    matcher = escapeForRegexp(matcher).
	                  replace('\\*\\*', '.*').
	                  replace('\\*', '[^:/.?&;]*');
	    return new RegExp('^' + matcher + '$');
	  } else if (isRegExp(matcher)) {
	    // The only other type of matcher allowed is a Regexp.
	    // Match entire URL / disallow partial matches.
	    // Flags are reset (i.e. no global, ignoreCase or multiline)
	    return new RegExp('^' + matcher.source + '$');
	  } else {
	    throw $sceMinErr('imatcher',
	        'Matchers may only be "self", string patterns or RegExp objects');
	  }
	}


	function adjustMatchers(matchers) {
	  var adjustedMatchers = [];
	  if (isDefined(matchers)) {
	    forEach(matchers, function(matcher) {
	      adjustedMatchers.push(adjustMatcher(matcher));
	    });
	  }
	  return adjustedMatchers;
	}


	/**
	 * @ngdoc service
	 * @name $sceDelegate
	 * @kind function
	 *
	 * @description
	 *
	 * `$sceDelegate` is a service that is used by the `$sce` service to provide {@link ng.$sce Strict
	 * Contextual Escaping (SCE)} services to AngularJS.
	 *
	 * Typically, you would configure or override the {@link ng.$sceDelegate $sceDelegate} instead of
	 * the `$sce` service to customize the way Strict Contextual Escaping works in AngularJS.  This is
	 * because, while the `$sce` provides numerous shorthand methods, etc., you really only need to
	 * override 3 core functions (`trustAs`, `getTrusted` and `valueOf`) to replace the way things
	 * work because `$sce` delegates to `$sceDelegate` for these operations.
	 *
	 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} to configure this service.
	 *
	 * The default instance of `$sceDelegate` should work out of the box with little pain.  While you
	 * can override it completely to change the behavior of `$sce`, the common case would
	 * involve configuring the {@link ng.$sceDelegateProvider $sceDelegateProvider} instead by setting
	 * your own whitelists and blacklists for trusting URLs used for loading AngularJS resources such as
	 * templates.  Refer {@link ng.$sceDelegateProvider#resourceUrlWhitelist
	 * $sceDelegateProvider.resourceUrlWhitelist} and {@link
	 * ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
	 */

	/**
	 * @ngdoc provider
	 * @name $sceDelegateProvider
	 * @description
	 *
	 * The `$sceDelegateProvider` provider allows developers to configure the {@link ng.$sceDelegate
	 * $sceDelegate} service.  This allows one to get/set the whitelists and blacklists used to ensure
	 * that the URLs used for sourcing Angular templates are safe.  Refer {@link
	 * ng.$sceDelegateProvider#resourceUrlWhitelist $sceDelegateProvider.resourceUrlWhitelist} and
	 * {@link ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
	 *
	 * For the general details about this service in Angular, read the main page for {@link ng.$sce
	 * Strict Contextual Escaping (SCE)}.
	 *
	 * **Example**:  Consider the following case. <a name="example"></a>
	 *
	 * - your app is hosted at url `http://myapp.example.com/`
	 * - but some of your templates are hosted on other domains you control such as
	 *   `http://srv01.assets.example.com/`,  `http://srv02.assets.example.com/`, etc.
	 * - and you have an open redirect at `http://myapp.example.com/clickThru?...`.
	 *
	 * Here is what a secure configuration for this scenario might look like:
	 *
	 * ```
	 *  angular.module('myApp', []).config(function($sceDelegateProvider) {
	 *    $sceDelegateProvider.resourceUrlWhitelist([
	 *      // Allow same origin resource loads.
	 *      'self',
	 *      // Allow loading from our assets domain.  Notice the difference between * and **.
	 *      'http://srv*.assets.example.com/**'
	 *    ]);
	 *
	 *    // The blacklist overrides the whitelist so the open redirect here is blocked.
	 *    $sceDelegateProvider.resourceUrlBlacklist([
	 *      'http://myapp.example.com/clickThru**'
	 *    ]);
	 *  });
	 * ```
	 */

	function $SceDelegateProvider() {
	  this.SCE_CONTEXTS = SCE_CONTEXTS;

	  // Resource URLs can also be trusted by policy.
	  var resourceUrlWhitelist = ['self'],
	      resourceUrlBlacklist = [];

	  /**
	   * @ngdoc method
	   * @name $sceDelegateProvider#resourceUrlWhitelist
	   * @kind function
	   *
	   * @param {Array=} whitelist When provided, replaces the resourceUrlWhitelist with the value
	   *     provided.  This must be an array or null.  A snapshot of this array is used so further
	   *     changes to the array are ignored.
	   *
	   *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
	   *     allowed in this array.
	   *
	   *     Note: **an empty whitelist array will block all URLs**!
	   *
	   * @return {Array} the currently set whitelist array.
	   *
	   * The **default value** when no whitelist has been explicitly set is `['self']` allowing only
	   * same origin resource requests.
	   *
	   * @description
	   * Sets/Gets the whitelist of trusted resource URLs.
	   */
	  this.resourceUrlWhitelist = function(value) {
	    if (arguments.length) {
	      resourceUrlWhitelist = adjustMatchers(value);
	    }
	    return resourceUrlWhitelist;
	  };

	  /**
	   * @ngdoc method
	   * @name $sceDelegateProvider#resourceUrlBlacklist
	   * @kind function
	   *
	   * @param {Array=} blacklist When provided, replaces the resourceUrlBlacklist with the value
	   *     provided.  This must be an array or null.  A snapshot of this array is used so further
	   *     changes to the array are ignored.
	   *
	   *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
	   *     allowed in this array.
	   *
	   *     The typical usage for the blacklist is to **block
	   *     [open redirects](http://cwe.mitre.org/data/definitions/601.html)** served by your domain as
	   *     these would otherwise be trusted but actually return content from the redirected domain.
	   *
	   *     Finally, **the blacklist overrides the whitelist** and has the final say.
	   *
	   * @return {Array} the currently set blacklist array.
	   *
	   * The **default value** when no whitelist has been explicitly set is the empty array (i.e. there
	   * is no blacklist.)
	   *
	   * @description
	   * Sets/Gets the blacklist of trusted resource URLs.
	   */

	  this.resourceUrlBlacklist = function(value) {
	    if (arguments.length) {
	      resourceUrlBlacklist = adjustMatchers(value);
	    }
	    return resourceUrlBlacklist;
	  };

	  this.$get = ['$injector', function($injector) {

	    var htmlSanitizer = function htmlSanitizer(html) {
	      throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
	    };

	    if ($injector.has('$sanitize')) {
	      htmlSanitizer = $injector.get('$sanitize');
	    }


	    function matchUrl(matcher, parsedUrl) {
	      if (matcher === 'self') {
	        return urlIsSameOrigin(parsedUrl);
	      } else {
	        // definitely a regex.  See adjustMatchers()
	        return !!matcher.exec(parsedUrl.href);
	      }
	    }

	    function isResourceUrlAllowedByPolicy(url) {
	      var parsedUrl = urlResolve(url.toString());
	      var i, n, allowed = false;
	      // Ensure that at least one item from the whitelist allows this url.
	      for (i = 0, n = resourceUrlWhitelist.length; i < n; i++) {
	        if (matchUrl(resourceUrlWhitelist[i], parsedUrl)) {
	          allowed = true;
	          break;
	        }
	      }
	      if (allowed) {
	        // Ensure that no item from the blacklist blocked this url.
	        for (i = 0, n = resourceUrlBlacklist.length; i < n; i++) {
	          if (matchUrl(resourceUrlBlacklist[i], parsedUrl)) {
	            allowed = false;
	            break;
	          }
	        }
	      }
	      return allowed;
	    }

	    function generateHolderType(Base) {
	      var holderType = function TrustedValueHolderType(trustedValue) {
	        this.$$unwrapTrustedValue = function() {
	          return trustedValue;
	        };
	      };
	      if (Base) {
	        holderType.prototype = new Base();
	      }
	      holderType.prototype.valueOf = function sceValueOf() {
	        return this.$$unwrapTrustedValue();
	      };
	      holderType.prototype.toString = function sceToString() {
	        return this.$$unwrapTrustedValue().toString();
	      };
	      return holderType;
	    }

	    var trustedValueHolderBase = generateHolderType(),
	        byType = {};

	    byType[SCE_CONTEXTS.HTML] = generateHolderType(trustedValueHolderBase);
	    byType[SCE_CONTEXTS.CSS] = generateHolderType(trustedValueHolderBase);
	    byType[SCE_CONTEXTS.URL] = generateHolderType(trustedValueHolderBase);
	    byType[SCE_CONTEXTS.JS] = generateHolderType(trustedValueHolderBase);
	    byType[SCE_CONTEXTS.RESOURCE_URL] = generateHolderType(byType[SCE_CONTEXTS.URL]);

	    /**
	     * @ngdoc method
	     * @name $sceDelegate#trustAs
	     *
	     * @description
	     * Returns an object that is trusted by angular for use in specified strict
	     * contextual escaping contexts (such as ng-bind-html, ng-include, any src
	     * attribute interpolation, any dom event binding attribute interpolation
	     * such as for onclick,  etc.) that uses the provided value.
	     * See {@link ng.$sce $sce} for enabling strict contextual escaping.
	     *
	     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
	     *   resourceUrl, html, js and css.
	     * @param {*} value The value that that should be considered trusted/safe.
	     * @returns {*} A value that can be used to stand in for the provided `value` in places
	     * where Angular expects a $sce.trustAs() return value.
	     */
	    function trustAs(type, trustedValue) {
	      var Constructor = (byType.hasOwnProperty(type) ? byType[type] : null);
	      if (!Constructor) {
	        throw $sceMinErr('icontext',
	            'Attempted to trust a value in invalid context. Context: {0}; Value: {1}',
	            type, trustedValue);
	      }
	      if (trustedValue === null || trustedValue === undefined || trustedValue === '') {
	        return trustedValue;
	      }
	      // All the current contexts in SCE_CONTEXTS happen to be strings.  In order to avoid trusting
	      // mutable objects, we ensure here that the value passed in is actually a string.
	      if (typeof trustedValue !== 'string') {
	        throw $sceMinErr('itype',
	            'Attempted to trust a non-string value in a content requiring a string: Context: {0}',
	            type);
	      }
	      return new Constructor(trustedValue);
	    }

	    /**
	     * @ngdoc method
	     * @name $sceDelegate#valueOf
	     *
	     * @description
	     * If the passed parameter had been returned by a prior call to {@link ng.$sceDelegate#trustAs
	     * `$sceDelegate.trustAs`}, returns the value that had been passed to {@link
	     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.
	     *
	     * If the passed parameter is not a value that had been returned by {@link
	     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}, returns it as-is.
	     *
	     * @param {*} value The result of a prior {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}
	     *      call or anything else.
	     * @returns {*} The `value` that was originally provided to {@link ng.$sceDelegate#trustAs
	     *     `$sceDelegate.trustAs`} if `value` is the result of such a call.  Otherwise, returns
	     *     `value` unchanged.
	     */
	    function valueOf(maybeTrusted) {
	      if (maybeTrusted instanceof trustedValueHolderBase) {
	        return maybeTrusted.$$unwrapTrustedValue();
	      } else {
	        return maybeTrusted;
	      }
	    }

	    /**
	     * @ngdoc method
	     * @name $sceDelegate#getTrusted
	     *
	     * @description
	     * Takes the result of a {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`} call and
	     * returns the originally supplied value if the queried context type is a supertype of the
	     * created type.  If this condition isn't satisfied, throws an exception.
	     *
	     * @param {string} type The kind of context in which this value is to be used.
	     * @param {*} maybeTrusted The result of a prior {@link ng.$sceDelegate#trustAs
	     *     `$sceDelegate.trustAs`} call.
	     * @returns {*} The value the was originally provided to {@link ng.$sceDelegate#trustAs
	     *     `$sceDelegate.trustAs`} if valid in this context.  Otherwise, throws an exception.
	     */
	    function getTrusted(type, maybeTrusted) {
	      if (maybeTrusted === null || maybeTrusted === undefined || maybeTrusted === '') {
	        return maybeTrusted;
	      }
	      var constructor = (byType.hasOwnProperty(type) ? byType[type] : null);
	      if (constructor && maybeTrusted instanceof constructor) {
	        return maybeTrusted.$$unwrapTrustedValue();
	      }
	      // If we get here, then we may only take one of two actions.
	      // 1. sanitize the value for the requested type, or
	      // 2. throw an exception.
	      if (type === SCE_CONTEXTS.RESOURCE_URL) {
	        if (isResourceUrlAllowedByPolicy(maybeTrusted)) {
	          return maybeTrusted;
	        } else {
	          throw $sceMinErr('insecurl',
	              'Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}',
	              maybeTrusted.toString());
	        }
	      } else if (type === SCE_CONTEXTS.HTML) {
	        return htmlSanitizer(maybeTrusted);
	      }
	      throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
	    }

	    return { trustAs: trustAs,
	             getTrusted: getTrusted,
	             valueOf: valueOf };
	  }];
	}


	/**
	 * @ngdoc provider
	 * @name $sceProvider
	 * @description
	 *
	 * The $sceProvider provider allows developers to configure the {@link ng.$sce $sce} service.
	 * -   enable/disable Strict Contextual Escaping (SCE) in a module
	 * -   override the default implementation with a custom delegate
	 *
	 * Read more about {@link ng.$sce Strict Contextual Escaping (SCE)}.
	 */

	/* jshint maxlen: false*/

	/**
	 * @ngdoc service
	 * @name $sce
	 * @kind function
	 *
	 * @description
	 *
	 * `$sce` is a service that provides Strict Contextual Escaping services to AngularJS.
	 *
	 * # Strict Contextual Escaping
	 *
	 * Strict Contextual Escaping (SCE) is a mode in which AngularJS requires bindings in certain
	 * contexts to result in a value that is marked as safe to use for that context.  One example of
	 * such a context is binding arbitrary html controlled by the user via `ng-bind-html`.  We refer
	 * to these contexts as privileged or SCE contexts.
	 *
	 * As of version 1.2, Angular ships with SCE enabled by default.
	 *
	 * Note:  When enabled (the default), IE<11 in quirks mode is not supported.  In this mode, IE<11 allow
	 * one to execute arbitrary javascript by the use of the expression() syntax.  Refer
	 * <http://blogs.msdn.com/b/ie/archive/2008/10/16/ending-expressions.aspx> to learn more about them.
	 * You can ensure your document is in standards mode and not quirks mode by adding `<!doctype html>`
	 * to the top of your HTML document.
	 *
	 * SCE assists in writing code in way that (a) is secure by default and (b) makes auditing for
	 * security vulnerabilities such as XSS, clickjacking, etc. a lot easier.
	 *
	 * Here's an example of a binding in a privileged context:
	 *
	 * ```
	 * <input ng-model="userHtml" aria-label="User input">
	 * <div ng-bind-html="userHtml"></div>
	 * ```
	 *
	 * Notice that `ng-bind-html` is bound to `userHtml` controlled by the user.  With SCE
	 * disabled, this application allows the user to render arbitrary HTML into the DIV.
	 * In a more realistic example, one may be rendering user comments, blog articles, etc. via
	 * bindings.  (HTML is just one example of a context where rendering user controlled input creates
	 * security vulnerabilities.)
	 *
	 * For the case of HTML, you might use a library, either on the client side, or on the server side,
	 * to sanitize unsafe HTML before binding to the value and rendering it in the document.
	 *
	 * How would you ensure that every place that used these types of bindings was bound to a value that
	 * was sanitized by your library (or returned as safe for rendering by your server?)  How can you
	 * ensure that you didn't accidentally delete the line that sanitized the value, or renamed some
	 * properties/fields and forgot to update the binding to the sanitized value?
	 *
	 * To be secure by default, you want to ensure that any such bindings are disallowed unless you can
	 * determine that something explicitly says it's safe to use a value for binding in that
	 * context.  You can then audit your code (a simple grep would do) to ensure that this is only done
	 * for those values that you can easily tell are safe - because they were received from your server,
	 * sanitized by your library, etc.  You can organize your codebase to help with this - perhaps
	 * allowing only the files in a specific directory to do this.  Ensuring that the internal API
	 * exposed by that code doesn't markup arbitrary values as safe then becomes a more manageable task.
	 *
	 * In the case of AngularJS' SCE service, one uses {@link ng.$sce#trustAs $sce.trustAs}
	 * (and shorthand methods such as {@link ng.$sce#trustAsHtml $sce.trustAsHtml}, etc.) to
	 * obtain values that will be accepted by SCE / privileged contexts.
	 *
	 *
	 * ## How does it work?
	 *
	 * In privileged contexts, directives and code will bind to the result of {@link ng.$sce#getTrusted
	 * $sce.getTrusted(context, value)} rather than to the value directly.  Directives use {@link
	 * ng.$sce#parseAs $sce.parseAs} rather than `$parse` to watch attribute bindings, which performs the
	 * {@link ng.$sce#getTrusted $sce.getTrusted} behind the scenes on non-constant literals.
	 *
	 * As an example, {@link ng.directive:ngBindHtml ngBindHtml} uses {@link
	 * ng.$sce#parseAsHtml $sce.parseAsHtml(binding expression)}.  Here's the actual code (slightly
	 * simplified):
	 *
	 * ```
	 * var ngBindHtmlDirective = ['$sce', function($sce) {
	 *   return function(scope, element, attr) {
	 *     scope.$watch($sce.parseAsHtml(attr.ngBindHtml), function(value) {
	 *       element.html(value || '');
	 *     });
	 *   };
	 * }];
	 * ```
	 *
	 * ## Impact on loading templates
	 *
	 * This applies both to the {@link ng.directive:ngInclude `ng-include`} directive as well as
	 * `templateUrl`'s specified by {@link guide/directive directives}.
	 *
	 * By default, Angular only loads templates from the same domain and protocol as the application
	 * document.  This is done by calling {@link ng.$sce#getTrustedResourceUrl
	 * $sce.getTrustedResourceUrl} on the template URL.  To load templates from other domains and/or
	 * protocols, you may either either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist
	 * them} or {@link ng.$sce#trustAsResourceUrl wrap it} into a trusted value.
	 *
	 * *Please note*:
	 * The browser's
	 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
	 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
	 * policy apply in addition to this and may further restrict whether the template is successfully
	 * loaded.  This means that without the right CORS policy, loading templates from a different domain
	 * won't work on all browsers.  Also, loading templates from `file://` URL does not work on some
	 * browsers.
	 *
	 * ## This feels like too much overhead
	 *
	 * It's important to remember that SCE only applies to interpolation expressions.
	 *
	 * If your expressions are constant literals, they're automatically trusted and you don't need to
	 * call `$sce.trustAs` on them (remember to include the `ngSanitize` module) (e.g.
	 * `<div ng-bind-html="'<b>implicitly trusted</b>'"></div>`) just works.
	 *
	 * Additionally, `a[href]` and `img[src]` automatically sanitize their URLs and do not pass them
	 * through {@link ng.$sce#getTrusted $sce.getTrusted}.  SCE doesn't play a role here.
	 *
	 * The included {@link ng.$sceDelegate $sceDelegate} comes with sane defaults to allow you to load
	 * templates in `ng-include` from your application's domain without having to even know about SCE.
	 * It blocks loading templates from other domains or loading templates over http from an https
	 * served document.  You can change these by setting your own custom {@link
	 * ng.$sceDelegateProvider#resourceUrlWhitelist whitelists} and {@link
	 * ng.$sceDelegateProvider#resourceUrlBlacklist blacklists} for matching such URLs.
	 *
	 * This significantly reduces the overhead.  It is far easier to pay the small overhead and have an
	 * application that's secure and can be audited to verify that with much more ease than bolting
	 * security onto an application later.
	 *
	 * <a name="contexts"></a>
	 * ## What trusted context types are supported?
	 *
	 * | Context             | Notes          |
	 * |---------------------|----------------|
	 * | `$sce.HTML`         | For HTML that's safe to source into the application.  The {@link ng.directive:ngBindHtml ngBindHtml} directive uses this context for bindings. If an unsafe value is encountered and the {@link ngSanitize $sanitize} module is present this will sanitize the value instead of throwing an error. |
	 * | `$sce.CSS`          | For CSS that's safe to source into the application.  Currently unused.  Feel free to use it in your own directives. |
	 * | `$sce.URL`          | For URLs that are safe to follow as links.  Currently unused (`<a href=` and `<img src=` sanitize their urls and don't constitute an SCE context. |
	 * | `$sce.RESOURCE_URL` | For URLs that are not only safe to follow as links, but whose contents are also safe to include in your application.  Examples include `ng-include`, `src` / `ngSrc` bindings for tags other than `IMG` (e.g. `IFRAME`, `OBJECT`, etc.)  <br><br>Note that `$sce.RESOURCE_URL` makes a stronger statement about the URL than `$sce.URL` does and therefore contexts requiring values trusted for `$sce.RESOURCE_URL` can be used anywhere that values trusted for `$sce.URL` are required. |
	 * | `$sce.JS`           | For JavaScript that is safe to execute in your application's context.  Currently unused.  Feel free to use it in your own directives. |
	 *
	 * ## Format of items in {@link ng.$sceDelegateProvider#resourceUrlWhitelist resourceUrlWhitelist}/{@link ng.$sceDelegateProvider#resourceUrlBlacklist Blacklist} <a name="resourceUrlPatternItem"></a>
	 *
	 *  Each element in these arrays must be one of the following:
	 *
	 *  - **'self'**
	 *    - The special **string**, `'self'`, can be used to match against all URLs of the **same
	 *      domain** as the application document using the **same protocol**.
	 *  - **String** (except the special value `'self'`)
	 *    - The string is matched against the full *normalized / absolute URL* of the resource
	 *      being tested (substring matches are not good enough.)
	 *    - There are exactly **two wildcard sequences** - `*` and `**`.  All other characters
	 *      match themselves.
	 *    - `*`: matches zero or more occurrences of any character other than one of the following 6
	 *      characters: '`:`', '`/`', '`.`', '`?`', '`&`' and ';'.  It's a useful wildcard for use
	 *      in a whitelist.
	 *    - `**`: matches zero or more occurrences of *any* character.  As such, it's not
	 *      not appropriate to use in for a scheme, domain, etc. as it would match too much.  (e.g.
	 *      http://**.example.com/ would match http://evil.com/?ignore=.example.com/ and that might
	 *      not have been the intention.)  Its usage at the very end of the path is ok.  (e.g.
	 *      http://foo.example.com/templates/**).
	 *  - **RegExp** (*see caveat below*)
	 *    - *Caveat*:  While regular expressions are powerful and offer great flexibility,  their syntax
	 *      (and all the inevitable escaping) makes them *harder to maintain*.  It's easy to
	 *      accidentally introduce a bug when one updates a complex expression (imho, all regexes should
	 *      have good test coverage.).  For instance, the use of `.` in the regex is correct only in a
	 *      small number of cases.  A `.` character in the regex used when matching the scheme or a
	 *      subdomain could be matched against a `:` or literal `.` that was likely not intended.   It
	 *      is highly recommended to use the string patterns and only fall back to regular expressions
	 *      if they as a last resort.
	 *    - The regular expression must be an instance of RegExp (i.e. not a string.)  It is
	 *      matched against the **entire** *normalized / absolute URL* of the resource being tested
	 *      (even when the RegExp did not have the `^` and `$` codes.)  In addition, any flags
	 *      present on the RegExp (such as multiline, global, ignoreCase) are ignored.
	 *    - If you are generating your JavaScript from some other templating engine (not
	 *      recommended, e.g. in issue [#4006](https://github.com/angular/angular.js/issues/4006)),
	 *      remember to escape your regular expression (and be aware that you might need more than
	 *      one level of escaping depending on your templating engine and the way you interpolated
	 *      the value.)  Do make use of your platform's escaping mechanism as it might be good
	 *      enough before coding your own.  e.g. Ruby has
	 *      [Regexp.escape(str)](http://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape)
	 *      and Python has [re.escape](http://docs.python.org/library/re.html#re.escape).
	 *      Javascript lacks a similar built in function for escaping.  Take a look at Google
	 *      Closure library's [goog.string.regExpEscape(s)](
	 *      http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962).
	 *
	 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} for an example.
	 *
	 * ## Show me an example using SCE.
	 *
	 * <example module="mySceApp" deps="angular-sanitize.js">
	 * <file name="index.html">
	 *   <div ng-controller="AppController as myCtrl">
	 *     <i ng-bind-html="myCtrl.explicitlyTrustedHtml" id="explicitlyTrustedHtml"></i><br><br>
	 *     <b>User comments</b><br>
	 *     By default, HTML that isn't explicitly trusted (e.g. Alice's comment) is sanitized when
	 *     $sanitize is available.  If $sanitize isn't available, this results in an error instead of an
	 *     exploit.
	 *     <div class="well">
	 *       <div ng-repeat="userComment in myCtrl.userComments">
	 *         <b>{{userComment.name}}</b>:
	 *         <span ng-bind-html="userComment.htmlComment" class="htmlComment"></span>
	 *         <br>
	 *       </div>
	 *     </div>
	 *   </div>
	 * </file>
	 *
	 * <file name="script.js">
	 *   angular.module('mySceApp', ['ngSanitize'])
	 *     .controller('AppController', ['$http', '$templateCache', '$sce',
	 *       function($http, $templateCache, $sce) {
	 *         var self = this;
	 *         $http.get("test_data.json", {cache: $templateCache}).success(function(userComments) {
	 *           self.userComments = userComments;
	 *         });
	 *         self.explicitlyTrustedHtml = $sce.trustAsHtml(
	 *             '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
	 *             'sanitization.&quot;">Hover over this text.</span>');
	 *       }]);
	 * </file>
	 *
	 * <file name="test_data.json">
	 * [
	 *   { "name": "Alice",
	 *     "htmlComment":
	 *         "<span onmouseover='this.textContent=\"PWN3D!\"'>Is <i>anyone</i> reading this?</span>"
	 *   },
	 *   { "name": "Bob",
	 *     "htmlComment": "<i>Yes!</i>  Am I the only other one?"
	 *   }
	 * ]
	 * </file>
	 *
	 * <file name="protractor.js" type="protractor">
	 *   describe('SCE doc demo', function() {
	 *     it('should sanitize untrusted values', function() {
	 *       expect(element.all(by.css('.htmlComment')).first().getInnerHtml())
	 *           .toBe('<span>Is <i>anyone</i> reading this?</span>');
	 *     });
	 *
	 *     it('should NOT sanitize explicitly trusted values', function() {
	 *       expect(element(by.id('explicitlyTrustedHtml')).getInnerHtml()).toBe(
	 *           '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
	 *           'sanitization.&quot;">Hover over this text.</span>');
	 *     });
	 *   });
	 * </file>
	 * </example>
	 *
	 *
	 *
	 * ## Can I disable SCE completely?
	 *
	 * Yes, you can.  However, this is strongly discouraged.  SCE gives you a lot of security benefits
	 * for little coding overhead.  It will be much harder to take an SCE disabled application and
	 * either secure it on your own or enable SCE at a later stage.  It might make sense to disable SCE
	 * for cases where you have a lot of existing code that was written before SCE was introduced and
	 * you're migrating them a module at a time.
	 *
	 * That said, here's how you can completely disable SCE:
	 *
	 * ```
	 * angular.module('myAppWithSceDisabledmyApp', []).config(function($sceProvider) {
	 *   // Completely disable SCE.  For demonstration purposes only!
	 *   // Do not use in new projects.
	 *   $sceProvider.enabled(false);
	 * });
	 * ```
	 *
	 */
	/* jshint maxlen: 100 */

	function $SceProvider() {
	  var enabled = true;

	  /**
	   * @ngdoc method
	   * @name $sceProvider#enabled
	   * @kind function
	   *
	   * @param {boolean=} value If provided, then enables/disables SCE.
	   * @return {boolean} true if SCE is enabled, false otherwise.
	   *
	   * @description
	   * Enables/disables SCE and returns the current value.
	   */
	  this.enabled = function(value) {
	    if (arguments.length) {
	      enabled = !!value;
	    }
	    return enabled;
	  };


	  /* Design notes on the default implementation for SCE.
	   *
	   * The API contract for the SCE delegate
	   * -------------------------------------
	   * The SCE delegate object must provide the following 3 methods:
	   *
	   * - trustAs(contextEnum, value)
	   *     This method is used to tell the SCE service that the provided value is OK to use in the
	   *     contexts specified by contextEnum.  It must return an object that will be accepted by
	   *     getTrusted() for a compatible contextEnum and return this value.
	   *
	   * - valueOf(value)
	   *     For values that were not produced by trustAs(), return them as is.  For values that were
	   *     produced by trustAs(), return the corresponding input value to trustAs.  Basically, if
	   *     trustAs is wrapping the given values into some type, this operation unwraps it when given
	   *     such a value.
	   *
	   * - getTrusted(contextEnum, value)
	   *     This function should return the a value that is safe to use in the context specified by
	   *     contextEnum or throw and exception otherwise.
	   *
	   * NOTE: This contract deliberately does NOT state that values returned by trustAs() must be
	   * opaque or wrapped in some holder object.  That happens to be an implementation detail.  For
	   * instance, an implementation could maintain a registry of all trusted objects by context.  In
	   * such a case, trustAs() would return the same object that was passed in.  getTrusted() would
	   * return the same object passed in if it was found in the registry under a compatible context or
	   * throw an exception otherwise.  An implementation might only wrap values some of the time based
	   * on some criteria.  getTrusted() might return a value and not throw an exception for special
	   * constants or objects even if not wrapped.  All such implementations fulfill this contract.
	   *
	   *
	   * A note on the inheritance model for SCE contexts
	   * ------------------------------------------------
	   * I've used inheritance and made RESOURCE_URL wrapped types a subtype of URL wrapped types.  This
	   * is purely an implementation details.
	   *
	   * The contract is simply this:
	   *
	   *     getTrusted($sce.RESOURCE_URL, value) succeeding implies that getTrusted($sce.URL, value)
	   *     will also succeed.
	   *
	   * Inheritance happens to capture this in a natural way.  In some future, we
	   * may not use inheritance anymore.  That is OK because no code outside of
	   * sce.js and sceSpecs.js would need to be aware of this detail.
	   */

	  this.$get = ['$parse', '$sceDelegate', function(
	                $parse,   $sceDelegate) {
	    // Prereq: Ensure that we're not running in IE<11 quirks mode.  In that mode, IE < 11 allow
	    // the "expression(javascript expression)" syntax which is insecure.
	    if (enabled && msie < 8) {
	      throw $sceMinErr('iequirks',
	        'Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks ' +
	        'mode.  You can fix this by adding the text <!doctype html> to the top of your HTML ' +
	        'document.  See http://docs.angularjs.org/api/ng.$sce for more information.');
	    }

	    var sce = shallowCopy(SCE_CONTEXTS);

	    /**
	     * @ngdoc method
	     * @name $sce#isEnabled
	     * @kind function
	     *
	     * @return {Boolean} true if SCE is enabled, false otherwise.  If you want to set the value, you
	     * have to do it at module config time on {@link ng.$sceProvider $sceProvider}.
	     *
	     * @description
	     * Returns a boolean indicating if SCE is enabled.
	     */
	    sce.isEnabled = function() {
	      return enabled;
	    };
	    sce.trustAs = $sceDelegate.trustAs;
	    sce.getTrusted = $sceDelegate.getTrusted;
	    sce.valueOf = $sceDelegate.valueOf;

	    if (!enabled) {
	      sce.trustAs = sce.getTrusted = function(type, value) { return value; };
	      sce.valueOf = identity;
	    }

	    /**
	     * @ngdoc method
	     * @name $sce#parseAs
	     *
	     * @description
	     * Converts Angular {@link guide/expression expression} into a function.  This is like {@link
	     * ng.$parse $parse} and is identical when the expression is a literal constant.  Otherwise, it
	     * wraps the expression in a call to {@link ng.$sce#getTrusted $sce.getTrusted(*type*,
	     * *result*)}
	     *
	     * @param {string} type The kind of SCE context in which this result will be used.
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */
	    sce.parseAs = function sceParseAs(type, expr) {
	      var parsed = $parse(expr);
	      if (parsed.literal && parsed.constant) {
	        return parsed;
	      } else {
	        return $parse(expr, function(value) {
	          return sce.getTrusted(type, value);
	        });
	      }
	    };

	    /**
	     * @ngdoc method
	     * @name $sce#trustAs
	     *
	     * @description
	     * Delegates to {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.  As such,
	     * returns an object that is trusted by angular for use in specified strict contextual
	     * escaping contexts (such as ng-bind-html, ng-include, any src attribute
	     * interpolation, any dom event binding attribute interpolation such as for onclick,  etc.)
	     * that uses the provided value.  See * {@link ng.$sce $sce} for enabling strict contextual
	     * escaping.
	     *
	     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
	     *   resourceUrl, html, js and css.
	     * @param {*} value The value that that should be considered trusted/safe.
	     * @returns {*} A value that can be used to stand in for the provided `value` in places
	     * where Angular expects a $sce.trustAs() return value.
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#trustAsHtml
	     *
	     * @description
	     * Shorthand method.  `$sce.trustAsHtml(value)` →
	     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.HTML, value)`}
	     *
	     * @param {*} value The value to trustAs.
	     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedHtml
	     *     $sce.getTrustedHtml(value)} to obtain the original value.  (privileged directives
	     *     only accept expressions that are either literal constants or are the
	     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#trustAsUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.trustAsUrl(value)` →
	     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.URL, value)`}
	     *
	     * @param {*} value The value to trustAs.
	     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedUrl
	     *     $sce.getTrustedUrl(value)} to obtain the original value.  (privileged directives
	     *     only accept expressions that are either literal constants or are the
	     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#trustAsResourceUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.trustAsResourceUrl(value)` →
	     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.RESOURCE_URL, value)`}
	     *
	     * @param {*} value The value to trustAs.
	     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedResourceUrl
	     *     $sce.getTrustedResourceUrl(value)} to obtain the original value.  (privileged directives
	     *     only accept expressions that are either literal constants or are the return
	     *     value of {@link ng.$sce#trustAs $sce.trustAs}.)
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#trustAsJs
	     *
	     * @description
	     * Shorthand method.  `$sce.trustAsJs(value)` →
	     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.JS, value)`}
	     *
	     * @param {*} value The value to trustAs.
	     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedJs
	     *     $sce.getTrustedJs(value)} to obtain the original value.  (privileged directives
	     *     only accept expressions that are either literal constants or are the
	     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#getTrusted
	     *
	     * @description
	     * Delegates to {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted`}.  As such,
	     * takes the result of a {@link ng.$sce#trustAs `$sce.trustAs`}() call and returns the
	     * originally supplied value if the queried context type is a supertype of the created type.
	     * If this condition isn't satisfied, throws an exception.
	     *
	     * @param {string} type The kind of context in which this value is to be used.
	     * @param {*} maybeTrusted The result of a prior {@link ng.$sce#trustAs `$sce.trustAs`}
	     *                         call.
	     * @returns {*} The value the was originally provided to
	     *              {@link ng.$sce#trustAs `$sce.trustAs`} if valid in this context.
	     *              Otherwise, throws an exception.
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#getTrustedHtml
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedHtml(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.HTML, value)`}
	     *
	     * @param {*} value The value to pass to `$sce.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.HTML, value)`
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#getTrustedCss
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedCss(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.CSS, value)`}
	     *
	     * @param {*} value The value to pass to `$sce.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.CSS, value)`
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#getTrustedUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedUrl(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.URL, value)`}
	     *
	     * @param {*} value The value to pass to `$sce.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.URL, value)`
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#getTrustedResourceUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedResourceUrl(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.RESOURCE_URL, value)`}
	     *
	     * @param {*} value The value to pass to `$sceDelegate.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.RESOURCE_URL, value)`
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#getTrustedJs
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedJs(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.JS, value)`}
	     *
	     * @param {*} value The value to pass to `$sce.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.JS, value)`
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#parseAsHtml
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsHtml(expression string)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.HTML, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#parseAsCss
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsCss(value)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.CSS, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#parseAsUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsUrl(value)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.URL, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#parseAsResourceUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsResourceUrl(value)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.RESOURCE_URL, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#parseAsJs
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsJs(value)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.JS, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */

	    // Shorthand delegations.
	    var parse = sce.parseAs,
	        getTrusted = sce.getTrusted,
	        trustAs = sce.trustAs;

	    forEach(SCE_CONTEXTS, function(enumValue, name) {
	      var lName = lowercase(name);
	      sce[camelCase("parse_as_" + lName)] = function(expr) {
	        return parse(enumValue, expr);
	      };
	      sce[camelCase("get_trusted_" + lName)] = function(value) {
	        return getTrusted(enumValue, value);
	      };
	      sce[camelCase("trust_as_" + lName)] = function(value) {
	        return trustAs(enumValue, value);
	      };
	    });

	    return sce;
	  }];
	}

	/**
	 * !!! This is an undocumented "private" service !!!
	 *
	 * @name $sniffer
	 * @requires $window
	 * @requires $document
	 *
	 * @property {boolean} history Does the browser support html5 history api ?
	 * @property {boolean} transitions Does the browser support CSS transition events ?
	 * @property {boolean} animations Does the browser support CSS animation events ?
	 *
	 * @description
	 * This is very simple implementation of testing browser's features.
	 */
	function $SnifferProvider() {
	  this.$get = ['$window', '$document', function($window, $document) {
	    var eventSupport = {},
	        android =
	          toInt((/android (\d+)/.exec(lowercase(($window.navigator || {}).userAgent)) || [])[1]),
	        boxee = /Boxee/i.test(($window.navigator || {}).userAgent),
	        document = $document[0] || {},
	        vendorPrefix,
	        vendorRegex = /^(Moz|webkit|ms)(?=[A-Z])/,
	        bodyStyle = document.body && document.body.style,
	        transitions = false,
	        animations = false,
	        match;

	    if (bodyStyle) {
	      for (var prop in bodyStyle) {
	        if (match = vendorRegex.exec(prop)) {
	          vendorPrefix = match[0];
	          vendorPrefix = vendorPrefix.substr(0, 1).toUpperCase() + vendorPrefix.substr(1);
	          break;
	        }
	      }

	      if (!vendorPrefix) {
	        vendorPrefix = ('WebkitOpacity' in bodyStyle) && 'webkit';
	      }

	      transitions = !!(('transition' in bodyStyle) || (vendorPrefix + 'Transition' in bodyStyle));
	      animations  = !!(('animation' in bodyStyle) || (vendorPrefix + 'Animation' in bodyStyle));

	      if (android && (!transitions ||  !animations)) {
	        transitions = isString(bodyStyle.webkitTransition);
	        animations = isString(bodyStyle.webkitAnimation);
	      }
	    }


	    return {
	      // Android has history.pushState, but it does not update location correctly
	      // so let's not use the history API at all.
	      // http://code.google.com/p/android/issues/detail?id=17471
	      // https://github.com/angular/angular.js/issues/904

	      // older webkit browser (533.9) on Boxee box has exactly the same problem as Android has
	      // so let's not use the history API also
	      // We are purposefully using `!(android < 4)` to cover the case when `android` is undefined
	      // jshint -W018
	      history: !!($window.history && $window.history.pushState && !(android < 4) && !boxee),
	      // jshint +W018
	      hasEvent: function(event) {
	        // IE9 implements 'input' event it's so fubared that we rather pretend that it doesn't have
	        // it. In particular the event is not fired when backspace or delete key are pressed or
	        // when cut operation is performed.
	        // IE10+ implements 'input' event but it erroneously fires under various situations,
	        // e.g. when placeholder changes, or a form is focused.
	        if (event === 'input' && msie <= 11) return false;

	        if (isUndefined(eventSupport[event])) {
	          var divElm = document.createElement('div');
	          eventSupport[event] = 'on' + event in divElm;
	        }

	        return eventSupport[event];
	      },
	      csp: csp(),
	      vendorPrefix: vendorPrefix,
	      transitions: transitions,
	      animations: animations,
	      android: android
	    };
	  }];
	}

	var $compileMinErr = minErr('$compile');

	/**
	 * @ngdoc service
	 * @name $templateRequest
	 *
	 * @description
	 * The `$templateRequest` service downloads the provided template using `$http` and, upon success,
	 * stores the contents inside of `$templateCache`. If the HTTP request fails or the response data
	 * of the HTTP request is empty, a `$compile` error will be thrown (the exception can be thwarted
	 * by setting the 2nd parameter of the function to true).
	 *
	 * @param {string} tpl The HTTP request template URL
	 * @param {boolean=} ignoreRequestError Whether or not to ignore the exception when the request fails or the template is empty
	 *
	 * @return {Promise} a promise for the HTTP response data of the given URL.
	 *
	 * @property {number} totalPendingRequests total amount of pending template requests being downloaded.
	 */
	function $TemplateRequestProvider() {
	  this.$get = ['$templateCache', '$http', '$q', function($templateCache, $http, $q) {
	    function handleRequestFn(tpl, ignoreRequestError) {
	      handleRequestFn.totalPendingRequests++;

	      var transformResponse = $http.defaults && $http.defaults.transformResponse;

	      if (isArray(transformResponse)) {
	        transformResponse = transformResponse.filter(function(transformer) {
	          return transformer !== defaultHttpResponseTransform;
	        });
	      } else if (transformResponse === defaultHttpResponseTransform) {
	        transformResponse = null;
	      }

	      var httpOptions = {
	        cache: $templateCache,
	        transformResponse: transformResponse
	      };

	      return $http.get(tpl, httpOptions)
	        ['finally'](function() {
	          handleRequestFn.totalPendingRequests--;
	        })
	        .then(function(response) {
	          $templateCache.put(tpl, response.data);
	          return response.data;
	        }, handleError);

	      function handleError(resp) {
	        if (!ignoreRequestError) {
	          throw $compileMinErr('tpload', 'Failed to load template: {0} (HTTP status: {1} {2})',
	            tpl, resp.status, resp.statusText);
	        }
	        return $q.reject(resp);
	      }
	    }

	    handleRequestFn.totalPendingRequests = 0;

	    return handleRequestFn;
	  }];
	}

	function $$TestabilityProvider() {
	  this.$get = ['$rootScope', '$browser', '$location',
	       function($rootScope,   $browser,   $location) {

	    /**
	     * @name $testability
	     *
	     * @description
	     * The private $$testability service provides a collection of methods for use when debugging
	     * or by automated test and debugging tools.
	     */
	    var testability = {};

	    /**
	     * @name $$testability#findBindings
	     *
	     * @description
	     * Returns an array of elements that are bound (via ng-bind or {{}})
	     * to expressions matching the input.
	     *
	     * @param {Element} element The element root to search from.
	     * @param {string} expression The binding expression to match.
	     * @param {boolean} opt_exactMatch If true, only returns exact matches
	     *     for the expression. Filters and whitespace are ignored.
	     */
	    testability.findBindings = function(element, expression, opt_exactMatch) {
	      var bindings = element.getElementsByClassName('ng-binding');
	      var matches = [];
	      forEach(bindings, function(binding) {
	        var dataBinding = angular.element(binding).data('$binding');
	        if (dataBinding) {
	          forEach(dataBinding, function(bindingName) {
	            if (opt_exactMatch) {
	              var matcher = new RegExp('(^|\\s)' + escapeForRegexp(expression) + '(\\s|\\||$)');
	              if (matcher.test(bindingName)) {
	                matches.push(binding);
	              }
	            } else {
	              if (bindingName.indexOf(expression) != -1) {
	                matches.push(binding);
	              }
	            }
	          });
	        }
	      });
	      return matches;
	    };

	    /**
	     * @name $$testability#findModels
	     *
	     * @description
	     * Returns an array of elements that are two-way found via ng-model to
	     * expressions matching the input.
	     *
	     * @param {Element} element The element root to search from.
	     * @param {string} expression The model expression to match.
	     * @param {boolean} opt_exactMatch If true, only returns exact matches
	     *     for the expression.
	     */
	    testability.findModels = function(element, expression, opt_exactMatch) {
	      var prefixes = ['ng-', 'data-ng-', 'ng\\:'];
	      for (var p = 0; p < prefixes.length; ++p) {
	        var attributeEquals = opt_exactMatch ? '=' : '*=';
	        var selector = '[' + prefixes[p] + 'model' + attributeEquals + '"' + expression + '"]';
	        var elements = element.querySelectorAll(selector);
	        if (elements.length) {
	          return elements;
	        }
	      }
	    };

	    /**
	     * @name $$testability#getLocation
	     *
	     * @description
	     * Shortcut for getting the location in a browser agnostic way. Returns
	     *     the path, search, and hash. (e.g. /path?a=b#hash)
	     */
	    testability.getLocation = function() {
	      return $location.url();
	    };

	    /**
	     * @name $$testability#setLocation
	     *
	     * @description
	     * Shortcut for navigating to a location without doing a full page reload.
	     *
	     * @param {string} url The location url (path, search and hash,
	     *     e.g. /path?a=b#hash) to go to.
	     */
	    testability.setLocation = function(url) {
	      if (url !== $location.url()) {
	        $location.url(url);
	        $rootScope.$digest();
	      }
	    };

	    /**
	     * @name $$testability#whenStable
	     *
	     * @description
	     * Calls the callback when $timeout and $http requests are completed.
	     *
	     * @param {function} callback
	     */
	    testability.whenStable = function(callback) {
	      $browser.notifyWhenNoOutstandingRequests(callback);
	    };

	    return testability;
	  }];
	}

	function $TimeoutProvider() {
	  this.$get = ['$rootScope', '$browser', '$q', '$$q', '$exceptionHandler',
	       function($rootScope,   $browser,   $q,   $$q,   $exceptionHandler) {

	    var deferreds = {};


	     /**
	      * @ngdoc service
	      * @name $timeout
	      *
	      * @description
	      * Angular's wrapper for `window.setTimeout`. The `fn` function is wrapped into a try/catch
	      * block and delegates any exceptions to
	      * {@link ng.$exceptionHandler $exceptionHandler} service.
	      *
	      * The return value of calling `$timeout` is a promise, which will be resolved when
	      * the delay has passed and the timeout function, if provided, is executed.
	      *
	      * To cancel a timeout request, call `$timeout.cancel(promise)`.
	      *
	      * In tests you can use {@link ngMock.$timeout `$timeout.flush()`} to
	      * synchronously flush the queue of deferred functions.
	      *
	      * If you only want a promise that will be resolved after some specified delay
	      * then you can call `$timeout` without the `fn` function.
	      *
	      * @param {function()=} fn A function, whose execution should be delayed.
	      * @param {number=} [delay=0] Delay in milliseconds.
	      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
	      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
	      * @param {...*=} Pass additional parameters to the executed function.
	      * @returns {Promise} Promise that will be resolved when the timeout is reached. The value this
	      *   promise will be resolved with is the return value of the `fn` function.
	      *
	      */
	    function timeout(fn, delay, invokeApply) {
	      if (!isFunction(fn)) {
	        invokeApply = delay;
	        delay = fn;
	        fn = noop;
	      }

	      var args = sliceArgs(arguments, 3),
	          skipApply = (isDefined(invokeApply) && !invokeApply),
	          deferred = (skipApply ? $$q : $q).defer(),
	          promise = deferred.promise,
	          timeoutId;

	      timeoutId = $browser.defer(function() {
	        try {
	          deferred.resolve(fn.apply(null, args));
	        } catch (e) {
	          deferred.reject(e);
	          $exceptionHandler(e);
	        }
	        finally {
	          delete deferreds[promise.$$timeoutId];
	        }

	        if (!skipApply) $rootScope.$apply();
	      }, delay);

	      promise.$$timeoutId = timeoutId;
	      deferreds[timeoutId] = deferred;

	      return promise;
	    }


	     /**
	      * @ngdoc method
	      * @name $timeout#cancel
	      *
	      * @description
	      * Cancels a task associated with the `promise`. As a result of this, the promise will be
	      * resolved with a rejection.
	      *
	      * @param {Promise=} promise Promise returned by the `$timeout` function.
	      * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
	      *   canceled.
	      */
	    timeout.cancel = function(promise) {
	      if (promise && promise.$$timeoutId in deferreds) {
	        deferreds[promise.$$timeoutId].reject('canceled');
	        delete deferreds[promise.$$timeoutId];
	        return $browser.defer.cancel(promise.$$timeoutId);
	      }
	      return false;
	    };

	    return timeout;
	  }];
	}

	// NOTE:  The usage of window and document instead of $window and $document here is
	// deliberate.  This service depends on the specific behavior of anchor nodes created by the
	// browser (resolving and parsing URLs) that is unlikely to be provided by mock objects and
	// cause us to break tests.  In addition, when the browser resolves a URL for XHR, it
	// doesn't know about mocked locations and resolves URLs to the real document - which is
	// exactly the behavior needed here.  There is little value is mocking these out for this
	// service.
	var urlParsingNode = document.createElement("a");
	var originUrl = urlResolve(window.location.href);


	/**
	 *
	 * Implementation Notes for non-IE browsers
	 * ----------------------------------------
	 * Assigning a URL to the href property of an anchor DOM node, even one attached to the DOM,
	 * results both in the normalizing and parsing of the URL.  Normalizing means that a relative
	 * URL will be resolved into an absolute URL in the context of the application document.
	 * Parsing means that the anchor node's host, hostname, protocol, port, pathname and related
	 * properties are all populated to reflect the normalized URL.  This approach has wide
	 * compatibility - Safari 1+, Mozilla 1+, Opera 7+,e etc.  See
	 * http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
	 *
	 * Implementation Notes for IE
	 * ---------------------------
	 * IE >= 8 and <= 10 normalizes the URL when assigned to the anchor node similar to the other
	 * browsers.  However, the parsed components will not be set if the URL assigned did not specify
	 * them.  (e.g. if you assign a.href = "foo", then a.protocol, a.host, etc. will be empty.)  We
	 * work around that by performing the parsing in a 2nd step by taking a previously normalized
	 * URL (e.g. by assigning to a.href) and assigning it a.href again.  This correctly populates the
	 * properties such as protocol, hostname, port, etc.
	 *
	 * IE7 does not normalize the URL when assigned to an anchor node.  (Apparently, it does, if one
	 * uses the inner HTML approach to assign the URL as part of an HTML snippet -
	 * http://stackoverflow.com/a/472729)  However, setting img[src] does normalize the URL.
	 * Unfortunately, setting img[src] to something like "javascript:foo" on IE throws an exception.
	 * Since the primary usage for normalizing URLs is to sanitize such URLs, we can't use that
	 * method and IE < 8 is unsupported.
	 *
	 * References:
	 *   http://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement
	 *   http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
	 *   http://url.spec.whatwg.org/#urlutils
	 *   https://github.com/angular/angular.js/pull/2902
	 *   http://james.padolsey.com/javascript/parsing-urls-with-the-dom/
	 *
	 * @kind function
	 * @param {string} url The URL to be parsed.
	 * @description Normalizes and parses a URL.
	 * @returns {object} Returns the normalized URL as a dictionary.
	 *
	 *   | member name   | Description    |
	 *   |---------------|----------------|
	 *   | href          | A normalized version of the provided URL if it was not an absolute URL |
	 *   | protocol      | The protocol including the trailing colon                              |
	 *   | host          | The host and port (if the port is non-default) of the normalizedUrl    |
	 *   | search        | The search params, minus the question mark                             |
	 *   | hash          | The hash string, minus the hash symbol
	 *   | hostname      | The hostname
	 *   | port          | The port, without ":"
	 *   | pathname      | The pathname, beginning with "/"
	 *
	 */
	function urlResolve(url) {
	  var href = url;

	  if (msie) {
	    // Normalize before parse.  Refer Implementation Notes on why this is
	    // done in two steps on IE.
	    urlParsingNode.setAttribute("href", href);
	    href = urlParsingNode.href;
	  }

	  urlParsingNode.setAttribute('href', href);

	  // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
	  return {
	    href: urlParsingNode.href,
	    protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
	    host: urlParsingNode.host,
	    search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
	    hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
	    hostname: urlParsingNode.hostname,
	    port: urlParsingNode.port,
	    pathname: (urlParsingNode.pathname.charAt(0) === '/')
	      ? urlParsingNode.pathname
	      : '/' + urlParsingNode.pathname
	  };
	}

	/**
	 * Parse a request URL and determine whether this is a same-origin request as the application document.
	 *
	 * @param {string|object} requestUrl The url of the request as a string that will be resolved
	 * or a parsed URL object.
	 * @returns {boolean} Whether the request is for the same origin as the application document.
	 */
	function urlIsSameOrigin(requestUrl) {
	  var parsed = (isString(requestUrl)) ? urlResolve(requestUrl) : requestUrl;
	  return (parsed.protocol === originUrl.protocol &&
	          parsed.host === originUrl.host);
	}

	/**
	 * @ngdoc service
	 * @name $window
	 *
	 * @description
	 * A reference to the browser's `window` object. While `window`
	 * is globally available in JavaScript, it causes testability problems, because
	 * it is a global variable. In angular we always refer to it through the
	 * `$window` service, so it may be overridden, removed or mocked for testing.
	 *
	 * Expressions, like the one defined for the `ngClick` directive in the example
	 * below, are evaluated with respect to the current scope.  Therefore, there is
	 * no risk of inadvertently coding in a dependency on a global value in such an
	 * expression.
	 *
	 * @example
	   <example module="windowExample">
	     <file name="index.html">
	       <script>
	         angular.module('windowExample', [])
	           .controller('ExampleController', ['$scope', '$window', function($scope, $window) {
	             $scope.greeting = 'Hello, World!';
	             $scope.doGreeting = function(greeting) {
	               $window.alert(greeting);
	             };
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <input type="text" ng-model="greeting" aria-label="greeting" />
	         <button ng-click="doGreeting(greeting)">ALERT</button>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	      it('should display the greeting in the input box', function() {
	       element(by.model('greeting')).sendKeys('Hello, E2E Tests');
	       // If we click the button it will block the test runner
	       // element(':button').click();
	      });
	     </file>
	   </example>
	 */
	function $WindowProvider() {
	  this.$get = valueFn(window);
	}

	/**
	 * @name $$cookieReader
	 * @requires $document
	 *
	 * @description
	 * This is a private service for reading cookies used by $http and ngCookies
	 *
	 * @return {Object} a key/value map of the current cookies
	 */
	function $$CookieReader($document) {
	  var rawDocument = $document[0] || {};
	  var lastCookies = {};
	  var lastCookieString = '';

	  function safeDecodeURIComponent(str) {
	    try {
	      return decodeURIComponent(str);
	    } catch (e) {
	      return str;
	    }
	  }

	  return function() {
	    var cookieArray, cookie, i, index, name;
	    var currentCookieString = rawDocument.cookie || '';

	    if (currentCookieString !== lastCookieString) {
	      lastCookieString = currentCookieString;
	      cookieArray = lastCookieString.split('; ');
	      lastCookies = {};

	      for (i = 0; i < cookieArray.length; i++) {
	        cookie = cookieArray[i];
	        index = cookie.indexOf('=');
	        if (index > 0) { //ignore nameless cookies
	          name = safeDecodeURIComponent(cookie.substring(0, index));
	          // the first value that is seen for a cookie is the most
	          // specific one.  values for the same cookie name that
	          // follow are for less specific paths.
	          if (lastCookies[name] === undefined) {
	            lastCookies[name] = safeDecodeURIComponent(cookie.substring(index + 1));
	          }
	        }
	      }
	    }
	    return lastCookies;
	  };
	}

	$$CookieReader.$inject = ['$document'];

	function $$CookieReaderProvider() {
	  this.$get = $$CookieReader;
	}

	/* global currencyFilter: true,
	 dateFilter: true,
	 filterFilter: true,
	 jsonFilter: true,
	 limitToFilter: true,
	 lowercaseFilter: true,
	 numberFilter: true,
	 orderByFilter: true,
	 uppercaseFilter: true,
	 */

	/**
	 * @ngdoc provider
	 * @name $filterProvider
	 * @description
	 *
	 * Filters are just functions which transform input to an output. However filters need to be
	 * Dependency Injected. To achieve this a filter definition consists of a factory function which is
	 * annotated with dependencies and is responsible for creating a filter function.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
	 * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
	 * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
	 * (`myapp_subsection_filterx`).
	 * </div>
	 *
	 * ```js
	 *   // Filter registration
	 *   function MyModule($provide, $filterProvider) {
	 *     // create a service to demonstrate injection (not always needed)
	 *     $provide.value('greet', function(name){
	 *       return 'Hello ' + name + '!';
	 *     });
	 *
	 *     // register a filter factory which uses the
	 *     // greet service to demonstrate DI.
	 *     $filterProvider.register('greet', function(greet){
	 *       // return the filter function which uses the greet service
	 *       // to generate salutation
	 *       return function(text) {
	 *         // filters need to be forgiving so check input validity
	 *         return text && greet(text) || text;
	 *       };
	 *     });
	 *   }
	 * ```
	 *
	 * The filter function is registered with the `$injector` under the filter name suffix with
	 * `Filter`.
	 *
	 * ```js
	 *   it('should be the same instance', inject(
	 *     function($filterProvider) {
	 *       $filterProvider.register('reverse', function(){
	 *         return ...;
	 *       });
	 *     },
	 *     function($filter, reverseFilter) {
	 *       expect($filter('reverse')).toBe(reverseFilter);
	 *     });
	 * ```
	 *
	 *
	 * For more information about how angular filters work, and how to create your own filters, see
	 * {@link guide/filter Filters} in the Angular Developer Guide.
	 */

	/**
	 * @ngdoc service
	 * @name $filter
	 * @kind function
	 * @description
	 * Filters are used for formatting data displayed to the user.
	 *
	 * The general syntax in templates is as follows:
	 *
	 *         {{ expression [| filter_name[:parameter_value] ... ] }}
	 *
	 * @param {String} name Name of the filter function to retrieve
	 * @return {Function} the filter function
	 * @example
	   <example name="$filter" module="filterExample">
	     <file name="index.html">
	       <div ng-controller="MainCtrl">
	        <h3>{{ originalText }}</h3>
	        <h3>{{ filteredText }}</h3>
	       </div>
	     </file>

	     <file name="script.js">
	      angular.module('filterExample', [])
	      .controller('MainCtrl', function($scope, $filter) {
	        $scope.originalText = 'hello';
	        $scope.filteredText = $filter('uppercase')($scope.originalText);
	      });
	     </file>
	   </example>
	  */
	$FilterProvider.$inject = ['$provide'];
	function $FilterProvider($provide) {
	  var suffix = 'Filter';

	  /**
	   * @ngdoc method
	   * @name $filterProvider#register
	   * @param {string|Object} name Name of the filter function, or an object map of filters where
	   *    the keys are the filter names and the values are the filter factories.
	   *
	   *    <div class="alert alert-warning">
	   *    **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
	   *    Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
	   *    your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
	   *    (`myapp_subsection_filterx`).
	   *    </div>
	   * @returns {Object} Registered filter instance, or if a map of filters was provided then a map
	   *    of the registered filter instances.
	   */
	  function register(name, factory) {
	    if (isObject(name)) {
	      var filters = {};
	      forEach(name, function(filter, key) {
	        filters[key] = register(key, filter);
	      });
	      return filters;
	    } else {
	      return $provide.factory(name + suffix, factory);
	    }
	  }
	  this.register = register;

	  this.$get = ['$injector', function($injector) {
	    return function(name) {
	      return $injector.get(name + suffix);
	    };
	  }];

	  ////////////////////////////////////////

	  /* global
	    currencyFilter: false,
	    dateFilter: false,
	    filterFilter: false,
	    jsonFilter: false,
	    limitToFilter: false,
	    lowercaseFilter: false,
	    numberFilter: false,
	    orderByFilter: false,
	    uppercaseFilter: false,
	  */

	  register('currency', currencyFilter);
	  register('date', dateFilter);
	  register('filter', filterFilter);
	  register('json', jsonFilter);
	  register('limitTo', limitToFilter);
	  register('lowercase', lowercaseFilter);
	  register('number', numberFilter);
	  register('orderBy', orderByFilter);
	  register('uppercase', uppercaseFilter);
	}

	/**
	 * @ngdoc filter
	 * @name filter
	 * @kind function
	 *
	 * @description
	 * Selects a subset of items from `array` and returns it as a new array.
	 *
	 * @param {Array} array The source array.
	 * @param {string|Object|function()} expression The predicate to be used for selecting items from
	 *   `array`.
	 *
	 *   Can be one of:
	 *
	 *   - `string`: The string is used for matching against the contents of the `array`. All strings or
	 *     objects with string properties in `array` that match this string will be returned. This also
	 *     applies to nested object properties.
	 *     The predicate can be negated by prefixing the string with `!`.
	 *
	 *   - `Object`: A pattern object can be used to filter specific properties on objects contained
	 *     by `array`. For example `{name:"M", phone:"1"}` predicate will return an array of items
	 *     which have property `name` containing "M" and property `phone` containing "1". A special
	 *     property name `$` can be used (as in `{$:"text"}`) to accept a match against any
	 *     property of the object or its nested object properties. That's equivalent to the simple
	 *     substring match with a `string` as described above. The predicate can be negated by prefixing
	 *     the string with `!`.
	 *     For example `{name: "!M"}` predicate will return an array of items which have property `name`
	 *     not containing "M".
	 *
	 *     Note that a named property will match properties on the same level only, while the special
	 *     `$` property will match properties on the same level or deeper. E.g. an array item like
	 *     `{name: {first: 'John', last: 'Doe'}}` will **not** be matched by `{name: 'John'}`, but
	 *     **will** be matched by `{$: 'John'}`.
	 *
	 *   - `function(value, index)`: A predicate function can be used to write arbitrary filters. The
	 *     function is called for each element of `array`. The final result is an array of those
	 *     elements that the predicate returned true for.
	 *
	 * @param {function(actual, expected)|true|undefined} comparator Comparator which is used in
	 *     determining if the expected value (from the filter expression) and actual value (from
	 *     the object in the array) should be considered a match.
	 *
	 *   Can be one of:
	 *
	 *   - `function(actual, expected)`:
	 *     The function will be given the object value and the predicate value to compare and
	 *     should return true if both values should be considered equal.
	 *
	 *   - `true`: A shorthand for `function(actual, expected) { return angular.equals(actual, expected)}`.
	 *     This is essentially strict comparison of expected and actual.
	 *
	 *   - `false|undefined`: A short hand for a function which will look for a substring match in case
	 *     insensitive way.
	 *
	 *     Primitive values are converted to strings. Objects are not compared against primitives,
	 *     unless they have a custom `toString` method (e.g. `Date` objects).
	 *
	 * @example
	   <example>
	     <file name="index.html">
	       <div ng-init="friends = [{name:'John', phone:'555-1276'},
	                                {name:'Mary', phone:'800-BIG-MARY'},
	                                {name:'Mike', phone:'555-4321'},
	                                {name:'Adam', phone:'555-5678'},
	                                {name:'Julie', phone:'555-8765'},
	                                {name:'Juliette', phone:'555-5678'}]"></div>

	       <label>Search: <input ng-model="searchText"></label>
	       <table id="searchTextResults">
	         <tr><th>Name</th><th>Phone</th></tr>
	         <tr ng-repeat="friend in friends | filter:searchText">
	           <td>{{friend.name}}</td>
	           <td>{{friend.phone}}</td>
	         </tr>
	       </table>
	       <hr>
	       <label>Any: <input ng-model="search.$"></label> <br>
	       <label>Name only <input ng-model="search.name"></label><br>
	       <label>Phone only <input ng-model="search.phone"></label><br>
	       <label>Equality <input type="checkbox" ng-model="strict"></label><br>
	       <table id="searchObjResults">
	         <tr><th>Name</th><th>Phone</th></tr>
	         <tr ng-repeat="friendObj in friends | filter:search:strict">
	           <td>{{friendObj.name}}</td>
	           <td>{{friendObj.phone}}</td>
	         </tr>
	       </table>
	     </file>
	     <file name="protractor.js" type="protractor">
	       var expectFriendNames = function(expectedNames, key) {
	         element.all(by.repeater(key + ' in friends').column(key + '.name')).then(function(arr) {
	           arr.forEach(function(wd, i) {
	             expect(wd.getText()).toMatch(expectedNames[i]);
	           });
	         });
	       };

	       it('should search across all fields when filtering with a string', function() {
	         var searchText = element(by.model('searchText'));
	         searchText.clear();
	         searchText.sendKeys('m');
	         expectFriendNames(['Mary', 'Mike', 'Adam'], 'friend');

	         searchText.clear();
	         searchText.sendKeys('76');
	         expectFriendNames(['John', 'Julie'], 'friend');
	       });

	       it('should search in specific fields when filtering with a predicate object', function() {
	         var searchAny = element(by.model('search.$'));
	         searchAny.clear();
	         searchAny.sendKeys('i');
	         expectFriendNames(['Mary', 'Mike', 'Julie', 'Juliette'], 'friendObj');
	       });
	       it('should use a equal comparison when comparator is true', function() {
	         var searchName = element(by.model('search.name'));
	         var strict = element(by.model('strict'));
	         searchName.clear();
	         searchName.sendKeys('Julie');
	         strict.click();
	         expectFriendNames(['Julie'], 'friendObj');
	       });
	     </file>
	   </example>
	 */
	function filterFilter() {
	  return function(array, expression, comparator) {
	    if (!isArrayLike(array)) {
	      if (array == null) {
	        return array;
	      } else {
	        throw minErr('filter')('notarray', 'Expected array but received: {0}', array);
	      }
	    }

	    var expressionType = getTypeForFilter(expression);
	    var predicateFn;
	    var matchAgainstAnyProp;

	    switch (expressionType) {
	      case 'function':
	        predicateFn = expression;
	        break;
	      case 'boolean':
	      case 'null':
	      case 'number':
	      case 'string':
	        matchAgainstAnyProp = true;
	        //jshint -W086
	      case 'object':
	        //jshint +W086
	        predicateFn = createPredicateFn(expression, comparator, matchAgainstAnyProp);
	        break;
	      default:
	        return array;
	    }

	    return Array.prototype.filter.call(array, predicateFn);
	  };
	}

	function hasCustomToString(obj) {
	  return isFunction(obj.toString) && obj.toString !== Object.prototype.toString;
	}

	// Helper functions for `filterFilter`
	function createPredicateFn(expression, comparator, matchAgainstAnyProp) {
	  var shouldMatchPrimitives = isObject(expression) && ('$' in expression);
	  var predicateFn;

	  if (comparator === true) {
	    comparator = equals;
	  } else if (!isFunction(comparator)) {
	    comparator = function(actual, expected) {
	      if (isUndefined(actual)) {
	        // No substring matching against `undefined`
	        return false;
	      }
	      if ((actual === null) || (expected === null)) {
	        // No substring matching against `null`; only match against `null`
	        return actual === expected;
	      }
	      if (isObject(expected) || (isObject(actual) && !hasCustomToString(actual))) {
	        // Should not compare primitives against objects, unless they have custom `toString` method
	        return false;
	      }

	      actual = lowercase('' + actual);
	      expected = lowercase('' + expected);
	      return actual.indexOf(expected) !== -1;
	    };
	  }

	  predicateFn = function(item) {
	    if (shouldMatchPrimitives && !isObject(item)) {
	      return deepCompare(item, expression.$, comparator, false);
	    }
	    return deepCompare(item, expression, comparator, matchAgainstAnyProp);
	  };

	  return predicateFn;
	}

	function deepCompare(actual, expected, comparator, matchAgainstAnyProp, dontMatchWholeObject) {
	  var actualType = getTypeForFilter(actual);
	  var expectedType = getTypeForFilter(expected);

	  if ((expectedType === 'string') && (expected.charAt(0) === '!')) {
	    return !deepCompare(actual, expected.substring(1), comparator, matchAgainstAnyProp);
	  } else if (isArray(actual)) {
	    // In case `actual` is an array, consider it a match
	    // if ANY of it's items matches `expected`
	    return actual.some(function(item) {
	      return deepCompare(item, expected, comparator, matchAgainstAnyProp);
	    });
	  }

	  switch (actualType) {
	    case 'object':
	      var key;
	      if (matchAgainstAnyProp) {
	        for (key in actual) {
	          if ((key.charAt(0) !== '$') && deepCompare(actual[key], expected, comparator, true)) {
	            return true;
	          }
	        }
	        return dontMatchWholeObject ? false : deepCompare(actual, expected, comparator, false);
	      } else if (expectedType === 'object') {
	        for (key in expected) {
	          var expectedVal = expected[key];
	          if (isFunction(expectedVal) || isUndefined(expectedVal)) {
	            continue;
	          }

	          var matchAnyProperty = key === '$';
	          var actualVal = matchAnyProperty ? actual : actual[key];
	          if (!deepCompare(actualVal, expectedVal, comparator, matchAnyProperty, matchAnyProperty)) {
	            return false;
	          }
	        }
	        return true;
	      } else {
	        return comparator(actual, expected);
	      }
	      break;
	    case 'function':
	      return false;
	    default:
	      return comparator(actual, expected);
	  }
	}

	// Used for easily differentiating between `null` and actual `object`
	function getTypeForFilter(val) {
	  return (val === null) ? 'null' : typeof val;
	}

	/**
	 * @ngdoc filter
	 * @name currency
	 * @kind function
	 *
	 * @description
	 * Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default
	 * symbol for current locale is used.
	 *
	 * @param {number} amount Input to filter.
	 * @param {string=} symbol Currency symbol or identifier to be displayed.
	 * @param {number=} fractionSize Number of decimal places to round the amount to, defaults to default max fraction size for current locale
	 * @returns {string} Formatted number.
	 *
	 *
	 * @example
	   <example module="currencyExample">
	     <file name="index.html">
	       <script>
	         angular.module('currencyExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.amount = 1234.56;
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <input type="number" ng-model="amount" aria-label="amount"> <br>
	         default currency symbol ($): <span id="currency-default">{{amount | currency}}</span><br>
	         custom currency identifier (USD$): <span id="currency-custom">{{amount | currency:"USD$"}}</span>
	         no fractions (0): <span id="currency-no-fractions">{{amount | currency:"USD$":0}}</span>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should init with 1234.56', function() {
	         expect(element(by.id('currency-default')).getText()).toBe('$1,234.56');
	         expect(element(by.id('currency-custom')).getText()).toBe('USD$1,234.56');
	         expect(element(by.id('currency-no-fractions')).getText()).toBe('USD$1,235');
	       });
	       it('should update', function() {
	         if (browser.params.browser == 'safari') {
	           // Safari does not understand the minus key. See
	           // https://github.com/angular/protractor/issues/481
	           return;
	         }
	         element(by.model('amount')).clear();
	         element(by.model('amount')).sendKeys('-1234');
	         expect(element(by.id('currency-default')).getText()).toBe('($1,234.00)');
	         expect(element(by.id('currency-custom')).getText()).toBe('(USD$1,234.00)');
	         expect(element(by.id('currency-no-fractions')).getText()).toBe('(USD$1,234)');
	       });
	     </file>
	   </example>
	 */
	currencyFilter.$inject = ['$locale'];
	function currencyFilter($locale) {
	  var formats = $locale.NUMBER_FORMATS;
	  return function(amount, currencySymbol, fractionSize) {
	    if (isUndefined(currencySymbol)) {
	      currencySymbol = formats.CURRENCY_SYM;
	    }

	    if (isUndefined(fractionSize)) {
	      fractionSize = formats.PATTERNS[1].maxFrac;
	    }

	    // if null or undefined pass it through
	    return (amount == null)
	        ? amount
	        : formatNumber(amount, formats.PATTERNS[1], formats.GROUP_SEP, formats.DECIMAL_SEP, fractionSize).
	            replace(/\u00A4/g, currencySymbol);
	  };
	}

	/**
	 * @ngdoc filter
	 * @name number
	 * @kind function
	 *
	 * @description
	 * Formats a number as text.
	 *
	 * If the input is not a number an empty string is returned.
	 *
	 * If the input is an infinite (Infinity/-Infinity) the Infinity symbol '∞' is returned.
	 *
	 * @param {number|string} number Number to format.
	 * @param {(number|string)=} fractionSize Number of decimal places to round the number to.
	 * If this is not provided then the fraction size is computed from the current locale's number
	 * formatting pattern. In the case of the default locale, it will be 3.
	 * @returns {string} Number rounded to decimalPlaces and places a “,” after each third digit.
	 *
	 * @example
	   <example module="numberFilterExample">
	     <file name="index.html">
	       <script>
	         angular.module('numberFilterExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.val = 1234.56789;
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <label>Enter number: <input ng-model='val'></label><br>
	         Default formatting: <span id='number-default'>{{val | number}}</span><br>
	         No fractions: <span>{{val | number:0}}</span><br>
	         Negative number: <span>{{-val | number:4}}</span>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should format numbers', function() {
	         expect(element(by.id('number-default')).getText()).toBe('1,234.568');
	         expect(element(by.binding('val | number:0')).getText()).toBe('1,235');
	         expect(element(by.binding('-val | number:4')).getText()).toBe('-1,234.5679');
	       });

	       it('should update', function() {
	         element(by.model('val')).clear();
	         element(by.model('val')).sendKeys('3374.333');
	         expect(element(by.id('number-default')).getText()).toBe('3,374.333');
	         expect(element(by.binding('val | number:0')).getText()).toBe('3,374');
	         expect(element(by.binding('-val | number:4')).getText()).toBe('-3,374.3330');
	      });
	     </file>
	   </example>
	 */


	numberFilter.$inject = ['$locale'];
	function numberFilter($locale) {
	  var formats = $locale.NUMBER_FORMATS;
	  return function(number, fractionSize) {

	    // if null or undefined pass it through
	    return (number == null)
	        ? number
	        : formatNumber(number, formats.PATTERNS[0], formats.GROUP_SEP, formats.DECIMAL_SEP,
	                       fractionSize);
	  };
	}

	var DECIMAL_SEP = '.';
	function formatNumber(number, pattern, groupSep, decimalSep, fractionSize) {
	  if (isObject(number)) return '';

	  var isNegative = number < 0;
	  number = Math.abs(number);

	  var isInfinity = number === Infinity;
	  if (!isInfinity && !isFinite(number)) return '';

	  var numStr = number + '',
	      formatedText = '',
	      hasExponent = false,
	      parts = [];

	  if (isInfinity) formatedText = '\u221e';

	  if (!isInfinity && numStr.indexOf('e') !== -1) {
	    var match = numStr.match(/([\d\.]+)e(-?)(\d+)/);
	    if (match && match[2] == '-' && match[3] > fractionSize + 1) {
	      number = 0;
	    } else {
	      formatedText = numStr;
	      hasExponent = true;
	    }
	  }

	  if (!isInfinity && !hasExponent) {
	    var fractionLen = (numStr.split(DECIMAL_SEP)[1] || '').length;

	    // determine fractionSize if it is not specified
	    if (isUndefined(fractionSize)) {
	      fractionSize = Math.min(Math.max(pattern.minFrac, fractionLen), pattern.maxFrac);
	    }

	    // safely round numbers in JS without hitting imprecisions of floating-point arithmetics
	    // inspired by:
	    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round
	    number = +(Math.round(+(number.toString() + 'e' + fractionSize)).toString() + 'e' + -fractionSize);

	    var fraction = ('' + number).split(DECIMAL_SEP);
	    var whole = fraction[0];
	    fraction = fraction[1] || '';

	    var i, pos = 0,
	        lgroup = pattern.lgSize,
	        group = pattern.gSize;

	    if (whole.length >= (lgroup + group)) {
	      pos = whole.length - lgroup;
	      for (i = 0; i < pos; i++) {
	        if ((pos - i) % group === 0 && i !== 0) {
	          formatedText += groupSep;
	        }
	        formatedText += whole.charAt(i);
	      }
	    }

	    for (i = pos; i < whole.length; i++) {
	      if ((whole.length - i) % lgroup === 0 && i !== 0) {
	        formatedText += groupSep;
	      }
	      formatedText += whole.charAt(i);
	    }

	    // format fraction part.
	    while (fraction.length < fractionSize) {
	      fraction += '0';
	    }

	    if (fractionSize && fractionSize !== "0") formatedText += decimalSep + fraction.substr(0, fractionSize);
	  } else {
	    if (fractionSize > 0 && number < 1) {
	      formatedText = number.toFixed(fractionSize);
	      number = parseFloat(formatedText);
	    }
	  }

	  if (number === 0) {
	    isNegative = false;
	  }

	  parts.push(isNegative ? pattern.negPre : pattern.posPre,
	             formatedText,
	             isNegative ? pattern.negSuf : pattern.posSuf);
	  return parts.join('');
	}

	function padNumber(num, digits, trim) {
	  var neg = '';
	  if (num < 0) {
	    neg =  '-';
	    num = -num;
	  }
	  num = '' + num;
	  while (num.length < digits) num = '0' + num;
	  if (trim) {
	    num = num.substr(num.length - digits);
	  }
	  return neg + num;
	}


	function dateGetter(name, size, offset, trim) {
	  offset = offset || 0;
	  return function(date) {
	    var value = date['get' + name]();
	    if (offset > 0 || value > -offset) {
	      value += offset;
	    }
	    if (value === 0 && offset == -12) value = 12;
	    return padNumber(value, size, trim);
	  };
	}

	function dateStrGetter(name, shortForm) {
	  return function(date, formats) {
	    var value = date['get' + name]();
	    var get = uppercase(shortForm ? ('SHORT' + name) : name);

	    return formats[get][value];
	  };
	}

	function timeZoneGetter(date, formats, offset) {
	  var zone = -1 * offset;
	  var paddedZone = (zone >= 0) ? "+" : "";

	  paddedZone += padNumber(Math[zone > 0 ? 'floor' : 'ceil'](zone / 60), 2) +
	                padNumber(Math.abs(zone % 60), 2);

	  return paddedZone;
	}

	function getFirstThursdayOfYear(year) {
	    // 0 = index of January
	    var dayOfWeekOnFirst = (new Date(year, 0, 1)).getDay();
	    // 4 = index of Thursday (+1 to account for 1st = 5)
	    // 11 = index of *next* Thursday (+1 account for 1st = 12)
	    return new Date(year, 0, ((dayOfWeekOnFirst <= 4) ? 5 : 12) - dayOfWeekOnFirst);
	}

	function getThursdayThisWeek(datetime) {
	    return new Date(datetime.getFullYear(), datetime.getMonth(),
	      // 4 = index of Thursday
	      datetime.getDate() + (4 - datetime.getDay()));
	}

	function weekGetter(size) {
	   return function(date) {
	      var firstThurs = getFirstThursdayOfYear(date.getFullYear()),
	         thisThurs = getThursdayThisWeek(date);

	      var diff = +thisThurs - +firstThurs,
	         result = 1 + Math.round(diff / 6.048e8); // 6.048e8 ms per week

	      return padNumber(result, size);
	   };
	}

	function ampmGetter(date, formats) {
	  return date.getHours() < 12 ? formats.AMPMS[0] : formats.AMPMS[1];
	}

	function eraGetter(date, formats) {
	  return date.getFullYear() <= 0 ? formats.ERAS[0] : formats.ERAS[1];
	}

	function longEraGetter(date, formats) {
	  return date.getFullYear() <= 0 ? formats.ERANAMES[0] : formats.ERANAMES[1];
	}

	var DATE_FORMATS = {
	  yyyy: dateGetter('FullYear', 4),
	    yy: dateGetter('FullYear', 2, 0, true),
	     y: dateGetter('FullYear', 1),
	  MMMM: dateStrGetter('Month'),
	   MMM: dateStrGetter('Month', true),
	    MM: dateGetter('Month', 2, 1),
	     M: dateGetter('Month', 1, 1),
	    dd: dateGetter('Date', 2),
	     d: dateGetter('Date', 1),
	    HH: dateGetter('Hours', 2),
	     H: dateGetter('Hours', 1),
	    hh: dateGetter('Hours', 2, -12),
	     h: dateGetter('Hours', 1, -12),
	    mm: dateGetter('Minutes', 2),
	     m: dateGetter('Minutes', 1),
	    ss: dateGetter('Seconds', 2),
	     s: dateGetter('Seconds', 1),
	     // while ISO 8601 requires fractions to be prefixed with `.` or `,`
	     // we can be just safely rely on using `sss` since we currently don't support single or two digit fractions
	   sss: dateGetter('Milliseconds', 3),
	  EEEE: dateStrGetter('Day'),
	   EEE: dateStrGetter('Day', true),
	     a: ampmGetter,
	     Z: timeZoneGetter,
	    ww: weekGetter(2),
	     w: weekGetter(1),
	     G: eraGetter,
	     GG: eraGetter,
	     GGG: eraGetter,
	     GGGG: longEraGetter
	};

	var DATE_FORMATS_SPLIT = /((?:[^yMdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z|G+|w+))(.*)/,
	    NUMBER_STRING = /^\-?\d+$/;

	/**
	 * @ngdoc filter
	 * @name date
	 * @kind function
	 *
	 * @description
	 *   Formats `date` to a string based on the requested `format`.
	 *
	 *   `format` string can be composed of the following elements:
	 *
	 *   * `'yyyy'`: 4 digit representation of year (e.g. AD 1 => 0001, AD 2010 => 2010)
	 *   * `'yy'`: 2 digit representation of year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)
	 *   * `'y'`: 1 digit representation of year, e.g. (AD 1 => 1, AD 199 => 199)
	 *   * `'MMMM'`: Month in year (January-December)
	 *   * `'MMM'`: Month in year (Jan-Dec)
	 *   * `'MM'`: Month in year, padded (01-12)
	 *   * `'M'`: Month in year (1-12)
	 *   * `'dd'`: Day in month, padded (01-31)
	 *   * `'d'`: Day in month (1-31)
	 *   * `'EEEE'`: Day in Week,(Sunday-Saturday)
	 *   * `'EEE'`: Day in Week, (Sun-Sat)
	 *   * `'HH'`: Hour in day, padded (00-23)
	 *   * `'H'`: Hour in day (0-23)
	 *   * `'hh'`: Hour in AM/PM, padded (01-12)
	 *   * `'h'`: Hour in AM/PM, (1-12)
	 *   * `'mm'`: Minute in hour, padded (00-59)
	 *   * `'m'`: Minute in hour (0-59)
	 *   * `'ss'`: Second in minute, padded (00-59)
	 *   * `'s'`: Second in minute (0-59)
	 *   * `'sss'`: Millisecond in second, padded (000-999)
	 *   * `'a'`: AM/PM marker
	 *   * `'Z'`: 4 digit (+sign) representation of the timezone offset (-1200-+1200)
	 *   * `'ww'`: Week of year, padded (00-53). Week 01 is the week with the first Thursday of the year
	 *   * `'w'`: Week of year (0-53). Week 1 is the week with the first Thursday of the year
	 *   * `'G'`, `'GG'`, `'GGG'`: The abbreviated form of the era string (e.g. 'AD')
	 *   * `'GGGG'`: The long form of the era string (e.g. 'Anno Domini')
	 *
	 *   `format` string can also be one of the following predefined
	 *   {@link guide/i18n localizable formats}:
	 *
	 *   * `'medium'`: equivalent to `'MMM d, y h:mm:ss a'` for en_US locale
	 *     (e.g. Sep 3, 2010 12:05:08 PM)
	 *   * `'short'`: equivalent to `'M/d/yy h:mm a'` for en_US  locale (e.g. 9/3/10 12:05 PM)
	 *   * `'fullDate'`: equivalent to `'EEEE, MMMM d, y'` for en_US  locale
	 *     (e.g. Friday, September 3, 2010)
	 *   * `'longDate'`: equivalent to `'MMMM d, y'` for en_US  locale (e.g. September 3, 2010)
	 *   * `'mediumDate'`: equivalent to `'MMM d, y'` for en_US  locale (e.g. Sep 3, 2010)
	 *   * `'shortDate'`: equivalent to `'M/d/yy'` for en_US locale (e.g. 9/3/10)
	 *   * `'mediumTime'`: equivalent to `'h:mm:ss a'` for en_US locale (e.g. 12:05:08 PM)
	 *   * `'shortTime'`: equivalent to `'h:mm a'` for en_US locale (e.g. 12:05 PM)
	 *
	 *   `format` string can contain literal values. These need to be escaped by surrounding with single quotes (e.g.
	 *   `"h 'in the morning'"`). In order to output a single quote, escape it - i.e., two single quotes in a sequence
	 *   (e.g. `"h 'o''clock'"`).
	 *
	 * @param {(Date|number|string)} date Date to format either as Date object, milliseconds (string or
	 *    number) or various ISO 8601 datetime string formats (e.g. yyyy-MM-ddTHH:mm:ss.sssZ and its
	 *    shorter versions like yyyy-MM-ddTHH:mmZ, yyyy-MM-dd or yyyyMMddTHHmmssZ). If no timezone is
	 *    specified in the string input, the time is considered to be in the local timezone.
	 * @param {string=} format Formatting rules (see Description). If not specified,
	 *    `mediumDate` is used.
	 * @param {string=} timezone Timezone to be used for formatting. It understands UTC/GMT and the
	 *    continental US time zone abbreviations, but for general use, use a time zone offset, for
	 *    example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)
	 *    If not specified, the timezone of the browser will be used.
	 * @returns {string} Formatted string or the input if input is not recognized as date/millis.
	 *
	 * @example
	   <example>
	     <file name="index.html">
	       <span ng-non-bindable>{{1288323623006 | date:'medium'}}</span>:
	           <span>{{1288323623006 | date:'medium'}}</span><br>
	       <span ng-non-bindable>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span>:
	          <span>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span><br>
	       <span ng-non-bindable>{{1288323623006 | date:'MM/dd/yyyy @ h:mma'}}</span>:
	          <span>{{'1288323623006' | date:'MM/dd/yyyy @ h:mma'}}</span><br>
	       <span ng-non-bindable>{{1288323623006 | date:"MM/dd/yyyy 'at' h:mma"}}</span>:
	          <span>{{'1288323623006' | date:"MM/dd/yyyy 'at' h:mma"}}</span><br>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should format date', function() {
	         expect(element(by.binding("1288323623006 | date:'medium'")).getText()).
	            toMatch(/Oct 2\d, 2010 \d{1,2}:\d{2}:\d{2} (AM|PM)/);
	         expect(element(by.binding("1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'")).getText()).
	            toMatch(/2010\-10\-2\d \d{2}:\d{2}:\d{2} (\-|\+)?\d{4}/);
	         expect(element(by.binding("'1288323623006' | date:'MM/dd/yyyy @ h:mma'")).getText()).
	            toMatch(/10\/2\d\/2010 @ \d{1,2}:\d{2}(AM|PM)/);
	         expect(element(by.binding("'1288323623006' | date:\"MM/dd/yyyy 'at' h:mma\"")).getText()).
	            toMatch(/10\/2\d\/2010 at \d{1,2}:\d{2}(AM|PM)/);
	       });
	     </file>
	   </example>
	 */
	dateFilter.$inject = ['$locale'];
	function dateFilter($locale) {


	  var R_ISO8601_STR = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
	                     // 1        2       3         4          5          6          7          8  9     10      11
	  function jsonStringToDate(string) {
	    var match;
	    if (match = string.match(R_ISO8601_STR)) {
	      var date = new Date(0),
	          tzHour = 0,
	          tzMin  = 0,
	          dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear,
	          timeSetter = match[8] ? date.setUTCHours : date.setHours;

	      if (match[9]) {
	        tzHour = toInt(match[9] + match[10]);
	        tzMin = toInt(match[9] + match[11]);
	      }
	      dateSetter.call(date, toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));
	      var h = toInt(match[4] || 0) - tzHour;
	      var m = toInt(match[5] || 0) - tzMin;
	      var s = toInt(match[6] || 0);
	      var ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);
	      timeSetter.call(date, h, m, s, ms);
	      return date;
	    }
	    return string;
	  }


	  return function(date, format, timezone) {
	    var text = '',
	        parts = [],
	        fn, match;

	    format = format || 'mediumDate';
	    format = $locale.DATETIME_FORMATS[format] || format;
	    if (isString(date)) {
	      date = NUMBER_STRING.test(date) ? toInt(date) : jsonStringToDate(date);
	    }

	    if (isNumber(date)) {
	      date = new Date(date);
	    }

	    if (!isDate(date) || !isFinite(date.getTime())) {
	      return date;
	    }

	    while (format) {
	      match = DATE_FORMATS_SPLIT.exec(format);
	      if (match) {
	        parts = concat(parts, match, 1);
	        format = parts.pop();
	      } else {
	        parts.push(format);
	        format = null;
	      }
	    }

	    var dateTimezoneOffset = date.getTimezoneOffset();
	    if (timezone) {
	      dateTimezoneOffset = timezoneToOffset(timezone, date.getTimezoneOffset());
	      date = convertTimezoneToLocal(date, timezone, true);
	    }
	    forEach(parts, function(value) {
	      fn = DATE_FORMATS[value];
	      text += fn ? fn(date, $locale.DATETIME_FORMATS, dateTimezoneOffset)
	                 : value.replace(/(^'|'$)/g, '').replace(/''/g, "'");
	    });

	    return text;
	  };
	}


	/**
	 * @ngdoc filter
	 * @name json
	 * @kind function
	 *
	 * @description
	 *   Allows you to convert a JavaScript object into JSON string.
	 *
	 *   This filter is mostly useful for debugging. When using the double curly {{value}} notation
	 *   the binding is automatically converted to JSON.
	 *
	 * @param {*} object Any JavaScript object (including arrays and primitive types) to filter.
	 * @param {number=} spacing The number of spaces to use per indentation, defaults to 2.
	 * @returns {string} JSON string.
	 *
	 *
	 * @example
	   <example>
	     <file name="index.html">
	       <pre id="default-spacing">{{ {'name':'value'} | json }}</pre>
	       <pre id="custom-spacing">{{ {'name':'value'} | json:4 }}</pre>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should jsonify filtered objects', function() {
	         expect(element(by.id('default-spacing')).getText()).toMatch(/\{\n  "name": ?"value"\n}/);
	         expect(element(by.id('custom-spacing')).getText()).toMatch(/\{\n    "name": ?"value"\n}/);
	       });
	     </file>
	   </example>
	 *
	 */
	function jsonFilter() {
	  return function(object, spacing) {
	    if (isUndefined(spacing)) {
	        spacing = 2;
	    }
	    return toJson(object, spacing);
	  };
	}


	/**
	 * @ngdoc filter
	 * @name lowercase
	 * @kind function
	 * @description
	 * Converts string to lowercase.
	 * @see angular.lowercase
	 */
	var lowercaseFilter = valueFn(lowercase);


	/**
	 * @ngdoc filter
	 * @name uppercase
	 * @kind function
	 * @description
	 * Converts string to uppercase.
	 * @see angular.uppercase
	 */
	var uppercaseFilter = valueFn(uppercase);

	/**
	 * @ngdoc filter
	 * @name limitTo
	 * @kind function
	 *
	 * @description
	 * Creates a new array or string containing only a specified number of elements. The elements
	 * are taken from either the beginning or the end of the source array, string or number, as specified by
	 * the value and sign (positive or negative) of `limit`. If a number is used as input, it is
	 * converted to a string.
	 *
	 * @param {Array|string|number} input Source array, string or number to be limited.
	 * @param {string|number} limit The length of the returned array or string. If the `limit` number
	 *     is positive, `limit` number of items from the beginning of the source array/string are copied.
	 *     If the number is negative, `limit` number  of items from the end of the source array/string
	 *     are copied. The `limit` will be trimmed if it exceeds `array.length`. If `limit` is undefined,
	 *     the input will be returned unchanged.
	 * @param {(string|number)=} begin Index at which to begin limitation. As a negative index, `begin`
	 *     indicates an offset from the end of `input`. Defaults to `0`.
	 * @returns {Array|string} A new sub-array or substring of length `limit` or less if input array
	 *     had less than `limit` elements.
	 *
	 * @example
	   <example module="limitToExample">
	     <file name="index.html">
	       <script>
	         angular.module('limitToExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.numbers = [1,2,3,4,5,6,7,8,9];
	             $scope.letters = "abcdefghi";
	             $scope.longNumber = 2345432342;
	             $scope.numLimit = 3;
	             $scope.letterLimit = 3;
	             $scope.longNumberLimit = 3;
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <label>
	            Limit {{numbers}} to:
	            <input type="number" step="1" ng-model="numLimit">
	         </label>
	         <p>Output numbers: {{ numbers | limitTo:numLimit }}</p>
	         <label>
	            Limit {{letters}} to:
	            <input type="number" step="1" ng-model="letterLimit">
	         </label>
	         <p>Output letters: {{ letters | limitTo:letterLimit }}</p>
	         <label>
	            Limit {{longNumber}} to:
	            <input type="number" step="1" ng-model="longNumberLimit">
	         </label>
	         <p>Output long number: {{ longNumber | limitTo:longNumberLimit }}</p>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       var numLimitInput = element(by.model('numLimit'));
	       var letterLimitInput = element(by.model('letterLimit'));
	       var longNumberLimitInput = element(by.model('longNumberLimit'));
	       var limitedNumbers = element(by.binding('numbers | limitTo:numLimit'));
	       var limitedLetters = element(by.binding('letters | limitTo:letterLimit'));
	       var limitedLongNumber = element(by.binding('longNumber | limitTo:longNumberLimit'));

	       it('should limit the number array to first three items', function() {
	         expect(numLimitInput.getAttribute('value')).toBe('3');
	         expect(letterLimitInput.getAttribute('value')).toBe('3');
	         expect(longNumberLimitInput.getAttribute('value')).toBe('3');
	         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3]');
	         expect(limitedLetters.getText()).toEqual('Output letters: abc');
	         expect(limitedLongNumber.getText()).toEqual('Output long number: 234');
	       });

	       // There is a bug in safari and protractor that doesn't like the minus key
	       // it('should update the output when -3 is entered', function() {
	       //   numLimitInput.clear();
	       //   numLimitInput.sendKeys('-3');
	       //   letterLimitInput.clear();
	       //   letterLimitInput.sendKeys('-3');
	       //   longNumberLimitInput.clear();
	       //   longNumberLimitInput.sendKeys('-3');
	       //   expect(limitedNumbers.getText()).toEqual('Output numbers: [7,8,9]');
	       //   expect(limitedLetters.getText()).toEqual('Output letters: ghi');
	       //   expect(limitedLongNumber.getText()).toEqual('Output long number: 342');
	       // });

	       it('should not exceed the maximum size of input array', function() {
	         numLimitInput.clear();
	         numLimitInput.sendKeys('100');
	         letterLimitInput.clear();
	         letterLimitInput.sendKeys('100');
	         longNumberLimitInput.clear();
	         longNumberLimitInput.sendKeys('100');
	         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3,4,5,6,7,8,9]');
	         expect(limitedLetters.getText()).toEqual('Output letters: abcdefghi');
	         expect(limitedLongNumber.getText()).toEqual('Output long number: 2345432342');
	       });
	     </file>
	   </example>
	*/
	function limitToFilter() {
	  return function(input, limit, begin) {
	    if (Math.abs(Number(limit)) === Infinity) {
	      limit = Number(limit);
	    } else {
	      limit = toInt(limit);
	    }
	    if (isNaN(limit)) return input;

	    if (isNumber(input)) input = input.toString();
	    if (!isArray(input) && !isString(input)) return input;

	    begin = (!begin || isNaN(begin)) ? 0 : toInt(begin);
	    begin = (begin < 0 && begin >= -input.length) ? input.length + begin : begin;

	    if (limit >= 0) {
	      return input.slice(begin, begin + limit);
	    } else {
	      if (begin === 0) {
	        return input.slice(limit, input.length);
	      } else {
	        return input.slice(Math.max(0, begin + limit), begin);
	      }
	    }
	  };
	}

	/**
	 * @ngdoc filter
	 * @name orderBy
	 * @kind function
	 *
	 * @description
	 * Orders a specified `array` by the `expression` predicate. It is ordered alphabetically
	 * for strings and numerically for numbers. Note: if you notice numbers are not being sorted
	 * correctly, make sure they are actually being saved as numbers and not strings.
	 *
	 * @param {Array} array The array to sort.
	 * @param {function(*)|string|Array.<(function(*)|string)>=} expression A predicate to be
	 *    used by the comparator to determine the order of elements.
	 *
	 *    Can be one of:
	 *
	 *    - `function`: Getter function. The result of this function will be sorted using the
	 *      `<`, `===`, `>` operator.
	 *    - `string`: An Angular expression. The result of this expression is used to compare elements
	 *      (for example `name` to sort by a property called `name` or `name.substr(0, 3)` to sort by
	 *      3 first characters of a property called `name`). The result of a constant expression
	 *      is interpreted as a property name to be used in comparisons (for example `"special name"`
	 *      to sort object by the value of their `special name` property). An expression can be
	 *      optionally prefixed with `+` or `-` to control ascending or descending sort order
	 *      (for example, `+name` or `-name`). If no property is provided, (e.g. `'+'`) then the array
	 *      element itself is used to compare where sorting.
	 *    - `Array`: An array of function or string predicates. The first predicate in the array
	 *      is used for sorting, but when two items are equivalent, the next predicate is used.
	 *
	 *    If the predicate is missing or empty then it defaults to `'+'`.
	 *
	 * @param {boolean=} reverse Reverse the order of the array.
	 * @returns {Array} Sorted copy of the source array.
	 *
	 *
	 * @example
	 * The example below demonstrates a simple ngRepeat, where the data is sorted
	 * by age in descending order (predicate is set to `'-age'`).
	 * `reverse` is not set, which means it defaults to `false`.
	   <example module="orderByExample">
	     <file name="index.html">
	       <script>
	         angular.module('orderByExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.friends =
	                 [{name:'John', phone:'555-1212', age:10},
	                  {name:'Mary', phone:'555-9876', age:19},
	                  {name:'Mike', phone:'555-4321', age:21},
	                  {name:'Adam', phone:'555-5678', age:35},
	                  {name:'Julie', phone:'555-8765', age:29}];
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <table class="friend">
	           <tr>
	             <th>Name</th>
	             <th>Phone Number</th>
	             <th>Age</th>
	           </tr>
	           <tr ng-repeat="friend in friends | orderBy:'-age'">
	             <td>{{friend.name}}</td>
	             <td>{{friend.phone}}</td>
	             <td>{{friend.age}}</td>
	           </tr>
	         </table>
	       </div>
	     </file>
	   </example>
	 *
	 * The predicate and reverse parameters can be controlled dynamically through scope properties,
	 * as shown in the next example.
	 * @example
	   <example module="orderByExample">
	     <file name="index.html">
	       <script>
	         angular.module('orderByExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.friends =
	                 [{name:'John', phone:'555-1212', age:10},
	                  {name:'Mary', phone:'555-9876', age:19},
	                  {name:'Mike', phone:'555-4321', age:21},
	                  {name:'Adam', phone:'555-5678', age:35},
	                  {name:'Julie', phone:'555-8765', age:29}];
	             $scope.predicate = '-age';
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <pre>Sorting predicate = {{predicate}}; reverse = {{reverse}}</pre>
	         <hr/>
	         [ <a href="" ng-click="predicate=''">unsorted</a> ]
	         <table class="friend">
	           <tr>
	             <th><a href="" ng-click="predicate = 'name'; reverse=false">Name</a>
	                 (<a href="" ng-click="predicate = '-name'; reverse=false">^</a>)</th>
	             <th><a href="" ng-click="predicate = 'phone'; reverse=!reverse">Phone Number</a></th>
	             <th><a href="" ng-click="predicate = 'age'; reverse=!reverse">Age</a></th>
	           </tr>
	           <tr ng-repeat="friend in friends | orderBy:predicate:reverse">
	             <td>{{friend.name}}</td>
	             <td>{{friend.phone}}</td>
	             <td>{{friend.age}}</td>
	           </tr>
	         </table>
	       </div>
	     </file>
	   </example>
	 *
	 * It's also possible to call the orderBy filter manually, by injecting `$filter`, retrieving the
	 * filter routine with `$filter('orderBy')`, and calling the returned filter routine with the
	 * desired parameters.
	 *
	 * Example:
	 *
	 * @example
	  <example module="orderByExample">
	    <file name="index.html">
	      <div ng-controller="ExampleController">
	        <table class="friend">
	          <tr>
	            <th><a href="" ng-click="reverse=false;order('name', false)">Name</a>
	              (<a href="" ng-click="order('-name',false)">^</a>)</th>
	            <th><a href="" ng-click="reverse=!reverse;order('phone', reverse)">Phone Number</a></th>
	            <th><a href="" ng-click="reverse=!reverse;order('age',reverse)">Age</a></th>
	          </tr>
	          <tr ng-repeat="friend in friends">
	            <td>{{friend.name}}</td>
	            <td>{{friend.phone}}</td>
	            <td>{{friend.age}}</td>
	          </tr>
	        </table>
	      </div>
	    </file>

	    <file name="script.js">
	      angular.module('orderByExample', [])
	        .controller('ExampleController', ['$scope', '$filter', function($scope, $filter) {
	          var orderBy = $filter('orderBy');
	          $scope.friends = [
	            { name: 'John',    phone: '555-1212',    age: 10 },
	            { name: 'Mary',    phone: '555-9876',    age: 19 },
	            { name: 'Mike',    phone: '555-4321',    age: 21 },
	            { name: 'Adam',    phone: '555-5678',    age: 35 },
	            { name: 'Julie',   phone: '555-8765',    age: 29 }
	          ];
	          $scope.order = function(predicate, reverse) {
	            $scope.friends = orderBy($scope.friends, predicate, reverse);
	          };
	          $scope.order('-age',false);
	        }]);
	    </file>
	</example>
	 */
	orderByFilter.$inject = ['$parse'];
	function orderByFilter($parse) {
	  return function(array, sortPredicate, reverseOrder) {
	    if (!(isArrayLike(array))) return array;
	    sortPredicate = isArray(sortPredicate) ? sortPredicate : [sortPredicate];
	    if (sortPredicate.length === 0) { sortPredicate = ['+']; }
	    sortPredicate = sortPredicate.map(function(predicate) {
	      var descending = false, get = predicate || identity;
	      if (isString(predicate)) {
	        if ((predicate.charAt(0) == '+' || predicate.charAt(0) == '-')) {
	          descending = predicate.charAt(0) == '-';
	          predicate = predicate.substring(1);
	        }
	        if (predicate === '') {
	          // Effectively no predicate was passed so we compare identity
	          return reverseComparator(compare, descending);
	        }
	        get = $parse(predicate);
	        if (get.constant) {
	          var key = get();
	          return reverseComparator(function(a, b) {
	            return compare(a[key], b[key]);
	          }, descending);
	        }
	      }
	      return reverseComparator(function(a, b) {
	        return compare(get(a),get(b));
	      }, descending);
	    });
	    return slice.call(array).sort(reverseComparator(comparator, reverseOrder));

	    function comparator(o1, o2) {
	      for (var i = 0; i < sortPredicate.length; i++) {
	        var comp = sortPredicate[i](o1, o2);
	        if (comp !== 0) return comp;
	      }
	      return 0;
	    }
	    function reverseComparator(comp, descending) {
	      return descending
	          ? function(a, b) {return comp(b,a);}
	          : comp;
	    }

	    function isPrimitive(value) {
	      switch (typeof value) {
	        case 'number': /* falls through */
	        case 'boolean': /* falls through */
	        case 'string':
	          return true;
	        default:
	          return false;
	      }
	    }

	    function objectToString(value) {
	      if (value === null) return 'null';
	      if (typeof value.valueOf === 'function') {
	        value = value.valueOf();
	        if (isPrimitive(value)) return value;
	      }
	      if (typeof value.toString === 'function') {
	        value = value.toString();
	        if (isPrimitive(value)) return value;
	      }
	      return '';
	    }

	    function compare(v1, v2) {
	      var t1 = typeof v1;
	      var t2 = typeof v2;
	      if (t1 === t2 && t1 === "object") {
	        v1 = objectToString(v1);
	        v2 = objectToString(v2);
	      }
	      if (t1 === t2) {
	        if (t1 === "string") {
	           v1 = v1.toLowerCase();
	           v2 = v2.toLowerCase();
	        }
	        if (v1 === v2) return 0;
	        return v1 < v2 ? -1 : 1;
	      } else {
	        return t1 < t2 ? -1 : 1;
	      }
	    }
	  };
	}

	function ngDirective(directive) {
	  if (isFunction(directive)) {
	    directive = {
	      link: directive
	    };
	  }
	  directive.restrict = directive.restrict || 'AC';
	  return valueFn(directive);
	}

	/**
	 * @ngdoc directive
	 * @name a
	 * @restrict E
	 *
	 * @description
	 * Modifies the default behavior of the html A tag so that the default action is prevented when
	 * the href attribute is empty.
	 *
	 * This change permits the easy creation of action links with the `ngClick` directive
	 * without changing the location or causing page reloads, e.g.:
	 * `<a href="" ng-click="list.addItem()">Add Item</a>`
	 */
	var htmlAnchorDirective = valueFn({
	  restrict: 'E',
	  compile: function(element, attr) {
	    if (!attr.href && !attr.xlinkHref) {
	      return function(scope, element) {
	        // If the linked element is not an anchor tag anymore, do nothing
	        if (element[0].nodeName.toLowerCase() !== 'a') return;

	        // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.
	        var href = toString.call(element.prop('href')) === '[object SVGAnimatedString]' ?
	                   'xlink:href' : 'href';
	        element.on('click', function(event) {
	          // if we have no href url, then don't navigate anywhere.
	          if (!element.attr(href)) {
	            event.preventDefault();
	          }
	        });
	      };
	    }
	  }
	});

	/**
	 * @ngdoc directive
	 * @name ngHref
	 * @restrict A
	 * @priority 99
	 *
	 * @description
	 * Using Angular markup like `{{hash}}` in an href attribute will
	 * make the link go to the wrong URL if the user clicks it before
	 * Angular has a chance to replace the `{{hash}}` markup with its
	 * value. Until Angular replaces the markup the link will be broken
	 * and will most likely return a 404 error. The `ngHref` directive
	 * solves this problem.
	 *
	 * The wrong way to write it:
	 * ```html
	 * <a href="http://www.gravatar.com/avatar/{{hash}}">link1</a>
	 * ```
	 *
	 * The correct way to write it:
	 * ```html
	 * <a ng-href="http://www.gravatar.com/avatar/{{hash}}">link1</a>
	 * ```
	 *
	 * @element A
	 * @param {template} ngHref any string which can contain `{{}}` markup.
	 *
	 * @example
	 * This example shows various combinations of `href`, `ng-href` and `ng-click` attributes
	 * in links and their different behaviors:
	    <example>
	      <file name="index.html">
	        <input ng-model="value" /><br />
	        <a id="link-1" href ng-click="value = 1">link 1</a> (link, don't reload)<br />
	        <a id="link-2" href="" ng-click="value = 2">link 2</a> (link, don't reload)<br />
	        <a id="link-3" ng-href="/{{'123'}}">link 3</a> (link, reload!)<br />
	        <a id="link-4" href="" name="xx" ng-click="value = 4">anchor</a> (link, don't reload)<br />
	        <a id="link-5" name="xxx" ng-click="value = 5">anchor</a> (no link)<br />
	        <a id="link-6" ng-href="{{value}}">link</a> (link, change location)
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should execute ng-click but not reload when href without value', function() {
	          element(by.id('link-1')).click();
	          expect(element(by.model('value')).getAttribute('value')).toEqual('1');
	          expect(element(by.id('link-1')).getAttribute('href')).toBe('');
	        });

	        it('should execute ng-click but not reload when href empty string', function() {
	          element(by.id('link-2')).click();
	          expect(element(by.model('value')).getAttribute('value')).toEqual('2');
	          expect(element(by.id('link-2')).getAttribute('href')).toBe('');
	        });

	        it('should execute ng-click and change url when ng-href specified', function() {
	          expect(element(by.id('link-3')).getAttribute('href')).toMatch(/\/123$/);

	          element(by.id('link-3')).click();

	          // At this point, we navigate away from an Angular page, so we need
	          // to use browser.driver to get the base webdriver.

	          browser.wait(function() {
	            return browser.driver.getCurrentUrl().then(function(url) {
	              return url.match(/\/123$/);
	            });
	          }, 5000, 'page should navigate to /123');
	        });

	        it('should execute ng-click but not reload when href empty string and name specified', function() {
	          element(by.id('link-4')).click();
	          expect(element(by.model('value')).getAttribute('value')).toEqual('4');
	          expect(element(by.id('link-4')).getAttribute('href')).toBe('');
	        });

	        it('should execute ng-click but not reload when no href but name specified', function() {
	          element(by.id('link-5')).click();
	          expect(element(by.model('value')).getAttribute('value')).toEqual('5');
	          expect(element(by.id('link-5')).getAttribute('href')).toBe(null);
	        });

	        it('should only change url when only ng-href', function() {
	          element(by.model('value')).clear();
	          element(by.model('value')).sendKeys('6');
	          expect(element(by.id('link-6')).getAttribute('href')).toMatch(/\/6$/);

	          element(by.id('link-6')).click();

	          // At this point, we navigate away from an Angular page, so we need
	          // to use browser.driver to get the base webdriver.
	          browser.wait(function() {
	            return browser.driver.getCurrentUrl().then(function(url) {
	              return url.match(/\/6$/);
	            });
	          }, 5000, 'page should navigate to /6');
	        });
	      </file>
	    </example>
	 */

	/**
	 * @ngdoc directive
	 * @name ngSrc
	 * @restrict A
	 * @priority 99
	 *
	 * @description
	 * Using Angular markup like `{{hash}}` in a `src` attribute doesn't
	 * work right: The browser will fetch from the URL with the literal
	 * text `{{hash}}` until Angular replaces the expression inside
	 * `{{hash}}`. The `ngSrc` directive solves this problem.
	 *
	 * The buggy way to write it:
	 * ```html
	 * <img src="http://www.gravatar.com/avatar/{{hash}}" alt="Description"/>
	 * ```
	 *
	 * The correct way to write it:
	 * ```html
	 * <img ng-src="http://www.gravatar.com/avatar/{{hash}}" alt="Description" />
	 * ```
	 *
	 * @element IMG
	 * @param {template} ngSrc any string which can contain `{{}}` markup.
	 */

	/**
	 * @ngdoc directive
	 * @name ngSrcset
	 * @restrict A
	 * @priority 99
	 *
	 * @description
	 * Using Angular markup like `{{hash}}` in a `srcset` attribute doesn't
	 * work right: The browser will fetch from the URL with the literal
	 * text `{{hash}}` until Angular replaces the expression inside
	 * `{{hash}}`. The `ngSrcset` directive solves this problem.
	 *
	 * The buggy way to write it:
	 * ```html
	 * <img srcset="http://www.gravatar.com/avatar/{{hash}} 2x" alt="Description"/>
	 * ```
	 *
	 * The correct way to write it:
	 * ```html
	 * <img ng-srcset="http://www.gravatar.com/avatar/{{hash}} 2x" alt="Description" />
	 * ```
	 *
	 * @element IMG
	 * @param {template} ngSrcset any string which can contain `{{}}` markup.
	 */

	/**
	 * @ngdoc directive
	 * @name ngDisabled
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 *
	 * This directive sets the `disabled` attribute on the element if the
	 * {@link guide/expression expression} inside `ngDisabled` evaluates to truthy.
	 *
	 * A special directive is necessary because we cannot use interpolation inside the `disabled`
	 * attribute.  The following example would make the button enabled on Chrome/Firefox
	 * but not on older IEs:
	 *
	 * ```html
	 * <!-- See below for an example of ng-disabled being used correctly -->
	 * <div ng-init="isDisabled = false">
	 *  <button disabled="{{isDisabled}}">Disabled</button>
	 * </div>
	 * ```
	 *
	 * This is because the HTML specification does not require browsers to preserve the values of
	 * boolean attributes such as `disabled` (Their presence means true and their absence means false.)
	 * If we put an Angular interpolation expression into such an attribute then the
	 * binding information would be lost when the browser removes the attribute.
	 *
	 * @example
	    <example>
	      <file name="index.html">
	        <label>Click me to toggle: <input type="checkbox" ng-model="checked"></label><br/>
	        <button ng-model="button" ng-disabled="checked">Button</button>
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should toggle button', function() {
	          expect(element(by.css('button')).getAttribute('disabled')).toBeFalsy();
	          element(by.model('checked')).click();
	          expect(element(by.css('button')).getAttribute('disabled')).toBeTruthy();
	        });
	      </file>
	    </example>
	 *
	 * @element INPUT
	 * @param {expression} ngDisabled If the {@link guide/expression expression} is truthy,
	 *     then the `disabled` attribute will be set on the element
	 */


	/**
	 * @ngdoc directive
	 * @name ngChecked
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 * The HTML specification does not require browsers to preserve the values of boolean attributes
	 * such as checked. (Their presence means true and their absence means false.)
	 * If we put an Angular interpolation expression into such an attribute then the
	 * binding information would be lost when the browser removes the attribute.
	 * The `ngChecked` directive solves this problem for the `checked` attribute.
	 * This complementary directive is not removed by the browser and so provides
	 * a permanent reliable place to store the binding information.
	 * @example
	    <example>
	      <file name="index.html">
	        <label>Check me to check both: <input type="checkbox" ng-model="master"></label><br/>
	        <input id="checkSlave" type="checkbox" ng-checked="master" aria-label="Slave input">
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should check both checkBoxes', function() {
	          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeFalsy();
	          element(by.model('master')).click();
	          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeTruthy();
	        });
	      </file>
	    </example>
	 *
	 * @element INPUT
	 * @param {expression} ngChecked If the {@link guide/expression expression} is truthy,
	 *     then special attribute "checked" will be set on the element
	 */


	/**
	 * @ngdoc directive
	 * @name ngReadonly
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 * The HTML specification does not require browsers to preserve the values of boolean attributes
	 * such as readonly. (Their presence means true and their absence means false.)
	 * If we put an Angular interpolation expression into such an attribute then the
	 * binding information would be lost when the browser removes the attribute.
	 * The `ngReadonly` directive solves this problem for the `readonly` attribute.
	 * This complementary directive is not removed by the browser and so provides
	 * a permanent reliable place to store the binding information.
	 * @example
	    <example>
	      <file name="index.html">
	        <label>Check me to make text readonly: <input type="checkbox" ng-model="checked"></label><br/>
	        <input type="text" ng-readonly="checked" value="I'm Angular" aria-label="Readonly field" />
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should toggle readonly attr', function() {
	          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeFalsy();
	          element(by.model('checked')).click();
	          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeTruthy();
	        });
	      </file>
	    </example>
	 *
	 * @element INPUT
	 * @param {expression} ngReadonly If the {@link guide/expression expression} is truthy,
	 *     then special attribute "readonly" will be set on the element
	 */


	/**
	 * @ngdoc directive
	 * @name ngSelected
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 * The HTML specification does not require browsers to preserve the values of boolean attributes
	 * such as selected. (Their presence means true and their absence means false.)
	 * If we put an Angular interpolation expression into such an attribute then the
	 * binding information would be lost when the browser removes the attribute.
	 * The `ngSelected` directive solves this problem for the `selected` attribute.
	 * This complementary directive is not removed by the browser and so provides
	 * a permanent reliable place to store the binding information.
	 *
	 * @example
	    <example>
	      <file name="index.html">
	        <label>Check me to select: <input type="checkbox" ng-model="selected"></label><br/>
	        <select aria-label="ngSelected demo">
	          <option>Hello!</option>
	          <option id="greet" ng-selected="selected">Greetings!</option>
	        </select>
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should select Greetings!', function() {
	          expect(element(by.id('greet')).getAttribute('selected')).toBeFalsy();
	          element(by.model('selected')).click();
	          expect(element(by.id('greet')).getAttribute('selected')).toBeTruthy();
	        });
	      </file>
	    </example>
	 *
	 * @element OPTION
	 * @param {expression} ngSelected If the {@link guide/expression expression} is truthy,
	 *     then special attribute "selected" will be set on the element
	 */

	/**
	 * @ngdoc directive
	 * @name ngOpen
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 * The HTML specification does not require browsers to preserve the values of boolean attributes
	 * such as open. (Their presence means true and their absence means false.)
	 * If we put an Angular interpolation expression into such an attribute then the
	 * binding information would be lost when the browser removes the attribute.
	 * The `ngOpen` directive solves this problem for the `open` attribute.
	 * This complementary directive is not removed by the browser and so provides
	 * a permanent reliable place to store the binding information.
	 * @example
	     <example>
	       <file name="index.html">
	         <label>Check me check multiple: <input type="checkbox" ng-model="open"></label><br/>
	         <details id="details" ng-open="open">
	            <summary>Show/Hide me</summary>
	         </details>
	       </file>
	       <file name="protractor.js" type="protractor">
	         it('should toggle open', function() {
	           expect(element(by.id('details')).getAttribute('open')).toBeFalsy();
	           element(by.model('open')).click();
	           expect(element(by.id('details')).getAttribute('open')).toBeTruthy();
	         });
	       </file>
	     </example>
	 *
	 * @element DETAILS
	 * @param {expression} ngOpen If the {@link guide/expression expression} is truthy,
	 *     then special attribute "open" will be set on the element
	 */

	var ngAttributeAliasDirectives = {};

	// boolean attrs are evaluated
	forEach(BOOLEAN_ATTR, function(propName, attrName) {
	  // binding to multiple is not supported
	  if (propName == "multiple") return;

	  function defaultLinkFn(scope, element, attr) {
	    scope.$watch(attr[normalized], function ngBooleanAttrWatchAction(value) {
	      attr.$set(attrName, !!value);
	    });
	  }

	  var normalized = directiveNormalize('ng-' + attrName);
	  var linkFn = defaultLinkFn;

	  if (propName === 'checked') {
	    linkFn = function(scope, element, attr) {
	      // ensuring ngChecked doesn't interfere with ngModel when both are set on the same input
	      if (attr.ngModel !== attr[normalized]) {
	        defaultLinkFn(scope, element, attr);
	      }
	    };
	  }

	  ngAttributeAliasDirectives[normalized] = function() {
	    return {
	      restrict: 'A',
	      priority: 100,
	      link: linkFn
	    };
	  };
	});

	// aliased input attrs are evaluated
	forEach(ALIASED_ATTR, function(htmlAttr, ngAttr) {
	  ngAttributeAliasDirectives[ngAttr] = function() {
	    return {
	      priority: 100,
	      link: function(scope, element, attr) {
	        //special case ngPattern when a literal regular expression value
	        //is used as the expression (this way we don't have to watch anything).
	        if (ngAttr === "ngPattern" && attr.ngPattern.charAt(0) == "/") {
	          var match = attr.ngPattern.match(REGEX_STRING_REGEXP);
	          if (match) {
	            attr.$set("ngPattern", new RegExp(match[1], match[2]));
	            return;
	          }
	        }

	        scope.$watch(attr[ngAttr], function ngAttrAliasWatchAction(value) {
	          attr.$set(ngAttr, value);
	        });
	      }
	    };
	  };
	});

	// ng-src, ng-srcset, ng-href are interpolated
	forEach(['src', 'srcset', 'href'], function(attrName) {
	  var normalized = directiveNormalize('ng-' + attrName);
	  ngAttributeAliasDirectives[normalized] = function() {
	    return {
	      priority: 99, // it needs to run after the attributes are interpolated
	      link: function(scope, element, attr) {
	        var propName = attrName,
	            name = attrName;

	        if (attrName === 'href' &&
	            toString.call(element.prop('href')) === '[object SVGAnimatedString]') {
	          name = 'xlinkHref';
	          attr.$attr[name] = 'xlink:href';
	          propName = null;
	        }

	        attr.$observe(normalized, function(value) {
	          if (!value) {
	            if (attrName === 'href') {
	              attr.$set(name, null);
	            }
	            return;
	          }

	          attr.$set(name, value);

	          // on IE, if "ng:src" directive declaration is used and "src" attribute doesn't exist
	          // then calling element.setAttribute('src', 'foo') doesn't do anything, so we need
	          // to set the property as well to achieve the desired effect.
	          // we use attr[attrName] value since $set can sanitize the url.
	          if (msie && propName) element.prop(propName, attr[name]);
	        });
	      }
	    };
	  };
	});

	/* global -nullFormCtrl, -SUBMITTED_CLASS, addSetValidityMethod: true
	 */
	var nullFormCtrl = {
	  $addControl: noop,
	  $$renameControl: nullFormRenameControl,
	  $removeControl: noop,
	  $setValidity: noop,
	  $setDirty: noop,
	  $setPristine: noop,
	  $setSubmitted: noop
	},
	SUBMITTED_CLASS = 'ng-submitted';

	function nullFormRenameControl(control, name) {
	  control.$name = name;
	}

	/**
	 * @ngdoc type
	 * @name form.FormController
	 *
	 * @property {boolean} $pristine True if user has not interacted with the form yet.
	 * @property {boolean} $dirty True if user has already interacted with the form.
	 * @property {boolean} $valid True if all of the containing forms and controls are valid.
	 * @property {boolean} $invalid True if at least one containing control or form is invalid.
	 * @property {boolean} $submitted True if user has submitted the form even if its invalid.
	 *
	 * @property {Object} $error Is an object hash, containing references to controls or
	 *  forms with failing validators, where:
	 *
	 *  - keys are validation tokens (error names),
	 *  - values are arrays of controls or forms that have a failing validator for given error name.
	 *
	 *  Built-in validation tokens:
	 *
	 *  - `email`
	 *  - `max`
	 *  - `maxlength`
	 *  - `min`
	 *  - `minlength`
	 *  - `number`
	 *  - `pattern`
	 *  - `required`
	 *  - `url`
	 *  - `date`
	 *  - `datetimelocal`
	 *  - `time`
	 *  - `week`
	 *  - `month`
	 *
	 * @description
	 * `FormController` keeps track of all its controls and nested forms as well as the state of them,
	 * such as being valid/invalid or dirty/pristine.
	 *
	 * Each {@link ng.directive:form form} directive creates an instance
	 * of `FormController`.
	 *
	 */
	//asks for $scope to fool the BC controller module
	FormController.$inject = ['$element', '$attrs', '$scope', '$animate', '$interpolate'];
	function FormController(element, attrs, $scope, $animate, $interpolate) {
	  var form = this,
	      controls = [];

	  var parentForm = form.$$parentForm = element.parent().controller('form') || nullFormCtrl;

	  // init state
	  form.$error = {};
	  form.$$success = {};
	  form.$pending = undefined;
	  form.$name = $interpolate(attrs.name || attrs.ngForm || '')($scope);
	  form.$dirty = false;
	  form.$pristine = true;
	  form.$valid = true;
	  form.$invalid = false;
	  form.$submitted = false;

	  parentForm.$addControl(form);

	  /**
	   * @ngdoc method
	   * @name form.FormController#$rollbackViewValue
	   *
	   * @description
	   * Rollback all form controls pending updates to the `$modelValue`.
	   *
	   * Updates may be pending by a debounced event or because the input is waiting for a some future
	   * event defined in `ng-model-options`. This method is typically needed by the reset button of
	   * a form that uses `ng-model-options` to pend updates.
	   */
	  form.$rollbackViewValue = function() {
	    forEach(controls, function(control) {
	      control.$rollbackViewValue();
	    });
	  };

	  /**
	   * @ngdoc method
	   * @name form.FormController#$commitViewValue
	   *
	   * @description
	   * Commit all form controls pending updates to the `$modelValue`.
	   *
	   * Updates may be pending by a debounced event or because the input is waiting for a some future
	   * event defined in `ng-model-options`. This method is rarely needed as `NgModelController`
	   * usually handles calling this in response to input events.
	   */
	  form.$commitViewValue = function() {
	    forEach(controls, function(control) {
	      control.$commitViewValue();
	    });
	  };

	  /**
	   * @ngdoc method
	   * @name form.FormController#$addControl
	   *
	   * @description
	   * Register a control with the form.
	   *
	   * Input elements using ngModelController do this automatically when they are linked.
	   */
	  form.$addControl = function(control) {
	    // Breaking change - before, inputs whose name was "hasOwnProperty" were quietly ignored
	    // and not added to the scope.  Now we throw an error.
	    assertNotHasOwnProperty(control.$name, 'input');
	    controls.push(control);

	    if (control.$name) {
	      form[control.$name] = control;
	    }
	  };

	  // Private API: rename a form control
	  form.$$renameControl = function(control, newName) {
	    var oldName = control.$name;

	    if (form[oldName] === control) {
	      delete form[oldName];
	    }
	    form[newName] = control;
	    control.$name = newName;
	  };

	  /**
	   * @ngdoc method
	   * @name form.FormController#$removeControl
	   *
	   * @description
	   * Deregister a control from the form.
	   *
	   * Input elements using ngModelController do this automatically when they are destroyed.
	   */
	  form.$removeControl = function(control) {
	    if (control.$name && form[control.$name] === control) {
	      delete form[control.$name];
	    }
	    forEach(form.$pending, function(value, name) {
	      form.$setValidity(name, null, control);
	    });
	    forEach(form.$error, function(value, name) {
	      form.$setValidity(name, null, control);
	    });
	    forEach(form.$$success, function(value, name) {
	      form.$setValidity(name, null, control);
	    });

	    arrayRemove(controls, control);
	  };


	  /**
	   * @ngdoc method
	   * @name form.FormController#$setValidity
	   *
	   * @description
	   * Sets the validity of a form control.
	   *
	   * This method will also propagate to parent forms.
	   */
	  addSetValidityMethod({
	    ctrl: this,
	    $element: element,
	    set: function(object, property, controller) {
	      var list = object[property];
	      if (!list) {
	        object[property] = [controller];
	      } else {
	        var index = list.indexOf(controller);
	        if (index === -1) {
	          list.push(controller);
	        }
	      }
	    },
	    unset: function(object, property, controller) {
	      var list = object[property];
	      if (!list) {
	        return;
	      }
	      arrayRemove(list, controller);
	      if (list.length === 0) {
	        delete object[property];
	      }
	    },
	    parentForm: parentForm,
	    $animate: $animate
	  });

	  /**
	   * @ngdoc method
	   * @name form.FormController#$setDirty
	   *
	   * @description
	   * Sets the form to a dirty state.
	   *
	   * This method can be called to add the 'ng-dirty' class and set the form to a dirty
	   * state (ng-dirty class). This method will also propagate to parent forms.
	   */
	  form.$setDirty = function() {
	    $animate.removeClass(element, PRISTINE_CLASS);
	    $animate.addClass(element, DIRTY_CLASS);
	    form.$dirty = true;
	    form.$pristine = false;
	    parentForm.$setDirty();
	  };

	  /**
	   * @ngdoc method
	   * @name form.FormController#$setPristine
	   *
	   * @description
	   * Sets the form to its pristine state.
	   *
	   * This method can be called to remove the 'ng-dirty' class and set the form to its pristine
	   * state (ng-pristine class). This method will also propagate to all the controls contained
	   * in this form.
	   *
	   * Setting a form back to a pristine state is often useful when we want to 'reuse' a form after
	   * saving or resetting it.
	   */
	  form.$setPristine = function() {
	    $animate.setClass(element, PRISTINE_CLASS, DIRTY_CLASS + ' ' + SUBMITTED_CLASS);
	    form.$dirty = false;
	    form.$pristine = true;
	    form.$submitted = false;
	    forEach(controls, function(control) {
	      control.$setPristine();
	    });
	  };

	  /**
	   * @ngdoc method
	   * @name form.FormController#$setUntouched
	   *
	   * @description
	   * Sets the form to its untouched state.
	   *
	   * This method can be called to remove the 'ng-touched' class and set the form controls to their
	   * untouched state (ng-untouched class).
	   *
	   * Setting a form controls back to their untouched state is often useful when setting the form
	   * back to its pristine state.
	   */
	  form.$setUntouched = function() {
	    forEach(controls, function(control) {
	      control.$setUntouched();
	    });
	  };

	  /**
	   * @ngdoc method
	   * @name form.FormController#$setSubmitted
	   *
	   * @description
	   * Sets the form to its submitted state.
	   */
	  form.$setSubmitted = function() {
	    $animate.addClass(element, SUBMITTED_CLASS);
	    form.$submitted = true;
	    parentForm.$setSubmitted();
	  };
	}

	/**
	 * @ngdoc directive
	 * @name ngForm
	 * @restrict EAC
	 *
	 * @description
	 * Nestable alias of {@link ng.directive:form `form`} directive. HTML
	 * does not allow nesting of form elements. It is useful to nest forms, for example if the validity of a
	 * sub-group of controls needs to be determined.
	 *
	 * Note: the purpose of `ngForm` is to group controls,
	 * but not to be a replacement for the `<form>` tag with all of its capabilities
	 * (e.g. posting to the server, ...).
	 *
	 * @param {string=} ngForm|name Name of the form. If specified, the form controller will be published into
	 *                       related scope, under this name.
	 *
	 */

	 /**
	 * @ngdoc directive
	 * @name form
	 * @restrict E
	 *
	 * @description
	 * Directive that instantiates
	 * {@link form.FormController FormController}.
	 *
	 * If the `name` attribute is specified, the form controller is published onto the current scope under
	 * this name.
	 *
	 * # Alias: {@link ng.directive:ngForm `ngForm`}
	 *
	 * In Angular, forms can be nested. This means that the outer form is valid when all of the child
	 * forms are valid as well. However, browsers do not allow nesting of `<form>` elements, so
	 * Angular provides the {@link ng.directive:ngForm `ngForm`} directive which behaves identically to
	 * `<form>` but can be nested.  This allows you to have nested forms, which is very useful when
	 * using Angular validation directives in forms that are dynamically generated using the
	 * {@link ng.directive:ngRepeat `ngRepeat`} directive. Since you cannot dynamically generate the `name`
	 * attribute of input elements using interpolation, you have to wrap each set of repeated inputs in an
	 * `ngForm` directive and nest these in an outer `form` element.
	 *
	 *
	 * # CSS classes
	 *  - `ng-valid` is set if the form is valid.
	 *  - `ng-invalid` is set if the form is invalid.
	 *  - `ng-pristine` is set if the form is pristine.
	 *  - `ng-dirty` is set if the form is dirty.
	 *  - `ng-submitted` is set if the form was submitted.
	 *
	 * Keep in mind that ngAnimate can detect each of these classes when added and removed.
	 *
	 *
	 * # Submitting a form and preventing the default action
	 *
	 * Since the role of forms in client-side Angular applications is different than in classical
	 * roundtrip apps, it is desirable for the browser not to translate the form submission into a full
	 * page reload that sends the data to the server. Instead some javascript logic should be triggered
	 * to handle the form submission in an application-specific way.
	 *
	 * For this reason, Angular prevents the default action (form submission to the server) unless the
	 * `<form>` element has an `action` attribute specified.
	 *
	 * You can use one of the following two ways to specify what javascript method should be called when
	 * a form is submitted:
	 *
	 * - {@link ng.directive:ngSubmit ngSubmit} directive on the form element
	 * - {@link ng.directive:ngClick ngClick} directive on the first
	  *  button or input field of type submit (input[type=submit])
	 *
	 * To prevent double execution of the handler, use only one of the {@link ng.directive:ngSubmit ngSubmit}
	 * or {@link ng.directive:ngClick ngClick} directives.
	 * This is because of the following form submission rules in the HTML specification:
	 *
	 * - If a form has only one input field then hitting enter in this field triggers form submit
	 * (`ngSubmit`)
	 * - if a form has 2+ input fields and no buttons or input[type=submit] then hitting enter
	 * doesn't trigger submit
	 * - if a form has one or more input fields and one or more buttons or input[type=submit] then
	 * hitting enter in any of the input fields will trigger the click handler on the *first* button or
	 * input[type=submit] (`ngClick`) *and* a submit handler on the enclosing form (`ngSubmit`)
	 *
	 * Any pending `ngModelOptions` changes will take place immediately when an enclosing form is
	 * submitted. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`
	 * to have access to the updated model.
	 *
	 * ## Animation Hooks
	 *
	 * Animations in ngForm are triggered when any of the associated CSS classes are added and removed.
	 * These classes are: `.ng-pristine`, `.ng-dirty`, `.ng-invalid` and `.ng-valid` as well as any
	 * other validations that are performed within the form. Animations in ngForm are similar to how
	 * they work in ngClass and animations can be hooked into using CSS transitions, keyframes as well
	 * as JS animations.
	 *
	 * The following example shows a simple way to utilize CSS transitions to style a form element
	 * that has been rendered as invalid after it has been validated:
	 *
	 * <pre>
	 * //be sure to include ngAnimate as a module to hook into more
	 * //advanced animations
	 * .my-form {
	 *   transition:0.5s linear all;
	 *   background: white;
	 * }
	 * .my-form.ng-invalid {
	 *   background: red;
	 *   color:white;
	 * }
	 * </pre>
	 *
	 * @example
	    <example deps="angular-animate.js" animations="true" fixBase="true" module="formExample">
	      <file name="index.html">
	       <script>
	         angular.module('formExample', [])
	           .controller('FormController', ['$scope', function($scope) {
	             $scope.userType = 'guest';
	           }]);
	       </script>
	       <style>
	        .my-form {
	          -webkit-transition:all linear 0.5s;
	          transition:all linear 0.5s;
	          background: transparent;
	        }
	        .my-form.ng-invalid {
	          background: red;
	        }
	       </style>
	       <form name="myForm" ng-controller="FormController" class="my-form">
	         userType: <input name="input" ng-model="userType" required>
	         <span class="error" ng-show="myForm.input.$error.required">Required!</span><br>
	         <code>userType = {{userType}}</code><br>
	         <code>myForm.input.$valid = {{myForm.input.$valid}}</code><br>
	         <code>myForm.input.$error = {{myForm.input.$error}}</code><br>
	         <code>myForm.$valid = {{myForm.$valid}}</code><br>
	         <code>myForm.$error.required = {{!!myForm.$error.required}}</code><br>
	        </form>
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should initialize to model', function() {
	          var userType = element(by.binding('userType'));
	          var valid = element(by.binding('myForm.input.$valid'));

	          expect(userType.getText()).toContain('guest');
	          expect(valid.getText()).toContain('true');
	        });

	        it('should be invalid if empty', function() {
	          var userType = element(by.binding('userType'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var userInput = element(by.model('userType'));

	          userInput.clear();
	          userInput.sendKeys('');

	          expect(userType.getText()).toEqual('userType =');
	          expect(valid.getText()).toContain('false');
	        });
	      </file>
	    </example>
	 *
	 * @param {string=} name Name of the form. If specified, the form controller will be published into
	 *                       related scope, under this name.
	 */
	var formDirectiveFactory = function(isNgForm) {
	  return ['$timeout', function($timeout) {
	    var formDirective = {
	      name: 'form',
	      restrict: isNgForm ? 'EAC' : 'E',
	      controller: FormController,
	      compile: function ngFormCompile(formElement, attr) {
	        // Setup initial state of the control
	        formElement.addClass(PRISTINE_CLASS).addClass(VALID_CLASS);

	        var nameAttr = attr.name ? 'name' : (isNgForm && attr.ngForm ? 'ngForm' : false);

	        return {
	          pre: function ngFormPreLink(scope, formElement, attr, controller) {
	            // if `action` attr is not present on the form, prevent the default action (submission)
	            if (!('action' in attr)) {
	              // we can't use jq events because if a form is destroyed during submission the default
	              // action is not prevented. see #1238
	              //
	              // IE 9 is not affected because it doesn't fire a submit event and try to do a full
	              // page reload if the form was destroyed by submission of the form via a click handler
	              // on a button in the form. Looks like an IE9 specific bug.
	              var handleFormSubmission = function(event) {
	                scope.$apply(function() {
	                  controller.$commitViewValue();
	                  controller.$setSubmitted();
	                });

	                event.preventDefault();
	              };

	              addEventListenerFn(formElement[0], 'submit', handleFormSubmission);

	              // unregister the preventDefault listener so that we don't not leak memory but in a
	              // way that will achieve the prevention of the default action.
	              formElement.on('$destroy', function() {
	                $timeout(function() {
	                  removeEventListenerFn(formElement[0], 'submit', handleFormSubmission);
	                }, 0, false);
	              });
	            }

	            var parentFormCtrl = controller.$$parentForm;

	            if (nameAttr) {
	              setter(scope, controller.$name, controller, controller.$name);
	              attr.$observe(nameAttr, function(newValue) {
	                if (controller.$name === newValue) return;
	                setter(scope, controller.$name, undefined, controller.$name);
	                parentFormCtrl.$$renameControl(controller, newValue);
	                setter(scope, controller.$name, controller, controller.$name);
	              });
	            }
	            formElement.on('$destroy', function() {
	              parentFormCtrl.$removeControl(controller);
	              if (nameAttr) {
	                setter(scope, attr[nameAttr], undefined, controller.$name);
	              }
	              extend(controller, nullFormCtrl); //stop propagating child destruction handlers upwards
	            });
	          }
	        };
	      }
	    };

	    return formDirective;
	  }];
	};

	var formDirective = formDirectiveFactory();
	var ngFormDirective = formDirectiveFactory(true);

	/* global VALID_CLASS: false,
	  INVALID_CLASS: false,
	  PRISTINE_CLASS: false,
	  DIRTY_CLASS: false,
	  UNTOUCHED_CLASS: false,
	  TOUCHED_CLASS: false,
	  $ngModelMinErr: false,
	*/

	// Regex code is obtained from SO: https://stackoverflow.com/questions/3143070/javascript-regex-iso-datetime#answer-3143231
	var ISO_DATE_REGEXP = /\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/;
	var URL_REGEXP = /^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?$/;
	var EMAIL_REGEXP = /^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;
	var NUMBER_REGEXP = /^\s*(\-|\+)?(\d+|(\d*(\.\d*)))\s*$/;
	var DATE_REGEXP = /^(\d{4})-(\d{2})-(\d{2})$/;
	var DATETIMELOCAL_REGEXP = /^(\d{4})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;
	var WEEK_REGEXP = /^(\d{4})-W(\d\d)$/;
	var MONTH_REGEXP = /^(\d{4})-(\d\d)$/;
	var TIME_REGEXP = /^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;

	var inputType = {

	  /**
	   * @ngdoc input
	   * @name input[text]
	   *
	   * @description
	   * Standard HTML text input with angular data binding, inherited by most of the `input` elements.
	   *
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} required Adds `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	   *    minlength.
	   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
	   *    any length.
	   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
	   *    that contains the regular expression body that will be converted to a regular expression
	   *    as in the ngPattern directive.
	   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match
	   *    a RegExp found by evaluating the Angular expression given in the attribute value.
	   *    If the expression evaluates to a RegExp object, then this is used directly.
	   *    If the expression evaluates to a string, then it will be converted to a RegExp
	   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	   *    `new RegExp('^abc$')`.<br />
	   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	   *    start at the index of the last search's match, thus not taking the whole input value into
	   *    account.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
	   *    This parameter is ignored for input[type=password] controls, which will never trim the
	   *    input.
	   *
	   * @example
	      <example name="text-input-directive" module="textInputExample">
	        <file name="index.html">
	         <script>
	           angular.module('textInputExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.example = {
	                 text: 'guest',
	                 word: /^\s*\w*\s*$/
	               };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>Single word:
	             <input type="text" name="input" ng-model="example.text"
	                    ng-pattern="example.word" required ng-trim="false">
	           </label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.input.$error.required">
	               Required!</span>
	             <span class="error" ng-show="myForm.input.$error.pattern">
	               Single word only!</span>
	           </div>
	           <tt>text = {{example.text}}</tt><br/>
	           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	          </form>
	        </file>
	        <file name="protractor.js" type="protractor">
	          var text = element(by.binding('example.text'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var input = element(by.model('example.text'));

	          it('should initialize to model', function() {
	            expect(text.getText()).toContain('guest');
	            expect(valid.getText()).toContain('true');
	          });

	          it('should be invalid if empty', function() {
	            input.clear();
	            input.sendKeys('');

	            expect(text.getText()).toEqual('text =');
	            expect(valid.getText()).toContain('false');
	          });

	          it('should be invalid if multi word', function() {
	            input.clear();
	            input.sendKeys('hello world');

	            expect(valid.getText()).toContain('false');
	          });
	        </file>
	      </example>
	   */
	  'text': textInputType,

	    /**
	     * @ngdoc input
	     * @name input[date]
	     *
	     * @description
	     * Input with date validation and transformation. In browsers that do not yet support
	     * the HTML5 date input, a text element will be used. In that case, text must be entered in a valid ISO-8601
	     * date format (yyyy-MM-dd), for example: `2009-01-06`. Since many
	     * modern browsers do not yet support this input type, it is important to provide cues to users on the
	     * expected input format via a placeholder or label.
	     *
	     * The model must always be a Date object, otherwise Angular will throw an error.
	     * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	     *
	     * The timezone to be used to read/write the `Date` instance in the model can be defined using
	     * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	     *
	     * @param {string} ngModel Assignable angular expression to data-bind to.
	     * @param {string=} name Property name of the form under which the control is published.
	     * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a
	     * valid ISO date string (yyyy-MM-dd).
	     * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be
	     * a valid ISO date string (yyyy-MM-dd).
	     * @param {string=} required Sets `required` validation error key if the value is not entered.
	     * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	     *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	     *    `required` when you want to data-bind to the `required` attribute.
	     * @param {string=} ngChange Angular expression to be executed when input changes due to user
	     *    interaction with the input element.
	     *
	     * @example
	     <example name="date-input-directive" module="dateInputExample">
	     <file name="index.html">
	       <script>
	          angular.module('dateInputExample', [])
	            .controller('DateController', ['$scope', function($scope) {
	              $scope.example = {
	                value: new Date(2013, 9, 22)
	              };
	            }]);
	       </script>
	       <form name="myForm" ng-controller="DateController as dateCtrl">
	          <label for="exampleInput">Pick a date in 2013:</label>
	          <input type="date" id="exampleInput" name="input" ng-model="example.value"
	              placeholder="yyyy-MM-dd" min="2013-01-01" max="2013-12-31" required />
	          <div role="alert">
	            <span class="error" ng-show="myForm.input.$error.required">
	                Required!</span>
	            <span class="error" ng-show="myForm.input.$error.date">
	                Not a valid date!</span>
	           </div>
	           <tt>value = {{example.value | date: "yyyy-MM-dd"}}</tt><br/>
	           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	       </form>
	     </file>
	     <file name="protractor.js" type="protractor">
	        var value = element(by.binding('example.value | date: "yyyy-MM-dd"'));
	        var valid = element(by.binding('myForm.input.$valid'));
	        var input = element(by.model('example.value'));

	        // currently protractor/webdriver does not support
	        // sending keys to all known HTML5 input controls
	        // for various browsers (see https://github.com/angular/protractor/issues/562).
	        function setInput(val) {
	          // set the value of the element and force validation.
	          var scr = "var ipt = document.getElementById('exampleInput'); " +
	          "ipt.value = '" + val + "';" +
	          "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	          browser.executeScript(scr);
	        }

	        it('should initialize to model', function() {
	          expect(value.getText()).toContain('2013-10-22');
	          expect(valid.getText()).toContain('myForm.input.$valid = true');
	        });

	        it('should be invalid if empty', function() {
	          setInput('');
	          expect(value.getText()).toEqual('value =');
	          expect(valid.getText()).toContain('myForm.input.$valid = false');
	        });

	        it('should be invalid if over max', function() {
	          setInput('2015-01-01');
	          expect(value.getText()).toContain('');
	          expect(valid.getText()).toContain('myForm.input.$valid = false');
	        });
	     </file>
	     </example>
	     */
	  'date': createDateInputType('date', DATE_REGEXP,
	         createDateParser(DATE_REGEXP, ['yyyy', 'MM', 'dd']),
	         'yyyy-MM-dd'),

	   /**
	    * @ngdoc input
	    * @name input[datetime-local]
	    *
	    * @description
	    * Input with datetime validation and transformation. In browsers that do not yet support
	    * the HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
	    * local datetime format (yyyy-MM-ddTHH:mm:ss), for example: `2010-12-28T14:57:00`.
	    *
	    * The model must always be a Date object, otherwise Angular will throw an error.
	    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	    *
	    * The timezone to be used to read/write the `Date` instance in the model can be defined using
	    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	    *
	    * @param {string} ngModel Assignable angular expression to data-bind to.
	    * @param {string=} name Property name of the form under which the control is published.
	    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a
	    * valid ISO datetime format (yyyy-MM-ddTHH:mm:ss).
	    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be
	    * a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss).
	    * @param {string=} required Sets `required` validation error key if the value is not entered.
	    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	    *    `required` when you want to data-bind to the `required` attribute.
	    * @param {string=} ngChange Angular expression to be executed when input changes due to user
	    *    interaction with the input element.
	    *
	    * @example
	    <example name="datetimelocal-input-directive" module="dateExample">
	    <file name="index.html">
	      <script>
	        angular.module('dateExample', [])
	          .controller('DateController', ['$scope', function($scope) {
	            $scope.example = {
	              value: new Date(2010, 11, 28, 14, 57)
	            };
	          }]);
	      </script>
	      <form name="myForm" ng-controller="DateController as dateCtrl">
	        <label for="exampleInput">Pick a date between in 2013:</label>
	        <input type="datetime-local" id="exampleInput" name="input" ng-model="example.value"
	            placeholder="yyyy-MM-ddTHH:mm:ss" min="2001-01-01T00:00:00" max="2013-12-31T00:00:00" required />
	        <div role="alert">
	          <span class="error" ng-show="myForm.input.$error.required">
	              Required!</span>
	          <span class="error" ng-show="myForm.input.$error.datetimelocal">
	              Not a valid date!</span>
	        </div>
	        <tt>value = {{example.value | date: "yyyy-MM-ddTHH:mm:ss"}}</tt><br/>
	        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	      </form>
	    </file>
	    <file name="protractor.js" type="protractor">
	      var value = element(by.binding('example.value | date: "yyyy-MM-ddTHH:mm:ss"'));
	      var valid = element(by.binding('myForm.input.$valid'));
	      var input = element(by.model('example.value'));

	      // currently protractor/webdriver does not support
	      // sending keys to all known HTML5 input controls
	      // for various browsers (https://github.com/angular/protractor/issues/562).
	      function setInput(val) {
	        // set the value of the element and force validation.
	        var scr = "var ipt = document.getElementById('exampleInput'); " +
	        "ipt.value = '" + val + "';" +
	        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	        browser.executeScript(scr);
	      }

	      it('should initialize to model', function() {
	        expect(value.getText()).toContain('2010-12-28T14:57:00');
	        expect(valid.getText()).toContain('myForm.input.$valid = true');
	      });

	      it('should be invalid if empty', function() {
	        setInput('');
	        expect(value.getText()).toEqual('value =');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });

	      it('should be invalid if over max', function() {
	        setInput('2015-01-01T23:59:00');
	        expect(value.getText()).toContain('');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	    </file>
	    </example>
	    */
	  'datetime-local': createDateInputType('datetimelocal', DATETIMELOCAL_REGEXP,
	      createDateParser(DATETIMELOCAL_REGEXP, ['yyyy', 'MM', 'dd', 'HH', 'mm', 'ss', 'sss']),
	      'yyyy-MM-ddTHH:mm:ss.sss'),

	  /**
	   * @ngdoc input
	   * @name input[time]
	   *
	   * @description
	   * Input with time validation and transformation. In browsers that do not yet support
	   * the HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
	   * local time format (HH:mm:ss), for example: `14:57:00`. Model must be a Date object. This binding will always output a
	   * Date object to the model of January 1, 1970, or local date `new Date(1970, 0, 1, HH, mm, ss)`.
	   *
	   * The model must always be a Date object, otherwise Angular will throw an error.
	   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	   *
	   * The timezone to be used to read/write the `Date` instance in the model can be defined using
	   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a
	   * valid ISO time format (HH:mm:ss).
	   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be a
	   * valid ISO time format (HH:mm:ss).
	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	   <example name="time-input-directive" module="timeExample">
	   <file name="index.html">
	     <script>
	      angular.module('timeExample', [])
	        .controller('DateController', ['$scope', function($scope) {
	          $scope.example = {
	            value: new Date(1970, 0, 1, 14, 57, 0)
	          };
	        }]);
	     </script>
	     <form name="myForm" ng-controller="DateController as dateCtrl">
	        <label for="exampleInput">Pick a between 8am and 5pm:</label>
	        <input type="time" id="exampleInput" name="input" ng-model="example.value"
	            placeholder="HH:mm:ss" min="08:00:00" max="17:00:00" required />
	        <div role="alert">
	          <span class="error" ng-show="myForm.input.$error.required">
	              Required!</span>
	          <span class="error" ng-show="myForm.input.$error.time">
	              Not a valid date!</span>
	        </div>
	        <tt>value = {{example.value | date: "HH:mm:ss"}}</tt><br/>
	        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	     </form>
	   </file>
	   <file name="protractor.js" type="protractor">
	      var value = element(by.binding('example.value | date: "HH:mm:ss"'));
	      var valid = element(by.binding('myForm.input.$valid'));
	      var input = element(by.model('example.value'));

	      // currently protractor/webdriver does not support
	      // sending keys to all known HTML5 input controls
	      // for various browsers (https://github.com/angular/protractor/issues/562).
	      function setInput(val) {
	        // set the value of the element and force validation.
	        var scr = "var ipt = document.getElementById('exampleInput'); " +
	        "ipt.value = '" + val + "';" +
	        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	        browser.executeScript(scr);
	      }

	      it('should initialize to model', function() {
	        expect(value.getText()).toContain('14:57:00');
	        expect(valid.getText()).toContain('myForm.input.$valid = true');
	      });

	      it('should be invalid if empty', function() {
	        setInput('');
	        expect(value.getText()).toEqual('value =');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });

	      it('should be invalid if over max', function() {
	        setInput('23:59:00');
	        expect(value.getText()).toContain('');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	   </file>
	   </example>
	   */
	  'time': createDateInputType('time', TIME_REGEXP,
	      createDateParser(TIME_REGEXP, ['HH', 'mm', 'ss', 'sss']),
	     'HH:mm:ss.sss'),

	   /**
	    * @ngdoc input
	    * @name input[week]
	    *
	    * @description
	    * Input with week-of-the-year validation and transformation to Date. In browsers that do not yet support
	    * the HTML5 week input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
	    * week format (yyyy-W##), for example: `2013-W02`.
	    *
	    * The model must always be a Date object, otherwise Angular will throw an error.
	    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	    *
	    * The timezone to be used to read/write the `Date` instance in the model can be defined using
	    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	    *
	    * @param {string} ngModel Assignable angular expression to data-bind to.
	    * @param {string=} name Property name of the form under which the control is published.
	    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a
	    * valid ISO week format (yyyy-W##).
	    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be
	    * a valid ISO week format (yyyy-W##).
	    * @param {string=} required Sets `required` validation error key if the value is not entered.
	    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	    *    `required` when you want to data-bind to the `required` attribute.
	    * @param {string=} ngChange Angular expression to be executed when input changes due to user
	    *    interaction with the input element.
	    *
	    * @example
	    <example name="week-input-directive" module="weekExample">
	    <file name="index.html">
	      <script>
	      angular.module('weekExample', [])
	        .controller('DateController', ['$scope', function($scope) {
	          $scope.example = {
	            value: new Date(2013, 0, 3)
	          };
	        }]);
	      </script>
	      <form name="myForm" ng-controller="DateController as dateCtrl">
	        <label>Pick a date between in 2013:
	          <input id="exampleInput" type="week" name="input" ng-model="example.value"
	                 placeholder="YYYY-W##" min="2012-W32"
	                 max="2013-W52" required />
	        </label>
	        <div role="alert">
	          <span class="error" ng-show="myForm.input.$error.required">
	              Required!</span>
	          <span class="error" ng-show="myForm.input.$error.week">
	              Not a valid date!</span>
	        </div>
	        <tt>value = {{example.value | date: "yyyy-Www"}}</tt><br/>
	        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	      </form>
	    </file>
	    <file name="protractor.js" type="protractor">
	      var value = element(by.binding('example.value | date: "yyyy-Www"'));
	      var valid = element(by.binding('myForm.input.$valid'));
	      var input = element(by.model('example.value'));

	      // currently protractor/webdriver does not support
	      // sending keys to all known HTML5 input controls
	      // for various browsers (https://github.com/angular/protractor/issues/562).
	      function setInput(val) {
	        // set the value of the element and force validation.
	        var scr = "var ipt = document.getElementById('exampleInput'); " +
	        "ipt.value = '" + val + "';" +
	        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	        browser.executeScript(scr);
	      }

	      it('should initialize to model', function() {
	        expect(value.getText()).toContain('2013-W01');
	        expect(valid.getText()).toContain('myForm.input.$valid = true');
	      });

	      it('should be invalid if empty', function() {
	        setInput('');
	        expect(value.getText()).toEqual('value =');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });

	      it('should be invalid if over max', function() {
	        setInput('2015-W01');
	        expect(value.getText()).toContain('');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	    </file>
	    </example>
	    */
	  'week': createDateInputType('week', WEEK_REGEXP, weekParser, 'yyyy-Www'),

	  /**
	   * @ngdoc input
	   * @name input[month]
	   *
	   * @description
	   * Input with month validation and transformation. In browsers that do not yet support
	   * the HTML5 month input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
	   * month format (yyyy-MM), for example: `2009-01`.
	   *
	   * The model must always be a Date object, otherwise Angular will throw an error.
	   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	   * If the model is not set to the first of the month, the next view to model update will set it
	   * to the first of the month.
	   *
	   * The timezone to be used to read/write the `Date` instance in the model can be defined using
	   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be
	   * a valid ISO month format (yyyy-MM).
	   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must
	   * be a valid ISO month format (yyyy-MM).
	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	   <example name="month-input-directive" module="monthExample">
	   <file name="index.html">
	     <script>
	      angular.module('monthExample', [])
	        .controller('DateController', ['$scope', function($scope) {
	          $scope.example = {
	            value: new Date(2013, 9, 1)
	          };
	        }]);
	     </script>
	     <form name="myForm" ng-controller="DateController as dateCtrl">
	       <label for="exampleInput">Pick a month in 2013:</label>
	       <input id="exampleInput" type="month" name="input" ng-model="example.value"
	          placeholder="yyyy-MM" min="2013-01" max="2013-12" required />
	       <div role="alert">
	         <span class="error" ng-show="myForm.input.$error.required">
	            Required!</span>
	         <span class="error" ng-show="myForm.input.$error.month">
	            Not a valid month!</span>
	       </div>
	       <tt>value = {{example.value | date: "yyyy-MM"}}</tt><br/>
	       <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	       <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	       <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	       <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	     </form>
	   </file>
	   <file name="protractor.js" type="protractor">
	      var value = element(by.binding('example.value | date: "yyyy-MM"'));
	      var valid = element(by.binding('myForm.input.$valid'));
	      var input = element(by.model('example.value'));

	      // currently protractor/webdriver does not support
	      // sending keys to all known HTML5 input controls
	      // for various browsers (https://github.com/angular/protractor/issues/562).
	      function setInput(val) {
	        // set the value of the element and force validation.
	        var scr = "var ipt = document.getElementById('exampleInput'); " +
	        "ipt.value = '" + val + "';" +
	        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	        browser.executeScript(scr);
	      }

	      it('should initialize to model', function() {
	        expect(value.getText()).toContain('2013-10');
	        expect(valid.getText()).toContain('myForm.input.$valid = true');
	      });

	      it('should be invalid if empty', function() {
	        setInput('');
	        expect(value.getText()).toEqual('value =');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });

	      it('should be invalid if over max', function() {
	        setInput('2015-01');
	        expect(value.getText()).toContain('');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	   </file>
	   </example>
	   */
	  'month': createDateInputType('month', MONTH_REGEXP,
	     createDateParser(MONTH_REGEXP, ['yyyy', 'MM']),
	     'yyyy-MM'),

	  /**
	   * @ngdoc input
	   * @name input[number]
	   *
	   * @description
	   * Text input with number validation and transformation. Sets the `number` validation
	   * error if not a valid number.
	   *
	   * <div class="alert alert-warning">
	   * The model must always be of type `number` otherwise Angular will throw an error.
	   * Be aware that a string containing a number is not enough. See the {@link ngModel:numfmt}
	   * error docs for more information and an example of how to convert your model if necessary.
	   * </div>
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
	   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	   *    minlength.
	   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
	   *    any length.
	   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
	   *    that contains the regular expression body that will be converted to a regular expression
	   *    as in the ngPattern directive.
	   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match
	   *    a RegExp found by evaluating the Angular expression given in the attribute value.
	   *    If the expression evaluates to a RegExp object, then this is used directly.
	   *    If the expression evaluates to a string, then it will be converted to a RegExp
	   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	   *    `new RegExp('^abc$')`.<br />
	   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	   *    start at the index of the last search's match, thus not taking the whole input value into
	   *    account.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	      <example name="number-input-directive" module="numberExample">
	        <file name="index.html">
	         <script>
	           angular.module('numberExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.example = {
	                 value: 12
	               };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>Number:
	             <input type="number" name="input" ng-model="example.value"
	                    min="0" max="99" required>
	          </label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.input.$error.required">
	               Required!</span>
	             <span class="error" ng-show="myForm.input.$error.number">
	               Not valid number!</span>
	           </div>
	           <tt>value = {{example.value}}</tt><br/>
	           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	          </form>
	        </file>
	        <file name="protractor.js" type="protractor">
	          var value = element(by.binding('example.value'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var input = element(by.model('example.value'));

	          it('should initialize to model', function() {
	            expect(value.getText()).toContain('12');
	            expect(valid.getText()).toContain('true');
	          });

	          it('should be invalid if empty', function() {
	            input.clear();
	            input.sendKeys('');
	            expect(value.getText()).toEqual('value =');
	            expect(valid.getText()).toContain('false');
	          });

	          it('should be invalid if over max', function() {
	            input.clear();
	            input.sendKeys('123');
	            expect(value.getText()).toEqual('value =');
	            expect(valid.getText()).toContain('false');
	          });
	        </file>
	      </example>
	   */
	  'number': numberInputType,


	  /**
	   * @ngdoc input
	   * @name input[url]
	   *
	   * @description
	   * Text input with URL validation. Sets the `url` validation error key if the content is not a
	   * valid URL.
	   *
	   * <div class="alert alert-warning">
	   * **Note:** `input[url]` uses a regex to validate urls that is derived from the regex
	   * used in Chromium. If you need stricter validation, you can use `ng-pattern` or modify
	   * the built-in validators (see the {@link guide/forms Forms guide})
	   * </div>
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	   *    minlength.
	   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
	   *    any length.
	   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
	   *    that contains the regular expression body that will be converted to a regular expression
	   *    as in the ngPattern directive.
	   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match
	   *    a RegExp found by evaluating the Angular expression given in the attribute value.
	   *    If the expression evaluates to a RegExp object, then this is used directly.
	   *    If the expression evaluates to a string, then it will be converted to a RegExp
	   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	   *    `new RegExp('^abc$')`.<br />
	   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	   *    start at the index of the last search's match, thus not taking the whole input value into
	   *    account.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	      <example name="url-input-directive" module="urlExample">
	        <file name="index.html">
	         <script>
	           angular.module('urlExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.url = {
	                 text: 'http://google.com'
	               };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>URL:
	             <input type="url" name="input" ng-model="url.text" required>
	           <label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.input.$error.required">
	               Required!</span>
	             <span class="error" ng-show="myForm.input.$error.url">
	               Not valid url!</span>
	           </div>
	           <tt>text = {{url.text}}</tt><br/>
	           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	           <tt>myForm.$error.url = {{!!myForm.$error.url}}</tt><br/>
	          </form>
	        </file>
	        <file name="protractor.js" type="protractor">
	          var text = element(by.binding('url.text'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var input = element(by.model('url.text'));

	          it('should initialize to model', function() {
	            expect(text.getText()).toContain('http://google.com');
	            expect(valid.getText()).toContain('true');
	          });

	          it('should be invalid if empty', function() {
	            input.clear();
	            input.sendKeys('');

	            expect(text.getText()).toEqual('text =');
	            expect(valid.getText()).toContain('false');
	          });

	          it('should be invalid if not url', function() {
	            input.clear();
	            input.sendKeys('box');

	            expect(valid.getText()).toContain('false');
	          });
	        </file>
	      </example>
	   */
	  'url': urlInputType,


	  /**
	   * @ngdoc input
	   * @name input[email]
	   *
	   * @description
	   * Text input with email validation. Sets the `email` validation error key if not a valid email
	   * address.
	   *
	   * <div class="alert alert-warning">
	   * **Note:** `input[email]` uses a regex to validate email addresses that is derived from the regex
	   * used in Chromium. If you need stricter validation (e.g. requiring a top-level domain), you can
	   * use `ng-pattern` or modify the built-in validators (see the {@link guide/forms Forms guide})
	   * </div>
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	   *    minlength.
	   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
	   *    any length.
	   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
	   *    that contains the regular expression body that will be converted to a regular expression
	   *    as in the ngPattern directive.
	   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match
	   *    a RegExp found by evaluating the Angular expression given in the attribute value.
	   *    If the expression evaluates to a RegExp object, then this is used directly.
	   *    If the expression evaluates to a string, then it will be converted to a RegExp
	   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	   *    `new RegExp('^abc$')`.<br />
	   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	   *    start at the index of the last search's match, thus not taking the whole input value into
	   *    account.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	      <example name="email-input-directive" module="emailExample">
	        <file name="index.html">
	         <script>
	           angular.module('emailExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.email = {
	                 text: 'me@example.com'
	               };
	             }]);
	         </script>
	           <form name="myForm" ng-controller="ExampleController">
	             <label>Email:
	               <input type="email" name="input" ng-model="email.text" required>
	             </label>
	             <div role="alert">
	               <span class="error" ng-show="myForm.input.$error.required">
	                 Required!</span>
	               <span class="error" ng-show="myForm.input.$error.email">
	                 Not valid email!</span>
	             </div>
	             <tt>text = {{email.text}}</tt><br/>
	             <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	             <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	             <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	             <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	             <tt>myForm.$error.email = {{!!myForm.$error.email}}</tt><br/>
	           </form>
	         </file>
	        <file name="protractor.js" type="protractor">
	          var text = element(by.binding('email.text'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var input = element(by.model('email.text'));

	          it('should initialize to model', function() {
	            expect(text.getText()).toContain('me@example.com');
	            expect(valid.getText()).toContain('true');
	          });

	          it('should be invalid if empty', function() {
	            input.clear();
	            input.sendKeys('');
	            expect(text.getText()).toEqual('text =');
	            expect(valid.getText()).toContain('false');
	          });

	          it('should be invalid if not email', function() {
	            input.clear();
	            input.sendKeys('xxx');

	            expect(valid.getText()).toContain('false');
	          });
	        </file>
	      </example>
	   */
	  'email': emailInputType,


	  /**
	   * @ngdoc input
	   * @name input[radio]
	   *
	   * @description
	   * HTML radio button.
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string} value The value to which the expression should be set when selected.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   * @param {string} ngValue Angular expression which sets the value to which the expression should
	   *    be set when selected.
	   *
	   * @example
	      <example name="radio-input-directive" module="radioExample">
	        <file name="index.html">
	         <script>
	           angular.module('radioExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.color = {
	                 name: 'blue'
	               };
	               $scope.specialValue = {
	                 "id": "12345",
	                 "value": "green"
	               };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>
	             <input type="radio" ng-model="color.name" value="red">
	             Red
	           </label><br/>
	           <label>
	             <input type="radio" ng-model="color.name" ng-value="specialValue">
	             Green
	           </label><br/>
	           <label>
	             <input type="radio" ng-model="color.name" value="blue">
	             Blue
	           </label><br/>
	           <tt>color = {{color.name | json}}</tt><br/>
	          </form>
	          Note that `ng-value="specialValue"` sets radio item's value to be the value of `$scope.specialValue`.
	        </file>
	        <file name="protractor.js" type="protractor">
	          it('should change state', function() {
	            var color = element(by.binding('color.name'));

	            expect(color.getText()).toContain('blue');

	            element.all(by.model('color.name')).get(0).click();

	            expect(color.getText()).toContain('red');
	          });
	        </file>
	      </example>
	   */
	  'radio': radioInputType,


	  /**
	   * @ngdoc input
	   * @name input[checkbox]
	   *
	   * @description
	   * HTML checkbox.
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {expression=} ngTrueValue The value to which the expression should be set when selected.
	   * @param {expression=} ngFalseValue The value to which the expression should be set when not selected.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	      <example name="checkbox-input-directive" module="checkboxExample">
	        <file name="index.html">
	         <script>
	           angular.module('checkboxExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.checkboxModel = {
	                value1 : true,
	                value2 : 'YES'
	              };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>Value1:
	             <input type="checkbox" ng-model="checkboxModel.value1">
	           </label><br/>
	           <label>Value2:
	             <input type="checkbox" ng-model="checkboxModel.value2"
	                    ng-true-value="'YES'" ng-false-value="'NO'">
	            </label><br/>
	           <tt>value1 = {{checkboxModel.value1}}</tt><br/>
	           <tt>value2 = {{checkboxModel.value2}}</tt><br/>
	          </form>
	        </file>
	        <file name="protractor.js" type="protractor">
	          it('should change state', function() {
	            var value1 = element(by.binding('checkboxModel.value1'));
	            var value2 = element(by.binding('checkboxModel.value2'));

	            expect(value1.getText()).toContain('true');
	            expect(value2.getText()).toContain('YES');

	            element(by.model('checkboxModel.value1')).click();
	            element(by.model('checkboxModel.value2')).click();

	            expect(value1.getText()).toContain('false');
	            expect(value2.getText()).toContain('NO');
	          });
	        </file>
	      </example>
	   */
	  'checkbox': checkboxInputType,

	  'hidden': noop,
	  'button': noop,
	  'submit': noop,
	  'reset': noop,
	  'file': noop
	};

	function stringBasedInputType(ctrl) {
	  ctrl.$formatters.push(function(value) {
	    return ctrl.$isEmpty(value) ? value : value.toString();
	  });
	}

	function textInputType(scope, element, attr, ctrl, $sniffer, $browser) {
	  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
	  stringBasedInputType(ctrl);
	}

	function baseInputType(scope, element, attr, ctrl, $sniffer, $browser) {
	  var type = lowercase(element[0].type);

	  // In composition mode, users are still inputing intermediate text buffer,
	  // hold the listener until composition is done.
	  // More about composition events: https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent
	  if (!$sniffer.android) {
	    var composing = false;

	    element.on('compositionstart', function(data) {
	      composing = true;
	    });

	    element.on('compositionend', function() {
	      composing = false;
	      listener();
	    });
	  }

	  var listener = function(ev) {
	    if (timeout) {
	      $browser.defer.cancel(timeout);
	      timeout = null;
	    }
	    if (composing) return;
	    var value = element.val(),
	        event = ev && ev.type;

	    // By default we will trim the value
	    // If the attribute ng-trim exists we will avoid trimming
	    // If input type is 'password', the value is never trimmed
	    if (type !== 'password' && (!attr.ngTrim || attr.ngTrim !== 'false')) {
	      value = trim(value);
	    }

	    // If a control is suffering from bad input (due to native validators), browsers discard its
	    // value, so it may be necessary to revalidate (by calling $setViewValue again) even if the
	    // control's value is the same empty value twice in a row.
	    if (ctrl.$viewValue !== value || (value === '' && ctrl.$$hasNativeValidators)) {
	      ctrl.$setViewValue(value, event);
	    }
	  };

	  // if the browser does support "input" event, we are fine - except on IE9 which doesn't fire the
	  // input event on backspace, delete or cut
	  if ($sniffer.hasEvent('input')) {
	    element.on('input', listener);
	  } else {
	    var timeout;

	    var deferListener = function(ev, input, origValue) {
	      if (!timeout) {
	        timeout = $browser.defer(function() {
	          timeout = null;
	          if (!input || input.value !== origValue) {
	            listener(ev);
	          }
	        });
	      }
	    };

	    element.on('keydown', function(event) {
	      var key = event.keyCode;

	      // ignore
	      //    command            modifiers                   arrows
	      if (key === 91 || (15 < key && key < 19) || (37 <= key && key <= 40)) return;

	      deferListener(event, this, this.value);
	    });

	    // if user modifies input value using context menu in IE, we need "paste" and "cut" events to catch it
	    if ($sniffer.hasEvent('paste')) {
	      element.on('paste cut', deferListener);
	    }
	  }

	  // if user paste into input using mouse on older browser
	  // or form autocomplete on newer browser, we need "change" event to catch it
	  element.on('change', listener);

	  ctrl.$render = function() {
	    element.val(ctrl.$isEmpty(ctrl.$viewValue) ? '' : ctrl.$viewValue);
	  };
	}

	function weekParser(isoWeek, existingDate) {
	  if (isDate(isoWeek)) {
	    return isoWeek;
	  }

	  if (isString(isoWeek)) {
	    WEEK_REGEXP.lastIndex = 0;
	    var parts = WEEK_REGEXP.exec(isoWeek);
	    if (parts) {
	      var year = +parts[1],
	          week = +parts[2],
	          hours = 0,
	          minutes = 0,
	          seconds = 0,
	          milliseconds = 0,
	          firstThurs = getFirstThursdayOfYear(year),
	          addDays = (week - 1) * 7;

	      if (existingDate) {
	        hours = existingDate.getHours();
	        minutes = existingDate.getMinutes();
	        seconds = existingDate.getSeconds();
	        milliseconds = existingDate.getMilliseconds();
	      }

	      return new Date(year, 0, firstThurs.getDate() + addDays, hours, minutes, seconds, milliseconds);
	    }
	  }

	  return NaN;
	}

	function createDateParser(regexp, mapping) {
	  return function(iso, date) {
	    var parts, map;

	    if (isDate(iso)) {
	      return iso;
	    }

	    if (isString(iso)) {
	      // When a date is JSON'ified to wraps itself inside of an extra
	      // set of double quotes. This makes the date parsing code unable
	      // to match the date string and parse it as a date.
	      if (iso.charAt(0) == '"' && iso.charAt(iso.length - 1) == '"') {
	        iso = iso.substring(1, iso.length - 1);
	      }
	      if (ISO_DATE_REGEXP.test(iso)) {
	        return new Date(iso);
	      }
	      regexp.lastIndex = 0;
	      parts = regexp.exec(iso);

	      if (parts) {
	        parts.shift();
	        if (date) {
	          map = {
	            yyyy: date.getFullYear(),
	            MM: date.getMonth() + 1,
	            dd: date.getDate(),
	            HH: date.getHours(),
	            mm: date.getMinutes(),
	            ss: date.getSeconds(),
	            sss: date.getMilliseconds() / 1000
	          };
	        } else {
	          map = { yyyy: 1970, MM: 1, dd: 1, HH: 0, mm: 0, ss: 0, sss: 0 };
	        }

	        forEach(parts, function(part, index) {
	          if (index < mapping.length) {
	            map[mapping[index]] = +part;
	          }
	        });
	        return new Date(map.yyyy, map.MM - 1, map.dd, map.HH, map.mm, map.ss || 0, map.sss * 1000 || 0);
	      }
	    }

	    return NaN;
	  };
	}

	function createDateInputType(type, regexp, parseDate, format) {
	  return function dynamicDateInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter) {
	    badInputChecker(scope, element, attr, ctrl);
	    baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
	    var timezone = ctrl && ctrl.$options && ctrl.$options.timezone;
	    var previousDate;

	    ctrl.$$parserName = type;
	    ctrl.$parsers.push(function(value) {
	      if (ctrl.$isEmpty(value)) return null;
	      if (regexp.test(value)) {
	        // Note: We cannot read ctrl.$modelValue, as there might be a different
	        // parser/formatter in the processing chain so that the model
	        // contains some different data format!
	        var parsedDate = parseDate(value, previousDate);
	        if (timezone) {
	          parsedDate = convertTimezoneToLocal(parsedDate, timezone);
	        }
	        return parsedDate;
	      }
	      return undefined;
	    });

	    ctrl.$formatters.push(function(value) {
	      if (value && !isDate(value)) {
	        throw $ngModelMinErr('datefmt', 'Expected `{0}` to be a date', value);
	      }
	      if (isValidDate(value)) {
	        previousDate = value;
	        if (previousDate && timezone) {
	          previousDate = convertTimezoneToLocal(previousDate, timezone, true);
	        }
	        return $filter('date')(value, format, timezone);
	      } else {
	        previousDate = null;
	        return '';
	      }
	    });

	    if (isDefined(attr.min) || attr.ngMin) {
	      var minVal;
	      ctrl.$validators.min = function(value) {
	        return !isValidDate(value) || isUndefined(minVal) || parseDate(value) >= minVal;
	      };
	      attr.$observe('min', function(val) {
	        minVal = parseObservedDateValue(val);
	        ctrl.$validate();
	      });
	    }

	    if (isDefined(attr.max) || attr.ngMax) {
	      var maxVal;
	      ctrl.$validators.max = function(value) {
	        return !isValidDate(value) || isUndefined(maxVal) || parseDate(value) <= maxVal;
	      };
	      attr.$observe('max', function(val) {
	        maxVal = parseObservedDateValue(val);
	        ctrl.$validate();
	      });
	    }

	    function isValidDate(value) {
	      // Invalid Date: getTime() returns NaN
	      return value && !(value.getTime && value.getTime() !== value.getTime());
	    }

	    function parseObservedDateValue(val) {
	      return isDefined(val) ? (isDate(val) ? val : parseDate(val)) : undefined;
	    }
	  };
	}

	function badInputChecker(scope, element, attr, ctrl) {
	  var node = element[0];
	  var nativeValidation = ctrl.$$hasNativeValidators = isObject(node.validity);
	  if (nativeValidation) {
	    ctrl.$parsers.push(function(value) {
	      var validity = element.prop(VALIDITY_STATE_PROPERTY) || {};
	      // Detect bug in FF35 for input[email] (https://bugzilla.mozilla.org/show_bug.cgi?id=1064430):
	      // - also sets validity.badInput (should only be validity.typeMismatch).
	      // - see http://www.whatwg.org/specs/web-apps/current-work/multipage/forms.html#e-mail-state-(type=email)
	      // - can ignore this case as we can still read out the erroneous email...
	      return validity.badInput && !validity.typeMismatch ? undefined : value;
	    });
	  }
	}

	function numberInputType(scope, element, attr, ctrl, $sniffer, $browser) {
	  badInputChecker(scope, element, attr, ctrl);
	  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);

	  ctrl.$$parserName = 'number';
	  ctrl.$parsers.push(function(value) {
	    if (ctrl.$isEmpty(value))      return null;
	    if (NUMBER_REGEXP.test(value)) return parseFloat(value);
	    return undefined;
	  });

	  ctrl.$formatters.push(function(value) {
	    if (!ctrl.$isEmpty(value)) {
	      if (!isNumber(value)) {
	        throw $ngModelMinErr('numfmt', 'Expected `{0}` to be a number', value);
	      }
	      value = value.toString();
	    }
	    return value;
	  });

	  if (isDefined(attr.min) || attr.ngMin) {
	    var minVal;
	    ctrl.$validators.min = function(value) {
	      return ctrl.$isEmpty(value) || isUndefined(minVal) || value >= minVal;
	    };

	    attr.$observe('min', function(val) {
	      if (isDefined(val) && !isNumber(val)) {
	        val = parseFloat(val, 10);
	      }
	      minVal = isNumber(val) && !isNaN(val) ? val : undefined;
	      // TODO(matsko): implement validateLater to reduce number of validations
	      ctrl.$validate();
	    });
	  }

	  if (isDefined(attr.max) || attr.ngMax) {
	    var maxVal;
	    ctrl.$validators.max = function(value) {
	      return ctrl.$isEmpty(value) || isUndefined(maxVal) || value <= maxVal;
	    };

	    attr.$observe('max', function(val) {
	      if (isDefined(val) && !isNumber(val)) {
	        val = parseFloat(val, 10);
	      }
	      maxVal = isNumber(val) && !isNaN(val) ? val : undefined;
	      // TODO(matsko): implement validateLater to reduce number of validations
	      ctrl.$validate();
	    });
	  }
	}

	function urlInputType(scope, element, attr, ctrl, $sniffer, $browser) {
	  // Note: no badInputChecker here by purpose as `url` is only a validation
	  // in browsers, i.e. we can always read out input.value even if it is not valid!
	  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
	  stringBasedInputType(ctrl);

	  ctrl.$$parserName = 'url';
	  ctrl.$validators.url = function(modelValue, viewValue) {
	    var value = modelValue || viewValue;
	    return ctrl.$isEmpty(value) || URL_REGEXP.test(value);
	  };
	}

	function emailInputType(scope, element, attr, ctrl, $sniffer, $browser) {
	  // Note: no badInputChecker here by purpose as `url` is only a validation
	  // in browsers, i.e. we can always read out input.value even if it is not valid!
	  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
	  stringBasedInputType(ctrl);

	  ctrl.$$parserName = 'email';
	  ctrl.$validators.email = function(modelValue, viewValue) {
	    var value = modelValue || viewValue;
	    return ctrl.$isEmpty(value) || EMAIL_REGEXP.test(value);
	  };
	}

	function radioInputType(scope, element, attr, ctrl) {
	  // make the name unique, if not defined
	  if (isUndefined(attr.name)) {
	    element.attr('name', nextUid());
	  }

	  var listener = function(ev) {
	    if (element[0].checked) {
	      ctrl.$setViewValue(attr.value, ev && ev.type);
	    }
	  };

	  element.on('click', listener);

	  ctrl.$render = function() {
	    var value = attr.value;
	    element[0].checked = (value == ctrl.$viewValue);
	  };

	  attr.$observe('value', ctrl.$render);
	}

	function parseConstantExpr($parse, context, name, expression, fallback) {
	  var parseFn;
	  if (isDefined(expression)) {
	    parseFn = $parse(expression);
	    if (!parseFn.constant) {
	      throw minErr('ngModel')('constexpr', 'Expected constant expression for `{0}`, but saw ' +
	                                   '`{1}`.', name, expression);
	    }
	    return parseFn(context);
	  }
	  return fallback;
	}

	function checkboxInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter, $parse) {
	  var trueValue = parseConstantExpr($parse, scope, 'ngTrueValue', attr.ngTrueValue, true);
	  var falseValue = parseConstantExpr($parse, scope, 'ngFalseValue', attr.ngFalseValue, false);

	  var listener = function(ev) {
	    ctrl.$setViewValue(element[0].checked, ev && ev.type);
	  };

	  element.on('click', listener);

	  ctrl.$render = function() {
	    element[0].checked = ctrl.$viewValue;
	  };

	  // Override the standard `$isEmpty` because the $viewValue of an empty checkbox is always set to `false`
	  // This is because of the parser below, which compares the `$modelValue` with `trueValue` to convert
	  // it to a boolean.
	  ctrl.$isEmpty = function(value) {
	    return value === false;
	  };

	  ctrl.$formatters.push(function(value) {
	    return equals(value, trueValue);
	  });

	  ctrl.$parsers.push(function(value) {
	    return value ? trueValue : falseValue;
	  });
	}


	/**
	 * @ngdoc directive
	 * @name textarea
	 * @restrict E
	 *
	 * @description
	 * HTML textarea element control with angular data-binding. The data-binding and validation
	 * properties of this element are exactly the same as those of the
	 * {@link ng.directive:input input element}.
	 *
	 * @param {string} ngModel Assignable angular expression to data-bind to.
	 * @param {string=} name Property name of the form under which the control is published.
	 * @param {string=} required Sets `required` validation error key if the value is not entered.
	 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	 *    `required` when you want to data-bind to the `required` attribute.
	 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	 *    minlength.
	 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any
	 *    length.
	 * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match
	 *    a RegExp found by evaluating the Angular expression given in the attribute value.
	 *    If the expression evaluates to a RegExp object, then this is used directly.
	 *    If the expression evaluates to a string, then it will be converted to a RegExp
	 *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	 *    `new RegExp('^abc$')`.<br />
	 *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	 *    start at the index of the last search's match, thus not taking the whole input value into
	 *    account.
	 * @param {string=} ngChange Angular expression to be executed when input changes due to user
	 *    interaction with the input element.
	 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
	 */


	/**
	 * @ngdoc directive
	 * @name input
	 * @restrict E
	 *
	 * @description
	 * HTML input element control. When used together with {@link ngModel `ngModel`}, it provides data-binding,
	 * input state control, and validation.
	 * Input control follows HTML5 input types and polyfills the HTML5 validation behavior for older browsers.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Not every feature offered is available for all input types.
	 * Specifically, data binding and event handling via `ng-model` is unsupported for `input[file]`.
	 * </div>
	 *
	 * @param {string} ngModel Assignable angular expression to data-bind to.
	 * @param {string=} name Property name of the form under which the control is published.
	 * @param {string=} required Sets `required` validation error key if the value is not entered.
	 * @param {boolean=} ngRequired Sets `required` attribute if set to true
	 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	 *    minlength.
	 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any
	 *    length.
	 * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match
	 *    a RegExp found by evaluating the Angular expression given in the attribute value.
	 *    If the expression evaluates to a RegExp object, then this is used directly.
	 *    If the expression evaluates to a string, then it will be converted to a RegExp
	 *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	 *    `new RegExp('^abc$')`.<br />
	 *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	 *    start at the index of the last search's match, thus not taking the whole input value into
	 *    account.
	 * @param {string=} ngChange Angular expression to be executed when input changes due to user
	 *    interaction with the input element.
	 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
	 *    This parameter is ignored for input[type=password] controls, which will never trim the
	 *    input.
	 *
	 * @example
	    <example name="input-directive" module="inputExample">
	      <file name="index.html">
	       <script>
	          angular.module('inputExample', [])
	            .controller('ExampleController', ['$scope', function($scope) {
	              $scope.user = {name: 'guest', last: 'visitor'};
	            }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <form name="myForm">
	           <label>
	              User name:
	              <input type="text" name="userName" ng-model="user.name" required>
	           </label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.userName.$error.required">
	              Required!</span>
	           </div>
	           <label>
	              Last name:
	              <input type="text" name="lastName" ng-model="user.last"
	              ng-minlength="3" ng-maxlength="10">
	           </label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.lastName.$error.minlength">
	               Too short!</span>
	             <span class="error" ng-show="myForm.lastName.$error.maxlength">
	               Too long!</span>
	           </div>
	         </form>
	         <hr>
	         <tt>user = {{user}}</tt><br/>
	         <tt>myForm.userName.$valid = {{myForm.userName.$valid}}</tt><br/>
	         <tt>myForm.userName.$error = {{myForm.userName.$error}}</tt><br/>
	         <tt>myForm.lastName.$valid = {{myForm.lastName.$valid}}</tt><br/>
	         <tt>myForm.lastName.$error = {{myForm.lastName.$error}}</tt><br/>
	         <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	         <tt>myForm.$error.minlength = {{!!myForm.$error.minlength}}</tt><br/>
	         <tt>myForm.$error.maxlength = {{!!myForm.$error.maxlength}}</tt><br/>
	       </div>
	      </file>
	      <file name="protractor.js" type="protractor">
	        var user = element(by.exactBinding('user'));
	        var userNameValid = element(by.binding('myForm.userName.$valid'));
	        var lastNameValid = element(by.binding('myForm.lastName.$valid'));
	        var lastNameError = element(by.binding('myForm.lastName.$error'));
	        var formValid = element(by.binding('myForm.$valid'));
	        var userNameInput = element(by.model('user.name'));
	        var userLastInput = element(by.model('user.last'));

	        it('should initialize to model', function() {
	          expect(user.getText()).toContain('{"name":"guest","last":"visitor"}');
	          expect(userNameValid.getText()).toContain('true');
	          expect(formValid.getText()).toContain('true');
	        });

	        it('should be invalid if empty when required', function() {
	          userNameInput.clear();
	          userNameInput.sendKeys('');

	          expect(user.getText()).toContain('{"last":"visitor"}');
	          expect(userNameValid.getText()).toContain('false');
	          expect(formValid.getText()).toContain('false');
	        });

	        it('should be valid if empty when min length is set', function() {
	          userLastInput.clear();
	          userLastInput.sendKeys('');

	          expect(user.getText()).toContain('{"name":"guest","last":""}');
	          expect(lastNameValid.getText()).toContain('true');
	          expect(formValid.getText()).toContain('true');
	        });

	        it('should be invalid if less than required min length', function() {
	          userLastInput.clear();
	          userLastInput.sendKeys('xx');

	          expect(user.getText()).toContain('{"name":"guest"}');
	          expect(lastNameValid.getText()).toContain('false');
	          expect(lastNameError.getText()).toContain('minlength');
	          expect(formValid.getText()).toContain('false');
	        });

	        it('should be invalid if longer than max length', function() {
	          userLastInput.clear();
	          userLastInput.sendKeys('some ridiculously long name');

	          expect(user.getText()).toContain('{"name":"guest"}');
	          expect(lastNameValid.getText()).toContain('false');
	          expect(lastNameError.getText()).toContain('maxlength');
	          expect(formValid.getText()).toContain('false');
	        });
	      </file>
	    </example>
	 */
	var inputDirective = ['$browser', '$sniffer', '$filter', '$parse',
	    function($browser, $sniffer, $filter, $parse) {
	  return {
	    restrict: 'E',
	    require: ['?ngModel'],
	    link: {
	      pre: function(scope, element, attr, ctrls) {
	        if (ctrls[0]) {
	          (inputType[lowercase(attr.type)] || inputType.text)(scope, element, attr, ctrls[0], $sniffer,
	                                                              $browser, $filter, $parse);
	        }
	      }
	    }
	  };
	}];



	var CONSTANT_VALUE_REGEXP = /^(true|false|\d+)$/;
	/**
	 * @ngdoc directive
	 * @name ngValue
	 *
	 * @description
	 * Binds the given expression to the value of `<option>` or {@link input[radio] `input[radio]`},
	 * so that when the element is selected, the {@link ngModel `ngModel`} of that element is set to
	 * the bound value.
	 *
	 * `ngValue` is useful when dynamically generating lists of radio buttons using
	 * {@link ngRepeat `ngRepeat`}, as shown below.
	 *
	 * Likewise, `ngValue` can be used to generate `<option>` elements for
	 * the {@link select `select`} element. In that case however, only strings are supported
	 * for the `value `attribute, so the resulting `ngModel` will always be a string.
	 * Support for `select` models with non-string values is available via `ngOptions`.
	 *
	 * @element input
	 * @param {string=} ngValue angular expression, whose value will be bound to the `value` attribute
	 *   of the `input` element
	 *
	 * @example
	    <example name="ngValue-directive" module="valueExample">
	      <file name="index.html">
	       <script>
	          angular.module('valueExample', [])
	            .controller('ExampleController', ['$scope', function($scope) {
	              $scope.names = ['pizza', 'unicorns', 'robots'];
	              $scope.my = { favorite: 'unicorns' };
	            }]);
	       </script>
	        <form ng-controller="ExampleController">
	          <h2>Which is your favorite?</h2>
	            <label ng-repeat="name in names" for="{{name}}">
	              {{name}}
	              <input type="radio"
	                     ng-model="my.favorite"
	                     ng-value="name"
	                     id="{{name}}"
	                     name="favorite">
	            </label>
	          <div>You chose {{my.favorite}}</div>
	        </form>
	      </file>
	      <file name="protractor.js" type="protractor">
	        var favorite = element(by.binding('my.favorite'));

	        it('should initialize to model', function() {
	          expect(favorite.getText()).toContain('unicorns');
	        });
	        it('should bind the values to the inputs', function() {
	          element.all(by.model('my.favorite')).get(0).click();
	          expect(favorite.getText()).toContain('pizza');
	        });
	      </file>
	    </example>
	 */
	var ngValueDirective = function() {
	  return {
	    restrict: 'A',
	    priority: 100,
	    compile: function(tpl, tplAttr) {
	      if (CONSTANT_VALUE_REGEXP.test(tplAttr.ngValue)) {
	        return function ngValueConstantLink(scope, elm, attr) {
	          attr.$set('value', scope.$eval(attr.ngValue));
	        };
	      } else {
	        return function ngValueLink(scope, elm, attr) {
	          scope.$watch(attr.ngValue, function valueWatchAction(value) {
	            attr.$set('value', value);
	          });
	        };
	      }
	    }
	  };
	};

	/**
	 * @ngdoc directive
	 * @name ngBind
	 * @restrict AC
	 *
	 * @description
	 * The `ngBind` attribute tells Angular to replace the text content of the specified HTML element
	 * with the value of a given expression, and to update the text content when the value of that
	 * expression changes.
	 *
	 * Typically, you don't use `ngBind` directly, but instead you use the double curly markup like
	 * `{{ expression }}` which is similar but less verbose.
	 *
	 * It is preferable to use `ngBind` instead of `{{ expression }}` if a template is momentarily
	 * displayed by the browser in its raw state before Angular compiles it. Since `ngBind` is an
	 * element attribute, it makes the bindings invisible to the user while the page is loading.
	 *
	 * An alternative solution to this problem would be using the
	 * {@link ng.directive:ngCloak ngCloak} directive.
	 *
	 *
	 * @element ANY
	 * @param {expression} ngBind {@link guide/expression Expression} to evaluate.
	 *
	 * @example
	 * Enter a name in the Live Preview text box; the greeting below the text box changes instantly.
	   <example module="bindExample">
	     <file name="index.html">
	       <script>
	         angular.module('bindExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.name = 'Whirled';
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <label>Enter name: <input type="text" ng-model="name"></label><br>
	         Hello <span ng-bind="name"></span>!
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-bind', function() {
	         var nameInput = element(by.model('name'));

	         expect(element(by.binding('name')).getText()).toBe('Whirled');
	         nameInput.clear();
	         nameInput.sendKeys('world');
	         expect(element(by.binding('name')).getText()).toBe('world');
	       });
	     </file>
	   </example>
	 */
	var ngBindDirective = ['$compile', function($compile) {
	  return {
	    restrict: 'AC',
	    compile: function ngBindCompile(templateElement) {
	      $compile.$$addBindingClass(templateElement);
	      return function ngBindLink(scope, element, attr) {
	        $compile.$$addBindingInfo(element, attr.ngBind);
	        element = element[0];
	        scope.$watch(attr.ngBind, function ngBindWatchAction(value) {
	          element.textContent = value === undefined ? '' : value;
	        });
	      };
	    }
	  };
	}];


	/**
	 * @ngdoc directive
	 * @name ngBindTemplate
	 *
	 * @description
	 * The `ngBindTemplate` directive specifies that the element
	 * text content should be replaced with the interpolation of the template
	 * in the `ngBindTemplate` attribute.
	 * Unlike `ngBind`, the `ngBindTemplate` can contain multiple `{{` `}}`
	 * expressions. This directive is needed since some HTML elements
	 * (such as TITLE and OPTION) cannot contain SPAN elements.
	 *
	 * @element ANY
	 * @param {string} ngBindTemplate template of form
	 *   <tt>{{</tt> <tt>expression</tt> <tt>}}</tt> to eval.
	 *
	 * @example
	 * Try it here: enter text in text box and watch the greeting change.
	   <example module="bindExample">
	     <file name="index.html">
	       <script>
	         angular.module('bindExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.salutation = 'Hello';
	             $scope.name = 'World';
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	        <label>Salutation: <input type="text" ng-model="salutation"></label><br>
	        <label>Name: <input type="text" ng-model="name"></label><br>
	        <pre ng-bind-template="{{salutation}} {{name}}!"></pre>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-bind', function() {
	         var salutationElem = element(by.binding('salutation'));
	         var salutationInput = element(by.model('salutation'));
	         var nameInput = element(by.model('name'));

	         expect(salutationElem.getText()).toBe('Hello World!');

	         salutationInput.clear();
	         salutationInput.sendKeys('Greetings');
	         nameInput.clear();
	         nameInput.sendKeys('user');

	         expect(salutationElem.getText()).toBe('Greetings user!');
	       });
	     </file>
	   </example>
	 */
	var ngBindTemplateDirective = ['$interpolate', '$compile', function($interpolate, $compile) {
	  return {
	    compile: function ngBindTemplateCompile(templateElement) {
	      $compile.$$addBindingClass(templateElement);
	      return function ngBindTemplateLink(scope, element, attr) {
	        var interpolateFn = $interpolate(element.attr(attr.$attr.ngBindTemplate));
	        $compile.$$addBindingInfo(element, interpolateFn.expressions);
	        element = element[0];
	        attr.$observe('ngBindTemplate', function(value) {
	          element.textContent = value === undefined ? '' : value;
	        });
	      };
	    }
	  };
	}];


	/**
	 * @ngdoc directive
	 * @name ngBindHtml
	 *
	 * @description
	 * Evaluates the expression and inserts the resulting HTML into the element in a secure way. By default,
	 * the resulting HTML content will be sanitized using the {@link ngSanitize.$sanitize $sanitize} service.
	 * To utilize this functionality, ensure that `$sanitize` is available, for example, by including {@link
	 * ngSanitize} in your module's dependencies (not in core Angular). In order to use {@link ngSanitize}
	 * in your module's dependencies, you need to include "angular-sanitize.js" in your application.
	 *
	 * You may also bypass sanitization for values you know are safe. To do so, bind to
	 * an explicitly trusted value via {@link ng.$sce#trustAsHtml $sce.trustAsHtml}.  See the example
	 * under {@link ng.$sce#show-me-an-example-using-sce- Strict Contextual Escaping (SCE)}.
	 *
	 * Note: If a `$sanitize` service is unavailable and the bound value isn't explicitly trusted, you
	 * will have an exception (instead of an exploit.)
	 *
	 * @element ANY
	 * @param {expression} ngBindHtml {@link guide/expression Expression} to evaluate.
	 *
	 * @example

	   <example module="bindHtmlExample" deps="angular-sanitize.js">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	        <p ng-bind-html="myHTML"></p>
	       </div>
	     </file>

	     <file name="script.js">
	       angular.module('bindHtmlExample', ['ngSanitize'])
	         .controller('ExampleController', ['$scope', function($scope) {
	           $scope.myHTML =
	              'I am an <code>HTML</code>string with ' +
	              '<a href="#">links!</a> and other <em>stuff</em>';
	         }]);
	     </file>

	     <file name="protractor.js" type="protractor">
	       it('should check ng-bind-html', function() {
	         expect(element(by.binding('myHTML')).getText()).toBe(
	             'I am an HTMLstring with links! and other stuff');
	       });
	     </file>
	   </example>
	 */
	var ngBindHtmlDirective = ['$sce', '$parse', '$compile', function($sce, $parse, $compile) {
	  return {
	    restrict: 'A',
	    compile: function ngBindHtmlCompile(tElement, tAttrs) {
	      var ngBindHtmlGetter = $parse(tAttrs.ngBindHtml);
	      var ngBindHtmlWatch = $parse(tAttrs.ngBindHtml, function getStringValue(value) {
	        return (value || '').toString();
	      });
	      $compile.$$addBindingClass(tElement);

	      return function ngBindHtmlLink(scope, element, attr) {
	        $compile.$$addBindingInfo(element, attr.ngBindHtml);

	        scope.$watch(ngBindHtmlWatch, function ngBindHtmlWatchAction() {
	          // we re-evaluate the expr because we want a TrustedValueHolderType
	          // for $sce, not a string
	          element.html($sce.getTrustedHtml(ngBindHtmlGetter(scope)) || '');
	        });
	      };
	    }
	  };
	}];

	/**
	 * @ngdoc directive
	 * @name ngChange
	 *
	 * @description
	 * Evaluate the given expression when the user changes the input.
	 * The expression is evaluated immediately, unlike the JavaScript onchange event
	 * which only triggers at the end of a change (usually, when the user leaves the
	 * form element or presses the return key).
	 *
	 * The `ngChange` expression is only evaluated when a change in the input value causes
	 * a new value to be committed to the model.
	 *
	 * It will not be evaluated:
	 * * if the value returned from the `$parsers` transformation pipeline has not changed
	 * * if the input has continued to be invalid since the model will stay `null`
	 * * if the model is changed programmatically and not by a change to the input value
	 *
	 *
	 * Note, this directive requires `ngModel` to be present.
	 *
	 * @element input
	 * @param {expression} ngChange {@link guide/expression Expression} to evaluate upon change
	 * in input value.
	 *
	 * @example
	 * <example name="ngChange-directive" module="changeExample">
	 *   <file name="index.html">
	 *     <script>
	 *       angular.module('changeExample', [])
	 *         .controller('ExampleController', ['$scope', function($scope) {
	 *           $scope.counter = 0;
	 *           $scope.change = function() {
	 *             $scope.counter++;
	 *           };
	 *         }]);
	 *     </script>
	 *     <div ng-controller="ExampleController">
	 *       <input type="checkbox" ng-model="confirmed" ng-change="change()" id="ng-change-example1" />
	 *       <input type="checkbox" ng-model="confirmed" id="ng-change-example2" />
	 *       <label for="ng-change-example2">Confirmed</label><br />
	 *       <tt>debug = {{confirmed}}</tt><br/>
	 *       <tt>counter = {{counter}}</tt><br/>
	 *     </div>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     var counter = element(by.binding('counter'));
	 *     var debug = element(by.binding('confirmed'));
	 *
	 *     it('should evaluate the expression if changing from view', function() {
	 *       expect(counter.getText()).toContain('0');
	 *
	 *       element(by.id('ng-change-example1')).click();
	 *
	 *       expect(counter.getText()).toContain('1');
	 *       expect(debug.getText()).toContain('true');
	 *     });
	 *
	 *     it('should not evaluate the expression if changing from model', function() {
	 *       element(by.id('ng-change-example2')).click();

	 *       expect(counter.getText()).toContain('0');
	 *       expect(debug.getText()).toContain('true');
	 *     });
	 *   </file>
	 * </example>
	 */
	var ngChangeDirective = valueFn({
	  restrict: 'A',
	  require: 'ngModel',
	  link: function(scope, element, attr, ctrl) {
	    ctrl.$viewChangeListeners.push(function() {
	      scope.$eval(attr.ngChange);
	    });
	  }
	});

	function classDirective(name, selector) {
	  name = 'ngClass' + name;
	  return ['$animate', function($animate) {
	    return {
	      restrict: 'AC',
	      link: function(scope, element, attr) {
	        var oldVal;

	        scope.$watch(attr[name], ngClassWatchAction, true);

	        attr.$observe('class', function(value) {
	          ngClassWatchAction(scope.$eval(attr[name]));
	        });


	        if (name !== 'ngClass') {
	          scope.$watch('$index', function($index, old$index) {
	            // jshint bitwise: false
	            var mod = $index & 1;
	            if (mod !== (old$index & 1)) {
	              var classes = arrayClasses(scope.$eval(attr[name]));
	              mod === selector ?
	                addClasses(classes) :
	                removeClasses(classes);
	            }
	          });
	        }

	        function addClasses(classes) {
	          var newClasses = digestClassCounts(classes, 1);
	          attr.$addClass(newClasses);
	        }

	        function removeClasses(classes) {
	          var newClasses = digestClassCounts(classes, -1);
	          attr.$removeClass(newClasses);
	        }

	        function digestClassCounts(classes, count) {
	          // Use createMap() to prevent class assumptions involving property
	          // names in Object.prototype
	          var classCounts = element.data('$classCounts') || createMap();
	          var classesToUpdate = [];
	          forEach(classes, function(className) {
	            if (count > 0 || classCounts[className]) {
	              classCounts[className] = (classCounts[className] || 0) + count;
	              if (classCounts[className] === +(count > 0)) {
	                classesToUpdate.push(className);
	              }
	            }
	          });
	          element.data('$classCounts', classCounts);
	          return classesToUpdate.join(' ');
	        }

	        function updateClasses(oldClasses, newClasses) {
	          var toAdd = arrayDifference(newClasses, oldClasses);
	          var toRemove = arrayDifference(oldClasses, newClasses);
	          toAdd = digestClassCounts(toAdd, 1);
	          toRemove = digestClassCounts(toRemove, -1);
	          if (toAdd && toAdd.length) {
	            $animate.addClass(element, toAdd);
	          }
	          if (toRemove && toRemove.length) {
	            $animate.removeClass(element, toRemove);
	          }
	        }

	        function ngClassWatchAction(newVal) {
	          if (selector === true || scope.$index % 2 === selector) {
	            var newClasses = arrayClasses(newVal || []);
	            if (!oldVal) {
	              addClasses(newClasses);
	            } else if (!equals(newVal,oldVal)) {
	              var oldClasses = arrayClasses(oldVal);
	              updateClasses(oldClasses, newClasses);
	            }
	          }
	          oldVal = shallowCopy(newVal);
	        }
	      }
	    };

	    function arrayDifference(tokens1, tokens2) {
	      var values = [];

	      outer:
	      for (var i = 0; i < tokens1.length; i++) {
	        var token = tokens1[i];
	        for (var j = 0; j < tokens2.length; j++) {
	          if (token == tokens2[j]) continue outer;
	        }
	        values.push(token);
	      }
	      return values;
	    }

	    function arrayClasses(classVal) {
	      var classes = [];
	      if (isArray(classVal)) {
	        forEach(classVal, function(v) {
	          classes = classes.concat(arrayClasses(v));
	        });
	        return classes;
	      } else if (isString(classVal)) {
	        return classVal.split(' ');
	      } else if (isObject(classVal)) {
	        forEach(classVal, function(v, k) {
	          if (v) {
	            classes = classes.concat(k.split(' '));
	          }
	        });
	        return classes;
	      }
	      return classVal;
	    }
	  }];
	}

	/**
	 * @ngdoc directive
	 * @name ngClass
	 * @restrict AC
	 *
	 * @description
	 * The `ngClass` directive allows you to dynamically set CSS classes on an HTML element by databinding
	 * an expression that represents all classes to be added.
	 *
	 * The directive operates in three different ways, depending on which of three types the expression
	 * evaluates to:
	 *
	 * 1. If the expression evaluates to a string, the string should be one or more space-delimited class
	 * names.
	 *
	 * 2. If the expression evaluates to an object, then for each key-value pair of the
	 * object with a truthy value the corresponding key is used as a class name.
	 *
	 * 3. If the expression evaluates to an array, each element of the array should either be a string as in
	 * type 1 or an object as in type 2. This means that you can mix strings and objects together in an array
	 * to give you more control over what CSS classes appear. See the code below for an example of this.
	 *
	 *
	 * The directive won't add duplicate classes if a particular class was already set.
	 *
	 * When the expression changes, the previously added classes are removed and only then are the
	 * new classes added.
	 *
	 * @animations
	 * **add** - happens just before the class is applied to the elements
	 *
	 * **remove** - happens just before the class is removed from the element
	 *
	 * @element ANY
	 * @param {expression} ngClass {@link guide/expression Expression} to eval. The result
	 *   of the evaluation can be a string representing space delimited class
	 *   names, an array, or a map of class names to boolean values. In the case of a map, the
	 *   names of the properties whose values are truthy will be added as css classes to the
	 *   element.
	 *
	 * @example Example that demonstrates basic bindings via ngClass directive.
	   <example>
	     <file name="index.html">
	       <p ng-class="{strike: deleted, bold: important, red: error}">Map Syntax Example</p>
	       <label>
	          <input type="checkbox" ng-model="deleted">
	          deleted (apply "strike" class)
	       </label><br>
	       <label>
	          <input type="checkbox" ng-model="important">
	          important (apply "bold" class)
	       </label><br>
	       <label>
	          <input type="checkbox" ng-model="error">
	          error (apply "red" class)
	       </label>
	       <hr>
	       <p ng-class="style">Using String Syntax</p>
	       <input type="text" ng-model="style"
	              placeholder="Type: bold strike red" aria-label="Type: bold strike red">
	       <hr>
	       <p ng-class="[style1, style2, style3]">Using Array Syntax</p>
	       <input ng-model="style1"
	              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red"><br>
	       <input ng-model="style2"
	              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red 2"><br>
	       <input ng-model="style3"
	              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red 3"><br>
	       <hr>
	       <p ng-class="[style4, {orange: warning}]">Using Array and Map Syntax</p>
	       <input ng-model="style4" placeholder="Type: bold, strike" aria-label="Type: bold, strike"><br>
	       <label><input type="checkbox" ng-model="warning"> warning (apply "orange" class)</label>
	     </file>
	     <file name="style.css">
	       .strike {
	           text-decoration: line-through;
	       }
	       .bold {
	           font-weight: bold;
	       }
	       .red {
	           color: red;
	       }
	       .orange {
	           color: orange;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       var ps = element.all(by.css('p'));

	       it('should let you toggle the class', function() {

	         expect(ps.first().getAttribute('class')).not.toMatch(/bold/);
	         expect(ps.first().getAttribute('class')).not.toMatch(/red/);

	         element(by.model('important')).click();
	         expect(ps.first().getAttribute('class')).toMatch(/bold/);

	         element(by.model('error')).click();
	         expect(ps.first().getAttribute('class')).toMatch(/red/);
	       });

	       it('should let you toggle string example', function() {
	         expect(ps.get(1).getAttribute('class')).toBe('');
	         element(by.model('style')).clear();
	         element(by.model('style')).sendKeys('red');
	         expect(ps.get(1).getAttribute('class')).toBe('red');
	       });

	       it('array example should have 3 classes', function() {
	         expect(ps.get(2).getAttribute('class')).toBe('');
	         element(by.model('style1')).sendKeys('bold');
	         element(by.model('style2')).sendKeys('strike');
	         element(by.model('style3')).sendKeys('red');
	         expect(ps.get(2).getAttribute('class')).toBe('bold strike red');
	       });

	       it('array with map example should have 2 classes', function() {
	         expect(ps.last().getAttribute('class')).toBe('');
	         element(by.model('style4')).sendKeys('bold');
	         element(by.model('warning')).click();
	         expect(ps.last().getAttribute('class')).toBe('bold orange');
	       });
	     </file>
	   </example>

	   ## Animations

	   The example below demonstrates how to perform animations using ngClass.

	   <example module="ngAnimate" deps="angular-animate.js" animations="true">
	     <file name="index.html">
	      <input id="setbtn" type="button" value="set" ng-click="myVar='my-class'">
	      <input id="clearbtn" type="button" value="clear" ng-click="myVar=''">
	      <br>
	      <span class="base-class" ng-class="myVar">Sample Text</span>
	     </file>
	     <file name="style.css">
	       .base-class {
	         -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
	         transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
	       }

	       .base-class.my-class {
	         color: red;
	         font-size:3em;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-class', function() {
	         expect(element(by.css('.base-class')).getAttribute('class')).not.
	           toMatch(/my-class/);

	         element(by.id('setbtn')).click();

	         expect(element(by.css('.base-class')).getAttribute('class')).
	           toMatch(/my-class/);

	         element(by.id('clearbtn')).click();

	         expect(element(by.css('.base-class')).getAttribute('class')).not.
	           toMatch(/my-class/);
	       });
	     </file>
	   </example>


	   ## ngClass and pre-existing CSS3 Transitions/Animations
	   The ngClass directive still supports CSS3 Transitions/Animations even if they do not follow the ngAnimate CSS naming structure.
	   Upon animation ngAnimate will apply supplementary CSS classes to track the start and end of an animation, but this will not hinder
	   any pre-existing CSS transitions already on the element. To get an idea of what happens during a class-based animation, be sure
	   to view the step by step details of {@link $animate#addClass $animate.addClass} and
	   {@link $animate#removeClass $animate.removeClass}.
	 */
	var ngClassDirective = classDirective('', true);

	/**
	 * @ngdoc directive
	 * @name ngClassOdd
	 * @restrict AC
	 *
	 * @description
	 * The `ngClassOdd` and `ngClassEven` directives work exactly as
	 * {@link ng.directive:ngClass ngClass}, except they work in
	 * conjunction with `ngRepeat` and take effect only on odd (even) rows.
	 *
	 * This directive can be applied only within the scope of an
	 * {@link ng.directive:ngRepeat ngRepeat}.
	 *
	 * @element ANY
	 * @param {expression} ngClassOdd {@link guide/expression Expression} to eval. The result
	 *   of the evaluation can be a string representing space delimited class names or an array.
	 *
	 * @example
	   <example>
	     <file name="index.html">
	        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
	          <li ng-repeat="name in names">
	           <span ng-class-odd="'odd'" ng-class-even="'even'">
	             {{name}}
	           </span>
	          </li>
	        </ol>
	     </file>
	     <file name="style.css">
	       .odd {
	         color: red;
	       }
	       .even {
	         color: blue;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-class-odd and ng-class-even', function() {
	         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
	           toMatch(/odd/);
	         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
	           toMatch(/even/);
	       });
	     </file>
	   </example>
	 */
	var ngClassOddDirective = classDirective('Odd', 0);

	/**
	 * @ngdoc directive
	 * @name ngClassEven
	 * @restrict AC
	 *
	 * @description
	 * The `ngClassOdd` and `ngClassEven` directives work exactly as
	 * {@link ng.directive:ngClass ngClass}, except they work in
	 * conjunction with `ngRepeat` and take effect only on odd (even) rows.
	 *
	 * This directive can be applied only within the scope of an
	 * {@link ng.directive:ngRepeat ngRepeat}.
	 *
	 * @element ANY
	 * @param {expression} ngClassEven {@link guide/expression Expression} to eval. The
	 *   result of the evaluation can be a string representing space delimited class names or an array.
	 *
	 * @example
	   <example>
	     <file name="index.html">
	        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
	          <li ng-repeat="name in names">
	           <span ng-class-odd="'odd'" ng-class-even="'even'">
	             {{name}} &nbsp; &nbsp; &nbsp;
	           </span>
	          </li>
	        </ol>
	     </file>
	     <file name="style.css">
	       .odd {
	         color: red;
	       }
	       .even {
	         color: blue;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-class-odd and ng-class-even', function() {
	         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
	           toMatch(/odd/);
	         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
	           toMatch(/even/);
	       });
	     </file>
	   </example>
	 */
	var ngClassEvenDirective = classDirective('Even', 1);

	/**
	 * @ngdoc directive
	 * @name ngCloak
	 * @restrict AC
	 *
	 * @description
	 * The `ngCloak` directive is used to prevent the Angular html template from being briefly
	 * displayed by the browser in its raw (uncompiled) form while your application is loading. Use this
	 * directive to avoid the undesirable flicker effect caused by the html template display.
	 *
	 * The directive can be applied to the `<body>` element, but the preferred usage is to apply
	 * multiple `ngCloak` directives to small portions of the page to permit progressive rendering
	 * of the browser view.
	 *
	 * `ngCloak` works in cooperation with the following css rule embedded within `angular.js` and
	 * `angular.min.js`.
	 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
	 *
	 * ```css
	 * [ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {
	 *   display: none !important;
	 * }
	 * ```
	 *
	 * When this css rule is loaded by the browser, all html elements (including their children) that
	 * are tagged with the `ngCloak` directive are hidden. When Angular encounters this directive
	 * during the compilation of the template it deletes the `ngCloak` element attribute, making
	 * the compiled element visible.
	 *
	 * For the best result, the `angular.js` script must be loaded in the head section of the html
	 * document; alternatively, the css rule above must be included in the external stylesheet of the
	 * application.
	 *
	 * @element ANY
	 *
	 * @example
	   <example>
	     <file name="index.html">
	        <div id="template1" ng-cloak>{{ 'hello' }}</div>
	        <div id="template2" class="ng-cloak">{{ 'world' }}</div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should remove the template directive and css class', function() {
	         expect($('#template1').getAttribute('ng-cloak')).
	           toBeNull();
	         expect($('#template2').getAttribute('ng-cloak')).
	           toBeNull();
	       });
	     </file>
	   </example>
	 *
	 */
	var ngCloakDirective = ngDirective({
	  compile: function(element, attr) {
	    attr.$set('ngCloak', undefined);
	    element.removeClass('ng-cloak');
	  }
	});

	/**
	 * @ngdoc directive
	 * @name ngController
	 *
	 * @description
	 * The `ngController` directive attaches a controller class to the view. This is a key aspect of how angular
	 * supports the principles behind the Model-View-Controller design pattern.
	 *
	 * MVC components in angular:
	 *
	 * * Model — Models are the properties of a scope; scopes are attached to the DOM where scope properties
	 *   are accessed through bindings.
	 * * View — The template (HTML with data bindings) that is rendered into the View.
	 * * Controller — The `ngController` directive specifies a Controller class; the class contains business
	 *   logic behind the application to decorate the scope with functions and values
	 *
	 * Note that you can also attach controllers to the DOM by declaring it in a route definition
	 * via the {@link ngRoute.$route $route} service. A common mistake is to declare the controller
	 * again using `ng-controller` in the template itself.  This will cause the controller to be attached
	 * and executed twice.
	 *
	 * @element ANY
	 * @scope
	 * @priority 500
	 * @param {expression} ngController Name of a constructor function registered with the current
	 * {@link ng.$controllerProvider $controllerProvider} or an {@link guide/expression expression}
	 * that on the current scope evaluates to a constructor function.
	 *
	 * The controller instance can be published into a scope property by specifying
	 * `ng-controller="as propertyName"`.
	 *
	 * If the current `$controllerProvider` is configured to use globals (via
	 * {@link ng.$controllerProvider#allowGlobals `$controllerProvider.allowGlobals()` }), this may
	 * also be the name of a globally accessible constructor function (not recommended).
	 *
	 * @example
	 * Here is a simple form for editing user contact information. Adding, removing, clearing, and
	 * greeting are methods declared on the controller (see source tab). These methods can
	 * easily be called from the angular markup. Any changes to the data are automatically reflected
	 * in the View without the need for a manual update.
	 *
	 * Two different declaration styles are included below:
	 *
	 * * one binds methods and properties directly onto the controller using `this`:
	 * `ng-controller="SettingsController1 as settings"`
	 * * one injects `$scope` into the controller:
	 * `ng-controller="SettingsController2"`
	 *
	 * The second option is more common in the Angular community, and is generally used in boilerplates
	 * and in this guide. However, there are advantages to binding properties directly to the controller
	 * and avoiding scope.
	 *
	 * * Using `controller as` makes it obvious which controller you are accessing in the template when
	 * multiple controllers apply to an element.
	 * * If you are writing your controllers as classes you have easier access to the properties and
	 * methods, which will appear on the scope, from inside the controller code.
	 * * Since there is always a `.` in the bindings, you don't have to worry about prototypal
	 * inheritance masking primitives.
	 *
	 * This example demonstrates the `controller as` syntax.
	 *
	 * <example name="ngControllerAs" module="controllerAsExample">
	 *   <file name="index.html">
	 *    <div id="ctrl-as-exmpl" ng-controller="SettingsController1 as settings">
	 *      <label>Name: <input type="text" ng-model="settings.name"/></label>
	 *      <button ng-click="settings.greet()">greet</button><br/>
	 *      Contact:
	 *      <ul>
	 *        <li ng-repeat="contact in settings.contacts">
	 *          <select ng-model="contact.type" aria-label="Contact method" id="select_{{$index}}">
	 *             <option>phone</option>
	 *             <option>email</option>
	 *          </select>
	 *          <input type="text" ng-model="contact.value" aria-labelledby="select_{{$index}}" />
	 *          <button ng-click="settings.clearContact(contact)">clear</button>
	 *          <button ng-click="settings.removeContact(contact)" aria-label="Remove">X</button>
	 *        </li>
	 *        <li><button ng-click="settings.addContact()">add</button></li>
	 *     </ul>
	 *    </div>
	 *   </file>
	 *   <file name="app.js">
	 *    angular.module('controllerAsExample', [])
	 *      .controller('SettingsController1', SettingsController1);
	 *
	 *    function SettingsController1() {
	 *      this.name = "John Smith";
	 *      this.contacts = [
	 *        {type: 'phone', value: '408 555 1212'},
	 *        {type: 'email', value: 'john.smith@example.org'} ];
	 *    }
	 *
	 *    SettingsController1.prototype.greet = function() {
	 *      alert(this.name);
	 *    };
	 *
	 *    SettingsController1.prototype.addContact = function() {
	 *      this.contacts.push({type: 'email', value: 'yourname@example.org'});
	 *    };
	 *
	 *    SettingsController1.prototype.removeContact = function(contactToRemove) {
	 *     var index = this.contacts.indexOf(contactToRemove);
	 *      this.contacts.splice(index, 1);
	 *    };
	 *
	 *    SettingsController1.prototype.clearContact = function(contact) {
	 *      contact.type = 'phone';
	 *      contact.value = '';
	 *    };
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     it('should check controller as', function() {
	 *       var container = element(by.id('ctrl-as-exmpl'));
	 *         expect(container.element(by.model('settings.name'))
	 *           .getAttribute('value')).toBe('John Smith');
	 *
	 *       var firstRepeat =
	 *           container.element(by.repeater('contact in settings.contacts').row(0));
	 *       var secondRepeat =
	 *           container.element(by.repeater('contact in settings.contacts').row(1));
	 *
	 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *           .toBe('408 555 1212');
	 *
	 *       expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *           .toBe('john.smith@example.org');
	 *
	 *       firstRepeat.element(by.buttonText('clear')).click();
	 *
	 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *           .toBe('');
	 *
	 *       container.element(by.buttonText('add')).click();
	 *
	 *       expect(container.element(by.repeater('contact in settings.contacts').row(2))
	 *           .element(by.model('contact.value'))
	 *           .getAttribute('value'))
	 *           .toBe('yourname@example.org');
	 *     });
	 *   </file>
	 * </example>
	 *
	 * This example demonstrates the "attach to `$scope`" style of controller.
	 *
	 * <example name="ngController" module="controllerExample">
	 *  <file name="index.html">
	 *   <div id="ctrl-exmpl" ng-controller="SettingsController2">
	 *     <label>Name: <input type="text" ng-model="name"/></label>
	 *     <button ng-click="greet()">greet</button><br/>
	 *     Contact:
	 *     <ul>
	 *       <li ng-repeat="contact in contacts">
	 *         <select ng-model="contact.type" id="select_{{$index}}">
	 *            <option>phone</option>
	 *            <option>email</option>
	 *         </select>
	 *         <input type="text" ng-model="contact.value" aria-labelledby="select_{{$index}}" />
	 *         <button ng-click="clearContact(contact)">clear</button>
	 *         <button ng-click="removeContact(contact)">X</button>
	 *       </li>
	 *       <li>[ <button ng-click="addContact()">add</button> ]</li>
	 *    </ul>
	 *   </div>
	 *  </file>
	 *  <file name="app.js">
	 *   angular.module('controllerExample', [])
	 *     .controller('SettingsController2', ['$scope', SettingsController2]);
	 *
	 *   function SettingsController2($scope) {
	 *     $scope.name = "John Smith";
	 *     $scope.contacts = [
	 *       {type:'phone', value:'408 555 1212'},
	 *       {type:'email', value:'john.smith@example.org'} ];
	 *
	 *     $scope.greet = function() {
	 *       alert($scope.name);
	 *     };
	 *
	 *     $scope.addContact = function() {
	 *       $scope.contacts.push({type:'email', value:'yourname@example.org'});
	 *     };
	 *
	 *     $scope.removeContact = function(contactToRemove) {
	 *       var index = $scope.contacts.indexOf(contactToRemove);
	 *       $scope.contacts.splice(index, 1);
	 *     };
	 *
	 *     $scope.clearContact = function(contact) {
	 *       contact.type = 'phone';
	 *       contact.value = '';
	 *     };
	 *   }
	 *  </file>
	 *  <file name="protractor.js" type="protractor">
	 *    it('should check controller', function() {
	 *      var container = element(by.id('ctrl-exmpl'));
	 *
	 *      expect(container.element(by.model('name'))
	 *          .getAttribute('value')).toBe('John Smith');
	 *
	 *      var firstRepeat =
	 *          container.element(by.repeater('contact in contacts').row(0));
	 *      var secondRepeat =
	 *          container.element(by.repeater('contact in contacts').row(1));
	 *
	 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *          .toBe('408 555 1212');
	 *      expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *          .toBe('john.smith@example.org');
	 *
	 *      firstRepeat.element(by.buttonText('clear')).click();
	 *
	 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *          .toBe('');
	 *
	 *      container.element(by.buttonText('add')).click();
	 *
	 *      expect(container.element(by.repeater('contact in contacts').row(2))
	 *          .element(by.model('contact.value'))
	 *          .getAttribute('value'))
	 *          .toBe('yourname@example.org');
	 *    });
	 *  </file>
	 *</example>

	 */
	var ngControllerDirective = [function() {
	  return {
	    restrict: 'A',
	    scope: true,
	    controller: '@',
	    priority: 500
	  };
	}];

	/**
	 * @ngdoc directive
	 * @name ngCsp
	 *
	 * @element html
	 * @description
	 * Enables [CSP (Content Security Policy)](https://developer.mozilla.org/en/Security/CSP) support.
	 *
	 * This is necessary when developing things like Google Chrome Extensions or Universal Windows Apps.
	 *
	 * CSP forbids apps to use `eval` or `Function(string)` generated functions (among other things).
	 * For Angular to be CSP compatible there are only two things that we need to do differently:
	 *
	 * - don't use `Function` constructor to generate optimized value getters
	 * - don't inject custom stylesheet into the document
	 *
	 * AngularJS uses `Function(string)` generated functions as a speed optimization. Applying the `ngCsp`
	 * directive will cause Angular to use CSP compatibility mode. When this mode is on AngularJS will
	 * evaluate all expressions up to 30% slower than in non-CSP mode, but no security violations will
	 * be raised.
	 *
	 * CSP forbids JavaScript to inline stylesheet rules. In non CSP mode Angular automatically
	 * includes some CSS rules (e.g. {@link ng.directive:ngCloak ngCloak}).
	 * To make those directives work in CSP mode, include the `angular-csp.css` manually.
	 *
	 * Angular tries to autodetect if CSP is active and automatically turn on the CSP-safe mode. This
	 * autodetection however triggers a CSP error to be logged in the console:
	 *
	 * ```
	 * Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of
	 * script in the following Content Security Policy directive: "default-src 'self'". Note that
	 * 'script-src' was not explicitly set, so 'default-src' is used as a fallback.
	 * ```
	 *
	 * This error is harmless but annoying. To prevent the error from showing up, put the `ngCsp`
	 * directive on the root element of the application or on the `angular.js` script tag, whichever
	 * appears first in the html document.
	 *
	 * *Note: This directive is only available in the `ng-csp` and `data-ng-csp` attribute form.*
	 *
	 * @example
	 * This example shows how to apply the `ngCsp` directive to the `html` tag.
	   ```html
	     <!doctype html>
	     <html ng-app ng-csp>
	     ...
	     ...
	     </html>
	   ```
	  * @example
	      // Note: the suffix `.csp` in the example name triggers
	      // csp mode in our http server!
	      <example name="example.csp" module="cspExample" ng-csp="true">
	        <file name="index.html">
	          <div ng-controller="MainController as ctrl">
	            <div>
	              <button ng-click="ctrl.inc()" id="inc">Increment</button>
	              <span id="counter">
	                {{ctrl.counter}}
	              </span>
	            </div>

	            <div>
	              <button ng-click="ctrl.evil()" id="evil">Evil</button>
	              <span id="evilError">
	                {{ctrl.evilError}}
	              </span>
	            </div>
	          </div>
	        </file>
	        <file name="script.js">
	           angular.module('cspExample', [])
	             .controller('MainController', function() {
	                this.counter = 0;
	                this.inc = function() {
	                  this.counter++;
	                };
	                this.evil = function() {
	                  // jshint evil:true
	                  try {
	                    eval('1+2');
	                  } catch (e) {
	                    this.evilError = e.message;
	                  }
	                };
	              });
	        </file>
	        <file name="protractor.js" type="protractor">
	          var util, webdriver;

	          var incBtn = element(by.id('inc'));
	          var counter = element(by.id('counter'));
	          var evilBtn = element(by.id('evil'));
	          var evilError = element(by.id('evilError'));

	          function getAndClearSevereErrors() {
	            return browser.manage().logs().get('browser').then(function(browserLog) {
	              return browserLog.filter(function(logEntry) {
	                return logEntry.level.value > webdriver.logging.Level.WARNING.value;
	              });
	            });
	          }

	          function clearErrors() {
	            getAndClearSevereErrors();
	          }

	          function expectNoErrors() {
	            getAndClearSevereErrors().then(function(filteredLog) {
	              expect(filteredLog.length).toEqual(0);
	              if (filteredLog.length) {
	                console.log('browser console errors: ' + util.inspect(filteredLog));
	              }
	            });
	          }

	          function expectError(regex) {
	            getAndClearSevereErrors().then(function(filteredLog) {
	              var found = false;
	              filteredLog.forEach(function(log) {
	                if (log.message.match(regex)) {
	                  found = true;
	                }
	              });
	              if (!found) {
	                throw new Error('expected an error that matches ' + regex);
	              }
	            });
	          }

	          beforeEach(function() {
	            util = require('util');
	            webdriver = require('protractor/node_modules/selenium-webdriver');
	          });

	          // For now, we only test on Chrome,
	          // as Safari does not load the page with Protractor's injected scripts,
	          // and Firefox webdriver always disables content security policy (#6358)
	          if (browser.params.browser !== 'chrome') {
	            return;
	          }

	          it('should not report errors when the page is loaded', function() {
	            // clear errors so we are not dependent on previous tests
	            clearErrors();
	            // Need to reload the page as the page is already loaded when
	            // we come here
	            browser.driver.getCurrentUrl().then(function(url) {
	              browser.get(url);
	            });
	            expectNoErrors();
	          });

	          it('should evaluate expressions', function() {
	            expect(counter.getText()).toEqual('0');
	            incBtn.click();
	            expect(counter.getText()).toEqual('1');
	            expectNoErrors();
	          });

	          it('should throw and report an error when using "eval"', function() {
	            evilBtn.click();
	            expect(evilError.getText()).toMatch(/Content Security Policy/);
	            expectError(/Content Security Policy/);
	          });
	        </file>
	      </example>
	  */

	// ngCsp is not implemented as a proper directive any more, because we need it be processed while we
	// bootstrap the system (before $parse is instantiated), for this reason we just have
	// the csp.isActive() fn that looks for ng-csp attribute anywhere in the current doc

	/**
	 * @ngdoc directive
	 * @name ngClick
	 *
	 * @description
	 * The ngClick directive allows you to specify custom behavior when
	 * an element is clicked.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngClick {@link guide/expression Expression} to evaluate upon
	 * click. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-click="count = count + 1" ng-init="count=0">
	        Increment
	      </button>
	      <span>
	        count: {{count}}
	      </span>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-click', function() {
	         expect(element(by.binding('count')).getText()).toMatch('0');
	         element(by.css('button')).click();
	         expect(element(by.binding('count')).getText()).toMatch('1');
	       });
	     </file>
	   </example>
	 */
	/*
	 * A collection of directives that allows creation of custom event handlers that are defined as
	 * angular expressions and are compiled and executed within the current scope.
	 */
	var ngEventDirectives = {};

	// For events that might fire synchronously during DOM manipulation
	// we need to execute their event handlers asynchronously using $evalAsync,
	// so that they are not executed in an inconsistent state.
	var forceAsyncEvents = {
	  'blur': true,
	  'focus': true
	};
	forEach(
	  'click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste'.split(' '),
	  function(eventName) {
	    var directiveName = directiveNormalize('ng-' + eventName);
	    ngEventDirectives[directiveName] = ['$parse', '$rootScope', function($parse, $rootScope) {
	      return {
	        restrict: 'A',
	        compile: function($element, attr) {
	          // We expose the powerful $event object on the scope that provides access to the Window,
	          // etc. that isn't protected by the fast paths in $parse.  We explicitly request better
	          // checks at the cost of speed since event handler expressions are not executed as
	          // frequently as regular change detection.
	          var fn = $parse(attr[directiveName], /* interceptorFn */ null, /* expensiveChecks */ true);
	          return function ngEventHandler(scope, element) {
	            element.on(eventName, function(event) {
	              var callback = function() {
	                fn(scope, {$event:event});
	              };
	              if (forceAsyncEvents[eventName] && $rootScope.$$phase) {
	                scope.$evalAsync(callback);
	              } else {
	                scope.$apply(callback);
	              }
	            });
	          };
	        }
	      };
	    }];
	  }
	);

	/**
	 * @ngdoc directive
	 * @name ngDblclick
	 *
	 * @description
	 * The `ngDblclick` directive allows you to specify custom behavior on a dblclick event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngDblclick {@link guide/expression Expression} to evaluate upon
	 * a dblclick. (The Event object is available as `$event`)
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-dblclick="count = count + 1" ng-init="count=0">
	        Increment (on double click)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */


	/**
	 * @ngdoc directive
	 * @name ngMousedown
	 *
	 * @description
	 * The ngMousedown directive allows you to specify custom behavior on mousedown event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMousedown {@link guide/expression Expression} to evaluate upon
	 * mousedown. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-mousedown="count = count + 1" ng-init="count=0">
	        Increment (on mouse down)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */


	/**
	 * @ngdoc directive
	 * @name ngMouseup
	 *
	 * @description
	 * Specify custom behavior on mouseup event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMouseup {@link guide/expression Expression} to evaluate upon
	 * mouseup. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-mouseup="count = count + 1" ng-init="count=0">
	        Increment (on mouse up)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */

	/**
	 * @ngdoc directive
	 * @name ngMouseover
	 *
	 * @description
	 * Specify custom behavior on mouseover event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMouseover {@link guide/expression Expression} to evaluate upon
	 * mouseover. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-mouseover="count = count + 1" ng-init="count=0">
	        Increment (when mouse is over)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */


	/**
	 * @ngdoc directive
	 * @name ngMouseenter
	 *
	 * @description
	 * Specify custom behavior on mouseenter event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMouseenter {@link guide/expression Expression} to evaluate upon
	 * mouseenter. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-mouseenter="count = count + 1" ng-init="count=0">
	        Increment (when mouse enters)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */


	/**
	 * @ngdoc directive
	 * @name ngMouseleave
	 *
	 * @description
	 * Specify custom behavior on mouseleave event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMouseleave {@link guide/expression Expression} to evaluate upon
	 * mouseleave. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-mouseleave="count = count + 1" ng-init="count=0">
	        Increment (when mouse leaves)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */


	/**
	 * @ngdoc directive
	 * @name ngMousemove
	 *
	 * @description
	 * Specify custom behavior on mousemove event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMousemove {@link guide/expression Expression} to evaluate upon
	 * mousemove. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-mousemove="count = count + 1" ng-init="count=0">
	        Increment (when mouse moves)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */


	/**
	 * @ngdoc directive
	 * @name ngKeydown
	 *
	 * @description
	 * Specify custom behavior on keydown event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngKeydown {@link guide/expression Expression} to evaluate upon
	 * keydown. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <input ng-keydown="count = count + 1" ng-init="count=0">
	      key down count: {{count}}
	     </file>
	   </example>
	 */


	/**
	 * @ngdoc directive
	 * @name ngKeyup
	 *
	 * @description
	 * Specify custom behavior on keyup event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngKeyup {@link guide/expression Expression} to evaluate upon
	 * keyup. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
	 *
	 * @example
	   <example>
	     <file name="index.html">
	       <p>Typing in the input box below updates the key count</p>
	       <input ng-keyup="count = count + 1" ng-init="count=0"> key up count: {{count}}

	       <p>Typing in the input box below updates the keycode</p>
	       <input ng-keyup="event=$event">
	       <p>event keyCode: {{ event.keyCode }}</p>
	       <p>event altKey: {{ event.altKey }}</p>
	     </file>
	   </example>
	 */


	/**
	 * @ngdoc directive
	 * @name ngKeypress
	 *
	 * @description
	 * Specify custom behavior on keypress event.
	 *
	 * @element ANY
	 * @param {expression} ngKeypress {@link guide/expression Expression} to evaluate upon
	 * keypress. ({@link guide/expression#-event- Event object is available as `$event`}
	 * and can be interrogated for keyCode, altKey, etc.)
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <input ng-keypress="count = count + 1" ng-init="count=0">
	      key press count: {{count}}
	     </file>
	   </example>
	 */


	/**
	 * @ngdoc directive
	 * @name ngSubmit
	 *
	 * @description
	 * Enables binding angular expressions to onsubmit events.
	 *
	 * Additionally it prevents the default action (which for form means sending the request to the
	 * server and reloading the current page), but only if the form does not contain `action`,
	 * `data-action`, or `x-action` attributes.
	 *
	 * <div class="alert alert-warning">
	 * **Warning:** Be careful not to cause "double-submission" by using both the `ngClick` and
	 * `ngSubmit` handlers together. See the
	 * {@link form#submitting-a-form-and-preventing-the-default-action `form` directive documentation}
	 * for a detailed discussion of when `ngSubmit` may be triggered.
	 * </div>
	 *
	 * @element form
	 * @priority 0
	 * @param {expression} ngSubmit {@link guide/expression Expression} to eval.
	 * ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example module="submitExample">
	     <file name="index.html">
	      <script>
	        angular.module('submitExample', [])
	          .controller('ExampleController', ['$scope', function($scope) {
	            $scope.list = [];
	            $scope.text = 'hello';
	            $scope.submit = function() {
	              if ($scope.text) {
	                $scope.list.push(this.text);
	                $scope.text = '';
	              }
	            };
	          }]);
	      </script>
	      <form ng-submit="submit()" ng-controller="ExampleController">
	        Enter text and hit enter:
	        <input type="text" ng-model="text" name="text" />
	        <input type="submit" id="submit" value="Submit" />
	        <pre>list={{list}}</pre>
	      </form>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-submit', function() {
	         expect(element(by.binding('list')).getText()).toBe('list=[]');
	         element(by.css('#submit')).click();
	         expect(element(by.binding('list')).getText()).toContain('hello');
	         expect(element(by.model('text')).getAttribute('value')).toBe('');
	       });
	       it('should ignore empty strings', function() {
	         expect(element(by.binding('list')).getText()).toBe('list=[]');
	         element(by.css('#submit')).click();
	         element(by.css('#submit')).click();
	         expect(element(by.binding('list')).getText()).toContain('hello');
	        });
	     </file>
	   </example>
	 */

	/**
	 * @ngdoc directive
	 * @name ngFocus
	 *
	 * @description
	 * Specify custom behavior on focus event.
	 *
	 * Note: As the `focus` event is executed synchronously when calling `input.focus()`
	 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
	 * during an `$apply` to ensure a consistent state.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngFocus {@link guide/expression Expression} to evaluate upon
	 * focus. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	 * See {@link ng.directive:ngClick ngClick}
	 */

	/**
	 * @ngdoc directive
	 * @name ngBlur
	 *
	 * @description
	 * Specify custom behavior on blur event.
	 *
	 * A [blur event](https://developer.mozilla.org/en-US/docs/Web/Events/blur) fires when
	 * an element has lost focus.
	 *
	 * Note: As the `blur` event is executed synchronously also during DOM manipulations
	 * (e.g. removing a focussed input),
	 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
	 * during an `$apply` to ensure a consistent state.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngBlur {@link guide/expression Expression} to evaluate upon
	 * blur. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	 * See {@link ng.directive:ngClick ngClick}
	 */

	/**
	 * @ngdoc directive
	 * @name ngCopy
	 *
	 * @description
	 * Specify custom behavior on copy event.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngCopy {@link guide/expression Expression} to evaluate upon
	 * copy. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <input ng-copy="copied=true" ng-init="copied=false; value='copy me'" ng-model="value">
	      copied: {{copied}}
	     </file>
	   </example>
	 */

	/**
	 * @ngdoc directive
	 * @name ngCut
	 *
	 * @description
	 * Specify custom behavior on cut event.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngCut {@link guide/expression Expression} to evaluate upon
	 * cut. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <input ng-cut="cut=true" ng-init="cut=false; value='cut me'" ng-model="value">
	      cut: {{cut}}
	     </file>
	   </example>
	 */

	/**
	 * @ngdoc directive
	 * @name ngPaste
	 *
	 * @description
	 * Specify custom behavior on paste event.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngPaste {@link guide/expression Expression} to evaluate upon
	 * paste. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <input ng-paste="paste=true" ng-init="paste=false" placeholder='paste here'>
	      pasted: {{paste}}
	     </file>
	   </example>
	 */

	/**
	 * @ngdoc directive
	 * @name ngIf
	 * @restrict A
	 *
	 * @description
	 * The `ngIf` directive removes or recreates a portion of the DOM tree based on an
	 * {expression}. If the expression assigned to `ngIf` evaluates to a false
	 * value then the element is removed from the DOM, otherwise a clone of the
	 * element is reinserted into the DOM.
	 *
	 * `ngIf` differs from `ngShow` and `ngHide` in that `ngIf` completely removes and recreates the
	 * element in the DOM rather than changing its visibility via the `display` css property.  A common
	 * case when this difference is significant is when using css selectors that rely on an element's
	 * position within the DOM, such as the `:first-child` or `:last-child` pseudo-classes.
	 *
	 * Note that when an element is removed using `ngIf` its scope is destroyed and a new scope
	 * is created when the element is restored.  The scope created within `ngIf` inherits from
	 * its parent scope using
	 * [prototypal inheritance](https://github.com/angular/angular.js/wiki/Understanding-Scopes#javascript-prototypal-inheritance).
	 * An important implication of this is if `ngModel` is used within `ngIf` to bind to
	 * a javascript primitive defined in the parent scope. In this case any modifications made to the
	 * variable within the child scope will override (hide) the value in the parent scope.
	 *
	 * Also, `ngIf` recreates elements using their compiled state. An example of this behavior
	 * is if an element's class attribute is directly modified after it's compiled, using something like
	 * jQuery's `.addClass()` method, and the element is later removed. When `ngIf` recreates the element
	 * the added class will be lost because the original compiled state is used to regenerate the element.
	 *
	 * Additionally, you can provide animations via the `ngAnimate` module to animate the `enter`
	 * and `leave` effects.
	 *
	 * @animations
	 * enter - happens just after the `ngIf` contents change and a new DOM element is created and injected into the `ngIf` container
	 * leave - happens just before the `ngIf` contents are removed from the DOM
	 *
	 * @element ANY
	 * @scope
	 * @priority 600
	 * @param {expression} ngIf If the {@link guide/expression expression} is falsy then
	 *     the element is removed from the DOM tree. If it is truthy a copy of the compiled
	 *     element is added to the DOM tree.
	 *
	 * @example
	  <example module="ngAnimate" deps="angular-animate.js" animations="true">
	    <file name="index.html">
	      <label>Click me: <input type="checkbox" ng-model="checked" ng-init="checked=true" /></label><br/>
	      Show when checked:
	      <span ng-if="checked" class="animate-if">
	        This is removed when the checkbox is unchecked.
	      </span>
	    </file>
	    <file name="animations.css">
	      .animate-if {
	        background:white;
	        border:1px solid black;
	        padding:10px;
	      }

	      .animate-if.ng-enter, .animate-if.ng-leave {
	        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
	        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
	      }

	      .animate-if.ng-enter,
	      .animate-if.ng-leave.ng-leave-active {
	        opacity:0;
	      }

	      .animate-if.ng-leave,
	      .animate-if.ng-enter.ng-enter-active {
	        opacity:1;
	      }
	    </file>
	  </example>
	 */
	var ngIfDirective = ['$animate', function($animate) {
	  return {
	    multiElement: true,
	    transclude: 'element',
	    priority: 600,
	    terminal: true,
	    restrict: 'A',
	    $$tlb: true,
	    link: function($scope, $element, $attr, ctrl, $transclude) {
	        var block, childScope, previousElements;
	        $scope.$watch($attr.ngIf, function ngIfWatchAction(value) {

	          if (value) {
	            if (!childScope) {
	              $transclude(function(clone, newScope) {
	                childScope = newScope;
	                clone[clone.length++] = document.createComment(' end ngIf: ' + $attr.ngIf + ' ');
	                // Note: We only need the first/last node of the cloned nodes.
	                // However, we need to keep the reference to the jqlite wrapper as it might be changed later
	                // by a directive with templateUrl when its template arrives.
	                block = {
	                  clone: clone
	                };
	                $animate.enter(clone, $element.parent(), $element);
	              });
	            }
	          } else {
	            if (previousElements) {
	              previousElements.remove();
	              previousElements = null;
	            }
	            if (childScope) {
	              childScope.$destroy();
	              childScope = null;
	            }
	            if (block) {
	              previousElements = getBlockNodes(block.clone);
	              $animate.leave(previousElements).then(function() {
	                previousElements = null;
	              });
	              block = null;
	            }
	          }
	        });
	    }
	  };
	}];

	/**
	 * @ngdoc directive
	 * @name ngInclude
	 * @restrict ECA
	 *
	 * @description
	 * Fetches, compiles and includes an external HTML fragment.
	 *
	 * By default, the template URL is restricted to the same domain and protocol as the
	 * application document. This is done by calling {@link $sce#getTrustedResourceUrl
	 * $sce.getTrustedResourceUrl} on it. To load templates from other domains or protocols
	 * you may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist them} or
	 * {@link $sce#trustAsResourceUrl wrap them} as trusted values. Refer to Angular's {@link
	 * ng.$sce Strict Contextual Escaping}.
	 *
	 * In addition, the browser's
	 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
	 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
	 * policy may further restrict whether the template is successfully loaded.
	 * For example, `ngInclude` won't work for cross-domain requests on all browsers and for `file://`
	 * access on some browsers.
	 *
	 * @animations
	 * enter - animation is used to bring new content into the browser.
	 * leave - animation is used to animate existing content away.
	 *
	 * The enter and leave animation occur concurrently.
	 *
	 * @scope
	 * @priority 400
	 *
	 * @param {string} ngInclude|src angular expression evaluating to URL. If the source is a string constant,
	 *                 make sure you wrap it in **single** quotes, e.g. `src="'myPartialTemplate.html'"`.
	 * @param {string=} onload Expression to evaluate when a new partial is loaded.
	 *
	 * @param {string=} autoscroll Whether `ngInclude` should call {@link ng.$anchorScroll
	 *                  $anchorScroll} to scroll the viewport after the content is loaded.
	 *
	 *                  - If the attribute is not set, disable scrolling.
	 *                  - If the attribute is set without value, enable scrolling.
	 *                  - Otherwise enable scrolling only if the expression evaluates to truthy value.
	 *
	 * @example
	  <example module="includeExample" deps="angular-animate.js" animations="true">
	    <file name="index.html">
	     <div ng-controller="ExampleController">
	       <select ng-model="template" ng-options="t.name for t in templates">
	        <option value="">(blank)</option>
	       </select>
	       url of the template: <code>{{template.url}}</code>
	       <hr/>
	       <div class="slide-animate-container">
	         <div class="slide-animate" ng-include="template.url"></div>
	       </div>
	     </div>
	    </file>
	    <file name="script.js">
	      angular.module('includeExample', ['ngAnimate'])
	        .controller('ExampleController', ['$scope', function($scope) {
	          $scope.templates =
	            [ { name: 'template1.html', url: 'template1.html'},
	              { name: 'template2.html', url: 'template2.html'} ];
	          $scope.template = $scope.templates[0];
	        }]);
	     </file>
	    <file name="template1.html">
	      Content of template1.html
	    </file>
	    <file name="template2.html">
	      Content of template2.html
	    </file>
	    <file name="animations.css">
	      .slide-animate-container {
	        position:relative;
	        background:white;
	        border:1px solid black;
	        height:40px;
	        overflow:hidden;
	      }

	      .slide-animate {
	        padding:10px;
	      }

	      .slide-animate.ng-enter, .slide-animate.ng-leave {
	        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
	        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;

	        position:absolute;
	        top:0;
	        left:0;
	        right:0;
	        bottom:0;
	        display:block;
	        padding:10px;
	      }

	      .slide-animate.ng-enter {
	        top:-50px;
	      }
	      .slide-animate.ng-enter.ng-enter-active {
	        top:0;
	      }

	      .slide-animate.ng-leave {
	        top:0;
	      }
	      .slide-animate.ng-leave.ng-leave-active {
	        top:50px;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var templateSelect = element(by.model('template'));
	      var includeElem = element(by.css('[ng-include]'));

	      it('should load template1.html', function() {
	        expect(includeElem.getText()).toMatch(/Content of template1.html/);
	      });

	      it('should load template2.html', function() {
	        if (browser.params.browser == 'firefox') {
	          // Firefox can't handle using selects
	          // See https://github.com/angular/protractor/issues/480
	          return;
	        }
	        templateSelect.click();
	        templateSelect.all(by.css('option')).get(2).click();
	        expect(includeElem.getText()).toMatch(/Content of template2.html/);
	      });

	      it('should change to blank', function() {
	        if (browser.params.browser == 'firefox') {
	          // Firefox can't handle using selects
	          return;
	        }
	        templateSelect.click();
	        templateSelect.all(by.css('option')).get(0).click();
	        expect(includeElem.isPresent()).toBe(false);
	      });
	    </file>
	  </example>
	 */


	/**
	 * @ngdoc event
	 * @name ngInclude#$includeContentRequested
	 * @eventType emit on the scope ngInclude was declared in
	 * @description
	 * Emitted every time the ngInclude content is requested.
	 *
	 * @param {Object} angularEvent Synthetic event object.
	 * @param {String} src URL of content to load.
	 */


	/**
	 * @ngdoc event
	 * @name ngInclude#$includeContentLoaded
	 * @eventType emit on the current ngInclude scope
	 * @description
	 * Emitted every time the ngInclude content is reloaded.
	 *
	 * @param {Object} angularEvent Synthetic event object.
	 * @param {String} src URL of content to load.
	 */


	/**
	 * @ngdoc event
	 * @name ngInclude#$includeContentError
	 * @eventType emit on the scope ngInclude was declared in
	 * @description
	 * Emitted when a template HTTP request yields an erroneous response (status < 200 || status > 299)
	 *
	 * @param {Object} angularEvent Synthetic event object.
	 * @param {String} src URL of content to load.
	 */
	var ngIncludeDirective = ['$templateRequest', '$anchorScroll', '$animate', '$sce',
	                  function($templateRequest,   $anchorScroll,   $animate,   $sce) {
	  return {
	    restrict: 'ECA',
	    priority: 400,
	    terminal: true,
	    transclude: 'element',
	    controller: angular.noop,
	    compile: function(element, attr) {
	      var srcExp = attr.ngInclude || attr.src,
	          onloadExp = attr.onload || '',
	          autoScrollExp = attr.autoscroll;

	      return function(scope, $element, $attr, ctrl, $transclude) {
	        var changeCounter = 0,
	            currentScope,
	            previousElement,
	            currentElement;

	        var cleanupLastIncludeContent = function() {
	          if (previousElement) {
	            previousElement.remove();
	            previousElement = null;
	          }
	          if (currentScope) {
	            currentScope.$destroy();
	            currentScope = null;
	          }
	          if (currentElement) {
	            $animate.leave(currentElement).then(function() {
	              previousElement = null;
	            });
	            previousElement = currentElement;
	            currentElement = null;
	          }
	        };

	        scope.$watch($sce.parseAsResourceUrl(srcExp), function ngIncludeWatchAction(src) {
	          var afterAnimation = function() {
	            if (isDefined(autoScrollExp) && (!autoScrollExp || scope.$eval(autoScrollExp))) {
	              $anchorScroll();
	            }
	          };
	          var thisChangeId = ++changeCounter;

	          if (src) {
	            //set the 2nd param to true to ignore the template request error so that the inner
	            //contents and scope can be cleaned up.
	            $templateRequest(src, true).then(function(response) {
	              if (thisChangeId !== changeCounter) return;
	              var newScope = scope.$new();
	              ctrl.template = response;

	              // Note: This will also link all children of ng-include that were contained in the original
	              // html. If that content contains controllers, ... they could pollute/change the scope.
	              // However, using ng-include on an element with additional content does not make sense...
	              // Note: We can't remove them in the cloneAttchFn of $transclude as that
	              // function is called before linking the content, which would apply child
	              // directives to non existing elements.
	              var clone = $transclude(newScope, function(clone) {
	                cleanupLastIncludeContent();
	                $animate.enter(clone, null, $element).then(afterAnimation);
	              });

	              currentScope = newScope;
	              currentElement = clone;

	              currentScope.$emit('$includeContentLoaded', src);
	              scope.$eval(onloadExp);
	            }, function() {
	              if (thisChangeId === changeCounter) {
	                cleanupLastIncludeContent();
	                scope.$emit('$includeContentError', src);
	              }
	            });
	            scope.$emit('$includeContentRequested', src);
	          } else {
	            cleanupLastIncludeContent();
	            ctrl.template = null;
	          }
	        });
	      };
	    }
	  };
	}];

	// This directive is called during the $transclude call of the first `ngInclude` directive.
	// It will replace and compile the content of the element with the loaded template.
	// We need this directive so that the element content is already filled when
	// the link function of another directive on the same element as ngInclude
	// is called.
	var ngIncludeFillContentDirective = ['$compile',
	  function($compile) {
	    return {
	      restrict: 'ECA',
	      priority: -400,
	      require: 'ngInclude',
	      link: function(scope, $element, $attr, ctrl) {
	        if (/SVG/.test($element[0].toString())) {
	          // WebKit: https://bugs.webkit.org/show_bug.cgi?id=135698 --- SVG elements do not
	          // support innerHTML, so detect this here and try to generate the contents
	          // specially.
	          $element.empty();
	          $compile(jqLiteBuildFragment(ctrl.template, document).childNodes)(scope,
	              function namespaceAdaptedClone(clone) {
	            $element.append(clone);
	          }, {futureParentElement: $element});
	          return;
	        }

	        $element.html(ctrl.template);
	        $compile($element.contents())(scope);
	      }
	    };
	  }];

	/**
	 * @ngdoc directive
	 * @name ngInit
	 * @restrict AC
	 *
	 * @description
	 * The `ngInit` directive allows you to evaluate an expression in the
	 * current scope.
	 *
	 * <div class="alert alert-danger">
	 * The only appropriate use of `ngInit` is for aliasing special properties of
	 * {@link ng.directive:ngRepeat `ngRepeat`}, as seen in the demo below. Besides this case, you
	 * should use {@link guide/controller controllers} rather than `ngInit`
	 * to initialize values on a scope.
	 * </div>
	 * <div class="alert alert-warning">
	 * **Note**: If you have assignment in `ngInit` along with {@link ng.$filter `$filter`}, make
	 * sure you have parenthesis for correct precedence:
	 * <pre class="prettyprint">
	 * `<div ng-init="test1 = (data | orderBy:'name')"></div>`
	 * </pre>
	 * </div>
	 *
	 * @priority 450
	 *
	 * @element ANY
	 * @param {expression} ngInit {@link guide/expression Expression} to eval.
	 *
	 * @example
	   <example module="initExample">
	     <file name="index.html">
	   <script>
	     angular.module('initExample', [])
	       .controller('ExampleController', ['$scope', function($scope) {
	         $scope.list = [['a', 'b'], ['c', 'd']];
	       }]);
	   </script>
	   <div ng-controller="ExampleController">
	     <div ng-repeat="innerList in list" ng-init="outerIndex = $index">
	       <div ng-repeat="value in innerList" ng-init="innerIndex = $index">
	          <span class="example-init">list[ {{outerIndex}} ][ {{innerIndex}} ] = {{value}};</span>
	       </div>
	     </div>
	   </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should alias index positions', function() {
	         var elements = element.all(by.css('.example-init'));
	         expect(elements.get(0).getText()).toBe('list[ 0 ][ 0 ] = a;');
	         expect(elements.get(1).getText()).toBe('list[ 0 ][ 1 ] = b;');
	         expect(elements.get(2).getText()).toBe('list[ 1 ][ 0 ] = c;');
	         expect(elements.get(3).getText()).toBe('list[ 1 ][ 1 ] = d;');
	       });
	     </file>
	   </example>
	 */
	var ngInitDirective = ngDirective({
	  priority: 450,
	  compile: function() {
	    return {
	      pre: function(scope, element, attrs) {
	        scope.$eval(attrs.ngInit);
	      }
	    };
	  }
	});

	/**
	 * @ngdoc directive
	 * @name ngList
	 *
	 * @description
	 * Text input that converts between a delimited string and an array of strings. The default
	 * delimiter is a comma followed by a space - equivalent to `ng-list=", "`. You can specify a custom
	 * delimiter as the value of the `ngList` attribute - for example, `ng-list=" | "`.
	 *
	 * The behaviour of the directive is affected by the use of the `ngTrim` attribute.
	 * * If `ngTrim` is set to `"false"` then whitespace around both the separator and each
	 *   list item is respected. This implies that the user of the directive is responsible for
	 *   dealing with whitespace but also allows you to use whitespace as a delimiter, such as a
	 *   tab or newline character.
	 * * Otherwise whitespace around the delimiter is ignored when splitting (although it is respected
	 *   when joining the list items back together) and whitespace around each list item is stripped
	 *   before it is added to the model.
	 *
	 * ### Example with Validation
	 *
	 * <example name="ngList-directive" module="listExample">
	 *   <file name="app.js">
	 *      angular.module('listExample', [])
	 *        .controller('ExampleController', ['$scope', function($scope) {
	 *          $scope.names = ['morpheus', 'neo', 'trinity'];
	 *        }]);
	 *   </file>
	 *   <file name="index.html">
	 *    <form name="myForm" ng-controller="ExampleController">
	 *      <label>List: <input name="namesInput" ng-model="names" ng-list required></label>
	 *      <span role="alert">
	 *        <span class="error" ng-show="myForm.namesInput.$error.required">
	 *        Required!</span>
	 *      </span>
	 *      <br>
	 *      <tt>names = {{names}}</tt><br/>
	 *      <tt>myForm.namesInput.$valid = {{myForm.namesInput.$valid}}</tt><br/>
	 *      <tt>myForm.namesInput.$error = {{myForm.namesInput.$error}}</tt><br/>
	 *      <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	 *      <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	 *     </form>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     var listInput = element(by.model('names'));
	 *     var names = element(by.exactBinding('names'));
	 *     var valid = element(by.binding('myForm.namesInput.$valid'));
	 *     var error = element(by.css('span.error'));
	 *
	 *     it('should initialize to model', function() {
	 *       expect(names.getText()).toContain('["morpheus","neo","trinity"]');
	 *       expect(valid.getText()).toContain('true');
	 *       expect(error.getCssValue('display')).toBe('none');
	 *     });
	 *
	 *     it('should be invalid if empty', function() {
	 *       listInput.clear();
	 *       listInput.sendKeys('');
	 *
	 *       expect(names.getText()).toContain('');
	 *       expect(valid.getText()).toContain('false');
	 *       expect(error.getCssValue('display')).not.toBe('none');
	 *     });
	 *   </file>
	 * </example>
	 *
	 * ### Example - splitting on whitespace
	 * <example name="ngList-directive-newlines">
	 *   <file name="index.html">
	 *    <textarea ng-model="list" ng-list="&#10;" ng-trim="false"></textarea>
	 *    <pre>{{ list | json }}</pre>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     it("should split the text by newlines", function() {
	 *       var listInput = element(by.model('list'));
	 *       var output = element(by.binding('list | json'));
	 *       listInput.sendKeys('abc\ndef\nghi');
	 *       expect(output.getText()).toContain('[\n  "abc",\n  "def",\n  "ghi"\n]');
	 *     });
	 *   </file>
	 * </example>
	 *
	 * @element input
	 * @param {string=} ngList optional delimiter that should be used to split the value.
	 */
	var ngListDirective = function() {
	  return {
	    restrict: 'A',
	    priority: 100,
	    require: 'ngModel',
	    link: function(scope, element, attr, ctrl) {
	      // We want to control whitespace trimming so we use this convoluted approach
	      // to access the ngList attribute, which doesn't pre-trim the attribute
	      var ngList = element.attr(attr.$attr.ngList) || ', ';
	      var trimValues = attr.ngTrim !== 'false';
	      var separator = trimValues ? trim(ngList) : ngList;

	      var parse = function(viewValue) {
	        // If the viewValue is invalid (say required but empty) it will be `undefined`
	        if (isUndefined(viewValue)) return;

	        var list = [];

	        if (viewValue) {
	          forEach(viewValue.split(separator), function(value) {
	            if (value) list.push(trimValues ? trim(value) : value);
	          });
	        }

	        return list;
	      };

	      ctrl.$parsers.push(parse);
	      ctrl.$formatters.push(function(value) {
	        if (isArray(value)) {
	          return value.join(ngList);
	        }

	        return undefined;
	      });

	      // Override the standard $isEmpty because an empty array means the input is empty.
	      ctrl.$isEmpty = function(value) {
	        return !value || !value.length;
	      };
	    }
	  };
	};

	/* global VALID_CLASS: true,
	  INVALID_CLASS: true,
	  PRISTINE_CLASS: true,
	  DIRTY_CLASS: true,
	  UNTOUCHED_CLASS: true,
	  TOUCHED_CLASS: true,
	*/

	var VALID_CLASS = 'ng-valid',
	    INVALID_CLASS = 'ng-invalid',
	    PRISTINE_CLASS = 'ng-pristine',
	    DIRTY_CLASS = 'ng-dirty',
	    UNTOUCHED_CLASS = 'ng-untouched',
	    TOUCHED_CLASS = 'ng-touched',
	    PENDING_CLASS = 'ng-pending';


	var $ngModelMinErr = new minErr('ngModel');

	/**
	 * @ngdoc type
	 * @name ngModel.NgModelController
	 *
	 * @property {string} $viewValue Actual string value in the view.
	 * @property {*} $modelValue The value in the model that the control is bound to.
	 * @property {Array.<Function>} $parsers Array of functions to execute, as a pipeline, whenever
	       the control reads value from the DOM. The functions are called in array order, each passing
	       its return value through to the next. The last return value is forwarded to the
	       {@link ngModel.NgModelController#$validators `$validators`} collection.

	Parsers are used to sanitize / convert the {@link ngModel.NgModelController#$viewValue
	`$viewValue`}.

	Returning `undefined` from a parser means a parse error occurred. In that case,
	no {@link ngModel.NgModelController#$validators `$validators`} will run and the `ngModel`
	will be set to `undefined` unless {@link ngModelOptions `ngModelOptions.allowInvalid`}
	is set to `true`. The parse error is stored in `ngModel.$error.parse`.

	 *
	 * @property {Array.<Function>} $formatters Array of functions to execute, as a pipeline, whenever
	       the model value changes. The functions are called in reverse array order, each passing the value through to the
	       next. The last return value is used as the actual DOM value.
	       Used to format / convert values for display in the control.
	 * ```js
	 * function formatter(value) {
	 *   if (value) {
	 *     return value.toUpperCase();
	 *   }
	 * }
	 * ngModel.$formatters.push(formatter);
	 * ```
	 *
	 * @property {Object.<string, function>} $validators A collection of validators that are applied
	 *      whenever the model value changes. The key value within the object refers to the name of the
	 *      validator while the function refers to the validation operation. The validation operation is
	 *      provided with the model value as an argument and must return a true or false value depending
	 *      on the response of that validation.
	 *
	 * ```js
	 * ngModel.$validators.validCharacters = function(modelValue, viewValue) {
	 *   var value = modelValue || viewValue;
	 *   return /[0-9]+/.test(value) &&
	 *          /[a-z]+/.test(value) &&
	 *          /[A-Z]+/.test(value) &&
	 *          /\W+/.test(value);
	 * };
	 * ```
	 *
	 * @property {Object.<string, function>} $asyncValidators A collection of validations that are expected to
	 *      perform an asynchronous validation (e.g. a HTTP request). The validation function that is provided
	 *      is expected to return a promise when it is run during the model validation process. Once the promise
	 *      is delivered then the validation status will be set to true when fulfilled and false when rejected.
	 *      When the asynchronous validators are triggered, each of the validators will run in parallel and the model
	 *      value will only be updated once all validators have been fulfilled. As long as an asynchronous validator
	 *      is unfulfilled, its key will be added to the controllers `$pending` property. Also, all asynchronous validators
	 *      will only run once all synchronous validators have passed.
	 *
	 * Please note that if $http is used then it is important that the server returns a success HTTP response code
	 * in order to fulfill the validation and a status level of `4xx` in order to reject the validation.
	 *
	 * ```js
	 * ngModel.$asyncValidators.uniqueUsername = function(modelValue, viewValue) {
	 *   var value = modelValue || viewValue;
	 *
	 *   // Lookup user by username
	 *   return $http.get('/api/users/' + value).
	 *      then(function resolved() {
	 *        //username exists, this means validation fails
	 *        return $q.reject('exists');
	 *      }, function rejected() {
	 *        //username does not exist, therefore this validation passes
	 *        return true;
	 *      });
	 * };
	 * ```
	 *
	 * @property {Array.<Function>} $viewChangeListeners Array of functions to execute whenever the
	 *     view value has changed. It is called with no arguments, and its return value is ignored.
	 *     This can be used in place of additional $watches against the model value.
	 *
	 * @property {Object} $error An object hash with all failing validator ids as keys.
	 * @property {Object} $pending An object hash with all pending validator ids as keys.
	 *
	 * @property {boolean} $untouched True if control has not lost focus yet.
	 * @property {boolean} $touched True if control has lost focus.
	 * @property {boolean} $pristine True if user has not interacted with the control yet.
	 * @property {boolean} $dirty True if user has already interacted with the control.
	 * @property {boolean} $valid True if there is no error.
	 * @property {boolean} $invalid True if at least one error on the control.
	 * @property {string} $name The name attribute of the control.
	 *
	 * @description
	 *
	 * `NgModelController` provides API for the {@link ngModel `ngModel`} directive.
	 * The controller contains services for data-binding, validation, CSS updates, and value formatting
	 * and parsing. It purposefully does not contain any logic which deals with DOM rendering or
	 * listening to DOM events.
	 * Such DOM related logic should be provided by other directives which make use of
	 * `NgModelController` for data-binding to control elements.
	 * Angular provides this DOM logic for most {@link input `input`} elements.
	 * At the end of this page you can find a {@link ngModel.NgModelController#custom-control-example
	 * custom control example} that uses `ngModelController` to bind to `contenteditable` elements.
	 *
	 * @example
	 * ### Custom Control Example
	 * This example shows how to use `NgModelController` with a custom control to achieve
	 * data-binding. Notice how different directives (`contenteditable`, `ng-model`, and `required`)
	 * collaborate together to achieve the desired result.
	 *
	 * `contenteditable` is an HTML5 attribute, which tells the browser to let the element
	 * contents be edited in place by the user.
	 *
	 * We are using the {@link ng.service:$sce $sce} service here and include the {@link ngSanitize $sanitize}
	 * module to automatically remove "bad" content like inline event listener (e.g. `<span onclick="...">`).
	 * However, as we are using `$sce` the model can still decide to provide unsafe content if it marks
	 * that content using the `$sce` service.
	 *
	 * <example name="NgModelController" module="customControl" deps="angular-sanitize.js">
	    <file name="style.css">
	      [contenteditable] {
	        border: 1px solid black;
	        background-color: white;
	        min-height: 20px;
	      }

	      .ng-invalid {
	        border: 1px solid red;
	      }

	    </file>
	    <file name="script.js">
	      angular.module('customControl', ['ngSanitize']).
	        directive('contenteditable', ['$sce', function($sce) {
	          return {
	            restrict: 'A', // only activate on element attribute
	            require: '?ngModel', // get a hold of NgModelController
	            link: function(scope, element, attrs, ngModel) {
	              if (!ngModel) return; // do nothing if no ng-model

	              // Specify how UI should be updated
	              ngModel.$render = function() {
	                element.html($sce.getTrustedHtml(ngModel.$viewValue || ''));
	              };

	              // Listen for change events to enable binding
	              element.on('blur keyup change', function() {
	                scope.$evalAsync(read);
	              });
	              read(); // initialize

	              // Write data to the model
	              function read() {
	                var html = element.html();
	                // When we clear the content editable the browser leaves a <br> behind
	                // If strip-br attribute is provided then we strip this out
	                if ( attrs.stripBr && html == '<br>' ) {
	                  html = '';
	                }
	                ngModel.$setViewValue(html);
	              }
	            }
	          };
	        }]);
	    </file>
	    <file name="index.html">
	      <form name="myForm">
	       <div contenteditable
	            name="myWidget" ng-model="userContent"
	            strip-br="true"
	            required>Change me!</div>
	        <span ng-show="myForm.myWidget.$error.required">Required!</span>
	       <hr>
	       <textarea ng-model="userContent" aria-label="Dynamic textarea"></textarea>
	      </form>
	    </file>
	    <file name="protractor.js" type="protractor">
	    it('should data-bind and become invalid', function() {
	      if (browser.params.browser == 'safari' || browser.params.browser == 'firefox') {
	        // SafariDriver can't handle contenteditable
	        // and Firefox driver can't clear contenteditables very well
	        return;
	      }
	      var contentEditable = element(by.css('[contenteditable]'));
	      var content = 'Change me!';

	      expect(contentEditable.getText()).toEqual(content);

	      contentEditable.clear();
	      contentEditable.sendKeys(protractor.Key.BACK_SPACE);
	      expect(contentEditable.getText()).toEqual('');
	      expect(contentEditable.getAttribute('class')).toMatch(/ng-invalid-required/);
	    });
	    </file>
	 * </example>
	 *
	 *
	 */
	var NgModelController = ['$scope', '$exceptionHandler', '$attrs', '$element', '$parse', '$animate', '$timeout', '$rootScope', '$q', '$interpolate',
	    function($scope, $exceptionHandler, $attr, $element, $parse, $animate, $timeout, $rootScope, $q, $interpolate) {
	  this.$viewValue = Number.NaN;
	  this.$modelValue = Number.NaN;
	  this.$$rawModelValue = undefined; // stores the parsed modelValue / model set from scope regardless of validity.
	  this.$validators = {};
	  this.$asyncValidators = {};
	  this.$parsers = [];
	  this.$formatters = [];
	  this.$viewChangeListeners = [];
	  this.$untouched = true;
	  this.$touched = false;
	  this.$pristine = true;
	  this.$dirty = false;
	  this.$valid = true;
	  this.$invalid = false;
	  this.$error = {}; // keep invalid keys here
	  this.$$success = {}; // keep valid keys here
	  this.$pending = undefined; // keep pending keys here
	  this.$name = $interpolate($attr.name || '', false)($scope);


	  var parsedNgModel = $parse($attr.ngModel),
	      parsedNgModelAssign = parsedNgModel.assign,
	      ngModelGet = parsedNgModel,
	      ngModelSet = parsedNgModelAssign,
	      pendingDebounce = null,
	      parserValid,
	      ctrl = this;

	  this.$$setOptions = function(options) {
	    ctrl.$options = options;
	    if (options && options.getterSetter) {
	      var invokeModelGetter = $parse($attr.ngModel + '()'),
	          invokeModelSetter = $parse($attr.ngModel + '($$$p)');

	      ngModelGet = function($scope) {
	        var modelValue = parsedNgModel($scope);
	        if (isFunction(modelValue)) {
	          modelValue = invokeModelGetter($scope);
	        }
	        return modelValue;
	      };
	      ngModelSet = function($scope, newValue) {
	        if (isFunction(parsedNgModel($scope))) {
	          invokeModelSetter($scope, {$$$p: ctrl.$modelValue});
	        } else {
	          parsedNgModelAssign($scope, ctrl.$modelValue);
	        }
	      };
	    } else if (!parsedNgModel.assign) {
	      throw $ngModelMinErr('nonassign', "Expression '{0}' is non-assignable. Element: {1}",
	          $attr.ngModel, startingTag($element));
	    }
	  };

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$render
	   *
	   * @description
	   * Called when the view needs to be updated. It is expected that the user of the ng-model
	   * directive will implement this method.
	   *
	   * The `$render()` method is invoked in the following situations:
	   *
	   * * `$rollbackViewValue()` is called.  If we are rolling back the view value to the last
	   *   committed value then `$render()` is called to update the input control.
	   * * The value referenced by `ng-model` is changed programmatically and both the `$modelValue` and
	   *   the `$viewValue` are different from last time.
	   *
	   * Since `ng-model` does not do a deep watch, `$render()` is only invoked if the values of
	   * `$modelValue` and `$viewValue` are actually different from their previous value. If `$modelValue`
	   * or `$viewValue` are objects (rather than a string or number) then `$render()` will not be
	   * invoked if you only change a property on the objects.
	   */
	  this.$render = noop;

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$isEmpty
	   *
	   * @description
	   * This is called when we need to determine if the value of an input is empty.
	   *
	   * For instance, the required directive does this to work out if the input has data or not.
	   *
	   * The default `$isEmpty` function checks whether the value is `undefined`, `''`, `null` or `NaN`.
	   *
	   * You can override this for input directives whose concept of being empty is different from the
	   * default. The `checkboxInputType` directive does this because in its case a value of `false`
	   * implies empty.
	   *
	   * @param {*} value The value of the input to check for emptiness.
	   * @returns {boolean} True if `value` is "empty".
	   */
	  this.$isEmpty = function(value) {
	    return isUndefined(value) || value === '' || value === null || value !== value;
	  };

	  var parentForm = $element.inheritedData('$formController') || nullFormCtrl,
	      currentValidationRunId = 0;

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setValidity
	   *
	   * @description
	   * Change the validity state, and notify the form.
	   *
	   * This method can be called within $parsers/$formatters or a custom validation implementation.
	   * However, in most cases it should be sufficient to use the `ngModel.$validators` and
	   * `ngModel.$asyncValidators` collections which will call `$setValidity` automatically.
	   *
	   * @param {string} validationErrorKey Name of the validator. The `validationErrorKey` will be assigned
	   *        to either `$error[validationErrorKey]` or `$pending[validationErrorKey]`
	   *        (for unfulfilled `$asyncValidators`), so that it is available for data-binding.
	   *        The `validationErrorKey` should be in camelCase and will get converted into dash-case
	   *        for class name. Example: `myError` will result in `ng-valid-my-error` and `ng-invalid-my-error`
	   *        class and can be bound to as  `{{someForm.someControl.$error.myError}}` .
	   * @param {boolean} isValid Whether the current state is valid (true), invalid (false), pending (undefined),
	   *                          or skipped (null). Pending is used for unfulfilled `$asyncValidators`.
	   *                          Skipped is used by Angular when validators do not run because of parse errors and
	   *                          when `$asyncValidators` do not run because any of the `$validators` failed.
	   */
	  addSetValidityMethod({
	    ctrl: this,
	    $element: $element,
	    set: function(object, property) {
	      object[property] = true;
	    },
	    unset: function(object, property) {
	      delete object[property];
	    },
	    parentForm: parentForm,
	    $animate: $animate
	  });

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setPristine
	   *
	   * @description
	   * Sets the control to its pristine state.
	   *
	   * This method can be called to remove the `ng-dirty` class and set the control to its pristine
	   * state (`ng-pristine` class). A model is considered to be pristine when the control
	   * has not been changed from when first compiled.
	   */
	  this.$setPristine = function() {
	    ctrl.$dirty = false;
	    ctrl.$pristine = true;
	    $animate.removeClass($element, DIRTY_CLASS);
	    $animate.addClass($element, PRISTINE_CLASS);
	  };

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setDirty
	   *
	   * @description
	   * Sets the control to its dirty state.
	   *
	   * This method can be called to remove the `ng-pristine` class and set the control to its dirty
	   * state (`ng-dirty` class). A model is considered to be dirty when the control has been changed
	   * from when first compiled.
	   */
	  this.$setDirty = function() {
	    ctrl.$dirty = true;
	    ctrl.$pristine = false;
	    $animate.removeClass($element, PRISTINE_CLASS);
	    $animate.addClass($element, DIRTY_CLASS);
	    parentForm.$setDirty();
	  };

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setUntouched
	   *
	   * @description
	   * Sets the control to its untouched state.
	   *
	   * This method can be called to remove the `ng-touched` class and set the control to its
	   * untouched state (`ng-untouched` class). Upon compilation, a model is set as untouched
	   * by default, however this function can be used to restore that state if the model has
	   * already been touched by the user.
	   */
	  this.$setUntouched = function() {
	    ctrl.$touched = false;
	    ctrl.$untouched = true;
	    $animate.setClass($element, UNTOUCHED_CLASS, TOUCHED_CLASS);
	  };

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setTouched
	   *
	   * @description
	   * Sets the control to its touched state.
	   *
	   * This method can be called to remove the `ng-untouched` class and set the control to its
	   * touched state (`ng-touched` class). A model is considered to be touched when the user has
	   * first focused the control element and then shifted focus away from the control (blur event).
	   */
	  this.$setTouched = function() {
	    ctrl.$touched = true;
	    ctrl.$untouched = false;
	    $animate.setClass($element, TOUCHED_CLASS, UNTOUCHED_CLASS);
	  };

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$rollbackViewValue
	   *
	   * @description
	   * Cancel an update and reset the input element's value to prevent an update to the `$modelValue`,
	   * which may be caused by a pending debounced event or because the input is waiting for a some
	   * future event.
	   *
	   * If you have an input that uses `ng-model-options` to set up debounced events or events such
	   * as blur you can have a situation where there is a period when the `$viewValue`
	   * is out of synch with the ngModel's `$modelValue`.
	   *
	   * In this case, you can run into difficulties if you try to update the ngModel's `$modelValue`
	   * programmatically before these debounced/future events have resolved/occurred, because Angular's
	   * dirty checking mechanism is not able to tell whether the model has actually changed or not.
	   *
	   * The `$rollbackViewValue()` method should be called before programmatically changing the model of an
	   * input which may have such events pending. This is important in order to make sure that the
	   * input field will be updated with the new model value and any pending operations are cancelled.
	   *
	   * <example name="ng-model-cancel-update" module="cancel-update-example">
	   *   <file name="app.js">
	   *     angular.module('cancel-update-example', [])
	   *
	   *     .controller('CancelUpdateController', ['$scope', function($scope) {
	   *       $scope.resetWithCancel = function(e) {
	   *         if (e.keyCode == 27) {
	   *           $scope.myForm.myInput1.$rollbackViewValue();
	   *           $scope.myValue = '';
	   *         }
	   *       };
	   *       $scope.resetWithoutCancel = function(e) {
	   *         if (e.keyCode == 27) {
	   *           $scope.myValue = '';
	   *         }
	   *       };
	   *     }]);
	   *   </file>
	   *   <file name="index.html">
	   *     <div ng-controller="CancelUpdateController">
	   *       <p>Try typing something in each input.  See that the model only updates when you
	   *          blur off the input.
	   *        </p>
	   *        <p>Now see what happens if you start typing then press the Escape key</p>
	   *
	   *       <form name="myForm" ng-model-options="{ updateOn: 'blur' }">
	   *         <p id="inputDescription1">With $rollbackViewValue()</p>
	   *         <input name="myInput1" aria-describedby="inputDescription1" ng-model="myValue"
	   *                ng-keydown="resetWithCancel($event)"><br/>
	   *         myValue: "{{ myValue }}"
	   *
	   *         <p id="inputDescription2">Without $rollbackViewValue()</p>
	   *         <input name="myInput2" aria-describedby="inputDescription2" ng-model="myValue"
	   *                ng-keydown="resetWithoutCancel($event)"><br/>
	   *         myValue: "{{ myValue }}"
	   *       </form>
	   *     </div>
	   *   </file>
	   * </example>
	   */
	  this.$rollbackViewValue = function() {
	    $timeout.cancel(pendingDebounce);
	    ctrl.$viewValue = ctrl.$$lastCommittedViewValue;
	    ctrl.$render();
	  };

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$validate
	   *
	   * @description
	   * Runs each of the registered validators (first synchronous validators and then
	   * asynchronous validators).
	   * If the validity changes to invalid, the model will be set to `undefined`,
	   * unless {@link ngModelOptions `ngModelOptions.allowInvalid`} is `true`.
	   * If the validity changes to valid, it will set the model to the last available valid
	   * `$modelValue`, i.e. either the last parsed value or the last value set from the scope.
	   */
	  this.$validate = function() {
	    // ignore $validate before model is initialized
	    if (isNumber(ctrl.$modelValue) && isNaN(ctrl.$modelValue)) {
	      return;
	    }

	    var viewValue = ctrl.$$lastCommittedViewValue;
	    // Note: we use the $$rawModelValue as $modelValue might have been
	    // set to undefined during a view -> model update that found validation
	    // errors. We can't parse the view here, since that could change
	    // the model although neither viewValue nor the model on the scope changed
	    var modelValue = ctrl.$$rawModelValue;

	    var prevValid = ctrl.$valid;
	    var prevModelValue = ctrl.$modelValue;

	    var allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;

	    ctrl.$$runValidators(modelValue, viewValue, function(allValid) {
	      // If there was no change in validity, don't update the model
	      // This prevents changing an invalid modelValue to undefined
	      if (!allowInvalid && prevValid !== allValid) {
	        // Note: Don't check ctrl.$valid here, as we could have
	        // external validators (e.g. calculated on the server),
	        // that just call $setValidity and need the model value
	        // to calculate their validity.
	        ctrl.$modelValue = allValid ? modelValue : undefined;

	        if (ctrl.$modelValue !== prevModelValue) {
	          ctrl.$$writeModelToScope();
	        }
	      }
	    });

	  };

	  this.$$runValidators = function(modelValue, viewValue, doneCallback) {
	    currentValidationRunId++;
	    var localValidationRunId = currentValidationRunId;

	    // check parser error
	    if (!processParseErrors()) {
	      validationDone(false);
	      return;
	    }
	    if (!processSyncValidators()) {
	      validationDone(false);
	      return;
	    }
	    processAsyncValidators();

	    function processParseErrors() {
	      var errorKey = ctrl.$$parserName || 'parse';
	      if (parserValid === undefined) {
	        setValidity(errorKey, null);
	      } else {
	        if (!parserValid) {
	          forEach(ctrl.$validators, function(v, name) {
	            setValidity(name, null);
	          });
	          forEach(ctrl.$asyncValidators, function(v, name) {
	            setValidity(name, null);
	          });
	        }
	        // Set the parse error last, to prevent unsetting it, should a $validators key == parserName
	        setValidity(errorKey, parserValid);
	        return parserValid;
	      }
	      return true;
	    }

	    function processSyncValidators() {
	      var syncValidatorsValid = true;
	      forEach(ctrl.$validators, function(validator, name) {
	        var result = validator(modelValue, viewValue);
	        syncValidatorsValid = syncValidatorsValid && result;
	        setValidity(name, result);
	      });
	      if (!syncValidatorsValid) {
	        forEach(ctrl.$asyncValidators, function(v, name) {
	          setValidity(name, null);
	        });
	        return false;
	      }
	      return true;
	    }

	    function processAsyncValidators() {
	      var validatorPromises = [];
	      var allValid = true;
	      forEach(ctrl.$asyncValidators, function(validator, name) {
	        var promise = validator(modelValue, viewValue);
	        if (!isPromiseLike(promise)) {
	          throw $ngModelMinErr("$asyncValidators",
	            "Expected asynchronous validator to return a promise but got '{0}' instead.", promise);
	        }
	        setValidity(name, undefined);
	        validatorPromises.push(promise.then(function() {
	          setValidity(name, true);
	        }, function(error) {
	          allValid = false;
	          setValidity(name, false);
	        }));
	      });
	      if (!validatorPromises.length) {
	        validationDone(true);
	      } else {
	        $q.all(validatorPromises).then(function() {
	          validationDone(allValid);
	        }, noop);
	      }
	    }

	    function setValidity(name, isValid) {
	      if (localValidationRunId === currentValidationRunId) {
	        ctrl.$setValidity(name, isValid);
	      }
	    }

	    function validationDone(allValid) {
	      if (localValidationRunId === currentValidationRunId) {

	        doneCallback(allValid);
	      }
	    }
	  };

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$commitViewValue
	   *
	   * @description
	   * Commit a pending update to the `$modelValue`.
	   *
	   * Updates may be pending by a debounced event or because the input is waiting for a some future
	   * event defined in `ng-model-options`. this method is rarely needed as `NgModelController`
	   * usually handles calling this in response to input events.
	   */
	  this.$commitViewValue = function() {
	    var viewValue = ctrl.$viewValue;

	    $timeout.cancel(pendingDebounce);

	    // If the view value has not changed then we should just exit, except in the case where there is
	    // a native validator on the element. In this case the validation state may have changed even though
	    // the viewValue has stayed empty.
	    if (ctrl.$$lastCommittedViewValue === viewValue && (viewValue !== '' || !ctrl.$$hasNativeValidators)) {
	      return;
	    }
	    ctrl.$$lastCommittedViewValue = viewValue;

	    // change to dirty
	    if (ctrl.$pristine) {
	      this.$setDirty();
	    }
	    this.$$parseAndValidate();
	  };

	  this.$$parseAndValidate = function() {
	    var viewValue = ctrl.$$lastCommittedViewValue;
	    var modelValue = viewValue;
	    parserValid = isUndefined(modelValue) ? undefined : true;

	    if (parserValid) {
	      for (var i = 0; i < ctrl.$parsers.length; i++) {
	        modelValue = ctrl.$parsers[i](modelValue);
	        if (isUndefined(modelValue)) {
	          parserValid = false;
	          break;
	        }
	      }
	    }
	    if (isNumber(ctrl.$modelValue) && isNaN(ctrl.$modelValue)) {
	      // ctrl.$modelValue has not been touched yet...
	      ctrl.$modelValue = ngModelGet($scope);
	    }
	    var prevModelValue = ctrl.$modelValue;
	    var allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;
	    ctrl.$$rawModelValue = modelValue;

	    if (allowInvalid) {
	      ctrl.$modelValue = modelValue;
	      writeToModelIfNeeded();
	    }

	    // Pass the $$lastCommittedViewValue here, because the cached viewValue might be out of date.
	    // This can happen if e.g. $setViewValue is called from inside a parser
	    ctrl.$$runValidators(modelValue, ctrl.$$lastCommittedViewValue, function(allValid) {
	      if (!allowInvalid) {
	        // Note: Don't check ctrl.$valid here, as we could have
	        // external validators (e.g. calculated on the server),
	        // that just call $setValidity and need the model value
	        // to calculate their validity.
	        ctrl.$modelValue = allValid ? modelValue : undefined;
	        writeToModelIfNeeded();
	      }
	    });

	    function writeToModelIfNeeded() {
	      if (ctrl.$modelValue !== prevModelValue) {
	        ctrl.$$writeModelToScope();
	      }
	    }
	  };

	  this.$$writeModelToScope = function() {
	    ngModelSet($scope, ctrl.$modelValue);
	    forEach(ctrl.$viewChangeListeners, function(listener) {
	      try {
	        listener();
	      } catch (e) {
	        $exceptionHandler(e);
	      }
	    });
	  };

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setViewValue
	   *
	   * @description
	   * Update the view value.
	   *
	   * This method should be called when an input directive want to change the view value; typically,
	   * this is done from within a DOM event handler.
	   *
	   * For example {@link ng.directive:input input} calls it when the value of the input changes and
	   * {@link ng.directive:select select} calls it when an option is selected.
	   *
	   * If the new `value` is an object (rather than a string or a number), we should make a copy of the
	   * object before passing it to `$setViewValue`.  This is because `ngModel` does not perform a deep
	   * watch of objects, it only looks for a change of identity. If you only change the property of
	   * the object then ngModel will not realise that the object has changed and will not invoke the
	   * `$parsers` and `$validators` pipelines.
	   *
	   * For this reason, you should not change properties of the copy once it has been passed to
	   * `$setViewValue`. Otherwise you may cause the model value on the scope to change incorrectly.
	   *
	   * When this method is called, the new `value` will be staged for committing through the `$parsers`
	   * and `$validators` pipelines. If there are no special {@link ngModelOptions} specified then the staged
	   * value sent directly for processing, finally to be applied to `$modelValue` and then the
	   * **expression** specified in the `ng-model` attribute.
	   *
	   * Lastly, all the registered change listeners, in the `$viewChangeListeners` list, are called.
	   *
	   * In case the {@link ng.directive:ngModelOptions ngModelOptions} directive is used with `updateOn`
	   * and the `default` trigger is not listed, all those actions will remain pending until one of the
	   * `updateOn` events is triggered on the DOM element.
	   * All these actions will be debounced if the {@link ng.directive:ngModelOptions ngModelOptions}
	   * directive is used with a custom debounce for this particular event.
	   *
	   * Note that calling this function does not trigger a `$digest`.
	   *
	   * @param {string} value Value from the view.
	   * @param {string} trigger Event that triggered the update.
	   */
	  this.$setViewValue = function(value, trigger) {
	    ctrl.$viewValue = value;
	    if (!ctrl.$options || ctrl.$options.updateOnDefault) {
	      ctrl.$$debounceViewValueCommit(trigger);
	    }
	  };

	  this.$$debounceViewValueCommit = function(trigger) {
	    var debounceDelay = 0,
	        options = ctrl.$options,
	        debounce;

	    if (options && isDefined(options.debounce)) {
	      debounce = options.debounce;
	      if (isNumber(debounce)) {
	        debounceDelay = debounce;
	      } else if (isNumber(debounce[trigger])) {
	        debounceDelay = debounce[trigger];
	      } else if (isNumber(debounce['default'])) {
	        debounceDelay = debounce['default'];
	      }
	    }

	    $timeout.cancel(pendingDebounce);
	    if (debounceDelay) {
	      pendingDebounce = $timeout(function() {
	        ctrl.$commitViewValue();
	      }, debounceDelay);
	    } else if ($rootScope.$$phase) {
	      ctrl.$commitViewValue();
	    } else {
	      $scope.$apply(function() {
	        ctrl.$commitViewValue();
	      });
	    }
	  };

	  // model -> value
	  // Note: we cannot use a normal scope.$watch as we want to detect the following:
	  // 1. scope value is 'a'
	  // 2. user enters 'b'
	  // 3. ng-change kicks in and reverts scope value to 'a'
	  //    -> scope value did not change since the last digest as
	  //       ng-change executes in apply phase
	  // 4. view should be changed back to 'a'
	  $scope.$watch(function ngModelWatch() {
	    var modelValue = ngModelGet($scope);

	    // if scope model value and ngModel value are out of sync
	    // TODO(perf): why not move this to the action fn?
	    if (modelValue !== ctrl.$modelValue &&
	       // checks for NaN is needed to allow setting the model to NaN when there's an asyncValidator
	       (ctrl.$modelValue === ctrl.$modelValue || modelValue === modelValue)
	    ) {
	      ctrl.$modelValue = ctrl.$$rawModelValue = modelValue;
	      parserValid = undefined;

	      var formatters = ctrl.$formatters,
	          idx = formatters.length;

	      var viewValue = modelValue;
	      while (idx--) {
	        viewValue = formatters[idx](viewValue);
	      }
	      if (ctrl.$viewValue !== viewValue) {
	        ctrl.$viewValue = ctrl.$$lastCommittedViewValue = viewValue;
	        ctrl.$render();

	        ctrl.$$runValidators(modelValue, viewValue, noop);
	      }
	    }

	    return modelValue;
	  });
	}];


	/**
	 * @ngdoc directive
	 * @name ngModel
	 *
	 * @element input
	 * @priority 1
	 *
	 * @description
	 * The `ngModel` directive binds an `input`,`select`, `textarea` (or custom form control) to a
	 * property on the scope using {@link ngModel.NgModelController NgModelController},
	 * which is created and exposed by this directive.
	 *
	 * `ngModel` is responsible for:
	 *
	 * - Binding the view into the model, which other directives such as `input`, `textarea` or `select`
	 *   require.
	 * - Providing validation behavior (i.e. required, number, email, url).
	 * - Keeping the state of the control (valid/invalid, dirty/pristine, touched/untouched, validation errors).
	 * - Setting related css classes on the element (`ng-valid`, `ng-invalid`, `ng-dirty`, `ng-pristine`, `ng-touched`, `ng-untouched`) including animations.
	 * - Registering the control with its parent {@link ng.directive:form form}.
	 *
	 * Note: `ngModel` will try to bind to the property given by evaluating the expression on the
	 * current scope. If the property doesn't already exist on this scope, it will be created
	 * implicitly and added to the scope.
	 *
	 * For best practices on using `ngModel`, see:
	 *
	 *  - [Understanding Scopes](https://github.com/angular/angular.js/wiki/Understanding-Scopes)
	 *
	 * For basic examples, how to use `ngModel`, see:
	 *
	 *  - {@link ng.directive:input input}
	 *    - {@link input[text] text}
	 *    - {@link input[checkbox] checkbox}
	 *    - {@link input[radio] radio}
	 *    - {@link input[number] number}
	 *    - {@link input[email] email}
	 *    - {@link input[url] url}
	 *    - {@link input[date] date}
	 *    - {@link input[datetime-local] datetime-local}
	 *    - {@link input[time] time}
	 *    - {@link input[month] month}
	 *    - {@link input[week] week}
	 *  - {@link ng.directive:select select}
	 *  - {@link ng.directive:textarea textarea}
	 *
	 * # CSS classes
	 * The following CSS classes are added and removed on the associated input/select/textarea element
	 * depending on the validity of the model.
	 *
	 *  - `ng-valid`: the model is valid
	 *  - `ng-invalid`: the model is invalid
	 *  - `ng-valid-[key]`: for each valid key added by `$setValidity`
	 *  - `ng-invalid-[key]`: for each invalid key added by `$setValidity`
	 *  - `ng-pristine`: the control hasn't been interacted with yet
	 *  - `ng-dirty`: the control has been interacted with
	 *  - `ng-touched`: the control has been blurred
	 *  - `ng-untouched`: the control hasn't been blurred
	 *  - `ng-pending`: any `$asyncValidators` are unfulfilled
	 *
	 * Keep in mind that ngAnimate can detect each of these classes when added and removed.
	 *
	 * ## Animation Hooks
	 *
	 * Animations within models are triggered when any of the associated CSS classes are added and removed
	 * on the input element which is attached to the model. These classes are: `.ng-pristine`, `.ng-dirty`,
	 * `.ng-invalid` and `.ng-valid` as well as any other validations that are performed on the model itself.
	 * The animations that are triggered within ngModel are similar to how they work in ngClass and
	 * animations can be hooked into using CSS transitions, keyframes as well as JS animations.
	 *
	 * The following example shows a simple way to utilize CSS transitions to style an input element
	 * that has been rendered as invalid after it has been validated:
	 *
	 * <pre>
	 * //be sure to include ngAnimate as a module to hook into more
	 * //advanced animations
	 * .my-input {
	 *   transition:0.5s linear all;
	 *   background: white;
	 * }
	 * .my-input.ng-invalid {
	 *   background: red;
	 *   color:white;
	 * }
	 * </pre>
	 *
	 * @example
	 * <example deps="angular-animate.js" animations="true" fixBase="true" module="inputExample">
	     <file name="index.html">
	       <script>
	        angular.module('inputExample', [])
	          .controller('ExampleController', ['$scope', function($scope) {
	            $scope.val = '1';
	          }]);
	       </script>
	       <style>
	         .my-input {
	           -webkit-transition:all linear 0.5s;
	           transition:all linear 0.5s;
	           background: transparent;
	         }
	         .my-input.ng-invalid {
	           color:white;
	           background: red;
	         }
	       </style>
	       <p id="inputDescription">
	        Update input to see transitions when valid/invalid.
	        Integer is a valid value.
	       </p>
	       <form name="testForm" ng-controller="ExampleController">
	         <input ng-model="val" ng-pattern="/^\d+$/" name="anim" class="my-input"
	                aria-describedby="inputDescription" />
	       </form>
	     </file>
	 * </example>
	 *
	 * ## Binding to a getter/setter
	 *
	 * Sometimes it's helpful to bind `ngModel` to a getter/setter function.  A getter/setter is a
	 * function that returns a representation of the model when called with zero arguments, and sets
	 * the internal state of a model when called with an argument. It's sometimes useful to use this
	 * for models that have an internal representation that's different from what the model exposes
	 * to the view.
	 *
	 * <div class="alert alert-success">
	 * **Best Practice:** It's best to keep getters fast because Angular is likely to call them more
	 * frequently than other parts of your code.
	 * </div>
	 *
	 * You use this behavior by adding `ng-model-options="{ getterSetter: true }"` to an element that
	 * has `ng-model` attached to it. You can also add `ng-model-options="{ getterSetter: true }"` to
	 * a `<form>`, which will enable this behavior for all `<input>`s within it. See
	 * {@link ng.directive:ngModelOptions `ngModelOptions`} for more.
	 *
	 * The following example shows how to use `ngModel` with a getter/setter:
	 *
	 * @example
	 * <example name="ngModel-getter-setter" module="getterSetterExample">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <form name="userForm">
	           <label>Name:
	             <input type="text" name="userName"
	                    ng-model="user.name"
	                    ng-model-options="{ getterSetter: true }" />
	           </label>
	         </form>
	         <pre>user.name = <span ng-bind="user.name()"></span></pre>
	       </div>
	     </file>
	     <file name="app.js">
	       angular.module('getterSetterExample', [])
	         .controller('ExampleController', ['$scope', function($scope) {
	           var _name = 'Brian';
	           $scope.user = {
	             name: function(newName) {
	              // Note that newName can be undefined for two reasons:
	              // 1. Because it is called as a getter and thus called with no arguments
	              // 2. Because the property should actually be set to undefined. This happens e.g. if the
	              //    input is invalid
	              return arguments.length ? (_name = newName) : _name;
	             }
	           };
	         }]);
	     </file>
	 * </example>
	 */
	var ngModelDirective = ['$rootScope', function($rootScope) {
	  return {
	    restrict: 'A',
	    require: ['ngModel', '^?form', '^?ngModelOptions'],
	    controller: NgModelController,
	    // Prelink needs to run before any input directive
	    // so that we can set the NgModelOptions in NgModelController
	    // before anyone else uses it.
	    priority: 1,
	    compile: function ngModelCompile(element) {
	      // Setup initial state of the control
	      element.addClass(PRISTINE_CLASS).addClass(UNTOUCHED_CLASS).addClass(VALID_CLASS);

	      return {
	        pre: function ngModelPreLink(scope, element, attr, ctrls) {
	          var modelCtrl = ctrls[0],
	              formCtrl = ctrls[1] || nullFormCtrl;

	          modelCtrl.$$setOptions(ctrls[2] && ctrls[2].$options);

	          // notify others, especially parent forms
	          formCtrl.$addControl(modelCtrl);

	          attr.$observe('name', function(newValue) {
	            if (modelCtrl.$name !== newValue) {
	              formCtrl.$$renameControl(modelCtrl, newValue);
	            }
	          });

	          scope.$on('$destroy', function() {
	            formCtrl.$removeControl(modelCtrl);
	          });
	        },
	        post: function ngModelPostLink(scope, element, attr, ctrls) {
	          var modelCtrl = ctrls[0];
	          if (modelCtrl.$options && modelCtrl.$options.updateOn) {
	            element.on(modelCtrl.$options.updateOn, function(ev) {
	              modelCtrl.$$debounceViewValueCommit(ev && ev.type);
	            });
	          }

	          element.on('blur', function(ev) {
	            if (modelCtrl.$touched) return;

	            if ($rootScope.$$phase) {
	              scope.$evalAsync(modelCtrl.$setTouched);
	            } else {
	              scope.$apply(modelCtrl.$setTouched);
	            }
	          });
	        }
	      };
	    }
	  };
	}];

	var DEFAULT_REGEXP = /(\s+|^)default(\s+|$)/;

	/**
	 * @ngdoc directive
	 * @name ngModelOptions
	 *
	 * @description
	 * Allows tuning how model updates are done. Using `ngModelOptions` you can specify a custom list of
	 * events that will trigger a model update and/or a debouncing delay so that the actual update only
	 * takes place when a timer expires; this timer will be reset after another change takes place.
	 *
	 * Given the nature of `ngModelOptions`, the value displayed inside input fields in the view might
	 * be different from the value in the actual model. This means that if you update the model you
	 * should also invoke {@link ngModel.NgModelController `$rollbackViewValue`} on the relevant input field in
	 * order to make sure it is synchronized with the model and that any debounced action is canceled.
	 *
	 * The easiest way to reference the control's {@link ngModel.NgModelController `$rollbackViewValue`}
	 * method is by making sure the input is placed inside a form that has a `name` attribute. This is
	 * important because `form` controllers are published to the related scope under the name in their
	 * `name` attribute.
	 *
	 * Any pending changes will take place immediately when an enclosing form is submitted via the
	 * `submit` event. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`
	 * to have access to the updated model.
	 *
	 * `ngModelOptions` has an effect on the element it's declared on and its descendants.
	 *
	 * @param {Object} ngModelOptions options to apply to the current model. Valid keys are:
	 *   - `updateOn`: string specifying which event should the input be bound to. You can set several
	 *     events using an space delimited list. There is a special event called `default` that
	 *     matches the default events belonging of the control.
	 *   - `debounce`: integer value which contains the debounce model update value in milliseconds. A
	 *     value of 0 triggers an immediate update. If an object is supplied instead, you can specify a
	 *     custom value for each event. For example:
	 *     `ng-model-options="{ updateOn: 'default blur', debounce: {'default': 500, 'blur': 0} }"`
	 *   - `allowInvalid`: boolean value which indicates that the model can be set with values that did
	 *     not validate correctly instead of the default behavior of setting the model to undefined.
	 *   - `getterSetter`: boolean value which determines whether or not to treat functions bound to
	       `ngModel` as getters/setters.
	 *   - `timezone`: Defines the timezone to be used to read/write the `Date` instance in the model for
	 *     `<input type="date">`, `<input type="time">`, ... . It understands UTC/GMT and the
	 *     continental US time zone abbreviations, but for general use, use a time zone offset, for
	 *     example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)
	 *     If not specified, the timezone of the browser will be used.
	 *
	 * @example

	  The following example shows how to override immediate updates. Changes on the inputs within the
	  form will update the model only when the control loses focus (blur event). If `escape` key is
	  pressed while the input field is focused, the value is reset to the value in the current model.

	  <example name="ngModelOptions-directive-blur" module="optionsExample">
	    <file name="index.html">
	      <div ng-controller="ExampleController">
	        <form name="userForm">
	          <label>Name:
	            <input type="text" name="userName"
	                   ng-model="user.name"
	                   ng-model-options="{ updateOn: 'blur' }"
	                   ng-keyup="cancel($event)" />
	          </label><br />
	          <label>Other data:
	            <input type="text" ng-model="user.data" />
	          </label><br />
	        </form>
	        <pre>user.name = <span ng-bind="user.name"></span></pre>
	      </div>
	    </file>
	    <file name="app.js">
	      angular.module('optionsExample', [])
	        .controller('ExampleController', ['$scope', function($scope) {
	          $scope.user = { name: 'say', data: '' };

	          $scope.cancel = function(e) {
	            if (e.keyCode == 27) {
	              $scope.userForm.userName.$rollbackViewValue();
	            }
	          };
	        }]);
	    </file>
	    <file name="protractor.js" type="protractor">
	      var model = element(by.binding('user.name'));
	      var input = element(by.model('user.name'));
	      var other = element(by.model('user.data'));

	      it('should allow custom events', function() {
	        input.sendKeys(' hello');
	        input.click();
	        expect(model.getText()).toEqual('say');
	        other.click();
	        expect(model.getText()).toEqual('say hello');
	      });

	      it('should $rollbackViewValue when model changes', function() {
	        input.sendKeys(' hello');
	        expect(input.getAttribute('value')).toEqual('say hello');
	        input.sendKeys(protractor.Key.ESCAPE);
	        expect(input.getAttribute('value')).toEqual('say');
	        other.click();
	        expect(model.getText()).toEqual('say');
	      });
	    </file>
	  </example>

	  This one shows how to debounce model changes. Model will be updated only 1 sec after last change.
	  If the `Clear` button is pressed, any debounced action is canceled and the value becomes empty.

	  <example name="ngModelOptions-directive-debounce" module="optionsExample">
	    <file name="index.html">
	      <div ng-controller="ExampleController">
	        <form name="userForm">
	          <label>Name:
	            <input type="text" name="userName"
	                   ng-model="user.name"
	                   ng-model-options="{ debounce: 1000 }" />
	          </label>
	          <button ng-click="userForm.userName.$rollbackViewValue(); user.name=''">Clear</button>
	          <br />
	        </form>
	        <pre>user.name = <span ng-bind="user.name"></span></pre>
	      </div>
	    </file>
	    <file name="app.js">
	      angular.module('optionsExample', [])
	        .controller('ExampleController', ['$scope', function($scope) {
	          $scope.user = { name: 'say' };
	        }]);
	    </file>
	  </example>

	  This one shows how to bind to getter/setters:

	  <example name="ngModelOptions-directive-getter-setter" module="getterSetterExample">
	    <file name="index.html">
	      <div ng-controller="ExampleController">
	        <form name="userForm">
	          <label>Name:
	            <input type="text" name="userName"
	                   ng-model="user.name"
	                   ng-model-options="{ getterSetter: true }" />
	          </label>
	        </form>
	        <pre>user.name = <span ng-bind="user.name()"></span></pre>
	      </div>
	    </file>
	    <file name="app.js">
	      angular.module('getterSetterExample', [])
	        .controller('ExampleController', ['$scope', function($scope) {
	          var _name = 'Brian';
	          $scope.user = {
	            name: function(newName) {
	              // Note that newName can be undefined for two reasons:
	              // 1. Because it is called as a getter and thus called with no arguments
	              // 2. Because the property should actually be set to undefined. This happens e.g. if the
	              //    input is invalid
	              return arguments.length ? (_name = newName) : _name;
	            }
	          };
	        }]);
	    </file>
	  </example>
	 */
	var ngModelOptionsDirective = function() {
	  return {
	    restrict: 'A',
	    controller: ['$scope', '$attrs', function($scope, $attrs) {
	      var that = this;
	      this.$options = copy($scope.$eval($attrs.ngModelOptions));
	      // Allow adding/overriding bound events
	      if (this.$options.updateOn !== undefined) {
	        this.$options.updateOnDefault = false;
	        // extract "default" pseudo-event from list of events that can trigger a model update
	        this.$options.updateOn = trim(this.$options.updateOn.replace(DEFAULT_REGEXP, function() {
	          that.$options.updateOnDefault = true;
	          return ' ';
	        }));
	      } else {
	        this.$options.updateOnDefault = true;
	      }
	    }]
	  };
	};



	// helper methods
	function addSetValidityMethod(context) {
	  var ctrl = context.ctrl,
	      $element = context.$element,
	      classCache = {},
	      set = context.set,
	      unset = context.unset,
	      parentForm = context.parentForm,
	      $animate = context.$animate;

	  classCache[INVALID_CLASS] = !(classCache[VALID_CLASS] = $element.hasClass(VALID_CLASS));

	  ctrl.$setValidity = setValidity;

	  function setValidity(validationErrorKey, state, controller) {
	    if (state === undefined) {
	      createAndSet('$pending', validationErrorKey, controller);
	    } else {
	      unsetAndCleanup('$pending', validationErrorKey, controller);
	    }
	    if (!isBoolean(state)) {
	      unset(ctrl.$error, validationErrorKey, controller);
	      unset(ctrl.$$success, validationErrorKey, controller);
	    } else {
	      if (state) {
	        unset(ctrl.$error, validationErrorKey, controller);
	        set(ctrl.$$success, validationErrorKey, controller);
	      } else {
	        set(ctrl.$error, validationErrorKey, controller);
	        unset(ctrl.$$success, validationErrorKey, controller);
	      }
	    }
	    if (ctrl.$pending) {
	      cachedToggleClass(PENDING_CLASS, true);
	      ctrl.$valid = ctrl.$invalid = undefined;
	      toggleValidationCss('', null);
	    } else {
	      cachedToggleClass(PENDING_CLASS, false);
	      ctrl.$valid = isObjectEmpty(ctrl.$error);
	      ctrl.$invalid = !ctrl.$valid;
	      toggleValidationCss('', ctrl.$valid);
	    }

	    // re-read the state as the set/unset methods could have
	    // combined state in ctrl.$error[validationError] (used for forms),
	    // where setting/unsetting only increments/decrements the value,
	    // and does not replace it.
	    var combinedState;
	    if (ctrl.$pending && ctrl.$pending[validationErrorKey]) {
	      combinedState = undefined;
	    } else if (ctrl.$error[validationErrorKey]) {
	      combinedState = false;
	    } else if (ctrl.$$success[validationErrorKey]) {
	      combinedState = true;
	    } else {
	      combinedState = null;
	    }

	    toggleValidationCss(validationErrorKey, combinedState);
	    parentForm.$setValidity(validationErrorKey, combinedState, ctrl);
	  }

	  function createAndSet(name, value, controller) {
	    if (!ctrl[name]) {
	      ctrl[name] = {};
	    }
	    set(ctrl[name], value, controller);
	  }

	  function unsetAndCleanup(name, value, controller) {
	    if (ctrl[name]) {
	      unset(ctrl[name], value, controller);
	    }
	    if (isObjectEmpty(ctrl[name])) {
	      ctrl[name] = undefined;
	    }
	  }

	  function cachedToggleClass(className, switchValue) {
	    if (switchValue && !classCache[className]) {
	      $animate.addClass($element, className);
	      classCache[className] = true;
	    } else if (!switchValue && classCache[className]) {
	      $animate.removeClass($element, className);
	      classCache[className] = false;
	    }
	  }

	  function toggleValidationCss(validationErrorKey, isValid) {
	    validationErrorKey = validationErrorKey ? '-' + snake_case(validationErrorKey, '-') : '';

	    cachedToggleClass(VALID_CLASS + validationErrorKey, isValid === true);
	    cachedToggleClass(INVALID_CLASS + validationErrorKey, isValid === false);
	  }
	}

	function isObjectEmpty(obj) {
	  if (obj) {
	    for (var prop in obj) {
	      return false;
	    }
	  }
	  return true;
	}

	/**
	 * @ngdoc directive
	 * @name ngNonBindable
	 * @restrict AC
	 * @priority 1000
	 *
	 * @description
	 * The `ngNonBindable` directive tells Angular not to compile or bind the contents of the current
	 * DOM element. This is useful if the element contains what appears to be Angular directives and
	 * bindings but which should be ignored by Angular. This could be the case if you have a site that
	 * displays snippets of code, for instance.
	 *
	 * @element ANY
	 *
	 * @example
	 * In this example there are two locations where a simple interpolation binding (`{{}}`) is present,
	 * but the one wrapped in `ngNonBindable` is left alone.
	 *
	 * @example
	    <example>
	      <file name="index.html">
	        <div>Normal: {{1 + 2}}</div>
	        <div ng-non-bindable>Ignored: {{1 + 2}}</div>
	      </file>
	      <file name="protractor.js" type="protractor">
	       it('should check ng-non-bindable', function() {
	         expect(element(by.binding('1 + 2')).getText()).toContain('3');
	         expect(element.all(by.css('div')).last().getText()).toMatch(/1 \+ 2/);
	       });
	      </file>
	    </example>
	 */
	var ngNonBindableDirective = ngDirective({ terminal: true, priority: 1000 });

	/* global jqLiteRemove */

	var ngOptionsMinErr = minErr('ngOptions');

	/**
	 * @ngdoc directive
	 * @name ngOptions
	 * @restrict A
	 *
	 * @description
	 *
	 * The `ngOptions` attribute can be used to dynamically generate a list of `<option>`
	 * elements for the `<select>` element using the array or object obtained by evaluating the
	 * `ngOptions` comprehension expression.
	 *
	 * In many cases, `ngRepeat` can be used on `<option>` elements instead of `ngOptions` to achieve a
	 * similar result. However, `ngOptions` provides some benefits such as reducing memory and
	 * increasing speed by not creating a new scope for each repeated instance, as well as providing
	 * more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the
	 * comprehension expression. `ngOptions` should be used when the `<select>` model needs to be bound
	 *  to a non-string value. This is because an option element can only be bound to string values at
	 * present.
	 *
	 * When an item in the `<select>` menu is selected, the array element or object property
	 * represented by the selected option will be bound to the model identified by the `ngModel`
	 * directive.
	 *
	 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can
	 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"
	 * option. See example below for demonstration.
	 *
	 * ## Complex Models (objects or collections)
	 *
	 * **Note:** By default, `ngModel` watches the model by reference, not value. This is important when
	 * binding any input directive to a model that is an object or a collection.
	 *
	 * Since this is a common situation for `ngOptions` the directive additionally watches the model using
	 * `$watchCollection` when the select has the `multiple` attribute or when there is a `track by` clause in
	 * the options expression. This allows ngOptions to trigger a re-rendering of the options even if the actual
	 * object/collection has not changed identity but only a property on the object or an item in the collection
	 * changes.
	 *
	 * Note that `$watchCollection` does a shallow comparison of the properties of the object (or the items in the collection
	 * if the model is an array). This means that changing a property deeper inside the object/collection that the
	 * first level will not trigger a re-rendering.
	 *
	 *
	 * ## `select` **`as`**
	 *
	 * Using `select` **`as`** will bind the result of the `select` expression to the model, but
	 * the value of the `<select>` and `<option>` html elements will be either the index (for array data sources)
	 * or property name (for object data sources) of the value within the collection. If a **`track by`** expression
	 * is used, the result of that expression will be set as the value of the `option` and `select` elements.
	 *
	 *
	 * ### `select` **`as`** and **`track by`**
	 *
	 * <div class="alert alert-warning">
	 * Do not use `select` **`as`** and **`track by`** in the same expression. They are not designed to work together.
	 * </div>
	 *
	 * Consider the following example:
	 *
	 * ```html
	 * <select ng-options="item.subItem as item.label for item in values track by item.id" ng-model="selected">
	 * ```
	 *
	 * ```js
	 * $scope.values = [{
	 *   id: 1,
	 *   label: 'aLabel',
	 *   subItem: { name: 'aSubItem' }
	 * }, {
	 *   id: 2,
	 *   label: 'bLabel',
	 *   subItem: { name: 'bSubItem' }
	 * }];
	 *
	 * $scope.selected = { name: 'aSubItem' };
	 * ```
	 *
	 * With the purpose of preserving the selection, the **`track by`** expression is always applied to the element
	 * of the data source (to `item` in this example). To calculate whether an element is selected, we do the
	 * following:
	 *
	 * 1. Apply **`track by`** to the elements in the array. In the example: `[1, 2]`
	 * 2. Apply **`track by`** to the already selected value in `ngModel`.
	 *    In the example: this is not possible as **`track by`** refers to `item.id`, but the selected
	 *    value from `ngModel` is `{name: 'aSubItem'}`, so the **`track by`** expression is applied to
	 *    a wrong object, the selected element can't be found, `<select>` is always reset to the "not
	 *    selected" option.
	 *
	 *
	 * @param {string} ngModel Assignable angular expression to data-bind to.
	 * @param {string=} name Property name of the form under which the control is published.
	 * @param {string=} required The control is considered valid only if value is entered.
	 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	 *    `required` when you want to data-bind to the `required` attribute.
	 * @param {comprehension_expression=} ngOptions in one of the following forms:
	 *
	 *   * for array data sources:
	 *     * `label` **`for`** `value` **`in`** `array`
	 *     * `select` **`as`** `label` **`for`** `value` **`in`** `array`
	 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array`
	 *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array`
	 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`
	 *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`
	 *     * `label` **`for`** `value` **`in`** `array` | orderBy:`orderexpr` **`track by`** `trackexpr`
	 *        (for including a filter with `track by`)
	 *   * for object data sources:
	 *     * `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
	 *     * `select` **`as`** `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
	 *     * `label` **`group by`** `group` **`for (`**`key`**`,`** `value`**`) in`** `object`
	 *     * `label` **`disable when`** `disable` **`for (`**`key`**`,`** `value`**`) in`** `object`
	 *     * `select` **`as`** `label` **`group by`** `group`
	 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`
	 *     * `select` **`as`** `label` **`disable when`** `disable`
	 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`
	 *
	 * Where:
	 *
	 *   * `array` / `object`: an expression which evaluates to an array / object to iterate over.
	 *   * `value`: local variable which will refer to each item in the `array` or each property value
	 *      of `object` during iteration.
	 *   * `key`: local variable which will refer to a property name in `object` during iteration.
	 *   * `label`: The result of this expression will be the label for `<option>` element. The
	 *     `expression` will most likely refer to the `value` variable (e.g. `value.propertyName`).
	 *   * `select`: The result of this expression will be bound to the model of the parent `<select>`
	 *      element. If not specified, `select` expression will default to `value`.
	 *   * `group`: The result of this expression will be used to group options using the `<optgroup>`
	 *      DOM element.
	 *   * `disable`: The result of this expression will be used to disable the rendered `<option>`
	 *      element. Return `true` to disable.
	 *   * `trackexpr`: Used when working with an array of objects. The result of this expression will be
	 *      used to identify the objects in the array. The `trackexpr` will most likely refer to the
	 *     `value` variable (e.g. `value.propertyName`). With this the selection is preserved
	 *      even when the options are recreated (e.g. reloaded from the server).
	 *
	 * @example
	    <example module="selectExample">
	      <file name="index.html">
	        <script>
	        angular.module('selectExample', [])
	          .controller('ExampleController', ['$scope', function($scope) {
	            $scope.colors = [
	              {name:'black', shade:'dark'},
	              {name:'white', shade:'light', notAnOption: true},
	              {name:'red', shade:'dark'},
	              {name:'blue', shade:'dark', notAnOption: true},
	              {name:'yellow', shade:'light', notAnOption: false}
	            ];
	            $scope.myColor = $scope.colors[2]; // red
	          }]);
	        </script>
	        <div ng-controller="ExampleController">
	          <ul>
	            <li ng-repeat="color in colors">
	              <label>Name: <input ng-model="color.name"></label>
	              <label><input type="checkbox" ng-model="color.notAnOption"> Disabled?</label>
	              <button ng-click="colors.splice($index, 1)" aria-label="Remove">X</button>
	            </li>
	            <li>
	              <button ng-click="colors.push({})">add</button>
	            </li>
	          </ul>
	          <hr/>
	          <label>Color (null not allowed):
	            <select ng-model="myColor" ng-options="color.name for color in colors"></select>
	          </label><br/>
	          <label>Color (null allowed):
	          <span  class="nullable">
	            <select ng-model="myColor" ng-options="color.name for color in colors">
	              <option value="">-- choose color --</option>
	            </select>
	          </span></label><br/>

	          <label>Color grouped by shade:
	            <select ng-model="myColor" ng-options="color.name group by color.shade for color in colors">
	            </select>
	          </label><br/>

	          <label>Color grouped by shade, with some disabled:
	            <select ng-model="myColor"
	                  ng-options="color.name group by color.shade disable when color.notAnOption for color in colors">
	            </select>
	          </label><br/>



	          Select <button ng-click="myColor = { name:'not in list', shade: 'other' }">bogus</button>.
	          <br/>
	          <hr/>
	          Currently selected: {{ {selected_color:myColor} }}
	          <div style="border:solid 1px black; height:20px"
	               ng-style="{'background-color':myColor.name}">
	          </div>
	        </div>
	      </file>
	      <file name="protractor.js" type="protractor">
	         it('should check ng-options', function() {
	           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('red');
	           element.all(by.model('myColor')).first().click();
	           element.all(by.css('select[ng-model="myColor"] option')).first().click();
	           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('black');
	           element(by.css('.nullable select[ng-model="myColor"]')).click();
	           element.all(by.css('.nullable select[ng-model="myColor"] option')).first().click();
	           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('null');
	         });
	      </file>
	    </example>
	 */

	// jshint maxlen: false
	//                     //00001111111111000000000002222222222000000000000000000000333333333300000000000000000000000004444444444400000000000005555555555555550000000006666666666666660000000777777777777777000000000000000888888888800000000000000000009999999999
	var NG_OPTIONS_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/;
	                        // 1: value expression (valueFn)
	                        // 2: label expression (displayFn)
	                        // 3: group by expression (groupByFn)
	                        // 4: disable when expression (disableWhenFn)
	                        // 5: array item variable name
	                        // 6: object item key variable name
	                        // 7: object item value variable name
	                        // 8: collection expression
	                        // 9: track by expression
	// jshint maxlen: 100


	var ngOptionsDirective = ['$compile', '$parse', function($compile, $parse) {

	  function parseOptionsExpression(optionsExp, selectElement, scope) {

	    var match = optionsExp.match(NG_OPTIONS_REGEXP);
	    if (!(match)) {
	      throw ngOptionsMinErr('iexp',
	        "Expected expression in form of " +
	        "'_select_ (as _label_)? for (_key_,)?_value_ in _collection_'" +
	        " but got '{0}'. Element: {1}",
	        optionsExp, startingTag(selectElement));
	    }

	    // Extract the parts from the ngOptions expression

	    // The variable name for the value of the item in the collection
	    var valueName = match[5] || match[7];
	    // The variable name for the key of the item in the collection
	    var keyName = match[6];

	    // An expression that generates the viewValue for an option if there is a label expression
	    var selectAs = / as /.test(match[0]) && match[1];
	    // An expression that is used to track the id of each object in the options collection
	    var trackBy = match[9];
	    // An expression that generates the viewValue for an option if there is no label expression
	    var valueFn = $parse(match[2] ? match[1] : valueName);
	    var selectAsFn = selectAs && $parse(selectAs);
	    var viewValueFn = selectAsFn || valueFn;
	    var trackByFn = trackBy && $parse(trackBy);

	    // Get the value by which we are going to track the option
	    // if we have a trackFn then use that (passing scope and locals)
	    // otherwise just hash the given viewValue
	    var getTrackByValueFn = trackBy ?
	                              function(value, locals) { return trackByFn(scope, locals); } :
	                              function getHashOfValue(value) { return hashKey(value); };
	    var getTrackByValue = function(value, key) {
	      return getTrackByValueFn(value, getLocals(value, key));
	    };

	    var displayFn = $parse(match[2] || match[1]);
	    var groupByFn = $parse(match[3] || '');
	    var disableWhenFn = $parse(match[4] || '');
	    var valuesFn = $parse(match[8]);

	    var locals = {};
	    var getLocals = keyName ? function(value, key) {
	      locals[keyName] = key;
	      locals[valueName] = value;
	      return locals;
	    } : function(value) {
	      locals[valueName] = value;
	      return locals;
	    };


	    function Option(selectValue, viewValue, label, group, disabled) {
	      this.selectValue = selectValue;
	      this.viewValue = viewValue;
	      this.label = label;
	      this.group = group;
	      this.disabled = disabled;
	    }

	    return {
	      trackBy: trackBy,
	      getTrackByValue: getTrackByValue,
	      getWatchables: $parse(valuesFn, function(values) {
	        // Create a collection of things that we would like to watch (watchedArray)
	        // so that they can all be watched using a single $watchCollection
	        // that only runs the handler once if anything changes
	        var watchedArray = [];
	        values = values || [];

	        Object.keys(values).forEach(function getWatchable(key) {
	          var locals = getLocals(values[key], key);
	          var selectValue = getTrackByValueFn(values[key], locals);
	          watchedArray.push(selectValue);

	          // Only need to watch the displayFn if there is a specific label expression
	          if (match[2] || match[1]) {
	            var label = displayFn(scope, locals);
	            watchedArray.push(label);
	          }

	          // Only need to watch the disableWhenFn if there is a specific disable expression
	          if (match[4]) {
	            var disableWhen = disableWhenFn(scope, locals);
	            watchedArray.push(disableWhen);
	          }
	        });
	        return watchedArray;
	      }),

	      getOptions: function() {

	        var optionItems = [];
	        var selectValueMap = {};

	        // The option values were already computed in the `getWatchables` fn,
	        // which must have been called to trigger `getOptions`
	        var optionValues = valuesFn(scope) || [];
	        var optionValuesKeys;


	        if (!keyName && isArrayLike(optionValues)) {
	          optionValuesKeys = optionValues;
	        } else {
	          // if object, extract keys, in enumeration order, unsorted
	          optionValuesKeys = [];
	          for (var itemKey in optionValues) {
	            if (optionValues.hasOwnProperty(itemKey) && itemKey.charAt(0) !== '$') {
	              optionValuesKeys.push(itemKey);
	            }
	          }
	        }

	        var optionValuesLength = optionValuesKeys.length;

	        for (var index = 0; index < optionValuesLength; index++) {
	          var key = (optionValues === optionValuesKeys) ? index : optionValuesKeys[index];
	          var value = optionValues[key];
	          var locals = getLocals(value, key);
	          var viewValue = viewValueFn(scope, locals);
	          var selectValue = getTrackByValueFn(viewValue, locals);
	          var label = displayFn(scope, locals);
	          var group = groupByFn(scope, locals);
	          var disabled = disableWhenFn(scope, locals);
	          var optionItem = new Option(selectValue, viewValue, label, group, disabled);

	          optionItems.push(optionItem);
	          selectValueMap[selectValue] = optionItem;
	        }

	        return {
	          items: optionItems,
	          selectValueMap: selectValueMap,
	          getOptionFromViewValue: function(value) {
	            return selectValueMap[getTrackByValue(value)];
	          },
	          getViewValueFromOption: function(option) {
	            // If the viewValue could be an object that may be mutated by the application,
	            // we need to make a copy and not return the reference to the value on the option.
	            return trackBy ? angular.copy(option.viewValue) : option.viewValue;
	          }
	        };
	      }
	    };
	  }


	  // we can't just jqLite('<option>') since jqLite is not smart enough
	  // to create it in <select> and IE barfs otherwise.
	  var optionTemplate = document.createElement('option'),
	      optGroupTemplate = document.createElement('optgroup');

	  return {
	    restrict: 'A',
	    terminal: true,
	    require: ['select', '?ngModel'],
	    link: function(scope, selectElement, attr, ctrls) {

	      // if ngModel is not defined, we don't need to do anything
	      var ngModelCtrl = ctrls[1];
	      if (!ngModelCtrl) return;

	      var selectCtrl = ctrls[0];
	      var multiple = attr.multiple;

	      // The emptyOption allows the application developer to provide their own custom "empty"
	      // option when the viewValue does not match any of the option values.
	      var emptyOption;
	      for (var i = 0, children = selectElement.children(), ii = children.length; i < ii; i++) {
	        if (children[i].value === '') {
	          emptyOption = children.eq(i);
	          break;
	        }
	      }

	      var providedEmptyOption = !!emptyOption;

	      var unknownOption = jqLite(optionTemplate.cloneNode(false));
	      unknownOption.val('?');

	      var options;
	      var ngOptions = parseOptionsExpression(attr.ngOptions, selectElement, scope);


	      var renderEmptyOption = function() {
	        if (!providedEmptyOption) {
	          selectElement.prepend(emptyOption);
	        }
	        selectElement.val('');
	        emptyOption.prop('selected', true); // needed for IE
	        emptyOption.attr('selected', true);
	      };

	      var removeEmptyOption = function() {
	        if (!providedEmptyOption) {
	          emptyOption.remove();
	        }
	      };


	      var renderUnknownOption = function() {
	        selectElement.prepend(unknownOption);
	        selectElement.val('?');
	        unknownOption.prop('selected', true); // needed for IE
	        unknownOption.attr('selected', true);
	      };

	      var removeUnknownOption = function() {
	        unknownOption.remove();
	      };


	      // Update the controller methods for multiple selectable options
	      if (!multiple) {

	        selectCtrl.writeValue = function writeNgOptionsValue(value) {
	          var option = options.getOptionFromViewValue(value);

	          if (option && !option.disabled) {
	            if (selectElement[0].value !== option.selectValue) {
	              removeUnknownOption();
	              removeEmptyOption();

	              selectElement[0].value = option.selectValue;
	              option.element.selected = true;
	              option.element.setAttribute('selected', 'selected');
	            }
	          } else {
	            if (value === null || providedEmptyOption) {
	              removeUnknownOption();
	              renderEmptyOption();
	            } else {
	              removeEmptyOption();
	              renderUnknownOption();
	            }
	          }
	        };

	        selectCtrl.readValue = function readNgOptionsValue() {

	          var selectedOption = options.selectValueMap[selectElement.val()];

	          if (selectedOption && !selectedOption.disabled) {
	            removeEmptyOption();
	            removeUnknownOption();
	            return options.getViewValueFromOption(selectedOption);
	          }
	          return null;
	        };

	        // If we are using `track by` then we must watch the tracked value on the model
	        // since ngModel only watches for object identity change
	        if (ngOptions.trackBy) {
	          scope.$watch(
	            function() { return ngOptions.getTrackByValue(ngModelCtrl.$viewValue); },
	            function() { ngModelCtrl.$render(); }
	          );
	        }

	      } else {

	        ngModelCtrl.$isEmpty = function(value) {
	          return !value || value.length === 0;
	        };


	        selectCtrl.writeValue = function writeNgOptionsMultiple(value) {
	          options.items.forEach(function(option) {
	            option.element.selected = false;
	          });

	          if (value) {
	            value.forEach(function(item) {
	              var option = options.getOptionFromViewValue(item);
	              if (option && !option.disabled) option.element.selected = true;
	            });
	          }
	        };


	        selectCtrl.readValue = function readNgOptionsMultiple() {
	          var selectedValues = selectElement.val() || [],
	              selections = [];

	          forEach(selectedValues, function(value) {
	            var option = options.selectValueMap[value];
	            if (!option.disabled) selections.push(options.getViewValueFromOption(option));
	          });

	          return selections;
	        };

	        // If we are using `track by` then we must watch these tracked values on the model
	        // since ngModel only watches for object identity change
	        if (ngOptions.trackBy) {

	          scope.$watchCollection(function() {
	            if (isArray(ngModelCtrl.$viewValue)) {
	              return ngModelCtrl.$viewValue.map(function(value) {
	                return ngOptions.getTrackByValue(value);
	              });
	            }
	          }, function() {
	            ngModelCtrl.$render();
	          });

	        }
	      }


	      if (providedEmptyOption) {

	        // we need to remove it before calling selectElement.empty() because otherwise IE will
	        // remove the label from the element. wtf?
	        emptyOption.remove();

	        // compile the element since there might be bindings in it
	        $compile(emptyOption)(scope);

	        // remove the class, which is added automatically because we recompile the element and it
	        // becomes the compilation root
	        emptyOption.removeClass('ng-scope');
	      } else {
	        emptyOption = jqLite(optionTemplate.cloneNode(false));
	      }

	      // We need to do this here to ensure that the options object is defined
	      // when we first hit it in writeNgOptionsValue
	      updateOptions();

	      // We will re-render the option elements if the option values or labels change
	      scope.$watchCollection(ngOptions.getWatchables, updateOptions);

	      // ------------------------------------------------------------------ //


	      function updateOptionElement(option, element) {
	        option.element = element;
	        element.disabled = option.disabled;
	        if (option.value !== element.value) element.value = option.selectValue;
	        if (option.label !== element.label) {
	          element.label = option.label;
	          element.textContent = option.label;
	        }
	      }

	      function addOrReuseElement(parent, current, type, templateElement) {
	        var element;
	        // Check whether we can reuse the next element
	        if (current && lowercase(current.nodeName) === type) {
	          // The next element is the right type so reuse it
	          element = current;
	        } else {
	          // The next element is not the right type so create a new one
	          element = templateElement.cloneNode(false);
	          if (!current) {
	            // There are no more elements so just append it to the select
	            parent.appendChild(element);
	          } else {
	            // The next element is not a group so insert the new one
	            parent.insertBefore(element, current);
	          }
	        }
	        return element;
	      }


	      function removeExcessElements(current) {
	        var next;
	        while (current) {
	          next = current.nextSibling;
	          jqLiteRemove(current);
	          current = next;
	        }
	      }


	      function skipEmptyAndUnknownOptions(current) {
	        var emptyOption_ = emptyOption && emptyOption[0];
	        var unknownOption_ = unknownOption && unknownOption[0];

	        if (emptyOption_ || unknownOption_) {
	          while (current &&
	                (current === emptyOption_ ||
	                current === unknownOption_)) {
	            current = current.nextSibling;
	          }
	        }
	        return current;
	      }


	      function updateOptions() {

	        var previousValue = options && selectCtrl.readValue();

	        options = ngOptions.getOptions();

	        var groupMap = {};
	        var currentElement = selectElement[0].firstChild;

	        // Ensure that the empty option is always there if it was explicitly provided
	        if (providedEmptyOption) {
	          selectElement.prepend(emptyOption);
	        }

	        currentElement = skipEmptyAndUnknownOptions(currentElement);

	        options.items.forEach(function updateOption(option) {
	          var group;
	          var groupElement;
	          var optionElement;

	          if (option.group) {

	            // This option is to live in a group
	            // See if we have already created this group
	            group = groupMap[option.group];

	            if (!group) {

	              // We have not already created this group
	              groupElement = addOrReuseElement(selectElement[0],
	                                               currentElement,
	                                               'optgroup',
	                                               optGroupTemplate);
	              // Move to the next element
	              currentElement = groupElement.nextSibling;

	              // Update the label on the group element
	              groupElement.label = option.group;

	              // Store it for use later
	              group = groupMap[option.group] = {
	                groupElement: groupElement,
	                currentOptionElement: groupElement.firstChild
	              };

	            }

	            // So now we have a group for this option we add the option to the group
	            optionElement = addOrReuseElement(group.groupElement,
	                                              group.currentOptionElement,
	                                              'option',
	                                              optionTemplate);
	            updateOptionElement(option, optionElement);
	            // Move to the next element
	            group.currentOptionElement = optionElement.nextSibling;

	          } else {

	            // This option is not in a group
	            optionElement = addOrReuseElement(selectElement[0],
	                                              currentElement,
	                                              'option',
	                                              optionTemplate);
	            updateOptionElement(option, optionElement);
	            // Move to the next element
	            currentElement = optionElement.nextSibling;
	          }
	        });


	        // Now remove all excess options and group
	        Object.keys(groupMap).forEach(function(key) {
	          removeExcessElements(groupMap[key].currentOptionElement);
	        });
	        removeExcessElements(currentElement);

	        ngModelCtrl.$render();

	        // Check to see if the value has changed due to the update to the options
	        if (!ngModelCtrl.$isEmpty(previousValue)) {
	          var nextValue = selectCtrl.readValue();
	          if (ngOptions.trackBy && !equals(previousValue, nextValue) ||
	                previousValue !== nextValue) {
	            ngModelCtrl.$setViewValue(nextValue);
	            ngModelCtrl.$render();
	          }
	        }

	      }

	    }
	  };
	}];

	/**
	 * @ngdoc directive
	 * @name ngPluralize
	 * @restrict EA
	 *
	 * @description
	 * `ngPluralize` is a directive that displays messages according to en-US localization rules.
	 * These rules are bundled with angular.js, but can be overridden
	 * (see {@link guide/i18n Angular i18n} dev guide). You configure ngPluralize directive
	 * by specifying the mappings between
	 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
	 * and the strings to be displayed.
	 *
	 * # Plural categories and explicit number rules
	 * There are two
	 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
	 * in Angular's default en-US locale: "one" and "other".
	 *
	 * While a plural category may match many numbers (for example, in en-US locale, "other" can match
	 * any number that is not 1), an explicit number rule can only match one number. For example, the
	 * explicit number rule for "3" matches the number 3. There are examples of plural categories
	 * and explicit number rules throughout the rest of this documentation.
	 *
	 * # Configuring ngPluralize
	 * You configure ngPluralize by providing 2 attributes: `count` and `when`.
	 * You can also provide an optional attribute, `offset`.
	 *
	 * The value of the `count` attribute can be either a string or an {@link guide/expression
	 * Angular expression}; these are evaluated on the current scope for its bound value.
	 *
	 * The `when` attribute specifies the mappings between plural categories and the actual
	 * string to be displayed. The value of the attribute should be a JSON object.
	 *
	 * The following example shows how to configure ngPluralize:
	 *
	 * ```html
	 * <ng-pluralize count="personCount"
	                 when="{'0': 'Nobody is viewing.',
	 *                      'one': '1 person is viewing.',
	 *                      'other': '{} people are viewing.'}">
	 * </ng-pluralize>
	 *```
	 *
	 * In the example, `"0: Nobody is viewing."` is an explicit number rule. If you did not
	 * specify this rule, 0 would be matched to the "other" category and "0 people are viewing"
	 * would be shown instead of "Nobody is viewing". You can specify an explicit number rule for
	 * other numbers, for example 12, so that instead of showing "12 people are viewing", you can
	 * show "a dozen people are viewing".
	 *
	 * You can use a set of closed braces (`{}`) as a placeholder for the number that you want substituted
	 * into pluralized strings. In the previous example, Angular will replace `{}` with
	 * <span ng-non-bindable>`{{personCount}}`</span>. The closed braces `{}` is a placeholder
	 * for <span ng-non-bindable>{{numberExpression}}</span>.
	 *
	 * If no rule is defined for a category, then an empty string is displayed and a warning is generated.
	 * Note that some locales define more categories than `one` and `other`. For example, fr-fr defines `few` and `many`.
	 *
	 * # Configuring ngPluralize with offset
	 * The `offset` attribute allows further customization of pluralized text, which can result in
	 * a better user experience. For example, instead of the message "4 people are viewing this document",
	 * you might display "John, Kate and 2 others are viewing this document".
	 * The offset attribute allows you to offset a number by any desired value.
	 * Let's take a look at an example:
	 *
	 * ```html
	 * <ng-pluralize count="personCount" offset=2
	 *               when="{'0': 'Nobody is viewing.',
	 *                      '1': '{{person1}} is viewing.',
	 *                      '2': '{{person1}} and {{person2}} are viewing.',
	 *                      'one': '{{person1}}, {{person2}} and one other person are viewing.',
	 *                      'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
	 * </ng-pluralize>
	 * ```
	 *
	 * Notice that we are still using two plural categories(one, other), but we added
	 * three explicit number rules 0, 1 and 2.
	 * When one person, perhaps John, views the document, "John is viewing" will be shown.
	 * When three people view the document, no explicit number rule is found, so
	 * an offset of 2 is taken off 3, and Angular uses 1 to decide the plural category.
	 * In this case, plural category 'one' is matched and "John, Mary and one other person are viewing"
	 * is shown.
	 *
	 * Note that when you specify offsets, you must provide explicit number rules for
	 * numbers from 0 up to and including the offset. If you use an offset of 3, for example,
	 * you must provide explicit number rules for 0, 1, 2 and 3. You must also provide plural strings for
	 * plural categories "one" and "other".
	 *
	 * @param {string|expression} count The variable to be bound to.
	 * @param {string} when The mapping between plural category to its corresponding strings.
	 * @param {number=} offset Offset to deduct from the total number.
	 *
	 * @example
	    <example module="pluralizeExample">
	      <file name="index.html">
	        <script>
	          angular.module('pluralizeExample', [])
	            .controller('ExampleController', ['$scope', function($scope) {
	              $scope.person1 = 'Igor';
	              $scope.person2 = 'Misko';
	              $scope.personCount = 1;
	            }]);
	        </script>
	        <div ng-controller="ExampleController">
	          <label>Person 1:<input type="text" ng-model="person1" value="Igor" /></label><br/>
	          <label>Person 2:<input type="text" ng-model="person2" value="Misko" /></label><br/>
	          <label>Number of People:<input type="text" ng-model="personCount" value="1" /></label><br/>

	          <!--- Example with simple pluralization rules for en locale --->
	          Without Offset:
	          <ng-pluralize count="personCount"
	                        when="{'0': 'Nobody is viewing.',
	                               'one': '1 person is viewing.',
	                               'other': '{} people are viewing.'}">
	          </ng-pluralize><br>

	          <!--- Example with offset --->
	          With Offset(2):
	          <ng-pluralize count="personCount" offset=2
	                        when="{'0': 'Nobody is viewing.',
	                               '1': '{{person1}} is viewing.',
	                               '2': '{{person1}} and {{person2}} are viewing.',
	                               'one': '{{person1}}, {{person2}} and one other person are viewing.',
	                               'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
	          </ng-pluralize>
	        </div>
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should show correct pluralized string', function() {
	          var withoutOffset = element.all(by.css('ng-pluralize')).get(0);
	          var withOffset = element.all(by.css('ng-pluralize')).get(1);
	          var countInput = element(by.model('personCount'));

	          expect(withoutOffset.getText()).toEqual('1 person is viewing.');
	          expect(withOffset.getText()).toEqual('Igor is viewing.');

	          countInput.clear();
	          countInput.sendKeys('0');

	          expect(withoutOffset.getText()).toEqual('Nobody is viewing.');
	          expect(withOffset.getText()).toEqual('Nobody is viewing.');

	          countInput.clear();
	          countInput.sendKeys('2');

	          expect(withoutOffset.getText()).toEqual('2 people are viewing.');
	          expect(withOffset.getText()).toEqual('Igor and Misko are viewing.');

	          countInput.clear();
	          countInput.sendKeys('3');

	          expect(withoutOffset.getText()).toEqual('3 people are viewing.');
	          expect(withOffset.getText()).toEqual('Igor, Misko and one other person are viewing.');

	          countInput.clear();
	          countInput.sendKeys('4');

	          expect(withoutOffset.getText()).toEqual('4 people are viewing.');
	          expect(withOffset.getText()).toEqual('Igor, Misko and 2 other people are viewing.');
	        });
	        it('should show data-bound names', function() {
	          var withOffset = element.all(by.css('ng-pluralize')).get(1);
	          var personCount = element(by.model('personCount'));
	          var person1 = element(by.model('person1'));
	          var person2 = element(by.model('person2'));
	          personCount.clear();
	          personCount.sendKeys('4');
	          person1.clear();
	          person1.sendKeys('Di');
	          person2.clear();
	          person2.sendKeys('Vojta');
	          expect(withOffset.getText()).toEqual('Di, Vojta and 2 other people are viewing.');
	        });
	      </file>
	    </example>
	 */
	var ngPluralizeDirective = ['$locale', '$interpolate', '$log', function($locale, $interpolate, $log) {
	  var BRACE = /{}/g,
	      IS_WHEN = /^when(Minus)?(.+)$/;

	  return {
	    link: function(scope, element, attr) {
	      var numberExp = attr.count,
	          whenExp = attr.$attr.when && element.attr(attr.$attr.when), // we have {{}} in attrs
	          offset = attr.offset || 0,
	          whens = scope.$eval(whenExp) || {},
	          whensExpFns = {},
	          startSymbol = $interpolate.startSymbol(),
	          endSymbol = $interpolate.endSymbol(),
	          braceReplacement = startSymbol + numberExp + '-' + offset + endSymbol,
	          watchRemover = angular.noop,
	          lastCount;

	      forEach(attr, function(expression, attributeName) {
	        var tmpMatch = IS_WHEN.exec(attributeName);
	        if (tmpMatch) {
	          var whenKey = (tmpMatch[1] ? '-' : '') + lowercase(tmpMatch[2]);
	          whens[whenKey] = element.attr(attr.$attr[attributeName]);
	        }
	      });
	      forEach(whens, function(expression, key) {
	        whensExpFns[key] = $interpolate(expression.replace(BRACE, braceReplacement));

	      });

	      scope.$watch(numberExp, function ngPluralizeWatchAction(newVal) {
	        var count = parseFloat(newVal);
	        var countIsNaN = isNaN(count);

	        if (!countIsNaN && !(count in whens)) {
	          // If an explicit number rule such as 1, 2, 3... is defined, just use it.
	          // Otherwise, check it against pluralization rules in $locale service.
	          count = $locale.pluralCat(count - offset);
	        }

	        // If both `count` and `lastCount` are NaN, we don't need to re-register a watch.
	        // In JS `NaN !== NaN`, so we have to exlicitly check.
	        if ((count !== lastCount) && !(countIsNaN && isNumber(lastCount) && isNaN(lastCount))) {
	          watchRemover();
	          var whenExpFn = whensExpFns[count];
	          if (isUndefined(whenExpFn)) {
	            if (newVal != null) {
	              $log.debug("ngPluralize: no rule defined for '" + count + "' in " + whenExp);
	            }
	            watchRemover = noop;
	            updateElementText();
	          } else {
	            watchRemover = scope.$watch(whenExpFn, updateElementText);
	          }
	          lastCount = count;
	        }
	      });

	      function updateElementText(newText) {
	        element.text(newText || '');
	      }
	    }
	  };
	}];

	/**
	 * @ngdoc directive
	 * @name ngRepeat
	 *
	 * @description
	 * The `ngRepeat` directive instantiates a template once per item from a collection. Each template
	 * instance gets its own scope, where the given loop variable is set to the current collection item,
	 * and `$index` is set to the item index or key.
	 *
	 * Special properties are exposed on the local scope of each template instance, including:
	 *
	 * | Variable  | Type            | Details                                                                     |
	 * |-----------|-----------------|-----------------------------------------------------------------------------|
	 * | `$index`  | {@type number}  | iterator offset of the repeated element (0..length-1)                       |
	 * | `$first`  | {@type boolean} | true if the repeated element is first in the iterator.                      |
	 * | `$middle` | {@type boolean} | true if the repeated element is between the first and last in the iterator. |
	 * | `$last`   | {@type boolean} | true if the repeated element is last in the iterator.                       |
	 * | `$even`   | {@type boolean} | true if the iterator position `$index` is even (otherwise false).           |
	 * | `$odd`    | {@type boolean} | true if the iterator position `$index` is odd (otherwise false).            |
	 *
	 * Creating aliases for these properties is possible with {@link ng.directive:ngInit `ngInit`}.
	 * This may be useful when, for instance, nesting ngRepeats.
	 *
	 *
	 * # Iterating over object properties
	 *
	 * It is possible to get `ngRepeat` to iterate over the properties of an object using the following
	 * syntax:
	 *
	 * ```js
	 * <div ng-repeat="(key, value) in myObj"> ... </div>
	 * ```
	 *
	 * You need to be aware that the JavaScript specification does not define the order of keys
	 * returned for an object. (To mitigate this in Angular 1.3 the `ngRepeat` directive
	 * used to sort the keys alphabetically.)
	 *
	 * Version 1.4 removed the alphabetic sorting. We now rely on the order returned by the browser
	 * when running `for key in myObj`. It seems that browsers generally follow the strategy of providing
	 * keys in the order in which they were defined, although there are exceptions when keys are deleted
	 * and reinstated. See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete#Cross-browser_issues
	 *
	 * If this is not desired, the recommended workaround is to convert your object into an array
	 * that is sorted into the order that you prefer before providing it to `ngRepeat`.  You could
	 * do this with a filter such as [toArrayFilter](http://ngmodules.org/modules/angular-toArrayFilter)
	 * or implement a `$watch` on the object yourself.
	 *
	 *
	 * # Tracking and Duplicates
	 *
	 * When the contents of the collection change, `ngRepeat` makes the corresponding changes to the DOM:
	 *
	 * * When an item is added, a new instance of the template is added to the DOM.
	 * * When an item is removed, its template instance is removed from the DOM.
	 * * When items are reordered, their respective templates are reordered in the DOM.
	 *
	 * By default, `ngRepeat` does not allow duplicate items in arrays. This is because when
	 * there are duplicates, it is not possible to maintain a one-to-one mapping between collection
	 * items and DOM elements.
	 *
	 * If you do need to repeat duplicate items, you can substitute the default tracking behavior
	 * with your own using the `track by` expression.
	 *
	 * For example, you may track items by the index of each item in the collection, using the
	 * special scope property `$index`:
	 * ```html
	 *    <div ng-repeat="n in [42, 42, 43, 43] track by $index">
	 *      {{n}}
	 *    </div>
	 * ```
	 *
	 * You may use arbitrary expressions in `track by`, including references to custom functions
	 * on the scope:
	 * ```html
	 *    <div ng-repeat="n in [42, 42, 43, 43] track by myTrackingFunction(n)">
	 *      {{n}}
	 *    </div>
	 * ```
	 *
	 * If you are working with objects that have an identifier property, you can track
	 * by the identifier instead of the whole object. Should you reload your data later, `ngRepeat`
	 * will not have to rebuild the DOM elements for items it has already rendered, even if the
	 * JavaScript objects in the collection have been substituted for new ones:
	 * ```html
	 *    <div ng-repeat="model in collection track by model.id">
	 *      {{model.name}}
	 *    </div>
	 * ```
	 *
	 * When no `track by` expression is provided, it is equivalent to tracking by the built-in
	 * `$id` function, which tracks items by their identity:
	 * ```html
	 *    <div ng-repeat="obj in collection track by $id(obj)">
	 *      {{obj.prop}}
	 *    </div>
	 * ```
	 *
	 * # Special repeat start and end points
	 * To repeat a series of elements instead of just one parent element, ngRepeat (as well as other ng directives) supports extending
	 * the range of the repeater by defining explicit start and end points by using **ng-repeat-start** and **ng-repeat-end** respectively.
	 * The **ng-repeat-start** directive works the same as **ng-repeat**, but will repeat all the HTML code (including the tag it's defined on)
	 * up to and including the ending HTML tag where **ng-repeat-end** is placed.
	 *
	 * The example below makes use of this feature:
	 * ```html
	 *   <header ng-repeat-start="item in items">
	 *     Header {{ item }}
	 *   </header>
	 *   <div class="body">
	 *     Body {{ item }}
	 *   </div>
	 *   <footer ng-repeat-end>
	 *     Footer {{ item }}
	 *   </footer>
	 * ```
	 *
	 * And with an input of {@type ['A','B']} for the items variable in the example above, the output will evaluate to:
	 * ```html
	 *   <header>
	 *     Header A
	 *   </header>
	 *   <div class="body">
	 *     Body A
	 *   </div>
	 *   <footer>
	 *     Footer A
	 *   </footer>
	 *   <header>
	 *     Header B
	 *   </header>
	 *   <div class="body">
	 *     Body B
	 *   </div>
	 *   <footer>
	 *     Footer B
	 *   </footer>
	 * ```
	 *
	 * The custom start and end points for ngRepeat also support all other HTML directive syntax flavors provided in AngularJS (such
	 * as **data-ng-repeat-start**, **x-ng-repeat-start** and **ng:repeat-start**).
	 *
	 * @animations
	 * **.enter** - when a new item is added to the list or when an item is revealed after a filter
	 *
	 * **.leave** - when an item is removed from the list or when an item is filtered out
	 *
	 * **.move** - when an adjacent item is filtered out causing a reorder or when the item contents are reordered
	 *
	 * @element ANY
	 * @scope
	 * @priority 1000
	 * @param {repeat_expression} ngRepeat The expression indicating how to enumerate a collection. These
	 *   formats are currently supported:
	 *
	 *   * `variable in expression` – where variable is the user defined loop variable and `expression`
	 *     is a scope expression giving the collection to enumerate.
	 *
	 *     For example: `album in artist.albums`.
	 *
	 *   * `(key, value) in expression` – where `key` and `value` can be any user defined identifiers,
	 *     and `expression` is the scope expression giving the collection to enumerate.
	 *
	 *     For example: `(name, age) in {'adam':10, 'amalie':12}`.
	 *
	 *   * `variable in expression track by tracking_expression` – You can also provide an optional tracking expression
	 *     which can be used to associate the objects in the collection with the DOM elements. If no tracking expression
	 *     is specified, ng-repeat associates elements by identity. It is an error to have
	 *     more than one tracking expression value resolve to the same key. (This would mean that two distinct objects are
	 *     mapped to the same DOM element, which is not possible.)  If filters are used in the expression, they should be
	 *     applied before the tracking expression.
	 *
	 *     For example: `item in items` is equivalent to `item in items track by $id(item)`. This implies that the DOM elements
	 *     will be associated by item identity in the array.
	 *
	 *     For example: `item in items track by $id(item)`. A built in `$id()` function can be used to assign a unique
	 *     `$$hashKey` property to each item in the array. This property is then used as a key to associated DOM elements
	 *     with the corresponding item in the array by identity. Moving the same object in array would move the DOM
	 *     element in the same way in the DOM.
	 *
	 *     For example: `item in items track by item.id` is a typical pattern when the items come from the database. In this
	 *     case the object identity does not matter. Two objects are considered equivalent as long as their `id`
	 *     property is same.
	 *
	 *     For example: `item in items | filter:searchText track by item.id` is a pattern that might be used to apply a filter
	 *     to items in conjunction with a tracking expression.
	 *
	 *   * `variable in expression as alias_expression` – You can also provide an optional alias expression which will then store the
	 *     intermediate results of the repeater after the filters have been applied. Typically this is used to render a special message
	 *     when a filter is active on the repeater, but the filtered result set is empty.
	 *
	 *     For example: `item in items | filter:x as results` will store the fragment of the repeated items as `results`, but only after
	 *     the items have been processed through the filter.
	 *
	 *     Please note that `as [variable name] is not an operator but rather a part of ngRepeat micro-syntax so it can be used only at the end
	 *     (and not as operator, inside an expression).
	 *
	 *     For example: `item in items | filter : x | orderBy : order | limitTo : limit as results` .
	 *
	 * @example
	 * This example initializes the scope to a list of names and
	 * then uses `ngRepeat` to display every person:
	  <example module="ngAnimate" deps="angular-animate.js" animations="true">
	    <file name="index.html">
	      <div ng-init="friends = [
	        {name:'John', age:25, gender:'boy'},
	        {name:'Jessie', age:30, gender:'girl'},
	        {name:'Johanna', age:28, gender:'girl'},
	        {name:'Joy', age:15, gender:'girl'},
	        {name:'Mary', age:28, gender:'girl'},
	        {name:'Peter', age:95, gender:'boy'},
	        {name:'Sebastian', age:50, gender:'boy'},
	        {name:'Erika', age:27, gender:'girl'},
	        {name:'Patrick', age:40, gender:'boy'},
	        {name:'Samantha', age:60, gender:'girl'}
	      ]">
	        I have {{friends.length}} friends. They are:
	        <input type="search" ng-model="q" placeholder="filter friends..." aria-label="filter friends" />
	        <ul class="example-animate-container">
	          <li class="animate-repeat" ng-repeat="friend in friends | filter:q as results">
	            [{{$index + 1}}] {{friend.name}} who is {{friend.age}} years old.
	          </li>
	          <li class="animate-repeat" ng-if="results.length == 0">
	            <strong>No results found...</strong>
	          </li>
	        </ul>
	      </div>
	    </file>
	    <file name="animations.css">
	      .example-animate-container {
	        background:white;
	        border:1px solid black;
	        list-style:none;
	        margin:0;
	        padding:0 10px;
	      }

	      .animate-repeat {
	        line-height:40px;
	        list-style:none;
	        box-sizing:border-box;
	      }

	      .animate-repeat.ng-move,
	      .animate-repeat.ng-enter,
	      .animate-repeat.ng-leave {
	        -webkit-transition:all linear 0.5s;
	        transition:all linear 0.5s;
	      }

	      .animate-repeat.ng-leave.ng-leave-active,
	      .animate-repeat.ng-move,
	      .animate-repeat.ng-enter {
	        opacity:0;
	        max-height:0;
	      }

	      .animate-repeat.ng-leave,
	      .animate-repeat.ng-move.ng-move-active,
	      .animate-repeat.ng-enter.ng-enter-active {
	        opacity:1;
	        max-height:40px;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var friends = element.all(by.repeater('friend in friends'));

	      it('should render initial data set', function() {
	        expect(friends.count()).toBe(10);
	        expect(friends.get(0).getText()).toEqual('[1] John who is 25 years old.');
	        expect(friends.get(1).getText()).toEqual('[2] Jessie who is 30 years old.');
	        expect(friends.last().getText()).toEqual('[10] Samantha who is 60 years old.');
	        expect(element(by.binding('friends.length')).getText())
	            .toMatch("I have 10 friends. They are:");
	      });

	       it('should update repeater when filter predicate changes', function() {
	         expect(friends.count()).toBe(10);

	         element(by.model('q')).sendKeys('ma');

	         expect(friends.count()).toBe(2);
	         expect(friends.get(0).getText()).toEqual('[1] Mary who is 28 years old.');
	         expect(friends.last().getText()).toEqual('[2] Samantha who is 60 years old.');
	       });
	      </file>
	    </example>
	 */
	var ngRepeatDirective = ['$parse', '$animate', function($parse, $animate) {
	  var NG_REMOVED = '$$NG_REMOVED';
	  var ngRepeatMinErr = minErr('ngRepeat');

	  var updateScope = function(scope, index, valueIdentifier, value, keyIdentifier, key, arrayLength) {
	    // TODO(perf): generate setters to shave off ~40ms or 1-1.5%
	    scope[valueIdentifier] = value;
	    if (keyIdentifier) scope[keyIdentifier] = key;
	    scope.$index = index;
	    scope.$first = (index === 0);
	    scope.$last = (index === (arrayLength - 1));
	    scope.$middle = !(scope.$first || scope.$last);
	    // jshint bitwise: false
	    scope.$odd = !(scope.$even = (index&1) === 0);
	    // jshint bitwise: true
	  };

	  var getBlockStart = function(block) {
	    return block.clone[0];
	  };

	  var getBlockEnd = function(block) {
	    return block.clone[block.clone.length - 1];
	  };


	  return {
	    restrict: 'A',
	    multiElement: true,
	    transclude: 'element',
	    priority: 1000,
	    terminal: true,
	    $$tlb: true,
	    compile: function ngRepeatCompile($element, $attr) {
	      var expression = $attr.ngRepeat;
	      var ngRepeatEndComment = document.createComment(' end ngRepeat: ' + expression + ' ');

	      var match = expression.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);

	      if (!match) {
	        throw ngRepeatMinErr('iexp', "Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",
	            expression);
	      }

	      var lhs = match[1];
	      var rhs = match[2];
	      var aliasAs = match[3];
	      var trackByExp = match[4];

	      match = lhs.match(/^(?:(\s*[\$\w]+)|\(\s*([\$\w]+)\s*,\s*([\$\w]+)\s*\))$/);

	      if (!match) {
	        throw ngRepeatMinErr('iidexp', "'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.",
	            lhs);
	      }
	      var valueIdentifier = match[3] || match[1];
	      var keyIdentifier = match[2];

	      if (aliasAs && (!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(aliasAs) ||
	          /^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(aliasAs))) {
	        throw ngRepeatMinErr('badident', "alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.",
	          aliasAs);
	      }

	      var trackByExpGetter, trackByIdExpFn, trackByIdArrayFn, trackByIdObjFn;
	      var hashFnLocals = {$id: hashKey};

	      if (trackByExp) {
	        trackByExpGetter = $parse(trackByExp);
	      } else {
	        trackByIdArrayFn = function(key, value) {
	          return hashKey(value);
	        };
	        trackByIdObjFn = function(key) {
	          return key;
	        };
	      }

	      return function ngRepeatLink($scope, $element, $attr, ctrl, $transclude) {

	        if (trackByExpGetter) {
	          trackByIdExpFn = function(key, value, index) {
	            // assign key, value, and $index to the locals so that they can be used in hash functions
	            if (keyIdentifier) hashFnLocals[keyIdentifier] = key;
	            hashFnLocals[valueIdentifier] = value;
	            hashFnLocals.$index = index;
	            return trackByExpGetter($scope, hashFnLocals);
	          };
	        }

	        // Store a list of elements from previous run. This is a hash where key is the item from the
	        // iterator, and the value is objects with following properties.
	        //   - scope: bound scope
	        //   - element: previous element.
	        //   - index: position
	        //
	        // We are using no-proto object so that we don't need to guard against inherited props via
	        // hasOwnProperty.
	        var lastBlockMap = createMap();

	        //watch props
	        $scope.$watchCollection(rhs, function ngRepeatAction(collection) {
	          var index, length,
	              previousNode = $element[0],     // node that cloned nodes should be inserted after
	                                              // initialized to the comment node anchor
	              nextNode,
	              // Same as lastBlockMap but it has the current state. It will become the
	              // lastBlockMap on the next iteration.
	              nextBlockMap = createMap(),
	              collectionLength,
	              key, value, // key/value of iteration
	              trackById,
	              trackByIdFn,
	              collectionKeys,
	              block,       // last object information {scope, element, id}
	              nextBlockOrder,
	              elementsToRemove;

	          if (aliasAs) {
	            $scope[aliasAs] = collection;
	          }

	          if (isArrayLike(collection)) {
	            collectionKeys = collection;
	            trackByIdFn = trackByIdExpFn || trackByIdArrayFn;
	          } else {
	            trackByIdFn = trackByIdExpFn || trackByIdObjFn;
	            // if object, extract keys, in enumeration order, unsorted
	            collectionKeys = [];
	            for (var itemKey in collection) {
	              if (collection.hasOwnProperty(itemKey) && itemKey.charAt(0) !== '$') {
	                collectionKeys.push(itemKey);
	              }
	            }
	          }

	          collectionLength = collectionKeys.length;
	          nextBlockOrder = new Array(collectionLength);

	          // locate existing items
	          for (index = 0; index < collectionLength; index++) {
	            key = (collection === collectionKeys) ? index : collectionKeys[index];
	            value = collection[key];
	            trackById = trackByIdFn(key, value, index);
	            if (lastBlockMap[trackById]) {
	              // found previously seen block
	              block = lastBlockMap[trackById];
	              delete lastBlockMap[trackById];
	              nextBlockMap[trackById] = block;
	              nextBlockOrder[index] = block;
	            } else if (nextBlockMap[trackById]) {
	              // if collision detected. restore lastBlockMap and throw an error
	              forEach(nextBlockOrder, function(block) {
	                if (block && block.scope) lastBlockMap[block.id] = block;
	              });
	              throw ngRepeatMinErr('dupes',
	                  "Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}",
	                  expression, trackById, value);
	            } else {
	              // new never before seen block
	              nextBlockOrder[index] = {id: trackById, scope: undefined, clone: undefined};
	              nextBlockMap[trackById] = true;
	            }
	          }

	          // remove leftover items
	          for (var blockKey in lastBlockMap) {
	            block = lastBlockMap[blockKey];
	            elementsToRemove = getBlockNodes(block.clone);
	            $animate.leave(elementsToRemove);
	            if (elementsToRemove[0].parentNode) {
	              // if the element was not removed yet because of pending animation, mark it as deleted
	              // so that we can ignore it later
	              for (index = 0, length = elementsToRemove.length; index < length; index++) {
	                elementsToRemove[index][NG_REMOVED] = true;
	              }
	            }
	            block.scope.$destroy();
	          }

	          // we are not using forEach for perf reasons (trying to avoid #call)
	          for (index = 0; index < collectionLength; index++) {
	            key = (collection === collectionKeys) ? index : collectionKeys[index];
	            value = collection[key];
	            block = nextBlockOrder[index];

	            if (block.scope) {
	              // if we have already seen this object, then we need to reuse the
	              // associated scope/element

	              nextNode = previousNode;

	              // skip nodes that are already pending removal via leave animation
	              do {
	                nextNode = nextNode.nextSibling;
	              } while (nextNode && nextNode[NG_REMOVED]);

	              if (getBlockStart(block) != nextNode) {
	                // existing item which got moved
	                $animate.move(getBlockNodes(block.clone), null, jqLite(previousNode));
	              }
	              previousNode = getBlockEnd(block);
	              updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);
	            } else {
	              // new item which we don't know about
	              $transclude(function ngRepeatTransclude(clone, scope) {
	                block.scope = scope;
	                // http://jsperf.com/clone-vs-createcomment
	                var endNode = ngRepeatEndComment.cloneNode(false);
	                clone[clone.length++] = endNode;

	                // TODO(perf): support naked previousNode in `enter` to avoid creation of jqLite wrapper?
	                $animate.enter(clone, null, jqLite(previousNode));
	                previousNode = endNode;
	                // Note: We only need the first/last node of the cloned nodes.
	                // However, we need to keep the reference to the jqlite wrapper as it might be changed later
	                // by a directive with templateUrl when its template arrives.
	                block.clone = clone;
	                nextBlockMap[block.id] = block;
	                updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);
	              });
	            }
	          }
	          lastBlockMap = nextBlockMap;
	        });
	      };
	    }
	  };
	}];

	var NG_HIDE_CLASS = 'ng-hide';
	var NG_HIDE_IN_PROGRESS_CLASS = 'ng-hide-animate';
	/**
	 * @ngdoc directive
	 * @name ngShow
	 *
	 * @description
	 * The `ngShow` directive shows or hides the given HTML element based on the expression
	 * provided to the `ngShow` attribute. The element is shown or hidden by removing or adding
	 * the `.ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined
	 * in AngularJS and sets the display style to none (using an !important flag).
	 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
	 *
	 * ```html
	 * <!-- when $scope.myValue is truthy (element is visible) -->
	 * <div ng-show="myValue"></div>
	 *
	 * <!-- when $scope.myValue is falsy (element is hidden) -->
	 * <div ng-show="myValue" class="ng-hide"></div>
	 * ```
	 *
	 * When the `ngShow` expression evaluates to a falsy value then the `.ng-hide` CSS class is added to the class
	 * attribute on the element causing it to become hidden. When truthy, the `.ng-hide` CSS class is removed
	 * from the element causing the element not to appear hidden.
	 *
	 * ## Why is !important used?
	 *
	 * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector
	 * can be easily overridden by heavier selectors. For example, something as simple
	 * as changing the display style on a HTML list item would make hidden elements appear visible.
	 * This also becomes a bigger issue when dealing with CSS frameworks.
	 *
	 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
	 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
	 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
	 *
	 * ### Overriding `.ng-hide`
	 *
	 * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change
	 * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`
	 * class CSS. Note that the selector that needs to be used is actually `.ng-hide:not(.ng-hide-animate)` to cope
	 * with extra animation classes that can be added.
	 *
	 * ```css
	 * .ng-hide:not(.ng-hide-animate) {
	 *   /&#42; this is just another form of hiding an element &#42;/
	 *   display: block!important;
	 *   position: absolute;
	 *   top: -9999px;
	 *   left: -9999px;
	 * }
	 * ```
	 *
	 * By default you don't need to override in CSS anything and the animations will work around the display style.
	 *
	 * ## A note about animations with `ngShow`
	 *
	 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
	 * is true and false. This system works like the animation system present with ngClass except that
	 * you must also include the !important flag to override the display property
	 * so that you can perform an animation when the element is hidden during the time of the animation.
	 *
	 * ```css
	 * //
	 * //a working example can be found at the bottom of this page
	 * //
	 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
	 *   /&#42; this is required as of 1.3x to properly
	 *      apply all styling in a show/hide animation &#42;/
	 *   transition: 0s linear all;
	 * }
	 *
	 * .my-element.ng-hide-add-active,
	 * .my-element.ng-hide-remove-active {
	 *   /&#42; the transition is defined in the active class &#42;/
	 *   transition: 1s linear all;
	 * }
	 *
	 * .my-element.ng-hide-add { ... }
	 * .my-element.ng-hide-add.ng-hide-add-active { ... }
	 * .my-element.ng-hide-remove { ... }
	 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
	 * ```
	 *
	 * Keep in mind that, as of AngularJS version 1.3.0-beta.11, there is no need to change the display
	 * property to block during animation states--ngAnimate will handle the style toggling automatically for you.
	 *
	 * @animations
	 * addClass: `.ng-hide` - happens after the `ngShow` expression evaluates to a truthy value and the just before contents are set to visible
	 * removeClass: `.ng-hide` - happens after the `ngShow` expression evaluates to a non truthy value and just before the contents are set to hidden
	 *
	 * @element ANY
	 * @param {expression} ngShow If the {@link guide/expression expression} is truthy
	 *     then the element is shown or hidden respectively.
	 *
	 * @example
	  <example module="ngAnimate" deps="angular-animate.js" animations="true">
	    <file name="index.html">
	      Click me: <input type="checkbox" ng-model="checked" aria-label="Toggle ngHide"><br/>
	      <div>
	        Show:
	        <div class="check-element animate-show" ng-show="checked">
	          <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.
	        </div>
	      </div>
	      <div>
	        Hide:
	        <div class="check-element animate-show" ng-hide="checked">
	          <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.
	        </div>
	      </div>
	    </file>
	    <file name="glyphicons.css">
	      @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);
	    </file>
	    <file name="animations.css">
	      .animate-show {
	        line-height: 20px;
	        opacity: 1;
	        padding: 10px;
	        border: 1px solid black;
	        background: white;
	      }

	      .animate-show.ng-hide-add.ng-hide-add-active,
	      .animate-show.ng-hide-remove.ng-hide-remove-active {
	        -webkit-transition: all linear 0.5s;
	        transition: all linear 0.5s;
	      }

	      .animate-show.ng-hide {
	        line-height: 0;
	        opacity: 0;
	        padding: 0 10px;
	      }

	      .check-element {
	        padding: 10px;
	        border: 1px solid black;
	        background: white;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));
	      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));

	      it('should check ng-show / ng-hide', function() {
	        expect(thumbsUp.isDisplayed()).toBeFalsy();
	        expect(thumbsDown.isDisplayed()).toBeTruthy();

	        element(by.model('checked')).click();

	        expect(thumbsUp.isDisplayed()).toBeTruthy();
	        expect(thumbsDown.isDisplayed()).toBeFalsy();
	      });
	    </file>
	  </example>
	 */
	var ngShowDirective = ['$animate', function($animate) {
	  return {
	    restrict: 'A',
	    multiElement: true,
	    link: function(scope, element, attr) {
	      scope.$watch(attr.ngShow, function ngShowWatchAction(value) {
	        // we're adding a temporary, animation-specific class for ng-hide since this way
	        // we can control when the element is actually displayed on screen without having
	        // to have a global/greedy CSS selector that breaks when other animations are run.
	        // Read: https://github.com/angular/angular.js/issues/9103#issuecomment-58335845
	        $animate[value ? 'removeClass' : 'addClass'](element, NG_HIDE_CLASS, {
	          tempClasses: NG_HIDE_IN_PROGRESS_CLASS
	        });
	      });
	    }
	  };
	}];


	/**
	 * @ngdoc directive
	 * @name ngHide
	 *
	 * @description
	 * The `ngHide` directive shows or hides the given HTML element based on the expression
	 * provided to the `ngHide` attribute. The element is shown or hidden by removing or adding
	 * the `ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined
	 * in AngularJS and sets the display style to none (using an !important flag).
	 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
	 *
	 * ```html
	 * <!-- when $scope.myValue is truthy (element is hidden) -->
	 * <div ng-hide="myValue" class="ng-hide"></div>
	 *
	 * <!-- when $scope.myValue is falsy (element is visible) -->
	 * <div ng-hide="myValue"></div>
	 * ```
	 *
	 * When the `ngHide` expression evaluates to a truthy value then the `.ng-hide` CSS class is added to the class
	 * attribute on the element causing it to become hidden. When falsy, the `.ng-hide` CSS class is removed
	 * from the element causing the element not to appear hidden.
	 *
	 * ## Why is !important used?
	 *
	 * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector
	 * can be easily overridden by heavier selectors. For example, something as simple
	 * as changing the display style on a HTML list item would make hidden elements appear visible.
	 * This also becomes a bigger issue when dealing with CSS frameworks.
	 *
	 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
	 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
	 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
	 *
	 * ### Overriding `.ng-hide`
	 *
	 * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change
	 * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`
	 * class in CSS:
	 *
	 * ```css
	 * .ng-hide {
	 *   /&#42; this is just another form of hiding an element &#42;/
	 *   display: block!important;
	 *   position: absolute;
	 *   top: -9999px;
	 *   left: -9999px;
	 * }
	 * ```
	 *
	 * By default you don't need to override in CSS anything and the animations will work around the display style.
	 *
	 * ## A note about animations with `ngHide`
	 *
	 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
	 * is true and false. This system works like the animation system present with ngClass, except that the `.ng-hide`
	 * CSS class is added and removed for you instead of your own CSS class.
	 *
	 * ```css
	 * //
	 * //a working example can be found at the bottom of this page
	 * //
	 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
	 *   transition: 0.5s linear all;
	 * }
	 *
	 * .my-element.ng-hide-add { ... }
	 * .my-element.ng-hide-add.ng-hide-add-active { ... }
	 * .my-element.ng-hide-remove { ... }
	 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
	 * ```
	 *
	 * Keep in mind that, as of AngularJS version 1.3.0-beta.11, there is no need to change the display
	 * property to block during animation states--ngAnimate will handle the style toggling automatically for you.
	 *
	 * @animations
	 * removeClass: `.ng-hide` - happens after the `ngHide` expression evaluates to a truthy value and just before the contents are set to hidden
	 * addClass: `.ng-hide` - happens after the `ngHide` expression evaluates to a non truthy value and just before the contents are set to visible
	 *
	 * @element ANY
	 * @param {expression} ngHide If the {@link guide/expression expression} is truthy then
	 *     the element is shown or hidden respectively.
	 *
	 * @example
	  <example module="ngAnimate" deps="angular-animate.js" animations="true">
	    <file name="index.html">
	      Click me: <input type="checkbox" ng-model="checked" aria-label="Toggle ngShow"><br/>
	      <div>
	        Show:
	        <div class="check-element animate-hide" ng-show="checked">
	          <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.
	        </div>
	      </div>
	      <div>
	        Hide:
	        <div class="check-element animate-hide" ng-hide="checked">
	          <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.
	        </div>
	      </div>
	    </file>
	    <file name="glyphicons.css">
	      @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);
	    </file>
	    <file name="animations.css">
	      .animate-hide {
	        -webkit-transition: all linear 0.5s;
	        transition: all linear 0.5s;
	        line-height: 20px;
	        opacity: 1;
	        padding: 10px;
	        border: 1px solid black;
	        background: white;
	      }

	      .animate-hide.ng-hide {
	        line-height: 0;
	        opacity: 0;
	        padding: 0 10px;
	      }

	      .check-element {
	        padding: 10px;
	        border: 1px solid black;
	        background: white;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));
	      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));

	      it('should check ng-show / ng-hide', function() {
	        expect(thumbsUp.isDisplayed()).toBeFalsy();
	        expect(thumbsDown.isDisplayed()).toBeTruthy();

	        element(by.model('checked')).click();

	        expect(thumbsUp.isDisplayed()).toBeTruthy();
	        expect(thumbsDown.isDisplayed()).toBeFalsy();
	      });
	    </file>
	  </example>
	 */
	var ngHideDirective = ['$animate', function($animate) {
	  return {
	    restrict: 'A',
	    multiElement: true,
	    link: function(scope, element, attr) {
	      scope.$watch(attr.ngHide, function ngHideWatchAction(value) {
	        // The comment inside of the ngShowDirective explains why we add and
	        // remove a temporary class for the show/hide animation
	        $animate[value ? 'addClass' : 'removeClass'](element,NG_HIDE_CLASS, {
	          tempClasses: NG_HIDE_IN_PROGRESS_CLASS
	        });
	      });
	    }
	  };
	}];

	/**
	 * @ngdoc directive
	 * @name ngStyle
	 * @restrict AC
	 *
	 * @description
	 * The `ngStyle` directive allows you to set CSS style on an HTML element conditionally.
	 *
	 * @element ANY
	 * @param {expression} ngStyle
	 *
	 * {@link guide/expression Expression} which evals to an
	 * object whose keys are CSS style names and values are corresponding values for those CSS
	 * keys.
	 *
	 * Since some CSS style names are not valid keys for an object, they must be quoted.
	 * See the 'background-color' style in the example below.
	 *
	 * @example
	   <example>
	     <file name="index.html">
	        <input type="button" value="set color" ng-click="myStyle={color:'red'}">
	        <input type="button" value="set background" ng-click="myStyle={'background-color':'blue'}">
	        <input type="button" value="clear" ng-click="myStyle={}">
	        <br/>
	        <span ng-style="myStyle">Sample Text</span>
	        <pre>myStyle={{myStyle}}</pre>
	     </file>
	     <file name="style.css">
	       span {
	         color: black;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       var colorSpan = element(by.css('span'));

	       it('should check ng-style', function() {
	         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
	         element(by.css('input[value=\'set color\']')).click();
	         expect(colorSpan.getCssValue('color')).toBe('rgba(255, 0, 0, 1)');
	         element(by.css('input[value=clear]')).click();
	         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
	       });
	     </file>
	   </example>
	 */
	var ngStyleDirective = ngDirective(function(scope, element, attr) {
	  scope.$watch(attr.ngStyle, function ngStyleWatchAction(newStyles, oldStyles) {
	    if (oldStyles && (newStyles !== oldStyles)) {
	      forEach(oldStyles, function(val, style) { element.css(style, '');});
	    }
	    if (newStyles) element.css(newStyles);
	  }, true);
	});

	/**
	 * @ngdoc directive
	 * @name ngSwitch
	 * @restrict EA
	 *
	 * @description
	 * The `ngSwitch` directive is used to conditionally swap DOM structure on your template based on a scope expression.
	 * Elements within `ngSwitch` but without `ngSwitchWhen` or `ngSwitchDefault` directives will be preserved at the location
	 * as specified in the template.
	 *
	 * The directive itself works similar to ngInclude, however, instead of downloading template code (or loading it
	 * from the template cache), `ngSwitch` simply chooses one of the nested elements and makes it visible based on which element
	 * matches the value obtained from the evaluated expression. In other words, you define a container element
	 * (where you place the directive), place an expression on the **`on="..."` attribute**
	 * (or the **`ng-switch="..."` attribute**), define any inner elements inside of the directive and place
	 * a when attribute per element. The when attribute is used to inform ngSwitch which element to display when the on
	 * expression is evaluated. If a matching expression is not found via a when attribute then an element with the default
	 * attribute is displayed.
	 *
	 * <div class="alert alert-info">
	 * Be aware that the attribute values to match against cannot be expressions. They are interpreted
	 * as literal string values to match against.
	 * For example, **`ng-switch-when="someVal"`** will match against the string `"someVal"` not against the
	 * value of the expression `$scope.someVal`.
	 * </div>

	 * @animations
	 * enter - happens after the ngSwitch contents change and the matched child element is placed inside the container
	 * leave - happens just after the ngSwitch contents change and just before the former contents are removed from the DOM
	 *
	 * @usage
	 *
	 * ```
	 * <ANY ng-switch="expression">
	 *   <ANY ng-switch-when="matchValue1">...</ANY>
	 *   <ANY ng-switch-when="matchValue2">...</ANY>
	 *   <ANY ng-switch-default>...</ANY>
	 * </ANY>
	 * ```
	 *
	 *
	 * @scope
	 * @priority 1200
	 * @param {*} ngSwitch|on expression to match against <code>ng-switch-when</code>.
	 * On child elements add:
	 *
	 * * `ngSwitchWhen`: the case statement to match against. If match then this
	 *   case will be displayed. If the same match appears multiple times, all the
	 *   elements will be displayed.
	 * * `ngSwitchDefault`: the default case when no other case match. If there
	 *   are multiple default cases, all of them will be displayed when no other
	 *   case match.
	 *
	 *
	 * @example
	  <example module="switchExample" deps="angular-animate.js" animations="true">
	    <file name="index.html">
	      <div ng-controller="ExampleController">
	        <select ng-model="selection" ng-options="item for item in items">
	        </select>
	        <code>selection={{selection}}</code>
	        <hr/>
	        <div class="animate-switch-container"
	          ng-switch on="selection">
	            <div class="animate-switch" ng-switch-when="settings">Settings Div</div>
	            <div class="animate-switch" ng-switch-when="home">Home Span</div>
	            <div class="animate-switch" ng-switch-default>default</div>
	        </div>
	      </div>
	    </file>
	    <file name="script.js">
	      angular.module('switchExample', ['ngAnimate'])
	        .controller('ExampleController', ['$scope', function($scope) {
	          $scope.items = ['settings', 'home', 'other'];
	          $scope.selection = $scope.items[0];
	        }]);
	    </file>
	    <file name="animations.css">
	      .animate-switch-container {
	        position:relative;
	        background:white;
	        border:1px solid black;
	        height:40px;
	        overflow:hidden;
	      }

	      .animate-switch {
	        padding:10px;
	      }

	      .animate-switch.ng-animate {
	        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
	        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;

	        position:absolute;
	        top:0;
	        left:0;
	        right:0;
	        bottom:0;
	      }

	      .animate-switch.ng-leave.ng-leave-active,
	      .animate-switch.ng-enter {
	        top:-50px;
	      }
	      .animate-switch.ng-leave,
	      .animate-switch.ng-enter.ng-enter-active {
	        top:0;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var switchElem = element(by.css('[ng-switch]'));
	      var select = element(by.model('selection'));

	      it('should start in settings', function() {
	        expect(switchElem.getText()).toMatch(/Settings Div/);
	      });
	      it('should change to home', function() {
	        select.all(by.css('option')).get(1).click();
	        expect(switchElem.getText()).toMatch(/Home Span/);
	      });
	      it('should select default', function() {
	        select.all(by.css('option')).get(2).click();
	        expect(switchElem.getText()).toMatch(/default/);
	      });
	    </file>
	  </example>
	 */
	var ngSwitchDirective = ['$animate', function($animate) {
	  return {
	    require: 'ngSwitch',

	    // asks for $scope to fool the BC controller module
	    controller: ['$scope', function ngSwitchController() {
	     this.cases = {};
	    }],
	    link: function(scope, element, attr, ngSwitchController) {
	      var watchExpr = attr.ngSwitch || attr.on,
	          selectedTranscludes = [],
	          selectedElements = [],
	          previousLeaveAnimations = [],
	          selectedScopes = [];

	      var spliceFactory = function(array, index) {
	          return function() { array.splice(index, 1); };
	      };

	      scope.$watch(watchExpr, function ngSwitchWatchAction(value) {
	        var i, ii;
	        for (i = 0, ii = previousLeaveAnimations.length; i < ii; ++i) {
	          $animate.cancel(previousLeaveAnimations[i]);
	        }
	        previousLeaveAnimations.length = 0;

	        for (i = 0, ii = selectedScopes.length; i < ii; ++i) {
	          var selected = getBlockNodes(selectedElements[i].clone);
	          selectedScopes[i].$destroy();
	          var promise = previousLeaveAnimations[i] = $animate.leave(selected);
	          promise.then(spliceFactory(previousLeaveAnimations, i));
	        }

	        selectedElements.length = 0;
	        selectedScopes.length = 0;

	        if ((selectedTranscludes = ngSwitchController.cases['!' + value] || ngSwitchController.cases['?'])) {
	          forEach(selectedTranscludes, function(selectedTransclude) {
	            selectedTransclude.transclude(function(caseElement, selectedScope) {
	              selectedScopes.push(selectedScope);
	              var anchor = selectedTransclude.element;
	              caseElement[caseElement.length++] = document.createComment(' end ngSwitchWhen: ');
	              var block = { clone: caseElement };

	              selectedElements.push(block);
	              $animate.enter(caseElement, anchor.parent(), anchor);
	            });
	          });
	        }
	      });
	    }
	  };
	}];

	var ngSwitchWhenDirective = ngDirective({
	  transclude: 'element',
	  priority: 1200,
	  require: '^ngSwitch',
	  multiElement: true,
	  link: function(scope, element, attrs, ctrl, $transclude) {
	    ctrl.cases['!' + attrs.ngSwitchWhen] = (ctrl.cases['!' + attrs.ngSwitchWhen] || []);
	    ctrl.cases['!' + attrs.ngSwitchWhen].push({ transclude: $transclude, element: element });
	  }
	});

	var ngSwitchDefaultDirective = ngDirective({
	  transclude: 'element',
	  priority: 1200,
	  require: '^ngSwitch',
	  multiElement: true,
	  link: function(scope, element, attr, ctrl, $transclude) {
	    ctrl.cases['?'] = (ctrl.cases['?'] || []);
	    ctrl.cases['?'].push({ transclude: $transclude, element: element });
	   }
	});

	/**
	 * @ngdoc directive
	 * @name ngTransclude
	 * @restrict EAC
	 *
	 * @description
	 * Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.
	 *
	 * Any existing content of the element that this directive is placed on will be removed before the transcluded content is inserted.
	 *
	 * @element ANY
	 *
	 * @example
	   <example module="transcludeExample">
	     <file name="index.html">
	       <script>
	         angular.module('transcludeExample', [])
	          .directive('pane', function(){
	             return {
	               restrict: 'E',
	               transclude: true,
	               scope: { title:'@' },
	               template: '<div style="border: 1px solid black;">' +
	                           '<div style="background-color: gray">{{title}}</div>' +
	                           '<ng-transclude></ng-transclude>' +
	                         '</div>'
	             };
	         })
	         .controller('ExampleController', ['$scope', function($scope) {
	           $scope.title = 'Lorem Ipsum';
	           $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';
	         }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <input ng-model="title" aria-label="title"> <br/>
	         <textarea ng-model="text" aria-label="text"></textarea> <br/>
	         <pane title="{{title}}">{{text}}</pane>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	        it('should have transcluded', function() {
	          var titleElement = element(by.model('title'));
	          titleElement.clear();
	          titleElement.sendKeys('TITLE');
	          var textElement = element(by.model('text'));
	          textElement.clear();
	          textElement.sendKeys('TEXT');
	          expect(element(by.binding('title')).getText()).toEqual('TITLE');
	          expect(element(by.binding('text')).getText()).toEqual('TEXT');
	        });
	     </file>
	   </example>
	 *
	 */
	var ngTranscludeDirective = ngDirective({
	  restrict: 'EAC',
	  link: function($scope, $element, $attrs, controller, $transclude) {
	    if (!$transclude) {
	      throw minErr('ngTransclude')('orphan',
	       'Illegal use of ngTransclude directive in the template! ' +
	       'No parent directive that requires a transclusion found. ' +
	       'Element: {0}',
	       startingTag($element));
	    }

	    $transclude(function(clone) {
	      $element.empty();
	      $element.append(clone);
	    });
	  }
	});

	/**
	 * @ngdoc directive
	 * @name script
	 * @restrict E
	 *
	 * @description
	 * Load the content of a `<script>` element into {@link ng.$templateCache `$templateCache`}, so that the
	 * template can be used by {@link ng.directive:ngInclude `ngInclude`},
	 * {@link ngRoute.directive:ngView `ngView`}, or {@link guide/directive directives}. The type of the
	 * `<script>` element must be specified as `text/ng-template`, and a cache name for the template must be
	 * assigned through the element's `id`, which can then be used as a directive's `templateUrl`.
	 *
	 * @param {string} type Must be set to `'text/ng-template'`.
	 * @param {string} id Cache name of the template.
	 *
	 * @example
	  <example>
	    <file name="index.html">
	      <script type="text/ng-template" id="/tpl.html">
	        Content of the template.
	      </script>

	      <a ng-click="currentTpl='/tpl.html'" id="tpl-link">Load inlined template</a>
	      <div id="tpl-content" ng-include src="currentTpl"></div>
	    </file>
	    <file name="protractor.js" type="protractor">
	      it('should load template defined inside script tag', function() {
	        element(by.css('#tpl-link')).click();
	        expect(element(by.css('#tpl-content')).getText()).toMatch(/Content of the template/);
	      });
	    </file>
	  </example>
	 */
	var scriptDirective = ['$templateCache', function($templateCache) {
	  return {
	    restrict: 'E',
	    terminal: true,
	    compile: function(element, attr) {
	      if (attr.type == 'text/ng-template') {
	        var templateUrl = attr.id,
	            text = element[0].text;

	        $templateCache.put(templateUrl, text);
	      }
	    }
	  };
	}];

	var noopNgModelController = { $setViewValue: noop, $render: noop };

	/**
	 * @ngdoc type
	 * @name  select.SelectController
	 * @description
	 * The controller for the `<select>` directive. This provides support for reading
	 * and writing the selected value(s) of the control and also coordinates dynamically
	 * added `<option>` elements, perhaps by an `ngRepeat` directive.
	 */
	var SelectController =
	        ['$element', '$scope', '$attrs', function($element, $scope, $attrs) {

	  var self = this,
	      optionsMap = new HashMap();

	  // If the ngModel doesn't get provided then provide a dummy noop version to prevent errors
	  self.ngModelCtrl = noopNgModelController;

	  // The "unknown" option is one that is prepended to the list if the viewValue
	  // does not match any of the options. When it is rendered the value of the unknown
	  // option is '? XXX ?' where XXX is the hashKey of the value that is not known.
	  //
	  // We can't just jqLite('<option>') since jqLite is not smart enough
	  // to create it in <select> and IE barfs otherwise.
	  self.unknownOption = jqLite(document.createElement('option'));
	  self.renderUnknownOption = function(val) {
	    var unknownVal = '? ' + hashKey(val) + ' ?';
	    self.unknownOption.val(unknownVal);
	    $element.prepend(self.unknownOption);
	    $element.val(unknownVal);
	  };

	  $scope.$on('$destroy', function() {
	    // disable unknown option so that we don't do work when the whole select is being destroyed
	    self.renderUnknownOption = noop;
	  });

	  self.removeUnknownOption = function() {
	    if (self.unknownOption.parent()) self.unknownOption.remove();
	  };


	  // Read the value of the select control, the implementation of this changes depending
	  // upon whether the select can have multiple values and whether ngOptions is at work.
	  self.readValue = function readSingleValue() {
	    self.removeUnknownOption();
	    return $element.val();
	  };


	  // Write the value to the select control, the implementation of this changes depending
	  // upon whether the select can have multiple values and whether ngOptions is at work.
	  self.writeValue = function writeSingleValue(value) {
	    if (self.hasOption(value)) {
	      self.removeUnknownOption();
	      $element.val(value);
	      if (value === '') self.emptyOption.prop('selected', true); // to make IE9 happy
	    } else {
	      if (value == null && self.emptyOption) {
	        self.removeUnknownOption();
	        $element.val('');
	      } else {
	        self.renderUnknownOption(value);
	      }
	    }
	  };


	  // Tell the select control that an option, with the given value, has been added
	  self.addOption = function(value, element) {
	    assertNotHasOwnProperty(value, '"option value"');
	    if (value === '') {
	      self.emptyOption = element;
	    }
	    var count = optionsMap.get(value) || 0;
	    optionsMap.put(value, count + 1);
	  };

	  // Tell the select control that an option, with the given value, has been removed
	  self.removeOption = function(value) {
	    var count = optionsMap.get(value);
	    if (count) {
	      if (count === 1) {
	        optionsMap.remove(value);
	        if (value === '') {
	          self.emptyOption = undefined;
	        }
	      } else {
	        optionsMap.put(value, count - 1);
	      }
	    }
	  };

	  // Check whether the select control has an option matching the given value
	  self.hasOption = function(value) {
	    return !!optionsMap.get(value);
	  };
	}];

	/**
	 * @ngdoc directive
	 * @name select
	 * @restrict E
	 *
	 * @description
	 * HTML `SELECT` element with angular data-binding.
	 *
	 * In many cases, `ngRepeat` can be used on `<option>` elements instead of {@link ng.directive:ngOptions
	 * ngOptions} to achieve a similar result. However, `ngOptions` provides some benefits such as reducing
	 * memory and increasing speed by not creating a new scope for each repeated instance, as well as providing
	 * more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the
	 * comprehension expression.
	 *
	 * When an item in the `<select>` menu is selected, the array element or object property
	 * represented by the selected option will be bound to the model identified by the `ngModel`
	 * directive.
	 *
	 * If the viewValue contains a value that doesn't match any of the options then the control
	 * will automatically add an "unknown" option, which it then removes when this is resolved.
	 *
	 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can
	 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"
	 * option. See example below for demonstration.
	 *
	 * <div class="alert alert-info">
	 * The value of a `select` directive used without `ngOptions` is always a string.
	 * When the model needs to be bound to a non-string value, you must either explictly convert it
	 * using a directive (see example below) or use `ngOptions` to specify the set of options.
	 * This is because an option element can only be bound to string values at present.
	 * </div>
	 *
	 * ### Example (binding `select` to a non-string value)
	 *
	 * <example name="select-with-non-string-options" module="nonStringSelect">
	 *   <file name="index.html">
	 *     <select ng-model="model.id" convert-to-number>
	 *       <option value="0">Zero</option>
	 *       <option value="1">One</option>
	 *       <option value="2">Two</option>
	 *     </select>
	 *     {{ model }}
	 *   </file>
	 *   <file name="app.js">
	 *     angular.module('nonStringSelect', [])
	 *       .run(function($rootScope) {
	 *         $rootScope.model = { id: 2 };
	 *       })
	 *       .directive('convertToNumber', function() {
	 *         return {
	 *           require: 'ngModel',
	 *           link: function(scope, element, attrs, ngModel) {
	 *             ngModel.$parsers.push(function(val) {
	 *               return parseInt(val, 10);
	 *             });
	 *             ngModel.$formatters.push(function(val) {
	 *               return '' + val;
	 *             });
	 *           }
	 *         };
	 *       });
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     it('should initialize to model', function() {
	 *       var select = element(by.css('select'));
	 *       expect(element(by.model('model.id')).$('option:checked').getText()).toEqual('Two');
	 *     });
	 *   </file>
	 * </example>
	 *
	 */
	var selectDirective = function() {

	  return {
	    restrict: 'E',
	    require: ['select', '?ngModel'],
	    controller: SelectController,
	    link: function(scope, element, attr, ctrls) {

	      // if ngModel is not defined, we don't need to do anything
	      var ngModelCtrl = ctrls[1];
	      if (!ngModelCtrl) return;

	      var selectCtrl = ctrls[0];

	      selectCtrl.ngModelCtrl = ngModelCtrl;

	      // We delegate rendering to the `writeValue` method, which can be changed
	      // if the select can have multiple selected values or if the options are being
	      // generated by `ngOptions`
	      ngModelCtrl.$render = function() {
	        selectCtrl.writeValue(ngModelCtrl.$viewValue);
	      };

	      // When the selected item(s) changes we delegate getting the value of the select control
	      // to the `readValue` method, which can be changed if the select can have multiple
	      // selected values or if the options are being generated by `ngOptions`
	      element.on('change', function() {
	        scope.$apply(function() {
	          ngModelCtrl.$setViewValue(selectCtrl.readValue());
	        });
	      });

	      // If the select allows multiple values then we need to modify how we read and write
	      // values from and to the control; also what it means for the value to be empty and
	      // we have to add an extra watch since ngModel doesn't work well with arrays - it
	      // doesn't trigger rendering if only an item in the array changes.
	      if (attr.multiple) {

	        // Read value now needs to check each option to see if it is selected
	        selectCtrl.readValue = function readMultipleValue() {
	          var array = [];
	          forEach(element.find('option'), function(option) {
	            if (option.selected) {
	              array.push(option.value);
	            }
	          });
	          return array;
	        };

	        // Write value now needs to set the selected property of each matching option
	        selectCtrl.writeValue = function writeMultipleValue(value) {
	          var items = new HashMap(value);
	          forEach(element.find('option'), function(option) {
	            option.selected = isDefined(items.get(option.value));
	          });
	        };

	        // we have to do it on each watch since ngModel watches reference, but
	        // we need to work of an array, so we need to see if anything was inserted/removed
	        var lastView, lastViewRef = NaN;
	        scope.$watch(function selectMultipleWatch() {
	          if (lastViewRef === ngModelCtrl.$viewValue && !equals(lastView, ngModelCtrl.$viewValue)) {
	            lastView = shallowCopy(ngModelCtrl.$viewValue);
	            ngModelCtrl.$render();
	          }
	          lastViewRef = ngModelCtrl.$viewValue;
	        });

	        // If we are a multiple select then value is now a collection
	        // so the meaning of $isEmpty changes
	        ngModelCtrl.$isEmpty = function(value) {
	          return !value || value.length === 0;
	        };

	      }
	    }
	  };
	};


	// The option directive is purely designed to communicate the existence (or lack of)
	// of dynamically created (and destroyed) option elements to their containing select
	// directive via its controller.
	var optionDirective = ['$interpolate', function($interpolate) {

	  function chromeHack(optionElement) {
	    // Workaround for https://code.google.com/p/chromium/issues/detail?id=381459
	    // Adding an <option selected="selected"> element to a <select required="required"> should
	    // automatically select the new element
	    if (optionElement[0].hasAttribute('selected')) {
	      optionElement[0].selected = true;
	    }
	  }

	  return {
	    restrict: 'E',
	    priority: 100,
	    compile: function(element, attr) {

	      // If the value attribute is not defined then we fall back to the
	      // text content of the option element, which may be interpolated
	      if (isUndefined(attr.value)) {
	        var interpolateFn = $interpolate(element.text(), true);
	        if (!interpolateFn) {
	          attr.$set('value', element.text());
	        }
	      }

	      return function(scope, element, attr) {

	        // This is an optimization over using ^^ since we don't want to have to search
	        // all the way to the root of the DOM for every single option element
	        var selectCtrlName = '$selectController',
	            parent = element.parent(),
	            selectCtrl = parent.data(selectCtrlName) ||
	              parent.parent().data(selectCtrlName); // in case we are in optgroup

	        // Only update trigger option updates if this is an option within a `select`
	        // that also has `ngModel` attached
	        if (selectCtrl && selectCtrl.ngModelCtrl) {

	          if (interpolateFn) {
	            scope.$watch(interpolateFn, function interpolateWatchAction(newVal, oldVal) {
	              attr.$set('value', newVal);
	              if (oldVal !== newVal) {
	                selectCtrl.removeOption(oldVal);
	              }
	              selectCtrl.addOption(newVal, element);
	              selectCtrl.ngModelCtrl.$render();
	              chromeHack(element);
	            });
	          } else {
	            selectCtrl.addOption(attr.value, element);
	            selectCtrl.ngModelCtrl.$render();
	            chromeHack(element);
	          }

	          element.on('$destroy', function() {
	            selectCtrl.removeOption(attr.value);
	            selectCtrl.ngModelCtrl.$render();
	          });
	        }
	      };
	    }
	  };
	}];

	var styleDirective = valueFn({
	  restrict: 'E',
	  terminal: false
	});

	var requiredDirective = function() {
	  return {
	    restrict: 'A',
	    require: '?ngModel',
	    link: function(scope, elm, attr, ctrl) {
	      if (!ctrl) return;
	      attr.required = true; // force truthy in case we are on non input element

	      ctrl.$validators.required = function(modelValue, viewValue) {
	        return !attr.required || !ctrl.$isEmpty(viewValue);
	      };

	      attr.$observe('required', function() {
	        ctrl.$validate();
	      });
	    }
	  };
	};


	var patternDirective = function() {
	  return {
	    restrict: 'A',
	    require: '?ngModel',
	    link: function(scope, elm, attr, ctrl) {
	      if (!ctrl) return;

	      var regexp, patternExp = attr.ngPattern || attr.pattern;
	      attr.$observe('pattern', function(regex) {
	        if (isString(regex) && regex.length > 0) {
	          regex = new RegExp('^' + regex + '$');
	        }

	        if (regex && !regex.test) {
	          throw minErr('ngPattern')('noregexp',
	            'Expected {0} to be a RegExp but was {1}. Element: {2}', patternExp,
	            regex, startingTag(elm));
	        }

	        regexp = regex || undefined;
	        ctrl.$validate();
	      });

	      ctrl.$validators.pattern = function(value) {
	        return ctrl.$isEmpty(value) || isUndefined(regexp) || regexp.test(value);
	      };
	    }
	  };
	};


	var maxlengthDirective = function() {
	  return {
	    restrict: 'A',
	    require: '?ngModel',
	    link: function(scope, elm, attr, ctrl) {
	      if (!ctrl) return;

	      var maxlength = -1;
	      attr.$observe('maxlength', function(value) {
	        var intVal = toInt(value);
	        maxlength = isNaN(intVal) ? -1 : intVal;
	        ctrl.$validate();
	      });
	      ctrl.$validators.maxlength = function(modelValue, viewValue) {
	        return (maxlength < 0) || ctrl.$isEmpty(viewValue) || (viewValue.length <= maxlength);
	      };
	    }
	  };
	};

	var minlengthDirective = function() {
	  return {
	    restrict: 'A',
	    require: '?ngModel',
	    link: function(scope, elm, attr, ctrl) {
	      if (!ctrl) return;

	      var minlength = 0;
	      attr.$observe('minlength', function(value) {
	        minlength = toInt(value) || 0;
	        ctrl.$validate();
	      });
	      ctrl.$validators.minlength = function(modelValue, viewValue) {
	        return ctrl.$isEmpty(viewValue) || viewValue.length >= minlength;
	      };
	    }
	  };
	};

	  if (window.angular.bootstrap) {
	    //AngularJS is already loaded, so we can return here...
	    console.log('WARNING: Tried to load angular more than once.');
	    return;
	  }

	  //try to bind to jquery now so that one can write jqLite(document).ready()
	  //but we will rebind on bootstrap again.
	  bindJQuery();

	  publishExternalAPI(angular);

	  jqLite(document).ready(function() {
	    angularInit(document, bootstrap);
	  });

	})(window, document);

	!window.angular.$$csp() && window.angular.element(document).find('head').prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>');

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/*! *****************************************************************************
	Copyright (C) Microsoft. All rights reserved.
	Licensed under the Apache License, Version 2.0 (the "License"); you may not use
	this file except in compliance with the License. You may obtain a copy of the
	License at http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

	See the License for the specific language governing permissions and
	limitations under the License.
	***************************************************************************** */
	"use strict";
	var Reflect;
	(function (Reflect) {
	    // Load global or shim versions of Map, Set, and WeakMap
	    var functionPrototype = Object.getPrototypeOf(Function);
	    var _Map = typeof Map === "function" ? Map : CreateMapPolyfill();
	    var _Set = typeof Set === "function" ? Set : CreateSetPolyfill();
	    var _WeakMap = typeof WeakMap === "function" ? WeakMap : CreateWeakMapPolyfill();
	    // [[Metadata]] internal slot
	    var __Metadata__ = new _WeakMap();
	    /**
	      * Applies a set of decorators to a property of a target object.
	      * @param decorators An array of decorators.
	      * @param target The target object.
	      * @param targetKey (Optional) The property key to decorate.
	      * @param targetDescriptor (Optional) The property descriptor for the target key
	      * @remarks Decorators are applied in reverse order.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     C = Reflect.decorate(decoratorsArray, C);
	      *
	      *     // property (on constructor)
	      *     Reflect.decorate(decoratorsArray, C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     Reflect.decorate(decoratorsArray, C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     Object.defineProperty(C, "staticMethod",
	      *         Reflect.decorate(decoratorsArray, C, "staticMethod",
	      *             Object.getOwnPropertyDescriptor(C, "staticMethod")));
	      *
	      *     // method (on prototype)
	      *     Object.defineProperty(C.prototype, "method",
	      *         Reflect.decorate(decoratorsArray, C.prototype, "method",
	      *             Object.getOwnPropertyDescriptor(C.prototype, "method")));
	      *
	      */
	    function decorate(decorators, target, targetKey, targetDescriptor) {
	        if (!IsUndefined(targetDescriptor)) {
	            if (!IsArray(decorators)) {
	                throw new TypeError();
	            }
	            else if (!IsObject(target)) {
	                throw new TypeError();
	            }
	            else if (IsUndefined(targetKey)) {
	                throw new TypeError();
	            }
	            else if (!IsObject(targetDescriptor)) {
	                throw new TypeError();
	            }
	            targetKey = ToPropertyKey(targetKey);
	            return DecoratePropertyWithDescriptor(decorators, target, targetKey, targetDescriptor);
	        }
	        else if (!IsUndefined(targetKey)) {
	            if (!IsArray(decorators)) {
	                throw new TypeError();
	            }
	            else if (!IsObject(target)) {
	                throw new TypeError();
	            }
	            targetKey = ToPropertyKey(targetKey);
	            return DecoratePropertyWithoutDescriptor(decorators, target, targetKey);
	        }
	        else {
	            if (!IsArray(decorators)) {
	                throw new TypeError();
	            }
	            else if (!IsConstructor(target)) {
	                throw new TypeError();
	            }
	            return DecorateConstructor(decorators, target);
	        }
	    }
	    Reflect.decorate = decorate;
	    /**
	      * A default metadata decorator factory that can be used on a class, class member, or parameter.
	      * @param metadataKey The key for the metadata entry.
	      * @param metadataValue The value for the metadata entry.
	      * @returns A decorator function.
	      * @remarks
	      * If `metadataKey` is already defined for the target and target key, the
	      * metadataValue for that key will be overwritten.
	      * @example
	      *
	      *     // constructor
	      *     @Reflect.metadata(key, value)
	      *     class C {
	      *     }
	      *
	      *     // property (on constructor, TypeScript only)
	      *     class C {
	      *         @Reflect.metadata(key, value)
	      *         static staticProperty;
	      *     }
	      *
	      *     // property (on prototype, TypeScript only)
	      *     class C {
	      *         @Reflect.metadata(key, value)
	      *         property;
	      *     }
	      *
	      *     // method (on constructor)
	      *     class C {
	      *         @Reflect.metadata(key, value)
	      *         static staticMethod() { }
	      *     }
	      *
	      *     // method (on prototype)
	      *     class C {
	      *         @Reflect.metadata(key, value)
	      *         method() { }
	      *     }
	      *
	      */
	    function metadata(metadataKey, metadataValue) {
	        function decorator(target, targetKey) {
	            if (!IsUndefined(targetKey)) {
	                if (!IsObject(target)) {
	                    throw new TypeError();
	                }
	                targetKey = ToPropertyKey(targetKey);
	                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, targetKey);
	            }
	            else {
	                if (!IsConstructor(target)) {
	                    throw new TypeError();
	                }
	                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, undefined);
	            }
	        }
	        return decorator;
	    }
	    Reflect.metadata = metadata;
	    /**
	      * Define a unique metadata entry on the target.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param metadataValue A value that contains attached metadata.
	      * @param target The target object on which to define metadata.
	      * @param targetKey (Optional) The property key for the target.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     Reflect.defineMetadata("custom:annotation", options, C);
	      *
	      *     // property (on constructor)
	      *     Reflect.defineMetadata("custom:annotation", options, C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     Reflect.defineMetadata("custom:annotation", options, C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     Reflect.defineMetadata("custom:annotation", options, C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     Reflect.defineMetadata("custom:annotation", options, C.prototype, "method");
	      *
	      *     // decorator factory as metadata-producing annotation.
	      *     function MyAnnotation(options): Decorator {
	      *         return (target, key?) => Reflect.defineMetadata("custom:annotation", options, target, key);
	      *     }
	      *
	      */
	    function defineMetadata(metadataKey, metadataValue, target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        }
	        else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, targetKey);
	    }
	    Reflect.defineMetadata = defineMetadata;
	    /**
	      * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.hasMetadata("custom:annotation", C);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.hasMetadata("custom:annotation", C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.hasMetadata("custom:annotation", C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.hasMetadata("custom:annotation", C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.hasMetadata("custom:annotation", C.prototype, "method");
	      *
	      */
	    function hasMetadata(metadataKey, target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        }
	        else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        return OrdinaryHasMetadata(metadataKey, target, targetKey);
	    }
	    Reflect.hasMetadata = hasMetadata;
	    /**
	      * Gets a value indicating whether the target object has the provided metadata key defined.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.hasOwnMetadata("custom:annotation", C);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.hasOwnMetadata("custom:annotation", C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.hasOwnMetadata("custom:annotation", C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.hasOwnMetadata("custom:annotation", C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.hasOwnMetadata("custom:annotation", C.prototype, "method");
	      *
	      */
	    function hasOwnMetadata(metadataKey, target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        }
	        else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        return OrdinaryHasOwnMetadata(metadataKey, target, targetKey);
	    }
	    Reflect.hasOwnMetadata = hasOwnMetadata;
	    /**
	      * Gets the metadata value for the provided metadata key on the target object or its prototype chain.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.getMetadata("custom:annotation", C);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.getMetadata("custom:annotation", C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.getMetadata("custom:annotation", C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.getMetadata("custom:annotation", C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.getMetadata("custom:annotation", C.prototype, "method");
	      *
	      */
	    function getMetadata(metadataKey, target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        }
	        else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        return OrdinaryGetMetadata(metadataKey, target, targetKey);
	    }
	    Reflect.getMetadata = getMetadata;
	    /**
	      * Gets the metadata value for the provided metadata key on the target object.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.getOwnMetadata("custom:annotation", C);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.getOwnMetadata("custom:annotation", C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.getOwnMetadata("custom:annotation", C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.getOwnMetadata("custom:annotation", C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.getOwnMetadata("custom:annotation", C.prototype, "method");
	      *
	      */
	    function getOwnMetadata(metadataKey, target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        }
	        else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        return OrdinaryGetOwnMetadata(metadataKey, target, targetKey);
	    }
	    Reflect.getOwnMetadata = getOwnMetadata;
	    /**
	      * Gets the metadata keys defined on the target object or its prototype chain.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns An array of unique metadata keys.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.getMetadataKeys(C);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.getMetadataKeys(C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.getMetadataKeys(C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.getMetadataKeys(C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.getMetadataKeys(C.prototype, "method");
	      *
	      */
	    function getMetadataKeys(target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        }
	        else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        return OrdinaryMetadataKeys(target, targetKey);
	    }
	    Reflect.getMetadataKeys = getMetadataKeys;
	    /**
	      * Gets the unique metadata keys defined on the target object.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns An array of unique metadata keys.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.getOwnMetadataKeys(C);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.getOwnMetadataKeys(C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.getOwnMetadataKeys(C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.getOwnMetadataKeys(C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.getOwnMetadataKeys(C.prototype, "method");
	      *
	      */
	    function getOwnMetadataKeys(target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        }
	        else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        return OrdinaryOwnMetadataKeys(target, targetKey);
	    }
	    Reflect.getOwnMetadataKeys = getOwnMetadataKeys;
	    /**
	      * Deletes the metadata entry from the target object with the provided key.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns `true` if the metadata entry was found and deleted; otherwise, false.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.deleteMetadata("custom:annotation", C);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.deleteMetadata("custom:annotation", C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.deleteMetadata("custom:annotation", C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.deleteMetadata("custom:annotation", C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.deleteMetadata("custom:annotation", C.prototype, "method");
	      *
	      */
	    function deleteMetadata(metadataKey, target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        }
	        else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#deletemetadata-metadatakey-p-
	        var metadataMap = GetOrCreateMetadataMap(target, targetKey, false);
	        if (IsUndefined(metadataMap)) {
	            return false;
	        }
	        if (!metadataMap.delete(metadataKey)) {
	            return false;
	        }
	        if (metadataMap.size > 0) {
	            return true;
	        }
	        var targetMetadata = __Metadata__.get(target);
	        targetMetadata.delete(targetKey);
	        if (targetMetadata.size > 0) {
	            return true;
	        }
	        __Metadata__.delete(target);
	        return true;
	    }
	    Reflect.deleteMetadata = deleteMetadata;
	    function DecorateConstructor(decorators, target) {
	        for (var i = decorators.length - 1; i >= 0; --i) {
	            var decorator = decorators[i];
	            var decorated = decorator(target);
	            if (!IsUndefined(decorated)) {
	                if (!IsConstructor(decorated)) {
	                    throw new TypeError();
	                }
	                target = decorated;
	            }
	        }
	        return target;
	    }
	    function DecoratePropertyWithDescriptor(decorators, target, propertyKey, descriptor) {
	        for (var i = decorators.length - 1; i >= 0; --i) {
	            var decorator = decorators[i];
	            var decorated = decorator(target, propertyKey, descriptor);
	            if (!IsUndefined(decorated)) {
	                if (!IsObject(decorated)) {
	                    throw new TypeError();
	                }
	                descriptor = decorated;
	            }
	        }
	        return descriptor;
	    }
	    function DecoratePropertyWithoutDescriptor(decorators, target, propertyKey) {
	        for (var i = decorators.length - 1; i >= 0; --i) {
	            var decorator = decorators[i];
	            decorator(target, propertyKey);
	        }
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#getorcreatemetadatamap--o-p-create-
	    function GetOrCreateMetadataMap(target, targetKey, create) {
	        var targetMetadata = __Metadata__.get(target);
	        if (!targetMetadata) {
	            if (!create) {
	                return undefined;
	            }
	            targetMetadata = new _Map();
	            __Metadata__.set(target, targetMetadata);
	        }
	        var keyMetadata = targetMetadata.get(targetKey);
	        if (!keyMetadata) {
	            if (!create) {
	                return undefined;
	            }
	            keyMetadata = new _Map();
	            targetMetadata.set(targetKey, keyMetadata);
	        }
	        return keyMetadata;
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinaryhasmetadata--metadatakey-o-p-
	    function OrdinaryHasMetadata(MetadataKey, O, P) {
	        var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
	        if (hasOwn) {
	            return true;
	        }
	        var parent = GetPrototypeOf(O);
	        if (parent !== null) {
	            return OrdinaryHasMetadata(MetadataKey, parent, P);
	        }
	        return false;
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinaryhasownmetadata--metadatakey-o-p-
	    function OrdinaryHasOwnMetadata(MetadataKey, O, P) {
	        var metadataMap = GetOrCreateMetadataMap(O, P, false);
	        if (metadataMap === undefined) {
	            return false;
	        }
	        return Boolean(metadataMap.has(MetadataKey));
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarygetmetadata--metadatakey-o-p-
	    function OrdinaryGetMetadata(MetadataKey, O, P) {
	        var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
	        if (hasOwn) {
	            return OrdinaryGetOwnMetadata(MetadataKey, O, P);
	        }
	        var parent = GetPrototypeOf(O);
	        if (parent !== null) {
	            return OrdinaryGetMetadata(MetadataKey, parent, P);
	        }
	        return undefined;
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarygetownmetadata--metadatakey-o-p-
	    function OrdinaryGetOwnMetadata(MetadataKey, O, P) {
	        var metadataMap = GetOrCreateMetadataMap(O, P, false);
	        if (metadataMap === undefined) {
	            return undefined;
	        }
	        return metadataMap.get(MetadataKey);
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarydefineownmetadata--metadatakey-metadatavalue-o-p-
	    function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
	        var metadataMap = GetOrCreateMetadataMap(O, P, true);
	        metadataMap.set(MetadataKey, MetadataValue);
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarymetadatakeys--o-p-
	    function OrdinaryMetadataKeys(O, P) {
	        var ownKeys = OrdinaryOwnMetadataKeys(O, P);
	        var parent = GetPrototypeOf(O);
	        if (parent === null) {
	            return ownKeys;
	        }
	        var parentKeys = OrdinaryMetadataKeys(parent, P);
	        if (parentKeys.length <= 0) {
	            return ownKeys;
	        }
	        if (ownKeys.length <= 0) {
	            return parentKeys;
	        }
	        var set = new _Set();
	        var keys = [];
	        for (var _i = 0; _i < ownKeys.length; _i++) {
	            var key = ownKeys[_i];
	            var hasKey = set.has(key);
	            if (!hasKey) {
	                set.add(key);
	                keys.push(key);
	            }
	        }
	        for (var _a = 0; _a < parentKeys.length; _a++) {
	            var key = parentKeys[_a];
	            var hasKey = set.has(key);
	            if (!hasKey) {
	                set.add(key);
	                keys.push(key);
	            }
	        }
	        return keys;
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinaryownmetadatakeys--o-p-
	    function OrdinaryOwnMetadataKeys(target, targetKey) {
	        var metadataMap = GetOrCreateMetadataMap(target, targetKey, false);
	        var keys = [];
	        if (metadataMap) {
	            metadataMap.forEach(function (_, key) { return keys.push(key); });
	        }
	        return keys;
	    }
	    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ecmascript-language-types-undefined-type
	    function IsUndefined(x) {
	        return x === undefined;
	    }
	    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isarray
	    function IsArray(x) {
	        return Array.isArray(x);
	    }
	    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object-type
	    function IsObject(x) {
	        return typeof x === "object" ? x !== null : typeof x === "function";
	    }
	    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isconstructor
	    function IsConstructor(x) {
	        return typeof x === "function";
	    }
	    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ecmascript-language-types-symbol-type
	    function IsSymbol(x) {
	        return typeof x === "symbol";
	    }
	    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-topropertykey
	    function ToPropertyKey(value) {
	        if (IsSymbol(value)) {
	            return value;
	        }
	        return String(value);
	    }
	    function GetPrototypeOf(O) {
	        var proto = Object.getPrototypeOf(O);
	        if (typeof O !== "function" || O === functionPrototype) {
	            return proto;
	        }
	        // TypeScript doesn't set __proto__ in ES5, as it's non-standard. 
	        // Try to determine the superclass constructor. Compatible implementations
	        // must either set __proto__ on a subclass constructor to the superclass constructor,
	        // or ensure each class has a valid `constructor` property on its prototype that
	        // points back to the constructor.
	        // If this is not the same as Function.[[Prototype]], then this is definately inherited.
	        // This is the case when in ES6 or when using __proto__ in a compatible browser.
	        if (proto !== functionPrototype) {
	            return proto;
	        }
	        // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.
	        var prototype = O.prototype;
	        var prototypeProto = Object.getPrototypeOf(prototype);
	        if (prototypeProto == null || prototypeProto === Object.prototype) {
	            return proto;
	        }
	        // if the constructor was not a function, then we cannot determine the heritage.
	        var constructor = prototypeProto.constructor;
	        if (typeof constructor !== "function") {
	            return proto;
	        }
	        // if we have some kind of self-reference, then we cannot determine the heritage.
	        if (constructor === O) {
	            return proto;
	        }
	        // we have a pretty good guess at the heritage.
	        return constructor;
	    }
	    // naive Map shim
	    function CreateMapPolyfill() {
	        var cacheSentinel = {};
	        function Map() {
	            this._keys = [];
	            this._values = [];
	            this._cache = cacheSentinel;
	        }
	        Map.prototype = {
	            get size() {
	                return this._keys.length;
	            },
	            has: function (key) {
	                if (key === this._cache) {
	                    return true;
	                }
	                if (this._find(key) >= 0) {
	                    this._cache = key;
	                    return true;
	                }
	                return false;
	            },
	            get: function (key) {
	                var index = this._find(key);
	                if (index >= 0) {
	                    this._cache = key;
	                    return this._values[index];
	                }
	                return undefined;
	            },
	            set: function (key, value) {
	                this.delete(key);
	                this._keys.push(key);
	                this._values.push(value);
	                this._cache = key;
	                return this;
	            },
	            delete: function (key) {
	                var index = this._find(key);
	                if (index >= 0) {
	                    this._keys.splice(index, 1);
	                    this._values.splice(index, 1);
	                    this._cache = cacheSentinel;
	                    return true;
	                }
	                return false;
	            },
	            clear: function () {
	                this._keys.length = 0;
	                this._values.length = 0;
	                this._cache = cacheSentinel;
	            },
	            forEach: function (callback, thisArg) {
	                var size = this.size;
	                for (var i = 0; i < size; ++i) {
	                    var key = this._keys[i];
	                    var value = this._values[i];
	                    this._cache = key;
	                    callback.call(this, value, key, this);
	                }
	            },
	            _find: function (key) {
	                var keys = this._keys;
	                var size = keys.length;
	                for (var i = 0; i < size; ++i) {
	                    if (keys[i] === key) {
	                        return i;
	                    }
	                }
	                return -1;
	            }
	        };
	        return Map;
	    }
	    // naive Set shim
	    function CreateSetPolyfill() {
	        var cacheSentinel = {};
	        function Set() {
	            this._map = new _Map();
	        }
	        Set.prototype = {
	            get size() {
	                return this._map.length;
	            },
	            has: function (value) {
	                return this._map.has(value);
	            },
	            add: function (value) {
	                this._map.set(value, value);
	                return this;
	            },
	            delete: function (value) {
	                return this._map.delete(value);
	            },
	            clear: function () {
	                this._map.clear();
	            },
	            forEach: function (callback, thisArg) {
	                this._map.forEach(callback, thisArg);
	            }
	        };
	        return Set;
	    }
	    // naive WeakMap shim
	    function CreateWeakMapPolyfill() {
	        var UUID_SIZE = 16;
	        var isNode = typeof global !== "undefined" &&
	            typeof module === "object" &&
	            typeof module.exports === "object" &&
	            "function" === "function";
	        var nodeCrypto = isNode && __webpack_require__(12);
	        var hasOwn = Object.prototype.hasOwnProperty;
	        var keys = {};
	        var rootKey = CreateUniqueKey();
	        function WeakMap() {
	            this._key = CreateUniqueKey();
	        }
	        WeakMap.prototype = {
	            has: function (target) {
	                var table = GetOrCreateWeakMapTable(target, false);
	                if (table) {
	                    return this._key in table;
	                }
	                return false;
	            },
	            get: function (target) {
	                var table = GetOrCreateWeakMapTable(target, false);
	                if (table) {
	                    return table[this._key];
	                }
	                return undefined;
	            },
	            set: function (target, value) {
	                var table = GetOrCreateWeakMapTable(target, true);
	                table[this._key] = value;
	                return this;
	            },
	            delete: function (target) {
	                var table = GetOrCreateWeakMapTable(target, false);
	                if (table && this._key in table) {
	                    return delete table[this._key];
	                }
	                return false;
	            },
	            clear: function () {
	                // NOTE: not a real clear, just makes the previous data unreachable
	                this._key = CreateUniqueKey();
	            }
	        };
	        function FillRandomBytes(buffer, size) {
	            for (var i = 0; i < size; ++i) {
	                buffer[i] = Math.random() * 255 | 0;
	            }
	        }
	        function GenRandomBytes(size) {
	            if (nodeCrypto) {
	                var data = nodeCrypto.randomBytes(size);
	                return data;
	            }
	            else if (typeof Uint8Array === "function") {
	                var data = new Uint8Array(size);
	                if (typeof crypto !== "undefined") {
	                    crypto.getRandomValues(data);
	                }
	                else if (typeof msCrypto !== "undefined") {
	                    msCrypto.getRandomValues(data);
	                }
	                else {
	                    FillRandomBytes(data, size);
	                }
	                return data;
	            }
	            else {
	                var data = new Array(size);
	                FillRandomBytes(data, size);
	                return data;
	            }
	        }
	        function CreateUUID() {
	            var data = GenRandomBytes(UUID_SIZE);
	            // mark as random - RFC 4122 § 4.4
	            data[6] = data[6] & 0x4f | 0x40;
	            data[8] = data[8] & 0xbf | 0x80;
	            var result = "";
	            for (var offset = 0; offset < UUID_SIZE; ++offset) {
	                var byte = data[offset];
	                if (offset === 4 || offset === 6 || offset === 8) {
	                    result += "-";
	                }
	                if (byte < 16) {
	                    result += "0";
	                }
	                result += byte.toString(16).toLowerCase();
	            }
	            return result;
	        }
	        function CreateUniqueKey() {
	            var key;
	            do {
	                key = "@@WeakMap@@" + CreateUUID();
	            } while (hasOwn.call(keys, key));
	            keys[key] = true;
	            return key;
	        }
	        function GetOrCreateWeakMapTable(target, create) {
	            if (!hasOwn.call(target, rootKey)) {
	                if (!create) {
	                    return undefined;
	                }
	                Object.defineProperty(target, rootKey, { value: Object.create(null) });
	            }
	            return target[rootKey];
	        }
	        return WeakMap;
	    }
	    // hook global Reflect
	    (function (__global) {
	        if (typeof __global.Reflect !== "undefined") {
	            if (__global.Reflect !== Reflect) {
	                for (var p in Reflect) {
	                    __global.Reflect[p] = Reflect[p];
	                }
	            }
	        }
	        else {
	            __global.Reflect = Reflect;
	        }
	    })(typeof window !== "undefined" ? window :
	        typeof WorkerGlobalScope !== "undefined" ? self :
	            typeof global !== "undefined" ? global :
	                Function("return this;")());
	})(Reflect || (Reflect = {}));
	//# sourceMappingURL=Reflect.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var rng = __webpack_require__(17)

	function error () {
	  var m = [].slice.call(arguments).join(' ')
	  throw new Error([
	    m,
	    'we accept pull requests',
	    'http://github.com/dominictarr/crypto-browserify'
	    ].join('\n'))
	}

	exports.createHash = __webpack_require__(19)

	exports.createHmac = __webpack_require__(35)

	exports.randomBytes = function(size, callback) {
	  if (callback && callback.call) {
	    try {
	      callback.call(this, undefined, new Buffer(rng(size)))
	    } catch (err) { callback(err) }
	  } else {
	    return new Buffer(rng(size))
	  }
	}

	function each(a, f) {
	  for(var i in a)
	    f(a[i], i)
	}

	exports.getHashes = function () {
	  return ['sha1', 'sha256', 'sha512', 'md5', 'rmd160']
	}

	var p = __webpack_require__(36)(exports)
	exports.pbkdf2 = p.pbkdf2
	exports.pbkdf2Sync = p.pbkdf2Sync


	// the least I can do is make error messages for the rest of the node.js/crypto api.
	each(['createCredentials'
	, 'createCipher'
	, 'createCipheriv'
	, 'createDecipher'
	, 'createDecipheriv'
	, 'createSign'
	, 'createVerify'
	, 'createDiffieHellman'
	], function (name) {
	  exports[name] = function () {
	    error('sorry,', name, 'is not implemented yet')
	  }
	})

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13).Buffer))

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */

	var base64 = __webpack_require__(14)
	var ieee754 = __webpack_require__(15)
	var isArray = __webpack_require__(16)

	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50
	Buffer.poolSize = 8192 // not used by this implementation

	var kMaxLength = 0x3fffffff
	var rootParent = {}

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Note:
	 *
	 * - Implementation must support adding new properties to `Uint8Array` instances.
	 *   Firefox 4-29 lacked support, fixed in Firefox 30+.
	 *   See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *  - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *  - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *    incorrect length in some situations.
	 *
	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they will
	 * get the Object implementation, which is slower but will work correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = (function () {
	  try {
	    var buf = new ArrayBuffer(0)
	    var arr = new Uint8Array(buf)
	    arr.foo = function () { return 42 }
	    return arr.foo() === 42 && // typed array instances can be augmented
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        new Uint8Array(1).subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	})()

	/**
	 * Class: Buffer
	 * =============
	 *
	 * The Buffer constructor returns instances of `Uint8Array` that are augmented
	 * with function properties for all the node `Buffer` API functions. We use
	 * `Uint8Array` so that square bracket notation works as expected -- it returns
	 * a single octet.
	 *
	 * By augmenting the instances, we can avoid modifying the `Uint8Array`
	 * prototype.
	 */
	function Buffer (arg) {
	  if (!(this instanceof Buffer)) {
	    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.
	    if (arguments.length > 1) return new Buffer(arg, arguments[1])
	    return new Buffer(arg)
	  }

	  this.length = 0
	  this.parent = undefined

	  // Common case.
	  if (typeof arg === 'number') {
	    return fromNumber(this, arg)
	  }

	  // Slightly less common case.
	  if (typeof arg === 'string') {
	    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')
	  }

	  // Unusual.
	  return fromObject(this, arg)
	}

	function fromNumber (that, length) {
	  that = allocate(that, length < 0 ? 0 : checked(length) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < length; i++) {
	      that[i] = 0
	    }
	  }
	  return that
	}

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'

	  // Assumption: byteLength() return value is always < kMaxLength.
	  var length = byteLength(string, encoding) | 0
	  that = allocate(that, length)

	  that.write(string, encoding)
	  return that
	}

	function fromObject (that, object) {
	  if (Buffer.isBuffer(object)) return fromBuffer(that, object)

	  if (isArray(object)) return fromArray(that, object)

	  if (object == null) {
	    throw new TypeError('must start with number, buffer, array or string')
	  }

	  if (typeof ArrayBuffer !== 'undefined' && object.buffer instanceof ArrayBuffer) {
	    return fromTypedArray(that, object)
	  }

	  if (object.length) return fromArrayLike(that, object)

	  return fromJsonObject(that, object)
	}

	function fromBuffer (that, buffer) {
	  var length = checked(buffer.length) | 0
	  that = allocate(that, length)
	  buffer.copy(that, 0, 0, length)
	  return that
	}

	function fromArray (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	// Duplicate of fromArray() to keep fromArray() monomorphic.
	function fromTypedArray (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  // Truncating the elements is probably not what people expect from typed
	  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior
	  // of the old Buffer constructor.
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	function fromArrayLike (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.
	// Returns a zero-length buffer for inputs that don't conform to the spec.
	function fromJsonObject (that, object) {
	  var array
	  var length = 0

	  if (object.type === 'Buffer' && isArray(object.data)) {
	    array = object.data
	    length = checked(array.length) | 0
	  }
	  that = allocate(that, length)

	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	function allocate (that, length) {
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = Buffer._augment(new Uint8Array(length))
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that.length = length
	    that._isBuffer = true
	  }

	  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1
	  if (fromPool) that.parent = rootParent

	  return that
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength.toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (subject, encoding) {
	  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)

	  var buf = new Buffer(subject, encoding)
	  delete buf.parent
	  return buf
	}

	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length
	  var y = b.length

	  var i = 0
	  var len = Math.min(x, y)
	  while (i < len) {
	    if (a[i] !== b[i]) break

	    ++i
	  }

	  if (i !== len) {
	    x = a[i]
	    y = b[i]
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'binary':
	    case 'base64':
	    case 'raw':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}

	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')

	  if (list.length === 0) {
	    return new Buffer(0)
	  } else if (list.length === 1) {
	    return list[0]
	  }

	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; i++) {
	      length += list[i].length
	    }
	  }

	  var buf = new Buffer(length)
	  var pos = 0
	  for (i = 0; i < list.length; i++) {
	    var item = list[i]
	    item.copy(buf, pos)
	    pos += item.length
	  }
	  return buf
	}

	function byteLength (string, encoding) {
	  if (typeof string !== 'string') string = String(string)

	  if (string.length === 0) return 0

	  switch (encoding || 'utf8') {
	    case 'ascii':
	    case 'binary':
	    case 'raw':
	      return string.length
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return string.length * 2
	    case 'hex':
	      return string.length >>> 1
	    case 'utf8':
	    case 'utf-8':
	      return utf8ToBytes(string).length
	    case 'base64':
	      return base64ToBytes(string).length
	    default:
	      return string.length
	  }
	}
	Buffer.byteLength = byteLength

	// pre-set for values that may exist in the future
	Buffer.prototype.length = undefined
	Buffer.prototype.parent = undefined

	// toString(encoding, start=0, end=buffer.length)
	Buffer.prototype.toString = function toString (encoding, start, end) {
	  var loweredCase = false

	  start = start | 0
	  end = end === undefined || end === Infinity ? this.length : end | 0

	  if (!encoding) encoding = 'utf8'
	  if (start < 0) start = 0
	  if (end > this.length) end = this.length
	  if (end <= start) return ''

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'binary':
	        return binarySlice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}

	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}

	Buffer.prototype.compare = function compare (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return 0
	  return Buffer.compare(this, b)
	}

	Buffer.prototype.indexOf = function indexOf (val, byteOffset) {
	  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff
	  else if (byteOffset < -0x80000000) byteOffset = -0x80000000
	  byteOffset >>= 0

	  if (this.length === 0) return -1
	  if (byteOffset >= this.length) return -1

	  // Negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)

	  if (typeof val === 'string') {
	    if (val.length === 0) return -1 // special case: looking for empty string always fails
	    return String.prototype.indexOf.call(this, val, byteOffset)
	  }
	  if (Buffer.isBuffer(val)) {
	    return arrayIndexOf(this, val, byteOffset)
	  }
	  if (typeof val === 'number') {
	    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
	      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
	    }
	    return arrayIndexOf(this, [ val ], byteOffset)
	  }

	  function arrayIndexOf (arr, val, byteOffset) {
	    var foundIndex = -1
	    for (var i = 0; byteOffset + i < arr.length; i++) {
	      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex
	      } else {
	        foundIndex = -1
	      }
	    }
	    return -1
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	// `get` will be removed in Node 0.13+
	Buffer.prototype.get = function get (offset) {
	  console.log('.get() is deprecated. Access using array indexes instead.')
	  return this.readUInt8(offset)
	}

	// `set` will be removed in Node 0.13+
	Buffer.prototype.set = function set (v, offset) {
	  console.log('.set() is deprecated. Access using array indexes instead.')
	  return this.writeUInt8(v, offset)
	}

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; i++) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) throw new Error('Invalid hex string')
	    buf[offset + i] = parsed
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function binaryWrite (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    var swap = encoding
	    encoding = offset
	    offset = length | 0
	    length = swap
	  }

	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8'

	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'binary':
	        return binaryWrite(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  var res = ''
	  var tmp = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; i++) {
	    if (buf[i] <= 0x7F) {
	      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])
	      tmp = ''
	    } else {
	      tmp += '%' + buf[i].toString(16)
	    }
	  }

	  return res + decodeUtf8Char(tmp)
	}

	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}

	function binarySlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length

	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len

	  var out = ''
	  for (var i = start; i < end; i++) {
	    out += toHex(buf[i])
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}

	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end

	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }

	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }

	  if (end < start) end = start

	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = Buffer._augment(this.subarray(start, end))
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; i++) {
	      newBuf[i] = this[i + start]
	    }
	  }

	  if (newBuf.length) newBuf.parent = this.parent || this

	  return newBuf
	}

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }

	  return val
	}

	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }

	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }

	  return val
	}

	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}

	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}

	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}

	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}

	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('index out of range')
	}

	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = value
	  return offset + 1
	}

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}

	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = value
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}

	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = value
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = value
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = 0
	  var mul = 1
	  var sub = value < 0 ? 1 : 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  var sub = value < 0 ? 1 : 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = value
	  return offset + 1
	}

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = value
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = value
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (value > max || value < min) throw new RangeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('index out of range')
	  if (offset < 0) throw new RangeError('index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }

	  var len = end - start

	  if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < len; i++) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    target._set(this.subarray(start, start + len), targetStart)
	  }

	  return len
	}

	// fill(value, start=0, end=buffer.length)
	Buffer.prototype.fill = function fill (value, start, end) {
	  if (!value) value = 0
	  if (!start) start = 0
	  if (!end) end = this.length

	  if (end < start) throw new RangeError('end < start')

	  // Fill 0 bytes; we're done
	  if (end === start) return
	  if (this.length === 0) return

	  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')
	  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')

	  var i
	  if (typeof value === 'number') {
	    for (i = start; i < end; i++) {
	      this[i] = value
	    }
	  } else {
	    var bytes = utf8ToBytes(value.toString())
	    var len = bytes.length
	    for (i = start; i < end; i++) {
	      this[i] = bytes[i % len]
	    }
	  }

	  return this
	}

	/**
	 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
	 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
	 */
	Buffer.prototype.toArrayBuffer = function toArrayBuffer () {
	  if (typeof Uint8Array !== 'undefined') {
	    if (Buffer.TYPED_ARRAY_SUPPORT) {
	      return (new Buffer(this)).buffer
	    } else {
	      var buf = new Uint8Array(this.length)
	      for (var i = 0, len = buf.length; i < len; i += 1) {
	        buf[i] = this[i]
	      }
	      return buf.buffer
	    }
	  } else {
	    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
	  }
	}

	// HELPER FUNCTIONS
	// ================

	var BP = Buffer.prototype

	/**
	 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
	 */
	Buffer._augment = function _augment (arr) {
	  arr.constructor = Buffer
	  arr._isBuffer = true

	  // save reference to original Uint8Array set method before overwriting
	  arr._set = arr.set

	  // deprecated, will be removed in node 0.13+
	  arr.get = BP.get
	  arr.set = BP.set

	  arr.write = BP.write
	  arr.toString = BP.toString
	  arr.toLocaleString = BP.toString
	  arr.toJSON = BP.toJSON
	  arr.equals = BP.equals
	  arr.compare = BP.compare
	  arr.indexOf = BP.indexOf
	  arr.copy = BP.copy
	  arr.slice = BP.slice
	  arr.readUIntLE = BP.readUIntLE
	  arr.readUIntBE = BP.readUIntBE
	  arr.readUInt8 = BP.readUInt8
	  arr.readUInt16LE = BP.readUInt16LE
	  arr.readUInt16BE = BP.readUInt16BE
	  arr.readUInt32LE = BP.readUInt32LE
	  arr.readUInt32BE = BP.readUInt32BE
	  arr.readIntLE = BP.readIntLE
	  arr.readIntBE = BP.readIntBE
	  arr.readInt8 = BP.readInt8
	  arr.readInt16LE = BP.readInt16LE
	  arr.readInt16BE = BP.readInt16BE
	  arr.readInt32LE = BP.readInt32LE
	  arr.readInt32BE = BP.readInt32BE
	  arr.readFloatLE = BP.readFloatLE
	  arr.readFloatBE = BP.readFloatBE
	  arr.readDoubleLE = BP.readDoubleLE
	  arr.readDoubleBE = BP.readDoubleBE
	  arr.writeUInt8 = BP.writeUInt8
	  arr.writeUIntLE = BP.writeUIntLE
	  arr.writeUIntBE = BP.writeUIntBE
	  arr.writeUInt16LE = BP.writeUInt16LE
	  arr.writeUInt16BE = BP.writeUInt16BE
	  arr.writeUInt32LE = BP.writeUInt32LE
	  arr.writeUInt32BE = BP.writeUInt32BE
	  arr.writeIntLE = BP.writeIntLE
	  arr.writeIntBE = BP.writeIntBE
	  arr.writeInt8 = BP.writeInt8
	  arr.writeInt16LE = BP.writeInt16LE
	  arr.writeInt16BE = BP.writeInt16BE
	  arr.writeInt32LE = BP.writeInt32LE
	  arr.writeInt32BE = BP.writeInt32BE
	  arr.writeFloatLE = BP.writeFloatLE
	  arr.writeFloatBE = BP.writeFloatBE
	  arr.writeDoubleLE = BP.writeDoubleLE
	  arr.writeDoubleBE = BP.writeDoubleBE
	  arr.fill = BP.fill
	  arr.inspect = BP.inspect
	  arr.toArrayBuffer = BP.toArrayBuffer

	  return arr
	}

	var INVALID_BASE64_RE = /[^+\/0-9A-z\-]/g

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []
	  var i = 0

	  for (; i < length; i++) {
	    codePoint = string.charCodeAt(i)

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (leadSurrogate) {
	        // 2 leads in a row
	        if (codePoint < 0xDC00) {
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          leadSurrogate = codePoint
	          continue
	        } else {
	          // valid surrogate pair
	          codePoint = leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00 | 0x10000
	          leadSurrogate = null
	        }
	      } else {
	        // no lead yet

	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else {
	          // valid lead
	          leadSurrogate = codePoint
	          continue
	        }
	      }
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	      leadSurrogate = null
	    }

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x200000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }

	  return byteArray
	}

	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; i++) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}

	function decodeUtf8Char (str) {
	  try {
	    return decodeURIComponent(str)
	  } catch (err) {
	    return String.fromCharCode(0xFFFD) // UTF 8 invalid char
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13).Buffer))

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

	;(function (exports) {
		'use strict';

	  var Arr = (typeof Uint8Array !== 'undefined')
	    ? Uint8Array
	    : Array

		var PLUS   = '+'.charCodeAt(0)
		var SLASH  = '/'.charCodeAt(0)
		var NUMBER = '0'.charCodeAt(0)
		var LOWER  = 'a'.charCodeAt(0)
		var UPPER  = 'A'.charCodeAt(0)
		var PLUS_URL_SAFE = '-'.charCodeAt(0)
		var SLASH_URL_SAFE = '_'.charCodeAt(0)

		function decode (elt) {
			var code = elt.charCodeAt(0)
			if (code === PLUS ||
			    code === PLUS_URL_SAFE)
				return 62 // '+'
			if (code === SLASH ||
			    code === SLASH_URL_SAFE)
				return 63 // '/'
			if (code < NUMBER)
				return -1 //no match
			if (code < NUMBER + 10)
				return code - NUMBER + 26 + 26
			if (code < UPPER + 26)
				return code - UPPER
			if (code < LOWER + 26)
				return code - LOWER + 26
		}

		function b64ToByteArray (b64) {
			var i, j, l, tmp, placeHolders, arr

			if (b64.length % 4 > 0) {
				throw new Error('Invalid string. Length must be a multiple of 4')
			}

			// the number of equal signs (place holders)
			// if there are two placeholders, than the two characters before it
			// represent one byte
			// if there is only one, then the three characters before it represent 2 bytes
			// this is just a cheap hack to not do indexOf twice
			var len = b64.length
			placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

			// base64 is 4/3 + up to two characters of the original data
			arr = new Arr(b64.length * 3 / 4 - placeHolders)

			// if there are placeholders, only get up to the last complete 4 chars
			l = placeHolders > 0 ? b64.length - 4 : b64.length

			var L = 0

			function push (v) {
				arr[L++] = v
			}

			for (i = 0, j = 0; i < l; i += 4, j += 3) {
				tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
				push((tmp & 0xFF0000) >> 16)
				push((tmp & 0xFF00) >> 8)
				push(tmp & 0xFF)
			}

			if (placeHolders === 2) {
				tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
				push(tmp & 0xFF)
			} else if (placeHolders === 1) {
				tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
				push((tmp >> 8) & 0xFF)
				push(tmp & 0xFF)
			}

			return arr
		}

		function uint8ToBase64 (uint8) {
			var i,
				extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
				output = "",
				temp, length

			function encode (num) {
				return lookup.charAt(num)
			}

			function tripletToBase64 (num) {
				return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
			}

			// go through the array every three bytes, we'll deal with trailing stuff later
			for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
				temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
				output += tripletToBase64(temp)
			}

			// pad the end with zeros, but make sure to not forget the extra bytes
			switch (extraBytes) {
				case 1:
					temp = uint8[uint8.length - 1]
					output += encode(temp >> 2)
					output += encode((temp << 4) & 0x3F)
					output += '=='
					break
				case 2:
					temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
					output += encode(temp >> 10)
					output += encode((temp >> 4) & 0x3F)
					output += encode((temp << 2) & 0x3F)
					output += '='
					break
			}

			return output
		}

		exports.toByteArray = b64ToByteArray
		exports.fromByteArray = uint8ToBase64
	}(false ? (this.base64js = {}) : exports))


/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m,
	      eLen = nBytes * 8 - mLen - 1,
	      eMax = (1 << eLen) - 1,
	      eBias = eMax >> 1,
	      nBits = -7,
	      i = isLE ? (nBytes - 1) : 0,
	      d = isLE ? -1 : 1,
	      s = buffer[offset + i]

	  i += d

	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c,
	      eLen = nBytes * 8 - mLen - 1,
	      eMax = (1 << eLen) - 1,
	      eBias = eMax >> 1,
	      rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),
	      i = isLE ? 0 : (nBytes - 1),
	      d = isLE ? 1 : -1,
	      s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

	  value = Math.abs(value)

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }

	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128
	}


/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * isArray
	 */

	var isArray = Array.isArray;

	/**
	 * toString
	 */

	var str = Object.prototype.toString;

	/**
	 * Whether or not the given `val`
	 * is an array.
	 *
	 * example:
	 *
	 *        isArray([]);
	 *        // > true
	 *        isArray(arguments);
	 *        // > false
	 *        isArray('');
	 *        // > false
	 *
	 * @param {mixed} val
	 * @return {bool}
	 */

	module.exports = isArray || function (val) {
	  return !! val && '[object Array]' == str.call(val);
	};


/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, Buffer) {(function() {
	  var g = ('undefined' === typeof window ? global : window) || {}
	  _crypto = (
	    g.crypto || g.msCrypto || __webpack_require__(18)
	  )
	  module.exports = function(size) {
	    // Modern Browsers
	    if(_crypto.getRandomValues) {
	      var bytes = new Buffer(size); //in browserify, this is an extended Uint8Array
	      /* This will not work in older browsers.
	       * See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
	       */
	    
	      _crypto.getRandomValues(bytes);
	      return bytes;
	    }
	    else if (_crypto.randomBytes) {
	      return _crypto.randomBytes(size)
	    }
	    else
	      throw new Error(
	        'secure random number generation not supported by this browser\n'+
	        'use chrome, FireFox or Internet Explorer 11'
	      )
	  }
	}())

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(13).Buffer))

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	/* (ignored) */

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(20)

	var md5 = toConstructor(__webpack_require__(32))
	var rmd160 = toConstructor(__webpack_require__(34))

	function toConstructor (fn) {
	  return function () {
	    var buffers = []
	    var m= {
	      update: function (data, enc) {
	        if(!Buffer.isBuffer(data)) data = new Buffer(data, enc)
	        buffers.push(data)
	        return this
	      },
	      digest: function (enc) {
	        var buf = Buffer.concat(buffers)
	        var r = fn(buf)
	        buffers = null
	        return enc ? r.toString(enc) : r
	      }
	    }
	    return m
	  }
	}

	module.exports = function (alg) {
	  if('md5' === alg) return new md5()
	  if('rmd160' === alg) return new rmd160()
	  return createHash(alg)
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13).Buffer))

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	var exports = module.exports = function (alg) {
	  var Alg = exports[alg]
	  if(!Alg) throw new Error(alg + ' is not supported (we accept pull requests)')
	  return new Alg()
	}

	var Buffer = __webpack_require__(13).Buffer
	var Hash   = __webpack_require__(21)(Buffer)

	exports.sha1 = __webpack_require__(22)(Buffer, Hash)
	exports.sha256 = __webpack_require__(30)(Buffer, Hash)
	exports.sha512 = __webpack_require__(31)(Buffer, Hash)


/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function (Buffer) {

	  //prototype class for hash functions
	  function Hash (blockSize, finalSize) {
	    this._block = new Buffer(blockSize) //new Uint32Array(blockSize/4)
	    this._finalSize = finalSize
	    this._blockSize = blockSize
	    this._len = 0
	    this._s = 0
	  }

	  Hash.prototype.init = function () {
	    this._s = 0
	    this._len = 0
	  }

	  Hash.prototype.update = function (data, enc) {
	    if ("string" === typeof data) {
	      enc = enc || "utf8"
	      data = new Buffer(data, enc)
	    }

	    var l = this._len += data.length
	    var s = this._s = (this._s || 0)
	    var f = 0
	    var buffer = this._block

	    while (s < l) {
	      var t = Math.min(data.length, f + this._blockSize - (s % this._blockSize))
	      var ch = (t - f)

	      for (var i = 0; i < ch; i++) {
	        buffer[(s % this._blockSize) + i] = data[i + f]
	      }

	      s += ch
	      f += ch

	      if ((s % this._blockSize) === 0) {
	        this._update(buffer)
	      }
	    }
	    this._s = s

	    return this
	  }

	  Hash.prototype.digest = function (enc) {
	    // Suppose the length of the message M, in bits, is l
	    var l = this._len * 8

	    // Append the bit 1 to the end of the message
	    this._block[this._len % this._blockSize] = 0x80

	    // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize
	    this._block.fill(0, this._len % this._blockSize + 1)

	    if (l % (this._blockSize * 8) >= this._finalSize * 8) {
	      this._update(this._block)
	      this._block.fill(0)
	    }

	    // to this append the block which is equal to the number l written in binary
	    // TODO: handle case where l is > Math.pow(2, 29)
	    this._block.writeInt32BE(l, this._blockSize - 4)

	    var hash = this._update(this._block) || this._hash()

	    return enc ? hash.toString(enc) : hash
	  }

	  Hash.prototype._update = function () {
	    throw new Error('_update must be implemented by subclass')
	  }

	  return Hash
	}


/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
	 * in FIPS PUB 180-1
	 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for details.
	 */

	var inherits = __webpack_require__(23).inherits

	module.exports = function (Buffer, Hash) {

	  var A = 0|0
	  var B = 4|0
	  var C = 8|0
	  var D = 12|0
	  var E = 16|0

	  var W = new (typeof Int32Array === 'undefined' ? Array : Int32Array)(80)

	  var POOL = []

	  function Sha1 () {
	    if(POOL.length)
	      return POOL.pop().init()

	    if(!(this instanceof Sha1)) return new Sha1()
	    this._w = W
	    Hash.call(this, 16*4, 14*4)

	    this._h = null
	    this.init()
	  }

	  inherits(Sha1, Hash)

	  Sha1.prototype.init = function () {
	    this._a = 0x67452301
	    this._b = 0xefcdab89
	    this._c = 0x98badcfe
	    this._d = 0x10325476
	    this._e = 0xc3d2e1f0

	    Hash.prototype.init.call(this)
	    return this
	  }

	  Sha1.prototype._POOL = POOL
	  Sha1.prototype._update = function (X) {

	    var a, b, c, d, e, _a, _b, _c, _d, _e

	    a = _a = this._a
	    b = _b = this._b
	    c = _c = this._c
	    d = _d = this._d
	    e = _e = this._e

	    var w = this._w

	    for(var j = 0; j < 80; j++) {
	      var W = w[j] = j < 16 ? X.readInt32BE(j*4)
	        : rol(w[j - 3] ^ w[j -  8] ^ w[j - 14] ^ w[j - 16], 1)

	      var t = add(
	        add(rol(a, 5), sha1_ft(j, b, c, d)),
	        add(add(e, W), sha1_kt(j))
	      )

	      e = d
	      d = c
	      c = rol(b, 30)
	      b = a
	      a = t
	    }

	    this._a = add(a, _a)
	    this._b = add(b, _b)
	    this._c = add(c, _c)
	    this._d = add(d, _d)
	    this._e = add(e, _e)
	  }

	  Sha1.prototype._hash = function () {
	    if(POOL.length < 100) POOL.push(this)
	    var H = new Buffer(20)
	    //console.log(this._a|0, this._b|0, this._c|0, this._d|0, this._e|0)
	    H.writeInt32BE(this._a|0, A)
	    H.writeInt32BE(this._b|0, B)
	    H.writeInt32BE(this._c|0, C)
	    H.writeInt32BE(this._d|0, D)
	    H.writeInt32BE(this._e|0, E)
	    return H
	  }

	  /*
	   * Perform the appropriate triplet combination function for the current
	   * iteration
	   */
	  function sha1_ft(t, b, c, d) {
	    if(t < 20) return (b & c) | ((~b) & d);
	    if(t < 40) return b ^ c ^ d;
	    if(t < 60) return (b & c) | (b & d) | (c & d);
	    return b ^ c ^ d;
	  }

	  /*
	   * Determine the appropriate additive constant for the current iteration
	   */
	  function sha1_kt(t) {
	    return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :
	           (t < 60) ? -1894007588 : -899497514;
	  }

	  /*
	   * Add integers, wrapping at 2^32. This uses 16-bit operations internally
	   * to work around bugs in some JS interpreters.
	   * //dominictarr: this is 10 years old, so maybe this can be dropped?)
	   *
	   */
	  function add(x, y) {
	    return (x + y ) | 0
	  //lets see how this goes on testling.
	  //  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	  //  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	  //  return (msw << 16) | (lsw & 0xFFFF);
	  }

	  /*
	   * Bitwise rotate a 32-bit number to the left.
	   */
	  function rol(num, cnt) {
	    return (num << cnt) | (num >>> (32 - cnt));
	  }

	  return Sha1
	}


/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }

	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};


	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }

	  if (process.noDeprecation === true) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	};


	var debugs = {};
	var debugEnviron;
	exports.debuglog = function(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};


	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;


	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};

	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};


	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];

	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}


	function stylizeNoColor(str, styleType) {
	  return str;
	}


	function arrayToHash(array) {
	  var hash = {};

	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });

	  return hash;
	}


	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);

	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }

	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }

	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '', array = false, braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}


	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}


	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}


	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}


	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}


	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}


	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = __webpack_require__(25);

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}


	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}


	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];

	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}


	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};


	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = __webpack_require__(26);

	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;

	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};

	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(24)))

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	// shim for using process in browser

	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            currentQueue[queueIndex].run();
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	// TODO(shtylman)
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function isBuffer(arg) {
	  return arg && typeof arg === 'object'
	    && typeof arg.copy === 'function'
	    && typeof arg.fill === 'function'
	    && typeof arg.readUInt8 === 'function';
	}

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 27 */,
/* 28 */,
/* 29 */,
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
	 * in FIPS 180-2
	 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 *
	 */

	var inherits = __webpack_require__(23).inherits

	module.exports = function (Buffer, Hash) {

	  var K = [
	      0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
	      0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
	      0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
	      0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
	      0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
	      0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
	      0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
	      0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
	      0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
	      0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
	      0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
	      0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
	      0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
	      0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
	      0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
	      0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
	    ]

	  var W = new Array(64)

	  function Sha256() {
	    this.init()

	    this._w = W //new Array(64)

	    Hash.call(this, 16*4, 14*4)
	  }

	  inherits(Sha256, Hash)

	  Sha256.prototype.init = function () {

	    this._a = 0x6a09e667|0
	    this._b = 0xbb67ae85|0
	    this._c = 0x3c6ef372|0
	    this._d = 0xa54ff53a|0
	    this._e = 0x510e527f|0
	    this._f = 0x9b05688c|0
	    this._g = 0x1f83d9ab|0
	    this._h = 0x5be0cd19|0

	    this._len = this._s = 0

	    return this
	  }

	  function S (X, n) {
	    return (X >>> n) | (X << (32 - n));
	  }

	  function R (X, n) {
	    return (X >>> n);
	  }

	  function Ch (x, y, z) {
	    return ((x & y) ^ ((~x) & z));
	  }

	  function Maj (x, y, z) {
	    return ((x & y) ^ (x & z) ^ (y & z));
	  }

	  function Sigma0256 (x) {
	    return (S(x, 2) ^ S(x, 13) ^ S(x, 22));
	  }

	  function Sigma1256 (x) {
	    return (S(x, 6) ^ S(x, 11) ^ S(x, 25));
	  }

	  function Gamma0256 (x) {
	    return (S(x, 7) ^ S(x, 18) ^ R(x, 3));
	  }

	  function Gamma1256 (x) {
	    return (S(x, 17) ^ S(x, 19) ^ R(x, 10));
	  }

	  Sha256.prototype._update = function(M) {

	    var W = this._w
	    var a, b, c, d, e, f, g, h
	    var T1, T2

	    a = this._a | 0
	    b = this._b | 0
	    c = this._c | 0
	    d = this._d | 0
	    e = this._e | 0
	    f = this._f | 0
	    g = this._g | 0
	    h = this._h | 0

	    for (var j = 0; j < 64; j++) {
	      var w = W[j] = j < 16
	        ? M.readInt32BE(j * 4)
	        : Gamma1256(W[j - 2]) + W[j - 7] + Gamma0256(W[j - 15]) + W[j - 16]

	      T1 = h + Sigma1256(e) + Ch(e, f, g) + K[j] + w

	      T2 = Sigma0256(a) + Maj(a, b, c);
	      h = g; g = f; f = e; e = d + T1; d = c; c = b; b = a; a = T1 + T2;
	    }

	    this._a = (a + this._a) | 0
	    this._b = (b + this._b) | 0
	    this._c = (c + this._c) | 0
	    this._d = (d + this._d) | 0
	    this._e = (e + this._e) | 0
	    this._f = (f + this._f) | 0
	    this._g = (g + this._g) | 0
	    this._h = (h + this._h) | 0

	  };

	  Sha256.prototype._hash = function () {
	    var H = new Buffer(32)

	    H.writeInt32BE(this._a,  0)
	    H.writeInt32BE(this._b,  4)
	    H.writeInt32BE(this._c,  8)
	    H.writeInt32BE(this._d, 12)
	    H.writeInt32BE(this._e, 16)
	    H.writeInt32BE(this._f, 20)
	    H.writeInt32BE(this._g, 24)
	    H.writeInt32BE(this._h, 28)

	    return H
	  }

	  return Sha256

	}


/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	var inherits = __webpack_require__(23).inherits

	module.exports = function (Buffer, Hash) {
	  var K = [
	    0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
	    0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
	    0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
	    0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
	    0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
	    0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
	    0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
	    0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
	    0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
	    0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
	    0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
	    0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
	    0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
	    0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
	    0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
	    0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
	    0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
	    0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
	    0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
	    0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
	    0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
	    0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
	    0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
	    0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
	    0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
	    0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
	    0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
	    0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
	    0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
	    0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
	    0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
	    0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
	    0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
	    0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
	    0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
	    0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
	    0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
	    0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
	    0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
	    0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
	  ]

	  var W = new Array(160)

	  function Sha512() {
	    this.init()
	    this._w = W

	    Hash.call(this, 128, 112)
	  }

	  inherits(Sha512, Hash)

	  Sha512.prototype.init = function () {

	    this._a = 0x6a09e667|0
	    this._b = 0xbb67ae85|0
	    this._c = 0x3c6ef372|0
	    this._d = 0xa54ff53a|0
	    this._e = 0x510e527f|0
	    this._f = 0x9b05688c|0
	    this._g = 0x1f83d9ab|0
	    this._h = 0x5be0cd19|0

	    this._al = 0xf3bcc908|0
	    this._bl = 0x84caa73b|0
	    this._cl = 0xfe94f82b|0
	    this._dl = 0x5f1d36f1|0
	    this._el = 0xade682d1|0
	    this._fl = 0x2b3e6c1f|0
	    this._gl = 0xfb41bd6b|0
	    this._hl = 0x137e2179|0

	    this._len = this._s = 0

	    return this
	  }

	  function S (X, Xl, n) {
	    return (X >>> n) | (Xl << (32 - n))
	  }

	  function Ch (x, y, z) {
	    return ((x & y) ^ ((~x) & z));
	  }

	  function Maj (x, y, z) {
	    return ((x & y) ^ (x & z) ^ (y & z));
	  }

	  Sha512.prototype._update = function(M) {

	    var W = this._w
	    var a, b, c, d, e, f, g, h
	    var al, bl, cl, dl, el, fl, gl, hl

	    a = this._a | 0
	    b = this._b | 0
	    c = this._c | 0
	    d = this._d | 0
	    e = this._e | 0
	    f = this._f | 0
	    g = this._g | 0
	    h = this._h | 0

	    al = this._al | 0
	    bl = this._bl | 0
	    cl = this._cl | 0
	    dl = this._dl | 0
	    el = this._el | 0
	    fl = this._fl | 0
	    gl = this._gl | 0
	    hl = this._hl | 0

	    for (var i = 0; i < 80; i++) {
	      var j = i * 2

	      var Wi, Wil

	      if (i < 16) {
	        Wi = W[j] = M.readInt32BE(j * 4)
	        Wil = W[j + 1] = M.readInt32BE(j * 4 + 4)

	      } else {
	        var x  = W[j - 15*2]
	        var xl = W[j - 15*2 + 1]
	        var gamma0  = S(x, xl, 1) ^ S(x, xl, 8) ^ (x >>> 7)
	        var gamma0l = S(xl, x, 1) ^ S(xl, x, 8) ^ S(xl, x, 7)

	        x  = W[j - 2*2]
	        xl = W[j - 2*2 + 1]
	        var gamma1  = S(x, xl, 19) ^ S(xl, x, 29) ^ (x >>> 6)
	        var gamma1l = S(xl, x, 19) ^ S(x, xl, 29) ^ S(xl, x, 6)

	        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
	        var Wi7  = W[j - 7*2]
	        var Wi7l = W[j - 7*2 + 1]

	        var Wi16  = W[j - 16*2]
	        var Wi16l = W[j - 16*2 + 1]

	        Wil = gamma0l + Wi7l
	        Wi  = gamma0  + Wi7 + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0)
	        Wil = Wil + gamma1l
	        Wi  = Wi  + gamma1  + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0)
	        Wil = Wil + Wi16l
	        Wi  = Wi  + Wi16 + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0)

	        W[j] = Wi
	        W[j + 1] = Wil
	      }

	      var maj = Maj(a, b, c)
	      var majl = Maj(al, bl, cl)

	      var sigma0h = S(a, al, 28) ^ S(al, a, 2) ^ S(al, a, 7)
	      var sigma0l = S(al, a, 28) ^ S(a, al, 2) ^ S(a, al, 7)
	      var sigma1h = S(e, el, 14) ^ S(e, el, 18) ^ S(el, e, 9)
	      var sigma1l = S(el, e, 14) ^ S(el, e, 18) ^ S(e, el, 9)

	      // t1 = h + sigma1 + ch + K[i] + W[i]
	      var Ki = K[j]
	      var Kil = K[j + 1]

	      var ch = Ch(e, f, g)
	      var chl = Ch(el, fl, gl)

	      var t1l = hl + sigma1l
	      var t1 = h + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0)
	      t1l = t1l + chl
	      t1 = t1 + ch + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0)
	      t1l = t1l + Kil
	      t1 = t1 + Ki + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0)
	      t1l = t1l + Wil
	      t1 = t1 + Wi + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0)

	      // t2 = sigma0 + maj
	      var t2l = sigma0l + majl
	      var t2 = sigma0h + maj + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0)

	      h  = g
	      hl = gl
	      g  = f
	      gl = fl
	      f  = e
	      fl = el
	      el = (dl + t1l) | 0
	      e  = (d + t1 + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
	      d  = c
	      dl = cl
	      c  = b
	      cl = bl
	      b  = a
	      bl = al
	      al = (t1l + t2l) | 0
	      a  = (t1 + t2 + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0
	    }

	    this._al = (this._al + al) | 0
	    this._bl = (this._bl + bl) | 0
	    this._cl = (this._cl + cl) | 0
	    this._dl = (this._dl + dl) | 0
	    this._el = (this._el + el) | 0
	    this._fl = (this._fl + fl) | 0
	    this._gl = (this._gl + gl) | 0
	    this._hl = (this._hl + hl) | 0

	    this._a = (this._a + a + ((this._al >>> 0) < (al >>> 0) ? 1 : 0)) | 0
	    this._b = (this._b + b + ((this._bl >>> 0) < (bl >>> 0) ? 1 : 0)) | 0
	    this._c = (this._c + c + ((this._cl >>> 0) < (cl >>> 0) ? 1 : 0)) | 0
	    this._d = (this._d + d + ((this._dl >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
	    this._e = (this._e + e + ((this._el >>> 0) < (el >>> 0) ? 1 : 0)) | 0
	    this._f = (this._f + f + ((this._fl >>> 0) < (fl >>> 0) ? 1 : 0)) | 0
	    this._g = (this._g + g + ((this._gl >>> 0) < (gl >>> 0) ? 1 : 0)) | 0
	    this._h = (this._h + h + ((this._hl >>> 0) < (hl >>> 0) ? 1 : 0)) | 0
	  }

	  Sha512.prototype._hash = function () {
	    var H = new Buffer(64)

	    function writeInt64BE(h, l, offset) {
	      H.writeInt32BE(h, offset)
	      H.writeInt32BE(l, offset + 4)
	    }

	    writeInt64BE(this._a, this._al, 0)
	    writeInt64BE(this._b, this._bl, 8)
	    writeInt64BE(this._c, this._cl, 16)
	    writeInt64BE(this._d, this._dl, 24)
	    writeInt64BE(this._e, this._el, 32)
	    writeInt64BE(this._f, this._fl, 40)
	    writeInt64BE(this._g, this._gl, 48)
	    writeInt64BE(this._h, this._hl, 56)

	    return H
	  }

	  return Sha512

	}


/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
	 * Digest Algorithm, as defined in RFC 1321.
	 * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for more info.
	 */

	var helpers = __webpack_require__(33);

	/*
	 * Calculate the MD5 of an array of little-endian words, and a bit length
	 */
	function core_md5(x, len)
	{
	  /* append padding */
	  x[len >> 5] |= 0x80 << ((len) % 32);
	  x[(((len + 64) >>> 9) << 4) + 14] = len;

	  var a =  1732584193;
	  var b = -271733879;
	  var c = -1732584194;
	  var d =  271733878;

	  for(var i = 0; i < x.length; i += 16)
	  {
	    var olda = a;
	    var oldb = b;
	    var oldc = c;
	    var oldd = d;

	    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
	    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
	    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
	    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
	    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
	    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
	    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
	    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
	    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
	    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
	    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
	    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
	    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
	    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
	    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
	    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);

	    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
	    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
	    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
	    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
	    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
	    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
	    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
	    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
	    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
	    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
	    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
	    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
	    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
	    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
	    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
	    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);

	    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
	    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
	    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
	    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
	    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
	    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
	    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
	    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
	    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
	    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
	    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
	    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
	    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
	    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
	    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
	    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);

	    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
	    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
	    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
	    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
	    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
	    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
	    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
	    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
	    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
	    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
	    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
	    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
	    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
	    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
	    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
	    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);

	    a = safe_add(a, olda);
	    b = safe_add(b, oldb);
	    c = safe_add(c, oldc);
	    d = safe_add(d, oldd);
	  }
	  return Array(a, b, c, d);

	}

	/*
	 * These functions implement the four basic operations the algorithm uses.
	 */
	function md5_cmn(q, a, b, x, s, t)
	{
	  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
	}
	function md5_ff(a, b, c, d, x, s, t)
	{
	  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
	}
	function md5_gg(a, b, c, d, x, s, t)
	{
	  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
	}
	function md5_hh(a, b, c, d, x, s, t)
	{
	  return md5_cmn(b ^ c ^ d, a, b, x, s, t);
	}
	function md5_ii(a, b, c, d, x, s, t)
	{
	  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
	}

	/*
	 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
	 * to work around bugs in some JS interpreters.
	 */
	function safe_add(x, y)
	{
	  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	  return (msw << 16) | (lsw & 0xFFFF);
	}

	/*
	 * Bitwise rotate a 32-bit number to the left.
	 */
	function bit_rol(num, cnt)
	{
	  return (num << cnt) | (num >>> (32 - cnt));
	}

	module.exports = function md5(buf) {
	  return helpers.hash(buf, core_md5, 16);
	};


/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var intSize = 4;
	var zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);
	var chrsz = 8;

	function toArray(buf, bigEndian) {
	  if ((buf.length % intSize) !== 0) {
	    var len = buf.length + (intSize - (buf.length % intSize));
	    buf = Buffer.concat([buf, zeroBuffer], len);
	  }

	  var arr = [];
	  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
	  for (var i = 0; i < buf.length; i += intSize) {
	    arr.push(fn.call(buf, i));
	  }
	  return arr;
	}

	function toBuffer(arr, size, bigEndian) {
	  var buf = new Buffer(size);
	  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
	  for (var i = 0; i < arr.length; i++) {
	    fn.call(buf, arr[i], i * 4, true);
	  }
	  return buf;
	}

	function hash(buf, fn, hashSize, bigEndian) {
	  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);
	  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
	  return toBuffer(arr, hashSize, bigEndian);
	}

	module.exports = { hash: hash };

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13).Buffer))

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {
	module.exports = ripemd160



	/*
	CryptoJS v3.1.2
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	/** @preserve
	(c) 2012 by Cédric Mesnil. All rights reserved.

	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/

	// Constants table
	var zl = [
	    0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
	    7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,
	    3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,
	    1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,
	    4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13];
	var zr = [
	    5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,
	    6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,
	    15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,
	    8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,
	    12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11];
	var sl = [
	     11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,
	    7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,
	    11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,
	      11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,
	    9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ];
	var sr = [
	    8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,
	    9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,
	    9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,
	    15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,
	    8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ];

	var hl =  [ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E];
	var hr =  [ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000];

	var bytesToWords = function (bytes) {
	  var words = [];
	  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {
	    words[b >>> 5] |= bytes[i] << (24 - b % 32);
	  }
	  return words;
	};

	var wordsToBytes = function (words) {
	  var bytes = [];
	  for (var b = 0; b < words.length * 32; b += 8) {
	    bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);
	  }
	  return bytes;
	};

	var processBlock = function (H, M, offset) {

	  // Swap endian
	  for (var i = 0; i < 16; i++) {
	    var offset_i = offset + i;
	    var M_offset_i = M[offset_i];

	    // Swap
	    M[offset_i] = (
	        (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
	        (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
	    );
	  }

	  // Working variables
	  var al, bl, cl, dl, el;
	  var ar, br, cr, dr, er;

	  ar = al = H[0];
	  br = bl = H[1];
	  cr = cl = H[2];
	  dr = dl = H[3];
	  er = el = H[4];
	  // Computation
	  var t;
	  for (var i = 0; i < 80; i += 1) {
	    t = (al +  M[offset+zl[i]])|0;
	    if (i<16){
	        t +=  f1(bl,cl,dl) + hl[0];
	    } else if (i<32) {
	        t +=  f2(bl,cl,dl) + hl[1];
	    } else if (i<48) {
	        t +=  f3(bl,cl,dl) + hl[2];
	    } else if (i<64) {
	        t +=  f4(bl,cl,dl) + hl[3];
	    } else {// if (i<80) {
	        t +=  f5(bl,cl,dl) + hl[4];
	    }
	    t = t|0;
	    t =  rotl(t,sl[i]);
	    t = (t+el)|0;
	    al = el;
	    el = dl;
	    dl = rotl(cl, 10);
	    cl = bl;
	    bl = t;

	    t = (ar + M[offset+zr[i]])|0;
	    if (i<16){
	        t +=  f5(br,cr,dr) + hr[0];
	    } else if (i<32) {
	        t +=  f4(br,cr,dr) + hr[1];
	    } else if (i<48) {
	        t +=  f3(br,cr,dr) + hr[2];
	    } else if (i<64) {
	        t +=  f2(br,cr,dr) + hr[3];
	    } else {// if (i<80) {
	        t +=  f1(br,cr,dr) + hr[4];
	    }
	    t = t|0;
	    t =  rotl(t,sr[i]) ;
	    t = (t+er)|0;
	    ar = er;
	    er = dr;
	    dr = rotl(cr, 10);
	    cr = br;
	    br = t;
	  }
	  // Intermediate hash value
	  t    = (H[1] + cl + dr)|0;
	  H[1] = (H[2] + dl + er)|0;
	  H[2] = (H[3] + el + ar)|0;
	  H[3] = (H[4] + al + br)|0;
	  H[4] = (H[0] + bl + cr)|0;
	  H[0] =  t;
	};

	function f1(x, y, z) {
	  return ((x) ^ (y) ^ (z));
	}

	function f2(x, y, z) {
	  return (((x)&(y)) | ((~x)&(z)));
	}

	function f3(x, y, z) {
	  return (((x) | (~(y))) ^ (z));
	}

	function f4(x, y, z) {
	  return (((x) & (z)) | ((y)&(~(z))));
	}

	function f5(x, y, z) {
	  return ((x) ^ ((y) |(~(z))));
	}

	function rotl(x,n) {
	  return (x<<n) | (x>>>(32-n));
	}

	function ripemd160(message) {
	  var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0];

	  if (typeof message == 'string')
	    message = new Buffer(message, 'utf8');

	  var m = bytesToWords(message);

	  var nBitsLeft = message.length * 8;
	  var nBitsTotal = message.length * 8;

	  // Add padding
	  m[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	  m[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
	      (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |
	      (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)
	  );

	  for (var i=0 ; i<m.length; i += 16) {
	    processBlock(H, m, i);
	  }

	  // Swap endian
	  for (var i = 0; i < 5; i++) {
	      // Shortcut
	    var H_i = H[i];

	    // Swap
	    H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
	          (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
	  }

	  var digestbytes = wordsToBytes(H);
	  return new Buffer(digestbytes);
	}



	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13).Buffer))

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(19)

	var zeroBuffer = new Buffer(128)
	zeroBuffer.fill(0)

	module.exports = Hmac

	function Hmac (alg, key) {
	  if(!(this instanceof Hmac)) return new Hmac(alg, key)
	  this._opad = opad
	  this._alg = alg

	  var blocksize = (alg === 'sha512') ? 128 : 64

	  key = this._key = !Buffer.isBuffer(key) ? new Buffer(key) : key

	  if(key.length > blocksize) {
	    key = createHash(alg).update(key).digest()
	  } else if(key.length < blocksize) {
	    key = Buffer.concat([key, zeroBuffer], blocksize)
	  }

	  var ipad = this._ipad = new Buffer(blocksize)
	  var opad = this._opad = new Buffer(blocksize)

	  for(var i = 0; i < blocksize; i++) {
	    ipad[i] = key[i] ^ 0x36
	    opad[i] = key[i] ^ 0x5C
	  }

	  this._hash = createHash(alg).update(ipad)
	}

	Hmac.prototype.update = function (data, enc) {
	  this._hash.update(data, enc)
	  return this
	}

	Hmac.prototype.digest = function (enc) {
	  var h = this._hash.digest()
	  return createHash(this._alg).update(this._opad).update(h).digest(enc)
	}


	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13).Buffer))

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	var pbkdf2Export = __webpack_require__(37)

	module.exports = function (crypto, exports) {
	  exports = exports || {}

	  var exported = pbkdf2Export(crypto)

	  exports.pbkdf2 = exported.pbkdf2
	  exports.pbkdf2Sync = exported.pbkdf2Sync

	  return exports
	}


/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = function(crypto) {
	  function pbkdf2(password, salt, iterations, keylen, digest, callback) {
	    if ('function' === typeof digest) {
	      callback = digest
	      digest = undefined
	    }

	    if ('function' !== typeof callback)
	      throw new Error('No callback provided to pbkdf2')

	    setTimeout(function() {
	      var result

	      try {
	        result = pbkdf2Sync(password, salt, iterations, keylen, digest)
	      } catch (e) {
	        return callback(e)
	      }

	      callback(undefined, result)
	    })
	  }

	  function pbkdf2Sync(password, salt, iterations, keylen, digest) {
	    if ('number' !== typeof iterations)
	      throw new TypeError('Iterations not a number')

	    if (iterations < 0)
	      throw new TypeError('Bad iterations')

	    if ('number' !== typeof keylen)
	      throw new TypeError('Key length not a number')

	    if (keylen < 0)
	      throw new TypeError('Bad key length')

	    digest = digest || 'sha1'

	    if (!Buffer.isBuffer(password)) password = new Buffer(password)
	    if (!Buffer.isBuffer(salt)) salt = new Buffer(salt)

	    var hLen, l = 1, r, T
	    var DK = new Buffer(keylen)
	    var block1 = new Buffer(salt.length + 4)
	    salt.copy(block1, 0, 0, salt.length)

	    for (var i = 1; i <= l; i++) {
	      block1.writeUInt32BE(i, salt.length)

	      var U = crypto.createHmac(digest, password).update(block1).digest()

	      if (!hLen) {
	        hLen = U.length
	        T = new Buffer(hLen)
	        l = Math.ceil(keylen / hLen)
	        r = keylen - (l - 1) * hLen

	        if (keylen > (Math.pow(2, 32) - 1) * hLen)
	          throw new TypeError('keylen exceeds maximum length')
	      }

	      U.copy(T, 0, 0, hLen)

	      for (var j = 1; j < iterations; j++) {
	        U = crypto.createHmac(digest, password).update(U).digest()

	        for (var k = 0; k < hLen; k++) {
	          T[k] ^= U[k]
	        }
	      }

	      var destPos = (i - 1) * hLen
	      var len = (i == l ? r : hLen)
	      T.copy(DK, destPos, 0, len)
	    }

	    return DK
	  }

	  return {
	    pbkdf2: pbkdf2,
	    pbkdf2Sync: pbkdf2Sync
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13).Buffer))

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	// angular-formly version 4.2.4 built with ♥ by Astrism <astrisms@gmail.com>, Kent C. Dodds <kent@doddsfamily.us> (ó ì_í)=óò=(ì_í ò)

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory(__webpack_require__(39), __webpack_require__(9));
		else if(typeof define === 'function' && define.amd)
			define(["api-check", "angular"], factory);
		else if(typeof exports === 'object')
			exports["ngFormly"] = factory(require("api-check"), require("angular"));
		else
			root["ngFormly"] = factory(root["apiCheck"], root["angular"]);
	})(this, function(__WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_9__) {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;
	/******/
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		
		module.exports = __webpack_require__(1);

	/***/ },
	/* 1 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		
		var apiCheck = __webpack_require__(2);
		if (!apiCheck) {
		  throw new Error("angular-formly requires the library apiCheck.js! Please include it! " + __webpack_require__(3) + "apicheckjs-dependency-required");
		}
		var ngModuleName = "formly";
		var angular = __webpack_require__(4);
		var ngModule = angular.module(ngModuleName, []);
		
		__webpack_require__(5)(ngModule);
		__webpack_require__(6)(ngModule);
		__webpack_require__(7)(ngModule);
		__webpack_require__(8)(ngModule);
		
		module.exports = ngModuleName;

	/***/ },
	/* 2 */
	/***/ function(module, exports, __webpack_require__) {

		module.exports = __WEBPACK_EXTERNAL_MODULE_2__;

	/***/ },
	/* 3 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		
		module.exports = "https://github.com/formly-js/angular-formly/blob/" + ("4.2.4") + "/other/ERRORS_AND_WARNINGS.md#";

	/***/ },
	/* 4 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		
		// some versions of angular don't export the angular module properly,
		// so we get it from window in this case.
		var angular = __webpack_require__(9);
		if (!angular.version) {
		  angular = window.angular;
		}
		module.exports = angular;

	/***/ },
	/* 5 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		
		module.exports = function (ngModule) {
		  __webpack_require__(10)(ngModule);
		  __webpack_require__(11)(ngModule);
		  __webpack_require__(12)(ngModule);
		  __webpack_require__(13)(ngModule);
		  __webpack_require__(14)(ngModule);
		  __webpack_require__(15)(ngModule);
		};

	/***/ },
	/* 6 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		
		module.exports = function (ngModule) {
		  __webpack_require__(16)(ngModule);
		  __webpack_require__(17)(ngModule);
		};

	/***/ },
	/* 7 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		
		module.exports = function (ngModule) {
		  __webpack_require__(18)(ngModule);
		  __webpack_require__(19)(ngModule);
		  __webpack_require__(20)(ngModule);
		  __webpack_require__(21)(ngModule);
		};

	/***/ },
	/* 8 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		
		module.exports = function (ngModule) {
		  __webpack_require__(22)(ngModule);
		  __webpack_require__(23)(ngModule);
		};

	/***/ },
	/* 9 */
	/***/ function(module, exports, __webpack_require__) {

		module.exports = __WEBPACK_EXTERNAL_MODULE_9__;

	/***/ },
	/* 10 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		
		module.exports = function (ngModule) {
		
		  var apiCheck = __webpack_require__(2)({
		    output: {
		      prefix: "angular-formly:",
		      docsBaseUrl: __webpack_require__(3)
		    }
		  });
		
		  function shapeRequiredIfNot(otherProps, propChecker) {
		    if (!angular.isArray(otherProps)) {
		      otherProps = [otherProps];
		    }
		    var type = "specified if these are not specified: `" + otherProps.join(", ") + "` (otherwise it's optional)";
		    function shapeRequiredIfNotDefinition(prop, propName, location, obj) {
		      var propExists = obj && obj.hasOwnProperty(propName);
		      var otherPropsExist = otherProps.some(function (otherProp) {
		        return obj && obj.hasOwnProperty(otherProp);
		      });
		      //console.log(propName, propExists, prop, otherPropsExist, otherProps.join(', '));
		      if (!otherPropsExist && !propExists) {
		        return apiCheck.utils.getError(propName, location, type);
		      } else if (propExists) {
		        return propChecker(prop, propName, location, obj);
		      }
		    }
		    shapeRequiredIfNotDefinition.type = type;
		    apiCheck.utils.checkerHelpers.setupChecker(shapeRequiredIfNotDefinition);
		    return shapeRequiredIfNotDefinition;
		  }
		
		  ngModule.constant("formlyApiCheck", apiCheck);
		  if (false) {
		    require("./formlyApiCheck.test")(ngModule);
		  }
		
		  var formlyExpression = apiCheck.oneOfType([apiCheck.string, apiCheck.func]);
		  var specifyWrapperType = apiCheck.oneOfType([apiCheck.oneOf([null]), apiCheck.typeOrArrayOf(apiCheck.string)]);
		
		  var apiCheckProperty = apiCheck.objectOf(apiCheck.func);
		
		  var apiCheckInstanceProperty = apiCheck.shape.onlyIf("apiCheck", apiCheck.func.withProperties({
		    warn: apiCheck.func,
		    "throw": apiCheck.func,
		    shape: apiCheck.func
		  }));
		
		  var apiCheckFunctionProperty = apiCheck.shape.onlyIf("apiCheck", apiCheck.oneOf(["throw", "warn"]));
		
		  var formlyWrapperType = apiCheck.shape({
		    name: shapeRequiredIfNot("types", apiCheck.string).optional,
		    template: apiCheck.shape.ifNot("templateUrl", apiCheck.string).optional,
		    templateUrl: apiCheck.shape.ifNot("template", apiCheck.string).optional,
		    types: apiCheck.typeOrArrayOf(apiCheck.string).optional,
		    overwriteOk: apiCheck.bool.optional,
		    validateOptions: apiCheck.func.optional,
		    apiCheck: apiCheckProperty.optional,
		    apiCheckInstance: apiCheckInstanceProperty.optional,
		    apiCheckFunction: apiCheckFunctionProperty.optional,
		    apiCheckOptions: apiCheck.object.optional
		  }).strict;
		
		  var fieldOptionsApiShape = {
		    type: apiCheck.shape.ifNot(["template", "templateUrl"], apiCheck.string).optional,
		    template: apiCheck.shape.ifNot(["type", "templateUrl"], apiCheck.string).optional,
		    templateUrl: apiCheck.shape.ifNot(["type", "template"], apiCheck.string).optional,
		    key: apiCheck.oneOfType([apiCheck.string, apiCheck.number]),
		    model: apiCheck.object.optional,
		    expressionProperties: apiCheck.objectOf(apiCheck.oneOfType([formlyExpression, apiCheck.shape({
		      expression: formlyExpression,
		      message: formlyExpression.optional
		    }).strict])).optional,
		    data: apiCheck.object.optional,
		    templateOptions: apiCheck.object.optional,
		    wrapper: specifyWrapperType.optional,
		    modelOptions: apiCheck.shape({
		      updateOn: apiCheck.string.optional,
		      debounce: apiCheck.oneOfType([apiCheck.object, apiCheck.string]).optional,
		      allowInvalid: apiCheck.bool.optional,
		      getterSetter: apiCheck.bool.optional,
		      timezone: apiCheck.string.optional
		    }).optional,
		    watcher: apiCheck.typeOrArrayOf(apiCheck.shape({
		      expression: formlyExpression.optional,
		      listener: formlyExpression
		    })).optional,
		    validators: apiCheck.objectOf(apiCheck.oneOfType([formlyExpression, apiCheck.shape({
		      expression: formlyExpression,
		      message: formlyExpression.optional
		    }).strict])).optional,
		    noFormControl: apiCheck.bool.optional,
		    hide: apiCheck.bool.optional,
		    ngModelAttrs: apiCheck.objectOf(apiCheck.shape({
		      expression: apiCheck.shape.ifNot(["value", "attribute", "bound"], apiCheck.any).optional,
		      value: apiCheck.shape.ifNot("expression", apiCheck.any).optional,
		      attribute: apiCheck.shape.ifNot("expression", apiCheck.any).optional,
		      bound: apiCheck.shape.ifNot("expression", apiCheck.any).optional
		    }).strict).optional,
		    optionsTypes: apiCheck.typeOrArrayOf(apiCheck.string).optional,
		    link: apiCheck.func.optional,
		    controller: apiCheck.oneOfType([apiCheck.string, apiCheck.func, apiCheck.array]).optional,
		    validation: apiCheck.shape({
		      show: apiCheck.oneOfType([apiCheck.bool, apiCheck.oneOf([null])]).optional,
		      messages: apiCheck.objectOf(apiCheck.func).optional,
		      errorExistsAndShouldBeVisible: apiCheck.bool.optional
		    }).optional,
		    formControl: apiCheck.object.optional,
		    value: apiCheck.func.optional,
		    runExpressions: apiCheck.func.optional
		  };
		
		  var formlyFieldOptions = apiCheck.shape(fieldOptionsApiShape).strict;
		
		  var typeOptionsDefaultOptions = angular.copy(fieldOptionsApiShape);
		  typeOptionsDefaultOptions.key = apiCheck.string.optional;
		
		  var formlyTypeOptions = apiCheck.shape({
		    name: apiCheck.string,
		    template: apiCheck.shape.ifNot("templateUrl", apiCheck.string).optional,
		    templateUrl: apiCheck.shape.ifNot("template", apiCheck.string).optional,
		    controller: apiCheck.oneOfType([apiCheck.func, apiCheck.string, apiCheck.array]).optional,
		    link: apiCheck.func.optional,
		    defaultOptions: apiCheck.oneOfType([apiCheck.func, apiCheck.shape(typeOptionsDefaultOptions)]).optional,
		    "extends": apiCheck.string.optional,
		    wrapper: specifyWrapperType.optional,
		    data: apiCheck.object.optional,
		    validateOptions: apiCheck.func.optional,
		    apiCheck: apiCheckProperty.optional,
		    apiCheckInstance: apiCheckInstanceProperty.optional,
		    apiCheckFunction: apiCheckFunctionProperty.optional,
		    apiCheckOptions: apiCheck.object.optional,
		    overwriteOk: apiCheck.bool.optional
		  }).strict;
		
		  angular.extend(apiCheck, {
		    formlyTypeOptions: formlyTypeOptions, formlyFieldOptions: formlyFieldOptions, formlyExpression: formlyExpression, formlyWrapperType: formlyWrapperType
		  });
		};

	/***/ },
	/* 11 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		
		var angular = __webpack_require__(4);
		
		module.exports = function (ngModule) {
		  ngModule.provider("formlyUsability", ["formlyVersion", "formlyApiCheck", function (formlyVersion, formlyApiCheck) {
		    var _this = this;
		
		    var errorsAndWarningsUrlPrefix = "https://github.com/formly-js/angular-formly/blob/" + formlyVersion + "/other/ERRORS_AND_WARNINGS.md#";
		    angular.extend(this, {
		      getFormlyError: getFormlyError,
		      getFieldError: getFieldError,
		      checkWrapper: checkWrapper,
		      checkWrapperTemplate: checkWrapperTemplate,
		      $get: function () {
		        return _this;
		      }
		    });
		
		    function getFieldError(errorInfoSlug, message, field) {
		      if (arguments.length < 3) {
		        field = message;
		        message = errorInfoSlug;
		        errorInfoSlug = null;
		      }
		      return new Error(getErrorMessage(errorInfoSlug, message) + (" Field definition: " + angular.toJson(field)));
		    }
		
		    function getFormlyError(errorInfoSlug, message) {
		      if (!message) {
		        message = errorInfoSlug;
		        errorInfoSlug = null;
		      }
		      return new Error(getErrorMessage(errorInfoSlug, message));
		    }
		
		    function getErrorMessage(errorInfoSlug, message) {
		      var url = "";
		      if (errorInfoSlug !== null) {
		        url = "" + errorsAndWarningsUrlPrefix + "" + errorInfoSlug;
		      }
		      return "Formly Error: " + message + ". " + url;
		    }
		
		    function checkWrapper(wrapper) {
		      formlyApiCheck["throw"](formlyApiCheck.formlyWrapperType, arguments, {
		        prefix: "formlyConfig.setWrapper",
		        urlSuffix: "setwrapper-validation-failed"
		      });
		    }
		
		    function checkWrapperTemplate(template, additionalInfo) {
		      var formlyTransclude = "<formly-transclude></formly-transclude>";
		      if (template.indexOf(formlyTransclude) === -1) {
		        throw getFormlyError("Template wrapper templates must use \"" + formlyTransclude + "\" somewhere in them. " + ("This one does not have \"<formly-transclude></formly-transclude>\" in it: " + template) + "\n" + ("Additional information: " + JSON.stringify(additionalInfo)));
		      }
		    }
		  }]);
		};

	/***/ },
	/* 12 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		
		var angular = __webpack_require__(4);
		var utils = __webpack_require__(24);
		
		module.exports = function (ngModule) {
		  ngModule.provider("formlyConfig", formlyConfig);
		
		  formlyConfig.tests = false ? require("./formlyConfig.test")(ngModule) : null;
		
		  function formlyConfig(formlyUsabilityProvider, formlyApiCheck) {
		    var _this2 = this;
		
		    var typeMap = {};
		    var templateWrappersMap = {};
		    var defaultWrapperName = "default";
		    var _this = this;
		    var getError = formlyUsabilityProvider.getFormlyError;
		
		    angular.extend(this, {
		      setType: setType,
		      getType: getType,
		      setWrapper: setWrapper,
		      getWrapper: getWrapper,
		      getWrapperByType: getWrapperByType,
		      removeWrapperByName: removeWrapperByName,
		      removeWrappersForType: removeWrappersForType,
		      disableWarnings: false,
		      extras: {
		        disableNgModelAttrsManipulator: false,
		        ngModelAttrsManipulatorPreferBound: false
		      },
		      templateManipulators: {
		        preWrapper: [],
		        postWrapper: []
		      },
		      $get: function () {
		        return _this2;
		      }
		    });
		
		    function setType(options) {
		      if (angular.isArray(options)) {
		        angular.forEach(options, setType);
		      } else if (angular.isObject(options)) {
		        checkType(options);
		        if (options["extends"]) {
		          extendTypeOptions(options);
		        }
		        typeMap[options.name] = options;
		      } else {
		        throw getError("You must provide an object or array for setType. You provided: " + JSON.stringify(arguments));
		      }
		    }
		
		    function checkType(options) {
		      formlyApiCheck["throw"](formlyApiCheck.formlyTypeOptions, arguments, {
		        prefix: "formlyConfig.setType",
		        url: "settype-validation-failed"
		      });
		      if (!options.overwriteOk) {
		        checkOverwrite(options.name, typeMap, options, "types");
		      } else {
		        options.overwriteOk = undefined;
		      }
		    }
		
		    function extendTypeOptions(options) {
		      var extendsType = getType(options["extends"], true, options);
		      extendTypeControllerFunction(options, extendsType);
		      extendTypeLinkFunction(options, extendsType);
		      extendTypeValidateOptionsFunction(options, extendsType);
		      extendTypeDefaultOptions(options, extendsType);
		      utils.reverseDeepMerge(options, extendsType);
		    }
		
		    function extendTypeControllerFunction(options, extendsType) {
		      var extendsCtrl = extendsType.controller;
		      if (!angular.isDefined(extendsCtrl)) {
		        return;
		      }
		      var optionsCtrl = options.controller;
		      if (angular.isDefined(optionsCtrl)) {
		        options.controller = function ($scope, $controller) {
		          $controller(extendsCtrl, { $scope: $scope });
		          $controller(optionsCtrl, { $scope: $scope });
		        };
		        options.controller.$inject = ["$scope", "$controller"];
		      } else {
		        options.controller = extendsCtrl;
		      }
		    }
		
		    function extendTypeLinkFunction(options, extendsType) {
		      var extendsFn = extendsType.link;
		      if (!angular.isDefined(extendsFn)) {
		        return;
		      }
		      var optionsFn = options.link;
		      if (angular.isDefined(optionsFn)) {
		        options.link = function () {
		          extendsFn.apply(undefined, arguments);
		          optionsFn.apply(undefined, arguments);
		        };
		      } else {
		        options.link = extendsFn;
		      }
		    }
		
		    function extendTypeValidateOptionsFunction(options, extendsType) {
		      var extendsFn = extendsType.validateOptions;
		      if (!angular.isDefined(extendsFn)) {
		        return;
		      }
		      var optionsFn = options.validateOptions;
		      var originalDefaultOptions = options.defaultOptions;
		      if (angular.isDefined(optionsFn)) {
		        options.validateOptions = function (options) {
		          optionsFn(options);
		          var mergedOptions = angular.copy(options);
		          var defaultOptions = originalDefaultOptions;
		          if (defaultOptions) {
		            if (angular.isFunction(defaultOptions)) {
		              defaultOptions = defaultOptions(mergedOptions);
		            }
		            utils.reverseDeepMerge(mergedOptions, defaultOptions);
		          }
		          extendsFn(mergedOptions);
		        };
		      } else {
		        options.validateOptions = extendsFn;
		      }
		    }
		
		    function extendTypeDefaultOptions(options, extendsType) {
		      var extendsDO = extendsType.defaultOptions;
		      if (!angular.isDefined(extendsDO)) {
		        return;
		      }
		      var optionsDO = options.defaultOptions;
		      var optionsDOIsFn = angular.isFunction(optionsDO);
		      var extendsDOIsFn = angular.isFunction(extendsDO);
		      if (extendsDOIsFn) {
		        options.defaultOptions = function defaultOptions(options) {
		          var extendsDefaultOptions = extendsDO(options);
		          var mergedDefaultOptions = {};
		          utils.reverseDeepMerge(mergedDefaultOptions, options, extendsDefaultOptions);
		          var extenderOptionsDefaultOptions = optionsDO;
		          if (optionsDOIsFn) {
		            extenderOptionsDefaultOptions = extenderOptionsDefaultOptions(mergedDefaultOptions);
		          }
		          utils.reverseDeepMerge(extendsDefaultOptions, extenderOptionsDefaultOptions);
		          return extendsDefaultOptions;
		        };
		      } else if (optionsDOIsFn) {
		        options.defaultOptions = function defaultOptions(options) {
		          var newDefaultOptions = {};
		          utils.reverseDeepMerge(newDefaultOptions, options, extendsDO);
		          return optionsDO(newDefaultOptions);
		        };
		      }
		    }
		
		    function getType(name, throwError, errorContext) {
		      if (!name) {
		        return undefined;
		      }
		      var type = typeMap[name];
		      if (!type && throwError === true) {
		        throw getError("There is no type by the name of \"" + name + "\": " + JSON.stringify(errorContext));
		      } else {
		        return type;
		      }
		    }
		
		    function setWrapper(_x, _x2) {
		      var _again = true;
		
		      _function: while (_again) {
		        _again = false;
		        var options = _x,
		            name = _x2;
		
		        if (angular.isArray(options)) {
		          return options.map(function (wrapperOptions) {
		            return setWrapper(wrapperOptions);
		          });
		        } else if (angular.isObject(options)) {
		          options.types = getOptionsTypes(options);
		          options.name = getOptionsName(options, name);
		          checkWrapperAPI(options);
		          templateWrappersMap[options.name] = options;
		          return options;
		        } else if (angular.isString(options)) {
		          _x = {
		            template: options,
		            name: name
		          };
		          _again = true;
		          continue _function;
		        }
		      }
		    }
		
		    function getOptionsTypes(options) {
		      if (angular.isString(options.types)) {
		        return [options.types];
		      }
		      if (!angular.isDefined(options.types)) {
		        return [];
		      } else {
		        return options.types;
		      }
		    }
		
		    function getOptionsName(options, name) {
		      return options.name || name || options.types.join(" ") || defaultWrapperName;
		    }
		
		    function checkWrapperAPI(options) {
		      formlyUsabilityProvider.checkWrapper(options);
		      if (options.template) {
		        formlyUsabilityProvider.checkWrapperTemplate(options.template, options);
		      }
		      if (!options.overwriteOk) {
		        checkOverwrite(options.name, templateWrappersMap, options, "templateWrappers");
		      } else {
		        delete options.overwriteOk;
		      }
		      checkWrapperTypes(options);
		    }
		
		    function checkWrapperTypes(options) {
		      var shouldThrow = !angular.isArray(options.types) || !options.types.every(angular.isString);
		      if (shouldThrow) {
		        throw getError("Attempted to create a template wrapper with types that is not a string or an array of strings");
		      }
		    }
		
		    function checkOverwrite(property, object, newValue, objectName) {
		      if (object.hasOwnProperty(property)) {
		        warn(["Attempting to overwrite " + property + " on " + objectName + " which is currently", "" + JSON.stringify(object[property]) + " with " + JSON.stringify(newValue), "To supress this warning, specify the property \"overwriteOk: true\""].join(" "));
		      }
		    }
		
		    function getWrapper(name) {
		      return templateWrappersMap[name || defaultWrapperName];
		    }
		
		    function getWrapperByType(type) {
		      /* jshint maxcomplexity:6 */
		      var wrappers = [];
		      for (var name in templateWrappersMap) {
		        if (templateWrappersMap.hasOwnProperty(name)) {
		          if (templateWrappersMap[name].types && templateWrappersMap[name].types.indexOf(type) !== -1) {
		            wrappers.push(templateWrappersMap[name]);
		          }
		        }
		      }
		      return wrappers;
		    }
		
		    function removeWrapperByName(name) {
		      var wrapper = templateWrappersMap[name];
		      delete templateWrappersMap[name];
		      return wrapper;
		    }
		
		    function removeWrappersForType(type) {
		      var wrappers = getWrapperByType(type);
		      if (!wrappers) {
		        return;
		      }
		      if (!angular.isArray(wrappers)) {
		        return removeWrapperByName(wrappers.name);
		      } else {
		        wrappers.forEach(function (wrapper) {
		          return removeWrapperByName(wrapper.name);
		        });
		        return wrappers;
		      }
		    }
		
		    function warn() {
		      if (!_this.disableWarnings) {
		        console.warn.apply(console, arguments);
		      }
		    }
		  }
		  formlyConfig.$inject = ["formlyUsabilityProvider", "formlyApiCheck"];
		};

	/***/ },
	/* 13 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		
		module.exports = function (ngModule) {
		  ngModule.constant("formlyVersion", ("4.2.4"));
		};

	/***/ },
	/* 14 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		
		module.exports = function (ngModule) {
		  ngModule.constant("formlyErrorAndWarningsUrlPrefix", "https://github.com/formly-js/angular-formly/blob/" + ("4.2.4") + "/other/ERRORS_AND_WARNINGS.md#");
		};

	/***/ },
	/* 15 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		
		module.exports = function (ngModule) {
		  ngModule.factory("formlyValidationMessages", function () {
		
		    var formlyValidationMessages = {
		      addTemplateOptionValueMessage: addTemplateOptionValueMessage,
		      addStringMessage: addStringMessage,
		      messages: {}
		    };
		
		    return formlyValidationMessages;
		
		    function addTemplateOptionValueMessage(name, prop, prefix, suffix, alternate) {
		      formlyValidationMessages.messages[name] = templateOptionValue(prop, prefix, suffix, alternate);
		    }
		
		    function addStringMessage(name, string) {
		      formlyValidationMessages.messages[name] = function () {
		        return string;
		      };
		    }
		
		    function templateOptionValue(prop, prefix, suffix, alternate) {
		      return function getValidationMessage(viewValue, modelValue, scope) {
		        if (scope.options.templateOptions[prop]) {
		          return "" + prefix + " " + scope.options.templateOptions[prop] + " " + suffix;
		        } else {
		          return alternate;
		        }
		      };
		    }
		  });
		};

	/***/ },
	/* 16 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		
		var utils = __webpack_require__(24);
		
		module.exports = function (ngModule) {
		  ngModule.factory("formlyUtil", formlyUtil);
		
		  formlyUtil.tests = false ? require("./formlyUtil.test")(ngModule) : null;
		
		  function formlyUtil() {
		    return utils;
		  }
		};

	/***/ },
	/* 17 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		
		var _toConsumableArray = function (arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } };
		
		module.exports = function (ngModule) {
		  ngModule.factory("formlyWarn", ["formlyConfig", "formlyErrorAndWarningsUrlPrefix", "$log", function (formlyConfig, formlyErrorAndWarningsUrlPrefix, $log) {
		    return function warn() {
		      if (!formlyConfig.disableWarnings) {
		        var args = Array.prototype.slice.call(arguments);
		        var warnInfoSlug = args.shift();
		        args.unshift("Formly Warning:");
		        args.push("" + formlyErrorAndWarningsUrlPrefix + "" + warnInfoSlug);
		        $log.warn.apply($log, _toConsumableArray(args));
		      }
		    };
		  }]);
		};

	/***/ },
	/* 18 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		
		module.exports = function (ngModule) {
		  ngModule.directive("formlyCustomValidation", formlyCustomValidation);
		
		  formlyCustomValidation.tests = false ? require("./formly-custom-validation.test")(ngModule) : null;
		
		  function formlyCustomValidation(formlyUtil, $q) {
		    return {
		      restrict: "A",
		      require: "ngModel",
		      link: function link(scope, el, attrs, ctrl) {
		        var validators = scope.$eval(attrs.formlyCustomValidation);
		        if (!validators) {
		          return;
		        }
		        checkValidators(validators);
		        scope.options.validation.messages = scope.options.validation.messages || {};
		
		        var useNewValidatorsApi = ctrl.hasOwnProperty("$validators") && !attrs.hasOwnProperty("useParsers");
		        angular.forEach(validators, function (validator, name) {
		          var message = validator.message;
		          if (message) {
		            scope.options.validation.messages[name] = function () {
		              return formlyUtil.formlyEval(scope, message, ctrl.$modelValue, ctrl.$viewValue);
		            };
		          }
		          validator = angular.isObject(validator) ? validator.expression : validator;
		          var isPossiblyAsync = !angular.isString(validator);
		          if (useNewValidatorsApi) {
		            setupWithValidators();
		          } else {
		            setupWithParsers();
		          }
		
		          function setupWithValidators() {
		            var validatorCollection = isPossiblyAsync ? "$asyncValidators" : "$validators";
		            ctrl[validatorCollection][name] = function (modelValue, viewValue) {
		              var value = formlyUtil.formlyEval(scope, validator, modelValue, viewValue);
		              if (isPossiblyAsync) {
		                return isPromiseLike(value) ? value : value ? $q.when(value) : $q.reject(value);
		              } else {
		                return value;
		              }
		            };
		          }
		
		          function setupWithParsers() {
		            var inFlightValidator = undefined;
		            ctrl.$parsers.unshift(function (viewValue) {
		              var isValid = formlyUtil.formlyEval(scope, validator, ctrl.$modelValue, viewValue);
		              if (isPromiseLike(isValid)) {
		                ctrl.$pending = ctrl.$pending || {};
		                ctrl.$pending[name] = true;
		                inFlightValidator = isValid;
		                isValid.then(function () {
		                  if (inFlightValidator === isValid) {
		                    ctrl.$setValidity(name, true);
		                  }
		                })["catch"](function () {
		                  if (inFlightValidator === isValid) {
		                    ctrl.$setValidity(name, false);
		                  }
		                })["finally"](function () {
		                  if (Object.keys(ctrl.$pending).length === 1) {
		                    delete ctrl.$pending;
		                  } else {
		                    delete ctrl.$pending[name];
		                  }
		                });
		              } else {
		                ctrl.$setValidity(name, isValid);
		              }
		              return viewValue;
		            });
		          }
		        });
		      }
		    };
		
		    function isPromiseLike(obj) {
		      return obj && angular.isFunction(obj.then);
		    }
		
		    function checkValidators(validators) {
		      var allowedProperties = ["expression", "message"];
		      var validatorsWithExtraProps = {};
		      angular.forEach(validators, function (validator, name) {
		        if (angular.isString(validator)) {
		          return;
		        }
		        var extraProps = [];
		        angular.forEach(validator, function (v, key) {
		          if (allowedProperties.indexOf(key) === -1) {
		            extraProps.push(key);
		          }
		        });
		        if (extraProps.length) {
		          validatorsWithExtraProps[name] = extraProps;
		        }
		      });
		      if (Object.keys(validatorsWithExtraProps).length) {
		        throw new Error(["Validators are only allowed to be functions or objects that have " + allowedProperties.join(", ") + ".", "You provided some extra properties: " + JSON.stringify(validatorsWithExtraProps)].join(" "));
		      }
		    }
		  }
		  formlyCustomValidation.$inject = ["formlyUtil", "$q"];
		};

	/***/ },
	/* 19 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		
		var angular = __webpack_require__(4);
		
		module.exports = function (ngModule) {
		  ngModule.directive("formlyField", formlyField);
		
		  formlyField.tests = false ? require("./formly-field.test")(ngModule) : null;
		
		  /**
		   * @ngdoc directive
		   * @name formlyField
		   * @restrict AE
		   */
		  function formlyField($http, $q, $compile, $templateCache, formlyConfig, formlyValidationMessages, formlyApiCheck, formlyUtil, formlyUsability, formlyWarn) {
		    return {
		      restrict: "AE",
		      transclude: true,
		      scope: {
		        options: "=",
		        model: "=",
		        formId: "=?",
		        index: "=?",
		        fields: "=?",
		        formState: "=?",
		        form: "=?"
		      },
		      controller: ["$scope", "$timeout", "$parse", "$controller", function fieldController($scope, $timeout, $parse, $controller) {
		        var opts = $scope.options;
		        var fieldType = opts.type && formlyConfig.getType(opts.type);
		        simplifyLife(opts);
		        mergeFieldOptionsWithTypeDefaults(opts, fieldType);
		        extendOptionsWithDefaults(opts, $scope.index);
		        checkApi(opts);
		        // set field id to link labels and fields
		        $scope.id = formlyUtil.getFieldId($scope.formId, opts, $scope.index);
		
		        // initalization
		        runExpressions();
		        setFormControl($scope, opts);
		        addModelWatcher($scope, opts);
		        addValidationMessages(opts);
		        // simplify things
		        // create $scope.to so template authors can reference to instead of $scope.options.templateOptions
		        $scope.to = $scope.options.templateOptions;
		        invokeControllers($scope, opts, fieldType);
		
		        // function definitions
		        function runExpressions() {
		          $timeout(function () {
		            // must run on next tick to make sure that the current value is correct.
		            var field = $scope.options;
		            var currentValue = valueGetterSetter();
		            angular.forEach(field.expressionProperties, function runExpression(expression, prop) {
		              var setter = $parse(prop).assign;
		              var promise = $q.when(formlyUtil.formlyEval($scope, expression, currentValue));
		              promise.then(function (value) {
		                setter(field, value);
		              });
		            });
		          });
		        }
		
		        function valueGetterSetter(newVal) {
		          if (!$scope.model || !$scope.options.key) {
		            return;
		          }
		          if (angular.isDefined(newVal)) {
		            $scope.model[$scope.options.key] = newVal;
		          }
		          return $scope.model[$scope.options.key];
		        }
		
		        function simplifyLife(options) {
		          // add a few empty objects (if they don't already exist) so you don't have to undefined check everywhere
		          formlyUtil.reverseDeepMerge(options, {
		            data: {},
		            templateOptions: {},
		            validation: {}
		          });
		        }
		
		        function mergeFieldOptionsWithTypeDefaults(options, type) {
		          if (type) {
		            mergeOptions(options, type.defaultOptions);
		          }
		          var properOrder = arrayify(options.optionsTypes).reverse(); // so the right things are overridden
		          angular.forEach(properOrder, function (typeName) {
		            mergeOptions(options, formlyConfig.getType(typeName, true, options).defaultOptions);
		          });
		        }
		
		        function mergeOptions(options, extraOptions) {
		          if (extraOptions) {
		            if (angular.isFunction(extraOptions)) {
		              extraOptions = extraOptions(options);
		            }
		            formlyUtil.reverseDeepMerge(options, extraOptions);
		          }
		        }
		
		        function extendOptionsWithDefaults(options, index) {
		          angular.extend(options, {
		            // attach the key in case the formly-field directive is used directly
		            key: options.key || index || 0,
		            value: valueGetterSetter,
		            runExpressions: runExpressions
		          });
		        }
		
		        // initialization functions
		        function setFormControl(scope, options) {
		          if (options.noFormControl) {
		            return;
		          }
		          scope.$watch("form[\"" + scope.id + "\"]", function (formControl) {
		            if (formControl) {
		              scope.fc = formControl; // shortcut for template authors
		              scope.options.formControl = formControl;
		              addShowMessagesWatcher(scope, options);
		            }
		          });
		        }
		
		        function addModelWatcher(scope, options) {
		          if (options.model) {
		            scope.$watch("options.model", runExpressions, true);
		          }
		        }
		
		        function addShowMessagesWatcher(scope, options) {
		          scope.$watch(function () {
		            if (typeof scope.options.validation.show === "boolean") {
		              return scope.fc.$invalid && scope.options.validation.show;
		            } else {
		              return scope.fc.$invalid && scope.fc.$touched;
		            }
		          }, function (show) {
		            options.validation.errorExistsAndShouldBeVisible = show;
		            scope.showError = show; // shortcut for template authors
		          });
		        }
		
		        function addValidationMessages(options) {
		          options.validation.messages = options.validation.messages || {};
		          angular.forEach(formlyValidationMessages.messages, function (expression, name) {
		            if (!options.validation.messages[name]) {
		              options.validation.messages[name] = function (viewValue, modelValue, scope) {
		                return formlyUtil.formlyEval(scope, expression, modelValue, viewValue);
		              };
		            }
		          });
		        }
		
		        function invokeControllers(scope) {
		          var options = arguments[1] === undefined ? {} : arguments[1];
		          var type = arguments[2] === undefined ? {} : arguments[2];
		
		          angular.forEach([type.controller, options.controller], function (controller) {
		            if (controller) {
		              $controller(controller, { $scope: scope });
		            }
		          });
		        }
		      }],
		      link: function fieldLink(scope, el) {
		        var type = scope.options.type && formlyConfig.getType(scope.options.type);
		        var args = arguments;
		        var thusly = this;
		        getFieldTemplate(scope.options).then(runManipulators(formlyConfig.templateManipulators.preWrapper)).then(transcludeInWrappers(scope.options)).then(runManipulators(formlyConfig.templateManipulators.postWrapper)).then(setElementTemplate)["catch"](function (error) {
		          formlyWarn("there-was-a-problem-setting-the-template-for-this-field", "There was a problem setting the template for this field ", scope.options, error);
		        });
		
		        function setElementTemplate(templateEl) {
		          el.html(asHtml(templateEl));
		          $compile(el.contents())(scope);
		          if (type && type.link) {
		            type.link.apply(thusly, args);
		          }
		          if (scope.options.link) {
		            scope.options.link.apply(thusly, args);
		          }
		        }
		
		        function runManipulators(manipulators) {
		          return function runManipulatorsOnTemplate(template) {
		            var chain = $q.when(template);
		            angular.forEach(manipulators, function (manipulator) {
		              chain = chain.then(function (template) {
		                return $q.when(manipulator(template, scope.options, scope)).then(function (newTemplate) {
		                  return angular.isString(newTemplate) ? newTemplate : asHtml(newTemplate);
		                });
		              });
		            });
		            return chain;
		          };
		        }
		      }
		    };
		
		    function asHtml(el) {
		      var wrapper = angular.element("<a></a>");
		      return wrapper.append(el).html();
		    }
		
		    function getFieldTemplate(options) {
		      var type = formlyConfig.getType(options.type, true, options);
		      var template = options.template || type && type.template;
		      var templateUrl = options.templateUrl || type && type.templateUrl;
		      if (!template && !templateUrl) {
		        throw formlyUsability.getFieldError("type-type-has-no-template", "Type '" + options.type + "' has not template. On element:", options);
		      }
		      return getTemplate(template || templateUrl, !template);
		    }
		
		    function getTemplate(template, isUrl) {
		      if (!isUrl) {
		        return $q.when(template);
		      } else {
		        var httpOptions = { cache: $templateCache };
		        return $http.get(template, httpOptions).then(function (response) {
		          return response.data;
		        })["catch"](function (error) {
		          formlyWarn("problem-loading-template-for-templateurl", "Problem loading template for " + template, error);
		        });
		      }
		    }
		
		    function transcludeInWrappers(options) {
		      var wrapper = getWrapperOption(options);
		
		      return function transcludeTemplate(template) {
		        if (!wrapper.length) {
		          return $q.when(template);
		        }
		
		        wrapper.forEach(function (wrapper) {
		          formlyUsability.checkWrapper(wrapper, options);
		          wrapper.validateOptions && wrapper.validateOptions(options);
		          runApiCheck(wrapper, options);
		        });
		        var promises = wrapper.map(function (w) {
		          return getTemplate(w.template || w.templateUrl, !w.template);
		        });
		        return $q.all(promises).then(function (wrappersTemplates) {
		          wrappersTemplates.forEach(function (wrapperTemplate, index) {
		            formlyUsability.checkWrapperTemplate(wrapperTemplate, wrapper[index]);
		          });
		          wrappersTemplates.reverse(); // wrapper 0 is wrapped in wrapper 1 and so on...
		          var totalWrapper = wrappersTemplates.shift();
		          wrappersTemplates.forEach(function (wrapperTemplate) {
		            totalWrapper = doTransclusion(totalWrapper, wrapperTemplate);
		          });
		          return doTransclusion(totalWrapper, template);
		        });
		      };
		    }
		
		    function doTransclusion(wrapper, template) {
		      var superWrapper = angular.element("<a></a>"); // this allows people not have to have a single root in wrappers
		      superWrapper.append(wrapper);
		      var transcludeEl = superWrapper.find("formly-transclude");
		      if (!transcludeEl.length) {
		        //try it using our custom find function
		        transcludeEl = formlyUtil.findByNodeName(superWrapper, "formly-transclude");
		      }
		      transcludeEl.replaceWith(template);
		      return superWrapper.html();
		    }
		
		    function getWrapperOption(options) {
		      var wrapper = options.wrapper;
		      // explicit null means no wrapper
		      if (wrapper === null) {
		        return [];
		      }
		
		      // nothing specified means use the default wrapper for the type
		      if (!wrapper) {
		        // get all wrappers that specify they apply to this type
		        wrapper = arrayify(formlyConfig.getWrapperByType(options.type));
		      } else {
		        wrapper = arrayify(wrapper).map(formlyConfig.getWrapper);
		      }
		
		      // get all wrappers for that this type specified that it uses.
		      var type = formlyConfig.getType(options.type, true, options);
		      if (type && type.wrapper) {
		        var typeWrappers = arrayify(type.wrapper).map(formlyConfig.getWrapper);
		        wrapper = wrapper.concat(typeWrappers);
		      }
		
		      // add the default wrapper last
		      var defaultWrapper = formlyConfig.getWrapper();
		      if (defaultWrapper) {
		        wrapper.push(defaultWrapper);
		      }
		      return wrapper;
		    }
		
		    function checkApi(options) {
		      formlyApiCheck["throw"](formlyApiCheck.formlyFieldOptions, arguments, {
		        prefix: "formly-field directive",
		        url: "formly-field-directive-validation-failed"
		      });
		      // validate with the type
		      var type = options.type && formlyConfig.getType(options.type);
		      if (type) {
		        if (type.validateOptions) {
		          type.validateOptions(options);
		        }
		        runApiCheck(type, options);
		      }
		    }
		
		    function runApiCheck(_ref, options) {
		      var apiCheck = _ref.apiCheck;
		      var apiCheckInstance = _ref.apiCheckInstance;
		      var apiCheckFunction = _ref.apiCheckFunction;
		      var apiCheckOptions = _ref.apiCheckOptions;
		
		      if (!apiCheck) {
		        return;
		      }
		      var instance = apiCheckInstance || formlyApiCheck;
		      var fn = apiCheckFunction || "warn";
		      var shape = instance.shape(apiCheck);
		      instance[fn](shape, [options], apiCheckOptions || {
		        prefix: "formly-field " + name,
		        url: formlyApiCheck.config.output.docsBaseUrl + "formly-field-type-apicheck-failed"
		      });
		    }
		  }
		  formlyField.$inject = ["$http", "$q", "$compile", "$templateCache", "formlyConfig", "formlyValidationMessages", "formlyApiCheck", "formlyUtil", "formlyUsability", "formlyWarn"];
		
		  function arrayify(obj) {
		    if (obj && !angular.isArray(obj)) {
		      obj = [obj];
		    } else if (!obj) {
		      obj = [];
		    }
		    return obj;
		  }
		};

	/***/ },
	/* 20 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		
		var _toConsumableArray = function (arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } };
		
		var _slice = Array.prototype.slice;
		var angular = __webpack_require__(4);
		
		module.exports = function (ngModule) {
		  ngModule.directive("formlyForm", formlyForm);
		
		  formlyForm.tests = false ? require("./formly-form.test")(ngModule) : null;
		
		  /**
		   * @ngdoc directive
		   * @name formlyForm
		   * @restrict E
		   */
		  function formlyForm(formlyUsability) {
		    var currentFormId = 1;
		    return {
		      restrict: "E",
		      template: function template(el, attrs) {
		        /* jshint -W033 */ // this because jshint is broken I guess...
		        var rootEl = attrs.rootEl || "ng-form";
		        return "\n          <" + rootEl + " class=\"formly\"\n                   name=\"form\"\n                   role=\"form\">\n            <div formly-field\n                 ng-repeat=\"field in fields track by $index\"\n                 ng-if=\"!field.hide\"\n                 class=\"formly-field {{field.type ? 'formly-field-' + field.type : ''}}\"\n                 options=\"field\"\n                 model=\"field.model || model\"\n                 fields=\"fields\"\n                 form=\"form\"\n                 form-id=\"formId\"\n                 form-state=\"options.formState\"\n                 index=\"$index\">\n            </div>\n            <div ng-transclude></div>\n          </" + rootEl + ">\n        ";
		      },
		      replace: true,
		      transclude: true,
		      scope: {
		        fields: "=",
		        model: "=", // we'll do our own warning to help with migrations
		        form: "=?",
		        options: "=?"
		      },
		      controller: ["$scope", function controller($scope) {
		        $scope.formId = "formly_" + currentFormId++;
		        $scope.options = $scope.options || {};
		        $scope.options.formState = $scope.options.formState || {};
		
		        angular.forEach($scope.fields, attachKey); // attaches a key based on the index if a key isn't specified
		        angular.forEach($scope.fields, setupWatchers); // setup watchers for all fields
		
		        // watch the model and evaluate watch expressions that depend on it.
		        $scope.$watch("model", function onResultUpdate(newResult) {
		          angular.forEach($scope.fields, function (field) {
		            /*jshint -W030 */
		            field.runExpressions && field.runExpressions(newResult);
		          });
		        }, true);
		
		        function attachKey(field, index) {
		          field.key = field.key || index || 0;
		        }
		
		        function setupWatchers(field, index) {
		          if (!angular.isDefined(field.watcher)) {
		            return;
		          }
		          var watchers = field.watcher;
		          if (!angular.isArray(watchers)) {
		            watchers = [watchers];
		          }
		          angular.forEach(watchers, function (watcher) {
		            if (!angular.isDefined(watcher.listener)) {
		              throw formlyUsability.getFieldError("all-field-watchers-must-have-a-listener", "All field watchers must have a listener", field);
		            }
		            var watchExpression = getWatchExpression(watcher, field, index);
		            var watchListener = getWatchListener(watcher, field, index);
		
		            var type = watcher.type || "$watch";
		            watcher.stopWatching = $scope[type](watchExpression, watchListener, watcher.watchDeep);
		          });
		        }
		
		        function getWatchExpression(watcher, field, index) {
		          var watchExpression = watcher.expression || "model['" + field.key + "']";
		          if (angular.isFunction(watchExpression)) {
		            // wrap the field's watch expression so we can call it with the field as the first arg
		            // and the stop function as the last arg as a helper
		            var originalExpression = watchExpression;
		            watchExpression = function formlyWatchExpression() {
		              var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));
		              return originalExpression.apply(undefined, _toConsumableArray(args));
		            };
		            watchExpression.displayName = "Formly Watch Expression for field for " + field.key;
		          }
		          return watchExpression;
		        }
		
		        function getWatchListener(watcher, field, index) {
		          var watchListener = watcher.listener;
		          if (angular.isFunction(watchListener)) {
		            // wrap the field's watch listener so we can call it with the field as the first arg
		            // and the stop function as the last arg as a helper
		            var originalListener = watchListener;
		            watchListener = function formlyWatchListener() {
		              var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));
		              return originalListener.apply(undefined, _toConsumableArray(args));
		            };
		            watchListener.displayName = "Formly Watch Listener for field for " + field.key;
		          }
		          return watchListener;
		        }
		
		        function modifyArgs(watcher, index) {
		          for (var _len = arguments.length, originalArgs = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
		            originalArgs[_key - 2] = arguments[_key];
		          }
		
		          return [$scope.fields[index]].concat(originalArgs, [watcher.stopWatching]);
		        }
		      }],
		      link: function link(scope, el, attrs) {
		        if (attrs.hasOwnProperty("result")) {
		          throw formlyUsability.getFormlyError("The \"result\" attribute on a formly-form is no longer valid. Use \"model\" instead");
		        }
		        if (attrs.name !== "form") {
		          // then they specified their own name
		          throw formlyUsability.getFormlyError("The \"name\" attribute on a formly-form is no longer valid. Use \"form\" instead");
		        }
		      }
		    };
		  }
		  formlyForm.$inject = ["formlyUsability"];
		};

	/***/ },
	/* 21 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		
		module.exports = function (ngModule) {
		  ngModule.directive("formlyFocus", ["$timeout", "$document", function ($timeout, $document) {
		    /* jshint -W052 */
		    return {
		      restrict: "A",
		      link: function link(scope, element, attrs) {
		        var previousEl = null;
		        var el = element[0];
		        var doc = $document[0];
		        attrs.$observe("formlyFocus", function (value) {
		          if (value === "true") {
		            $timeout(function () {
		              previousEl = doc.activeElement;
		              el.focus();
		            }, ~ ~attrs.focusWait);
		          } else if (value === "false") {
		            if (doc.activeElement === el) {
		              el.blur();
		              if (attrs.hasOwnProperty("refocus") && previousEl) {
		                previousEl.focus();
		              }
		            }
		          }
		        });
		      }
		    };
		  }]);
		};

	/***/ },
	/* 22 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		
		module.exports = function (ngModule) {
		  ngModule.run(addFormlyNgModelAttrsManipulator);
		
		  function addFormlyNgModelAttrsManipulator(formlyConfig) {
		    if (formlyConfig.extras.disableNgModelAttrsManipulator) {
		      return;
		    }
		    formlyConfig.templateManipulators.preWrapper.push(ngModelAttrsManipulator);
		
		    function ngModelAttrsManipulator(template, options, scope) {
		      /* jshint maxcomplexity:7 */
		      var el = angular.element("<a></a>");
		      var data = options.data;
		      if (data.noTouchy) {
		        return template;
		      }
		      el.append(template);
		      var modelEls = angular.element(el[0].querySelectorAll("[ng-model]"));
		      if (!modelEls || !modelEls.length) {
		        return template;
		      }
		
		      addIfNotPresent(modelEls, "id", scope.id);
		      addIfNotPresent(modelEls, "name", scope.id);
		
		      if (angular.isDefined(options.validators)) {
		        addIfNotPresent(modelEls, "formly-custom-validation", "options.validators");
		      }
		      if (angular.isDefined(options.modelOptions)) {
		        addIfNotPresent(modelEls, "ng-model-options", "options.modelOptions");
		        if (options.modelOptions.getterSetter) {
		          modelEls.attr("ng-model", "options.value");
		        }
		      }
		      addTemplateOptionsAttrs();
		
		      return el.html();
		
		      function addTemplateOptionsAttrs() {
		        if (!options.templateOptions && !options.expressionProperties) {
		          // no need to run these if there are no templateOptions or expressionProperties
		          return;
		        }
		        var to = options.templateOptions || {};
		        var ep = options.expressionProperties || {};
		
		        var ngModelAttributes = getBuiltinAttributes();
		
		        // extend with the user's specifications winning
		        angular.extend(ngModelAttributes, options.ngModelAttrs);
		
		        angular.forEach(ngModelAttributes, function (val, name) {
		          /* jshint maxcomplexity:10 */
		          var attrVal = undefined;
		          var attrName = undefined;
		          var ref = "options.templateOptions['" + name + "']";
		          var toVal = to[name];
		          var epVal = getEpValue(ep, name);
		
		          var inTo = angular.isDefined(toVal);
		          var inEp = angular.isDefined(epVal);
		          if (val.value) {
		            // I realize this looks backwards, but it's right, trust me...
		            attrName = val.value;
		            attrVal = name;
		          } else if (val.expression && inTo) {
		            attrName = val.expression;
		            if (angular.isString(to[name])) {
		              attrVal = "$eval(" + ref + ")";
		            } else if (angular.isFunction(to[name])) {
		              attrVal = "" + ref + "(model[options.key], options, this, $event)";
		            } else {
		              throw new Error("options.templateOptions." + name + " must be a string or function: " + JSON.stringify(options));
		            }
		          } else if (val.bound && inEp) {
		            attrName = val.bound;
		            attrVal = ref;
		          } else if (val.attribute && inEp) {
		            attrName = val.attribute;
		            attrVal = "{{" + ref + "}}";
		          } else if (val.attribute && inTo) {
		            attrName = val.attribute;
		            attrVal = toVal;
		          } else if (val.bound && inTo) {
		            attrName = val.bound;
		            attrVal = ref;
		          }
		          if (angular.isDefined(attrName) && angular.isDefined(attrVal)) {
		            addIfNotPresent(modelEls, attrName, attrVal);
		          }
		        });
		      }
		
		      function getBuiltinAttributes() {
		        var ngModelAttributes = {
		          focus: {
		            attribute: "formly-focus"
		          }
		        };
		        var boundOnly = [];
		        var bothAttributeAndBound = ["required", "disabled", "pattern", "minlength"];
		        var expressionOnly = ["change", "keydown", "keyup", "keypress", "click", "focus", "blur"];
		        var attributeOnly = ["placeholder", "min", "max", "tabindex", "type"];
		        if (formlyConfig.extras.ngModelAttrsManipulatorPreferBound) {
		          boundOnly.push("maxlength");
		        } else {
		          bothAttributeAndBound.push("maxlength");
		        }
		
		        angular.forEach(boundOnly, function (item) {
		          ngModelAttributes[item] = { bound: "ng-" + item };
		        });
		
		        angular.forEach(bothAttributeAndBound, function (item) {
		          ngModelAttributes[item] = { attribute: item, bound: "ng-" + item };
		        });
		
		        angular.forEach(expressionOnly, function (item) {
		          var propName = "on" + item.substr(0, 1).toUpperCase() + item.substr(1);
		          ngModelAttributes[propName] = { expression: "ng-" + item };
		        });
		
		        angular.forEach(attributeOnly, function (item) {
		          ngModelAttributes[item] = { attribute: item };
		        });
		        return ngModelAttributes;
		      }
		
		      function getEpValue(ep, name) {
		        return ep["templateOptions." + name] || ep["templateOptions['" + name + "']"] || ep["templateOptions[\"" + name + "\"]"];
		      }
		
		      function addIfNotPresent(el, attr, val) {
		        if (!el.attr(attr)) {
		          el.attr(attr, val);
		        }
		      }
		    }
		  }
		  addFormlyNgModelAttrsManipulator.$inject = ["formlyConfig"];
		};

	/***/ },
	/* 23 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		
		module.exports = function (ngModule) {
		  ngModule.run(addCustomTags);
		
		  function addCustomTags($document) {
		
		    if ($document && $document.get) {
		      //IE8 check ->
		      // http://stackoverflow.com/questions/10964966/detect-ie-version-prior-to-v9-in-javascript/10965203#10965203
		      var document = $document.get(0);
		      var div = document.createElement("div");
		      div.innerHTML = "<!--[if lt IE 9]><i></i><![endif]-->";
		      var isIeLessThan9 = div.getElementsByTagName("i").length === 1;
		
		      if (isIeLessThan9) {
		        //add the custom elements that we need for formly
		        var customElements = ["formly-field", "formly-form", "formly-custom-validation", "formly-focus", "formly-transpose"];
		
		        for (var i = 0; i < customElements.length; i++) {
		          document.createElement(customElements[i]);
		        }
		      }
		    }
		  }
		  addCustomTags.$inject = ["$document"];
		};

	/***/ },
	/* 24 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		
		var angular = __webpack_require__(4);
		
		module.exports = { formlyEval: formlyEval, getFieldId: getFieldId, reverseDeepMerge: reverseDeepMerge, findByNodeName: findByNodeName };
		
		function formlyEval(scope, expression, modelValue, viewValue) {
		  if (angular.isFunction(expression)) {
		    return expression(viewValue || modelValue, modelValue, scope);
		  } else {
		    return scope.$eval(expression, {
		      $viewValue: viewValue || modelValue,
		      $modelValue: modelValue
		    });
		  }
		}
		
		function getFieldId(formId, options, index) {
		  var type = options.type;
		  if (!type && options.template) {
		    type = "template";
		  } else if (!type && options.templateUrl) {
		    type = "templateUrl";
		  }
		
		  return [formId, type, options.key, index].join("_");
		}
		
		function reverseDeepMerge(dest) {
		  angular.forEach(arguments, function (src, index) {
		    if (!index) {
		      return;
		    }
		    angular.forEach(src, function (val, prop) {
		      if (!angular.isDefined(dest[prop])) {
		        dest[prop] = angular.copy(val);
		      } else if (objAndSameType(dest[prop], val)) {
		        reverseDeepMerge(dest[prop], val);
		      }
		    });
		  });
		}
		
		function objAndSameType(obj1, obj2) {
		  return angular.isObject(obj1) && angular.isObject(obj2) && Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2);
		}
		
		//recurse down a node tree to find a node with matching nodeName, for custom tags jQuery.find doesn't work in IE8
		function findByNodeName(el, nodeName) {
		  if (!el.prop) {
		    // not a jQuery or jqLite object -> wrap it
		    el = angular.element(el);
		  }
		
		  if (el.prop("nodeName") === nodeName.toUpperCase()) {
		    return el;
		  }
		
		  var c = el.children();
		  for (var i = 0; c && i < c.length; i++) {
		    var node = findByNodeName(c[i], nodeName);
		    if (node) {
		      return node;
		    }
		  }
		}

	/***/ }
	/******/ ])
	});

	//# sourceMappingURL=data:application/json;base64,

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	// apiCheck.js v6.0.11 built with ♥ by Kent C. Dodds (ó ì_í)=óò=(ì_í ò)

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory();
		else if(typeof define === 'function' && define.amd)
			define(factory);
		else if(typeof exports === 'object')
			exports["apiCheck"] = factory();
		else
			root["apiCheck"] = factory();
	})(this, function() {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;
	/******/
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/*!******************!*\
	  !*** ./index.js ***!
	  \******************/
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		
		module.exports = __webpack_require__(/*! ./apiCheck */ 1);

	/***/ },
	/* 1 */
	/*!*********************!*\
	  !*** ./apiCheck.js ***!
	  \*********************/
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		
		var apiCheckUtil = __webpack_require__(/*! ./apiCheckUtil */ 2);
		var each = apiCheckUtil.each;
		var isError = apiCheckUtil.isError;
		var t = apiCheckUtil.t;
		var arrayify = apiCheckUtil.arrayify;
		var getCheckerDisplay = apiCheckUtil.getCheckerDisplay;
		var typeOf = apiCheckUtil.typeOf;
		var getError = apiCheckUtil.getError;
		
		var checkers = __webpack_require__(/*! ./checkers */ 3);
		var apiCheckApiCheck = getApiCheckInstance({
		  output: { prefix: "apiCheck" }
		});
		var checkerFnChecker = checkers.func.withProperties({
		  type: checkers.oneOfType([checkers.string, checkerTypeType]).optional,
		  displayName: checkers.string.optional,
		  shortType: checkers.string.optional,
		  notOptional: checkers.bool.optional,
		  childrenCheckers: checkers.arrayOf(checkers.string).optional
		});
		
		var getApiCheckInstanceCheckers = [checkers.shape({
		  output: checkers.shape({
		    prefix: checkers.string.optional
		  })
		}), checkers.objectOf(checkerFnChecker).optional];
		
		module.exports = getApiCheckInstance;
		module.exports.internalChecker = apiCheckApiCheck;
		module.exports.utils = apiCheckUtil;
		
		each(checkers, function (checker, name) {
		  return module.exports[name] = checker;
		});
		
		function getApiCheckInstance() {
		  var config = arguments[0] === undefined ? {} : arguments[0];
		  var extraCheckers = arguments[1] === undefined ? {} : arguments[1];
		
		  if (apiCheckApiCheck && arguments.length) {
		    apiCheckApiCheck["throw"](getApiCheckInstanceCheckers, arguments, {
		      prefix: "creating an instance of apiCheck"
		    });
		  }
		
		  var disabled = false;
		  var additionalProperties = {
		    "throw": getApiCheck(true),
		    warn: getApiCheck(false),
		    disable: function () {
		      return disabled = true;
		    },
		    enable: function () {
		      return disabled = false;
		    },
		    getErrorMessage: getErrorMessage,
		    handleErrorMessage: handleErrorMessage,
		    config: {
		      output: config.output || {
		        prefix: "",
		        suffix: "",
		        docsBaseUrl: ""
		      },
		      verbose: config.verbose || false
		    },
		    utils: apiCheckUtil
		  };
		
		  each(additionalProperties, function (wrapper, name) {
		    return apiCheck[name] = wrapper;
		  });
		  each(checkers, function (checker, name) {
		    return apiCheck[name] = checker;
		  });
		  each(extraCheckers, function (checker, name) {
		    return apiCheck[name] = checker;
		  });
		
		  return apiCheck;
		
		  /**
		   * This is the instance function. Other things are attached to this see additional properties above.
		   * @param api {Array}
		   * @param args {arguments}
		   * @param output {Object}
		   * @returns {Object} - if this has a failed = true property, then it failed
		   */
		  function apiCheck(api, args, output) {
		    /* jshint maxcomplexity:8 */
		    if (disabled) {
		      return {
		        apiTypes: {}, argTypes: {},
		        passed: true, message: "",
		        failed: false
		      }; // empty version of what is normally returned
		    }
		    checkApiCheckApi(arguments);
		    var arrayArgs = Array.prototype.slice.call(args);
		    var messages = undefined;
		    api = arrayify(api);
		    var enoughArgs = checkEnoughArgs(api, arrayArgs);
		    if (enoughArgs.length) {
		      messages = enoughArgs;
		    } else {
		      messages = checkApiWithArgs(api, arrayArgs);
		    }
		    var returnObject = getTypes(api, arrayArgs);
		    if (messages.length) {
		      returnObject.message = apiCheck.getErrorMessage(api, arrayArgs, messages, output);
		      returnObject.failed = true;
		      returnObject.passed = false;
		    } else {
		      returnObject.message = "";
		      returnObject.passed = true;
		      returnObject.failed = false;
		    }
		    return returnObject;
		  }
		
		  function checkApiCheckApi(args) {
		    var os = checkers.string.optional;
		    var api = [// dog fooding here
		    checkers.typeOrArrayOf(checkerFnChecker), checkers.oneOfType([checkers.args, checkers.array]), checkers.shape({
		      prefix: os, suffix: os, urlSuffix: os, // appended case
		      onlyPrefix: os, onlySuffix: os, url: os // override case
		    }).strict.optional];
		    var errors = checkEnoughArgs(api, args);
		    if (!errors.length) {
		      errors = checkApiWithArgs(api, args);
		    }
		    var message = undefined;
		    if (errors.length) {
		      message = apiCheck.getErrorMessage(api, args, errors, {
		        prefix: "apiCheck"
		      });
		      apiCheck.handleErrorMessage(message, true);
		    }
		  }
		
		  function getApiCheck(shouldThrow) {
		    return function apiCheckWrapper(api, args, output) {
		      var result = apiCheck(api, args, output);
		      apiCheck.handleErrorMessage(result.message, shouldThrow);
		      return result; // wont get here if an error is thrown
		    };
		  }
		
		  function handleErrorMessage(message, shouldThrow) {
		    if (shouldThrow && message) {
		      throw new Error(message);
		    } else if (message) {
		      console.warn(message);
		    }
		  }
		
		  function getErrorMessage(api, args) {
		    var messages = arguments[2] === undefined ? [] : arguments[2];
		    var output = arguments[3] === undefined ? {} : arguments[3];
		
		    var gOut = apiCheck.config.output || {};
		    var prefix = getPrefix();
		    var suffix = getSuffix();
		    var url = getUrl();
		    var message = "apiCheck failed! " + messages.join(", ");
		    var passedAndShouldHavePassed = "\n\n" + buildMessageFromApiAndArgs(api, args);
		    return ("" + prefix + " " + message + " " + suffix + " " + (url || "") + "" + passedAndShouldHavePassed).trim();
		
		    function getPrefix() {
		      var prefix = output.onlyPrefix;
		      if (!prefix) {
		        prefix = ("" + (gOut.prefix || "") + " " + (output.prefix || "")).trim();
		      }
		      return prefix;
		    }
		
		    function getSuffix() {
		      var suffix = output.onlySuffix;
		      if (!suffix) {
		        suffix = ("" + (output.suffix || "") + " " + (gOut.suffix || "")).trim();
		      }
		      return suffix;
		    }
		
		    function getUrl() {
		      var url = output.url;
		      if (!url) {
		        url = gOut.docsBaseUrl && output.urlSuffix && ("" + gOut.docsBaseUrl + "" + output.urlSuffix).trim();
		      }
		      return url;
		    }
		  }
		
		  function buildMessageFromApiAndArgs(api, args) {
		    api = arrayify(api);
		    args = arrayify(args);
		
		    var _getTypes = getTypes(api, args);
		
		    var apiTypes = _getTypes.apiTypes;
		    var argTypes = _getTypes.argTypes;
		
		    var copy = args.slice();
		    var replacedItems = [];
		    replaceFunctionWithName(copy);
		    var passedArgs = copy.length ? JSON.stringify(copy, null, 2) : "nothing";
		    argTypes = args.length ? JSON.stringify(argTypes, null, 2) : "nothing";
		    apiTypes = apiTypes.length ? JSON.stringify(apiTypes, null, 2) : "nothing";
		    var n = "\n";
		    return ["You passed:" + n + "" + passedArgs, "With the types of:" + n + "" + argTypes, "The API calls for:" + n + "" + apiTypes].join(n + n);
		
		    function replaceFunctionWithName(obj) {
		      each(obj, function (val, name) {
		        /* jshint maxcomplexity:6 */
		        if (replacedItems.indexOf(val) === -1) {
		          // avoid recursive problems
		          replacedItems.push(val);
		          if (typeof val === "object") {
		            replaceFunctionWithName(obj);
		          } else if (typeof val === "function") {
		            obj[name] = val.displayName || val.name || "anonymous function";
		          }
		        }
		      });
		    }
		  }
		
		  function getTypes(api, args) {
		    api = arrayify(api);
		    args = arrayify(args);
		    var apiTypes = api.map(function (checker, index) {
		      return getCheckerDisplay(checker, { terse: !apiCheck.config.verbose, obj: args[index], addHelpers: true });
		    });
		    var argTypes = args.map(getArgDisplay);
		    return { argTypes: argTypes, apiTypes: apiTypes };
		  }
		}
		
		// STATELESS FUNCTIONS
		
		/**
		 * This is where the magic happens for actually checking the arguments with the api.
		 * @param api {Array} - checkers
		 * @param args {Array} - and arguments object
		 * @returns {Array}
		 */
		function checkApiWithArgs(api, args) {
		  /* jshint maxcomplexity:7 */
		  var messages = [];
		  var failed = false;
		  var checkerIndex = 0;
		  var argIndex = 0;
		  var arg = undefined,
		      checker = undefined,
		      res = undefined,
		      lastChecker = undefined,
		      argName = undefined,
		      argFailed = undefined,
		      skipPreviousChecker = undefined;
		  /* jshint -W084 */
		  while ((checker = api[checkerIndex++]) && argIndex < args.length) {
		    arg = args[argIndex++];
		    argName = "Argument " + argIndex + (checker.isOptional ? " (optional)" : "");
		    res = checker(arg, null, argName);
		    argFailed = isError(res);
		    lastChecker = checkerIndex >= api.length;
		    skipPreviousChecker = checkerIndex > 1 && api[checkerIndex - 1].isOptional;
		    if (argFailed && lastChecker || argFailed && !lastChecker && !checker.isOptional && !skipPreviousChecker) {
		      failed = true;
		      messages.push(getCheckerErrorMessage(res, checker, arg));
		    } else if (argFailed && checker.isOptional) {
		      argIndex--;
		    } else {
		      messages.push("" + t(argName) + " passed");
		    }
		  }
		  return failed ? messages : [];
		}
		
		checkerTypeType.type = "function with __apiCheckData property and `${function.type}` property";
		function checkerTypeType(checkerType, name, location) {
		  var apiCheckDataChecker = checkers.shape({
		    type: checkers.string,
		    optional: checkers.bool
		  });
		  var asFunc = checkers.func.withProperties({ __apiCheckData: apiCheckDataChecker });
		  var asShape = checkers.shape({ __apiCheckData: apiCheckDataChecker });
		  var wrongShape = checkers.oneOfType([asFunc, asShape])(checkerType, name, location);
		  if (isError(wrongShape)) {
		    return wrongShape;
		  }
		  if (typeof checkerType !== "function" && !checkerType.hasOwnProperty(checkerType.__apiCheckData.type)) {
		    return getError(name, location, checkerTypeType.type);
		  }
		}
		
		function getCheckerErrorMessage(res, checker, val) {
		  var checkerHelp = getCheckerHelp(checker, val);
		  checkerHelp = checkerHelp ? " - " + checkerHelp : "";
		  return res.message + checkerHelp;
		}
		
		function getCheckerHelp(_ref, val) {
		  var help = _ref.help;
		
		  if (!help) {
		    return "";
		  }
		  if (typeof help === "function") {
		    help = help(val);
		  }
		  return help;
		}
		
		function checkEnoughArgs(api, args) {
		  var requiredArgs = api.filter(function (a) {
		    return !a.isOptional;
		  });
		  if (args.length < requiredArgs.length) {
		    return ["Not enough arguments specified. Requires `" + requiredArgs.length + "`, you passed `" + args.length + "`"];
		  } else {
		    return [];
		  }
		}
		
		var eachable = {
		  Object: getDisplay,
		  Array: getDisplay
		};
		
		function getDisplay(obj) {
		  var argDisplay = {};
		  each(obj, function (v, k) {
		    return argDisplay[k] = getArgDisplay(v);
		  });
		  return argDisplay;
		}
		
		function getArgDisplay(arg) {
		  var cName = arg && arg.constructor && arg.constructor.name;
		  return cName ? eachable[cName] ? eachable[cName](arg) : cName : arg === null ? "null" : typeOf(arg);
		}

	/***/ },
	/* 2 */
	/*!*************************!*\
	  !*** ./apiCheckUtil.js ***!
	  \*************************/
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		
		var _defineProperty = function (obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); };
		
		var checkerHelpers = {
		  makeOptional: makeOptional, wrapInSpecified: wrapInSpecified, setupChecker: setupChecker
		};
		
		module.exports = {
		  each: each, copy: copy, typeOf: typeOf, arrayify: arrayify, getCheckerDisplay: getCheckerDisplay, isError: isError, list: list, getError: getError, nAtL: nAtL, t: t, undef: undef, checkerHelpers: checkerHelpers
		};
		
		function copy(obj) {
		  var type = typeOf(obj);
		  var daCopy = undefined;
		  if (type === "array") {
		    daCopy = [];
		  } else if (type === "object") {
		    daCopy = {};
		  } else {
		    return obj;
		  }
		  each(obj, function (val, key) {
		    daCopy[key] = val; // cannot single-line this because we don't want to abort the each
		  });
		  return daCopy;
		}
		
		function typeOf(obj) {
		  if (Array.isArray(obj)) {
		    return "array";
		  } else if (obj instanceof RegExp) {
		    return "object";
		  } else {
		    return typeof obj;
		  }
		}
		
		function getCheckerDisplay(checker, options) {
		  /* jshint maxcomplexity:17 */
		  var display = undefined;
		  var short = options && options.short;
		  if (short && checker.shortType) {
		    display = checker.shortType;
		  } else if (!short && typeof checker.type === "object" || checker.type === "function") {
		    display = getCheckerType(checker, options);
		  } else {
		    display = getCheckerType(checker, options) || checker.displayName || checker.name;
		  }
		  return display;
		}
		
		function getCheckerType(_ref, options) {
		  var type = _ref.type;
		
		  if (typeof type === "function") {
		    var __apiCheckData = type.__apiCheckData;
		    var typeTypes = type(options);
		    type = _defineProperty({
		      __apiCheckData: __apiCheckData }, __apiCheckData.type, typeTypes);
		  }
		  return type;
		}
		
		function arrayify(obj) {
		  if (!obj) {
		    return [];
		  } else if (Array.isArray(obj)) {
		    return obj;
		  } else {
		    return [obj];
		  }
		}
		
		function each(obj, iterator, context) {
		  if (Array.isArray(obj)) {
		    return eachArry.apply(undefined, arguments);
		  } else {
		    return eachObj.apply(undefined, arguments);
		  }
		}
		
		function eachObj(obj, iterator, context) {
		  var ret;
		  var hasOwn = Object.prototype.hasOwnProperty;
		  for (var key in obj) {
		    if (hasOwn.call(obj, key)) {
		      ret = iterator.call(context, obj[key], key, obj);
		      if (ret === false) {
		        return ret;
		      }
		    }
		  }
		  return true;
		}
		
		function eachArry(obj, iterator, context) {
		  var ret;
		  var length = obj.length;
		  for (var i = 0; i < length; i++) {
		    ret = iterator.call(context, obj[i], i, obj);
		    if (ret === false) {
		      return ret;
		    }
		  }
		  return true;
		}
		
		function isError(obj) {
		  return obj instanceof Error;
		}
		
		function list(arry, join, finalJoin) {
		  arry = arrayify(arry);
		  var copy = arry.slice();
		  var last = copy.pop();
		  if (copy.length === 1) {
		    join = " ";
		  }
		  return copy.join(join) + ("" + (copy.length ? join + finalJoin : "") + "" + last);
		}
		
		function getError(name, location, checkerType) {
		  var stringType = typeof checkerType !== "object" ? checkerType : JSON.stringify(checkerType);
		  return new Error("" + nAtL(name, location) + " must be " + t(stringType));
		}
		
		function nAtL(name, location) {
		  var tName = t(name || "value");
		  var tLocation = !location ? "" : " at " + t(location);
		  return "" + tName + "" + tLocation;
		}
		
		function t(thing) {
		  return "`" + thing + "`";
		}
		
		function undef(thing) {
		  return typeof thing === "undefined";
		}
		
		function makeOptional(checker) {
		  checker.optional = function optionalCheck(val, name, location, obj) {
		    if (!undef(val)) {
		      return checker(val, name, location, obj);
		    }
		  };
		  checker.optional.isOptional = true;
		  checker.optional.type = checker.type;
		  checker.optional.displayName = checker.displayName;
		  if (typeof checker.optional.type === "object") {
		    checker.optional.type = copy(checker.optional.type); // make our own copy of this
		  } else if (typeof checker.optional.type === "function") {
		    checker.optional.type = function () {
		      return checker.type.apply(checker, arguments);
		    };
		  } else {
		    checker.optional.type += " (optional)";
		    return;
		  }
		  checker.optional.type.__apiCheckData = copy(checker.type.__apiCheckData) || {}; // and this
		  checker.optional.type.__apiCheckData.optional = true;
		}
		
		function wrapInSpecified(fn, type, shortType) {
		  fn.type = type;
		  fn.shortType = shortType;
		  function specifiedChecker(val, name, location, obj) {
		    var u = undef(val);
		    if (u && !fn.isOptional) {
		      var tLocation = location ? " in " + t(location) : "";
		      var _type = getCheckerDisplay(fn, { short: true });
		      var stringType = typeof _type !== "object" ? _type : JSON.stringify(_type);
		      return new Error("Required " + t(name) + " not specified" + tLocation + ". Must be " + t(stringType));
		    } else {
		      return fn(val, name, location, obj);
		    }
		  }
		  specifiedChecker.type = fn.type;
		  specifiedChecker.shortType = fn.shortType;
		  specifiedChecker.notOptional = fn.notOptional;
		  specifiedChecker.childrenCheckers = fn.childrenCheckers;
		  setupChecker(specifiedChecker);
		  setupChecker(fn);
		  return specifiedChecker;
		}
		
		function setupChecker(checker) {
		  checker.displayName = "apiCheck " + t(checker.shortType || checker.type || checker.name) + " type checker";
		  if (!checker.notOptional) {
		    makeOptional(checker);
		  }
		  each(checker.childrenCheckers, function (childName) {
		    setupChecker(checker[childName]);
		  });
		}

	/***/ },
	/* 3 */
	/*!*********************!*\
	  !*** ./checkers.js ***!
	  \*********************/
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		
		var _require = __webpack_require__(/*! ./apiCheckUtil */ 2);
		
		var typeOf = _require.typeOf;
		var each = _require.each;
		var copy = _require.copy;
		var getCheckerDisplay = _require.getCheckerDisplay;
		var isError = _require.isError;
		var arrayify = _require.arrayify;
		var list = _require.list;
		var getError = _require.getError;
		var nAtL = _require.nAtL;
		var t = _require.t;
		var checkerHelpers = _require.checkerHelpers;
		var undef = _require.undef;
		
		var checkers = module.exports = {
		  array: getTypeOfChecker("Array"),
		  bool: getTypeOfChecker("Boolean"),
		  number: getTypeOfChecker("Number"),
		  string: getTypeOfChecker("String"),
		  func: getFunctionChecker(),
		  object: getObjectChecker(),
		
		  instanceOf: instanceCheckGetter,
		  oneOf: oneOfCheckGetter,
		  oneOfType: oneOfTypeCheckGetter,
		
		  arrayOf: arrayOfCheckGetter,
		  objectOf: objectOfCheckGetter,
		  typeOrArrayOf: typeOrArrayOfCheckGetter,
		
		  shape: getShapeCheckGetter(),
		  args: argumentsCheckerGetter(),
		
		  any: anyCheckGetter()
		};
		
		each(checkers, checkerHelpers.setupChecker);
		
		function getTypeOfChecker(type) {
		  var lType = type.toLowerCase();
		  return checkerHelpers.wrapInSpecified(function typeOfCheckerDefinition(val, name, location) {
		    if (typeOf(val) !== lType) {
		      return getError(name, location, type);
		    }
		  }, type);
		}
		
		function getFunctionChecker() {
		  var type = "Function";
		  var functionChecker = checkerHelpers.wrapInSpecified(function functionCheckerDefinition(val, name, location) {
		    if (typeOf(val) !== "function") {
		      return getError(name, location, type);
		    }
		  }, type);
		
		  functionChecker.withProperties = function getWithPropertiesChecker(properties) {
		    var apiError = checkers.objectOf(checkers.func)(properties, "properties", "apiCheck.func.withProperties");
		    if (isError(apiError)) {
		      throw apiError;
		    }
		    var shapeChecker = checkers.shape(properties, true);
		    shapeChecker.type.__apiCheckData.type = "func.withProperties";
		
		    return checkerHelpers.wrapInSpecified(function functionWithPropertiesChecker(val, name, location) {
		      var notFunction = checkers.func(val, name, location);
		      if (isError(notFunction)) {
		        return notFunction;
		      }
		      return shapeChecker(val, name, location);
		    }, shapeChecker.type, "func.withProperties");
		  };
		
		  functionChecker.childrenCheckers = ["withProperties"];
		  return functionChecker;
		}
		
		function getObjectChecker() {
		  var type = "Object";
		  var nullType = "Object (null ok)";
		  var objectNullOkChecker = checkerHelpers.wrapInSpecified(function objectNullOkCheckerDefinition(val, name, location) {
		    if (typeOf(val) !== "object") {
		      return getError(name, location, nullType);
		    }
		  }, nullType);
		
		  var objectChecker = checkerHelpers.wrapInSpecified(function objectCheckerDefinition(val, name, location) {
		    if (val === null || isError(objectNullOkChecker(val, name, location))) {
		      return getError(name, location, objectChecker.type);
		    }
		  }, type);
		
		  objectChecker.nullOk = objectNullOkChecker;
		  objectChecker.childrenCheckers = ["nullOk"];
		
		  return objectChecker;
		}
		
		function instanceCheckGetter(classToCheck) {
		  return checkerHelpers.wrapInSpecified(function instanceCheckerDefinition(val, name, location) {
		    if (!(val instanceof classToCheck)) {
		      return getError(name, location, classToCheck.name);
		    }
		  }, classToCheck.name);
		}
		
		function oneOfCheckGetter(enums) {
		  var type = {
		    __apiCheckData: { optional: false, type: "enum" },
		    "enum": enums
		  };
		  var shortType = "enum[" + enums.map(function (enm) {
		    return JSON.stringify(enm);
		  }).join(", ") + "]";
		  return checkerHelpers.wrapInSpecified(function oneOfCheckerDefinition(val, name, location) {
		    if (!enums.some(function (enm) {
		      return enm === val;
		    })) {
		      return getError(name, location, shortType);
		    }
		  }, type, shortType);
		}
		
		function oneOfTypeCheckGetter(checkers) {
		  var type = {
		    __apiCheckData: { optional: false, type: "oneOfType" },
		    oneOfType: checkers.map(function (checker) {
		      return getCheckerDisplay(checker);
		    })
		  };
		  var checkersDisplay = checkers.map(function (checker) {
		    return getCheckerDisplay(checker, { short: true });
		  });
		  var shortType = "oneOfType[" + checkersDisplay.join(", ") + "]";
		  return checkerHelpers.wrapInSpecified(function oneOfTypeCheckerDefinition(val, name, location) {
		    if (!checkers.some(function (checker) {
		      return !isError(checker(val, name, location));
		    })) {
		      return getError(name, location, shortType);
		    }
		  }, type, shortType);
		}
		
		function arrayOfCheckGetter(checker) {
		  var type = {
		    __apiCheckData: { optional: false, type: "arrayOf" },
		    arrayOf: getCheckerDisplay(checker)
		  };
		  var checkerDisplay = getCheckerDisplay(checker, { short: true });
		  var shortType = "arrayOf[" + checkerDisplay + "]";
		  return checkerHelpers.wrapInSpecified(function arrayOfCheckerDefinition(val, name, location) {
		    if (isError(checkers.array(val)) || !val.every(function (item) {
		      return !isError(checker(item));
		    })) {
		      return getError(name, location, shortType);
		    }
		  }, type, shortType);
		}
		
		function objectOfCheckGetter(checker) {
		  var type = {
		    __apiCheckData: { optional: false, type: "objectOf" },
		    objectOf: getCheckerDisplay(checker)
		  };
		  var checkerDisplay = getCheckerDisplay(checker, { short: true });
		  var shortType = "objectOf[" + checkerDisplay + "]";
		  return checkerHelpers.wrapInSpecified(function objectOfCheckerDefinition(val, name, location) {
		    var notObject = checkers.object(val, name, location);
		    if (isError(notObject)) {
		      return notObject;
		    }
		    var allTypesSuccess = each(val, function (item, key) {
		      if (isError(checker(item, key, name))) {
		        return false;
		      }
		    });
		    if (!allTypesSuccess) {
		      return getError(name, location, shortType);
		    }
		  }, type, shortType);
		}
		
		function typeOrArrayOfCheckGetter(checker) {
		  var type = {
		    __apiCheckData: { optional: false, type: "typeOrArrayOf" },
		    typeOrArrayOf: getCheckerDisplay(checker)
		  };
		  var checkerDisplay = getCheckerDisplay(checker, { short: true });
		  var shortType = "typeOrArrayOf[" + checkerDisplay + "]";
		  return checkerHelpers.wrapInSpecified(function typeOrArrayOfDefinition(val, name, location, obj) {
		    if (isError(checkers.oneOfType([checker, checkers.arrayOf(checker)])(val, name, location, obj))) {
		      return getError(name, location, shortType);
		    }
		  }, type, shortType);
		}
		
		function getShapeCheckGetter() {
		  function shapeCheckGetter(shape, nonObject) {
		    var shapeTypes = {};
		    each(shape, function (checker, prop) {
		      shapeTypes[prop] = getCheckerDisplay(checker);
		    });
		    function type() {
		      var options = arguments[0] === undefined ? {} : arguments[0];
		
		      var ret = {};
		      var terse = options.terse;
		      var obj = options.obj;
		      var addHelpers = options.addHelpers;
		
		      var parentRequired = options.required;
		      each(shape, function (checker, prop) {
		        /* jshint maxcomplexity:6 */
		        var specified = obj && obj.hasOwnProperty(prop);
		        var required = undef(parentRequired) ? !checker.isOptional : parentRequired;
		        if (!terse || (specified || !checker.isOptional)) {
		          ret[prop] = getCheckerDisplay(checker, { terse: terse, obj: obj && obj[prop], required: required, addHelpers: addHelpers });
		        }
		        if (addHelpers) {
		          modifyTypeDisplayToHelpOut(ret, prop, specified, checker, required);
		        }
		      });
		      return ret;
		
		      function modifyTypeDisplayToHelpOut(ret, prop, specified, checker, required) {
		        if (!specified && required && !checker.isOptional) {
		          var item = "ITEM";
		          if (checker.type && checker.type.__apiCheckData) {
		            item = checker.type.__apiCheckData.type.toUpperCase();
		          }
		          addHelper("missing", "MISSING THIS " + item, " <-- YOU ARE MISSING THIS");
		        } else if (specified) {
		          var error = checker(obj[prop], prop, null, obj);
		          if (isError(error)) {
		            addHelper("error", "THIS IS THE PROBLEM: " + error.message, " <-- THIS IS THE PROBLEM: " + error.message);
		          }
		        }
		
		        function addHelper(property, objectMessage, stringMessage) {
		          if (typeof ret[prop] === "string") {
		            ret[prop] += stringMessage;
		          } else {
		            ret[prop].__apiCheckData[property] = objectMessage;
		          }
		        }
		      }
		    }
		
		    type.__apiCheckData = { strict: false, optional: false, type: "shape" };
		    var shapeChecker = checkerHelpers.wrapInSpecified(function shapeCheckerDefinition(val, name, location) {
		      /* jshint maxcomplexity:6 */
		      var isObject = !nonObject && checkers.object(val, name, location);
		      if (isError(isObject)) {
		        return isObject;
		      }
		      var shapePropError = undefined;
		      location = location ? location + (name ? "/" : "") : "";
		      name = name || "";
		      each(shape, function (checker, prop) {
		        if (val.hasOwnProperty(prop) || !checker.isOptional) {
		          shapePropError = checker(val[prop], prop, "" + location + "" + name, val);
		          return !isError(shapePropError);
		        }
		      });
		      if (isError(shapePropError)) {
		        return shapePropError;
		      }
		    }, type, "shape");
		
		    function strictType() {
		      return type.apply(undefined, arguments);
		    }
		
		    strictType.__apiCheckData = copy(shapeChecker.type.__apiCheckData);
		    strictType.__apiCheckData.strict = true;
		    shapeChecker.strict = checkerHelpers.wrapInSpecified(function strictShapeCheckerDefinition(val, name, location) {
		      var shapeError = shapeChecker(val, name, location);
		      if (isError(shapeError)) {
		        return shapeError;
		      }
		      var allowedProperties = Object.keys(shape);
		      var extraProps = Object.keys(val).filter(function (prop) {
		        return allowedProperties.indexOf(prop) === -1;
		      });
		      if (extraProps.length) {
		        return new Error("" + nAtL(name, location) + " cannot have extra properties: " + t(extraProps.join("`, `")) + "." + ("It is limited to " + t(allowedProperties.join("`, `"))));
		      }
		    }, strictType, "strict shape");
		    shapeChecker.childrenCheckers = ["strict"];
		    checkerHelpers.setupChecker(shapeChecker);
		
		    return shapeChecker;
		  }
		
		  shapeCheckGetter.ifNot = function ifNot(otherProps, propChecker) {
		    if (!Array.isArray(otherProps)) {
		      otherProps = [otherProps];
		    }
		    var type = undefined;
		    if (otherProps.length === 1) {
		      type = "specified only if " + otherProps[0] + " is not specified";
		    } else {
		      type = "specified only if none of the following are specified: [" + list(otherProps, ", ", "and ") + "]";
		    }
		    var ifNotChecker = function ifNotCheckerDefinition(prop, propName, location, obj) {
		      var propExists = obj && obj.hasOwnProperty(propName);
		      var otherPropsExist = otherProps.some(function (otherProp) {
		        return obj && obj.hasOwnProperty(otherProp);
		      });
		      if (propExists === otherPropsExist) {
		        return getError(propName, location, ifNotChecker.type);
		      } else if (propExists) {
		        return propChecker(prop, propName, location, obj);
		      }
		    };
		
		    ifNotChecker.type = type;
		    ifNotChecker.shortType = "ifNot[" + otherProps.join(", ") + "]";
		    checkerHelpers.setupChecker(ifNotChecker);
		    return ifNotChecker;
		  };
		
		  shapeCheckGetter.onlyIf = function onlyIf(otherProps, propChecker) {
		    otherProps = arrayify(otherProps);
		    var type = undefined;
		    if (otherProps.length === 1) {
		      type = "specified only if " + otherProps[0] + " is also specified";
		    } else {
		      type = "specified only if all of the following are specified: [" + list(otherProps, ", ", "and ") + "]";
		    }
		    var onlyIfChecker = function onlyIfCheckerDefinition(prop, propName, location, obj) {
		      var othersPresent = otherProps.every(function (prop) {
		        return obj.hasOwnProperty(prop);
		      });
		      if (!othersPresent) {
		        return getError(propName, location, onlyIfChecker.type);
		      } else {
		        return propChecker(prop, propName, location, obj);
		      }
		    };
		
		    onlyIfChecker.type = type;
		    onlyIfChecker.shortType = "onlyIf[" + otherProps.join(", ") + "]";
		    checkerHelpers.setupChecker(onlyIfChecker);
		    return onlyIfChecker;
		  };
		
		  return shapeCheckGetter;
		}
		
		function argumentsCheckerGetter() {
		  var type = "function arguments";
		  return checkerHelpers.wrapInSpecified(function argsCheckerDefinition(val, name, location) {
		    if (Array.isArray(val) || isError(checkers.object(val)) || isError(checkers.number(val.length))) {
		      return getError(name, location, type);
		    }
		  }, type);
		}
		
		function anyCheckGetter() {
		  return checkerHelpers.wrapInSpecified(function anyCheckerDefinition() {}, "any");
		}
		
		// don't do anything

	/***/ }
	/******/ ])
	});

	//# sourceMappingURL=data:application/json;base64,

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	// angular-formly-templates-bootstrap version 4.3.1 built with ♥ by Astrism <astrisms@gmail.com>, Kent C. Dodds <kent@doddsfamily.us> (ó ì_í)=óò=(ì_í ò)

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory(__webpack_require__(38), __webpack_require__(39), __webpack_require__(9));
		else if(typeof define === 'function' && define.amd)
			define(["angular-formly", "api-check", "angular"], factory);
		else if(typeof exports === 'object')
			exports["ngFormlyTemplatesBootstrap"] = factory(require("angular-formly"), require("api-check"), require("angular"));
		else
			root["ngFormlyTemplatesBootstrap"] = factory(root["ngFormly"], root["apiCheck"], root["angular"]);
	})(this, function(__WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_8__) {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;
	/******/
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		module.exports = __webpack_require__(11);

	/***/ },
	/* 1 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, '__esModule', {
		  value: true
		});
		
		exports['default'] = function (ngModule) {
		  ngModule.config(addRadioType);
		
		  function addRadioType(formlyConfigProvider, formlyBootstrapApiCheck) {
		    var c = formlyBootstrapApiCheck;
		    formlyConfigProvider.setType({
		      name: 'radio',
		      template: __webpack_require__(20),
		      wrapper: ['bootstrapLabel', 'bootstrapHasError'],
		      defaultOptions: {
		        noFormControl: false
		      },
		      apiCheck: {
		        templateOptions: c.shape({
		          options: c.arrayOf(c.object),
		          labelProp: c.string.optional,
		          valueProp: c.string.optional
		        })
		      },
		      apiCheckInstance: c
		    });
		  }
		  addRadioType.$inject = ["formlyConfigProvider", "formlyBootstrapApiCheck"];
		};

		module.exports = exports['default'];

	/***/ },
	/* 2 */
	/***/ function(module, exports, __webpack_require__) {

		module.exports = __WEBPACK_EXTERNAL_MODULE_2__;

	/***/ },
	/* 3 */
	/***/ function(module, exports, __webpack_require__) {

		module.exports = __WEBPACK_EXTERNAL_MODULE_3__;

	/***/ },
	/* 4 */
	/***/ function(module, exports, __webpack_require__) {

		// some versions of angular don't export the angular module properly,
		// so we get it from window in this case.
		'use strict';
		
		var angular = __webpack_require__(8);
		if (!angular.version) {
		  angular = window.angular;
		}
		module.exports = angular;

	/***/ },
	/* 5 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, '__esModule', {
		  value: true
		});
		
		exports['default'] = function (ngModule) {
		  ngModule.config(addWrappers);
		
		  function addWrappers(formlyConfigProvider, formlyBootstrapApiCheck) {
		    var c = formlyBootstrapApiCheck;
		    formlyConfigProvider.setWrapper([{
		      name: 'bootstrapLabel',
		      template: __webpack_require__(17),
		      apiCheck: {
		        templateOptions: c.shape({
		          label: c.string,
		          required: c.bool.optional
		        })
		      },
		      apiCheckInstance: c
		    }, { name: 'bootstrapHasError', template: __webpack_require__(18) }]);
		  }
		  addWrappers.$inject = ["formlyConfigProvider", "formlyBootstrapApiCheck"];
		};

		module.exports = exports['default'];

	/***/ },
	/* 6 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, '__esModule', {
		  value: true
		});
		
		exports['default'] = function (ngModule) {
		  __webpack_require__(12)(ngModule);
		  __webpack_require__(13)(ngModule);
		  __webpack_require__(14)(ngModule);
		  __webpack_require__(1)(ngModule);
		  __webpack_require__(15)(ngModule);
		  __webpack_require__(16)(ngModule);
		};
		
		module.exports = exports['default'];

	/***/ },
	/* 7 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, '__esModule', {
		  value: true
		});
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
		
		var _addons = __webpack_require__(9);
		
		var _addons2 = _interopRequireDefault(_addons);
		
		var _description = __webpack_require__(10);
		
		var _description2 = _interopRequireDefault(_description);
		
		exports['default'] = function (ngModule) {
		  (0, _addons2['default'])(ngModule);
		  (0, _description2['default'])(ngModule);
		};
		
		module.exports = exports['default'];

	/***/ },
	/* 8 */
	/***/ function(module, exports, __webpack_require__) {

		module.exports = __WEBPACK_EXTERNAL_MODULE_8__;

	/***/ },
	/* 9 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, '__esModule', {
		  value: true
		});
		
		exports['default'] = function (ngModule) {
		  ngModule.run(addAddonsManipulator);
		
		  function addAddonsManipulator(formlyConfig, formlyBootstrapApiCheck) {
		    var addonTemplate = __webpack_require__(19);
		    var addonChecker = formlyBootstrapApiCheck.shape({
		      'class': formlyBootstrapApiCheck.string.optional,
		      text: formlyBootstrapApiCheck.string.optional,
		      onClick: formlyBootstrapApiCheck.func.optional
		    }).strict.optional;
		    var api = formlyBootstrapApiCheck.shape({
		      templateOptions: formlyBootstrapApiCheck.shape({
		        addonLeft: addonChecker,
		        addonRight: addonChecker
		      })
		    });
		    formlyConfig.templateManipulators.preWrapper.push(function (template, options) {
		      if (!options.templateOptions.addonLeft && !options.templateOptions.addonRight) {
		        return template;
		      }
		      formlyBootstrapApiCheck.warn([api], [options]);
		      return addonTemplate.replace('<formly-transclude></formly-transclude>', template);
		    });
		  }
		  addAddonsManipulator.$inject = ["formlyConfig", "formlyBootstrapApiCheck"];
		};

		module.exports = exports['default'];

	/***/ },
	/* 10 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, '__esModule', {
		  value: true
		});
		
		exports['default'] = function (ngModule) {
		  ngModule.run(addDescriptionManipulator);
		
		  function addDescriptionManipulator(formlyConfig) {
		    formlyConfig.templateManipulators.preWrapper.push(function ariaDescribedBy(template, options, scope) {
		      if (angular.isDefined(options.templateOptions.description)) {
		        var el = document.createElement('div');
		        el.appendChild(angular.element(template)[0]);
		        el.appendChild(angular.element('<p id="' + scope.id + '_description"' + 'class="help-block"' + 'ng-if="to.description">' + '{{to.description}}' + '</p>')[0]);
		        var modelEls = angular.element(el.querySelectorAll('[ng-model]'));
		        if (modelEls) {
		          modelEls.attr('aria-describedby', scope.id + '_description');
		        }
		        return el.innerHTML;
		      } else {
		        return template;
		      }
		    });
		  }
		  addDescriptionManipulator.$inject = ["formlyConfig"];
		};

		module.exports = exports['default'];

	/***/ },
	/* 11 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, '__esModule', {
		  value: true
		});
		var ngModuleName = 'formlyBootstrap';
		var angular = __webpack_require__(4);
		var ngModule = angular.module(ngModuleName, [__webpack_require__(2)]);
		ngModule.constant('formlyBootstrapApiCheck', __webpack_require__(3)({
		  output: {
		    prefix: 'angular-formly-bootstrap'
		  }
		}));
		ngModule.constant('formlyBootstrapVersion', ("4.3.1"));
		
		__webpack_require__(5)(ngModule);
		__webpack_require__(6)(ngModule);
		__webpack_require__(7)(ngModule);
		
		exports['default'] = ngModuleName;
		module.exports = exports['default'];

	/***/ },
	/* 12 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, '__esModule', {
		  value: true
		});
		
		exports['default'] = function (ngModule) {
		  ngModule.config(addCheckboxType);
		
		  function addCheckboxType(formlyConfigProvider, formlyBootstrapApiCheck) {
		    var c = formlyBootstrapApiCheck;
		    formlyConfigProvider.setType({
		      name: 'checkbox',
		      template: __webpack_require__(21),
		      wrapper: ['bootstrapHasError'],
		      apiCheck: {
		        templateOptions: c.shape({
		          label: c.string
		        })
		      },
		      apiCheckInstance: c
		    });
		  }
		  addCheckboxType.$inject = ["formlyConfigProvider", "formlyBootstrapApiCheck"];
		};

		module.exports = exports['default'];

	/***/ },
	/* 13 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, '__esModule', {
		  value: true
		});
		
		exports['default'] = function (ngModule) {
		  ngModule.config(addCheckboxType);
		
		  function addCheckboxType(formlyConfigProvider, formlyBootstrapApiCheck) {
		    var c = formlyBootstrapApiCheck;
		    formlyConfigProvider.setType({
		      name: 'multiCheckbox',
		      template: __webpack_require__(22),
		      wrapper: ['bootstrapLabel', 'bootstrapHasError'],
		      defaultOptions: {
		        noFormControl: false
		      },
		      apiCheck: {
		        templateOptions: c.shape({
		          options: c.arrayOf(c.object),
		          labelProp: c.string.optional,
		          valueProp: c.string.optional
		        })
		      },
		      apiCheckInstance: c,
		      controller: /* @ngInject */["$scope", function controller($scope) {
		        var to = $scope.to;
		        var opts = $scope.options;
		        $scope.multiCheckbox = {
		          checked: [],
		          change: setModel
		        };
		
		        // initialize the checkboxes check property
		        var modelValue = $scope.model[opts.key];
		        if (angular.isArray(modelValue)) {
		          (function () {
		            var valueProp = to.valueProp || 'value';
		            angular.forEach(to.options, function (v, index) {
		              $scope.multiCheckbox.checked[index] = modelValue.indexOf(v[valueProp]) !== -1;
		            });
		          })();
		        }
		
		        function setModel() {
		          $scope.model[opts.key] = [];
		          angular.forEach($scope.multiCheckbox.checked, function (checkbox, index) {
		            if (checkbox) {
		              $scope.model[opts.key].push(to.options[index][to.valueProp || 'value']);
		            }
		          });
		        }
		      }]
		    });
		  }
		  addCheckboxType.$inject = ["formlyConfigProvider", "formlyBootstrapApiCheck"];
		};

		module.exports = exports['default'];

	/***/ },
	/* 14 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, '__esModule', {
		  value: true
		});
		
		exports['default'] = function (ngModule) {
		  ngModule.config(addInputType);
		
		  function addInputType(formlyConfigProvider) {
		    formlyConfigProvider.setType({
		      name: 'input',
		      template: '<input class="form-control" ng-model="model[options.key]">',
		      wrapper: ['bootstrapLabel', 'bootstrapHasError']
		    });
		  }
		  addInputType.$inject = ["formlyConfigProvider"];
		};

		module.exports = exports['default'];

	/***/ },
	/* 15 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, '__esModule', {
		  value: true
		});
		
		function _defineProperty(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); }
		
		exports['default'] = function (ngModule) {
		  ngModule.config(addSelectType);
		
		  var template = '<select class="form-control" ng-model="model[options.key]"></select>';
		
		  function addSelectType(formlyConfigProvider, formlyBootstrapApiCheck) {
		    var c = formlyBootstrapApiCheck;
		    formlyConfigProvider.setType({
		      name: 'select',
		      template: template,
		      wrapper: ['bootstrapLabel', 'bootstrapHasError'],
		      defaultOptions: function defaultOptions(options) {
		        /* jshint maxlen:195 */
		        var ngOptions = options.templateOptions.ngOptions || 'option[to.valueProp || \'value\'] as option[to.labelProp || \'name\'] group by option[to.groupProp || \'group\'] for option in to.options';
		        return {
		          ngModelAttrs: _defineProperty({}, ngOptions, {
		            value: 'ng-options'
		          })
		        };
		      },
		      apiCheck: {
		        templateOptions: c.shape({
		          options: c.arrayOf(c.object),
		          labelProp: c.string.optional,
		          valueProp: c.string.optional,
		          groupProp: c.string.optional
		        })
		      },
		      apiCheckInstance: c
		    });
		  }
		  addSelectType.$inject = ["formlyConfigProvider", "formlyBootstrapApiCheck"];
		};

		module.exports = exports['default'];

	/***/ },
	/* 16 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, '__esModule', {
		  value: true
		});
		
		exports['default'] = function (ngModule) {
		  ngModule.config(addTextareaType);
		
		  function addTextareaType(formlyConfigProvider, formlyBootstrapApiCheck) {
		    var c = formlyBootstrapApiCheck;
		    formlyConfigProvider.setType({
		      name: 'textarea',
		      template: '<textarea class="form-control" ng-model="model[options.key]"></textarea>',
		      wrapper: ['bootstrapLabel', 'bootstrapHasError'],
		      defaultOptions: {
		        ngModelAttrs: {
		          rows: { attribute: 'rows' },
		          cols: { attribute: 'cols' }
		        }
		      },
		      apiCheck: {
		        templateOptions: c.shape({
		          rows: c.number.optional,
		          cols: c.number.optional
		        })
		      },
		      apiCheckInstance: c
		    });
		  }
		  addTextareaType.$inject = ["formlyConfigProvider", "formlyBootstrapApiCheck"];
		};

		module.exports = exports['default'];

	/***/ },
	/* 17 */
	/***/ function(module, exports, __webpack_require__) {

		module.exports = "<div>\n  <label for=\"{{id}}\" class=\"control-label\">\n    {{to.label}}\n    {{to.required ? '*' : ''}}\n  </label>\n  <formly-transclude></formly-transclude>\n</div>\n"

	/***/ },
	/* 18 */
	/***/ function(module, exports, __webpack_require__) {

		module.exports = "<div class=\"form-group\" ng-class=\"{'has-error': showError}\">\n  <formly-transclude></formly-transclude>\n</div>\n"

	/***/ },
	/* 19 */
	/***/ function(module, exports, __webpack_require__) {

		module.exports = "<div ng-class=\"{'input-group': to.addonLeft || to.addonRight}\">\n    <div class=\"input-group-addon\"\n         ng-if=\"to.addonLeft\"\n         ng-style=\"{cursor: to.addonLeft.onClick ? 'pointer' : 'inherit'}\"\n         ng-click=\"to.addonLeft.onClick(options, this)\">\n        <i class=\"{{to.addonLeft.class}}\" ng-if=\"to.addonLeft.class\"></i>\n        <span ng-if=\"to.addonLeft.text\">{{to.addonLeft.text}}</span>\n    </div>\n    <formly-transclude></formly-transclude>\n    <div class=\"input-group-addon\"\n         ng-if=\"to.addonRight\"\n         ng-style=\"{cursor: to.addonRight.onClick ? 'pointer' : 'inherit'}\"\n         ng-click=\"to.addonRight.onClick(options, this)\">\n        <i class=\"{{to.addonRight.class}}\" ng-if=\"to.addonRight.class\"></i>\n        <span ng-if=\"to.addonRight.text\">{{to.addonRight.text}}</span>\n    </div>\n</div>\n"

	/***/ },
	/* 20 */
	/***/ function(module, exports, __webpack_require__) {

		module.exports = "<div class=\"radio-group\">\n  <div ng-repeat=\"(key, option) in to.options\" class=\"radio\">\n    <label>\n      <input type=\"radio\"\n             id=\"{{id + '_'+ $index}}\"\n             tabindex=\"0\"\n             ng-value=\"option[to.valueProp || 'value']\"\n             ng-model=\"model[options.key]\">\n      {{option[to.labelProp || 'name']}}\n    </label>\n  </div>\n</div>\n"

	/***/ },
	/* 21 */
	/***/ function(module, exports, __webpack_require__) {

		module.exports = "<div class=\"checkbox\">\n\t<label>\n\t\t<input type=\"checkbox\"\n           class=\"formly-field-checkbox\"\n\t\t       ng-model=\"model[options.key]\">\n\t\t{{to.label}}\n\t\t{{to.required ? '*' : ''}}\n\t</label>\n</div>\n"

	/***/ },
	/* 22 */
	/***/ function(module, exports, __webpack_require__) {

		module.exports = "<div class=\"radio-group\">\n  <div ng-repeat=\"(key, option) in to.options\" class=\"checkbox\">\n    <label>\n      <input type=\"checkbox\"\n             id=\"{{id + '_'+ $index}}\"\n             ng-model=\"multiCheckbox.checked[$index]\"\n             ng-change=\"multiCheckbox.change()\">\n      {{option[to.labelProp || 'name']}}\n    </label>\n  </div>\n</div>\n"

	/***/ }
	/******/ ])
	});
	;
	//# sourceMappingURL=angular-formly-templates-bootstrap.js.map

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by david on 5/30/15.
	 */

	//module.exports = angular.module('app.components', [])
	module.exports = angular.module('formlyExample.components', [])
	    .directive('stepOne', __webpack_require__(42))
	    .directive('stepTwo', __webpack_require__(47));


/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by david on 6/1/15.
	 */


	var stepOne = function(){
	    __webpack_require__(43);
	    return {
	        restrict: 'E',
	        controller: __webpack_require__(45),
	        controllerAs: 'stepOneCtrl',
	        template: __webpack_require__(46)
	    };
	};

	module.exports = stepOne;


/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(44);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(5)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../node_modules/css-loader/index.js!./../../../node_modules/less-loader/index.js!./stepOne.less", function() {
				var newContent = require("!!./../../../node_modules/css-loader/index.js!./../../../node_modules/less-loader/index.js!./stepOne.less");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(4)();
	exports.push([module.id, "step-one {\n  background-color: yellow;\n}\nstep-one select {\n  color: #FF0000;\n  border-style: solid;\n  border-color: #ff0000 #00ff00 #0000ff #fa00ff;\n  text-shadow: 2px 2px #ff0000;\n}\nstep-one input {\n  color: #00ff00;\n  text-shadow: 2px 2px #ff0000;\n}\nstep-one .form_control {\n  color: #FF0000;\n  border-style: solid;\n  border-color: #ff0000 #00ff00 #0000ff #fa00ff;\n  text-shadow: 2px 2px #ff0000;\n}\nstep-one .step_one {\n  color: #FF0000;\n  border-color: #ff0000 #00ff00 #0000ff #fa00ff;\n  text-shadow: 2px 2px #ff0000;\n}\n", ""]);

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by david on 6/1/15.
	 */

	var stepOneCtrl = function(){
	    //var stepOneVM = this;

	    // variable assignment
	    this.model = {
	        firstName: 'Obi Wan',
	        something: 'foobar'
	    };
	    this.fields = [
	        {
	            type: 'input',
	            key: 'firstName',
	            templateOptions: {
	                label: 'First Name'
	            }
	        },
	        {
	            template: '<hr />'
	        },
	        {
	            type: 'select',
	            key: 'something',
	            templateOptions: {
	                label: 'Select Somthing',
	                valueProp: 'name',
	                options: [
	                    {name: 'foo'},
	                    {name: 'bar'},
	                    {name: 'foobar'}
	                ]
	            }
	        }
	    ];


	    // copy fields because formly adds data to them
	    // that is not necessary to show for the purposes
	    // of this lesson
	    this.originalFields = angular.copy(this.fields);

	    // function definition
	    this.onSubmit = function() {
	        alert(JSON.stringify(this.model), null, 2);
	    };

	//    vm.onSubmit = onSubmit;
	};

	module.exports = stepOneCtrl;



/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = "<formly-form class=\"step_one\" model=\"stepOneCtrl.model\" fields=\"stepOneCtrl.fields\" id=\"formly-fields\">\n    <button type=\"submit\" class=\"btn btn-primary submit-button\" ng-click=\"stepOneCtrl.onSubmit()\">Submit</button>\n</formly-form>\n"

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by david on 5/30/15.
	 */

	var stepTwo = function(){
	    //require('./stepTwo.scss');
	    return {
	        restrict: 'E',
	        controller: __webpack_require__(48),
	        controllerAs: 'vm',
	        template: __webpack_require__(49)
	    };
	};

	module.exports = stepTwo;


/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by david on 5/30/15.
	 */

	var setTwoCtrl = function(){
	    this.greeting = 'Hello';
	    this.me = 'David Campbell';

	};

	module.exports = setTwoCtrl;



/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = "<h1>{{vm.greeting}} {{vm.me}}</h1>"

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by david on 6/3/15.
	 */

	__webpack_require__(51);
	var angular2 = __webpack_require__(57);

	function Clicker(){
	    this.clickCounter = 0;
	    this.x = 0;
	    this.y = 0;

	    this.onClick = function onClick(){
	      this.clickCounter++;
	        document.getElementById("clickerButton").innerHTML = "Click Count " + this.clickCounter;
	    };

	    this.onMouseMove = function onMouseMove(event){
	        this.x = event.x;
	        this.y = event.y;
	        document.getElementById("clickerxy").innerHTML = "x = " + this.x + ", y = " + this.y;
	    };
	}

	Clicker.annotations = [
	    new angular2.ComponentAnnotation({
	        selector: 'clicker'
	    }),
	    new angular2.ViewAnnotation({
	        template: __webpack_require__(195)
	    })
	];

	function Clock(){
	    var clock = this;
	    clock.time = 0;
	    clock.message = "Seconds since last refresh: ";

	    setInterval(function(){
	        clock.time++;
	        document.getElementById("clockid").innerHTML = '<b>' + clock.message + clock.time + '</b>';
	    }, 1000);
	}

	Clock.annotations = [
	    new angular2.ComponentAnnotation({
	        selector: 'clock'
	    }),
	    new angular2.ViewAnnotation({
	        template: '<p id="clockid"><b>{{message}} {{time}}</b></p>'
	    })
	];

	var Note = function(){};
	Note.annotations = [
	    new angular2.ComponentAnnotation({
	        selector: 'note'
	    }),
	    new angular2.ViewAnnotation({
	        template: '<p id="notesm">Simple message</p>'
	    })
	];

	var ng2app = function(){};
	ng2app.annotations = [
	    new angular2.ComponentAnnotation({
	        selector: 'ng2app'
	    }),
	    new angular2.ViewAnnotation({
	        directives: [Note, Clicker, Clock],
	        template: __webpack_require__(196)
	    })
	];

	document.addEventListener("DOMContentLoaded", function(){
	    angular2.bootstrap(ng2app);
	});



/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {(function(global) {
	  'use strict';
	  if (global.$traceurRuntime) {
	    return ;
	  }
	  var $Object = Object;
	  var $TypeError = TypeError;
	  var $create = $Object.create;
	  var $defineProperties = $Object.defineProperties;
	  var $defineProperty = $Object.defineProperty;
	  var $freeze = $Object.freeze;
	  var $getOwnPropertyDescriptor = $Object.getOwnPropertyDescriptor;
	  var $getOwnPropertyNames = $Object.getOwnPropertyNames;
	  var $keys = $Object.keys;
	  var $hasOwnProperty = $Object.prototype.hasOwnProperty;
	  var $toString = $Object.prototype.toString;
	  var $preventExtensions = Object.preventExtensions;
	  var $seal = Object.seal;
	  var $isExtensible = Object.isExtensible;
	  var $apply = Function.prototype.call.bind(Function.prototype.apply);
	  function $bind(operand, thisArg, args) {
	    var argArray = [thisArg];
	    for (var i = 0; i < args.length; i++) {
	      argArray[i + 1] = args[i];
	    }
	    var func = $apply(Function.prototype.bind, operand, argArray);
	    return func;
	  }
	  function $construct(func, argArray) {
	    var object = new ($bind(func, null, argArray));
	    return object;
	  }
	  var counter = 0;
	  function newUniqueString() {
	    return '__$' + Math.floor(Math.random() * 1e9) + '$' + ++counter + '$__';
	  }
	  var privateNames = $create(null);
	  function isPrivateName(s) {
	    return privateNames[s];
	  }
	  function createPrivateName() {
	    var s = newUniqueString();
	    privateNames[s] = true;
	    return s;
	  }
	  var CONTINUATION_TYPE = Object.create(null);
	  function createContinuation(operand, thisArg, argsArray) {
	    return [CONTINUATION_TYPE, operand, thisArg, argsArray];
	  }
	  function isContinuation(object) {
	    return object && object[0] === CONTINUATION_TYPE;
	  }
	  var isTailRecursiveName = null;
	  function setupProperTailCalls() {
	    isTailRecursiveName = createPrivateName();
	    Function.prototype.call = initTailRecursiveFunction(function call(thisArg) {
	      var result = tailCall(function(thisArg) {
	        var argArray = [];
	        for (var i = 1; i < arguments.length; ++i) {
	          argArray[i - 1] = arguments[i];
	        }
	        var continuation = createContinuation(this, thisArg, argArray);
	        return continuation;
	      }, this, arguments);
	      return result;
	    });
	    Function.prototype.apply = initTailRecursiveFunction(function apply(thisArg, argArray) {
	      var result = tailCall(function(thisArg, argArray) {
	        var continuation = createContinuation(this, thisArg, argArray);
	        return continuation;
	      }, this, arguments);
	      return result;
	    });
	  }
	  function initTailRecursiveFunction(func) {
	    if (isTailRecursiveName === null) {
	      setupProperTailCalls();
	    }
	    func[isTailRecursiveName] = true;
	    return func;
	  }
	  function isTailRecursive(func) {
	    return !!func[isTailRecursiveName];
	  }
	  function tailCall(func, thisArg, argArray) {
	    var continuation = argArray[0];
	    if (isContinuation(continuation)) {
	      continuation = $apply(func, thisArg, continuation[3]);
	      return continuation;
	    }
	    continuation = createContinuation(func, thisArg, argArray);
	    while (true) {
	      if (isTailRecursive(func)) {
	        continuation = $apply(func, continuation[2], [continuation]);
	      } else {
	        continuation = $apply(func, continuation[2], continuation[3]);
	      }
	      if (!isContinuation(continuation)) {
	        return continuation;
	      }
	      func = continuation[1];
	    }
	  }
	  function construct() {
	    var object;
	    if (isTailRecursive(this)) {
	      object = $construct(this, [createContinuation(null, null, arguments)]);
	    } else {
	      object = $construct(this, arguments);
	    }
	    return object;
	  }
	  var $traceurRuntime = {
	    initTailRecursiveFunction: initTailRecursiveFunction,
	    call: tailCall,
	    continuation: createContinuation,
	    construct: construct
	  };
	  (function() {
	    function nonEnum(value) {
	      return {
	        configurable: true,
	        enumerable: false,
	        value: value,
	        writable: true
	      };
	    }
	    var method = nonEnum;
	    var symbolInternalProperty = newUniqueString();
	    var symbolDescriptionProperty = newUniqueString();
	    var symbolDataProperty = newUniqueString();
	    var symbolValues = $create(null);
	    function isShimSymbol(symbol) {
	      return typeof symbol === 'object' && symbol instanceof SymbolValue;
	    }
	    function typeOf(v) {
	      if (isShimSymbol(v))
	        return 'symbol';
	      return typeof v;
	    }
	    function Symbol(description) {
	      var value = new SymbolValue(description);
	      if (!(this instanceof Symbol))
	        return value;
	      throw new TypeError('Symbol cannot be new\'ed');
	    }
	    $defineProperty(Symbol.prototype, 'constructor', nonEnum(Symbol));
	    $defineProperty(Symbol.prototype, 'toString', method(function() {
	      var symbolValue = this[symbolDataProperty];
	      return symbolValue[symbolInternalProperty];
	    }));
	    $defineProperty(Symbol.prototype, 'valueOf', method(function() {
	      var symbolValue = this[symbolDataProperty];
	      if (!symbolValue)
	        throw TypeError('Conversion from symbol to string');
	      if (!getOption('symbols'))
	        return symbolValue[symbolInternalProperty];
	      return symbolValue;
	    }));
	    function SymbolValue(description) {
	      var key = newUniqueString();
	      $defineProperty(this, symbolDataProperty, {value: this});
	      $defineProperty(this, symbolInternalProperty, {value: key});
	      $defineProperty(this, symbolDescriptionProperty, {value: description});
	      freeze(this);
	      symbolValues[key] = this;
	    }
	    $defineProperty(SymbolValue.prototype, 'constructor', nonEnum(Symbol));
	    $defineProperty(SymbolValue.prototype, 'toString', {
	      value: Symbol.prototype.toString,
	      enumerable: false
	    });
	    $defineProperty(SymbolValue.prototype, 'valueOf', {
	      value: Symbol.prototype.valueOf,
	      enumerable: false
	    });
	    var hashProperty = createPrivateName();
	    var hashPropertyDescriptor = {value: undefined};
	    var hashObjectProperties = {
	      hash: {value: undefined},
	      self: {value: undefined}
	    };
	    var hashCounter = 0;
	    function getOwnHashObject(object) {
	      var hashObject = object[hashProperty];
	      if (hashObject && hashObject.self === object)
	        return hashObject;
	      if ($isExtensible(object)) {
	        hashObjectProperties.hash.value = hashCounter++;
	        hashObjectProperties.self.value = object;
	        hashPropertyDescriptor.value = $create(null, hashObjectProperties);
	        $defineProperty(object, hashProperty, hashPropertyDescriptor);
	        return hashPropertyDescriptor.value;
	      }
	      return undefined;
	    }
	    function freeze(object) {
	      getOwnHashObject(object);
	      return $freeze.apply(this, arguments);
	    }
	    function preventExtensions(object) {
	      getOwnHashObject(object);
	      return $preventExtensions.apply(this, arguments);
	    }
	    function seal(object) {
	      getOwnHashObject(object);
	      return $seal.apply(this, arguments);
	    }
	    freeze(SymbolValue.prototype);
	    function isSymbolString(s) {
	      return symbolValues[s] || privateNames[s];
	    }
	    function toProperty(name) {
	      if (isShimSymbol(name))
	        return name[symbolInternalProperty];
	      return name;
	    }
	    function removeSymbolKeys(array) {
	      var rv = [];
	      for (var i = 0; i < array.length; i++) {
	        if (!isSymbolString(array[i])) {
	          rv.push(array[i]);
	        }
	      }
	      return rv;
	    }
	    function getOwnPropertyNames(object) {
	      return removeSymbolKeys($getOwnPropertyNames(object));
	    }
	    function keys(object) {
	      return removeSymbolKeys($keys(object));
	    }
	    function getOwnPropertySymbols(object) {
	      var rv = [];
	      var names = $getOwnPropertyNames(object);
	      for (var i = 0; i < names.length; i++) {
	        var symbol = symbolValues[names[i]];
	        if (symbol) {
	          rv.push(symbol);
	        }
	      }
	      return rv;
	    }
	    function getOwnPropertyDescriptor(object, name) {
	      return $getOwnPropertyDescriptor(object, toProperty(name));
	    }
	    function hasOwnProperty(name) {
	      return $hasOwnProperty.call(this, toProperty(name));
	    }
	    function getOption(name) {
	      return global.$traceurRuntime.options[name];
	    }
	    function defineProperty(object, name, descriptor) {
	      if (isShimSymbol(name)) {
	        name = name[symbolInternalProperty];
	      }
	      $defineProperty(object, name, descriptor);
	      return object;
	    }
	    function polyfillObject(Object) {
	      $defineProperty(Object, 'defineProperty', {value: defineProperty});
	      $defineProperty(Object, 'getOwnPropertyNames', {value: getOwnPropertyNames});
	      $defineProperty(Object, 'getOwnPropertyDescriptor', {value: getOwnPropertyDescriptor});
	      $defineProperty(Object.prototype, 'hasOwnProperty', {value: hasOwnProperty});
	      $defineProperty(Object, 'freeze', {value: freeze});
	      $defineProperty(Object, 'preventExtensions', {value: preventExtensions});
	      $defineProperty(Object, 'seal', {value: seal});
	      $defineProperty(Object, 'keys', {value: keys});
	    }
	    function exportStar(object) {
	      for (var i = 1; i < arguments.length; i++) {
	        var names = $getOwnPropertyNames(arguments[i]);
	        for (var j = 0; j < names.length; j++) {
	          var name = names[j];
	          if (isSymbolString(name))
	            continue;
	          (function(mod, name) {
	            $defineProperty(object, name, {
	              get: function() {
	                return mod[name];
	              },
	              enumerable: true
	            });
	          })(arguments[i], names[j]);
	        }
	      }
	      return object;
	    }
	    function isObject(x) {
	      return x != null && (typeof x === 'object' || typeof x === 'function');
	    }
	    function toObject(x) {
	      if (x == null)
	        throw $TypeError();
	      return $Object(x);
	    }
	    function checkObjectCoercible(argument) {
	      if (argument == null) {
	        throw new TypeError('Value cannot be converted to an Object');
	      }
	      return argument;
	    }
	    function polyfillSymbol(global, Symbol) {
	      if (!global.Symbol) {
	        global.Symbol = Symbol;
	        Object.getOwnPropertySymbols = getOwnPropertySymbols;
	      }
	      if (!global.Symbol.iterator) {
	        global.Symbol.iterator = Symbol('Symbol.iterator');
	      }
	      if (!global.Symbol.observer) {
	        global.Symbol.observer = Symbol('Symbol.observer');
	      }
	    }
	    function setupGlobals(global) {
	      polyfillSymbol(global, Symbol);
	      global.Reflect = global.Reflect || {};
	      global.Reflect.global = global.Reflect.global || global;
	      polyfillObject(global.Object);
	    }
	    setupGlobals(global);
	    global.$traceurRuntime = {
	      call: tailCall,
	      checkObjectCoercible: checkObjectCoercible,
	      construct: construct,
	      continuation: createContinuation,
	      createPrivateName: createPrivateName,
	      defineProperties: $defineProperties,
	      defineProperty: $defineProperty,
	      exportStar: exportStar,
	      getOwnHashObject: getOwnHashObject,
	      getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	      getOwnPropertyNames: $getOwnPropertyNames,
	      initTailRecursiveFunction: initTailRecursiveFunction,
	      isObject: isObject,
	      isPrivateName: isPrivateName,
	      isSymbolString: isSymbolString,
	      keys: $keys,
	      options: {},
	      setupGlobals: setupGlobals,
	      toObject: toObject,
	      toProperty: toProperty,
	      typeof: typeOf
	    };
	  })();
	})(typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
	(function() {
	  function buildFromEncodedParts(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
	    var out = [];
	    if (opt_scheme) {
	      out.push(opt_scheme, ':');
	    }
	    if (opt_domain) {
	      out.push('//');
	      if (opt_userInfo) {
	        out.push(opt_userInfo, '@');
	      }
	      out.push(opt_domain);
	      if (opt_port) {
	        out.push(':', opt_port);
	      }
	    }
	    if (opt_path) {
	      out.push(opt_path);
	    }
	    if (opt_queryData) {
	      out.push('?', opt_queryData);
	    }
	    if (opt_fragment) {
	      out.push('#', opt_fragment);
	    }
	    return out.join('');
	  }
	  ;
	  var splitRe = new RegExp('^' + '(?:' + '([^:/?#.]+)' + ':)?' + '(?://' + '(?:([^/?#]*)@)?' + '([\\w\\d\\-\\u0100-\\uffff.%]*)' + '(?::([0-9]+))?' + ')?' + '([^?#]+)?' + '(?:\\?([^#]*))?' + '(?:#(.*))?' + '$');
	  var ComponentIndex = {
	    SCHEME: 1,
	    USER_INFO: 2,
	    DOMAIN: 3,
	    PORT: 4,
	    PATH: 5,
	    QUERY_DATA: 6,
	    FRAGMENT: 7
	  };
	  function split(uri) {
	    return (uri.match(splitRe));
	  }
	  function removeDotSegments(path) {
	    if (path === '/')
	      return '/';
	    var leadingSlash = path[0] === '/' ? '/' : '';
	    var trailingSlash = path.slice(-1) === '/' ? '/' : '';
	    var segments = path.split('/');
	    var out = [];
	    var up = 0;
	    for (var pos = 0; pos < segments.length; pos++) {
	      var segment = segments[pos];
	      switch (segment) {
	        case '':
	        case '.':
	          break;
	        case '..':
	          if (out.length)
	            out.pop();
	          else
	            up++;
	          break;
	        default:
	          out.push(segment);
	      }
	    }
	    if (!leadingSlash) {
	      while (up-- > 0) {
	        out.unshift('..');
	      }
	      if (out.length === 0)
	        out.push('.');
	    }
	    return leadingSlash + out.join('/') + trailingSlash;
	  }
	  function joinAndCanonicalizePath(parts) {
	    var path = parts[ComponentIndex.PATH] || '';
	    path = removeDotSegments(path);
	    parts[ComponentIndex.PATH] = path;
	    return buildFromEncodedParts(parts[ComponentIndex.SCHEME], parts[ComponentIndex.USER_INFO], parts[ComponentIndex.DOMAIN], parts[ComponentIndex.PORT], parts[ComponentIndex.PATH], parts[ComponentIndex.QUERY_DATA], parts[ComponentIndex.FRAGMENT]);
	  }
	  function canonicalizeUrl(url) {
	    var parts = split(url);
	    return joinAndCanonicalizePath(parts);
	  }
	  function resolveUrl(base, url) {
	    var parts = split(url);
	    var baseParts = split(base);
	    if (parts[ComponentIndex.SCHEME]) {
	      return joinAndCanonicalizePath(parts);
	    } else {
	      parts[ComponentIndex.SCHEME] = baseParts[ComponentIndex.SCHEME];
	    }
	    for (var i = ComponentIndex.SCHEME; i <= ComponentIndex.PORT; i++) {
	      if (!parts[i]) {
	        parts[i] = baseParts[i];
	      }
	    }
	    if (parts[ComponentIndex.PATH][0] == '/') {
	      return joinAndCanonicalizePath(parts);
	    }
	    var path = baseParts[ComponentIndex.PATH];
	    var index = path.lastIndexOf('/');
	    path = path.slice(0, index + 1) + parts[ComponentIndex.PATH];
	    parts[ComponentIndex.PATH] = path;
	    return joinAndCanonicalizePath(parts);
	  }
	  function isAbsolute(name) {
	    if (!name)
	      return false;
	    if (name[0] === '/')
	      return true;
	    var parts = split(name);
	    if (parts[ComponentIndex.SCHEME])
	      return true;
	    return false;
	  }
	  $traceurRuntime.canonicalizeUrl = canonicalizeUrl;
	  $traceurRuntime.isAbsolute = isAbsolute;
	  $traceurRuntime.removeDotSegments = removeDotSegments;
	  $traceurRuntime.resolveUrl = resolveUrl;
	})();
	(function(global) {
	  'use strict';
	  var $__1 = $traceurRuntime,
	      canonicalizeUrl = $__1.canonicalizeUrl,
	      resolveUrl = $__1.resolveUrl,
	      isAbsolute = $__1.isAbsolute;
	  var moduleInstantiators = Object.create(null);
	  var baseURL;
	  if (global.location && global.location.href)
	    baseURL = resolveUrl(global.location.href, './');
	  else
	    baseURL = '';
	  function UncoatedModuleEntry(url, uncoatedModule) {
	    this.url = url;
	    this.value_ = uncoatedModule;
	  }
	  function ModuleEvaluationError(erroneousModuleName, cause) {
	    this.message = this.constructor.name + ': ' + this.stripCause(cause) + ' in ' + erroneousModuleName;
	    if (!(cause instanceof ModuleEvaluationError) && cause.stack)
	      this.stack = this.stripStack(cause.stack);
	    else
	      this.stack = '';
	  }
	  ModuleEvaluationError.prototype = Object.create(Error.prototype);
	  ModuleEvaluationError.prototype.constructor = ModuleEvaluationError;
	  ModuleEvaluationError.prototype.stripError = function(message) {
	    return message.replace(/.*Error:/, this.constructor.name + ':');
	  };
	  ModuleEvaluationError.prototype.stripCause = function(cause) {
	    if (!cause)
	      return '';
	    if (!cause.message)
	      return cause + '';
	    return this.stripError(cause.message);
	  };
	  ModuleEvaluationError.prototype.loadedBy = function(moduleName) {
	    this.stack += '\n loaded by ' + moduleName;
	  };
	  ModuleEvaluationError.prototype.stripStack = function(causeStack) {
	    var stack = [];
	    causeStack.split('\n').some((function(frame) {
	      if (/UncoatedModuleInstantiator/.test(frame))
	        return true;
	      stack.push(frame);
	    }));
	    stack[0] = this.stripError(stack[0]);
	    return stack.join('\n');
	  };
	  function beforeLines(lines, number) {
	    var result = [];
	    var first = number - 3;
	    if (first < 0)
	      first = 0;
	    for (var i = first; i < number; i++) {
	      result.push(lines[i]);
	    }
	    return result;
	  }
	  function afterLines(lines, number) {
	    var last = number + 1;
	    if (last > lines.length - 1)
	      last = lines.length - 1;
	    var result = [];
	    for (var i = number; i <= last; i++) {
	      result.push(lines[i]);
	    }
	    return result;
	  }
	  function columnSpacing(columns) {
	    var result = '';
	    for (var i = 0; i < columns - 1; i++) {
	      result += '-';
	    }
	    return result;
	  }
	  function UncoatedModuleInstantiator(url, func) {
	    UncoatedModuleEntry.call(this, url, null);
	    this.func = func;
	  }
	  UncoatedModuleInstantiator.prototype = Object.create(UncoatedModuleEntry.prototype);
	  UncoatedModuleInstantiator.prototype.getUncoatedModule = function() {
	    if (this.value_)
	      return this.value_;
	    try {
	      var relativeRequire;
	      if (typeof $traceurRuntime !== undefined && $traceurRuntime.require) {
	        relativeRequire = $traceurRuntime.require.bind(null, this.url);
	      }
	      return this.value_ = this.func.call(global, relativeRequire);
	    } catch (ex) {
	      if (ex instanceof ModuleEvaluationError) {
	        ex.loadedBy(this.url);
	        throw ex;
	      }
	      if (ex.stack) {
	        var lines = this.func.toString().split('\n');
	        var evaled = [];
	        ex.stack.split('\n').some(function(frame) {
	          if (frame.indexOf('UncoatedModuleInstantiator.getUncoatedModule') > 0)
	            return true;
	          var m = /(at\s[^\s]*\s).*>:(\d*):(\d*)\)/.exec(frame);
	          if (m) {
	            var line = parseInt(m[2], 10);
	            evaled = evaled.concat(beforeLines(lines, line));
	            evaled.push(columnSpacing(m[3]) + '^');
	            evaled = evaled.concat(afterLines(lines, line));
	            evaled.push('= = = = = = = = =');
	          } else {
	            evaled.push(frame);
	          }
	        });
	        ex.stack = evaled.join('\n');
	      }
	      throw new ModuleEvaluationError(this.url, ex);
	    }
	  };
	  function getUncoatedModuleInstantiator(name) {
	    if (!name)
	      return ;
	    var url = ModuleStore.normalize(name);
	    return moduleInstantiators[url];
	  }
	  ;
	  var moduleInstances = Object.create(null);
	  var liveModuleSentinel = {};
	  function Module(uncoatedModule) {
	    var isLive = arguments[1];
	    var coatedModule = Object.create(null);
	    Object.getOwnPropertyNames(uncoatedModule).forEach((function(name) {
	      var getter,
	          value;
	      if (isLive === liveModuleSentinel) {
	        var descr = Object.getOwnPropertyDescriptor(uncoatedModule, name);
	        if (descr.get)
	          getter = descr.get;
	      }
	      if (!getter) {
	        value = uncoatedModule[name];
	        getter = function() {
	          return value;
	        };
	      }
	      Object.defineProperty(coatedModule, name, {
	        get: getter,
	        enumerable: true
	      });
	    }));
	    Object.preventExtensions(coatedModule);
	    return coatedModule;
	  }
	  var ModuleStore = {
	    normalize: function(name, refererName, refererAddress) {
	      if (typeof name !== 'string')
	        throw new TypeError('module name must be a string, not ' + typeof name);
	      if (isAbsolute(name))
	        return canonicalizeUrl(name);
	      if (/[^\.]\/\.\.\//.test(name)) {
	        throw new Error('module name embeds /../: ' + name);
	      }
	      if (name[0] === '.' && refererName)
	        return resolveUrl(refererName, name);
	      return canonicalizeUrl(name);
	    },
	    get: function(normalizedName) {
	      var m = getUncoatedModuleInstantiator(normalizedName);
	      if (!m)
	        return undefined;
	      var moduleInstance = moduleInstances[m.url];
	      if (moduleInstance)
	        return moduleInstance;
	      moduleInstance = Module(m.getUncoatedModule(), liveModuleSentinel);
	      return moduleInstances[m.url] = moduleInstance;
	    },
	    set: function(normalizedName, module) {
	      normalizedName = String(normalizedName);
	      moduleInstantiators[normalizedName] = new UncoatedModuleInstantiator(normalizedName, (function() {
	        return module;
	      }));
	      moduleInstances[normalizedName] = module;
	    },
	    get baseURL() {
	      return baseURL;
	    },
	    set baseURL(v) {
	      baseURL = String(v);
	    },
	    registerModule: function(name, deps, func) {
	      var normalizedName = ModuleStore.normalize(name);
	      if (moduleInstantiators[normalizedName])
	        throw new Error('duplicate module named ' + normalizedName);
	      moduleInstantiators[normalizedName] = new UncoatedModuleInstantiator(normalizedName, func);
	    },
	    bundleStore: Object.create(null),
	    register: function(name, deps, func) {
	      if (!deps || !deps.length && !func.length) {
	        this.registerModule(name, deps, func);
	      } else {
	        this.bundleStore[name] = {
	          deps: deps,
	          execute: function() {
	            var $__0 = arguments;
	            var depMap = {};
	            deps.forEach((function(dep, index) {
	              return depMap[dep] = $__0[index];
	            }));
	            var registryEntry = func.call(this, depMap);
	            registryEntry.execute.call(this);
	            return registryEntry.exports;
	          }
	        };
	      }
	    },
	    getAnonymousModule: function(func) {
	      return new Module(func.call(global), liveModuleSentinel);
	    },
	    getForTesting: function(name) {
	      var $__0 = this;
	      if (!this.testingPrefix_) {
	        Object.keys(moduleInstances).some((function(key) {
	          var m = /(traceur@[^\/]*\/)/.exec(key);
	          if (m) {
	            $__0.testingPrefix_ = m[1];
	            return true;
	          }
	        }));
	      }
	      return this.get(this.testingPrefix_ + name);
	    }
	  };
	  var moduleStoreModule = new Module({ModuleStore: ModuleStore});
	  ModuleStore.set('@traceur/src/runtime/ModuleStore', moduleStoreModule);
	  ModuleStore.set('@traceur/src/runtime/ModuleStore.js', moduleStoreModule);
	  var setupGlobals = $traceurRuntime.setupGlobals;
	  $traceurRuntime.setupGlobals = function(global) {
	    setupGlobals(global);
	  };
	  $traceurRuntime.ModuleStore = ModuleStore;
	  global.System = {
	    register: ModuleStore.register.bind(ModuleStore),
	    registerModule: ModuleStore.registerModule.bind(ModuleStore),
	    get: ModuleStore.get,
	    set: ModuleStore.set,
	    normalize: ModuleStore.normalize
	  };
	  $traceurRuntime.getModuleImpl = function(name) {
	    var instantiator = getUncoatedModuleInstantiator(name);
	    return instantiator && instantiator.getUncoatedModule();
	  };
	})(typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
	System.registerModule("traceur-runtime@0.0.87/src/runtime/async.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur-runtime@0.0.87/src/runtime/async.js";
	  if (typeof $traceurRuntime !== 'object') {
	    throw new Error('traceur runtime not found.');
	  }
	  var $createPrivateName = $traceurRuntime.createPrivateName;
	  var $defineProperty = $traceurRuntime.defineProperty;
	  var $defineProperties = $traceurRuntime.defineProperties;
	  var $create = Object.create;
	  var thisName = $createPrivateName();
	  var argsName = $createPrivateName();
	  var observeName = $createPrivateName();
	  function AsyncGeneratorFunction() {}
	  function AsyncGeneratorFunctionPrototype() {}
	  AsyncGeneratorFunction.prototype = AsyncGeneratorFunctionPrototype;
	  AsyncGeneratorFunctionPrototype.constructor = AsyncGeneratorFunction;
	  $defineProperty(AsyncGeneratorFunctionPrototype, 'constructor', {enumerable: false});
	  var AsyncGeneratorContext = function AsyncGeneratorContext(observer) {
	    var $__0 = this;
	    this.decoratedObserver = $traceurRuntime.createDecoratedGenerator(observer, (function() {
	      $__0.done = true;
	    }));
	    this.done = false;
	    this.inReturn = false;
	  };
	  ($traceurRuntime.createClass)(AsyncGeneratorContext, {
	    throw: function(error) {
	      if (!this.inReturn) {
	        throw error;
	      }
	    },
	    yield: function(value) {
	      if (this.done) {
	        this.inReturn = true;
	        throw undefined;
	      }
	      var result;
	      try {
	        result = this.decoratedObserver.next(value);
	      } catch (e) {
	        this.done = true;
	        throw e;
	      }
	      if (result === undefined) {
	        return ;
	      }
	      if (result.done) {
	        this.done = true;
	        this.inReturn = true;
	        throw undefined;
	      }
	      return result.value;
	    },
	    yieldFor: function(observable) {
	      var ctx = this;
	      return $traceurRuntime.observeForEach(observable[$traceurRuntime.toProperty(Symbol.observer)].bind(observable), function(value) {
	        if (ctx.done) {
	          this.return();
	          return ;
	        }
	        var result;
	        try {
	          result = ctx.decoratedObserver.next(value);
	        } catch (e) {
	          ctx.done = true;
	          throw e;
	        }
	        if (result === undefined) {
	          return ;
	        }
	        if (result.done) {
	          ctx.done = true;
	        }
	        return result;
	      });
	    }
	  }, {});
	  AsyncGeneratorFunctionPrototype.prototype[Symbol.observer] = function(observer) {
	    var observe = this[observeName];
	    var ctx = new AsyncGeneratorContext(observer);
	    $traceurRuntime.schedule((function() {
	      return observe(ctx);
	    })).then((function(value) {
	      if (!ctx.done) {
	        ctx.decoratedObserver.return(value);
	      }
	    })).catch((function(error) {
	      if (!ctx.done) {
	        ctx.decoratedObserver.throw(error);
	      }
	    }));
	    return ctx.decoratedObserver;
	  };
	  $defineProperty(AsyncGeneratorFunctionPrototype.prototype, Symbol.observer, {enumerable: false});
	  function initAsyncGeneratorFunction(functionObject) {
	    functionObject.prototype = $create(AsyncGeneratorFunctionPrototype.prototype);
	    functionObject.__proto__ = AsyncGeneratorFunctionPrototype;
	    return functionObject;
	  }
	  function createAsyncGeneratorInstance(observe, functionObject) {
	    for (var args = [],
	        $__2 = 2; $__2 < arguments.length; $__2++)
	      args[$__2 - 2] = arguments[$__2];
	    var object = $create(functionObject.prototype);
	    object[thisName] = this;
	    object[argsName] = args;
	    object[observeName] = observe;
	    return object;
	  }
	  function observeForEach(observe, next) {
	    return new Promise((function(resolve, reject) {
	      var generator = observe({
	        next: function(value) {
	          return next.call(generator, value);
	        },
	        throw: function(error) {
	          reject(error);
	        },
	        return: function(value) {
	          resolve(value);
	        }
	      });
	    }));
	  }
	  function schedule(asyncF) {
	    return Promise.resolve().then(asyncF);
	  }
	  var generator = Symbol();
	  var onDone = Symbol();
	  var DecoratedGenerator = function DecoratedGenerator(_generator, _onDone) {
	    this[generator] = _generator;
	    this[onDone] = _onDone;
	  };
	  ($traceurRuntime.createClass)(DecoratedGenerator, {
	    next: function(value) {
	      var result = this[generator].next(value);
	      if (result !== undefined && result.done) {
	        this[onDone].call(this);
	      }
	      return result;
	    },
	    throw: function(error) {
	      this[onDone].call(this);
	      return this[generator].throw(error);
	    },
	    return: function(value) {
	      this[onDone].call(this);
	      return this[generator].return(value);
	    }
	  }, {});
	  function createDecoratedGenerator(generator, onDone) {
	    return new DecoratedGenerator(generator, onDone);
	  }
	  $traceurRuntime.initAsyncGeneratorFunction = initAsyncGeneratorFunction;
	  $traceurRuntime.createAsyncGeneratorInstance = createAsyncGeneratorInstance;
	  $traceurRuntime.observeForEach = observeForEach;
	  $traceurRuntime.schedule = schedule;
	  $traceurRuntime.createDecoratedGenerator = createDecoratedGenerator;
	  return {};
	});
	System.registerModule("traceur-runtime@0.0.87/src/runtime/classes.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur-runtime@0.0.87/src/runtime/classes.js";
	  var $Object = Object;
	  var $TypeError = TypeError;
	  var $create = $Object.create;
	  var $defineProperties = $traceurRuntime.defineProperties;
	  var $defineProperty = $traceurRuntime.defineProperty;
	  var $getOwnPropertyDescriptor = $traceurRuntime.getOwnPropertyDescriptor;
	  var $getOwnPropertyNames = $traceurRuntime.getOwnPropertyNames;
	  var $getPrototypeOf = Object.getPrototypeOf;
	  var $__0 = Object,
	      getOwnPropertyNames = $__0.getOwnPropertyNames,
	      getOwnPropertySymbols = $__0.getOwnPropertySymbols;
	  function superDescriptor(homeObject, name) {
	    var proto = $getPrototypeOf(homeObject);
	    do {
	      var result = $getOwnPropertyDescriptor(proto, name);
	      if (result)
	        return result;
	      proto = $getPrototypeOf(proto);
	    } while (proto);
	    return undefined;
	  }
	  function superConstructor(ctor) {
	    return ctor.__proto__;
	  }
	  function superGet(self, homeObject, name) {
	    var descriptor = superDescriptor(homeObject, name);
	    if (descriptor) {
	      if (!descriptor.get)
	        return descriptor.value;
	      return descriptor.get.call(self);
	    }
	    return undefined;
	  }
	  function superSet(self, homeObject, name, value) {
	    var descriptor = superDescriptor(homeObject, name);
	    if (descriptor && descriptor.set) {
	      descriptor.set.call(self, value);
	      return value;
	    }
	    throw $TypeError(("super has no setter '" + name + "'."));
	  }
	  function getDescriptors(object) {
	    var descriptors = {};
	    var names = getOwnPropertyNames(object);
	    for (var i = 0; i < names.length; i++) {
	      var name = names[i];
	      descriptors[name] = $getOwnPropertyDescriptor(object, name);
	    }
	    var symbols = getOwnPropertySymbols(object);
	    for (var i = 0; i < symbols.length; i++) {
	      var symbol = symbols[i];
	      descriptors[$traceurRuntime.toProperty(symbol)] = $getOwnPropertyDescriptor(object, $traceurRuntime.toProperty(symbol));
	    }
	    return descriptors;
	  }
	  function createClass(ctor, object, staticObject, superClass) {
	    $defineProperty(object, 'constructor', {
	      value: ctor,
	      configurable: true,
	      enumerable: false,
	      writable: true
	    });
	    if (arguments.length > 3) {
	      if (typeof superClass === 'function')
	        ctor.__proto__ = superClass;
	      ctor.prototype = $create(getProtoParent(superClass), getDescriptors(object));
	    } else {
	      ctor.prototype = object;
	    }
	    $defineProperty(ctor, 'prototype', {
	      configurable: false,
	      writable: false
	    });
	    return $defineProperties(ctor, getDescriptors(staticObject));
	  }
	  function getProtoParent(superClass) {
	    if (typeof superClass === 'function') {
	      var prototype = superClass.prototype;
	      if ($Object(prototype) === prototype || prototype === null)
	        return superClass.prototype;
	      throw new $TypeError('super prototype must be an Object or null');
	    }
	    if (superClass === null)
	      return null;
	    throw new $TypeError(("Super expression must either be null or a function, not " + typeof superClass + "."));
	  }
	  $traceurRuntime.createClass = createClass;
	  $traceurRuntime.superConstructor = superConstructor;
	  $traceurRuntime.superGet = superGet;
	  $traceurRuntime.superSet = superSet;
	  return {};
	});
	System.registerModule("traceur-runtime@0.0.87/src/runtime/destructuring.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur-runtime@0.0.87/src/runtime/destructuring.js";
	  function iteratorToArray(iter) {
	    var rv = [];
	    var i = 0;
	    var tmp;
	    while (!(tmp = iter.next()).done) {
	      rv[i++] = tmp.value;
	    }
	    return rv;
	  }
	  $traceurRuntime.iteratorToArray = iteratorToArray;
	  return {};
	});
	System.registerModule("traceur-runtime@0.0.87/src/runtime/generators.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur-runtime@0.0.87/src/runtime/generators.js";
	  if (typeof $traceurRuntime !== 'object') {
	    throw new Error('traceur runtime not found.');
	  }
	  var createPrivateName = $traceurRuntime.createPrivateName;
	  var $defineProperties = $traceurRuntime.defineProperties;
	  var $defineProperty = $traceurRuntime.defineProperty;
	  var $create = Object.create;
	  var $TypeError = TypeError;
	  function nonEnum(value) {
	    return {
	      configurable: true,
	      enumerable: false,
	      value: value,
	      writable: true
	    };
	  }
	  var ST_NEWBORN = 0;
	  var ST_EXECUTING = 1;
	  var ST_SUSPENDED = 2;
	  var ST_CLOSED = 3;
	  var END_STATE = -2;
	  var RETHROW_STATE = -3;
	  function getInternalError(state) {
	    return new Error('Traceur compiler bug: invalid state in state machine: ' + state);
	  }
	  var RETURN_SENTINEL = {};
	  function GeneratorContext() {
	    this.state = 0;
	    this.GState = ST_NEWBORN;
	    this.storedException = undefined;
	    this.finallyFallThrough = undefined;
	    this.sent_ = undefined;
	    this.returnValue = undefined;
	    this.oldReturnValue = undefined;
	    this.tryStack_ = [];
	  }
	  GeneratorContext.prototype = {
	    pushTry: function(catchState, finallyState) {
	      if (finallyState !== null) {
	        var finallyFallThrough = null;
	        for (var i = this.tryStack_.length - 1; i >= 0; i--) {
	          if (this.tryStack_[i].catch !== undefined) {
	            finallyFallThrough = this.tryStack_[i].catch;
	            break;
	          }
	        }
	        if (finallyFallThrough === null)
	          finallyFallThrough = RETHROW_STATE;
	        this.tryStack_.push({
	          finally: finallyState,
	          finallyFallThrough: finallyFallThrough
	        });
	      }
	      if (catchState !== null) {
	        this.tryStack_.push({catch: catchState});
	      }
	    },
	    popTry: function() {
	      this.tryStack_.pop();
	    },
	    maybeUncatchable: function() {
	      if (this.storedException === RETURN_SENTINEL) {
	        throw RETURN_SENTINEL;
	      }
	    },
	    get sent() {
	      this.maybeThrow();
	      return this.sent_;
	    },
	    set sent(v) {
	      this.sent_ = v;
	    },
	    get sentIgnoreThrow() {
	      return this.sent_;
	    },
	    maybeThrow: function() {
	      if (this.action === 'throw') {
	        this.action = 'next';
	        throw this.sent_;
	      }
	    },
	    end: function() {
	      switch (this.state) {
	        case END_STATE:
	          return this;
	        case RETHROW_STATE:
	          throw this.storedException;
	        default:
	          throw getInternalError(this.state);
	      }
	    },
	    handleException: function(ex) {
	      this.GState = ST_CLOSED;
	      this.state = END_STATE;
	      throw ex;
	    },
	    wrapYieldStar: function(iterator) {
	      var ctx = this;
	      return {
	        next: function(v) {
	          return iterator.next(v);
	        },
	        throw: function(e) {
	          var result;
	          if (e === RETURN_SENTINEL) {
	            if (iterator.return) {
	              result = iterator.return(ctx.returnValue);
	              if (!result.done) {
	                ctx.returnValue = ctx.oldReturnValue;
	                return result;
	              }
	              ctx.returnValue = result.value;
	            }
	            throw e;
	          }
	          if (iterator.throw) {
	            return iterator.throw(e);
	          }
	          iterator.return && iterator.return();
	          throw $TypeError('Inner iterator does not have a throw method');
	        }
	      };
	    }
	  };
	  function nextOrThrow(ctx, moveNext, action, x) {
	    switch (ctx.GState) {
	      case ST_EXECUTING:
	        throw new Error(("\"" + action + "\" on executing generator"));
	      case ST_CLOSED:
	        if (action == 'next') {
	          return {
	            value: undefined,
	            done: true
	          };
	        }
	        if (x === RETURN_SENTINEL) {
	          return {
	            value: ctx.returnValue,
	            done: true
	          };
	        }
	        throw x;
	      case ST_NEWBORN:
	        if (action === 'throw') {
	          ctx.GState = ST_CLOSED;
	          if (x === RETURN_SENTINEL) {
	            return {
	              value: ctx.returnValue,
	              done: true
	            };
	          }
	          throw x;
	        }
	        if (x !== undefined)
	          throw $TypeError('Sent value to newborn generator');
	      case ST_SUSPENDED:
	        ctx.GState = ST_EXECUTING;
	        ctx.action = action;
	        ctx.sent = x;
	        var value;
	        try {
	          value = moveNext(ctx);
	        } catch (ex) {
	          if (ex === RETURN_SENTINEL) {
	            value = ctx;
	          } else {
	            throw ex;
	          }
	        }
	        var done = value === ctx;
	        if (done)
	          value = ctx.returnValue;
	        ctx.GState = done ? ST_CLOSED : ST_SUSPENDED;
	        return {
	          value: value,
	          done: done
	        };
	    }
	  }
	  var ctxName = createPrivateName();
	  var moveNextName = createPrivateName();
	  function GeneratorFunction() {}
	  function GeneratorFunctionPrototype() {}
	  GeneratorFunction.prototype = GeneratorFunctionPrototype;
	  $defineProperty(GeneratorFunctionPrototype, 'constructor', nonEnum(GeneratorFunction));
	  GeneratorFunctionPrototype.prototype = {
	    constructor: GeneratorFunctionPrototype,
	    next: function(v) {
	      return nextOrThrow(this[ctxName], this[moveNextName], 'next', v);
	    },
	    throw: function(v) {
	      return nextOrThrow(this[ctxName], this[moveNextName], 'throw', v);
	    },
	    return: function(v) {
	      this[ctxName].oldReturnValue = this[ctxName].returnValue;
	      this[ctxName].returnValue = v;
	      return nextOrThrow(this[ctxName], this[moveNextName], 'throw', RETURN_SENTINEL);
	    }
	  };
	  $defineProperties(GeneratorFunctionPrototype.prototype, {
	    constructor: {enumerable: false},
	    next: {enumerable: false},
	    throw: {enumerable: false},
	    return: {enumerable: false}
	  });
	  Object.defineProperty(GeneratorFunctionPrototype.prototype, Symbol.iterator, nonEnum(function() {
	    return this;
	  }));
	  function createGeneratorInstance(innerFunction, functionObject, self) {
	    var moveNext = getMoveNext(innerFunction, self);
	    var ctx = new GeneratorContext();
	    var object = $create(functionObject.prototype);
	    object[ctxName] = ctx;
	    object[moveNextName] = moveNext;
	    return object;
	  }
	  function initGeneratorFunction(functionObject) {
	    functionObject.prototype = $create(GeneratorFunctionPrototype.prototype);
	    functionObject.__proto__ = GeneratorFunctionPrototype;
	    return functionObject;
	  }
	  function AsyncFunctionContext() {
	    GeneratorContext.call(this);
	    this.err = undefined;
	    var ctx = this;
	    ctx.result = new Promise(function(resolve, reject) {
	      ctx.resolve = resolve;
	      ctx.reject = reject;
	    });
	  }
	  AsyncFunctionContext.prototype = $create(GeneratorContext.prototype);
	  AsyncFunctionContext.prototype.end = function() {
	    switch (this.state) {
	      case END_STATE:
	        this.resolve(this.returnValue);
	        break;
	      case RETHROW_STATE:
	        this.reject(this.storedException);
	        break;
	      default:
	        this.reject(getInternalError(this.state));
	    }
	  };
	  AsyncFunctionContext.prototype.handleException = function() {
	    this.state = RETHROW_STATE;
	  };
	  function asyncWrap(innerFunction, self) {
	    var moveNext = getMoveNext(innerFunction, self);
	    var ctx = new AsyncFunctionContext();
	    ctx.createCallback = function(newState) {
	      return function(value) {
	        ctx.state = newState;
	        ctx.value = value;
	        moveNext(ctx);
	      };
	    };
	    ctx.errback = function(err) {
	      handleCatch(ctx, err);
	      moveNext(ctx);
	    };
	    moveNext(ctx);
	    return ctx.result;
	  }
	  function getMoveNext(innerFunction, self) {
	    return function(ctx) {
	      while (true) {
	        try {
	          return innerFunction.call(self, ctx);
	        } catch (ex) {
	          handleCatch(ctx, ex);
	        }
	      }
	    };
	  }
	  function handleCatch(ctx, ex) {
	    ctx.storedException = ex;
	    var last = ctx.tryStack_[ctx.tryStack_.length - 1];
	    if (!last) {
	      ctx.handleException(ex);
	      return ;
	    }
	    ctx.state = last.catch !== undefined ? last.catch : last.finally;
	    if (last.finallyFallThrough !== undefined)
	      ctx.finallyFallThrough = last.finallyFallThrough;
	  }
	  $traceurRuntime.asyncWrap = asyncWrap;
	  $traceurRuntime.initGeneratorFunction = initGeneratorFunction;
	  $traceurRuntime.createGeneratorInstance = createGeneratorInstance;
	  return {};
	});
	System.registerModule("traceur-runtime@0.0.87/src/runtime/relativeRequire.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur-runtime@0.0.87/src/runtime/relativeRequire.js";
	  var path;
	  function relativeRequire(callerPath, requiredPath) {
	    path = path || "function" !== 'undefined' && __webpack_require__(52);
	    function isDirectory(path) {
	      return path.slice(-1) === '/';
	    }
	    function isAbsolute(path) {
	      return path[0] === '/';
	    }
	    function isRelative(path) {
	      return path[0] === '.';
	    }
	    if (isDirectory(requiredPath) || isAbsolute(requiredPath))
	      return ;
	    return isRelative(requiredPath) ? __webpack_require__(53)(path.resolve(path.dirname(callerPath), requiredPath)) : __webpack_require__(53)(requiredPath);
	  }
	  $traceurRuntime.require = relativeRequire;
	  return {};
	});
	System.registerModule("traceur-runtime@0.0.87/src/runtime/spread.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur-runtime@0.0.87/src/runtime/spread.js";
	  function spread() {
	    var rv = [],
	        j = 0,
	        iterResult;
	    for (var i = 0; i < arguments.length; i++) {
	      var valueToSpread = $traceurRuntime.checkObjectCoercible(arguments[i]);
	      if (typeof valueToSpread[$traceurRuntime.toProperty(Symbol.iterator)] !== 'function') {
	        throw new TypeError('Cannot spread non-iterable object.');
	      }
	      var iter = valueToSpread[$traceurRuntime.toProperty(Symbol.iterator)]();
	      while (!(iterResult = iter.next()).done) {
	        rv[j++] = iterResult.value;
	      }
	    }
	    return rv;
	  }
	  $traceurRuntime.spread = spread;
	  return {};
	});
	System.registerModule("traceur-runtime@0.0.87/src/runtime/type-assertions.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur-runtime@0.0.87/src/runtime/type-assertions.js";
	  var types = {
	    any: {name: 'any'},
	    boolean: {name: 'boolean'},
	    number: {name: 'number'},
	    string: {name: 'string'},
	    symbol: {name: 'symbol'},
	    void: {name: 'void'}
	  };
	  var GenericType = function GenericType(type, argumentTypes) {
	    this.type = type;
	    this.argumentTypes = argumentTypes;
	  };
	  ($traceurRuntime.createClass)(GenericType, {}, {});
	  var typeRegister = Object.create(null);
	  function genericType(type) {
	    for (var argumentTypes = [],
	        $__1 = 1; $__1 < arguments.length; $__1++)
	      argumentTypes[$__1 - 1] = arguments[$__1];
	    var typeMap = typeRegister;
	    var key = $traceurRuntime.getOwnHashObject(type).hash;
	    if (!typeMap[key]) {
	      typeMap[key] = Object.create(null);
	    }
	    typeMap = typeMap[key];
	    for (var i = 0; i < argumentTypes.length - 1; i++) {
	      key = $traceurRuntime.getOwnHashObject(argumentTypes[i]).hash;
	      if (!typeMap[key]) {
	        typeMap[key] = Object.create(null);
	      }
	      typeMap = typeMap[key];
	    }
	    var tail = argumentTypes[argumentTypes.length - 1];
	    key = $traceurRuntime.getOwnHashObject(tail).hash;
	    if (!typeMap[key]) {
	      typeMap[key] = new GenericType(type, argumentTypes);
	    }
	    return typeMap[key];
	  }
	  $traceurRuntime.GenericType = GenericType;
	  $traceurRuntime.genericType = genericType;
	  $traceurRuntime.type = types;
	  return {};
	});
	System.registerModule("traceur-runtime@0.0.87/src/runtime/runtime-modules.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur-runtime@0.0.87/src/runtime/runtime-modules.js";
	  System.get("traceur-runtime@0.0.87/src/runtime/relativeRequire.js");
	  System.get("traceur-runtime@0.0.87/src/runtime/spread.js");
	  System.get("traceur-runtime@0.0.87/src/runtime/destructuring.js");
	  System.get("traceur-runtime@0.0.87/src/runtime/classes.js");
	  System.get("traceur-runtime@0.0.87/src/runtime/async.js");
	  System.get("traceur-runtime@0.0.87/src/runtime/generators.js");
	  System.get("traceur-runtime@0.0.87/src/runtime/type-assertions.js");
	  return {};
	});
	System.get("traceur-runtime@0.0.87/src/runtime/runtime-modules.js" + '');
	System.registerModule("traceur-runtime@0.0.87/src/runtime/polyfills/utils.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur-runtime@0.0.87/src/runtime/polyfills/utils.js";
	  var $ceil = Math.ceil;
	  var $floor = Math.floor;
	  var $isFinite = isFinite;
	  var $isNaN = isNaN;
	  var $pow = Math.pow;
	  var $min = Math.min;
	  var toObject = $traceurRuntime.toObject;
	  function toUint32(x) {
	    return x >>> 0;
	  }
	  function isObject(x) {
	    return x && (typeof x === 'object' || typeof x === 'function');
	  }
	  function isCallable(x) {
	    return typeof x === 'function';
	  }
	  function isNumber(x) {
	    return typeof x === 'number';
	  }
	  function toInteger(x) {
	    x = +x;
	    if ($isNaN(x))
	      return 0;
	    if (x === 0 || !$isFinite(x))
	      return x;
	    return x > 0 ? $floor(x) : $ceil(x);
	  }
	  var MAX_SAFE_LENGTH = $pow(2, 53) - 1;
	  function toLength(x) {
	    var len = toInteger(x);
	    return len < 0 ? 0 : $min(len, MAX_SAFE_LENGTH);
	  }
	  function checkIterable(x) {
	    return !isObject(x) ? undefined : x[Symbol.iterator];
	  }
	  function isConstructor(x) {
	    return isCallable(x);
	  }
	  function createIteratorResultObject(value, done) {
	    return {
	      value: value,
	      done: done
	    };
	  }
	  function maybeDefine(object, name, descr) {
	    if (!(name in object)) {
	      Object.defineProperty(object, name, descr);
	    }
	  }
	  function maybeDefineMethod(object, name, value) {
	    maybeDefine(object, name, {
	      value: value,
	      configurable: true,
	      enumerable: false,
	      writable: true
	    });
	  }
	  function maybeDefineConst(object, name, value) {
	    maybeDefine(object, name, {
	      value: value,
	      configurable: false,
	      enumerable: false,
	      writable: false
	    });
	  }
	  function maybeAddFunctions(object, functions) {
	    for (var i = 0; i < functions.length; i += 2) {
	      var name = functions[i];
	      var value = functions[i + 1];
	      maybeDefineMethod(object, name, value);
	    }
	  }
	  function maybeAddConsts(object, consts) {
	    for (var i = 0; i < consts.length; i += 2) {
	      var name = consts[i];
	      var value = consts[i + 1];
	      maybeDefineConst(object, name, value);
	    }
	  }
	  function maybeAddIterator(object, func, Symbol) {
	    if (!Symbol || !Symbol.iterator || object[Symbol.iterator])
	      return ;
	    if (object['@@iterator'])
	      func = object['@@iterator'];
	    Object.defineProperty(object, Symbol.iterator, {
	      value: func,
	      configurable: true,
	      enumerable: false,
	      writable: true
	    });
	  }
	  var polyfills = [];
	  function registerPolyfill(func) {
	    polyfills.push(func);
	  }
	  function polyfillAll(global) {
	    polyfills.forEach((function(f) {
	      return f(global);
	    }));
	  }
	  return {
	    get toObject() {
	      return toObject;
	    },
	    get toUint32() {
	      return toUint32;
	    },
	    get isObject() {
	      return isObject;
	    },
	    get isCallable() {
	      return isCallable;
	    },
	    get isNumber() {
	      return isNumber;
	    },
	    get toInteger() {
	      return toInteger;
	    },
	    get toLength() {
	      return toLength;
	    },
	    get checkIterable() {
	      return checkIterable;
	    },
	    get isConstructor() {
	      return isConstructor;
	    },
	    get createIteratorResultObject() {
	      return createIteratorResultObject;
	    },
	    get maybeDefine() {
	      return maybeDefine;
	    },
	    get maybeDefineMethod() {
	      return maybeDefineMethod;
	    },
	    get maybeDefineConst() {
	      return maybeDefineConst;
	    },
	    get maybeAddFunctions() {
	      return maybeAddFunctions;
	    },
	    get maybeAddConsts() {
	      return maybeAddConsts;
	    },
	    get maybeAddIterator() {
	      return maybeAddIterator;
	    },
	    get registerPolyfill() {
	      return registerPolyfill;
	    },
	    get polyfillAll() {
	      return polyfillAll;
	    }
	  };
	});
	System.registerModule("traceur-runtime@0.0.87/src/runtime/polyfills/Map.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur-runtime@0.0.87/src/runtime/polyfills/Map.js";
	  var $__0 = System.get("traceur-runtime@0.0.87/src/runtime/polyfills/utils.js"),
	      isObject = $__0.isObject,
	      maybeAddIterator = $__0.maybeAddIterator,
	      registerPolyfill = $__0.registerPolyfill;
	  var getOwnHashObject = $traceurRuntime.getOwnHashObject;
	  var $hasOwnProperty = Object.prototype.hasOwnProperty;
	  var deletedSentinel = {};
	  function lookupIndex(map, key) {
	    if (isObject(key)) {
	      var hashObject = getOwnHashObject(key);
	      return hashObject && map.objectIndex_[hashObject.hash];
	    }
	    if (typeof key === 'string')
	      return map.stringIndex_[key];
	    return map.primitiveIndex_[key];
	  }
	  function initMap(map) {
	    map.entries_ = [];
	    map.objectIndex_ = Object.create(null);
	    map.stringIndex_ = Object.create(null);
	    map.primitiveIndex_ = Object.create(null);
	    map.deletedCount_ = 0;
	  }
	  var Map = function Map() {
	    var $__10,
	        $__11;
	    var iterable = arguments[0];
	    if (!isObject(this))
	      throw new TypeError('Map called on incompatible type');
	    if ($hasOwnProperty.call(this, 'entries_')) {
	      throw new TypeError('Map can not be reentrantly initialised');
	    }
	    initMap(this);
	    if (iterable !== null && iterable !== undefined) {
	      var $__5 = true;
	      var $__6 = false;
	      var $__7 = undefined;
	      try {
	        for (var $__3 = void 0,
	            $__2 = (iterable)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__5 = ($__3 = $__2.next()).done); $__5 = true) {
	          var $__9 = $__3.value,
	              key = ($__10 = $__9[$traceurRuntime.toProperty(Symbol.iterator)](), ($__11 = $__10.next()).done ? void 0 : $__11.value),
	              value = ($__11 = $__10.next()).done ? void 0 : $__11.value;
	          {
	            this.set(key, value);
	          }
	        }
	      } catch ($__8) {
	        $__6 = true;
	        $__7 = $__8;
	      } finally {
	        try {
	          if (!$__5 && $__2.return != null) {
	            $__2.return();
	          }
	        } finally {
	          if ($__6) {
	            throw $__7;
	          }
	        }
	      }
	    }
	  };
	  ($traceurRuntime.createClass)(Map, {
	    get size() {
	      return this.entries_.length / 2 - this.deletedCount_;
	    },
	    get: function(key) {
	      var index = lookupIndex(this, key);
	      if (index !== undefined)
	        return this.entries_[index + 1];
	    },
	    set: function(key, value) {
	      var objectMode = isObject(key);
	      var stringMode = typeof key === 'string';
	      var index = lookupIndex(this, key);
	      if (index !== undefined) {
	        this.entries_[index + 1] = value;
	      } else {
	        index = this.entries_.length;
	        this.entries_[index] = key;
	        this.entries_[index + 1] = value;
	        if (objectMode) {
	          var hashObject = getOwnHashObject(key);
	          var hash = hashObject.hash;
	          this.objectIndex_[hash] = index;
	        } else if (stringMode) {
	          this.stringIndex_[key] = index;
	        } else {
	          this.primitiveIndex_[key] = index;
	        }
	      }
	      return this;
	    },
	    has: function(key) {
	      return lookupIndex(this, key) !== undefined;
	    },
	    delete: function(key) {
	      var objectMode = isObject(key);
	      var stringMode = typeof key === 'string';
	      var index;
	      var hash;
	      if (objectMode) {
	        var hashObject = getOwnHashObject(key);
	        if (hashObject) {
	          index = this.objectIndex_[hash = hashObject.hash];
	          delete this.objectIndex_[hash];
	        }
	      } else if (stringMode) {
	        index = this.stringIndex_[key];
	        delete this.stringIndex_[key];
	      } else {
	        index = this.primitiveIndex_[key];
	        delete this.primitiveIndex_[key];
	      }
	      if (index !== undefined) {
	        this.entries_[index] = deletedSentinel;
	        this.entries_[index + 1] = undefined;
	        this.deletedCount_++;
	        return true;
	      }
	      return false;
	    },
	    clear: function() {
	      initMap(this);
	    },
	    forEach: function(callbackFn) {
	      var thisArg = arguments[1];
	      for (var i = 0; i < this.entries_.length; i += 2) {
	        var key = this.entries_[i];
	        var value = this.entries_[i + 1];
	        if (key === deletedSentinel)
	          continue;
	        callbackFn.call(thisArg, value, key, this);
	      }
	    },
	    entries: $traceurRuntime.initGeneratorFunction(function $__12() {
	      var i,
	          key,
	          value;
	      return $traceurRuntime.createGeneratorInstance(function($ctx) {
	        while (true)
	          switch ($ctx.state) {
	            case 0:
	              i = 0;
	              $ctx.state = 12;
	              break;
	            case 12:
	              $ctx.state = (i < this.entries_.length) ? 8 : -2;
	              break;
	            case 4:
	              i += 2;
	              $ctx.state = 12;
	              break;
	            case 8:
	              key = this.entries_[i];
	              value = this.entries_[i + 1];
	              $ctx.state = 9;
	              break;
	            case 9:
	              $ctx.state = (key === deletedSentinel) ? 4 : 6;
	              break;
	            case 6:
	              $ctx.state = 2;
	              return [key, value];
	            case 2:
	              $ctx.maybeThrow();
	              $ctx.state = 4;
	              break;
	            default:
	              return $ctx.end();
	          }
	      }, $__12, this);
	    }),
	    keys: $traceurRuntime.initGeneratorFunction(function $__13() {
	      var i,
	          key,
	          value;
	      return $traceurRuntime.createGeneratorInstance(function($ctx) {
	        while (true)
	          switch ($ctx.state) {
	            case 0:
	              i = 0;
	              $ctx.state = 12;
	              break;
	            case 12:
	              $ctx.state = (i < this.entries_.length) ? 8 : -2;
	              break;
	            case 4:
	              i += 2;
	              $ctx.state = 12;
	              break;
	            case 8:
	              key = this.entries_[i];
	              value = this.entries_[i + 1];
	              $ctx.state = 9;
	              break;
	            case 9:
	              $ctx.state = (key === deletedSentinel) ? 4 : 6;
	              break;
	            case 6:
	              $ctx.state = 2;
	              return key;
	            case 2:
	              $ctx.maybeThrow();
	              $ctx.state = 4;
	              break;
	            default:
	              return $ctx.end();
	          }
	      }, $__13, this);
	    }),
	    values: $traceurRuntime.initGeneratorFunction(function $__14() {
	      var i,
	          key,
	          value;
	      return $traceurRuntime.createGeneratorInstance(function($ctx) {
	        while (true)
	          switch ($ctx.state) {
	            case 0:
	              i = 0;
	              $ctx.state = 12;
	              break;
	            case 12:
	              $ctx.state = (i < this.entries_.length) ? 8 : -2;
	              break;
	            case 4:
	              i += 2;
	              $ctx.state = 12;
	              break;
	            case 8:
	              key = this.entries_[i];
	              value = this.entries_[i + 1];
	              $ctx.state = 9;
	              break;
	            case 9:
	              $ctx.state = (key === deletedSentinel) ? 4 : 6;
	              break;
	            case 6:
	              $ctx.state = 2;
	              return value;
	            case 2:
	              $ctx.maybeThrow();
	              $ctx.state = 4;
	              break;
	            default:
	              return $ctx.end();
	          }
	      }, $__14, this);
	    })
	  }, {});
	  Object.defineProperty(Map.prototype, Symbol.iterator, {
	    configurable: true,
	    writable: true,
	    value: Map.prototype.entries
	  });
	  function polyfillMap(global) {
	    var $__9 = global,
	        Object = $__9.Object,
	        Symbol = $__9.Symbol;
	    if (!global.Map)
	      global.Map = Map;
	    var mapPrototype = global.Map.prototype;
	    if (mapPrototype.entries === undefined)
	      global.Map = Map;
	    if (mapPrototype.entries) {
	      maybeAddIterator(mapPrototype, mapPrototype.entries, Symbol);
	      maybeAddIterator(Object.getPrototypeOf(new global.Map().entries()), function() {
	        return this;
	      }, Symbol);
	    }
	  }
	  registerPolyfill(polyfillMap);
	  return {
	    get Map() {
	      return Map;
	    },
	    get polyfillMap() {
	      return polyfillMap;
	    }
	  };
	});
	System.get("traceur-runtime@0.0.87/src/runtime/polyfills/Map.js" + '');
	System.registerModule("traceur-runtime@0.0.87/src/runtime/polyfills/Set.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur-runtime@0.0.87/src/runtime/polyfills/Set.js";
	  var $__0 = System.get("traceur-runtime@0.0.87/src/runtime/polyfills/utils.js"),
	      isObject = $__0.isObject,
	      maybeAddIterator = $__0.maybeAddIterator,
	      registerPolyfill = $__0.registerPolyfill;
	  var Map = System.get("traceur-runtime@0.0.87/src/runtime/polyfills/Map.js").Map;
	  var getOwnHashObject = $traceurRuntime.getOwnHashObject;
	  var $hasOwnProperty = Object.prototype.hasOwnProperty;
	  function initSet(set) {
	    set.map_ = new Map();
	  }
	  var Set = function Set() {
	    var iterable = arguments[0];
	    if (!isObject(this))
	      throw new TypeError('Set called on incompatible type');
	    if ($hasOwnProperty.call(this, 'map_')) {
	      throw new TypeError('Set can not be reentrantly initialised');
	    }
	    initSet(this);
	    if (iterable !== null && iterable !== undefined) {
	      var $__7 = true;
	      var $__8 = false;
	      var $__9 = undefined;
	      try {
	        for (var $__5 = void 0,
	            $__4 = (iterable)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__7 = ($__5 = $__4.next()).done); $__7 = true) {
	          var item = $__5.value;
	          {
	            this.add(item);
	          }
	        }
	      } catch ($__10) {
	        $__8 = true;
	        $__9 = $__10;
	      } finally {
	        try {
	          if (!$__7 && $__4.return != null) {
	            $__4.return();
	          }
	        } finally {
	          if ($__8) {
	            throw $__9;
	          }
	        }
	      }
	    }
	  };
	  ($traceurRuntime.createClass)(Set, {
	    get size() {
	      return this.map_.size;
	    },
	    has: function(key) {
	      return this.map_.has(key);
	    },
	    add: function(key) {
	      this.map_.set(key, key);
	      return this;
	    },
	    delete: function(key) {
	      return this.map_.delete(key);
	    },
	    clear: function() {
	      return this.map_.clear();
	    },
	    forEach: function(callbackFn) {
	      var thisArg = arguments[1];
	      var $__2 = this;
	      return this.map_.forEach((function(value, key) {
	        callbackFn.call(thisArg, key, key, $__2);
	      }));
	    },
	    values: $traceurRuntime.initGeneratorFunction(function $__12() {
	      var $__13,
	          $__14;
	      return $traceurRuntime.createGeneratorInstance(function($ctx) {
	        while (true)
	          switch ($ctx.state) {
	            case 0:
	              $__13 = $ctx.wrapYieldStar(this.map_.keys()[Symbol.iterator]());
	              $ctx.sent = void 0;
	              $ctx.action = 'next';
	              $ctx.state = 12;
	              break;
	            case 12:
	              $__14 = $__13[$ctx.action]($ctx.sentIgnoreThrow);
	              $ctx.state = 9;
	              break;
	            case 9:
	              $ctx.state = ($__14.done) ? 3 : 2;
	              break;
	            case 3:
	              $ctx.sent = $__14.value;
	              $ctx.state = -2;
	              break;
	            case 2:
	              $ctx.state = 12;
	              return $__14.value;
	            default:
	              return $ctx.end();
	          }
	      }, $__12, this);
	    }),
	    entries: $traceurRuntime.initGeneratorFunction(function $__15() {
	      var $__16,
	          $__17;
	      return $traceurRuntime.createGeneratorInstance(function($ctx) {
	        while (true)
	          switch ($ctx.state) {
	            case 0:
	              $__16 = $ctx.wrapYieldStar(this.map_.entries()[Symbol.iterator]());
	              $ctx.sent = void 0;
	              $ctx.action = 'next';
	              $ctx.state = 12;
	              break;
	            case 12:
	              $__17 = $__16[$ctx.action]($ctx.sentIgnoreThrow);
	              $ctx.state = 9;
	              break;
	            case 9:
	              $ctx.state = ($__17.done) ? 3 : 2;
	              break;
	            case 3:
	              $ctx.sent = $__17.value;
	              $ctx.state = -2;
	              break;
	            case 2:
	              $ctx.state = 12;
	              return $__17.value;
	            default:
	              return $ctx.end();
	          }
	      }, $__15, this);
	    })
	  }, {});
	  Object.defineProperty(Set.prototype, Symbol.iterator, {
	    configurable: true,
	    writable: true,
	    value: Set.prototype.values
	  });
	  Object.defineProperty(Set.prototype, 'keys', {
	    configurable: true,
	    writable: true,
	    value: Set.prototype.values
	  });
	  function polyfillSet(global) {
	    var $__11 = global,
	        Object = $__11.Object,
	        Symbol = $__11.Symbol;
	    if (!global.Set)
	      global.Set = Set;
	    var setPrototype = global.Set.prototype;
	    if (setPrototype.values) {
	      maybeAddIterator(setPrototype, setPrototype.values, Symbol);
	      maybeAddIterator(Object.getPrototypeOf(new global.Set().values()), function() {
	        return this;
	      }, Symbol);
	    }
	  }
	  registerPolyfill(polyfillSet);
	  return {
	    get Set() {
	      return Set;
	    },
	    get polyfillSet() {
	      return polyfillSet;
	    }
	  };
	});
	System.get("traceur-runtime@0.0.87/src/runtime/polyfills/Set.js" + '');
	System.registerModule("traceur-runtime@0.0.87/node_modules/rsvp/lib/rsvp/asap.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur-runtime@0.0.87/node_modules/rsvp/lib/rsvp/asap.js";
	  var len = 0;
	  function asap(callback, arg) {
	    queue[len] = callback;
	    queue[len + 1] = arg;
	    len += 2;
	    if (len === 2) {
	      scheduleFlush();
	    }
	  }
	  var $__default = asap;
	  var browserGlobal = (typeof window !== 'undefined') ? window : {};
	  var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
	  var isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';
	  function useNextTick() {
	    return function() {
	      process.nextTick(flush);
	    };
	  }
	  function useMutationObserver() {
	    var iterations = 0;
	    var observer = new BrowserMutationObserver(flush);
	    var node = document.createTextNode('');
	    observer.observe(node, {characterData: true});
	    return function() {
	      node.data = (iterations = ++iterations % 2);
	    };
	  }
	  function useMessageChannel() {
	    var channel = new MessageChannel();
	    channel.port1.onmessage = flush;
	    return function() {
	      channel.port2.postMessage(0);
	    };
	  }
	  function useSetTimeout() {
	    return function() {
	      setTimeout(flush, 1);
	    };
	  }
	  var queue = new Array(1000);
	  function flush() {
	    for (var i = 0; i < len; i += 2) {
	      var callback = queue[i];
	      var arg = queue[i + 1];
	      callback(arg);
	      queue[i] = undefined;
	      queue[i + 1] = undefined;
	    }
	    len = 0;
	  }
	  var scheduleFlush;
	  if (typeof process !== 'undefined' && {}.toString.call(process) === '[object process]') {
	    scheduleFlush = useNextTick();
	  } else if (BrowserMutationObserver) {
	    scheduleFlush = useMutationObserver();
	  } else if (isWorker) {
	    scheduleFlush = useMessageChannel();
	  } else {
	    scheduleFlush = useSetTimeout();
	  }
	  return {get default() {
	      return $__default;
	    }};
	});
	System.registerModule("traceur-runtime@0.0.87/src/runtime/polyfills/Promise.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur-runtime@0.0.87/src/runtime/polyfills/Promise.js";
	  var async = System.get("traceur-runtime@0.0.87/node_modules/rsvp/lib/rsvp/asap.js").default;
	  var registerPolyfill = System.get("traceur-runtime@0.0.87/src/runtime/polyfills/utils.js").registerPolyfill;
	  var promiseRaw = {};
	  function isPromise(x) {
	    return x && typeof x === 'object' && x.status_ !== undefined;
	  }
	  function idResolveHandler(x) {
	    return x;
	  }
	  function idRejectHandler(x) {
	    throw x;
	  }
	  function chain(promise) {
	    var onResolve = arguments[1] !== (void 0) ? arguments[1] : idResolveHandler;
	    var onReject = arguments[2] !== (void 0) ? arguments[2] : idRejectHandler;
	    var deferred = getDeferred(promise.constructor);
	    switch (promise.status_) {
	      case undefined:
	        throw TypeError;
	      case 0:
	        promise.onResolve_.push(onResolve, deferred);
	        promise.onReject_.push(onReject, deferred);
	        break;
	      case +1:
	        promiseEnqueue(promise.value_, [onResolve, deferred]);
	        break;
	      case -1:
	        promiseEnqueue(promise.value_, [onReject, deferred]);
	        break;
	    }
	    return deferred.promise;
	  }
	  function getDeferred(C) {
	    if (this === $Promise) {
	      var promise = promiseInit(new $Promise(promiseRaw));
	      return {
	        promise: promise,
	        resolve: (function(x) {
	          promiseResolve(promise, x);
	        }),
	        reject: (function(r) {
	          promiseReject(promise, r);
	        })
	      };
	    } else {
	      var result = {};
	      result.promise = new C((function(resolve, reject) {
	        result.resolve = resolve;
	        result.reject = reject;
	      }));
	      return result;
	    }
	  }
	  function promiseSet(promise, status, value, onResolve, onReject) {
	    promise.status_ = status;
	    promise.value_ = value;
	    promise.onResolve_ = onResolve;
	    promise.onReject_ = onReject;
	    return promise;
	  }
	  function promiseInit(promise) {
	    return promiseSet(promise, 0, undefined, [], []);
	  }
	  var Promise = function Promise(resolver) {
	    if (resolver === promiseRaw)
	      return ;
	    if (typeof resolver !== 'function')
	      throw new TypeError;
	    var promise = promiseInit(this);
	    try {
	      resolver((function(x) {
	        promiseResolve(promise, x);
	      }), (function(r) {
	        promiseReject(promise, r);
	      }));
	    } catch (e) {
	      promiseReject(promise, e);
	    }
	  };
	  ($traceurRuntime.createClass)(Promise, {
	    catch: function(onReject) {
	      return this.then(undefined, onReject);
	    },
	    then: function(onResolve, onReject) {
	      if (typeof onResolve !== 'function')
	        onResolve = idResolveHandler;
	      if (typeof onReject !== 'function')
	        onReject = idRejectHandler;
	      var that = this;
	      var constructor = this.constructor;
	      return chain(this, function(x) {
	        x = promiseCoerce(constructor, x);
	        return x === that ? onReject(new TypeError) : isPromise(x) ? x.then(onResolve, onReject) : onResolve(x);
	      }, onReject);
	    }
	  }, {
	    resolve: function(x) {
	      if (this === $Promise) {
	        if (isPromise(x)) {
	          return x;
	        }
	        return promiseSet(new $Promise(promiseRaw), +1, x);
	      } else {
	        return new this(function(resolve, reject) {
	          resolve(x);
	        });
	      }
	    },
	    reject: function(r) {
	      if (this === $Promise) {
	        return promiseSet(new $Promise(promiseRaw), -1, r);
	      } else {
	        return new this((function(resolve, reject) {
	          reject(r);
	        }));
	      }
	    },
	    all: function(values) {
	      var deferred = getDeferred(this);
	      var resolutions = [];
	      try {
	        var makeCountdownFunction = function(i) {
	          return (function(x) {
	            resolutions[i] = x;
	            if (--count === 0)
	              deferred.resolve(resolutions);
	          });
	        };
	        var count = 0;
	        var i = 0;
	        var $__6 = true;
	        var $__7 = false;
	        var $__8 = undefined;
	        try {
	          for (var $__4 = void 0,
	              $__3 = (values)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__6 = ($__4 = $__3.next()).done); $__6 = true) {
	            var value = $__4.value;
	            {
	              var countdownFunction = makeCountdownFunction(i);
	              this.resolve(value).then(countdownFunction, (function(r) {
	                deferred.reject(r);
	              }));
	              ++i;
	              ++count;
	            }
	          }
	        } catch ($__9) {
	          $__7 = true;
	          $__8 = $__9;
	        } finally {
	          try {
	            if (!$__6 && $__3.return != null) {
	              $__3.return();
	            }
	          } finally {
	            if ($__7) {
	              throw $__8;
	            }
	          }
	        }
	        if (count === 0) {
	          deferred.resolve(resolutions);
	        }
	      } catch (e) {
	        deferred.reject(e);
	      }
	      return deferred.promise;
	    },
	    race: function(values) {
	      var deferred = getDeferred(this);
	      try {
	        for (var i = 0; i < values.length; i++) {
	          this.resolve(values[i]).then((function(x) {
	            deferred.resolve(x);
	          }), (function(r) {
	            deferred.reject(r);
	          }));
	        }
	      } catch (e) {
	        deferred.reject(e);
	      }
	      return deferred.promise;
	    }
	  });
	  var $Promise = Promise;
	  var $PromiseReject = $Promise.reject;
	  function promiseResolve(promise, x) {
	    promiseDone(promise, +1, x, promise.onResolve_);
	  }
	  function promiseReject(promise, r) {
	    promiseDone(promise, -1, r, promise.onReject_);
	  }
	  function promiseDone(promise, status, value, reactions) {
	    if (promise.status_ !== 0)
	      return ;
	    promiseEnqueue(value, reactions);
	    promiseSet(promise, status, value);
	  }
	  function promiseEnqueue(value, tasks) {
	    async((function() {
	      for (var i = 0; i < tasks.length; i += 2) {
	        promiseHandle(value, tasks[i], tasks[i + 1]);
	      }
	    }));
	  }
	  function promiseHandle(value, handler, deferred) {
	    try {
	      var result = handler(value);
	      if (result === deferred.promise)
	        throw new TypeError;
	      else if (isPromise(result))
	        chain(result, deferred.resolve, deferred.reject);
	      else
	        deferred.resolve(result);
	    } catch (e) {
	      try {
	        deferred.reject(e);
	      } catch (e) {}
	    }
	  }
	  var thenableSymbol = '@@thenable';
	  function isObject(x) {
	    return x && (typeof x === 'object' || typeof x === 'function');
	  }
	  function promiseCoerce(constructor, x) {
	    if (!isPromise(x) && isObject(x)) {
	      var then;
	      try {
	        then = x.then;
	      } catch (r) {
	        var promise = $PromiseReject.call(constructor, r);
	        x[thenableSymbol] = promise;
	        return promise;
	      }
	      if (typeof then === 'function') {
	        var p = x[thenableSymbol];
	        if (p) {
	          return p;
	        } else {
	          var deferred = getDeferred(constructor);
	          x[thenableSymbol] = deferred.promise;
	          try {
	            then.call(x, deferred.resolve, deferred.reject);
	          } catch (r) {
	            deferred.reject(r);
	          }
	          return deferred.promise;
	        }
	      }
	    }
	    return x;
	  }
	  function polyfillPromise(global) {
	    if (!global.Promise)
	      global.Promise = Promise;
	  }
	  registerPolyfill(polyfillPromise);
	  return {
	    get Promise() {
	      return Promise;
	    },
	    get polyfillPromise() {
	      return polyfillPromise;
	    }
	  };
	});
	System.get("traceur-runtime@0.0.87/src/runtime/polyfills/Promise.js" + '');
	System.registerModule("traceur-runtime@0.0.87/src/runtime/polyfills/StringIterator.js", [], function() {
	  "use strict";
	  var $__2;
	  var __moduleName = "traceur-runtime@0.0.87/src/runtime/polyfills/StringIterator.js";
	  var $__0 = System.get("traceur-runtime@0.0.87/src/runtime/polyfills/utils.js"),
	      createIteratorResultObject = $__0.createIteratorResultObject,
	      isObject = $__0.isObject;
	  var toProperty = $traceurRuntime.toProperty;
	  var hasOwnProperty = Object.prototype.hasOwnProperty;
	  var iteratedString = Symbol('iteratedString');
	  var stringIteratorNextIndex = Symbol('stringIteratorNextIndex');
	  var StringIterator = function StringIterator() {
	    ;
	  };
	  ($traceurRuntime.createClass)(StringIterator, ($__2 = {}, Object.defineProperty($__2, "next", {
	    value: function() {
	      var o = this;
	      if (!isObject(o) || !hasOwnProperty.call(o, iteratedString)) {
	        throw new TypeError('this must be a StringIterator object');
	      }
	      var s = o[toProperty(iteratedString)];
	      if (s === undefined) {
	        return createIteratorResultObject(undefined, true);
	      }
	      var position = o[toProperty(stringIteratorNextIndex)];
	      var len = s.length;
	      if (position >= len) {
	        o[toProperty(iteratedString)] = undefined;
	        return createIteratorResultObject(undefined, true);
	      }
	      var first = s.charCodeAt(position);
	      var resultString;
	      if (first < 0xD800 || first > 0xDBFF || position + 1 === len) {
	        resultString = String.fromCharCode(first);
	      } else {
	        var second = s.charCodeAt(position + 1);
	        if (second < 0xDC00 || second > 0xDFFF) {
	          resultString = String.fromCharCode(first);
	        } else {
	          resultString = String.fromCharCode(first) + String.fromCharCode(second);
	        }
	      }
	      o[toProperty(stringIteratorNextIndex)] = position + resultString.length;
	      return createIteratorResultObject(resultString, false);
	    },
	    configurable: true,
	    enumerable: true,
	    writable: true
	  }), Object.defineProperty($__2, Symbol.iterator, {
	    value: function() {
	      return this;
	    },
	    configurable: true,
	    enumerable: true,
	    writable: true
	  }), $__2), {});
	  function createStringIterator(string) {
	    var s = String(string);
	    var iterator = Object.create(StringIterator.prototype);
	    iterator[toProperty(iteratedString)] = s;
	    iterator[toProperty(stringIteratorNextIndex)] = 0;
	    return iterator;
	  }
	  return {get createStringIterator() {
	      return createStringIterator;
	    }};
	});
	System.registerModule("traceur-runtime@0.0.87/src/runtime/polyfills/String.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur-runtime@0.0.87/src/runtime/polyfills/String.js";
	  var createStringIterator = System.get("traceur-runtime@0.0.87/src/runtime/polyfills/StringIterator.js").createStringIterator;
	  var $__1 = System.get("traceur-runtime@0.0.87/src/runtime/polyfills/utils.js"),
	      maybeAddFunctions = $__1.maybeAddFunctions,
	      maybeAddIterator = $__1.maybeAddIterator,
	      registerPolyfill = $__1.registerPolyfill;
	  var $toString = Object.prototype.toString;
	  var $indexOf = String.prototype.indexOf;
	  var $lastIndexOf = String.prototype.lastIndexOf;
	  function startsWith(search) {
	    var string = String(this);
	    if (this == null || $toString.call(search) == '[object RegExp]') {
	      throw TypeError();
	    }
	    var stringLength = string.length;
	    var searchString = String(search);
	    var searchLength = searchString.length;
	    var position = arguments.length > 1 ? arguments[1] : undefined;
	    var pos = position ? Number(position) : 0;
	    if (isNaN(pos)) {
	      pos = 0;
	    }
	    var start = Math.min(Math.max(pos, 0), stringLength);
	    return $indexOf.call(string, searchString, pos) == start;
	  }
	  function endsWith(search) {
	    var string = String(this);
	    if (this == null || $toString.call(search) == '[object RegExp]') {
	      throw TypeError();
	    }
	    var stringLength = string.length;
	    var searchString = String(search);
	    var searchLength = searchString.length;
	    var pos = stringLength;
	    if (arguments.length > 1) {
	      var position = arguments[1];
	      if (position !== undefined) {
	        pos = position ? Number(position) : 0;
	        if (isNaN(pos)) {
	          pos = 0;
	        }
	      }
	    }
	    var end = Math.min(Math.max(pos, 0), stringLength);
	    var start = end - searchLength;
	    if (start < 0) {
	      return false;
	    }
	    return $lastIndexOf.call(string, searchString, start) == start;
	  }
	  function includes(search) {
	    if (this == null) {
	      throw TypeError();
	    }
	    var string = String(this);
	    if (search && $toString.call(search) == '[object RegExp]') {
	      throw TypeError();
	    }
	    var stringLength = string.length;
	    var searchString = String(search);
	    var searchLength = searchString.length;
	    var position = arguments.length > 1 ? arguments[1] : undefined;
	    var pos = position ? Number(position) : 0;
	    if (pos != pos) {
	      pos = 0;
	    }
	    var start = Math.min(Math.max(pos, 0), stringLength);
	    if (searchLength + start > stringLength) {
	      return false;
	    }
	    return $indexOf.call(string, searchString, pos) != -1;
	  }
	  function repeat(count) {
	    if (this == null) {
	      throw TypeError();
	    }
	    var string = String(this);
	    var n = count ? Number(count) : 0;
	    if (isNaN(n)) {
	      n = 0;
	    }
	    if (n < 0 || n == Infinity) {
	      throw RangeError();
	    }
	    if (n == 0) {
	      return '';
	    }
	    var result = '';
	    while (n--) {
	      result += string;
	    }
	    return result;
	  }
	  function codePointAt(position) {
	    if (this == null) {
	      throw TypeError();
	    }
	    var string = String(this);
	    var size = string.length;
	    var index = position ? Number(position) : 0;
	    if (isNaN(index)) {
	      index = 0;
	    }
	    if (index < 0 || index >= size) {
	      return undefined;
	    }
	    var first = string.charCodeAt(index);
	    var second;
	    if (first >= 0xD800 && first <= 0xDBFF && size > index + 1) {
	      second = string.charCodeAt(index + 1);
	      if (second >= 0xDC00 && second <= 0xDFFF) {
	        return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
	      }
	    }
	    return first;
	  }
	  function raw(callsite) {
	    var raw = callsite.raw;
	    var len = raw.length >>> 0;
	    if (len === 0)
	      return '';
	    var s = '';
	    var i = 0;
	    while (true) {
	      s += raw[i];
	      if (i + 1 === len)
	        return s;
	      s += arguments[++i];
	    }
	  }
	  function fromCodePoint(_) {
	    var codeUnits = [];
	    var floor = Math.floor;
	    var highSurrogate;
	    var lowSurrogate;
	    var index = -1;
	    var length = arguments.length;
	    if (!length) {
	      return '';
	    }
	    while (++index < length) {
	      var codePoint = Number(arguments[index]);
	      if (!isFinite(codePoint) || codePoint < 0 || codePoint > 0x10FFFF || floor(codePoint) != codePoint) {
	        throw RangeError('Invalid code point: ' + codePoint);
	      }
	      if (codePoint <= 0xFFFF) {
	        codeUnits.push(codePoint);
	      } else {
	        codePoint -= 0x10000;
	        highSurrogate = (codePoint >> 10) + 0xD800;
	        lowSurrogate = (codePoint % 0x400) + 0xDC00;
	        codeUnits.push(highSurrogate, lowSurrogate);
	      }
	    }
	    return String.fromCharCode.apply(null, codeUnits);
	  }
	  function stringPrototypeIterator() {
	    var o = $traceurRuntime.checkObjectCoercible(this);
	    var s = String(o);
	    return createStringIterator(s);
	  }
	  function polyfillString(global) {
	    var String = global.String;
	    maybeAddFunctions(String.prototype, ['codePointAt', codePointAt, 'endsWith', endsWith, 'includes', includes, 'repeat', repeat, 'startsWith', startsWith]);
	    maybeAddFunctions(String, ['fromCodePoint', fromCodePoint, 'raw', raw]);
	    maybeAddIterator(String.prototype, stringPrototypeIterator, Symbol);
	  }
	  registerPolyfill(polyfillString);
	  return {
	    get startsWith() {
	      return startsWith;
	    },
	    get endsWith() {
	      return endsWith;
	    },
	    get includes() {
	      return includes;
	    },
	    get repeat() {
	      return repeat;
	    },
	    get codePointAt() {
	      return codePointAt;
	    },
	    get raw() {
	      return raw;
	    },
	    get fromCodePoint() {
	      return fromCodePoint;
	    },
	    get stringPrototypeIterator() {
	      return stringPrototypeIterator;
	    },
	    get polyfillString() {
	      return polyfillString;
	    }
	  };
	});
	System.get("traceur-runtime@0.0.87/src/runtime/polyfills/String.js" + '');
	System.registerModule("traceur-runtime@0.0.87/src/runtime/polyfills/ArrayIterator.js", [], function() {
	  "use strict";
	  var $__2;
	  var __moduleName = "traceur-runtime@0.0.87/src/runtime/polyfills/ArrayIterator.js";
	  var $__0 = System.get("traceur-runtime@0.0.87/src/runtime/polyfills/utils.js"),
	      toObject = $__0.toObject,
	      toUint32 = $__0.toUint32,
	      createIteratorResultObject = $__0.createIteratorResultObject;
	  var ARRAY_ITERATOR_KIND_KEYS = 1;
	  var ARRAY_ITERATOR_KIND_VALUES = 2;
	  var ARRAY_ITERATOR_KIND_ENTRIES = 3;
	  var ArrayIterator = function ArrayIterator() {
	    ;
	  };
	  ($traceurRuntime.createClass)(ArrayIterator, ($__2 = {}, Object.defineProperty($__2, "next", {
	    value: function() {
	      var iterator = toObject(this);
	      var array = iterator.iteratorObject_;
	      if (!array) {
	        throw new TypeError('Object is not an ArrayIterator');
	      }
	      var index = iterator.arrayIteratorNextIndex_;
	      var itemKind = iterator.arrayIterationKind_;
	      var length = toUint32(array.length);
	      if (index >= length) {
	        iterator.arrayIteratorNextIndex_ = Infinity;
	        return createIteratorResultObject(undefined, true);
	      }
	      iterator.arrayIteratorNextIndex_ = index + 1;
	      if (itemKind == ARRAY_ITERATOR_KIND_VALUES)
	        return createIteratorResultObject(array[index], false);
	      if (itemKind == ARRAY_ITERATOR_KIND_ENTRIES)
	        return createIteratorResultObject([index, array[index]], false);
	      return createIteratorResultObject(index, false);
	    },
	    configurable: true,
	    enumerable: true,
	    writable: true
	  }), Object.defineProperty($__2, Symbol.iterator, {
	    value: function() {
	      return this;
	    },
	    configurable: true,
	    enumerable: true,
	    writable: true
	  }), $__2), {});
	  function createArrayIterator(array, kind) {
	    var object = toObject(array);
	    var iterator = new ArrayIterator;
	    iterator.iteratorObject_ = object;
	    iterator.arrayIteratorNextIndex_ = 0;
	    iterator.arrayIterationKind_ = kind;
	    return iterator;
	  }
	  function entries() {
	    return createArrayIterator(this, ARRAY_ITERATOR_KIND_ENTRIES);
	  }
	  function keys() {
	    return createArrayIterator(this, ARRAY_ITERATOR_KIND_KEYS);
	  }
	  function values() {
	    return createArrayIterator(this, ARRAY_ITERATOR_KIND_VALUES);
	  }
	  return {
	    get entries() {
	      return entries;
	    },
	    get keys() {
	      return keys;
	    },
	    get values() {
	      return values;
	    }
	  };
	});
	System.registerModule("traceur-runtime@0.0.87/src/runtime/polyfills/Array.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur-runtime@0.0.87/src/runtime/polyfills/Array.js";
	  var $__0 = System.get("traceur-runtime@0.0.87/src/runtime/polyfills/ArrayIterator.js"),
	      entries = $__0.entries,
	      keys = $__0.keys,
	      jsValues = $__0.values;
	  var $__1 = System.get("traceur-runtime@0.0.87/src/runtime/polyfills/utils.js"),
	      checkIterable = $__1.checkIterable,
	      isCallable = $__1.isCallable,
	      isConstructor = $__1.isConstructor,
	      maybeAddFunctions = $__1.maybeAddFunctions,
	      maybeAddIterator = $__1.maybeAddIterator,
	      registerPolyfill = $__1.registerPolyfill,
	      toInteger = $__1.toInteger,
	      toLength = $__1.toLength,
	      toObject = $__1.toObject;
	  function from(arrLike) {
	    var mapFn = arguments[1];
	    var thisArg = arguments[2];
	    var C = this;
	    var items = toObject(arrLike);
	    var mapping = mapFn !== undefined;
	    var k = 0;
	    var arr,
	        len;
	    if (mapping && !isCallable(mapFn)) {
	      throw TypeError();
	    }
	    if (checkIterable(items)) {
	      arr = isConstructor(C) ? new C() : [];
	      var $__5 = true;
	      var $__6 = false;
	      var $__7 = undefined;
	      try {
	        for (var $__3 = void 0,
	            $__2 = (items)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__5 = ($__3 = $__2.next()).done); $__5 = true) {
	          var item = $__3.value;
	          {
	            if (mapping) {
	              arr[k] = mapFn.call(thisArg, item, k);
	            } else {
	              arr[k] = item;
	            }
	            k++;
	          }
	        }
	      } catch ($__8) {
	        $__6 = true;
	        $__7 = $__8;
	      } finally {
	        try {
	          if (!$__5 && $__2.return != null) {
	            $__2.return();
	          }
	        } finally {
	          if ($__6) {
	            throw $__7;
	          }
	        }
	      }
	      arr.length = k;
	      return arr;
	    }
	    len = toLength(items.length);
	    arr = isConstructor(C) ? new C(len) : new Array(len);
	    for (; k < len; k++) {
	      if (mapping) {
	        arr[k] = typeof thisArg === 'undefined' ? mapFn(items[k], k) : mapFn.call(thisArg, items[k], k);
	      } else {
	        arr[k] = items[k];
	      }
	    }
	    arr.length = len;
	    return arr;
	  }
	  function of() {
	    for (var items = [],
	        $__9 = 0; $__9 < arguments.length; $__9++)
	      items[$__9] = arguments[$__9];
	    var C = this;
	    var len = items.length;
	    var arr = isConstructor(C) ? new C(len) : new Array(len);
	    for (var k = 0; k < len; k++) {
	      arr[k] = items[k];
	    }
	    arr.length = len;
	    return arr;
	  }
	  function fill(value) {
	    var start = arguments[1] !== (void 0) ? arguments[1] : 0;
	    var end = arguments[2];
	    var object = toObject(this);
	    var len = toLength(object.length);
	    var fillStart = toInteger(start);
	    var fillEnd = end !== undefined ? toInteger(end) : len;
	    fillStart = fillStart < 0 ? Math.max(len + fillStart, 0) : Math.min(fillStart, len);
	    fillEnd = fillEnd < 0 ? Math.max(len + fillEnd, 0) : Math.min(fillEnd, len);
	    while (fillStart < fillEnd) {
	      object[fillStart] = value;
	      fillStart++;
	    }
	    return object;
	  }
	  function find(predicate) {
	    var thisArg = arguments[1];
	    return findHelper(this, predicate, thisArg);
	  }
	  function findIndex(predicate) {
	    var thisArg = arguments[1];
	    return findHelper(this, predicate, thisArg, true);
	  }
	  function findHelper(self, predicate) {
	    var thisArg = arguments[2];
	    var returnIndex = arguments[3] !== (void 0) ? arguments[3] : false;
	    var object = toObject(self);
	    var len = toLength(object.length);
	    if (!isCallable(predicate)) {
	      throw TypeError();
	    }
	    for (var i = 0; i < len; i++) {
	      var value = object[i];
	      if (predicate.call(thisArg, value, i, object)) {
	        return returnIndex ? i : value;
	      }
	    }
	    return returnIndex ? -1 : undefined;
	  }
	  function polyfillArray(global) {
	    var $__10 = global,
	        Array = $__10.Array,
	        Object = $__10.Object,
	        Symbol = $__10.Symbol;
	    var values = jsValues;
	    if (Symbol && Symbol.iterator && Array.prototype[Symbol.iterator]) {
	      values = Array.prototype[Symbol.iterator];
	    }
	    maybeAddFunctions(Array.prototype, ['entries', entries, 'keys', keys, 'values', values, 'fill', fill, 'find', find, 'findIndex', findIndex]);
	    maybeAddFunctions(Array, ['from', from, 'of', of]);
	    maybeAddIterator(Array.prototype, values, Symbol);
	    maybeAddIterator(Object.getPrototypeOf([].values()), function() {
	      return this;
	    }, Symbol);
	  }
	  registerPolyfill(polyfillArray);
	  return {
	    get from() {
	      return from;
	    },
	    get of() {
	      return of;
	    },
	    get fill() {
	      return fill;
	    },
	    get find() {
	      return find;
	    },
	    get findIndex() {
	      return findIndex;
	    },
	    get polyfillArray() {
	      return polyfillArray;
	    }
	  };
	});
	System.get("traceur-runtime@0.0.87/src/runtime/polyfills/Array.js" + '');
	System.registerModule("traceur-runtime@0.0.87/src/runtime/polyfills/Object.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur-runtime@0.0.87/src/runtime/polyfills/Object.js";
	  var $__0 = System.get("traceur-runtime@0.0.87/src/runtime/polyfills/utils.js"),
	      maybeAddFunctions = $__0.maybeAddFunctions,
	      registerPolyfill = $__0.registerPolyfill;
	  var $__1 = $traceurRuntime,
	      defineProperty = $__1.defineProperty,
	      getOwnPropertyDescriptor = $__1.getOwnPropertyDescriptor,
	      getOwnPropertyNames = $__1.getOwnPropertyNames,
	      isPrivateName = $__1.isPrivateName,
	      keys = $__1.keys;
	  function is(left, right) {
	    if (left === right)
	      return left !== 0 || 1 / left === 1 / right;
	    return left !== left && right !== right;
	  }
	  function assign(target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];
	      var props = source == null ? [] : keys(source);
	      var p = void 0,
	          length = props.length;
	      for (p = 0; p < length; p++) {
	        var name = props[p];
	        if (isPrivateName(name))
	          continue;
	        target[name] = source[name];
	      }
	    }
	    return target;
	  }
	  function mixin(target, source) {
	    var props = getOwnPropertyNames(source);
	    var p,
	        descriptor,
	        length = props.length;
	    for (p = 0; p < length; p++) {
	      var name = props[p];
	      if (isPrivateName(name))
	        continue;
	      descriptor = getOwnPropertyDescriptor(source, props[p]);
	      defineProperty(target, props[p], descriptor);
	    }
	    return target;
	  }
	  function polyfillObject(global) {
	    var Object = global.Object;
	    maybeAddFunctions(Object, ['assign', assign, 'is', is, 'mixin', mixin]);
	  }
	  registerPolyfill(polyfillObject);
	  return {
	    get is() {
	      return is;
	    },
	    get assign() {
	      return assign;
	    },
	    get mixin() {
	      return mixin;
	    },
	    get polyfillObject() {
	      return polyfillObject;
	    }
	  };
	});
	System.get("traceur-runtime@0.0.87/src/runtime/polyfills/Object.js" + '');
	System.registerModule("traceur-runtime@0.0.87/src/runtime/polyfills/Number.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur-runtime@0.0.87/src/runtime/polyfills/Number.js";
	  var $__0 = System.get("traceur-runtime@0.0.87/src/runtime/polyfills/utils.js"),
	      isNumber = $__0.isNumber,
	      maybeAddConsts = $__0.maybeAddConsts,
	      maybeAddFunctions = $__0.maybeAddFunctions,
	      registerPolyfill = $__0.registerPolyfill,
	      toInteger = $__0.toInteger;
	  var $abs = Math.abs;
	  var $isFinite = isFinite;
	  var $isNaN = isNaN;
	  var MAX_SAFE_INTEGER = Math.pow(2, 53) - 1;
	  var MIN_SAFE_INTEGER = -Math.pow(2, 53) + 1;
	  var EPSILON = Math.pow(2, -52);
	  function NumberIsFinite(number) {
	    return isNumber(number) && $isFinite(number);
	  }
	  ;
	  function isInteger(number) {
	    return NumberIsFinite(number) && toInteger(number) === number;
	  }
	  function NumberIsNaN(number) {
	    return isNumber(number) && $isNaN(number);
	  }
	  ;
	  function isSafeInteger(number) {
	    if (NumberIsFinite(number)) {
	      var integral = toInteger(number);
	      if (integral === number)
	        return $abs(integral) <= MAX_SAFE_INTEGER;
	    }
	    return false;
	  }
	  function polyfillNumber(global) {
	    var Number = global.Number;
	    maybeAddConsts(Number, ['MAX_SAFE_INTEGER', MAX_SAFE_INTEGER, 'MIN_SAFE_INTEGER', MIN_SAFE_INTEGER, 'EPSILON', EPSILON]);
	    maybeAddFunctions(Number, ['isFinite', NumberIsFinite, 'isInteger', isInteger, 'isNaN', NumberIsNaN, 'isSafeInteger', isSafeInteger]);
	  }
	  registerPolyfill(polyfillNumber);
	  return {
	    get MAX_SAFE_INTEGER() {
	      return MAX_SAFE_INTEGER;
	    },
	    get MIN_SAFE_INTEGER() {
	      return MIN_SAFE_INTEGER;
	    },
	    get EPSILON() {
	      return EPSILON;
	    },
	    get isFinite() {
	      return NumberIsFinite;
	    },
	    get isInteger() {
	      return isInteger;
	    },
	    get isNaN() {
	      return NumberIsNaN;
	    },
	    get isSafeInteger() {
	      return isSafeInteger;
	    },
	    get polyfillNumber() {
	      return polyfillNumber;
	    }
	  };
	});
	System.get("traceur-runtime@0.0.87/src/runtime/polyfills/Number.js" + '');
	System.registerModule("traceur-runtime@0.0.87/src/runtime/polyfills/fround.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur-runtime@0.0.87/src/runtime/polyfills/fround.js";
	  var $isFinite = isFinite;
	  var $isNaN = isNaN;
	  var $__0 = Math,
	      LN2 = $__0.LN2,
	      abs = $__0.abs,
	      floor = $__0.floor,
	      log = $__0.log,
	      min = $__0.min,
	      pow = $__0.pow;
	  function packIEEE754(v, ebits, fbits) {
	    var bias = (1 << (ebits - 1)) - 1,
	        s,
	        e,
	        f,
	        ln,
	        i,
	        bits,
	        str,
	        bytes;
	    function roundToEven(n) {
	      var w = floor(n),
	          f = n - w;
	      if (f < 0.5)
	        return w;
	      if (f > 0.5)
	        return w + 1;
	      return w % 2 ? w + 1 : w;
	    }
	    if (v !== v) {
	      e = (1 << ebits) - 1;
	      f = pow(2, fbits - 1);
	      s = 0;
	    } else if (v === Infinity || v === -Infinity) {
	      e = (1 << ebits) - 1;
	      f = 0;
	      s = (v < 0) ? 1 : 0;
	    } else if (v === 0) {
	      e = 0;
	      f = 0;
	      s = (1 / v === -Infinity) ? 1 : 0;
	    } else {
	      s = v < 0;
	      v = abs(v);
	      if (v >= pow(2, 1 - bias)) {
	        e = min(floor(log(v) / LN2), 1023);
	        f = roundToEven(v / pow(2, e) * pow(2, fbits));
	        if (f / pow(2, fbits) >= 2) {
	          e = e + 1;
	          f = 1;
	        }
	        if (e > bias) {
	          e = (1 << ebits) - 1;
	          f = 0;
	        } else {
	          e = e + bias;
	          f = f - pow(2, fbits);
	        }
	      } else {
	        e = 0;
	        f = roundToEven(v / pow(2, 1 - bias - fbits));
	      }
	    }
	    bits = [];
	    for (i = fbits; i; i -= 1) {
	      bits.push(f % 2 ? 1 : 0);
	      f = floor(f / 2);
	    }
	    for (i = ebits; i; i -= 1) {
	      bits.push(e % 2 ? 1 : 0);
	      e = floor(e / 2);
	    }
	    bits.push(s ? 1 : 0);
	    bits.reverse();
	    str = bits.join('');
	    bytes = [];
	    while (str.length) {
	      bytes.push(parseInt(str.substring(0, 8), 2));
	      str = str.substring(8);
	    }
	    return bytes;
	  }
	  function unpackIEEE754(bytes, ebits, fbits) {
	    var bits = [],
	        i,
	        j,
	        b,
	        str,
	        bias,
	        s,
	        e,
	        f;
	    for (i = bytes.length; i; i -= 1) {
	      b = bytes[i - 1];
	      for (j = 8; j; j -= 1) {
	        bits.push(b % 2 ? 1 : 0);
	        b = b >> 1;
	      }
	    }
	    bits.reverse();
	    str = bits.join('');
	    bias = (1 << (ebits - 1)) - 1;
	    s = parseInt(str.substring(0, 1), 2) ? -1 : 1;
	    e = parseInt(str.substring(1, 1 + ebits), 2);
	    f = parseInt(str.substring(1 + ebits), 2);
	    if (e === (1 << ebits) - 1) {
	      return f !== 0 ? NaN : s * Infinity;
	    } else if (e > 0) {
	      return s * pow(2, e - bias) * (1 + f / pow(2, fbits));
	    } else if (f !== 0) {
	      return s * pow(2, -(bias - 1)) * (f / pow(2, fbits));
	    } else {
	      return s < 0 ? -0 : 0;
	    }
	  }
	  function unpackF32(b) {
	    return unpackIEEE754(b, 8, 23);
	  }
	  function packF32(v) {
	    return packIEEE754(v, 8, 23);
	  }
	  function fround(x) {
	    if (x === 0 || !$isFinite(x) || $isNaN(x)) {
	      return x;
	    }
	    return unpackF32(packF32(Number(x)));
	  }
	  return {get fround() {
	      return fround;
	    }};
	});
	System.registerModule("traceur-runtime@0.0.87/src/runtime/polyfills/Math.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur-runtime@0.0.87/src/runtime/polyfills/Math.js";
	  var jsFround = System.get("traceur-runtime@0.0.87/src/runtime/polyfills/fround.js").fround;
	  var $__1 = System.get("traceur-runtime@0.0.87/src/runtime/polyfills/utils.js"),
	      maybeAddFunctions = $__1.maybeAddFunctions,
	      registerPolyfill = $__1.registerPolyfill,
	      toUint32 = $__1.toUint32;
	  var $isFinite = isFinite;
	  var $isNaN = isNaN;
	  var $__2 = Math,
	      abs = $__2.abs,
	      ceil = $__2.ceil,
	      exp = $__2.exp,
	      floor = $__2.floor,
	      log = $__2.log,
	      pow = $__2.pow,
	      sqrt = $__2.sqrt;
	  function clz32(x) {
	    x = toUint32(+x);
	    if (x == 0)
	      return 32;
	    var result = 0;
	    if ((x & 0xFFFF0000) === 0) {
	      x <<= 16;
	      result += 16;
	    }
	    ;
	    if ((x & 0xFF000000) === 0) {
	      x <<= 8;
	      result += 8;
	    }
	    ;
	    if ((x & 0xF0000000) === 0) {
	      x <<= 4;
	      result += 4;
	    }
	    ;
	    if ((x & 0xC0000000) === 0) {
	      x <<= 2;
	      result += 2;
	    }
	    ;
	    if ((x & 0x80000000) === 0) {
	      x <<= 1;
	      result += 1;
	    }
	    ;
	    return result;
	  }
	  function imul(x, y) {
	    x = toUint32(+x);
	    y = toUint32(+y);
	    var xh = (x >>> 16) & 0xffff;
	    var xl = x & 0xffff;
	    var yh = (y >>> 16) & 0xffff;
	    var yl = y & 0xffff;
	    return xl * yl + (((xh * yl + xl * yh) << 16) >>> 0) | 0;
	  }
	  function sign(x) {
	    x = +x;
	    if (x > 0)
	      return 1;
	    if (x < 0)
	      return -1;
	    return x;
	  }
	  function log10(x) {
	    return log(x) * 0.434294481903251828;
	  }
	  function log2(x) {
	    return log(x) * 1.442695040888963407;
	  }
	  function log1p(x) {
	    x = +x;
	    if (x < -1 || $isNaN(x)) {
	      return NaN;
	    }
	    if (x === 0 || x === Infinity) {
	      return x;
	    }
	    if (x === -1) {
	      return -Infinity;
	    }
	    var result = 0;
	    var n = 50;
	    if (x < 0 || x > 1) {
	      return log(1 + x);
	    }
	    for (var i = 1; i < n; i++) {
	      if ((i % 2) === 0) {
	        result -= pow(x, i) / i;
	      } else {
	        result += pow(x, i) / i;
	      }
	    }
	    return result;
	  }
	  function expm1(x) {
	    x = +x;
	    if (x === -Infinity) {
	      return -1;
	    }
	    if (!$isFinite(x) || x === 0) {
	      return x;
	    }
	    return exp(x) - 1;
	  }
	  function cosh(x) {
	    x = +x;
	    if (x === 0) {
	      return 1;
	    }
	    if ($isNaN(x)) {
	      return NaN;
	    }
	    if (!$isFinite(x)) {
	      return Infinity;
	    }
	    if (x < 0) {
	      x = -x;
	    }
	    if (x > 21) {
	      return exp(x) / 2;
	    }
	    return (exp(x) + exp(-x)) / 2;
	  }
	  function sinh(x) {
	    x = +x;
	    if (!$isFinite(x) || x === 0) {
	      return x;
	    }
	    return (exp(x) - exp(-x)) / 2;
	  }
	  function tanh(x) {
	    x = +x;
	    if (x === 0)
	      return x;
	    if (!$isFinite(x))
	      return sign(x);
	    var exp1 = exp(x);
	    var exp2 = exp(-x);
	    return (exp1 - exp2) / (exp1 + exp2);
	  }
	  function acosh(x) {
	    x = +x;
	    if (x < 1)
	      return NaN;
	    if (!$isFinite(x))
	      return x;
	    return log(x + sqrt(x + 1) * sqrt(x - 1));
	  }
	  function asinh(x) {
	    x = +x;
	    if (x === 0 || !$isFinite(x))
	      return x;
	    if (x > 0)
	      return log(x + sqrt(x * x + 1));
	    return -log(-x + sqrt(x * x + 1));
	  }
	  function atanh(x) {
	    x = +x;
	    if (x === -1) {
	      return -Infinity;
	    }
	    if (x === 1) {
	      return Infinity;
	    }
	    if (x === 0) {
	      return x;
	    }
	    if ($isNaN(x) || x < -1 || x > 1) {
	      return NaN;
	    }
	    return 0.5 * log((1 + x) / (1 - x));
	  }
	  function hypot(x, y) {
	    var length = arguments.length;
	    var args = new Array(length);
	    var max = 0;
	    for (var i = 0; i < length; i++) {
	      var n = arguments[i];
	      n = +n;
	      if (n === Infinity || n === -Infinity)
	        return Infinity;
	      n = abs(n);
	      if (n > max)
	        max = n;
	      args[i] = n;
	    }
	    if (max === 0)
	      max = 1;
	    var sum = 0;
	    var compensation = 0;
	    for (var i = 0; i < length; i++) {
	      var n = args[i] / max;
	      var summand = n * n - compensation;
	      var preliminary = sum + summand;
	      compensation = (preliminary - sum) - summand;
	      sum = preliminary;
	    }
	    return sqrt(sum) * max;
	  }
	  function trunc(x) {
	    x = +x;
	    if (x > 0)
	      return floor(x);
	    if (x < 0)
	      return ceil(x);
	    return x;
	  }
	  var fround,
	      f32;
	  if (typeof Float32Array === 'function') {
	    f32 = new Float32Array(1);
	    fround = function(x) {
	      f32[0] = Number(x);
	      return f32[0];
	    };
	  } else {
	    fround = jsFround;
	  }
	  ;
	  function cbrt(x) {
	    x = +x;
	    if (x === 0)
	      return x;
	    var negate = x < 0;
	    if (negate)
	      x = -x;
	    var result = pow(x, 1 / 3);
	    return negate ? -result : result;
	  }
	  function polyfillMath(global) {
	    var Math = global.Math;
	    maybeAddFunctions(Math, ['acosh', acosh, 'asinh', asinh, 'atanh', atanh, 'cbrt', cbrt, 'clz32', clz32, 'cosh', cosh, 'expm1', expm1, 'fround', fround, 'hypot', hypot, 'imul', imul, 'log10', log10, 'log1p', log1p, 'log2', log2, 'sign', sign, 'sinh', sinh, 'tanh', tanh, 'trunc', trunc]);
	  }
	  registerPolyfill(polyfillMath);
	  return {
	    get clz32() {
	      return clz32;
	    },
	    get imul() {
	      return imul;
	    },
	    get sign() {
	      return sign;
	    },
	    get log10() {
	      return log10;
	    },
	    get log2() {
	      return log2;
	    },
	    get log1p() {
	      return log1p;
	    },
	    get expm1() {
	      return expm1;
	    },
	    get cosh() {
	      return cosh;
	    },
	    get sinh() {
	      return sinh;
	    },
	    get tanh() {
	      return tanh;
	    },
	    get acosh() {
	      return acosh;
	    },
	    get asinh() {
	      return asinh;
	    },
	    get atanh() {
	      return atanh;
	    },
	    get hypot() {
	      return hypot;
	    },
	    get trunc() {
	      return trunc;
	    },
	    get fround() {
	      return fround;
	    },
	    get cbrt() {
	      return cbrt;
	    },
	    get polyfillMath() {
	      return polyfillMath;
	    }
	  };
	});
	System.get("traceur-runtime@0.0.87/src/runtime/polyfills/Math.js" + '');
	System.registerModule("traceur-runtime@0.0.87/src/runtime/polyfills/polyfills.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur-runtime@0.0.87/src/runtime/polyfills/polyfills.js";
	  var polyfillAll = System.get("traceur-runtime@0.0.87/src/runtime/polyfills/utils.js").polyfillAll;
	  polyfillAll(Reflect.global);
	  var setupGlobals = $traceurRuntime.setupGlobals;
	  $traceurRuntime.setupGlobals = function(global) {
	    setupGlobals(global);
	    polyfillAll(global);
	  };
	  return {};
	});
	System.get("traceur-runtime@0.0.87/src/runtime/polyfills/polyfills.js" + '');

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(24)))

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// resolves . and .. elements in a path array with directory names there
	// must be no slashes, empty elements, or device names (c:\) in the array
	// (so also no leading and trailing slashes - it does not distinguish
	// relative and absolute paths)
	function normalizeArray(parts, allowAboveRoot) {
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = parts.length - 1; i >= 0; i--) {
	    var last = parts[i];
	    if (last === '.') {
	      parts.splice(i, 1);
	    } else if (last === '..') {
	      parts.splice(i, 1);
	      up++;
	    } else if (up) {
	      parts.splice(i, 1);
	      up--;
	    }
	  }

	  // if the path is allowed to go above the root, restore leading ..s
	  if (allowAboveRoot) {
	    for (; up--; up) {
	      parts.unshift('..');
	    }
	  }

	  return parts;
	}

	// Split a filename into [root, dir, basename, ext], unix version
	// 'root' is just a slash, or nothing.
	var splitPathRe =
	    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
	var splitPath = function(filename) {
	  return splitPathRe.exec(filename).slice(1);
	};

	// path.resolve([from ...], to)
	// posix version
	exports.resolve = function() {
	  var resolvedPath = '',
	      resolvedAbsolute = false;

	  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
	    var path = (i >= 0) ? arguments[i] : process.cwd();

	    // Skip empty and invalid entries
	    if (typeof path !== 'string') {
	      throw new TypeError('Arguments to path.resolve must be strings');
	    } else if (!path) {
	      continue;
	    }

	    resolvedPath = path + '/' + resolvedPath;
	    resolvedAbsolute = path.charAt(0) === '/';
	  }

	  // At this point the path should be resolved to a full absolute path, but
	  // handle relative paths to be safe (might happen when process.cwd() fails)

	  // Normalize the path
	  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
	    return !!p;
	  }), !resolvedAbsolute).join('/');

	  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
	};

	// path.normalize(path)
	// posix version
	exports.normalize = function(path) {
	  var isAbsolute = exports.isAbsolute(path),
	      trailingSlash = substr(path, -1) === '/';

	  // Normalize the path
	  path = normalizeArray(filter(path.split('/'), function(p) {
	    return !!p;
	  }), !isAbsolute).join('/');

	  if (!path && !isAbsolute) {
	    path = '.';
	  }
	  if (path && trailingSlash) {
	    path += '/';
	  }

	  return (isAbsolute ? '/' : '') + path;
	};

	// posix version
	exports.isAbsolute = function(path) {
	  return path.charAt(0) === '/';
	};

	// posix version
	exports.join = function() {
	  var paths = Array.prototype.slice.call(arguments, 0);
	  return exports.normalize(filter(paths, function(p, index) {
	    if (typeof p !== 'string') {
	      throw new TypeError('Arguments to path.join must be strings');
	    }
	    return p;
	  }).join('/'));
	};


	// path.relative(from, to)
	// posix version
	exports.relative = function(from, to) {
	  from = exports.resolve(from).substr(1);
	  to = exports.resolve(to).substr(1);

	  function trim(arr) {
	    var start = 0;
	    for (; start < arr.length; start++) {
	      if (arr[start] !== '') break;
	    }

	    var end = arr.length - 1;
	    for (; end >= 0; end--) {
	      if (arr[end] !== '') break;
	    }

	    if (start > end) return [];
	    return arr.slice(start, end - start + 1);
	  }

	  var fromParts = trim(from.split('/'));
	  var toParts = trim(to.split('/'));

	  var length = Math.min(fromParts.length, toParts.length);
	  var samePartsLength = length;
	  for (var i = 0; i < length; i++) {
	    if (fromParts[i] !== toParts[i]) {
	      samePartsLength = i;
	      break;
	    }
	  }

	  var outputParts = [];
	  for (var i = samePartsLength; i < fromParts.length; i++) {
	    outputParts.push('..');
	  }

	  outputParts = outputParts.concat(toParts.slice(samePartsLength));

	  return outputParts.join('/');
	};

	exports.sep = '/';
	exports.delimiter = ':';

	exports.dirname = function(path) {
	  var result = splitPath(path),
	      root = result[0],
	      dir = result[1];

	  if (!root && !dir) {
	    // No dirname whatsoever
	    return '.';
	  }

	  if (dir) {
	    // It has a dirname, strip trailing slash
	    dir = dir.substr(0, dir.length - 1);
	  }

	  return root + dir;
	};


	exports.basename = function(path, ext) {
	  var f = splitPath(path)[2];
	  // TODO: make this comparison case-insensitive on windows?
	  if (ext && f.substr(-1 * ext.length) === ext) {
	    f = f.substr(0, f.length - ext.length);
	  }
	  return f;
	};


	exports.extname = function(path) {
	  return splitPath(path)[3];
	};

	function filter (xs, f) {
	    if (xs.filter) return xs.filter(f);
	    var res = [];
	    for (var i = 0; i < xs.length; i++) {
	        if (f(xs[i], i, xs)) res.push(xs[i]);
	    }
	    return res;
	}

	// String.prototype.substr - negative index don't work in IE8
	var substr = 'ab'.substr(-1) === 'b'
	    ? function (str, start, len) { return str.substr(start, len) }
	    : function (str, start, len) {
	        if (start < 0) start = str.length + start;
	        return str.substr(start, len);
	    }
	;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(24)))

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./traceur": 54,
		"./traceur-runtime": 51,
		"./traceur-runtime.js": 51,
		"./traceur.js": 54
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 53;


/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(global, process, module) {(function(global) {
	  'use strict';
	  if (global.$traceurRuntime) {
	    return ;
	  }
	  var $Object = Object;
	  var $TypeError = TypeError;
	  var $create = $Object.create;
	  var $defineProperties = $Object.defineProperties;
	  var $defineProperty = $Object.defineProperty;
	  var $freeze = $Object.freeze;
	  var $getOwnPropertyDescriptor = $Object.getOwnPropertyDescriptor;
	  var $getOwnPropertyNames = $Object.getOwnPropertyNames;
	  var $keys = $Object.keys;
	  var $hasOwnProperty = $Object.prototype.hasOwnProperty;
	  var $toString = $Object.prototype.toString;
	  var $preventExtensions = Object.preventExtensions;
	  var $seal = Object.seal;
	  var $isExtensible = Object.isExtensible;
	  var $apply = Function.prototype.call.bind(Function.prototype.apply);
	  function $bind(operand, thisArg, args) {
	    var argArray = [thisArg];
	    for (var i = 0; i < args.length; i++) {
	      argArray[i + 1] = args[i];
	    }
	    var func = $apply(Function.prototype.bind, operand, argArray);
	    return func;
	  }
	  function $construct(func, argArray) {
	    var object = new ($bind(func, null, argArray));
	    return object;
	  }
	  var counter = 0;
	  function newUniqueString() {
	    return '__$' + Math.floor(Math.random() * 1e9) + '$' + ++counter + '$__';
	  }
	  var privateNames = $create(null);
	  function isPrivateName(s) {
	    return privateNames[s];
	  }
	  function createPrivateName() {
	    var s = newUniqueString();
	    privateNames[s] = true;
	    return s;
	  }
	  var CONTINUATION_TYPE = Object.create(null);
	  function createContinuation(operand, thisArg, argsArray) {
	    return [CONTINUATION_TYPE, operand, thisArg, argsArray];
	  }
	  function isContinuation(object) {
	    return object && object[0] === CONTINUATION_TYPE;
	  }
	  var isTailRecursiveName = null;
	  function setupProperTailCalls() {
	    isTailRecursiveName = createPrivateName();
	    Function.prototype.call = initTailRecursiveFunction(function call(thisArg) {
	      var result = tailCall(function(thisArg) {
	        var argArray = [];
	        for (var i = 1; i < arguments.length; ++i) {
	          argArray[i - 1] = arguments[i];
	        }
	        var continuation = createContinuation(this, thisArg, argArray);
	        return continuation;
	      }, this, arguments);
	      return result;
	    });
	    Function.prototype.apply = initTailRecursiveFunction(function apply(thisArg, argArray) {
	      var result = tailCall(function(thisArg, argArray) {
	        var continuation = createContinuation(this, thisArg, argArray);
	        return continuation;
	      }, this, arguments);
	      return result;
	    });
	  }
	  function initTailRecursiveFunction(func) {
	    if (isTailRecursiveName === null) {
	      setupProperTailCalls();
	    }
	    func[isTailRecursiveName] = true;
	    return func;
	  }
	  function isTailRecursive(func) {
	    return !!func[isTailRecursiveName];
	  }
	  function tailCall(func, thisArg, argArray) {
	    var continuation = argArray[0];
	    if (isContinuation(continuation)) {
	      continuation = $apply(func, thisArg, continuation[3]);
	      return continuation;
	    }
	    continuation = createContinuation(func, thisArg, argArray);
	    while (true) {
	      if (isTailRecursive(func)) {
	        continuation = $apply(func, continuation[2], [continuation]);
	      } else {
	        continuation = $apply(func, continuation[2], continuation[3]);
	      }
	      if (!isContinuation(continuation)) {
	        return continuation;
	      }
	      func = continuation[1];
	    }
	  }
	  function construct() {
	    var object;
	    if (isTailRecursive(this)) {
	      object = $construct(this, [createContinuation(null, null, arguments)]);
	    } else {
	      object = $construct(this, arguments);
	    }
	    return object;
	  }
	  var $traceurRuntime = {
	    initTailRecursiveFunction: initTailRecursiveFunction,
	    call: tailCall,
	    continuation: createContinuation,
	    construct: construct
	  };
	  (function() {
	    function nonEnum(value) {
	      return {
	        configurable: true,
	        enumerable: false,
	        value: value,
	        writable: true
	      };
	    }
	    var method = nonEnum;
	    var symbolInternalProperty = newUniqueString();
	    var symbolDescriptionProperty = newUniqueString();
	    var symbolDataProperty = newUniqueString();
	    var symbolValues = $create(null);
	    function isShimSymbol(symbol) {
	      return typeof symbol === 'object' && symbol instanceof SymbolValue;
	    }
	    function typeOf(v) {
	      if (isShimSymbol(v))
	        return 'symbol';
	      return typeof v;
	    }
	    function Symbol(description) {
	      var value = new SymbolValue(description);
	      if (!(this instanceof Symbol))
	        return value;
	      throw new TypeError('Symbol cannot be new\'ed');
	    }
	    $defineProperty(Symbol.prototype, 'constructor', nonEnum(Symbol));
	    $defineProperty(Symbol.prototype, 'toString', method(function() {
	      var symbolValue = this[symbolDataProperty];
	      return symbolValue[symbolInternalProperty];
	    }));
	    $defineProperty(Symbol.prototype, 'valueOf', method(function() {
	      var symbolValue = this[symbolDataProperty];
	      if (!symbolValue)
	        throw TypeError('Conversion from symbol to string');
	      if (!getOption('symbols'))
	        return symbolValue[symbolInternalProperty];
	      return symbolValue;
	    }));
	    function SymbolValue(description) {
	      var key = newUniqueString();
	      $defineProperty(this, symbolDataProperty, {value: this});
	      $defineProperty(this, symbolInternalProperty, {value: key});
	      $defineProperty(this, symbolDescriptionProperty, {value: description});
	      freeze(this);
	      symbolValues[key] = this;
	    }
	    $defineProperty(SymbolValue.prototype, 'constructor', nonEnum(Symbol));
	    $defineProperty(SymbolValue.prototype, 'toString', {
	      value: Symbol.prototype.toString,
	      enumerable: false
	    });
	    $defineProperty(SymbolValue.prototype, 'valueOf', {
	      value: Symbol.prototype.valueOf,
	      enumerable: false
	    });
	    var hashProperty = createPrivateName();
	    var hashPropertyDescriptor = {value: undefined};
	    var hashObjectProperties = {
	      hash: {value: undefined},
	      self: {value: undefined}
	    };
	    var hashCounter = 0;
	    function getOwnHashObject(object) {
	      var hashObject = object[hashProperty];
	      if (hashObject && hashObject.self === object)
	        return hashObject;
	      if ($isExtensible(object)) {
	        hashObjectProperties.hash.value = hashCounter++;
	        hashObjectProperties.self.value = object;
	        hashPropertyDescriptor.value = $create(null, hashObjectProperties);
	        $defineProperty(object, hashProperty, hashPropertyDescriptor);
	        return hashPropertyDescriptor.value;
	      }
	      return undefined;
	    }
	    function freeze(object) {
	      getOwnHashObject(object);
	      return $freeze.apply(this, arguments);
	    }
	    function preventExtensions(object) {
	      getOwnHashObject(object);
	      return $preventExtensions.apply(this, arguments);
	    }
	    function seal(object) {
	      getOwnHashObject(object);
	      return $seal.apply(this, arguments);
	    }
	    freeze(SymbolValue.prototype);
	    function isSymbolString(s) {
	      return symbolValues[s] || privateNames[s];
	    }
	    function toProperty(name) {
	      if (isShimSymbol(name))
	        return name[symbolInternalProperty];
	      return name;
	    }
	    function removeSymbolKeys(array) {
	      var rv = [];
	      for (var i = 0; i < array.length; i++) {
	        if (!isSymbolString(array[i])) {
	          rv.push(array[i]);
	        }
	      }
	      return rv;
	    }
	    function getOwnPropertyNames(object) {
	      return removeSymbolKeys($getOwnPropertyNames(object));
	    }
	    function keys(object) {
	      return removeSymbolKeys($keys(object));
	    }
	    function getOwnPropertySymbols(object) {
	      var rv = [];
	      var names = $getOwnPropertyNames(object);
	      for (var i = 0; i < names.length; i++) {
	        var symbol = symbolValues[names[i]];
	        if (symbol) {
	          rv.push(symbol);
	        }
	      }
	      return rv;
	    }
	    function getOwnPropertyDescriptor(object, name) {
	      return $getOwnPropertyDescriptor(object, toProperty(name));
	    }
	    function hasOwnProperty(name) {
	      return $hasOwnProperty.call(this, toProperty(name));
	    }
	    function getOption(name) {
	      return global.$traceurRuntime.options[name];
	    }
	    function defineProperty(object, name, descriptor) {
	      if (isShimSymbol(name)) {
	        name = name[symbolInternalProperty];
	      }
	      $defineProperty(object, name, descriptor);
	      return object;
	    }
	    function polyfillObject(Object) {
	      $defineProperty(Object, 'defineProperty', {value: defineProperty});
	      $defineProperty(Object, 'getOwnPropertyNames', {value: getOwnPropertyNames});
	      $defineProperty(Object, 'getOwnPropertyDescriptor', {value: getOwnPropertyDescriptor});
	      $defineProperty(Object.prototype, 'hasOwnProperty', {value: hasOwnProperty});
	      $defineProperty(Object, 'freeze', {value: freeze});
	      $defineProperty(Object, 'preventExtensions', {value: preventExtensions});
	      $defineProperty(Object, 'seal', {value: seal});
	      $defineProperty(Object, 'keys', {value: keys});
	    }
	    function exportStar(object) {
	      for (var i = 1; i < arguments.length; i++) {
	        var names = $getOwnPropertyNames(arguments[i]);
	        for (var j = 0; j < names.length; j++) {
	          var name = names[j];
	          if (isSymbolString(name))
	            continue;
	          (function(mod, name) {
	            $defineProperty(object, name, {
	              get: function() {
	                return mod[name];
	              },
	              enumerable: true
	            });
	          })(arguments[i], names[j]);
	        }
	      }
	      return object;
	    }
	    function isObject(x) {
	      return x != null && (typeof x === 'object' || typeof x === 'function');
	    }
	    function toObject(x) {
	      if (x == null)
	        throw $TypeError();
	      return $Object(x);
	    }
	    function checkObjectCoercible(argument) {
	      if (argument == null) {
	        throw new TypeError('Value cannot be converted to an Object');
	      }
	      return argument;
	    }
	    function polyfillSymbol(global, Symbol) {
	      if (!global.Symbol) {
	        global.Symbol = Symbol;
	        Object.getOwnPropertySymbols = getOwnPropertySymbols;
	      }
	      if (!global.Symbol.iterator) {
	        global.Symbol.iterator = Symbol('Symbol.iterator');
	      }
	      if (!global.Symbol.observer) {
	        global.Symbol.observer = Symbol('Symbol.observer');
	      }
	    }
	    function setupGlobals(global) {
	      polyfillSymbol(global, Symbol);
	      global.Reflect = global.Reflect || {};
	      global.Reflect.global = global.Reflect.global || global;
	      polyfillObject(global.Object);
	    }
	    setupGlobals(global);
	    global.$traceurRuntime = {
	      call: tailCall,
	      checkObjectCoercible: checkObjectCoercible,
	      construct: construct,
	      continuation: createContinuation,
	      createPrivateName: createPrivateName,
	      defineProperties: $defineProperties,
	      defineProperty: $defineProperty,
	      exportStar: exportStar,
	      getOwnHashObject: getOwnHashObject,
	      getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	      getOwnPropertyNames: $getOwnPropertyNames,
	      initTailRecursiveFunction: initTailRecursiveFunction,
	      isObject: isObject,
	      isPrivateName: isPrivateName,
	      isSymbolString: isSymbolString,
	      keys: $keys,
	      options: {},
	      setupGlobals: setupGlobals,
	      toObject: toObject,
	      toProperty: toProperty,
	      typeof: typeOf
	    };
	  })();
	})(typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
	(function() {
	  function buildFromEncodedParts(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
	    var out = [];
	    if (opt_scheme) {
	      out.push(opt_scheme, ':');
	    }
	    if (opt_domain) {
	      out.push('//');
	      if (opt_userInfo) {
	        out.push(opt_userInfo, '@');
	      }
	      out.push(opt_domain);
	      if (opt_port) {
	        out.push(':', opt_port);
	      }
	    }
	    if (opt_path) {
	      out.push(opt_path);
	    }
	    if (opt_queryData) {
	      out.push('?', opt_queryData);
	    }
	    if (opt_fragment) {
	      out.push('#', opt_fragment);
	    }
	    return out.join('');
	  }
	  ;
	  var splitRe = new RegExp('^' + '(?:' + '([^:/?#.]+)' + ':)?' + '(?://' + '(?:([^/?#]*)@)?' + '([\\w\\d\\-\\u0100-\\uffff.%]*)' + '(?::([0-9]+))?' + ')?' + '([^?#]+)?' + '(?:\\?([^#]*))?' + '(?:#(.*))?' + '$');
	  var ComponentIndex = {
	    SCHEME: 1,
	    USER_INFO: 2,
	    DOMAIN: 3,
	    PORT: 4,
	    PATH: 5,
	    QUERY_DATA: 6,
	    FRAGMENT: 7
	  };
	  function split(uri) {
	    return (uri.match(splitRe));
	  }
	  function removeDotSegments(path) {
	    if (path === '/')
	      return '/';
	    var leadingSlash = path[0] === '/' ? '/' : '';
	    var trailingSlash = path.slice(-1) === '/' ? '/' : '';
	    var segments = path.split('/');
	    var out = [];
	    var up = 0;
	    for (var pos = 0; pos < segments.length; pos++) {
	      var segment = segments[pos];
	      switch (segment) {
	        case '':
	        case '.':
	          break;
	        case '..':
	          if (out.length)
	            out.pop();
	          else
	            up++;
	          break;
	        default:
	          out.push(segment);
	      }
	    }
	    if (!leadingSlash) {
	      while (up-- > 0) {
	        out.unshift('..');
	      }
	      if (out.length === 0)
	        out.push('.');
	    }
	    return leadingSlash + out.join('/') + trailingSlash;
	  }
	  function joinAndCanonicalizePath(parts) {
	    var path = parts[ComponentIndex.PATH] || '';
	    path = removeDotSegments(path);
	    parts[ComponentIndex.PATH] = path;
	    return buildFromEncodedParts(parts[ComponentIndex.SCHEME], parts[ComponentIndex.USER_INFO], parts[ComponentIndex.DOMAIN], parts[ComponentIndex.PORT], parts[ComponentIndex.PATH], parts[ComponentIndex.QUERY_DATA], parts[ComponentIndex.FRAGMENT]);
	  }
	  function canonicalizeUrl(url) {
	    var parts = split(url);
	    return joinAndCanonicalizePath(parts);
	  }
	  function resolveUrl(base, url) {
	    var parts = split(url);
	    var baseParts = split(base);
	    if (parts[ComponentIndex.SCHEME]) {
	      return joinAndCanonicalizePath(parts);
	    } else {
	      parts[ComponentIndex.SCHEME] = baseParts[ComponentIndex.SCHEME];
	    }
	    for (var i = ComponentIndex.SCHEME; i <= ComponentIndex.PORT; i++) {
	      if (!parts[i]) {
	        parts[i] = baseParts[i];
	      }
	    }
	    if (parts[ComponentIndex.PATH][0] == '/') {
	      return joinAndCanonicalizePath(parts);
	    }
	    var path = baseParts[ComponentIndex.PATH];
	    var index = path.lastIndexOf('/');
	    path = path.slice(0, index + 1) + parts[ComponentIndex.PATH];
	    parts[ComponentIndex.PATH] = path;
	    return joinAndCanonicalizePath(parts);
	  }
	  function isAbsolute(name) {
	    if (!name)
	      return false;
	    if (name[0] === '/')
	      return true;
	    var parts = split(name);
	    if (parts[ComponentIndex.SCHEME])
	      return true;
	    return false;
	  }
	  $traceurRuntime.canonicalizeUrl = canonicalizeUrl;
	  $traceurRuntime.isAbsolute = isAbsolute;
	  $traceurRuntime.removeDotSegments = removeDotSegments;
	  $traceurRuntime.resolveUrl = resolveUrl;
	})();
	(function(global) {
	  'use strict';
	  var $__1 = $traceurRuntime,
	      canonicalizeUrl = $__1.canonicalizeUrl,
	      resolveUrl = $__1.resolveUrl,
	      isAbsolute = $__1.isAbsolute;
	  var moduleInstantiators = Object.create(null);
	  var baseURL;
	  if (global.location && global.location.href)
	    baseURL = resolveUrl(global.location.href, './');
	  else
	    baseURL = '';
	  function UncoatedModuleEntry(url, uncoatedModule) {
	    this.url = url;
	    this.value_ = uncoatedModule;
	  }
	  function ModuleEvaluationError(erroneousModuleName, cause) {
	    this.message = this.constructor.name + ': ' + this.stripCause(cause) + ' in ' + erroneousModuleName;
	    if (!(cause instanceof ModuleEvaluationError) && cause.stack)
	      this.stack = this.stripStack(cause.stack);
	    else
	      this.stack = '';
	  }
	  ModuleEvaluationError.prototype = Object.create(Error.prototype);
	  ModuleEvaluationError.prototype.constructor = ModuleEvaluationError;
	  ModuleEvaluationError.prototype.stripError = function(message) {
	    return message.replace(/.*Error:/, this.constructor.name + ':');
	  };
	  ModuleEvaluationError.prototype.stripCause = function(cause) {
	    if (!cause)
	      return '';
	    if (!cause.message)
	      return cause + '';
	    return this.stripError(cause.message);
	  };
	  ModuleEvaluationError.prototype.loadedBy = function(moduleName) {
	    this.stack += '\n loaded by ' + moduleName;
	  };
	  ModuleEvaluationError.prototype.stripStack = function(causeStack) {
	    var stack = [];
	    causeStack.split('\n').some((function(frame) {
	      if (/UncoatedModuleInstantiator/.test(frame))
	        return true;
	      stack.push(frame);
	    }));
	    stack[0] = this.stripError(stack[0]);
	    return stack.join('\n');
	  };
	  function beforeLines(lines, number) {
	    var result = [];
	    var first = number - 3;
	    if (first < 0)
	      first = 0;
	    for (var i = first; i < number; i++) {
	      result.push(lines[i]);
	    }
	    return result;
	  }
	  function afterLines(lines, number) {
	    var last = number + 1;
	    if (last > lines.length - 1)
	      last = lines.length - 1;
	    var result = [];
	    for (var i = number; i <= last; i++) {
	      result.push(lines[i]);
	    }
	    return result;
	  }
	  function columnSpacing(columns) {
	    var result = '';
	    for (var i = 0; i < columns - 1; i++) {
	      result += '-';
	    }
	    return result;
	  }
	  function UncoatedModuleInstantiator(url, func) {
	    UncoatedModuleEntry.call(this, url, null);
	    this.func = func;
	  }
	  UncoatedModuleInstantiator.prototype = Object.create(UncoatedModuleEntry.prototype);
	  UncoatedModuleInstantiator.prototype.getUncoatedModule = function() {
	    if (this.value_)
	      return this.value_;
	    try {
	      var relativeRequire;
	      if (typeof $traceurRuntime !== undefined && $traceurRuntime.require) {
	        relativeRequire = $traceurRuntime.require.bind(null, this.url);
	      }
	      return this.value_ = this.func.call(global, relativeRequire);
	    } catch (ex) {
	      if (ex instanceof ModuleEvaluationError) {
	        ex.loadedBy(this.url);
	        throw ex;
	      }
	      if (ex.stack) {
	        var lines = this.func.toString().split('\n');
	        var evaled = [];
	        ex.stack.split('\n').some(function(frame) {
	          if (frame.indexOf('UncoatedModuleInstantiator.getUncoatedModule') > 0)
	            return true;
	          var m = /(at\s[^\s]*\s).*>:(\d*):(\d*)\)/.exec(frame);
	          if (m) {
	            var line = parseInt(m[2], 10);
	            evaled = evaled.concat(beforeLines(lines, line));
	            evaled.push(columnSpacing(m[3]) + '^');
	            evaled = evaled.concat(afterLines(lines, line));
	            evaled.push('= = = = = = = = =');
	          } else {
	            evaled.push(frame);
	          }
	        });
	        ex.stack = evaled.join('\n');
	      }
	      throw new ModuleEvaluationError(this.url, ex);
	    }
	  };
	  function getUncoatedModuleInstantiator(name) {
	    if (!name)
	      return ;
	    var url = ModuleStore.normalize(name);
	    return moduleInstantiators[url];
	  }
	  ;
	  var moduleInstances = Object.create(null);
	  var liveModuleSentinel = {};
	  function Module(uncoatedModule) {
	    var isLive = arguments[1];
	    var coatedModule = Object.create(null);
	    Object.getOwnPropertyNames(uncoatedModule).forEach((function(name) {
	      var getter,
	          value;
	      if (isLive === liveModuleSentinel) {
	        var descr = Object.getOwnPropertyDescriptor(uncoatedModule, name);
	        if (descr.get)
	          getter = descr.get;
	      }
	      if (!getter) {
	        value = uncoatedModule[name];
	        getter = function() {
	          return value;
	        };
	      }
	      Object.defineProperty(coatedModule, name, {
	        get: getter,
	        enumerable: true
	      });
	    }));
	    Object.preventExtensions(coatedModule);
	    return coatedModule;
	  }
	  var ModuleStore = {
	    normalize: function(name, refererName, refererAddress) {
	      if (typeof name !== 'string')
	        throw new TypeError('module name must be a string, not ' + typeof name);
	      if (isAbsolute(name))
	        return canonicalizeUrl(name);
	      if (/[^\.]\/\.\.\//.test(name)) {
	        throw new Error('module name embeds /../: ' + name);
	      }
	      if (name[0] === '.' && refererName)
	        return resolveUrl(refererName, name);
	      return canonicalizeUrl(name);
	    },
	    get: function(normalizedName) {
	      var m = getUncoatedModuleInstantiator(normalizedName);
	      if (!m)
	        return undefined;
	      var moduleInstance = moduleInstances[m.url];
	      if (moduleInstance)
	        return moduleInstance;
	      moduleInstance = Module(m.getUncoatedModule(), liveModuleSentinel);
	      return moduleInstances[m.url] = moduleInstance;
	    },
	    set: function(normalizedName, module) {
	      normalizedName = String(normalizedName);
	      moduleInstantiators[normalizedName] = new UncoatedModuleInstantiator(normalizedName, (function() {
	        return module;
	      }));
	      moduleInstances[normalizedName] = module;
	    },
	    get baseURL() {
	      return baseURL;
	    },
	    set baseURL(v) {
	      baseURL = String(v);
	    },
	    registerModule: function(name, deps, func) {
	      var normalizedName = ModuleStore.normalize(name);
	      if (moduleInstantiators[normalizedName])
	        throw new Error('duplicate module named ' + normalizedName);
	      moduleInstantiators[normalizedName] = new UncoatedModuleInstantiator(normalizedName, func);
	    },
	    bundleStore: Object.create(null),
	    register: function(name, deps, func) {
	      if (!deps || !deps.length && !func.length) {
	        this.registerModule(name, deps, func);
	      } else {
	        this.bundleStore[name] = {
	          deps: deps,
	          execute: function() {
	            var $__0 = arguments;
	            var depMap = {};
	            deps.forEach((function(dep, index) {
	              return depMap[dep] = $__0[index];
	            }));
	            var registryEntry = func.call(this, depMap);
	            registryEntry.execute.call(this);
	            return registryEntry.exports;
	          }
	        };
	      }
	    },
	    getAnonymousModule: function(func) {
	      return new Module(func.call(global), liveModuleSentinel);
	    },
	    getForTesting: function(name) {
	      var $__0 = this;
	      if (!this.testingPrefix_) {
	        Object.keys(moduleInstances).some((function(key) {
	          var m = /(traceur@[^\/]*\/)/.exec(key);
	          if (m) {
	            $__0.testingPrefix_ = m[1];
	            return true;
	          }
	        }));
	      }
	      return this.get(this.testingPrefix_ + name);
	    }
	  };
	  var moduleStoreModule = new Module({ModuleStore: ModuleStore});
	  ModuleStore.set('@traceur/src/runtime/ModuleStore', moduleStoreModule);
	  ModuleStore.set('@traceur/src/runtime/ModuleStore.js', moduleStoreModule);
	  var setupGlobals = $traceurRuntime.setupGlobals;
	  $traceurRuntime.setupGlobals = function(global) {
	    setupGlobals(global);
	  };
	  $traceurRuntime.ModuleStore = ModuleStore;
	  global.System = {
	    register: ModuleStore.register.bind(ModuleStore),
	    registerModule: ModuleStore.registerModule.bind(ModuleStore),
	    get: ModuleStore.get,
	    set: ModuleStore.set,
	    normalize: ModuleStore.normalize
	  };
	  $traceurRuntime.getModuleImpl = function(name) {
	    var instantiator = getUncoatedModuleInstantiator(name);
	    return instantiator && instantiator.getUncoatedModule();
	  };
	})(typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
	System.registerModule("traceur@0.0.87/src/runtime/async.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/runtime/async.js";
	  if (typeof $traceurRuntime !== 'object') {
	    throw new Error('traceur runtime not found.');
	  }
	  var $createPrivateName = $traceurRuntime.createPrivateName;
	  var $defineProperty = $traceurRuntime.defineProperty;
	  var $defineProperties = $traceurRuntime.defineProperties;
	  var $create = Object.create;
	  var thisName = $createPrivateName();
	  var argsName = $createPrivateName();
	  var observeName = $createPrivateName();
	  function AsyncGeneratorFunction() {}
	  function AsyncGeneratorFunctionPrototype() {}
	  AsyncGeneratorFunction.prototype = AsyncGeneratorFunctionPrototype;
	  AsyncGeneratorFunctionPrototype.constructor = AsyncGeneratorFunction;
	  $defineProperty(AsyncGeneratorFunctionPrototype, 'constructor', {enumerable: false});
	  var AsyncGeneratorContext = function AsyncGeneratorContext(observer) {
	    var $__0 = this;
	    this.decoratedObserver = $traceurRuntime.createDecoratedGenerator(observer, (function() {
	      $__0.done = true;
	    }));
	    this.done = false;
	    this.inReturn = false;
	  };
	  ($traceurRuntime.createClass)(AsyncGeneratorContext, {
	    throw: function(error) {
	      if (!this.inReturn) {
	        throw error;
	      }
	    },
	    yield: function(value) {
	      if (this.done) {
	        this.inReturn = true;
	        throw undefined;
	      }
	      var result;
	      try {
	        result = this.decoratedObserver.next(value);
	      } catch (e) {
	        this.done = true;
	        throw e;
	      }
	      if (result === undefined) {
	        return ;
	      }
	      if (result.done) {
	        this.done = true;
	        this.inReturn = true;
	        throw undefined;
	      }
	      return result.value;
	    },
	    yieldFor: function(observable) {
	      var ctx = this;
	      return $traceurRuntime.observeForEach(observable[$traceurRuntime.toProperty(Symbol.observer)].bind(observable), function(value) {
	        if (ctx.done) {
	          this.return();
	          return ;
	        }
	        var result;
	        try {
	          result = ctx.decoratedObserver.next(value);
	        } catch (e) {
	          ctx.done = true;
	          throw e;
	        }
	        if (result === undefined) {
	          return ;
	        }
	        if (result.done) {
	          ctx.done = true;
	        }
	        return result;
	      });
	    }
	  }, {});
	  AsyncGeneratorFunctionPrototype.prototype[Symbol.observer] = function(observer) {
	    var observe = this[observeName];
	    var ctx = new AsyncGeneratorContext(observer);
	    $traceurRuntime.schedule((function() {
	      return observe(ctx);
	    })).then((function(value) {
	      if (!ctx.done) {
	        ctx.decoratedObserver.return(value);
	      }
	    })).catch((function(error) {
	      if (!ctx.done) {
	        ctx.decoratedObserver.throw(error);
	      }
	    }));
	    return ctx.decoratedObserver;
	  };
	  $defineProperty(AsyncGeneratorFunctionPrototype.prototype, Symbol.observer, {enumerable: false});
	  function initAsyncGeneratorFunction(functionObject) {
	    functionObject.prototype = $create(AsyncGeneratorFunctionPrototype.prototype);
	    functionObject.__proto__ = AsyncGeneratorFunctionPrototype;
	    return functionObject;
	  }
	  function createAsyncGeneratorInstance(observe, functionObject) {
	    for (var args = [],
	        $__2 = 2; $__2 < arguments.length; $__2++)
	      args[$__2 - 2] = arguments[$__2];
	    var object = $create(functionObject.prototype);
	    object[thisName] = this;
	    object[argsName] = args;
	    object[observeName] = observe;
	    return object;
	  }
	  function observeForEach(observe, next) {
	    return new Promise((function(resolve, reject) {
	      var generator = observe({
	        next: function(value) {
	          return next.call(generator, value);
	        },
	        throw: function(error) {
	          reject(error);
	        },
	        return: function(value) {
	          resolve(value);
	        }
	      });
	    }));
	  }
	  function schedule(asyncF) {
	    return Promise.resolve().then(asyncF);
	  }
	  var generator = Symbol();
	  var onDone = Symbol();
	  var DecoratedGenerator = function DecoratedGenerator(_generator, _onDone) {
	    this[generator] = _generator;
	    this[onDone] = _onDone;
	  };
	  ($traceurRuntime.createClass)(DecoratedGenerator, {
	    next: function(value) {
	      var result = this[generator].next(value);
	      if (result !== undefined && result.done) {
	        this[onDone].call(this);
	      }
	      return result;
	    },
	    throw: function(error) {
	      this[onDone].call(this);
	      return this[generator].throw(error);
	    },
	    return: function(value) {
	      this[onDone].call(this);
	      return this[generator].return(value);
	    }
	  }, {});
	  function createDecoratedGenerator(generator, onDone) {
	    return new DecoratedGenerator(generator, onDone);
	  }
	  $traceurRuntime.initAsyncGeneratorFunction = initAsyncGeneratorFunction;
	  $traceurRuntime.createAsyncGeneratorInstance = createAsyncGeneratorInstance;
	  $traceurRuntime.observeForEach = observeForEach;
	  $traceurRuntime.schedule = schedule;
	  $traceurRuntime.createDecoratedGenerator = createDecoratedGenerator;
	  return {};
	});
	System.registerModule("traceur@0.0.87/src/runtime/classes.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/runtime/classes.js";
	  var $Object = Object;
	  var $TypeError = TypeError;
	  var $create = $Object.create;
	  var $defineProperties = $traceurRuntime.defineProperties;
	  var $defineProperty = $traceurRuntime.defineProperty;
	  var $getOwnPropertyDescriptor = $traceurRuntime.getOwnPropertyDescriptor;
	  var $getOwnPropertyNames = $traceurRuntime.getOwnPropertyNames;
	  var $getPrototypeOf = Object.getPrototypeOf;
	  var $__0 = Object,
	      getOwnPropertyNames = $__0.getOwnPropertyNames,
	      getOwnPropertySymbols = $__0.getOwnPropertySymbols;
	  function superDescriptor(homeObject, name) {
	    var proto = $getPrototypeOf(homeObject);
	    do {
	      var result = $getOwnPropertyDescriptor(proto, name);
	      if (result)
	        return result;
	      proto = $getPrototypeOf(proto);
	    } while (proto);
	    return undefined;
	  }
	  function superConstructor(ctor) {
	    return ctor.__proto__;
	  }
	  function superGet(self, homeObject, name) {
	    var descriptor = superDescriptor(homeObject, name);
	    if (descriptor) {
	      if (!descriptor.get)
	        return descriptor.value;
	      return descriptor.get.call(self);
	    }
	    return undefined;
	  }
	  function superSet(self, homeObject, name, value) {
	    var descriptor = superDescriptor(homeObject, name);
	    if (descriptor && descriptor.set) {
	      descriptor.set.call(self, value);
	      return value;
	    }
	    throw $TypeError(("super has no setter '" + name + "'."));
	  }
	  function getDescriptors(object) {
	    var descriptors = {};
	    var names = getOwnPropertyNames(object);
	    for (var i = 0; i < names.length; i++) {
	      var name = names[i];
	      descriptors[name] = $getOwnPropertyDescriptor(object, name);
	    }
	    var symbols = getOwnPropertySymbols(object);
	    for (var i = 0; i < symbols.length; i++) {
	      var symbol = symbols[i];
	      descriptors[$traceurRuntime.toProperty(symbol)] = $getOwnPropertyDescriptor(object, $traceurRuntime.toProperty(symbol));
	    }
	    return descriptors;
	  }
	  function createClass(ctor, object, staticObject, superClass) {
	    $defineProperty(object, 'constructor', {
	      value: ctor,
	      configurable: true,
	      enumerable: false,
	      writable: true
	    });
	    if (arguments.length > 3) {
	      if (typeof superClass === 'function')
	        ctor.__proto__ = superClass;
	      ctor.prototype = $create(getProtoParent(superClass), getDescriptors(object));
	    } else {
	      ctor.prototype = object;
	    }
	    $defineProperty(ctor, 'prototype', {
	      configurable: false,
	      writable: false
	    });
	    return $defineProperties(ctor, getDescriptors(staticObject));
	  }
	  function getProtoParent(superClass) {
	    if (typeof superClass === 'function') {
	      var prototype = superClass.prototype;
	      if ($Object(prototype) === prototype || prototype === null)
	        return superClass.prototype;
	      throw new $TypeError('super prototype must be an Object or null');
	    }
	    if (superClass === null)
	      return null;
	    throw new $TypeError(("Super expression must either be null or a function, not " + typeof superClass + "."));
	  }
	  $traceurRuntime.createClass = createClass;
	  $traceurRuntime.superConstructor = superConstructor;
	  $traceurRuntime.superGet = superGet;
	  $traceurRuntime.superSet = superSet;
	  return {};
	});
	System.registerModule("traceur@0.0.87/src/runtime/destructuring.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/runtime/destructuring.js";
	  function iteratorToArray(iter) {
	    var rv = [];
	    var i = 0;
	    var tmp;
	    while (!(tmp = iter.next()).done) {
	      rv[i++] = tmp.value;
	    }
	    return rv;
	  }
	  $traceurRuntime.iteratorToArray = iteratorToArray;
	  return {};
	});
	System.registerModule("traceur@0.0.87/src/runtime/generators.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/runtime/generators.js";
	  if (typeof $traceurRuntime !== 'object') {
	    throw new Error('traceur runtime not found.');
	  }
	  var createPrivateName = $traceurRuntime.createPrivateName;
	  var $defineProperties = $traceurRuntime.defineProperties;
	  var $defineProperty = $traceurRuntime.defineProperty;
	  var $create = Object.create;
	  var $TypeError = TypeError;
	  function nonEnum(value) {
	    return {
	      configurable: true,
	      enumerable: false,
	      value: value,
	      writable: true
	    };
	  }
	  var ST_NEWBORN = 0;
	  var ST_EXECUTING = 1;
	  var ST_SUSPENDED = 2;
	  var ST_CLOSED = 3;
	  var END_STATE = -2;
	  var RETHROW_STATE = -3;
	  function getInternalError(state) {
	    return new Error('Traceur compiler bug: invalid state in state machine: ' + state);
	  }
	  var RETURN_SENTINEL = {};
	  function GeneratorContext() {
	    this.state = 0;
	    this.GState = ST_NEWBORN;
	    this.storedException = undefined;
	    this.finallyFallThrough = undefined;
	    this.sent_ = undefined;
	    this.returnValue = undefined;
	    this.oldReturnValue = undefined;
	    this.tryStack_ = [];
	  }
	  GeneratorContext.prototype = {
	    pushTry: function(catchState, finallyState) {
	      if (finallyState !== null) {
	        var finallyFallThrough = null;
	        for (var i = this.tryStack_.length - 1; i >= 0; i--) {
	          if (this.tryStack_[i].catch !== undefined) {
	            finallyFallThrough = this.tryStack_[i].catch;
	            break;
	          }
	        }
	        if (finallyFallThrough === null)
	          finallyFallThrough = RETHROW_STATE;
	        this.tryStack_.push({
	          finally: finallyState,
	          finallyFallThrough: finallyFallThrough
	        });
	      }
	      if (catchState !== null) {
	        this.tryStack_.push({catch: catchState});
	      }
	    },
	    popTry: function() {
	      this.tryStack_.pop();
	    },
	    maybeUncatchable: function() {
	      if (this.storedException === RETURN_SENTINEL) {
	        throw RETURN_SENTINEL;
	      }
	    },
	    get sent() {
	      this.maybeThrow();
	      return this.sent_;
	    },
	    set sent(v) {
	      this.sent_ = v;
	    },
	    get sentIgnoreThrow() {
	      return this.sent_;
	    },
	    maybeThrow: function() {
	      if (this.action === 'throw') {
	        this.action = 'next';
	        throw this.sent_;
	      }
	    },
	    end: function() {
	      switch (this.state) {
	        case END_STATE:
	          return this;
	        case RETHROW_STATE:
	          throw this.storedException;
	        default:
	          throw getInternalError(this.state);
	      }
	    },
	    handleException: function(ex) {
	      this.GState = ST_CLOSED;
	      this.state = END_STATE;
	      throw ex;
	    },
	    wrapYieldStar: function(iterator) {
	      var ctx = this;
	      return {
	        next: function(v) {
	          return iterator.next(v);
	        },
	        throw: function(e) {
	          var result;
	          if (e === RETURN_SENTINEL) {
	            if (iterator.return) {
	              result = iterator.return(ctx.returnValue);
	              if (!result.done) {
	                ctx.returnValue = ctx.oldReturnValue;
	                return result;
	              }
	              ctx.returnValue = result.value;
	            }
	            throw e;
	          }
	          if (iterator.throw) {
	            return iterator.throw(e);
	          }
	          iterator.return && iterator.return();
	          throw $TypeError('Inner iterator does not have a throw method');
	        }
	      };
	    }
	  };
	  function nextOrThrow(ctx, moveNext, action, x) {
	    switch (ctx.GState) {
	      case ST_EXECUTING:
	        throw new Error(("\"" + action + "\" on executing generator"));
	      case ST_CLOSED:
	        if (action == 'next') {
	          return {
	            value: undefined,
	            done: true
	          };
	        }
	        if (x === RETURN_SENTINEL) {
	          return {
	            value: ctx.returnValue,
	            done: true
	          };
	        }
	        throw x;
	      case ST_NEWBORN:
	        if (action === 'throw') {
	          ctx.GState = ST_CLOSED;
	          if (x === RETURN_SENTINEL) {
	            return {
	              value: ctx.returnValue,
	              done: true
	            };
	          }
	          throw x;
	        }
	        if (x !== undefined)
	          throw $TypeError('Sent value to newborn generator');
	      case ST_SUSPENDED:
	        ctx.GState = ST_EXECUTING;
	        ctx.action = action;
	        ctx.sent = x;
	        var value;
	        try {
	          value = moveNext(ctx);
	        } catch (ex) {
	          if (ex === RETURN_SENTINEL) {
	            value = ctx;
	          } else {
	            throw ex;
	          }
	        }
	        var done = value === ctx;
	        if (done)
	          value = ctx.returnValue;
	        ctx.GState = done ? ST_CLOSED : ST_SUSPENDED;
	        return {
	          value: value,
	          done: done
	        };
	    }
	  }
	  var ctxName = createPrivateName();
	  var moveNextName = createPrivateName();
	  function GeneratorFunction() {}
	  function GeneratorFunctionPrototype() {}
	  GeneratorFunction.prototype = GeneratorFunctionPrototype;
	  $defineProperty(GeneratorFunctionPrototype, 'constructor', nonEnum(GeneratorFunction));
	  GeneratorFunctionPrototype.prototype = {
	    constructor: GeneratorFunctionPrototype,
	    next: function(v) {
	      return nextOrThrow(this[ctxName], this[moveNextName], 'next', v);
	    },
	    throw: function(v) {
	      return nextOrThrow(this[ctxName], this[moveNextName], 'throw', v);
	    },
	    return: function(v) {
	      this[ctxName].oldReturnValue = this[ctxName].returnValue;
	      this[ctxName].returnValue = v;
	      return nextOrThrow(this[ctxName], this[moveNextName], 'throw', RETURN_SENTINEL);
	    }
	  };
	  $defineProperties(GeneratorFunctionPrototype.prototype, {
	    constructor: {enumerable: false},
	    next: {enumerable: false},
	    throw: {enumerable: false},
	    return: {enumerable: false}
	  });
	  Object.defineProperty(GeneratorFunctionPrototype.prototype, Symbol.iterator, nonEnum(function() {
	    return this;
	  }));
	  function createGeneratorInstance(innerFunction, functionObject, self) {
	    var moveNext = getMoveNext(innerFunction, self);
	    var ctx = new GeneratorContext();
	    var object = $create(functionObject.prototype);
	    object[ctxName] = ctx;
	    object[moveNextName] = moveNext;
	    return object;
	  }
	  function initGeneratorFunction(functionObject) {
	    functionObject.prototype = $create(GeneratorFunctionPrototype.prototype);
	    functionObject.__proto__ = GeneratorFunctionPrototype;
	    return functionObject;
	  }
	  function AsyncFunctionContext() {
	    GeneratorContext.call(this);
	    this.err = undefined;
	    var ctx = this;
	    ctx.result = new Promise(function(resolve, reject) {
	      ctx.resolve = resolve;
	      ctx.reject = reject;
	    });
	  }
	  AsyncFunctionContext.prototype = $create(GeneratorContext.prototype);
	  AsyncFunctionContext.prototype.end = function() {
	    switch (this.state) {
	      case END_STATE:
	        this.resolve(this.returnValue);
	        break;
	      case RETHROW_STATE:
	        this.reject(this.storedException);
	        break;
	      default:
	        this.reject(getInternalError(this.state));
	    }
	  };
	  AsyncFunctionContext.prototype.handleException = function() {
	    this.state = RETHROW_STATE;
	  };
	  function asyncWrap(innerFunction, self) {
	    var moveNext = getMoveNext(innerFunction, self);
	    var ctx = new AsyncFunctionContext();
	    ctx.createCallback = function(newState) {
	      return function(value) {
	        ctx.state = newState;
	        ctx.value = value;
	        moveNext(ctx);
	      };
	    };
	    ctx.errback = function(err) {
	      handleCatch(ctx, err);
	      moveNext(ctx);
	    };
	    moveNext(ctx);
	    return ctx.result;
	  }
	  function getMoveNext(innerFunction, self) {
	    return function(ctx) {
	      while (true) {
	        try {
	          return innerFunction.call(self, ctx);
	        } catch (ex) {
	          handleCatch(ctx, ex);
	        }
	      }
	    };
	  }
	  function handleCatch(ctx, ex) {
	    ctx.storedException = ex;
	    var last = ctx.tryStack_[ctx.tryStack_.length - 1];
	    if (!last) {
	      ctx.handleException(ex);
	      return ;
	    }
	    ctx.state = last.catch !== undefined ? last.catch : last.finally;
	    if (last.finallyFallThrough !== undefined)
	      ctx.finallyFallThrough = last.finallyFallThrough;
	  }
	  $traceurRuntime.asyncWrap = asyncWrap;
	  $traceurRuntime.initGeneratorFunction = initGeneratorFunction;
	  $traceurRuntime.createGeneratorInstance = createGeneratorInstance;
	  return {};
	});
	System.registerModule("traceur@0.0.87/src/runtime/relativeRequire.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/runtime/relativeRequire.js";
	  var path;
	  function relativeRequire(callerPath, requiredPath) {
	    path = path || "function" !== 'undefined' && __webpack_require__(52);
	    function isDirectory(path) {
	      return path.slice(-1) === '/';
	    }
	    function isAbsolute(path) {
	      return path[0] === '/';
	    }
	    function isRelative(path) {
	      return path[0] === '.';
	    }
	    if (isDirectory(requiredPath) || isAbsolute(requiredPath))
	      return ;
	    return isRelative(requiredPath) ? __webpack_require__(53)(path.resolve(path.dirname(callerPath), requiredPath)) : __webpack_require__(53)(requiredPath);
	  }
	  $traceurRuntime.require = relativeRequire;
	  return {};
	});
	System.registerModule("traceur@0.0.87/src/runtime/spread.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/runtime/spread.js";
	  function spread() {
	    var rv = [],
	        j = 0,
	        iterResult;
	    for (var i = 0; i < arguments.length; i++) {
	      var valueToSpread = $traceurRuntime.checkObjectCoercible(arguments[i]);
	      if (typeof valueToSpread[$traceurRuntime.toProperty(Symbol.iterator)] !== 'function') {
	        throw new TypeError('Cannot spread non-iterable object.');
	      }
	      var iter = valueToSpread[$traceurRuntime.toProperty(Symbol.iterator)]();
	      while (!(iterResult = iter.next()).done) {
	        rv[j++] = iterResult.value;
	      }
	    }
	    return rv;
	  }
	  $traceurRuntime.spread = spread;
	  return {};
	});
	System.registerModule("traceur@0.0.87/src/runtime/type-assertions.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/runtime/type-assertions.js";
	  var types = {
	    any: {name: 'any'},
	    boolean: {name: 'boolean'},
	    number: {name: 'number'},
	    string: {name: 'string'},
	    symbol: {name: 'symbol'},
	    void: {name: 'void'}
	  };
	  var GenericType = function GenericType(type, argumentTypes) {
	    this.type = type;
	    this.argumentTypes = argumentTypes;
	  };
	  ($traceurRuntime.createClass)(GenericType, {}, {});
	  var typeRegister = Object.create(null);
	  function genericType(type) {
	    for (var argumentTypes = [],
	        $__1 = 1; $__1 < arguments.length; $__1++)
	      argumentTypes[$__1 - 1] = arguments[$__1];
	    var typeMap = typeRegister;
	    var key = $traceurRuntime.getOwnHashObject(type).hash;
	    if (!typeMap[key]) {
	      typeMap[key] = Object.create(null);
	    }
	    typeMap = typeMap[key];
	    for (var i = 0; i < argumentTypes.length - 1; i++) {
	      key = $traceurRuntime.getOwnHashObject(argumentTypes[i]).hash;
	      if (!typeMap[key]) {
	        typeMap[key] = Object.create(null);
	      }
	      typeMap = typeMap[key];
	    }
	    var tail = argumentTypes[argumentTypes.length - 1];
	    key = $traceurRuntime.getOwnHashObject(tail).hash;
	    if (!typeMap[key]) {
	      typeMap[key] = new GenericType(type, argumentTypes);
	    }
	    return typeMap[key];
	  }
	  $traceurRuntime.GenericType = GenericType;
	  $traceurRuntime.genericType = genericType;
	  $traceurRuntime.type = types;
	  return {};
	});
	System.registerModule("traceur@0.0.87/src/runtime/runtime-modules.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/runtime/runtime-modules.js";
	  System.get("traceur@0.0.87/src/runtime/relativeRequire.js");
	  System.get("traceur@0.0.87/src/runtime/spread.js");
	  System.get("traceur@0.0.87/src/runtime/destructuring.js");
	  System.get("traceur@0.0.87/src/runtime/classes.js");
	  System.get("traceur@0.0.87/src/runtime/async.js");
	  System.get("traceur@0.0.87/src/runtime/generators.js");
	  System.get("traceur@0.0.87/src/runtime/type-assertions.js");
	  return {};
	});
	System.get("traceur@0.0.87/src/runtime/runtime-modules.js" + '');
	System.registerModule("traceur@0.0.87/src/runtime/polyfills/utils.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/runtime/polyfills/utils.js";
	  var $ceil = Math.ceil;
	  var $floor = Math.floor;
	  var $isFinite = isFinite;
	  var $isNaN = isNaN;
	  var $pow = Math.pow;
	  var $min = Math.min;
	  var toObject = $traceurRuntime.toObject;
	  function toUint32(x) {
	    return x >>> 0;
	  }
	  function isObject(x) {
	    return x && (typeof x === 'object' || typeof x === 'function');
	  }
	  function isCallable(x) {
	    return typeof x === 'function';
	  }
	  function isNumber(x) {
	    return typeof x === 'number';
	  }
	  function toInteger(x) {
	    x = +x;
	    if ($isNaN(x))
	      return 0;
	    if (x === 0 || !$isFinite(x))
	      return x;
	    return x > 0 ? $floor(x) : $ceil(x);
	  }
	  var MAX_SAFE_LENGTH = $pow(2, 53) - 1;
	  function toLength(x) {
	    var len = toInteger(x);
	    return len < 0 ? 0 : $min(len, MAX_SAFE_LENGTH);
	  }
	  function checkIterable(x) {
	    return !isObject(x) ? undefined : x[Symbol.iterator];
	  }
	  function isConstructor(x) {
	    return isCallable(x);
	  }
	  function createIteratorResultObject(value, done) {
	    return {
	      value: value,
	      done: done
	    };
	  }
	  function maybeDefine(object, name, descr) {
	    if (!(name in object)) {
	      Object.defineProperty(object, name, descr);
	    }
	  }
	  function maybeDefineMethod(object, name, value) {
	    maybeDefine(object, name, {
	      value: value,
	      configurable: true,
	      enumerable: false,
	      writable: true
	    });
	  }
	  function maybeDefineConst(object, name, value) {
	    maybeDefine(object, name, {
	      value: value,
	      configurable: false,
	      enumerable: false,
	      writable: false
	    });
	  }
	  function maybeAddFunctions(object, functions) {
	    for (var i = 0; i < functions.length; i += 2) {
	      var name = functions[i];
	      var value = functions[i + 1];
	      maybeDefineMethod(object, name, value);
	    }
	  }
	  function maybeAddConsts(object, consts) {
	    for (var i = 0; i < consts.length; i += 2) {
	      var name = consts[i];
	      var value = consts[i + 1];
	      maybeDefineConst(object, name, value);
	    }
	  }
	  function maybeAddIterator(object, func, Symbol) {
	    if (!Symbol || !Symbol.iterator || object[Symbol.iterator])
	      return ;
	    if (object['@@iterator'])
	      func = object['@@iterator'];
	    Object.defineProperty(object, Symbol.iterator, {
	      value: func,
	      configurable: true,
	      enumerable: false,
	      writable: true
	    });
	  }
	  var polyfills = [];
	  function registerPolyfill(func) {
	    polyfills.push(func);
	  }
	  function polyfillAll(global) {
	    polyfills.forEach((function(f) {
	      return f(global);
	    }));
	  }
	  return {
	    get toObject() {
	      return toObject;
	    },
	    get toUint32() {
	      return toUint32;
	    },
	    get isObject() {
	      return isObject;
	    },
	    get isCallable() {
	      return isCallable;
	    },
	    get isNumber() {
	      return isNumber;
	    },
	    get toInteger() {
	      return toInteger;
	    },
	    get toLength() {
	      return toLength;
	    },
	    get checkIterable() {
	      return checkIterable;
	    },
	    get isConstructor() {
	      return isConstructor;
	    },
	    get createIteratorResultObject() {
	      return createIteratorResultObject;
	    },
	    get maybeDefine() {
	      return maybeDefine;
	    },
	    get maybeDefineMethod() {
	      return maybeDefineMethod;
	    },
	    get maybeDefineConst() {
	      return maybeDefineConst;
	    },
	    get maybeAddFunctions() {
	      return maybeAddFunctions;
	    },
	    get maybeAddConsts() {
	      return maybeAddConsts;
	    },
	    get maybeAddIterator() {
	      return maybeAddIterator;
	    },
	    get registerPolyfill() {
	      return registerPolyfill;
	    },
	    get polyfillAll() {
	      return polyfillAll;
	    }
	  };
	});
	System.registerModule("traceur@0.0.87/src/runtime/polyfills/Map.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/runtime/polyfills/Map.js";
	  var $__0 = System.get("traceur@0.0.87/src/runtime/polyfills/utils.js"),
	      isObject = $__0.isObject,
	      maybeAddIterator = $__0.maybeAddIterator,
	      registerPolyfill = $__0.registerPolyfill;
	  var getOwnHashObject = $traceurRuntime.getOwnHashObject;
	  var $hasOwnProperty = Object.prototype.hasOwnProperty;
	  var deletedSentinel = {};
	  function lookupIndex(map, key) {
	    if (isObject(key)) {
	      var hashObject = getOwnHashObject(key);
	      return hashObject && map.objectIndex_[hashObject.hash];
	    }
	    if (typeof key === 'string')
	      return map.stringIndex_[key];
	    return map.primitiveIndex_[key];
	  }
	  function initMap(map) {
	    map.entries_ = [];
	    map.objectIndex_ = Object.create(null);
	    map.stringIndex_ = Object.create(null);
	    map.primitiveIndex_ = Object.create(null);
	    map.deletedCount_ = 0;
	  }
	  var Map = function Map() {
	    var $__10,
	        $__11;
	    var iterable = arguments[0];
	    if (!isObject(this))
	      throw new TypeError('Map called on incompatible type');
	    if ($hasOwnProperty.call(this, 'entries_')) {
	      throw new TypeError('Map can not be reentrantly initialised');
	    }
	    initMap(this);
	    if (iterable !== null && iterable !== undefined) {
	      var $__5 = true;
	      var $__6 = false;
	      var $__7 = undefined;
	      try {
	        for (var $__3 = void 0,
	            $__2 = (iterable)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__5 = ($__3 = $__2.next()).done); $__5 = true) {
	          var $__9 = $__3.value,
	              key = ($__10 = $__9[$traceurRuntime.toProperty(Symbol.iterator)](), ($__11 = $__10.next()).done ? void 0 : $__11.value),
	              value = ($__11 = $__10.next()).done ? void 0 : $__11.value;
	          {
	            this.set(key, value);
	          }
	        }
	      } catch ($__8) {
	        $__6 = true;
	        $__7 = $__8;
	      } finally {
	        try {
	          if (!$__5 && $__2.return != null) {
	            $__2.return();
	          }
	        } finally {
	          if ($__6) {
	            throw $__7;
	          }
	        }
	      }
	    }
	  };
	  ($traceurRuntime.createClass)(Map, {
	    get size() {
	      return this.entries_.length / 2 - this.deletedCount_;
	    },
	    get: function(key) {
	      var index = lookupIndex(this, key);
	      if (index !== undefined)
	        return this.entries_[index + 1];
	    },
	    set: function(key, value) {
	      var objectMode = isObject(key);
	      var stringMode = typeof key === 'string';
	      var index = lookupIndex(this, key);
	      if (index !== undefined) {
	        this.entries_[index + 1] = value;
	      } else {
	        index = this.entries_.length;
	        this.entries_[index] = key;
	        this.entries_[index + 1] = value;
	        if (objectMode) {
	          var hashObject = getOwnHashObject(key);
	          var hash = hashObject.hash;
	          this.objectIndex_[hash] = index;
	        } else if (stringMode) {
	          this.stringIndex_[key] = index;
	        } else {
	          this.primitiveIndex_[key] = index;
	        }
	      }
	      return this;
	    },
	    has: function(key) {
	      return lookupIndex(this, key) !== undefined;
	    },
	    delete: function(key) {
	      var objectMode = isObject(key);
	      var stringMode = typeof key === 'string';
	      var index;
	      var hash;
	      if (objectMode) {
	        var hashObject = getOwnHashObject(key);
	        if (hashObject) {
	          index = this.objectIndex_[hash = hashObject.hash];
	          delete this.objectIndex_[hash];
	        }
	      } else if (stringMode) {
	        index = this.stringIndex_[key];
	        delete this.stringIndex_[key];
	      } else {
	        index = this.primitiveIndex_[key];
	        delete this.primitiveIndex_[key];
	      }
	      if (index !== undefined) {
	        this.entries_[index] = deletedSentinel;
	        this.entries_[index + 1] = undefined;
	        this.deletedCount_++;
	        return true;
	      }
	      return false;
	    },
	    clear: function() {
	      initMap(this);
	    },
	    forEach: function(callbackFn) {
	      var thisArg = arguments[1];
	      for (var i = 0; i < this.entries_.length; i += 2) {
	        var key = this.entries_[i];
	        var value = this.entries_[i + 1];
	        if (key === deletedSentinel)
	          continue;
	        callbackFn.call(thisArg, value, key, this);
	      }
	    },
	    entries: $traceurRuntime.initGeneratorFunction(function $__12() {
	      var i,
	          key,
	          value;
	      return $traceurRuntime.createGeneratorInstance(function($ctx) {
	        while (true)
	          switch ($ctx.state) {
	            case 0:
	              i = 0;
	              $ctx.state = 12;
	              break;
	            case 12:
	              $ctx.state = (i < this.entries_.length) ? 8 : -2;
	              break;
	            case 4:
	              i += 2;
	              $ctx.state = 12;
	              break;
	            case 8:
	              key = this.entries_[i];
	              value = this.entries_[i + 1];
	              $ctx.state = 9;
	              break;
	            case 9:
	              $ctx.state = (key === deletedSentinel) ? 4 : 6;
	              break;
	            case 6:
	              $ctx.state = 2;
	              return [key, value];
	            case 2:
	              $ctx.maybeThrow();
	              $ctx.state = 4;
	              break;
	            default:
	              return $ctx.end();
	          }
	      }, $__12, this);
	    }),
	    keys: $traceurRuntime.initGeneratorFunction(function $__13() {
	      var i,
	          key,
	          value;
	      return $traceurRuntime.createGeneratorInstance(function($ctx) {
	        while (true)
	          switch ($ctx.state) {
	            case 0:
	              i = 0;
	              $ctx.state = 12;
	              break;
	            case 12:
	              $ctx.state = (i < this.entries_.length) ? 8 : -2;
	              break;
	            case 4:
	              i += 2;
	              $ctx.state = 12;
	              break;
	            case 8:
	              key = this.entries_[i];
	              value = this.entries_[i + 1];
	              $ctx.state = 9;
	              break;
	            case 9:
	              $ctx.state = (key === deletedSentinel) ? 4 : 6;
	              break;
	            case 6:
	              $ctx.state = 2;
	              return key;
	            case 2:
	              $ctx.maybeThrow();
	              $ctx.state = 4;
	              break;
	            default:
	              return $ctx.end();
	          }
	      }, $__13, this);
	    }),
	    values: $traceurRuntime.initGeneratorFunction(function $__14() {
	      var i,
	          key,
	          value;
	      return $traceurRuntime.createGeneratorInstance(function($ctx) {
	        while (true)
	          switch ($ctx.state) {
	            case 0:
	              i = 0;
	              $ctx.state = 12;
	              break;
	            case 12:
	              $ctx.state = (i < this.entries_.length) ? 8 : -2;
	              break;
	            case 4:
	              i += 2;
	              $ctx.state = 12;
	              break;
	            case 8:
	              key = this.entries_[i];
	              value = this.entries_[i + 1];
	              $ctx.state = 9;
	              break;
	            case 9:
	              $ctx.state = (key === deletedSentinel) ? 4 : 6;
	              break;
	            case 6:
	              $ctx.state = 2;
	              return value;
	            case 2:
	              $ctx.maybeThrow();
	              $ctx.state = 4;
	              break;
	            default:
	              return $ctx.end();
	          }
	      }, $__14, this);
	    })
	  }, {});
	  Object.defineProperty(Map.prototype, Symbol.iterator, {
	    configurable: true,
	    writable: true,
	    value: Map.prototype.entries
	  });
	  function polyfillMap(global) {
	    var $__9 = global,
	        Object = $__9.Object,
	        Symbol = $__9.Symbol;
	    if (!global.Map)
	      global.Map = Map;
	    var mapPrototype = global.Map.prototype;
	    if (mapPrototype.entries === undefined)
	      global.Map = Map;
	    if (mapPrototype.entries) {
	      maybeAddIterator(mapPrototype, mapPrototype.entries, Symbol);
	      maybeAddIterator(Object.getPrototypeOf(new global.Map().entries()), function() {
	        return this;
	      }, Symbol);
	    }
	  }
	  registerPolyfill(polyfillMap);
	  return {
	    get Map() {
	      return Map;
	    },
	    get polyfillMap() {
	      return polyfillMap;
	    }
	  };
	});
	System.get("traceur@0.0.87/src/runtime/polyfills/Map.js" + '');
	System.registerModule("traceur@0.0.87/src/runtime/polyfills/Set.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/runtime/polyfills/Set.js";
	  var $__0 = System.get("traceur@0.0.87/src/runtime/polyfills/utils.js"),
	      isObject = $__0.isObject,
	      maybeAddIterator = $__0.maybeAddIterator,
	      registerPolyfill = $__0.registerPolyfill;
	  var Map = System.get("traceur@0.0.87/src/runtime/polyfills/Map.js").Map;
	  var getOwnHashObject = $traceurRuntime.getOwnHashObject;
	  var $hasOwnProperty = Object.prototype.hasOwnProperty;
	  function initSet(set) {
	    set.map_ = new Map();
	  }
	  var Set = function Set() {
	    var iterable = arguments[0];
	    if (!isObject(this))
	      throw new TypeError('Set called on incompatible type');
	    if ($hasOwnProperty.call(this, 'map_')) {
	      throw new TypeError('Set can not be reentrantly initialised');
	    }
	    initSet(this);
	    if (iterable !== null && iterable !== undefined) {
	      var $__7 = true;
	      var $__8 = false;
	      var $__9 = undefined;
	      try {
	        for (var $__5 = void 0,
	            $__4 = (iterable)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__7 = ($__5 = $__4.next()).done); $__7 = true) {
	          var item = $__5.value;
	          {
	            this.add(item);
	          }
	        }
	      } catch ($__10) {
	        $__8 = true;
	        $__9 = $__10;
	      } finally {
	        try {
	          if (!$__7 && $__4.return != null) {
	            $__4.return();
	          }
	        } finally {
	          if ($__8) {
	            throw $__9;
	          }
	        }
	      }
	    }
	  };
	  ($traceurRuntime.createClass)(Set, {
	    get size() {
	      return this.map_.size;
	    },
	    has: function(key) {
	      return this.map_.has(key);
	    },
	    add: function(key) {
	      this.map_.set(key, key);
	      return this;
	    },
	    delete: function(key) {
	      return this.map_.delete(key);
	    },
	    clear: function() {
	      return this.map_.clear();
	    },
	    forEach: function(callbackFn) {
	      var thisArg = arguments[1];
	      var $__2 = this;
	      return this.map_.forEach((function(value, key) {
	        callbackFn.call(thisArg, key, key, $__2);
	      }));
	    },
	    values: $traceurRuntime.initGeneratorFunction(function $__12() {
	      var $__13,
	          $__14;
	      return $traceurRuntime.createGeneratorInstance(function($ctx) {
	        while (true)
	          switch ($ctx.state) {
	            case 0:
	              $__13 = $ctx.wrapYieldStar(this.map_.keys()[Symbol.iterator]());
	              $ctx.sent = void 0;
	              $ctx.action = 'next';
	              $ctx.state = 12;
	              break;
	            case 12:
	              $__14 = $__13[$ctx.action]($ctx.sentIgnoreThrow);
	              $ctx.state = 9;
	              break;
	            case 9:
	              $ctx.state = ($__14.done) ? 3 : 2;
	              break;
	            case 3:
	              $ctx.sent = $__14.value;
	              $ctx.state = -2;
	              break;
	            case 2:
	              $ctx.state = 12;
	              return $__14.value;
	            default:
	              return $ctx.end();
	          }
	      }, $__12, this);
	    }),
	    entries: $traceurRuntime.initGeneratorFunction(function $__15() {
	      var $__16,
	          $__17;
	      return $traceurRuntime.createGeneratorInstance(function($ctx) {
	        while (true)
	          switch ($ctx.state) {
	            case 0:
	              $__16 = $ctx.wrapYieldStar(this.map_.entries()[Symbol.iterator]());
	              $ctx.sent = void 0;
	              $ctx.action = 'next';
	              $ctx.state = 12;
	              break;
	            case 12:
	              $__17 = $__16[$ctx.action]($ctx.sentIgnoreThrow);
	              $ctx.state = 9;
	              break;
	            case 9:
	              $ctx.state = ($__17.done) ? 3 : 2;
	              break;
	            case 3:
	              $ctx.sent = $__17.value;
	              $ctx.state = -2;
	              break;
	            case 2:
	              $ctx.state = 12;
	              return $__17.value;
	            default:
	              return $ctx.end();
	          }
	      }, $__15, this);
	    })
	  }, {});
	  Object.defineProperty(Set.prototype, Symbol.iterator, {
	    configurable: true,
	    writable: true,
	    value: Set.prototype.values
	  });
	  Object.defineProperty(Set.prototype, 'keys', {
	    configurable: true,
	    writable: true,
	    value: Set.prototype.values
	  });
	  function polyfillSet(global) {
	    var $__11 = global,
	        Object = $__11.Object,
	        Symbol = $__11.Symbol;
	    if (!global.Set)
	      global.Set = Set;
	    var setPrototype = global.Set.prototype;
	    if (setPrototype.values) {
	      maybeAddIterator(setPrototype, setPrototype.values, Symbol);
	      maybeAddIterator(Object.getPrototypeOf(new global.Set().values()), function() {
	        return this;
	      }, Symbol);
	    }
	  }
	  registerPolyfill(polyfillSet);
	  return {
	    get Set() {
	      return Set;
	    },
	    get polyfillSet() {
	      return polyfillSet;
	    }
	  };
	});
	System.get("traceur@0.0.87/src/runtime/polyfills/Set.js" + '');
	System.registerModule("traceur@0.0.87/node_modules/rsvp/lib/rsvp/asap.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/node_modules/rsvp/lib/rsvp/asap.js";
	  var len = 0;
	  function asap(callback, arg) {
	    queue[len] = callback;
	    queue[len + 1] = arg;
	    len += 2;
	    if (len === 2) {
	      scheduleFlush();
	    }
	  }
	  var $__default = asap;
	  var browserGlobal = (typeof window !== 'undefined') ? window : {};
	  var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
	  var isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';
	  function useNextTick() {
	    return function() {
	      process.nextTick(flush);
	    };
	  }
	  function useMutationObserver() {
	    var iterations = 0;
	    var observer = new BrowserMutationObserver(flush);
	    var node = document.createTextNode('');
	    observer.observe(node, {characterData: true});
	    return function() {
	      node.data = (iterations = ++iterations % 2);
	    };
	  }
	  function useMessageChannel() {
	    var channel = new MessageChannel();
	    channel.port1.onmessage = flush;
	    return function() {
	      channel.port2.postMessage(0);
	    };
	  }
	  function useSetTimeout() {
	    return function() {
	      setTimeout(flush, 1);
	    };
	  }
	  var queue = new Array(1000);
	  function flush() {
	    for (var i = 0; i < len; i += 2) {
	      var callback = queue[i];
	      var arg = queue[i + 1];
	      callback(arg);
	      queue[i] = undefined;
	      queue[i + 1] = undefined;
	    }
	    len = 0;
	  }
	  var scheduleFlush;
	  if (typeof process !== 'undefined' && {}.toString.call(process) === '[object process]') {
	    scheduleFlush = useNextTick();
	  } else if (BrowserMutationObserver) {
	    scheduleFlush = useMutationObserver();
	  } else if (isWorker) {
	    scheduleFlush = useMessageChannel();
	  } else {
	    scheduleFlush = useSetTimeout();
	  }
	  return {get default() {
	      return $__default;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/runtime/polyfills/Promise.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/runtime/polyfills/Promise.js";
	  var async = System.get("traceur@0.0.87/node_modules/rsvp/lib/rsvp/asap.js").default;
	  var registerPolyfill = System.get("traceur@0.0.87/src/runtime/polyfills/utils.js").registerPolyfill;
	  var promiseRaw = {};
	  function isPromise(x) {
	    return x && typeof x === 'object' && x.status_ !== undefined;
	  }
	  function idResolveHandler(x) {
	    return x;
	  }
	  function idRejectHandler(x) {
	    throw x;
	  }
	  function chain(promise) {
	    var onResolve = arguments[1] !== (void 0) ? arguments[1] : idResolveHandler;
	    var onReject = arguments[2] !== (void 0) ? arguments[2] : idRejectHandler;
	    var deferred = getDeferred(promise.constructor);
	    switch (promise.status_) {
	      case undefined:
	        throw TypeError;
	      case 0:
	        promise.onResolve_.push(onResolve, deferred);
	        promise.onReject_.push(onReject, deferred);
	        break;
	      case +1:
	        promiseEnqueue(promise.value_, [onResolve, deferred]);
	        break;
	      case -1:
	        promiseEnqueue(promise.value_, [onReject, deferred]);
	        break;
	    }
	    return deferred.promise;
	  }
	  function getDeferred(C) {
	    if (this === $Promise) {
	      var promise = promiseInit(new $Promise(promiseRaw));
	      return {
	        promise: promise,
	        resolve: (function(x) {
	          promiseResolve(promise, x);
	        }),
	        reject: (function(r) {
	          promiseReject(promise, r);
	        })
	      };
	    } else {
	      var result = {};
	      result.promise = new C((function(resolve, reject) {
	        result.resolve = resolve;
	        result.reject = reject;
	      }));
	      return result;
	    }
	  }
	  function promiseSet(promise, status, value, onResolve, onReject) {
	    promise.status_ = status;
	    promise.value_ = value;
	    promise.onResolve_ = onResolve;
	    promise.onReject_ = onReject;
	    return promise;
	  }
	  function promiseInit(promise) {
	    return promiseSet(promise, 0, undefined, [], []);
	  }
	  var Promise = function Promise(resolver) {
	    if (resolver === promiseRaw)
	      return ;
	    if (typeof resolver !== 'function')
	      throw new TypeError;
	    var promise = promiseInit(this);
	    try {
	      resolver((function(x) {
	        promiseResolve(promise, x);
	      }), (function(r) {
	        promiseReject(promise, r);
	      }));
	    } catch (e) {
	      promiseReject(promise, e);
	    }
	  };
	  ($traceurRuntime.createClass)(Promise, {
	    catch: function(onReject) {
	      return this.then(undefined, onReject);
	    },
	    then: function(onResolve, onReject) {
	      if (typeof onResolve !== 'function')
	        onResolve = idResolveHandler;
	      if (typeof onReject !== 'function')
	        onReject = idRejectHandler;
	      var that = this;
	      var constructor = this.constructor;
	      return chain(this, function(x) {
	        x = promiseCoerce(constructor, x);
	        return x === that ? onReject(new TypeError) : isPromise(x) ? x.then(onResolve, onReject) : onResolve(x);
	      }, onReject);
	    }
	  }, {
	    resolve: function(x) {
	      if (this === $Promise) {
	        if (isPromise(x)) {
	          return x;
	        }
	        return promiseSet(new $Promise(promiseRaw), +1, x);
	      } else {
	        return new this(function(resolve, reject) {
	          resolve(x);
	        });
	      }
	    },
	    reject: function(r) {
	      if (this === $Promise) {
	        return promiseSet(new $Promise(promiseRaw), -1, r);
	      } else {
	        return new this((function(resolve, reject) {
	          reject(r);
	        }));
	      }
	    },
	    all: function(values) {
	      var deferred = getDeferred(this);
	      var resolutions = [];
	      try {
	        var makeCountdownFunction = function(i) {
	          return (function(x) {
	            resolutions[i] = x;
	            if (--count === 0)
	              deferred.resolve(resolutions);
	          });
	        };
	        var count = 0;
	        var i = 0;
	        var $__6 = true;
	        var $__7 = false;
	        var $__8 = undefined;
	        try {
	          for (var $__4 = void 0,
	              $__3 = (values)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__6 = ($__4 = $__3.next()).done); $__6 = true) {
	            var value = $__4.value;
	            {
	              var countdownFunction = makeCountdownFunction(i);
	              this.resolve(value).then(countdownFunction, (function(r) {
	                deferred.reject(r);
	              }));
	              ++i;
	              ++count;
	            }
	          }
	        } catch ($__9) {
	          $__7 = true;
	          $__8 = $__9;
	        } finally {
	          try {
	            if (!$__6 && $__3.return != null) {
	              $__3.return();
	            }
	          } finally {
	            if ($__7) {
	              throw $__8;
	            }
	          }
	        }
	        if (count === 0) {
	          deferred.resolve(resolutions);
	        }
	      } catch (e) {
	        deferred.reject(e);
	      }
	      return deferred.promise;
	    },
	    race: function(values) {
	      var deferred = getDeferred(this);
	      try {
	        for (var i = 0; i < values.length; i++) {
	          this.resolve(values[i]).then((function(x) {
	            deferred.resolve(x);
	          }), (function(r) {
	            deferred.reject(r);
	          }));
	        }
	      } catch (e) {
	        deferred.reject(e);
	      }
	      return deferred.promise;
	    }
	  });
	  var $Promise = Promise;
	  var $PromiseReject = $Promise.reject;
	  function promiseResolve(promise, x) {
	    promiseDone(promise, +1, x, promise.onResolve_);
	  }
	  function promiseReject(promise, r) {
	    promiseDone(promise, -1, r, promise.onReject_);
	  }
	  function promiseDone(promise, status, value, reactions) {
	    if (promise.status_ !== 0)
	      return ;
	    promiseEnqueue(value, reactions);
	    promiseSet(promise, status, value);
	  }
	  function promiseEnqueue(value, tasks) {
	    async((function() {
	      for (var i = 0; i < tasks.length; i += 2) {
	        promiseHandle(value, tasks[i], tasks[i + 1]);
	      }
	    }));
	  }
	  function promiseHandle(value, handler, deferred) {
	    try {
	      var result = handler(value);
	      if (result === deferred.promise)
	        throw new TypeError;
	      else if (isPromise(result))
	        chain(result, deferred.resolve, deferred.reject);
	      else
	        deferred.resolve(result);
	    } catch (e) {
	      try {
	        deferred.reject(e);
	      } catch (e) {}
	    }
	  }
	  var thenableSymbol = '@@thenable';
	  function isObject(x) {
	    return x && (typeof x === 'object' || typeof x === 'function');
	  }
	  function promiseCoerce(constructor, x) {
	    if (!isPromise(x) && isObject(x)) {
	      var then;
	      try {
	        then = x.then;
	      } catch (r) {
	        var promise = $PromiseReject.call(constructor, r);
	        x[thenableSymbol] = promise;
	        return promise;
	      }
	      if (typeof then === 'function') {
	        var p = x[thenableSymbol];
	        if (p) {
	          return p;
	        } else {
	          var deferred = getDeferred(constructor);
	          x[thenableSymbol] = deferred.promise;
	          try {
	            then.call(x, deferred.resolve, deferred.reject);
	          } catch (r) {
	            deferred.reject(r);
	          }
	          return deferred.promise;
	        }
	      }
	    }
	    return x;
	  }
	  function polyfillPromise(global) {
	    if (!global.Promise)
	      global.Promise = Promise;
	  }
	  registerPolyfill(polyfillPromise);
	  return {
	    get Promise() {
	      return Promise;
	    },
	    get polyfillPromise() {
	      return polyfillPromise;
	    }
	  };
	});
	System.get("traceur@0.0.87/src/runtime/polyfills/Promise.js" + '');
	System.registerModule("traceur@0.0.87/src/runtime/polyfills/StringIterator.js", [], function() {
	  "use strict";
	  var $__2;
	  var __moduleName = "traceur@0.0.87/src/runtime/polyfills/StringIterator.js";
	  var $__0 = System.get("traceur@0.0.87/src/runtime/polyfills/utils.js"),
	      createIteratorResultObject = $__0.createIteratorResultObject,
	      isObject = $__0.isObject;
	  var toProperty = $traceurRuntime.toProperty;
	  var hasOwnProperty = Object.prototype.hasOwnProperty;
	  var iteratedString = Symbol('iteratedString');
	  var stringIteratorNextIndex = Symbol('stringIteratorNextIndex');
	  var StringIterator = function StringIterator() {
	    ;
	  };
	  ($traceurRuntime.createClass)(StringIterator, ($__2 = {}, Object.defineProperty($__2, "next", {
	    value: function() {
	      var o = this;
	      if (!isObject(o) || !hasOwnProperty.call(o, iteratedString)) {
	        throw new TypeError('this must be a StringIterator object');
	      }
	      var s = o[toProperty(iteratedString)];
	      if (s === undefined) {
	        return createIteratorResultObject(undefined, true);
	      }
	      var position = o[toProperty(stringIteratorNextIndex)];
	      var len = s.length;
	      if (position >= len) {
	        o[toProperty(iteratedString)] = undefined;
	        return createIteratorResultObject(undefined, true);
	      }
	      var first = s.charCodeAt(position);
	      var resultString;
	      if (first < 0xD800 || first > 0xDBFF || position + 1 === len) {
	        resultString = String.fromCharCode(first);
	      } else {
	        var second = s.charCodeAt(position + 1);
	        if (second < 0xDC00 || second > 0xDFFF) {
	          resultString = String.fromCharCode(first);
	        } else {
	          resultString = String.fromCharCode(first) + String.fromCharCode(second);
	        }
	      }
	      o[toProperty(stringIteratorNextIndex)] = position + resultString.length;
	      return createIteratorResultObject(resultString, false);
	    },
	    configurable: true,
	    enumerable: true,
	    writable: true
	  }), Object.defineProperty($__2, Symbol.iterator, {
	    value: function() {
	      return this;
	    },
	    configurable: true,
	    enumerable: true,
	    writable: true
	  }), $__2), {});
	  function createStringIterator(string) {
	    var s = String(string);
	    var iterator = Object.create(StringIterator.prototype);
	    iterator[toProperty(iteratedString)] = s;
	    iterator[toProperty(stringIteratorNextIndex)] = 0;
	    return iterator;
	  }
	  return {get createStringIterator() {
	      return createStringIterator;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/runtime/polyfills/String.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/runtime/polyfills/String.js";
	  var createStringIterator = System.get("traceur@0.0.87/src/runtime/polyfills/StringIterator.js").createStringIterator;
	  var $__1 = System.get("traceur@0.0.87/src/runtime/polyfills/utils.js"),
	      maybeAddFunctions = $__1.maybeAddFunctions,
	      maybeAddIterator = $__1.maybeAddIterator,
	      registerPolyfill = $__1.registerPolyfill;
	  var $toString = Object.prototype.toString;
	  var $indexOf = String.prototype.indexOf;
	  var $lastIndexOf = String.prototype.lastIndexOf;
	  function startsWith(search) {
	    var string = String(this);
	    if (this == null || $toString.call(search) == '[object RegExp]') {
	      throw TypeError();
	    }
	    var stringLength = string.length;
	    var searchString = String(search);
	    var searchLength = searchString.length;
	    var position = arguments.length > 1 ? arguments[1] : undefined;
	    var pos = position ? Number(position) : 0;
	    if (isNaN(pos)) {
	      pos = 0;
	    }
	    var start = Math.min(Math.max(pos, 0), stringLength);
	    return $indexOf.call(string, searchString, pos) == start;
	  }
	  function endsWith(search) {
	    var string = String(this);
	    if (this == null || $toString.call(search) == '[object RegExp]') {
	      throw TypeError();
	    }
	    var stringLength = string.length;
	    var searchString = String(search);
	    var searchLength = searchString.length;
	    var pos = stringLength;
	    if (arguments.length > 1) {
	      var position = arguments[1];
	      if (position !== undefined) {
	        pos = position ? Number(position) : 0;
	        if (isNaN(pos)) {
	          pos = 0;
	        }
	      }
	    }
	    var end = Math.min(Math.max(pos, 0), stringLength);
	    var start = end - searchLength;
	    if (start < 0) {
	      return false;
	    }
	    return $lastIndexOf.call(string, searchString, start) == start;
	  }
	  function includes(search) {
	    if (this == null) {
	      throw TypeError();
	    }
	    var string = String(this);
	    if (search && $toString.call(search) == '[object RegExp]') {
	      throw TypeError();
	    }
	    var stringLength = string.length;
	    var searchString = String(search);
	    var searchLength = searchString.length;
	    var position = arguments.length > 1 ? arguments[1] : undefined;
	    var pos = position ? Number(position) : 0;
	    if (pos != pos) {
	      pos = 0;
	    }
	    var start = Math.min(Math.max(pos, 0), stringLength);
	    if (searchLength + start > stringLength) {
	      return false;
	    }
	    return $indexOf.call(string, searchString, pos) != -1;
	  }
	  function repeat(count) {
	    if (this == null) {
	      throw TypeError();
	    }
	    var string = String(this);
	    var n = count ? Number(count) : 0;
	    if (isNaN(n)) {
	      n = 0;
	    }
	    if (n < 0 || n == Infinity) {
	      throw RangeError();
	    }
	    if (n == 0) {
	      return '';
	    }
	    var result = '';
	    while (n--) {
	      result += string;
	    }
	    return result;
	  }
	  function codePointAt(position) {
	    if (this == null) {
	      throw TypeError();
	    }
	    var string = String(this);
	    var size = string.length;
	    var index = position ? Number(position) : 0;
	    if (isNaN(index)) {
	      index = 0;
	    }
	    if (index < 0 || index >= size) {
	      return undefined;
	    }
	    var first = string.charCodeAt(index);
	    var second;
	    if (first >= 0xD800 && first <= 0xDBFF && size > index + 1) {
	      second = string.charCodeAt(index + 1);
	      if (second >= 0xDC00 && second <= 0xDFFF) {
	        return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
	      }
	    }
	    return first;
	  }
	  function raw(callsite) {
	    var raw = callsite.raw;
	    var len = raw.length >>> 0;
	    if (len === 0)
	      return '';
	    var s = '';
	    var i = 0;
	    while (true) {
	      s += raw[i];
	      if (i + 1 === len)
	        return s;
	      s += arguments[++i];
	    }
	  }
	  function fromCodePoint(_) {
	    var codeUnits = [];
	    var floor = Math.floor;
	    var highSurrogate;
	    var lowSurrogate;
	    var index = -1;
	    var length = arguments.length;
	    if (!length) {
	      return '';
	    }
	    while (++index < length) {
	      var codePoint = Number(arguments[index]);
	      if (!isFinite(codePoint) || codePoint < 0 || codePoint > 0x10FFFF || floor(codePoint) != codePoint) {
	        throw RangeError('Invalid code point: ' + codePoint);
	      }
	      if (codePoint <= 0xFFFF) {
	        codeUnits.push(codePoint);
	      } else {
	        codePoint -= 0x10000;
	        highSurrogate = (codePoint >> 10) + 0xD800;
	        lowSurrogate = (codePoint % 0x400) + 0xDC00;
	        codeUnits.push(highSurrogate, lowSurrogate);
	      }
	    }
	    return String.fromCharCode.apply(null, codeUnits);
	  }
	  function stringPrototypeIterator() {
	    var o = $traceurRuntime.checkObjectCoercible(this);
	    var s = String(o);
	    return createStringIterator(s);
	  }
	  function polyfillString(global) {
	    var String = global.String;
	    maybeAddFunctions(String.prototype, ['codePointAt', codePointAt, 'endsWith', endsWith, 'includes', includes, 'repeat', repeat, 'startsWith', startsWith]);
	    maybeAddFunctions(String, ['fromCodePoint', fromCodePoint, 'raw', raw]);
	    maybeAddIterator(String.prototype, stringPrototypeIterator, Symbol);
	  }
	  registerPolyfill(polyfillString);
	  return {
	    get startsWith() {
	      return startsWith;
	    },
	    get endsWith() {
	      return endsWith;
	    },
	    get includes() {
	      return includes;
	    },
	    get repeat() {
	      return repeat;
	    },
	    get codePointAt() {
	      return codePointAt;
	    },
	    get raw() {
	      return raw;
	    },
	    get fromCodePoint() {
	      return fromCodePoint;
	    },
	    get stringPrototypeIterator() {
	      return stringPrototypeIterator;
	    },
	    get polyfillString() {
	      return polyfillString;
	    }
	  };
	});
	System.get("traceur@0.0.87/src/runtime/polyfills/String.js" + '');
	System.registerModule("traceur@0.0.87/src/runtime/polyfills/ArrayIterator.js", [], function() {
	  "use strict";
	  var $__2;
	  var __moduleName = "traceur@0.0.87/src/runtime/polyfills/ArrayIterator.js";
	  var $__0 = System.get("traceur@0.0.87/src/runtime/polyfills/utils.js"),
	      toObject = $__0.toObject,
	      toUint32 = $__0.toUint32,
	      createIteratorResultObject = $__0.createIteratorResultObject;
	  var ARRAY_ITERATOR_KIND_KEYS = 1;
	  var ARRAY_ITERATOR_KIND_VALUES = 2;
	  var ARRAY_ITERATOR_KIND_ENTRIES = 3;
	  var ArrayIterator = function ArrayIterator() {
	    ;
	  };
	  ($traceurRuntime.createClass)(ArrayIterator, ($__2 = {}, Object.defineProperty($__2, "next", {
	    value: function() {
	      var iterator = toObject(this);
	      var array = iterator.iteratorObject_;
	      if (!array) {
	        throw new TypeError('Object is not an ArrayIterator');
	      }
	      var index = iterator.arrayIteratorNextIndex_;
	      var itemKind = iterator.arrayIterationKind_;
	      var length = toUint32(array.length);
	      if (index >= length) {
	        iterator.arrayIteratorNextIndex_ = Infinity;
	        return createIteratorResultObject(undefined, true);
	      }
	      iterator.arrayIteratorNextIndex_ = index + 1;
	      if (itemKind == ARRAY_ITERATOR_KIND_VALUES)
	        return createIteratorResultObject(array[index], false);
	      if (itemKind == ARRAY_ITERATOR_KIND_ENTRIES)
	        return createIteratorResultObject([index, array[index]], false);
	      return createIteratorResultObject(index, false);
	    },
	    configurable: true,
	    enumerable: true,
	    writable: true
	  }), Object.defineProperty($__2, Symbol.iterator, {
	    value: function() {
	      return this;
	    },
	    configurable: true,
	    enumerable: true,
	    writable: true
	  }), $__2), {});
	  function createArrayIterator(array, kind) {
	    var object = toObject(array);
	    var iterator = new ArrayIterator;
	    iterator.iteratorObject_ = object;
	    iterator.arrayIteratorNextIndex_ = 0;
	    iterator.arrayIterationKind_ = kind;
	    return iterator;
	  }
	  function entries() {
	    return createArrayIterator(this, ARRAY_ITERATOR_KIND_ENTRIES);
	  }
	  function keys() {
	    return createArrayIterator(this, ARRAY_ITERATOR_KIND_KEYS);
	  }
	  function values() {
	    return createArrayIterator(this, ARRAY_ITERATOR_KIND_VALUES);
	  }
	  return {
	    get entries() {
	      return entries;
	    },
	    get keys() {
	      return keys;
	    },
	    get values() {
	      return values;
	    }
	  };
	});
	System.registerModule("traceur@0.0.87/src/runtime/polyfills/Array.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/runtime/polyfills/Array.js";
	  var $__0 = System.get("traceur@0.0.87/src/runtime/polyfills/ArrayIterator.js"),
	      entries = $__0.entries,
	      keys = $__0.keys,
	      jsValues = $__0.values;
	  var $__1 = System.get("traceur@0.0.87/src/runtime/polyfills/utils.js"),
	      checkIterable = $__1.checkIterable,
	      isCallable = $__1.isCallable,
	      isConstructor = $__1.isConstructor,
	      maybeAddFunctions = $__1.maybeAddFunctions,
	      maybeAddIterator = $__1.maybeAddIterator,
	      registerPolyfill = $__1.registerPolyfill,
	      toInteger = $__1.toInteger,
	      toLength = $__1.toLength,
	      toObject = $__1.toObject;
	  function from(arrLike) {
	    var mapFn = arguments[1];
	    var thisArg = arguments[2];
	    var C = this;
	    var items = toObject(arrLike);
	    var mapping = mapFn !== undefined;
	    var k = 0;
	    var arr,
	        len;
	    if (mapping && !isCallable(mapFn)) {
	      throw TypeError();
	    }
	    if (checkIterable(items)) {
	      arr = isConstructor(C) ? new C() : [];
	      var $__5 = true;
	      var $__6 = false;
	      var $__7 = undefined;
	      try {
	        for (var $__3 = void 0,
	            $__2 = (items)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__5 = ($__3 = $__2.next()).done); $__5 = true) {
	          var item = $__3.value;
	          {
	            if (mapping) {
	              arr[k] = mapFn.call(thisArg, item, k);
	            } else {
	              arr[k] = item;
	            }
	            k++;
	          }
	        }
	      } catch ($__8) {
	        $__6 = true;
	        $__7 = $__8;
	      } finally {
	        try {
	          if (!$__5 && $__2.return != null) {
	            $__2.return();
	          }
	        } finally {
	          if ($__6) {
	            throw $__7;
	          }
	        }
	      }
	      arr.length = k;
	      return arr;
	    }
	    len = toLength(items.length);
	    arr = isConstructor(C) ? new C(len) : new Array(len);
	    for (; k < len; k++) {
	      if (mapping) {
	        arr[k] = typeof thisArg === 'undefined' ? mapFn(items[k], k) : mapFn.call(thisArg, items[k], k);
	      } else {
	        arr[k] = items[k];
	      }
	    }
	    arr.length = len;
	    return arr;
	  }
	  function of() {
	    for (var items = [],
	        $__9 = 0; $__9 < arguments.length; $__9++)
	      items[$__9] = arguments[$__9];
	    var C = this;
	    var len = items.length;
	    var arr = isConstructor(C) ? new C(len) : new Array(len);
	    for (var k = 0; k < len; k++) {
	      arr[k] = items[k];
	    }
	    arr.length = len;
	    return arr;
	  }
	  function fill(value) {
	    var start = arguments[1] !== (void 0) ? arguments[1] : 0;
	    var end = arguments[2];
	    var object = toObject(this);
	    var len = toLength(object.length);
	    var fillStart = toInteger(start);
	    var fillEnd = end !== undefined ? toInteger(end) : len;
	    fillStart = fillStart < 0 ? Math.max(len + fillStart, 0) : Math.min(fillStart, len);
	    fillEnd = fillEnd < 0 ? Math.max(len + fillEnd, 0) : Math.min(fillEnd, len);
	    while (fillStart < fillEnd) {
	      object[fillStart] = value;
	      fillStart++;
	    }
	    return object;
	  }
	  function find(predicate) {
	    var thisArg = arguments[1];
	    return findHelper(this, predicate, thisArg);
	  }
	  function findIndex(predicate) {
	    var thisArg = arguments[1];
	    return findHelper(this, predicate, thisArg, true);
	  }
	  function findHelper(self, predicate) {
	    var thisArg = arguments[2];
	    var returnIndex = arguments[3] !== (void 0) ? arguments[3] : false;
	    var object = toObject(self);
	    var len = toLength(object.length);
	    if (!isCallable(predicate)) {
	      throw TypeError();
	    }
	    for (var i = 0; i < len; i++) {
	      var value = object[i];
	      if (predicate.call(thisArg, value, i, object)) {
	        return returnIndex ? i : value;
	      }
	    }
	    return returnIndex ? -1 : undefined;
	  }
	  function polyfillArray(global) {
	    var $__10 = global,
	        Array = $__10.Array,
	        Object = $__10.Object,
	        Symbol = $__10.Symbol;
	    var values = jsValues;
	    if (Symbol && Symbol.iterator && Array.prototype[Symbol.iterator]) {
	      values = Array.prototype[Symbol.iterator];
	    }
	    maybeAddFunctions(Array.prototype, ['entries', entries, 'keys', keys, 'values', values, 'fill', fill, 'find', find, 'findIndex', findIndex]);
	    maybeAddFunctions(Array, ['from', from, 'of', of]);
	    maybeAddIterator(Array.prototype, values, Symbol);
	    maybeAddIterator(Object.getPrototypeOf([].values()), function() {
	      return this;
	    }, Symbol);
	  }
	  registerPolyfill(polyfillArray);
	  return {
	    get from() {
	      return from;
	    },
	    get of() {
	      return of;
	    },
	    get fill() {
	      return fill;
	    },
	    get find() {
	      return find;
	    },
	    get findIndex() {
	      return findIndex;
	    },
	    get polyfillArray() {
	      return polyfillArray;
	    }
	  };
	});
	System.get("traceur@0.0.87/src/runtime/polyfills/Array.js" + '');
	System.registerModule("traceur@0.0.87/src/runtime/polyfills/Object.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/runtime/polyfills/Object.js";
	  var $__0 = System.get("traceur@0.0.87/src/runtime/polyfills/utils.js"),
	      maybeAddFunctions = $__0.maybeAddFunctions,
	      registerPolyfill = $__0.registerPolyfill;
	  var $__1 = $traceurRuntime,
	      defineProperty = $__1.defineProperty,
	      getOwnPropertyDescriptor = $__1.getOwnPropertyDescriptor,
	      getOwnPropertyNames = $__1.getOwnPropertyNames,
	      isPrivateName = $__1.isPrivateName,
	      keys = $__1.keys;
	  function is(left, right) {
	    if (left === right)
	      return left !== 0 || 1 / left === 1 / right;
	    return left !== left && right !== right;
	  }
	  function assign(target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];
	      var props = source == null ? [] : keys(source);
	      var p = void 0,
	          length = props.length;
	      for (p = 0; p < length; p++) {
	        var name = props[p];
	        if (isPrivateName(name))
	          continue;
	        target[name] = source[name];
	      }
	    }
	    return target;
	  }
	  function mixin(target, source) {
	    var props = getOwnPropertyNames(source);
	    var p,
	        descriptor,
	        length = props.length;
	    for (p = 0; p < length; p++) {
	      var name = props[p];
	      if (isPrivateName(name))
	        continue;
	      descriptor = getOwnPropertyDescriptor(source, props[p]);
	      defineProperty(target, props[p], descriptor);
	    }
	    return target;
	  }
	  function polyfillObject(global) {
	    var Object = global.Object;
	    maybeAddFunctions(Object, ['assign', assign, 'is', is, 'mixin', mixin]);
	  }
	  registerPolyfill(polyfillObject);
	  return {
	    get is() {
	      return is;
	    },
	    get assign() {
	      return assign;
	    },
	    get mixin() {
	      return mixin;
	    },
	    get polyfillObject() {
	      return polyfillObject;
	    }
	  };
	});
	System.get("traceur@0.0.87/src/runtime/polyfills/Object.js" + '');
	System.registerModule("traceur@0.0.87/src/runtime/polyfills/Number.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/runtime/polyfills/Number.js";
	  var $__0 = System.get("traceur@0.0.87/src/runtime/polyfills/utils.js"),
	      isNumber = $__0.isNumber,
	      maybeAddConsts = $__0.maybeAddConsts,
	      maybeAddFunctions = $__0.maybeAddFunctions,
	      registerPolyfill = $__0.registerPolyfill,
	      toInteger = $__0.toInteger;
	  var $abs = Math.abs;
	  var $isFinite = isFinite;
	  var $isNaN = isNaN;
	  var MAX_SAFE_INTEGER = Math.pow(2, 53) - 1;
	  var MIN_SAFE_INTEGER = -Math.pow(2, 53) + 1;
	  var EPSILON = Math.pow(2, -52);
	  function NumberIsFinite(number) {
	    return isNumber(number) && $isFinite(number);
	  }
	  ;
	  function isInteger(number) {
	    return NumberIsFinite(number) && toInteger(number) === number;
	  }
	  function NumberIsNaN(number) {
	    return isNumber(number) && $isNaN(number);
	  }
	  ;
	  function isSafeInteger(number) {
	    if (NumberIsFinite(number)) {
	      var integral = toInteger(number);
	      if (integral === number)
	        return $abs(integral) <= MAX_SAFE_INTEGER;
	    }
	    return false;
	  }
	  function polyfillNumber(global) {
	    var Number = global.Number;
	    maybeAddConsts(Number, ['MAX_SAFE_INTEGER', MAX_SAFE_INTEGER, 'MIN_SAFE_INTEGER', MIN_SAFE_INTEGER, 'EPSILON', EPSILON]);
	    maybeAddFunctions(Number, ['isFinite', NumberIsFinite, 'isInteger', isInteger, 'isNaN', NumberIsNaN, 'isSafeInteger', isSafeInteger]);
	  }
	  registerPolyfill(polyfillNumber);
	  return {
	    get MAX_SAFE_INTEGER() {
	      return MAX_SAFE_INTEGER;
	    },
	    get MIN_SAFE_INTEGER() {
	      return MIN_SAFE_INTEGER;
	    },
	    get EPSILON() {
	      return EPSILON;
	    },
	    get isFinite() {
	      return NumberIsFinite;
	    },
	    get isInteger() {
	      return isInteger;
	    },
	    get isNaN() {
	      return NumberIsNaN;
	    },
	    get isSafeInteger() {
	      return isSafeInteger;
	    },
	    get polyfillNumber() {
	      return polyfillNumber;
	    }
	  };
	});
	System.get("traceur@0.0.87/src/runtime/polyfills/Number.js" + '');
	System.registerModule("traceur@0.0.87/src/runtime/polyfills/fround.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/runtime/polyfills/fround.js";
	  var $isFinite = isFinite;
	  var $isNaN = isNaN;
	  var $__0 = Math,
	      LN2 = $__0.LN2,
	      abs = $__0.abs,
	      floor = $__0.floor,
	      log = $__0.log,
	      min = $__0.min,
	      pow = $__0.pow;
	  function packIEEE754(v, ebits, fbits) {
	    var bias = (1 << (ebits - 1)) - 1,
	        s,
	        e,
	        f,
	        ln,
	        i,
	        bits,
	        str,
	        bytes;
	    function roundToEven(n) {
	      var w = floor(n),
	          f = n - w;
	      if (f < 0.5)
	        return w;
	      if (f > 0.5)
	        return w + 1;
	      return w % 2 ? w + 1 : w;
	    }
	    if (v !== v) {
	      e = (1 << ebits) - 1;
	      f = pow(2, fbits - 1);
	      s = 0;
	    } else if (v === Infinity || v === -Infinity) {
	      e = (1 << ebits) - 1;
	      f = 0;
	      s = (v < 0) ? 1 : 0;
	    } else if (v === 0) {
	      e = 0;
	      f = 0;
	      s = (1 / v === -Infinity) ? 1 : 0;
	    } else {
	      s = v < 0;
	      v = abs(v);
	      if (v >= pow(2, 1 - bias)) {
	        e = min(floor(log(v) / LN2), 1023);
	        f = roundToEven(v / pow(2, e) * pow(2, fbits));
	        if (f / pow(2, fbits) >= 2) {
	          e = e + 1;
	          f = 1;
	        }
	        if (e > bias) {
	          e = (1 << ebits) - 1;
	          f = 0;
	        } else {
	          e = e + bias;
	          f = f - pow(2, fbits);
	        }
	      } else {
	        e = 0;
	        f = roundToEven(v / pow(2, 1 - bias - fbits));
	      }
	    }
	    bits = [];
	    for (i = fbits; i; i -= 1) {
	      bits.push(f % 2 ? 1 : 0);
	      f = floor(f / 2);
	    }
	    for (i = ebits; i; i -= 1) {
	      bits.push(e % 2 ? 1 : 0);
	      e = floor(e / 2);
	    }
	    bits.push(s ? 1 : 0);
	    bits.reverse();
	    str = bits.join('');
	    bytes = [];
	    while (str.length) {
	      bytes.push(parseInt(str.substring(0, 8), 2));
	      str = str.substring(8);
	    }
	    return bytes;
	  }
	  function unpackIEEE754(bytes, ebits, fbits) {
	    var bits = [],
	        i,
	        j,
	        b,
	        str,
	        bias,
	        s,
	        e,
	        f;
	    for (i = bytes.length; i; i -= 1) {
	      b = bytes[i - 1];
	      for (j = 8; j; j -= 1) {
	        bits.push(b % 2 ? 1 : 0);
	        b = b >> 1;
	      }
	    }
	    bits.reverse();
	    str = bits.join('');
	    bias = (1 << (ebits - 1)) - 1;
	    s = parseInt(str.substring(0, 1), 2) ? -1 : 1;
	    e = parseInt(str.substring(1, 1 + ebits), 2);
	    f = parseInt(str.substring(1 + ebits), 2);
	    if (e === (1 << ebits) - 1) {
	      return f !== 0 ? NaN : s * Infinity;
	    } else if (e > 0) {
	      return s * pow(2, e - bias) * (1 + f / pow(2, fbits));
	    } else if (f !== 0) {
	      return s * pow(2, -(bias - 1)) * (f / pow(2, fbits));
	    } else {
	      return s < 0 ? -0 : 0;
	    }
	  }
	  function unpackF32(b) {
	    return unpackIEEE754(b, 8, 23);
	  }
	  function packF32(v) {
	    return packIEEE754(v, 8, 23);
	  }
	  function fround(x) {
	    if (x === 0 || !$isFinite(x) || $isNaN(x)) {
	      return x;
	    }
	    return unpackF32(packF32(Number(x)));
	  }
	  return {get fround() {
	      return fround;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/runtime/polyfills/Math.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/runtime/polyfills/Math.js";
	  var jsFround = System.get("traceur@0.0.87/src/runtime/polyfills/fround.js").fround;
	  var $__1 = System.get("traceur@0.0.87/src/runtime/polyfills/utils.js"),
	      maybeAddFunctions = $__1.maybeAddFunctions,
	      registerPolyfill = $__1.registerPolyfill,
	      toUint32 = $__1.toUint32;
	  var $isFinite = isFinite;
	  var $isNaN = isNaN;
	  var $__2 = Math,
	      abs = $__2.abs,
	      ceil = $__2.ceil,
	      exp = $__2.exp,
	      floor = $__2.floor,
	      log = $__2.log,
	      pow = $__2.pow,
	      sqrt = $__2.sqrt;
	  function clz32(x) {
	    x = toUint32(+x);
	    if (x == 0)
	      return 32;
	    var result = 0;
	    if ((x & 0xFFFF0000) === 0) {
	      x <<= 16;
	      result += 16;
	    }
	    ;
	    if ((x & 0xFF000000) === 0) {
	      x <<= 8;
	      result += 8;
	    }
	    ;
	    if ((x & 0xF0000000) === 0) {
	      x <<= 4;
	      result += 4;
	    }
	    ;
	    if ((x & 0xC0000000) === 0) {
	      x <<= 2;
	      result += 2;
	    }
	    ;
	    if ((x & 0x80000000) === 0) {
	      x <<= 1;
	      result += 1;
	    }
	    ;
	    return result;
	  }
	  function imul(x, y) {
	    x = toUint32(+x);
	    y = toUint32(+y);
	    var xh = (x >>> 16) & 0xffff;
	    var xl = x & 0xffff;
	    var yh = (y >>> 16) & 0xffff;
	    var yl = y & 0xffff;
	    return xl * yl + (((xh * yl + xl * yh) << 16) >>> 0) | 0;
	  }
	  function sign(x) {
	    x = +x;
	    if (x > 0)
	      return 1;
	    if (x < 0)
	      return -1;
	    return x;
	  }
	  function log10(x) {
	    return log(x) * 0.434294481903251828;
	  }
	  function log2(x) {
	    return log(x) * 1.442695040888963407;
	  }
	  function log1p(x) {
	    x = +x;
	    if (x < -1 || $isNaN(x)) {
	      return NaN;
	    }
	    if (x === 0 || x === Infinity) {
	      return x;
	    }
	    if (x === -1) {
	      return -Infinity;
	    }
	    var result = 0;
	    var n = 50;
	    if (x < 0 || x > 1) {
	      return log(1 + x);
	    }
	    for (var i = 1; i < n; i++) {
	      if ((i % 2) === 0) {
	        result -= pow(x, i) / i;
	      } else {
	        result += pow(x, i) / i;
	      }
	    }
	    return result;
	  }
	  function expm1(x) {
	    x = +x;
	    if (x === -Infinity) {
	      return -1;
	    }
	    if (!$isFinite(x) || x === 0) {
	      return x;
	    }
	    return exp(x) - 1;
	  }
	  function cosh(x) {
	    x = +x;
	    if (x === 0) {
	      return 1;
	    }
	    if ($isNaN(x)) {
	      return NaN;
	    }
	    if (!$isFinite(x)) {
	      return Infinity;
	    }
	    if (x < 0) {
	      x = -x;
	    }
	    if (x > 21) {
	      return exp(x) / 2;
	    }
	    return (exp(x) + exp(-x)) / 2;
	  }
	  function sinh(x) {
	    x = +x;
	    if (!$isFinite(x) || x === 0) {
	      return x;
	    }
	    return (exp(x) - exp(-x)) / 2;
	  }
	  function tanh(x) {
	    x = +x;
	    if (x === 0)
	      return x;
	    if (!$isFinite(x))
	      return sign(x);
	    var exp1 = exp(x);
	    var exp2 = exp(-x);
	    return (exp1 - exp2) / (exp1 + exp2);
	  }
	  function acosh(x) {
	    x = +x;
	    if (x < 1)
	      return NaN;
	    if (!$isFinite(x))
	      return x;
	    return log(x + sqrt(x + 1) * sqrt(x - 1));
	  }
	  function asinh(x) {
	    x = +x;
	    if (x === 0 || !$isFinite(x))
	      return x;
	    if (x > 0)
	      return log(x + sqrt(x * x + 1));
	    return -log(-x + sqrt(x * x + 1));
	  }
	  function atanh(x) {
	    x = +x;
	    if (x === -1) {
	      return -Infinity;
	    }
	    if (x === 1) {
	      return Infinity;
	    }
	    if (x === 0) {
	      return x;
	    }
	    if ($isNaN(x) || x < -1 || x > 1) {
	      return NaN;
	    }
	    return 0.5 * log((1 + x) / (1 - x));
	  }
	  function hypot(x, y) {
	    var length = arguments.length;
	    var args = new Array(length);
	    var max = 0;
	    for (var i = 0; i < length; i++) {
	      var n = arguments[i];
	      n = +n;
	      if (n === Infinity || n === -Infinity)
	        return Infinity;
	      n = abs(n);
	      if (n > max)
	        max = n;
	      args[i] = n;
	    }
	    if (max === 0)
	      max = 1;
	    var sum = 0;
	    var compensation = 0;
	    for (var i = 0; i < length; i++) {
	      var n = args[i] / max;
	      var summand = n * n - compensation;
	      var preliminary = sum + summand;
	      compensation = (preliminary - sum) - summand;
	      sum = preliminary;
	    }
	    return sqrt(sum) * max;
	  }
	  function trunc(x) {
	    x = +x;
	    if (x > 0)
	      return floor(x);
	    if (x < 0)
	      return ceil(x);
	    return x;
	  }
	  var fround,
	      f32;
	  if (typeof Float32Array === 'function') {
	    f32 = new Float32Array(1);
	    fround = function(x) {
	      f32[0] = Number(x);
	      return f32[0];
	    };
	  } else {
	    fround = jsFround;
	  }
	  ;
	  function cbrt(x) {
	    x = +x;
	    if (x === 0)
	      return x;
	    var negate = x < 0;
	    if (negate)
	      x = -x;
	    var result = pow(x, 1 / 3);
	    return negate ? -result : result;
	  }
	  function polyfillMath(global) {
	    var Math = global.Math;
	    maybeAddFunctions(Math, ['acosh', acosh, 'asinh', asinh, 'atanh', atanh, 'cbrt', cbrt, 'clz32', clz32, 'cosh', cosh, 'expm1', expm1, 'fround', fround, 'hypot', hypot, 'imul', imul, 'log10', log10, 'log1p', log1p, 'log2', log2, 'sign', sign, 'sinh', sinh, 'tanh', tanh, 'trunc', trunc]);
	  }
	  registerPolyfill(polyfillMath);
	  return {
	    get clz32() {
	      return clz32;
	    },
	    get imul() {
	      return imul;
	    },
	    get sign() {
	      return sign;
	    },
	    get log10() {
	      return log10;
	    },
	    get log2() {
	      return log2;
	    },
	    get log1p() {
	      return log1p;
	    },
	    get expm1() {
	      return expm1;
	    },
	    get cosh() {
	      return cosh;
	    },
	    get sinh() {
	      return sinh;
	    },
	    get tanh() {
	      return tanh;
	    },
	    get acosh() {
	      return acosh;
	    },
	    get asinh() {
	      return asinh;
	    },
	    get atanh() {
	      return atanh;
	    },
	    get hypot() {
	      return hypot;
	    },
	    get trunc() {
	      return trunc;
	    },
	    get fround() {
	      return fround;
	    },
	    get cbrt() {
	      return cbrt;
	    },
	    get polyfillMath() {
	      return polyfillMath;
	    }
	  };
	});
	System.get("traceur@0.0.87/src/runtime/polyfills/Math.js" + '');
	System.registerModule("traceur@0.0.87/src/runtime/polyfills/polyfills.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/runtime/polyfills/polyfills.js";
	  var polyfillAll = System.get("traceur@0.0.87/src/runtime/polyfills/utils.js").polyfillAll;
	  polyfillAll(Reflect.global);
	  var setupGlobals = $traceurRuntime.setupGlobals;
	  $traceurRuntime.setupGlobals = function(global) {
	    setupGlobals(global);
	    polyfillAll(global);
	  };
	  return {};
	});
	System.get("traceur@0.0.87/src/runtime/polyfills/polyfills.js" + '');
	System.registerModule("traceur@0.0.87/src/Options.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/Options.js";
	  function enumerableOnlyObject(obj) {
	    var result = Object.create(null);
	    Object.keys(obj).forEach(function(key) {
	      Object.defineProperty(result, key, {
	        enumerable: true,
	        value: obj[key]
	      });
	    });
	    return result;
	  }
	  var optionsV01 = enumerableOnlyObject({
	    annotations: false,
	    arrayComprehension: false,
	    arrowFunctions: true,
	    asyncFunctions: false,
	    asyncGenerators: false,
	    blockBinding: true,
	    classes: true,
	    commentCallback: false,
	    computedPropertyNames: true,
	    debug: false,
	    debugNames: false,
	    defaultParameters: true,
	    destructuring: true,
	    exponentiation: false,
	    forOf: true,
	    forOn: false,
	    freeVariableChecker: false,
	    generatorComprehension: false,
	    generators: true,
	    inputSourceMap: false,
	    lowResolutionSourceMap: false,
	    memberVariables: false,
	    moduleName: 'default',
	    modules: 'register',
	    numericLiterals: true,
	    outputLanguage: 'es5',
	    properTailCalls: false,
	    propertyMethods: true,
	    propertyNameShorthand: true,
	    referrer: '',
	    require: false,
	    restParameters: true,
	    script: false,
	    sourceMaps: false,
	    sourceRoot: false,
	    spread: true,
	    symbols: false,
	    templateLiterals: true,
	    typeAssertionModule: null,
	    typeAssertions: false,
	    types: false,
	    unicodeEscapeSequences: true,
	    unicodeExpressions: true,
	    validate: false
	  });
	  var versionLockedOptions = optionsV01;
	  var defaultValues = Object.create(null);
	  var featureOptions = Object.create(null);
	  var experimentalOptions = Object.create(null);
	  var moduleOptions = ['amd', 'commonjs', 'closure', 'instantiate', 'inline', 'register'];
	  var EXPERIMENTAL = 0;
	  var ON_BY_DEFAULT = 1;
	  function addFeatureOption(name, kind) {
	    featureOptions[name] = true;
	    if (kind === EXPERIMENTAL)
	      experimentalOptions[name] = true;
	    var defaultValue = kind === ON_BY_DEFAULT;
	    defaultValues[name] = defaultValue;
	  }
	  function addBoolOption(name) {
	    defaultValues[name] = false;
	  }
	  addFeatureOption('arrowFunctions', ON_BY_DEFAULT);
	  addFeatureOption('blockBinding', ON_BY_DEFAULT);
	  addFeatureOption('classes', ON_BY_DEFAULT);
	  addFeatureOption('computedPropertyNames', ON_BY_DEFAULT);
	  addFeatureOption('defaultParameters', ON_BY_DEFAULT);
	  addFeatureOption('destructuring', ON_BY_DEFAULT);
	  addFeatureOption('forOf', ON_BY_DEFAULT);
	  addFeatureOption('generators', ON_BY_DEFAULT);
	  addFeatureOption('modules', 'SPECIAL');
	  addFeatureOption('numericLiterals', ON_BY_DEFAULT);
	  addFeatureOption('propertyMethods', ON_BY_DEFAULT);
	  addFeatureOption('propertyNameShorthand', ON_BY_DEFAULT);
	  addFeatureOption('restParameters', ON_BY_DEFAULT);
	  addFeatureOption('sourceMaps', 'SPECIAL');
	  addFeatureOption('spread', ON_BY_DEFAULT);
	  addFeatureOption('templateLiterals', ON_BY_DEFAULT);
	  addFeatureOption('unicodeEscapeSequences', ON_BY_DEFAULT);
	  addFeatureOption('unicodeExpressions', ON_BY_DEFAULT);
	  addFeatureOption('properTailCalls', EXPERIMENTAL);
	  addFeatureOption('symbols', EXPERIMENTAL);
	  addFeatureOption('annotations', EXPERIMENTAL);
	  addFeatureOption('arrayComprehension', EXPERIMENTAL);
	  addFeatureOption('asyncFunctions', EXPERIMENTAL);
	  addFeatureOption('asyncGenerators', EXPERIMENTAL);
	  addFeatureOption('exponentiation', EXPERIMENTAL);
	  addFeatureOption('forOn', EXPERIMENTAL);
	  addFeatureOption('generatorComprehension', EXPERIMENTAL);
	  addFeatureOption('memberVariables', EXPERIMENTAL);
	  addFeatureOption('require', EXPERIMENTAL);
	  addFeatureOption('types', EXPERIMENTAL);
	  var transformOptionsPrototype = {};
	  Object.keys(featureOptions).forEach((function(name) {
	    Object.defineProperty(transformOptionsPrototype, name, {
	      get: function() {
	        var v = this.proxiedOptions_[name];
	        if (v === 'parse')
	          return false;
	        return v;
	      },
	      enumerable: true
	    });
	  }));
	  var parseOptionsPrototype = {};
	  Object.keys(featureOptions).forEach((function(name) {
	    Object.defineProperty(parseOptionsPrototype, name, {
	      get: function() {
	        return !!this.proxiedOptions_[name];
	      },
	      enumerable: true
	    });
	  }));
	  addBoolOption('commentCallback');
	  addBoolOption('debug');
	  addBoolOption('debugNames');
	  addBoolOption('freeVariableChecker');
	  addBoolOption('script');
	  addBoolOption('typeAssertions');
	  addBoolOption('validate');
	  var Options = function Options() {
	    var options = arguments[0] !== (void 0) ? arguments[0] : Object.create(null);
	    this.reset();
	    Object.defineProperties(this, {
	      modules_: {
	        value: versionLockedOptions.modules,
	        writable: true,
	        enumerable: false
	      },
	      sourceMaps_: {
	        value: versionLockedOptions.sourceMaps,
	        writable: true,
	        enumerable: false
	      },
	      sourceRoot_: {
	        value: versionLockedOptions.sourceRoot,
	        writable: true,
	        enumerable: false
	      },
	      transformOptions: {
	        value: Object.create(transformOptionsPrototype, {proxiedOptions_: {
	            value: this,
	            enumerable: false
	          }}),
	        enumerable: false
	      },
	      parseOptions: {
	        value: Object.create(parseOptionsPrototype, {proxiedOptions_: {
	            value: this,
	            enumerable: false
	          }}),
	        enumerable: false
	      }
	    });
	    this.setFromObject(options);
	  };
	  var $Options = Options;
	  ($traceurRuntime.createClass)(Options, {
	    set experimental(v) {
	      var $__0 = this;
	      v = coerceOptionValue(v);
	      Object.keys(experimentalOptions).forEach((function(name) {
	        $__0[name] = v;
	      }));
	    },
	    get experimental() {
	      var $__0 = this;
	      var value;
	      Object.keys(experimentalOptions).every((function(name) {
	        var currentValue = $__0[name];
	        if (value === undefined) {
	          value = currentValue;
	          return true;
	        }
	        if (currentValue !== value) {
	          value = null;
	          return false;
	        }
	        return true;
	      }));
	      return value;
	    },
	    get atscript() {
	      return this.types && this.annotations && this.memberVariables;
	    },
	    set atscript(value) {
	      this.types = value;
	      this.annotations = value;
	      this.memberVariables = value;
	    },
	    get modules() {
	      return this.modules_;
	    },
	    set modules(value) {
	      if (typeof value === 'boolean' && !value)
	        value = 'register';
	      if (moduleOptions.indexOf(value) === -1) {
	        throw new Error('Invalid \'modules\' option \'' + value + '\', not in ' + moduleOptions.join(', '));
	      }
	      this.modules_ = value;
	    },
	    get sourceMaps() {
	      return this.sourceMaps_;
	    },
	    set sourceMaps(value) {
	      if (value === null || typeof value === 'boolean') {
	        this.sourceMaps_ = value ? 'file' : false;
	        return ;
	      }
	      if (value === 'file' || value === 'inline' || value === 'memory') {
	        this.sourceMaps_ = value;
	      } else {
	        throw new Error('Option sourceMaps should be ' + '[false|inline|file|memory], not ' + value);
	      }
	    },
	    reset: function() {
	      var allOff = arguments[0];
	      var $__0 = this;
	      var useDefault = allOff === undefined;
	      Object.keys(defaultValues).forEach((function(name) {
	        $__0[name] = useDefault && defaultValues[name];
	      }));
	      this.setDefaults();
	    },
	    setDefaults: function() {
	      this.modules = 'register';
	      this.moduleName = 'default';
	      this.outputLanguage = 'es5';
	      this.referrer = '';
	      this.sourceMaps = false;
	      this.sourceRoot = false;
	      this.lowResolutionSourceMap = false;
	      this.inputSourceMap = false;
	      this.typeAssertionModule = null;
	    },
	    setFromObject: function(object) {
	      var $__0 = this;
	      Object.keys(this).forEach((function(name) {
	        if (name in object)
	          $__0.setOption(name, object[name]);
	      }));
	      this.modules = object.modules || this.modules;
	      if (typeof object.sourceMaps === 'boolean' || typeof object.sourceMaps === 'string') {
	        this.sourceMaps = object.sourceMaps;
	      }
	      if (object.sourceRoot !== undefined)
	        this.sourceRoot = object.sourceRoot;
	      return this;
	    },
	    setOption: function(name, value) {
	      name = toCamelCase(name);
	      if (name in this) {
	        this[name] = value;
	      } else {
	        throw Error('Unknown option: ' + name);
	      }
	    },
	    diff: function(ref) {
	      var $__0 = this;
	      var mismatches = [];
	      Object.keys(this).forEach((function(key) {
	        if ($__0[key] !== ref[key]) {
	          mismatches.push({
	            key: key,
	            now: $traceurRuntime.options[key],
	            v01: ref[key]
	          });
	        }
	      }));
	      return mismatches;
	    }
	  }, {
	    experimental: function() {
	      return new $Options(experimentalOptions);
	    },
	    atscript: function() {
	      return new $Options({
	        types: true,
	        annotations: true,
	        memberVariables: true
	      });
	    },
	    listUnknownOptions: function(obj) {
	      var unknowns = [];
	      Object.keys(obj).forEach((function(propName) {
	        if (!(propName in optionsV01)) {
	          unknowns.push(propName);
	        }
	      }));
	      return unknowns;
	    }
	  });
	  ;
	  var descriptions = {
	    experimental: 'Turns on all experimental features',
	    require: 'Generate require function argument for node when modules=register',
	    sourceMaps: 'Generate source map and (\'file\') write to .map' + ' or (\'inline\') append data URL'
	  };
	  var CommandOptions = function CommandOptions() {
	    $traceurRuntime.superConstructor($CommandOptions).apply(this, arguments);
	    ;
	  };
	  var $CommandOptions = CommandOptions;
	  ($traceurRuntime.createClass)(CommandOptions, {
	    parseCommand: function(s) {
	      var re = /--([^=]+)(?:=(.+))?/;
	      var m = re.exec(s);
	      if (m)
	        this.setOptionCoerced(m[1], m[2]);
	    },
	    setOptionCoerced: function(name, value) {
	      if (typeof value !== 'undefined' && value !== null)
	        value = coerceOptionValue(value);
	      else
	        value = true;
	      this.setOption(name, value);
	    }
	  }, {
	    fromString: function(s) {
	      return $CommandOptions.fromArgv(s.split(/\s+/));
	    },
	    fromArgv: function(args) {
	      var options = new $CommandOptions();
	      args.forEach((function(arg) {
	        return options.parseCommand(arg);
	      }));
	      return options;
	    }
	  }, Options);
	  function coerceOptionValue(v) {
	    switch (v) {
	      case 'false':
	        return false;
	      case 'true':
	      case true:
	        return true;
	      default:
	        return !!v && String(v);
	    }
	  }
	  function toCamelCase(s) {
	    return s.replace(/-\w/g, function(ch) {
	      return ch[1].toUpperCase();
	    });
	  }
	  function toDashCase(s) {
	    return s.replace(/[A-Z]/g, function(ch) {
	      return '-' + ch.toLowerCase();
	    });
	  }
	  function addOptions(flags, commandOptions) {
	    flags.option('--referrer <name>', 'Bracket output code with System.referrerName=<name>', (function(name) {
	      commandOptions.setOption('referrer', name);
	      System.map = System.semverMap(name);
	      return name;
	    }));
	    flags.option('--type-assertion-module <path>', 'Absolute path to the type assertion module.', (function(path) {
	      commandOptions.setOption('type-assertion-module', path);
	      return path;
	    }));
	    flags.option('--modules <' + moduleOptions.join(', ') + '>', 'select the output format for modules', (function(moduleFormat) {
	      commandOptions.modules = moduleFormat;
	    }));
	    flags.option('--moduleName [true|false|default]', 'true for named, false for anonymous modules; default depends on --modules', (function(moduleName) {
	      if (moduleName === 'true')
	        moduleName = true;
	      else if (moduleName === 'false')
	        moduleName = false;
	      else
	        moduleName = 'default';
	      commandOptions.moduleName = moduleName;
	    }));
	    flags.option('--outputLanguage <es6|es5>', 'compilation target language', (function(outputLanguage) {
	      if (outputLanguage === 'es6' || outputLanguage === 'es5')
	        commandOptions.outputLanguage = outputLanguage;
	      else
	        throw new Error('outputLanguage must be one of es5, es6');
	    }));
	    flags.option('--source-maps [file|inline|memory]', 'sourceMaps generated to file or inline with data: URL', (function(to) {
	      return commandOptions.sourceMaps = to;
	    }));
	    flags.option('--source-root <true|false|string>', 'sourcemap sourceRoot value. false to omit, ' + 'true for directory of output file.', (function(to) {
	      if (to === 'false')
	        to = false;
	      else if (to === 'true')
	        to = true;
	      return commandOptions.sourceRoot = to;
	    }));
	    flags.option('--low-resolution-source-maps', 'Lower sourceMaps granularity to one mapping per output line', (function() {
	      return commandOptions.lowResolutionSourceMap = true;
	    }));
	    flags.option('--experimental', 'Turns on all experimental features', (function() {
	      commandOptions.experimental = true;
	    }));
	    flags.option('--atscript', 'Turns on all AtScript features', (function() {
	      commandOptions.atscript = true;
	    }));
	    Object.keys(commandOptions).forEach(function(name) {
	      var dashedName = toDashCase(name);
	      if (flags.optionFor('--' + name) || flags.optionFor('--' + dashedName)) {
	        return ;
	      } else if (name in featureOptions) {
	        flags.option('--' + dashedName + ' [true|false|parse]', descriptions[name]);
	        flags.on(dashedName, (function(value) {
	          return commandOptions.setOptionCoerced(dashedName, value);
	        }));
	      } else if (commandOptions[name] !== null) {
	        flags.option('--' + dashedName, descriptions[name]);
	        flags.on(dashedName, (function() {
	          return commandOptions.setOption(dashedName, true);
	        }));
	      } else {
	        throw new Error('Unexpected null commandOption ' + name);
	      }
	    });
	    commandOptions.setDefaults();
	  }
	  return {
	    get optionsV01() {
	      return optionsV01;
	    },
	    get versionLockedOptions() {
	      return versionLockedOptions;
	    },
	    get Options() {
	      return Options;
	    },
	    get CommandOptions() {
	      return CommandOptions;
	    },
	    get toDashCase() {
	      return toDashCase;
	    },
	    get addOptions() {
	      return addOptions;
	    }
	  };
	});
	System.registerModule("traceur@0.0.87/src/syntax/TokenType.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/syntax/TokenType.js";
	  var AMPERSAND = '&';
	  var AMPERSAND_EQUAL = '&=';
	  var AND = '&&';
	  var ARROW = '=>';
	  var AT = '@';
	  var BACK_QUOTE = '`';
	  var BANG = '!';
	  var BAR = '|';
	  var BAR_EQUAL = '|=';
	  var BREAK = 'break';
	  var CARET = '^';
	  var CARET_EQUAL = '^=';
	  var CASE = 'case';
	  var CATCH = 'catch';
	  var CLASS = 'class';
	  var CLOSE_ANGLE = '>';
	  var CLOSE_CURLY = '}';
	  var CLOSE_PAREN = ')';
	  var CLOSE_SQUARE = ']';
	  var COLON = ':';
	  var COMMA = ',';
	  var CONST = 'const';
	  var CONTINUE = 'continue';
	  var DEBUGGER = 'debugger';
	  var DEFAULT = 'default';
	  var DELETE = 'delete';
	  var DO = 'do';
	  var DOT_DOT_DOT = '...';
	  var ELSE = 'else';
	  var END_OF_FILE = 'End of File';
	  var ENUM = 'enum';
	  var EQUAL = '=';
	  var EQUAL_EQUAL = '==';
	  var EQUAL_EQUAL_EQUAL = '===';
	  var ERROR = 'error';
	  var EXPORT = 'export';
	  var EXTENDS = 'extends';
	  var FALSE = 'false';
	  var FINALLY = 'finally';
	  var FOR = 'for';
	  var FUNCTION = 'function';
	  var GREATER_EQUAL = '>=';
	  var IDENTIFIER = 'identifier';
	  var IF = 'if';
	  var IMPLEMENTS = 'implements';
	  var IMPORT = 'import';
	  var IN = 'in';
	  var INSTANCEOF = 'instanceof';
	  var INTERFACE = 'interface';
	  var LEFT_SHIFT = '<<';
	  var LEFT_SHIFT_EQUAL = '<<=';
	  var LESS_EQUAL = '<=';
	  var LET = 'let';
	  var MINUS = '-';
	  var MINUS_EQUAL = '-=';
	  var MINUS_MINUS = '--';
	  var NEW = 'new';
	  var NO_SUBSTITUTION_TEMPLATE = 'no substitution template';
	  var NOT_EQUAL = '!=';
	  var NOT_EQUAL_EQUAL = '!==';
	  var NULL = 'null';
	  var NUMBER = 'number literal';
	  var OPEN_ANGLE = '<';
	  var OPEN_CURLY = '{';
	  var OPEN_PAREN = '(';
	  var OPEN_SQUARE = '[';
	  var OR = '||';
	  var PACKAGE = 'package';
	  var PERCENT = '%';
	  var PERCENT_EQUAL = '%=';
	  var PERIOD = '.';
	  var PLUS = '+';
	  var PLUS_EQUAL = '+=';
	  var PLUS_PLUS = '++';
	  var PRIVATE = 'private';
	  var PROTECTED = 'protected';
	  var PUBLIC = 'public';
	  var QUESTION = '?';
	  var REGULAR_EXPRESSION = 'regular expression literal';
	  var RETURN = 'return';
	  var RIGHT_SHIFT = '>>';
	  var RIGHT_SHIFT_EQUAL = '>>=';
	  var SEMI_COLON = ';';
	  var SLASH = '/';
	  var SLASH_EQUAL = '/=';
	  var STAR = '*';
	  var STAR_EQUAL = '*=';
	  var STAR_STAR = '**';
	  var STAR_STAR_EQUAL = '**=';
	  var STATIC = 'static';
	  var STRING = 'string literal';
	  var SUPER = 'super';
	  var SWITCH = 'switch';
	  var TEMPLATE_HEAD = 'template head';
	  var TEMPLATE_MIDDLE = 'template middle';
	  var TEMPLATE_TAIL = 'template tail';
	  var THIS = 'this';
	  var THROW = 'throw';
	  var TILDE = '~';
	  var TRUE = 'true';
	  var TRY = 'try';
	  var TYPEOF = 'typeof';
	  var UNSIGNED_RIGHT_SHIFT = '>>>';
	  var UNSIGNED_RIGHT_SHIFT_EQUAL = '>>>=';
	  var VAR = 'var';
	  var VOID = 'void';
	  var WHILE = 'while';
	  var WITH = 'with';
	  var YIELD = 'yield';
	  return {
	    get AMPERSAND() {
	      return AMPERSAND;
	    },
	    get AMPERSAND_EQUAL() {
	      return AMPERSAND_EQUAL;
	    },
	    get AND() {
	      return AND;
	    },
	    get ARROW() {
	      return ARROW;
	    },
	    get AT() {
	      return AT;
	    },
	    get BACK_QUOTE() {
	      return BACK_QUOTE;
	    },
	    get BANG() {
	      return BANG;
	    },
	    get BAR() {
	      return BAR;
	    },
	    get BAR_EQUAL() {
	      return BAR_EQUAL;
	    },
	    get BREAK() {
	      return BREAK;
	    },
	    get CARET() {
	      return CARET;
	    },
	    get CARET_EQUAL() {
	      return CARET_EQUAL;
	    },
	    get CASE() {
	      return CASE;
	    },
	    get CATCH() {
	      return CATCH;
	    },
	    get CLASS() {
	      return CLASS;
	    },
	    get CLOSE_ANGLE() {
	      return CLOSE_ANGLE;
	    },
	    get CLOSE_CURLY() {
	      return CLOSE_CURLY;
	    },
	    get CLOSE_PAREN() {
	      return CLOSE_PAREN;
	    },
	    get CLOSE_SQUARE() {
	      return CLOSE_SQUARE;
	    },
	    get COLON() {
	      return COLON;
	    },
	    get COMMA() {
	      return COMMA;
	    },
	    get CONST() {
	      return CONST;
	    },
	    get CONTINUE() {
	      return CONTINUE;
	    },
	    get DEBUGGER() {
	      return DEBUGGER;
	    },
	    get DEFAULT() {
	      return DEFAULT;
	    },
	    get DELETE() {
	      return DELETE;
	    },
	    get DO() {
	      return DO;
	    },
	    get DOT_DOT_DOT() {
	      return DOT_DOT_DOT;
	    },
	    get ELSE() {
	      return ELSE;
	    },
	    get END_OF_FILE() {
	      return END_OF_FILE;
	    },
	    get ENUM() {
	      return ENUM;
	    },
	    get EQUAL() {
	      return EQUAL;
	    },
	    get EQUAL_EQUAL() {
	      return EQUAL_EQUAL;
	    },
	    get EQUAL_EQUAL_EQUAL() {
	      return EQUAL_EQUAL_EQUAL;
	    },
	    get ERROR() {
	      return ERROR;
	    },
	    get EXPORT() {
	      return EXPORT;
	    },
	    get EXTENDS() {
	      return EXTENDS;
	    },
	    get FALSE() {
	      return FALSE;
	    },
	    get FINALLY() {
	      return FINALLY;
	    },
	    get FOR() {
	      return FOR;
	    },
	    get FUNCTION() {
	      return FUNCTION;
	    },
	    get GREATER_EQUAL() {
	      return GREATER_EQUAL;
	    },
	    get IDENTIFIER() {
	      return IDENTIFIER;
	    },
	    get IF() {
	      return IF;
	    },
	    get IMPLEMENTS() {
	      return IMPLEMENTS;
	    },
	    get IMPORT() {
	      return IMPORT;
	    },
	    get IN() {
	      return IN;
	    },
	    get INSTANCEOF() {
	      return INSTANCEOF;
	    },
	    get INTERFACE() {
	      return INTERFACE;
	    },
	    get LEFT_SHIFT() {
	      return LEFT_SHIFT;
	    },
	    get LEFT_SHIFT_EQUAL() {
	      return LEFT_SHIFT_EQUAL;
	    },
	    get LESS_EQUAL() {
	      return LESS_EQUAL;
	    },
	    get LET() {
	      return LET;
	    },
	    get MINUS() {
	      return MINUS;
	    },
	    get MINUS_EQUAL() {
	      return MINUS_EQUAL;
	    },
	    get MINUS_MINUS() {
	      return MINUS_MINUS;
	    },
	    get NEW() {
	      return NEW;
	    },
	    get NO_SUBSTITUTION_TEMPLATE() {
	      return NO_SUBSTITUTION_TEMPLATE;
	    },
	    get NOT_EQUAL() {
	      return NOT_EQUAL;
	    },
	    get NOT_EQUAL_EQUAL() {
	      return NOT_EQUAL_EQUAL;
	    },
	    get NULL() {
	      return NULL;
	    },
	    get NUMBER() {
	      return NUMBER;
	    },
	    get OPEN_ANGLE() {
	      return OPEN_ANGLE;
	    },
	    get OPEN_CURLY() {
	      return OPEN_CURLY;
	    },
	    get OPEN_PAREN() {
	      return OPEN_PAREN;
	    },
	    get OPEN_SQUARE() {
	      return OPEN_SQUARE;
	    },
	    get OR() {
	      return OR;
	    },
	    get PACKAGE() {
	      return PACKAGE;
	    },
	    get PERCENT() {
	      return PERCENT;
	    },
	    get PERCENT_EQUAL() {
	      return PERCENT_EQUAL;
	    },
	    get PERIOD() {
	      return PERIOD;
	    },
	    get PLUS() {
	      return PLUS;
	    },
	    get PLUS_EQUAL() {
	      return PLUS_EQUAL;
	    },
	    get PLUS_PLUS() {
	      return PLUS_PLUS;
	    },
	    get PRIVATE() {
	      return PRIVATE;
	    },
	    get PROTECTED() {
	      return PROTECTED;
	    },
	    get PUBLIC() {
	      return PUBLIC;
	    },
	    get QUESTION() {
	      return QUESTION;
	    },
	    get REGULAR_EXPRESSION() {
	      return REGULAR_EXPRESSION;
	    },
	    get RETURN() {
	      return RETURN;
	    },
	    get RIGHT_SHIFT() {
	      return RIGHT_SHIFT;
	    },
	    get RIGHT_SHIFT_EQUAL() {
	      return RIGHT_SHIFT_EQUAL;
	    },
	    get SEMI_COLON() {
	      return SEMI_COLON;
	    },
	    get SLASH() {
	      return SLASH;
	    },
	    get SLASH_EQUAL() {
	      return SLASH_EQUAL;
	    },
	    get STAR() {
	      return STAR;
	    },
	    get STAR_EQUAL() {
	      return STAR_EQUAL;
	    },
	    get STAR_STAR() {
	      return STAR_STAR;
	    },
	    get STAR_STAR_EQUAL() {
	      return STAR_STAR_EQUAL;
	    },
	    get STATIC() {
	      return STATIC;
	    },
	    get STRING() {
	      return STRING;
	    },
	    get SUPER() {
	      return SUPER;
	    },
	    get SWITCH() {
	      return SWITCH;
	    },
	    get TEMPLATE_HEAD() {
	      return TEMPLATE_HEAD;
	    },
	    get TEMPLATE_MIDDLE() {
	      return TEMPLATE_MIDDLE;
	    },
	    get TEMPLATE_TAIL() {
	      return TEMPLATE_TAIL;
	    },
	    get THIS() {
	      return THIS;
	    },
	    get THROW() {
	      return THROW;
	    },
	    get TILDE() {
	      return TILDE;
	    },
	    get TRUE() {
	      return TRUE;
	    },
	    get TRY() {
	      return TRY;
	    },
	    get TYPEOF() {
	      return TYPEOF;
	    },
	    get UNSIGNED_RIGHT_SHIFT() {
	      return UNSIGNED_RIGHT_SHIFT;
	    },
	    get UNSIGNED_RIGHT_SHIFT_EQUAL() {
	      return UNSIGNED_RIGHT_SHIFT_EQUAL;
	    },
	    get VAR() {
	      return VAR;
	    },
	    get VOID() {
	      return VOID;
	    },
	    get WHILE() {
	      return WHILE;
	    },
	    get WITH() {
	      return WITH;
	    },
	    get YIELD() {
	      return YIELD;
	    }
	  };
	});
	System.registerModule("traceur@0.0.87/src/syntax/trees/ParseTreeType.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/syntax/trees/ParseTreeType.js";
	  var ANNOTATION = 'ANNOTATION';
	  var ANON_BLOCK = 'ANON_BLOCK';
	  var ARGUMENT_LIST = 'ARGUMENT_LIST';
	  var ARRAY_COMPREHENSION = 'ARRAY_COMPREHENSION';
	  var ARRAY_LITERAL_EXPRESSION = 'ARRAY_LITERAL_EXPRESSION';
	  var ARRAY_PATTERN = 'ARRAY_PATTERN';
	  var ARRAY_TYPE = 'ARRAY_TYPE';
	  var ARROW_FUNCTION_EXPRESSION = 'ARROW_FUNCTION_EXPRESSION';
	  var ASSIGNMENT_ELEMENT = 'ASSIGNMENT_ELEMENT';
	  var AWAIT_EXPRESSION = 'AWAIT_EXPRESSION';
	  var BINARY_EXPRESSION = 'BINARY_EXPRESSION';
	  var BINDING_ELEMENT = 'BINDING_ELEMENT';
	  var BINDING_IDENTIFIER = 'BINDING_IDENTIFIER';
	  var BLOCK = 'BLOCK';
	  var BREAK_STATEMENT = 'BREAK_STATEMENT';
	  var CALL_EXPRESSION = 'CALL_EXPRESSION';
	  var CALL_SIGNATURE = 'CALL_SIGNATURE';
	  var CASE_CLAUSE = 'CASE_CLAUSE';
	  var CATCH = 'CATCH';
	  var CLASS_DECLARATION = 'CLASS_DECLARATION';
	  var CLASS_EXPRESSION = 'CLASS_EXPRESSION';
	  var COMMA_EXPRESSION = 'COMMA_EXPRESSION';
	  var COMPREHENSION_FOR = 'COMPREHENSION_FOR';
	  var COMPREHENSION_IF = 'COMPREHENSION_IF';
	  var COMPUTED_PROPERTY_NAME = 'COMPUTED_PROPERTY_NAME';
	  var CONDITIONAL_EXPRESSION = 'CONDITIONAL_EXPRESSION';
	  var CONSTRUCT_SIGNATURE = 'CONSTRUCT_SIGNATURE';
	  var CONSTRUCTOR_TYPE = 'CONSTRUCTOR_TYPE';
	  var CONTINUE_STATEMENT = 'CONTINUE_STATEMENT';
	  var COVER_FORMALS = 'COVER_FORMALS';
	  var COVER_INITIALIZED_NAME = 'COVER_INITIALIZED_NAME';
	  var DEBUGGER_STATEMENT = 'DEBUGGER_STATEMENT';
	  var DEFAULT_CLAUSE = 'DEFAULT_CLAUSE';
	  var DO_WHILE_STATEMENT = 'DO_WHILE_STATEMENT';
	  var EMPTY_STATEMENT = 'EMPTY_STATEMENT';
	  var EXPORT_DECLARATION = 'EXPORT_DECLARATION';
	  var EXPORT_DEFAULT = 'EXPORT_DEFAULT';
	  var EXPORT_SPECIFIER = 'EXPORT_SPECIFIER';
	  var EXPORT_SPECIFIER_SET = 'EXPORT_SPECIFIER_SET';
	  var EXPORT_STAR = 'EXPORT_STAR';
	  var EXPRESSION_STATEMENT = 'EXPRESSION_STATEMENT';
	  var FINALLY = 'FINALLY';
	  var FOR_IN_STATEMENT = 'FOR_IN_STATEMENT';
	  var FOR_OF_STATEMENT = 'FOR_OF_STATEMENT';
	  var FOR_ON_STATEMENT = 'FOR_ON_STATEMENT';
	  var FOR_STATEMENT = 'FOR_STATEMENT';
	  var FORMAL_PARAMETER = 'FORMAL_PARAMETER';
	  var FORMAL_PARAMETER_LIST = 'FORMAL_PARAMETER_LIST';
	  var FUNCTION_BODY = 'FUNCTION_BODY';
	  var FUNCTION_DECLARATION = 'FUNCTION_DECLARATION';
	  var FUNCTION_EXPRESSION = 'FUNCTION_EXPRESSION';
	  var FUNCTION_TYPE = 'FUNCTION_TYPE';
	  var GENERATOR_COMPREHENSION = 'GENERATOR_COMPREHENSION';
	  var GET_ACCESSOR = 'GET_ACCESSOR';
	  var IDENTIFIER_EXPRESSION = 'IDENTIFIER_EXPRESSION';
	  var IF_STATEMENT = 'IF_STATEMENT';
	  var IMPORT_DECLARATION = 'IMPORT_DECLARATION';
	  var IMPORT_SPECIFIER = 'IMPORT_SPECIFIER';
	  var IMPORT_SPECIFIER_SET = 'IMPORT_SPECIFIER_SET';
	  var IMPORTED_BINDING = 'IMPORTED_BINDING';
	  var INDEX_SIGNATURE = 'INDEX_SIGNATURE';
	  var INTERFACE_DECLARATION = 'INTERFACE_DECLARATION';
	  var LABELLED_STATEMENT = 'LABELLED_STATEMENT';
	  var LITERAL_EXPRESSION = 'LITERAL_EXPRESSION';
	  var LITERAL_PROPERTY_NAME = 'LITERAL_PROPERTY_NAME';
	  var MEMBER_EXPRESSION = 'MEMBER_EXPRESSION';
	  var MEMBER_LOOKUP_EXPRESSION = 'MEMBER_LOOKUP_EXPRESSION';
	  var METHOD_SIGNATURE = 'METHOD_SIGNATURE';
	  var MODULE = 'MODULE';
	  var MODULE_DECLARATION = 'MODULE_DECLARATION';
	  var MODULE_SPECIFIER = 'MODULE_SPECIFIER';
	  var NAMED_EXPORT = 'NAMED_EXPORT';
	  var NEW_EXPRESSION = 'NEW_EXPRESSION';
	  var OBJECT_LITERAL_EXPRESSION = 'OBJECT_LITERAL_EXPRESSION';
	  var OBJECT_PATTERN = 'OBJECT_PATTERN';
	  var OBJECT_PATTERN_FIELD = 'OBJECT_PATTERN_FIELD';
	  var OBJECT_TYPE = 'OBJECT_TYPE';
	  var PAREN_EXPRESSION = 'PAREN_EXPRESSION';
	  var POSTFIX_EXPRESSION = 'POSTFIX_EXPRESSION';
	  var PREDEFINED_TYPE = 'PREDEFINED_TYPE';
	  var PROPERTY_METHOD_ASSIGNMENT = 'PROPERTY_METHOD_ASSIGNMENT';
	  var PROPERTY_NAME_ASSIGNMENT = 'PROPERTY_NAME_ASSIGNMENT';
	  var PROPERTY_NAME_SHORTHAND = 'PROPERTY_NAME_SHORTHAND';
	  var PROPERTY_SIGNATURE = 'PROPERTY_SIGNATURE';
	  var PROPERTY_VARIABLE_DECLARATION = 'PROPERTY_VARIABLE_DECLARATION';
	  var REST_PARAMETER = 'REST_PARAMETER';
	  var RETURN_STATEMENT = 'RETURN_STATEMENT';
	  var SCRIPT = 'SCRIPT';
	  var SET_ACCESSOR = 'SET_ACCESSOR';
	  var SPREAD_EXPRESSION = 'SPREAD_EXPRESSION';
	  var SPREAD_PATTERN_ELEMENT = 'SPREAD_PATTERN_ELEMENT';
	  var STATE_MACHINE = 'STATE_MACHINE';
	  var SUPER_EXPRESSION = 'SUPER_EXPRESSION';
	  var SWITCH_STATEMENT = 'SWITCH_STATEMENT';
	  var SYNTAX_ERROR_TREE = 'SYNTAX_ERROR_TREE';
	  var TEMPLATE_LITERAL_EXPRESSION = 'TEMPLATE_LITERAL_EXPRESSION';
	  var TEMPLATE_LITERAL_PORTION = 'TEMPLATE_LITERAL_PORTION';
	  var TEMPLATE_SUBSTITUTION = 'TEMPLATE_SUBSTITUTION';
	  var THIS_EXPRESSION = 'THIS_EXPRESSION';
	  var THROW_STATEMENT = 'THROW_STATEMENT';
	  var TRY_STATEMENT = 'TRY_STATEMENT';
	  var TYPE_ARGUMENTS = 'TYPE_ARGUMENTS';
	  var TYPE_NAME = 'TYPE_NAME';
	  var TYPE_PARAMETER = 'TYPE_PARAMETER';
	  var TYPE_PARAMETERS = 'TYPE_PARAMETERS';
	  var TYPE_REFERENCE = 'TYPE_REFERENCE';
	  var UNARY_EXPRESSION = 'UNARY_EXPRESSION';
	  var UNION_TYPE = 'UNION_TYPE';
	  var VARIABLE_DECLARATION = 'VARIABLE_DECLARATION';
	  var VARIABLE_DECLARATION_LIST = 'VARIABLE_DECLARATION_LIST';
	  var VARIABLE_STATEMENT = 'VARIABLE_STATEMENT';
	  var WHILE_STATEMENT = 'WHILE_STATEMENT';
	  var WITH_STATEMENT = 'WITH_STATEMENT';
	  var YIELD_EXPRESSION = 'YIELD_EXPRESSION';
	  return {
	    get ANNOTATION() {
	      return ANNOTATION;
	    },
	    get ANON_BLOCK() {
	      return ANON_BLOCK;
	    },
	    get ARGUMENT_LIST() {
	      return ARGUMENT_LIST;
	    },
	    get ARRAY_COMPREHENSION() {
	      return ARRAY_COMPREHENSION;
	    },
	    get ARRAY_LITERAL_EXPRESSION() {
	      return ARRAY_LITERAL_EXPRESSION;
	    },
	    get ARRAY_PATTERN() {
	      return ARRAY_PATTERN;
	    },
	    get ARRAY_TYPE() {
	      return ARRAY_TYPE;
	    },
	    get ARROW_FUNCTION_EXPRESSION() {
	      return ARROW_FUNCTION_EXPRESSION;
	    },
	    get ASSIGNMENT_ELEMENT() {
	      return ASSIGNMENT_ELEMENT;
	    },
	    get AWAIT_EXPRESSION() {
	      return AWAIT_EXPRESSION;
	    },
	    get BINARY_EXPRESSION() {
	      return BINARY_EXPRESSION;
	    },
	    get BINDING_ELEMENT() {
	      return BINDING_ELEMENT;
	    },
	    get BINDING_IDENTIFIER() {
	      return BINDING_IDENTIFIER;
	    },
	    get BLOCK() {
	      return BLOCK;
	    },
	    get BREAK_STATEMENT() {
	      return BREAK_STATEMENT;
	    },
	    get CALL_EXPRESSION() {
	      return CALL_EXPRESSION;
	    },
	    get CALL_SIGNATURE() {
	      return CALL_SIGNATURE;
	    },
	    get CASE_CLAUSE() {
	      return CASE_CLAUSE;
	    },
	    get CATCH() {
	      return CATCH;
	    },
	    get CLASS_DECLARATION() {
	      return CLASS_DECLARATION;
	    },
	    get CLASS_EXPRESSION() {
	      return CLASS_EXPRESSION;
	    },
	    get COMMA_EXPRESSION() {
	      return COMMA_EXPRESSION;
	    },
	    get COMPREHENSION_FOR() {
	      return COMPREHENSION_FOR;
	    },
	    get COMPREHENSION_IF() {
	      return COMPREHENSION_IF;
	    },
	    get COMPUTED_PROPERTY_NAME() {
	      return COMPUTED_PROPERTY_NAME;
	    },
	    get CONDITIONAL_EXPRESSION() {
	      return CONDITIONAL_EXPRESSION;
	    },
	    get CONSTRUCT_SIGNATURE() {
	      return CONSTRUCT_SIGNATURE;
	    },
	    get CONSTRUCTOR_TYPE() {
	      return CONSTRUCTOR_TYPE;
	    },
	    get CONTINUE_STATEMENT() {
	      return CONTINUE_STATEMENT;
	    },
	    get COVER_FORMALS() {
	      return COVER_FORMALS;
	    },
	    get COVER_INITIALIZED_NAME() {
	      return COVER_INITIALIZED_NAME;
	    },
	    get DEBUGGER_STATEMENT() {
	      return DEBUGGER_STATEMENT;
	    },
	    get DEFAULT_CLAUSE() {
	      return DEFAULT_CLAUSE;
	    },
	    get DO_WHILE_STATEMENT() {
	      return DO_WHILE_STATEMENT;
	    },
	    get EMPTY_STATEMENT() {
	      return EMPTY_STATEMENT;
	    },
	    get EXPORT_DECLARATION() {
	      return EXPORT_DECLARATION;
	    },
	    get EXPORT_DEFAULT() {
	      return EXPORT_DEFAULT;
	    },
	    get EXPORT_SPECIFIER() {
	      return EXPORT_SPECIFIER;
	    },
	    get EXPORT_SPECIFIER_SET() {
	      return EXPORT_SPECIFIER_SET;
	    },
	    get EXPORT_STAR() {
	      return EXPORT_STAR;
	    },
	    get EXPRESSION_STATEMENT() {
	      return EXPRESSION_STATEMENT;
	    },
	    get FINALLY() {
	      return FINALLY;
	    },
	    get FOR_IN_STATEMENT() {
	      return FOR_IN_STATEMENT;
	    },
	    get FOR_OF_STATEMENT() {
	      return FOR_OF_STATEMENT;
	    },
	    get FOR_ON_STATEMENT() {
	      return FOR_ON_STATEMENT;
	    },
	    get FOR_STATEMENT() {
	      return FOR_STATEMENT;
	    },
	    get FORMAL_PARAMETER() {
	      return FORMAL_PARAMETER;
	    },
	    get FORMAL_PARAMETER_LIST() {
	      return FORMAL_PARAMETER_LIST;
	    },
	    get FUNCTION_BODY() {
	      return FUNCTION_BODY;
	    },
	    get FUNCTION_DECLARATION() {
	      return FUNCTION_DECLARATION;
	    },
	    get FUNCTION_EXPRESSION() {
	      return FUNCTION_EXPRESSION;
	    },
	    get FUNCTION_TYPE() {
	      return FUNCTION_TYPE;
	    },
	    get GENERATOR_COMPREHENSION() {
	      return GENERATOR_COMPREHENSION;
	    },
	    get GET_ACCESSOR() {
	      return GET_ACCESSOR;
	    },
	    get IDENTIFIER_EXPRESSION() {
	      return IDENTIFIER_EXPRESSION;
	    },
	    get IF_STATEMENT() {
	      return IF_STATEMENT;
	    },
	    get IMPORT_DECLARATION() {
	      return IMPORT_DECLARATION;
	    },
	    get IMPORT_SPECIFIER() {
	      return IMPORT_SPECIFIER;
	    },
	    get IMPORT_SPECIFIER_SET() {
	      return IMPORT_SPECIFIER_SET;
	    },
	    get IMPORTED_BINDING() {
	      return IMPORTED_BINDING;
	    },
	    get INDEX_SIGNATURE() {
	      return INDEX_SIGNATURE;
	    },
	    get INTERFACE_DECLARATION() {
	      return INTERFACE_DECLARATION;
	    },
	    get LABELLED_STATEMENT() {
	      return LABELLED_STATEMENT;
	    },
	    get LITERAL_EXPRESSION() {
	      return LITERAL_EXPRESSION;
	    },
	    get LITERAL_PROPERTY_NAME() {
	      return LITERAL_PROPERTY_NAME;
	    },
	    get MEMBER_EXPRESSION() {
	      return MEMBER_EXPRESSION;
	    },
	    get MEMBER_LOOKUP_EXPRESSION() {
	      return MEMBER_LOOKUP_EXPRESSION;
	    },
	    get METHOD_SIGNATURE() {
	      return METHOD_SIGNATURE;
	    },
	    get MODULE() {
	      return MODULE;
	    },
	    get MODULE_DECLARATION() {
	      return MODULE_DECLARATION;
	    },
	    get MODULE_SPECIFIER() {
	      return MODULE_SPECIFIER;
	    },
	    get NAMED_EXPORT() {
	      return NAMED_EXPORT;
	    },
	    get NEW_EXPRESSION() {
	      return NEW_EXPRESSION;
	    },
	    get OBJECT_LITERAL_EXPRESSION() {
	      return OBJECT_LITERAL_EXPRESSION;
	    },
	    get OBJECT_PATTERN() {
	      return OBJECT_PATTERN;
	    },
	    get OBJECT_PATTERN_FIELD() {
	      return OBJECT_PATTERN_FIELD;
	    },
	    get OBJECT_TYPE() {
	      return OBJECT_TYPE;
	    },
	    get PAREN_EXPRESSION() {
	      return PAREN_EXPRESSION;
	    },
	    get POSTFIX_EXPRESSION() {
	      return POSTFIX_EXPRESSION;
	    },
	    get PREDEFINED_TYPE() {
	      return PREDEFINED_TYPE;
	    },
	    get PROPERTY_METHOD_ASSIGNMENT() {
	      return PROPERTY_METHOD_ASSIGNMENT;
	    },
	    get PROPERTY_NAME_ASSIGNMENT() {
	      return PROPERTY_NAME_ASSIGNMENT;
	    },
	    get PROPERTY_NAME_SHORTHAND() {
	      return PROPERTY_NAME_SHORTHAND;
	    },
	    get PROPERTY_SIGNATURE() {
	      return PROPERTY_SIGNATURE;
	    },
	    get PROPERTY_VARIABLE_DECLARATION() {
	      return PROPERTY_VARIABLE_DECLARATION;
	    },
	    get REST_PARAMETER() {
	      return REST_PARAMETER;
	    },
	    get RETURN_STATEMENT() {
	      return RETURN_STATEMENT;
	    },
	    get SCRIPT() {
	      return SCRIPT;
	    },
	    get SET_ACCESSOR() {
	      return SET_ACCESSOR;
	    },
	    get SPREAD_EXPRESSION() {
	      return SPREAD_EXPRESSION;
	    },
	    get SPREAD_PATTERN_ELEMENT() {
	      return SPREAD_PATTERN_ELEMENT;
	    },
	    get STATE_MACHINE() {
	      return STATE_MACHINE;
	    },
	    get SUPER_EXPRESSION() {
	      return SUPER_EXPRESSION;
	    },
	    get SWITCH_STATEMENT() {
	      return SWITCH_STATEMENT;
	    },
	    get SYNTAX_ERROR_TREE() {
	      return SYNTAX_ERROR_TREE;
	    },
	    get TEMPLATE_LITERAL_EXPRESSION() {
	      return TEMPLATE_LITERAL_EXPRESSION;
	    },
	    get TEMPLATE_LITERAL_PORTION() {
	      return TEMPLATE_LITERAL_PORTION;
	    },
	    get TEMPLATE_SUBSTITUTION() {
	      return TEMPLATE_SUBSTITUTION;
	    },
	    get THIS_EXPRESSION() {
	      return THIS_EXPRESSION;
	    },
	    get THROW_STATEMENT() {
	      return THROW_STATEMENT;
	    },
	    get TRY_STATEMENT() {
	      return TRY_STATEMENT;
	    },
	    get TYPE_ARGUMENTS() {
	      return TYPE_ARGUMENTS;
	    },
	    get TYPE_NAME() {
	      return TYPE_NAME;
	    },
	    get TYPE_PARAMETER() {
	      return TYPE_PARAMETER;
	    },
	    get TYPE_PARAMETERS() {
	      return TYPE_PARAMETERS;
	    },
	    get TYPE_REFERENCE() {
	      return TYPE_REFERENCE;
	    },
	    get UNARY_EXPRESSION() {
	      return UNARY_EXPRESSION;
	    },
	    get UNION_TYPE() {
	      return UNION_TYPE;
	    },
	    get VARIABLE_DECLARATION() {
	      return VARIABLE_DECLARATION;
	    },
	    get VARIABLE_DECLARATION_LIST() {
	      return VARIABLE_DECLARATION_LIST;
	    },
	    get VARIABLE_STATEMENT() {
	      return VARIABLE_STATEMENT;
	    },
	    get WHILE_STATEMENT() {
	      return WHILE_STATEMENT;
	    },
	    get WITH_STATEMENT() {
	      return WITH_STATEMENT;
	    },
	    get YIELD_EXPRESSION() {
	      return YIELD_EXPRESSION;
	    }
	  };
	});
	System.registerModule("traceur@0.0.87/src/syntax/ParseTreeVisitor.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/syntax/ParseTreeVisitor.js";
	  var ParseTreeVisitor = function ParseTreeVisitor() {
	    ;
	  };
	  ($traceurRuntime.createClass)(ParseTreeVisitor, {
	    visitAny: function(tree) {
	      tree && tree.visit(this);
	    },
	    visit: function(tree) {
	      this.visitAny(tree);
	    },
	    visitList: function(list) {
	      if (list) {
	        for (var i = 0; i < list.length; i++) {
	          this.visitAny(list[i]);
	        }
	      }
	    },
	    visitStateMachine: function(tree) {
	      throw Error('State machines should not live outside of the GeneratorTransformer.');
	    },
	    visitAnnotation: function(tree) {
	      this.visitAny(tree.name);
	      this.visitAny(tree.args);
	    },
	    visitAnonBlock: function(tree) {
	      this.visitList(tree.statements);
	    },
	    visitArgumentList: function(tree) {
	      this.visitList(tree.args);
	    },
	    visitArrayComprehension: function(tree) {
	      this.visitList(tree.comprehensionList);
	      this.visitAny(tree.expression);
	    },
	    visitArrayLiteralExpression: function(tree) {
	      this.visitList(tree.elements);
	    },
	    visitArrayPattern: function(tree) {
	      this.visitList(tree.elements);
	    },
	    visitArrayType: function(tree) {
	      this.visitAny(tree.elementType);
	    },
	    visitArrowFunctionExpression: function(tree) {
	      this.visitAny(tree.parameterList);
	      this.visitAny(tree.body);
	    },
	    visitAssignmentElement: function(tree) {
	      this.visitAny(tree.assignment);
	      this.visitAny(tree.initializer);
	    },
	    visitAwaitExpression: function(tree) {
	      this.visitAny(tree.expression);
	    },
	    visitBinaryExpression: function(tree) {
	      this.visitAny(tree.left);
	      this.visitAny(tree.right);
	    },
	    visitBindingElement: function(tree) {
	      this.visitAny(tree.binding);
	      this.visitAny(tree.initializer);
	    },
	    visitBindingIdentifier: function(tree) {},
	    visitBlock: function(tree) {
	      this.visitList(tree.statements);
	    },
	    visitBreakStatement: function(tree) {},
	    visitCallExpression: function(tree) {
	      this.visitAny(tree.operand);
	      this.visitAny(tree.args);
	    },
	    visitCallSignature: function(tree) {
	      this.visitAny(tree.typeParameters);
	      this.visitAny(tree.parameterList);
	      this.visitAny(tree.returnType);
	    },
	    visitCaseClause: function(tree) {
	      this.visitAny(tree.expression);
	      this.visitList(tree.statements);
	    },
	    visitCatch: function(tree) {
	      this.visitAny(tree.binding);
	      this.visitAny(tree.catchBody);
	    },
	    visitClassDeclaration: function(tree) {
	      this.visitAny(tree.name);
	      this.visitAny(tree.superClass);
	      this.visitList(tree.elements);
	      this.visitList(tree.annotations);
	      this.visitAny(tree.typeParameters);
	    },
	    visitClassExpression: function(tree) {
	      this.visitAny(tree.name);
	      this.visitAny(tree.superClass);
	      this.visitList(tree.elements);
	      this.visitList(tree.annotations);
	      this.visitAny(tree.typeParameters);
	    },
	    visitCommaExpression: function(tree) {
	      this.visitList(tree.expressions);
	    },
	    visitComprehensionFor: function(tree) {
	      this.visitAny(tree.left);
	      this.visitAny(tree.iterator);
	    },
	    visitComprehensionIf: function(tree) {
	      this.visitAny(tree.expression);
	    },
	    visitComputedPropertyName: function(tree) {
	      this.visitAny(tree.expression);
	    },
	    visitConditionalExpression: function(tree) {
	      this.visitAny(tree.condition);
	      this.visitAny(tree.left);
	      this.visitAny(tree.right);
	    },
	    visitConstructSignature: function(tree) {
	      this.visitAny(tree.typeParameters);
	      this.visitAny(tree.parameterList);
	      this.visitAny(tree.returnType);
	    },
	    visitConstructorType: function(tree) {
	      this.visitAny(tree.typeParameters);
	      this.visitAny(tree.parameterList);
	      this.visitAny(tree.returnType);
	    },
	    visitContinueStatement: function(tree) {},
	    visitCoverFormals: function(tree) {
	      this.visitList(tree.expressions);
	    },
	    visitCoverInitializedName: function(tree) {
	      this.visitAny(tree.initializer);
	    },
	    visitDebuggerStatement: function(tree) {},
	    visitDefaultClause: function(tree) {
	      this.visitList(tree.statements);
	    },
	    visitDoWhileStatement: function(tree) {
	      this.visitAny(tree.body);
	      this.visitAny(tree.condition);
	    },
	    visitEmptyStatement: function(tree) {},
	    visitExportDeclaration: function(tree) {
	      this.visitAny(tree.declaration);
	      this.visitList(tree.annotations);
	    },
	    visitExportDefault: function(tree) {
	      this.visitAny(tree.expression);
	    },
	    visitExportSpecifier: function(tree) {},
	    visitExportSpecifierSet: function(tree) {
	      this.visitList(tree.specifiers);
	    },
	    visitExportStar: function(tree) {},
	    visitExpressionStatement: function(tree) {
	      this.visitAny(tree.expression);
	    },
	    visitFinally: function(tree) {
	      this.visitAny(tree.block);
	    },
	    visitForInStatement: function(tree) {
	      this.visitAny(tree.initializer);
	      this.visitAny(tree.collection);
	      this.visitAny(tree.body);
	    },
	    visitForOfStatement: function(tree) {
	      this.visitAny(tree.initializer);
	      this.visitAny(tree.collection);
	      this.visitAny(tree.body);
	    },
	    visitForOnStatement: function(tree) {
	      this.visitAny(tree.initializer);
	      this.visitAny(tree.observable);
	      this.visitAny(tree.body);
	    },
	    visitForStatement: function(tree) {
	      this.visitAny(tree.initializer);
	      this.visitAny(tree.condition);
	      this.visitAny(tree.increment);
	      this.visitAny(tree.body);
	    },
	    visitFormalParameter: function(tree) {
	      this.visitAny(tree.parameter);
	      this.visitAny(tree.typeAnnotation);
	      this.visitList(tree.annotations);
	    },
	    visitFormalParameterList: function(tree) {
	      this.visitList(tree.parameters);
	    },
	    visitFunctionBody: function(tree) {
	      this.visitList(tree.statements);
	    },
	    visitFunctionDeclaration: function(tree) {
	      this.visitAny(tree.name);
	      this.visitAny(tree.parameterList);
	      this.visitAny(tree.typeAnnotation);
	      this.visitList(tree.annotations);
	      this.visitAny(tree.body);
	    },
	    visitFunctionExpression: function(tree) {
	      this.visitAny(tree.name);
	      this.visitAny(tree.parameterList);
	      this.visitAny(tree.typeAnnotation);
	      this.visitList(tree.annotations);
	      this.visitAny(tree.body);
	    },
	    visitFunctionType: function(tree) {
	      this.visitAny(tree.typeParameters);
	      this.visitAny(tree.parameterList);
	      this.visitAny(tree.returnType);
	    },
	    visitGeneratorComprehension: function(tree) {
	      this.visitList(tree.comprehensionList);
	      this.visitAny(tree.expression);
	    },
	    visitGetAccessor: function(tree) {
	      this.visitAny(tree.name);
	      this.visitAny(tree.typeAnnotation);
	      this.visitList(tree.annotations);
	      this.visitAny(tree.body);
	    },
	    visitIdentifierExpression: function(tree) {},
	    visitIfStatement: function(tree) {
	      this.visitAny(tree.condition);
	      this.visitAny(tree.ifClause);
	      this.visitAny(tree.elseClause);
	    },
	    visitImportedBinding: function(tree) {
	      this.visitAny(tree.binding);
	    },
	    visitImportDeclaration: function(tree) {
	      this.visitAny(tree.importClause);
	      this.visitAny(tree.moduleSpecifier);
	    },
	    visitImportSpecifier: function(tree) {
	      this.visitAny(tree.binding);
	    },
	    visitImportSpecifierSet: function(tree) {
	      this.visitList(tree.specifiers);
	    },
	    visitIndexSignature: function(tree) {
	      this.visitAny(tree.indexType);
	      this.visitAny(tree.typeAnnotation);
	    },
	    visitInterfaceDeclaration: function(tree) {
	      this.visitAny(tree.typeParameters);
	      this.visitAny(tree.objectType);
	    },
	    visitLabelledStatement: function(tree) {
	      this.visitAny(tree.statement);
	    },
	    visitLiteralExpression: function(tree) {},
	    visitLiteralPropertyName: function(tree) {},
	    visitMemberExpression: function(tree) {
	      this.visitAny(tree.operand);
	    },
	    visitMemberLookupExpression: function(tree) {
	      this.visitAny(tree.operand);
	      this.visitAny(tree.memberExpression);
	    },
	    visitMethodSignature: function(tree) {
	      this.visitAny(tree.name);
	      this.visitAny(tree.callSignature);
	    },
	    visitModule: function(tree) {
	      this.visitList(tree.scriptItemList);
	    },
	    visitModuleDeclaration: function(tree) {
	      this.visitAny(tree.binding);
	      this.visitAny(tree.expression);
	    },
	    visitModuleSpecifier: function(tree) {},
	    visitNamedExport: function(tree) {
	      this.visitAny(tree.moduleSpecifier);
	      this.visitAny(tree.specifierSet);
	    },
	    visitNewExpression: function(tree) {
	      this.visitAny(tree.operand);
	      this.visitAny(tree.args);
	    },
	    visitObjectLiteralExpression: function(tree) {
	      this.visitList(tree.propertyNameAndValues);
	    },
	    visitObjectPattern: function(tree) {
	      this.visitList(tree.fields);
	    },
	    visitObjectPatternField: function(tree) {
	      this.visitAny(tree.name);
	      this.visitAny(tree.element);
	    },
	    visitObjectType: function(tree) {
	      this.visitList(tree.typeMembers);
	    },
	    visitParenExpression: function(tree) {
	      this.visitAny(tree.expression);
	    },
	    visitPostfixExpression: function(tree) {
	      this.visitAny(tree.operand);
	    },
	    visitPredefinedType: function(tree) {},
	    visitScript: function(tree) {
	      this.visitList(tree.scriptItemList);
	    },
	    visitPropertyMethodAssignment: function(tree) {
	      this.visitAny(tree.name);
	      this.visitAny(tree.parameterList);
	      this.visitAny(tree.typeAnnotation);
	      this.visitList(tree.annotations);
	      this.visitAny(tree.body);
	      this.visitAny(tree.debugName);
	    },
	    visitPropertyNameAssignment: function(tree) {
	      this.visitAny(tree.name);
	      this.visitAny(tree.value);
	    },
	    visitPropertyNameShorthand: function(tree) {},
	    visitPropertyVariableDeclaration: function(tree) {
	      this.visitAny(tree.name);
	      this.visitAny(tree.typeAnnotation);
	      this.visitList(tree.annotations);
	      this.visitAny(tree.initializer);
	    },
	    visitPropertySignature: function(tree) {
	      this.visitAny(tree.name);
	      this.visitAny(tree.typeAnnotation);
	    },
	    visitRestParameter: function(tree) {
	      this.visitAny(tree.identifier);
	      this.visitAny(tree.typeAnnotation);
	    },
	    visitReturnStatement: function(tree) {
	      this.visitAny(tree.expression);
	    },
	    visitSetAccessor: function(tree) {
	      this.visitAny(tree.name);
	      this.visitAny(tree.parameterList);
	      this.visitList(tree.annotations);
	      this.visitAny(tree.body);
	    },
	    visitSpreadExpression: function(tree) {
	      this.visitAny(tree.expression);
	    },
	    visitSpreadPatternElement: function(tree) {
	      this.visitAny(tree.lvalue);
	    },
	    visitSuperExpression: function(tree) {},
	    visitSwitchStatement: function(tree) {
	      this.visitAny(tree.expression);
	      this.visitList(tree.caseClauses);
	    },
	    visitSyntaxErrorTree: function(tree) {},
	    visitTemplateLiteralExpression: function(tree) {
	      this.visitAny(tree.operand);
	      this.visitList(tree.elements);
	    },
	    visitTemplateLiteralPortion: function(tree) {},
	    visitTemplateSubstitution: function(tree) {
	      this.visitAny(tree.expression);
	    },
	    visitThisExpression: function(tree) {},
	    visitThrowStatement: function(tree) {
	      this.visitAny(tree.value);
	    },
	    visitTryStatement: function(tree) {
	      this.visitAny(tree.body);
	      this.visitAny(tree.catchBlock);
	      this.visitAny(tree.finallyBlock);
	    },
	    visitTypeArguments: function(tree) {
	      this.visitList(tree.args);
	    },
	    visitTypeName: function(tree) {
	      this.visitAny(tree.moduleName);
	    },
	    visitTypeParameter: function(tree) {
	      this.visitAny(tree.extendsType);
	    },
	    visitTypeParameters: function(tree) {
	      this.visitList(tree.parameters);
	    },
	    visitTypeReference: function(tree) {
	      this.visitAny(tree.typeName);
	      this.visitAny(tree.args);
	    },
	    visitUnaryExpression: function(tree) {
	      this.visitAny(tree.operand);
	    },
	    visitUnionType: function(tree) {
	      this.visitList(tree.types);
	    },
	    visitVariableDeclaration: function(tree) {
	      this.visitAny(tree.lvalue);
	      this.visitAny(tree.typeAnnotation);
	      this.visitAny(tree.initializer);
	    },
	    visitVariableDeclarationList: function(tree) {
	      this.visitList(tree.declarations);
	    },
	    visitVariableStatement: function(tree) {
	      this.visitAny(tree.declarations);
	    },
	    visitWhileStatement: function(tree) {
	      this.visitAny(tree.condition);
	      this.visitAny(tree.body);
	    },
	    visitWithStatement: function(tree) {
	      this.visitAny(tree.expression);
	      this.visitAny(tree.body);
	    },
	    visitYieldExpression: function(tree) {
	      this.visitAny(tree.expression);
	    }
	  }, {});
	  return {get ParseTreeVisitor() {
	      return ParseTreeVisitor;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/util/StringSet.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/util/StringSet.js";
	  function assertString(value) {
	    if (typeof value !== 'string')
	      throw new TypeError();
	  }
	  var StringSet = function StringSet() {
	    this.storage_ = Object.create(null);
	  };
	  ($traceurRuntime.createClass)(StringSet, {
	    add: function(value) {
	      assertString(value);
	      this.storage_[value] = true;
	    },
	    has: function(value) {
	      assertString(value);
	      return this.storage_[value] !== undefined;
	    },
	    delete: function(value) {
	      assertString(value);
	      delete this.storage_[value];
	    },
	    isEmpty: function() {
	      for (var _ in this.storage_) {
	        return false;
	      }
	      return true;
	    },
	    valuesAsArray: function() {
	      return Object.keys(this.storage_);
	    },
	    forEach: function(func) {
	      for (var value in this.storage_) {
	        func(value);
	      }
	    }
	  }, {});
	  return {get StringSet() {
	      return StringSet;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/util/StringMap.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/util/StringMap.js";
	  var StringSet = System.get("traceur@0.0.87/src/util/StringSet.js").StringSet;
	  function assertString(value) {
	    if (typeof value !== 'string')
	      throw new TypeError();
	  }
	  var StringMap = function StringMap() {
	    this.storage_ = Object.create(null);
	  };
	  ($traceurRuntime.createClass)(StringMap, {
	    set: function(key, value) {
	      assertString(key);
	      this.storage_[key] = value;
	    },
	    get: function(key) {
	      assertString(key);
	      return this.storage_[key];
	    },
	    delete: function(key) {
	      assertString(key);
	      delete this.storage_[key];
	    },
	    has: function(key) {
	      assertString(key);
	      return this.storage_[key] !== undefined;
	    },
	    keysAsArray: function() {
	      return Object.keys(this.storage_);
	    },
	    keysAsSet: function() {
	      var set = new StringSet();
	      this.forEach((function(key) {
	        return set.add(key);
	      }));
	      return set;
	    },
	    forEach: function(func) {
	      for (var key in this.storage_) {
	        func(key, this.storage_[key]);
	      }
	    }
	  }, {});
	  return {get StringMap() {
	      return StringMap;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/syntax/PredefinedName.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/syntax/PredefinedName.js";
	  var $ARGUMENTS = '$arguments';
	  var ANY = 'any';
	  var APPLY = 'apply';
	  var ARGUMENTS = 'arguments';
	  var ARRAY = 'Array';
	  var AS = 'as';
	  var ASYNC = 'async';
	  var ASYNC_STAR = 'async star';
	  var AWAIT = 'await';
	  var BIND = 'bind';
	  var CALL = 'call';
	  var CONFIGURABLE = 'configurable';
	  var CONSTRUCTOR = 'constructor';
	  var CREATE = 'create';
	  var CURRENT = 'current';
	  var DEFINE_PROPERTY = 'defineProperty';
	  var ENUMERABLE = 'enumerable';
	  var FREEZE = 'freeze';
	  var FROM = 'from';
	  var FUNCTION = 'Function';
	  var GET = 'get';
	  var HAS = 'has';
	  var LENGTH = 'length';
	  var MODULE = 'module';
	  var NEW = 'new';
	  var OBJECT = 'Object';
	  var OBJECT_NAME = 'Object';
	  var OF = 'of';
	  var ON = 'on';
	  var PREVENT_EXTENSIONS = 'preventExtensions';
	  var PROTOTYPE = 'prototype';
	  var PUSH = 'push';
	  var SET = 'set';
	  var SLICE = 'slice';
	  var THIS = 'this';
	  var TRACEUR_RUNTIME = '$traceurRuntime';
	  var UNDEFINED = 'undefined';
	  var WRITABLE = 'writable';
	  return {
	    get $ARGUMENTS() {
	      return $ARGUMENTS;
	    },
	    get ANY() {
	      return ANY;
	    },
	    get APPLY() {
	      return APPLY;
	    },
	    get ARGUMENTS() {
	      return ARGUMENTS;
	    },
	    get ARRAY() {
	      return ARRAY;
	    },
	    get AS() {
	      return AS;
	    },
	    get ASYNC() {
	      return ASYNC;
	    },
	    get ASYNC_STAR() {
	      return ASYNC_STAR;
	    },
	    get AWAIT() {
	      return AWAIT;
	    },
	    get BIND() {
	      return BIND;
	    },
	    get CALL() {
	      return CALL;
	    },
	    get CONFIGURABLE() {
	      return CONFIGURABLE;
	    },
	    get CONSTRUCTOR() {
	      return CONSTRUCTOR;
	    },
	    get CREATE() {
	      return CREATE;
	    },
	    get CURRENT() {
	      return CURRENT;
	    },
	    get DEFINE_PROPERTY() {
	      return DEFINE_PROPERTY;
	    },
	    get ENUMERABLE() {
	      return ENUMERABLE;
	    },
	    get FREEZE() {
	      return FREEZE;
	    },
	    get FROM() {
	      return FROM;
	    },
	    get FUNCTION() {
	      return FUNCTION;
	    },
	    get GET() {
	      return GET;
	    },
	    get HAS() {
	      return HAS;
	    },
	    get LENGTH() {
	      return LENGTH;
	    },
	    get MODULE() {
	      return MODULE;
	    },
	    get NEW() {
	      return NEW;
	    },
	    get OBJECT() {
	      return OBJECT;
	    },
	    get OBJECT_NAME() {
	      return OBJECT_NAME;
	    },
	    get OF() {
	      return OF;
	    },
	    get ON() {
	      return ON;
	    },
	    get PREVENT_EXTENSIONS() {
	      return PREVENT_EXTENSIONS;
	    },
	    get PROTOTYPE() {
	      return PROTOTYPE;
	    },
	    get PUSH() {
	      return PUSH;
	    },
	    get SET() {
	      return SET;
	    },
	    get SLICE() {
	      return SLICE;
	    },
	    get THIS() {
	      return THIS;
	    },
	    get TRACEUR_RUNTIME() {
	      return TRACEUR_RUNTIME;
	    },
	    get UNDEFINED() {
	      return UNDEFINED;
	    },
	    get WRITABLE() {
	      return WRITABLE;
	    }
	  };
	});
	System.registerModule("traceur@0.0.87/src/semantics/util.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/semantics/util.js";
	  var $__0 = System.get("traceur@0.0.87/src/syntax/trees/ParseTreeType.js"),
	      IDENTIFIER_EXPRESSION = $__0.IDENTIFIER_EXPRESSION,
	      LITERAL_EXPRESSION = $__0.LITERAL_EXPRESSION,
	      PAREN_EXPRESSION = $__0.PAREN_EXPRESSION,
	      UNARY_EXPRESSION = $__0.UNARY_EXPRESSION;
	  var UNDEFINED = System.get("traceur@0.0.87/src/syntax/PredefinedName.js").UNDEFINED;
	  var VOID = System.get("traceur@0.0.87/src/syntax/TokenType.js").VOID;
	  function hasUseStrict(list) {
	    for (var i = 0; i < list.length; i++) {
	      if (!list[i].isDirectivePrologue())
	        return false;
	      if (list[i].isUseStrictDirective())
	        return true;
	    }
	    return false;
	  }
	  function isUndefined(tree) {
	    if (tree.type === PAREN_EXPRESSION)
	      return isUndefined(tree.expression);
	    return tree.type === IDENTIFIER_EXPRESSION && tree.identifierToken.value === UNDEFINED;
	  }
	  function isVoidExpression(tree) {
	    if (tree.type === PAREN_EXPRESSION)
	      return isVoidExpression(tree.expression);
	    return tree.type === UNARY_EXPRESSION && tree.operator.type === VOID && isLiteralExpression(tree.operand);
	  }
	  function isLiteralExpression(tree) {
	    if (tree.type === PAREN_EXPRESSION)
	      return isLiteralExpression(tree.expression);
	    return tree.type === LITERAL_EXPRESSION;
	  }
	  return {
	    get hasUseStrict() {
	      return hasUseStrict;
	    },
	    get isUndefined() {
	      return isUndefined;
	    },
	    get isVoidExpression() {
	      return isVoidExpression;
	    },
	    get isLiteralExpression() {
	      return isLiteralExpression;
	    }
	  };
	});
	System.registerModule("traceur@0.0.87/src/semantics/isTreeStrict.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/semantics/isTreeStrict.js";
	  var $__0 = System.get("traceur@0.0.87/src/syntax/trees/ParseTreeType.js"),
	      ARROW_FUNCTION_EXPRESSION = $__0.ARROW_FUNCTION_EXPRESSION,
	      CLASS_DECLARATION = $__0.CLASS_DECLARATION,
	      CLASS_EXPRESSION = $__0.CLASS_EXPRESSION,
	      FUNCTION_BODY = $__0.FUNCTION_BODY,
	      FUNCTION_DECLARATION = $__0.FUNCTION_DECLARATION,
	      FUNCTION_EXPRESSION = $__0.FUNCTION_EXPRESSION,
	      GET_ACCESSOR = $__0.GET_ACCESSOR,
	      MODULE = $__0.MODULE,
	      PROPERTY_METHOD_ASSIGNMENT = $__0.PROPERTY_METHOD_ASSIGNMENT,
	      SCRIPT = $__0.SCRIPT,
	      SET_ACCESSOR = $__0.SET_ACCESSOR;
	  var hasUseStrict = System.get("traceur@0.0.87/src/semantics/util.js").hasUseStrict;
	  function isTreeStrict(tree) {
	    switch (tree.type) {
	      case CLASS_DECLARATION:
	      case CLASS_EXPRESSION:
	      case MODULE:
	        return true;
	      case FUNCTION_BODY:
	        return hasUseStrict(tree.statements);
	      case FUNCTION_EXPRESSION:
	      case FUNCTION_DECLARATION:
	      case PROPERTY_METHOD_ASSIGNMENT:
	        return isTreeStrict(tree.body);
	      case ARROW_FUNCTION_EXPRESSION:
	        if (tree.body.type === FUNCTION_BODY) {
	          return isTreeStrict(tree.body);
	        }
	        return false;
	      case GET_ACCESSOR:
	      case SET_ACCESSOR:
	        return isTreeStrict(tree.body);
	      case SCRIPT:
	        return hasUseStrict(tree.scriptItemList);
	      default:
	        return false;
	    }
	  }
	  return {get isTreeStrict() {
	      return isTreeStrict;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/semantics/Scope.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/semantics/Scope.js";
	  var $__0 = System.get("traceur@0.0.87/src/syntax/trees/ParseTreeType.js"),
	      BLOCK = $__0.BLOCK,
	      CATCH = $__0.CATCH;
	  var StringMap = System.get("traceur@0.0.87/src/util/StringMap.js").StringMap;
	  var VAR = System.get("traceur@0.0.87/src/syntax/TokenType.js").VAR;
	  var isTreeStrict = System.get("traceur@0.0.87/src/semantics/isTreeStrict.js").isTreeStrict;
	  function reportDuplicateVar(reporter, tree, name) {
	    reporter.reportError(tree.location && tree.location.start, ("Duplicate declaration, " + name));
	  }
	  var Scope = function Scope(parent, tree) {
	    this.parent = parent;
	    this.tree = tree;
	    this.variableDeclarations_ = new StringMap();
	    this.lexicalDeclarations_ = new StringMap();
	    this.strictMode = parent && parent.strictMode || isTreeStrict(tree);
	    this.inGenerator = parent ? parent.inGenerator || false : false;
	  };
	  ($traceurRuntime.createClass)(Scope, {
	    addBinding: function(tree, type, reporter) {
	      if (type === VAR) {
	        this.addVar(tree, reporter);
	      } else {
	        this.addDeclaration(tree, type, reporter);
	      }
	    },
	    addVar: function(tree, reporter) {
	      var name = tree.getStringValue();
	      if (this.lexicalDeclarations_.has(name)) {
	        reportDuplicateVar(reporter, tree, name);
	        return ;
	      }
	      this.variableDeclarations_.set(name, {
	        type: VAR,
	        tree: tree
	      });
	      if (!this.isVarScope && this.parent) {
	        this.parent.addVar(tree, reporter);
	      }
	    },
	    addDeclaration: function(tree, type, reporter) {
	      var name = tree.getStringValue();
	      if (this.lexicalDeclarations_.has(name) || this.variableDeclarations_.has(name)) {
	        reportDuplicateVar(reporter, tree, name);
	        return ;
	      }
	      this.lexicalDeclarations_.set(name, {
	        type: type,
	        tree: tree
	      });
	    },
	    renameBinding: function(oldName, newTree, newType, reporter) {
	      var name = newTree.getStringValue();
	      if (newType === VAR) {
	        if (this.lexicalDeclarations_.has(oldName)) {
	          this.lexicalDeclarations_.delete(oldName);
	          this.addVar(newTree, reporter);
	        }
	      } else if (this.variableDeclarations_.has(oldName)) {
	        this.variableDeclarations_.delete(oldName);
	        this.addDeclaration(newTree, newType, reporter);
	        if (!this.isVarScope && this.parent) {
	          this.parent.renameBinding(oldName, newTree, newType);
	        }
	      }
	    },
	    get isVarScope() {
	      switch (this.tree.type) {
	        case BLOCK:
	        case CATCH:
	          return false;
	      }
	      return true;
	    },
	    getVarScope: function() {
	      if (this.isVarScope) {
	        return this;
	      }
	      if (this.parent) {
	        return this.parent.getVarScope();
	      }
	      return null;
	    },
	    getBinding: function(tree) {
	      var name = tree.getStringValue();
	      return this.getBindingByName(name);
	    },
	    getBindingByName: function(name) {
	      var b = this.lexicalDeclarations_.get(name);
	      if (b) {
	        return b;
	      }
	      b = this.variableDeclarations_.get(name);
	      if (b && this.isVarScope) {
	        return b;
	      }
	      if (this.parent) {
	        return this.parent.getBindingByName(name);
	      }
	      return null;
	    },
	    getAllBindingNames: function() {
	      var names = this.variableDeclarations_.keysAsSet();
	      this.lexicalDeclarations_.forEach((function(name) {
	        return names.add(name);
	      }));
	      return names;
	    },
	    getVariableBindingNames: function() {
	      return this.variableDeclarations_.keysAsSet();
	    },
	    getLexicalBindingNames: function() {
	      return this.lexicalDeclarations_.keysAsSet();
	    },
	    hasBindingName: function(name) {
	      return this.lexicalDeclarations_.has(name) || this.variableDeclarations_.has(name);
	    },
	    hasLexicalBindingName: function(name) {
	      return this.lexicalDeclarations_.has(name);
	    },
	    hasVariableBindingName: function(name) {
	      return this.variableDeclarations_.has(name);
	    }
	  }, {});
	  return {get Scope() {
	      return Scope;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/semantics/ScopeVisitor.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/semantics/ScopeVisitor.js";
	  var Map = System.get("traceur@0.0.87/src/runtime/polyfills/Map.js").Map;
	  var ParseTreeVisitor = System.get("traceur@0.0.87/src/syntax/ParseTreeVisitor.js").ParseTreeVisitor;
	  var VAR = System.get("traceur@0.0.87/src/syntax/TokenType.js").VAR;
	  var Scope = System.get("traceur@0.0.87/src/semantics/Scope.js").Scope;
	  var $__4 = System.get("traceur@0.0.87/src/syntax/trees/ParseTreeType.js"),
	      COMPREHENSION_FOR = $__4.COMPREHENSION_FOR,
	      VARIABLE_DECLARATION_LIST = $__4.VARIABLE_DECLARATION_LIST;
	  var ScopeVisitor = function ScopeVisitor() {
	    $traceurRuntime.superConstructor($ScopeVisitor).call(this);
	    this.map_ = new Map();
	    this.scope = null;
	    this.withBlockCounter_ = 0;
	  };
	  var $ScopeVisitor = ScopeVisitor;
	  ($traceurRuntime.createClass)(ScopeVisitor, {
	    getScopeForTree: function(tree) {
	      return this.map_.get(tree);
	    },
	    createScope: function(tree) {
	      return new Scope(this.scope, tree);
	    },
	    pushScope: function(tree) {
	      var scope = this.createScope(tree);
	      this.map_.set(tree, scope);
	      return this.scope = scope;
	    },
	    popScope: function(scope) {
	      if (this.scope !== scope) {
	        throw new Error('ScopeVisitor scope mismatch');
	      }
	      this.scope = scope.parent;
	    },
	    visitScript: function(tree) {
	      var scope = this.pushScope(tree);
	      $traceurRuntime.superGet(this, $ScopeVisitor.prototype, "visitScript").call(this, tree);
	      this.popScope(scope);
	    },
	    visitModule: function(tree) {
	      var scope = this.pushScope(tree);
	      $traceurRuntime.superGet(this, $ScopeVisitor.prototype, "visitModule").call(this, tree);
	      this.popScope(scope);
	    },
	    visitBlock: function(tree) {
	      var scope = this.pushScope(tree);
	      $traceurRuntime.superGet(this, $ScopeVisitor.prototype, "visitBlock").call(this, tree);
	      this.popScope(scope);
	    },
	    visitCatch: function(tree) {
	      var scope = this.pushScope(tree);
	      this.visitAny(tree.binding);
	      this.visitList(tree.catchBody.statements);
	      this.popScope(scope);
	    },
	    visitFunctionBodyForScope: function(tree) {
	      var parameterList = arguments[1] !== (void 0) ? arguments[1] : tree.parameterList;
	      var scope = this.pushScope(tree);
	      this.visitAny(parameterList);
	      scope.inGenerator = tree.functionKind && tree.isGenerator();
	      this.visitAny(tree.body);
	      this.popScope(scope);
	    },
	    visitFunctionExpression: function(tree) {
	      this.visitFunctionBodyForScope(tree);
	    },
	    visitFunctionDeclaration: function(tree) {
	      this.visitAny(tree.name);
	      this.visitFunctionBodyForScope(tree);
	    },
	    visitArrowFunctionExpression: function(tree) {
	      this.visitFunctionBodyForScope(tree);
	    },
	    visitGetAccessor: function(tree) {
	      this.visitFunctionBodyForScope(tree, null);
	    },
	    visitSetAccessor: function(tree) {
	      this.visitFunctionBodyForScope(tree);
	    },
	    visitPropertyMethodAssignment: function(tree) {
	      this.visitFunctionBodyForScope(tree);
	    },
	    visitClassDeclaration: function(tree) {
	      this.visitAny(tree.superClass);
	      var scope = this.pushScope(tree);
	      this.visitAny(tree.name);
	      this.visitList(tree.elements);
	      this.popScope(scope);
	    },
	    visitClassExpression: function(tree) {
	      this.visitAny(tree.superClass);
	      var scope;
	      if (tree.name) {
	        scope = this.pushScope(tree);
	        this.visitAny(tree.name);
	      }
	      this.visitList(tree.elements);
	      if (tree.name) {
	        this.popScope(scope);
	      }
	    },
	    visitWithStatement: function(tree) {
	      this.visitAny(tree.expression);
	      this.withBlockCounter_++;
	      this.visitAny(tree.body);
	      this.withBlockCounter_--;
	    },
	    get inWithBlock() {
	      return this.withBlockCounter_ > 0;
	    },
	    visitLoop_: function(tree, func) {
	      if (tree.initializer.type !== VARIABLE_DECLARATION_LIST || tree.initializer.declarationType === VAR) {
	        func();
	        return ;
	      }
	      var scope = this.pushScope(tree);
	      func();
	      this.popScope(scope);
	    },
	    visitForInStatement: function(tree) {
	      var $__5 = this;
	      this.visitLoop_(tree, (function() {
	        return $traceurRuntime.superGet($__5, $ScopeVisitor.prototype, "visitForInStatement").call($__5, tree);
	      }));
	    },
	    visitForOfStatement: function(tree) {
	      var $__5 = this;
	      this.visitLoop_(tree, (function() {
	        return $traceurRuntime.superGet($__5, $ScopeVisitor.prototype, "visitForOfStatement").call($__5, tree);
	      }));
	    },
	    visitForStatement: function(tree) {
	      var $__5 = this;
	      if (!tree.initializer) {
	        $traceurRuntime.superGet(this, $ScopeVisitor.prototype, "visitForStatement").call(this, tree);
	      } else {
	        this.visitLoop_(tree, (function() {
	          return $traceurRuntime.superGet($__5, $ScopeVisitor.prototype, "visitForStatement").call($__5, tree);
	        }));
	      }
	    },
	    visitComprehension_: function(tree) {
	      var scopes = [];
	      for (var i = 0; i < tree.comprehensionList.length; i++) {
	        var scope = null;
	        if (tree.comprehensionList[i].type === COMPREHENSION_FOR) {
	          scope = this.pushScope(tree.comprehensionList[i]);
	        }
	        scopes.push(scope);
	        this.visitAny(tree.comprehensionList[i]);
	      }
	      this.visitAny(tree.expression);
	      for (var i$__6 = scopes.length - 1; i$__6 >= 0; i$__6--) {
	        if (scopes[i$__6]) {
	          this.popScope(scopes[i$__6]);
	        }
	      }
	    },
	    visitArrayComprehension: function(tree) {
	      this.visitComprehension_(tree);
	    },
	    visitGeneratorComprehension: function(tree) {
	      this.visitComprehension_(tree);
	    },
	    visitPredefinedType: function(tree) {},
	    visitTypeArguments: function(tree) {},
	    visitFunctionType: function(tree) {}
	  }, {}, ParseTreeVisitor);
	  return {get ScopeVisitor() {
	      return ScopeVisitor;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/semantics/ScopeChainBuilder.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/semantics/ScopeChainBuilder.js";
	  var $__0 = System.get("traceur@0.0.87/src/syntax/TokenType.js"),
	      CONST = $__0.CONST,
	      LET = $__0.LET,
	      VAR = $__0.VAR;
	  var ScopeVisitor = System.get("traceur@0.0.87/src/semantics/ScopeVisitor.js").ScopeVisitor;
	  var ScopeChainBuilder = function ScopeChainBuilder(reporter) {
	    $traceurRuntime.superConstructor($ScopeChainBuilder).call(this);
	    this.reporter = reporter;
	    this.declarationType_ = null;
	  };
	  var $ScopeChainBuilder = ScopeChainBuilder;
	  ($traceurRuntime.createClass)(ScopeChainBuilder, {
	    visitCatch: function(tree) {
	      var scope = this.pushScope(tree);
	      this.declarationType_ = LET;
	      this.visitAny(tree.binding);
	      this.visitList(tree.catchBody.statements);
	      this.popScope(scope);
	    },
	    visitImportedBinding: function(tree) {
	      this.declarationType_ = CONST;
	      $traceurRuntime.superGet(this, $ScopeChainBuilder.prototype, "visitImportedBinding").call(this, tree);
	    },
	    visitVariableDeclarationList: function(tree) {
	      this.declarationType_ = tree.declarationType;
	      $traceurRuntime.superGet(this, $ScopeChainBuilder.prototype, "visitVariableDeclarationList").call(this, tree);
	    },
	    visitBindingIdentifier: function(tree) {
	      this.declareVariable(tree);
	    },
	    visitFunctionExpression: function(tree) {
	      var scope = this.pushScope(tree);
	      if (tree.name) {
	        this.declarationType_ = CONST;
	        this.visitAny(tree.name);
	      }
	      this.visitAny(tree.parameterList);
	      scope.inGenerator = tree.isGenerator();
	      this.visitAny(tree.body);
	      this.popScope(scope);
	    },
	    visitFormalParameter: function(tree) {
	      this.declarationType_ = VAR;
	      $traceurRuntime.superGet(this, $ScopeChainBuilder.prototype, "visitFormalParameter").call(this, tree);
	    },
	    visitFunctionDeclaration: function(tree) {
	      if (this.scope) {
	        if (this.scope.isVarScope) {
	          this.declarationType_ = VAR;
	          this.visitAny(tree.name);
	        } else {
	          if (!this.scope.strictMode) {
	            var varScope = this.scope.getVarScope();
	            if (varScope) {
	              varScope.addVar(tree.name, this.reporter);
	            }
	          }
	          this.declarationType_ = LET;
	          this.visitAny(tree.name);
	        }
	      }
	      this.visitFunctionBodyForScope(tree, tree.parameterList, tree.body);
	    },
	    visitClassDeclaration: function(tree) {
	      this.visitAny(tree.superClass);
	      this.declarationType_ = LET;
	      this.visitAny(tree.name);
	      var scope = this.pushScope(tree);
	      this.declarationType_ = CONST;
	      this.visitAny(tree.name);
	      this.visitList(tree.elements);
	      this.popScope(scope);
	    },
	    visitClassExpression: function(tree) {
	      this.visitAny(tree.superClass);
	      var scope;
	      if (tree.name) {
	        scope = this.pushScope(tree);
	        this.declarationType_ = CONST;
	        this.visitAny(tree.name);
	      }
	      this.visitList(tree.elements);
	      if (tree.name) {
	        this.popScope(scope);
	      }
	    },
	    visitComprehensionFor: function(tree) {
	      this.declarationType_ = LET;
	      $traceurRuntime.superGet(this, $ScopeChainBuilder.prototype, "visitComprehensionFor").call(this, tree);
	    },
	    declareVariable: function(tree) {
	      this.scope.addBinding(tree, this.declarationType_, this.reporter);
	    }
	  }, {}, ScopeVisitor);
	  return {get ScopeChainBuilder() {
	      return ScopeChainBuilder;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/semantics/ConstChecker.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/semantics/ConstChecker.js";
	  var IDENTIFIER_EXPRESSION = System.get("traceur@0.0.87/src/syntax/trees/ParseTreeType.js").IDENTIFIER_EXPRESSION;
	  var $__1 = System.get("traceur@0.0.87/src/syntax/TokenType.js"),
	      CONST = $__1.CONST,
	      MINUS_MINUS = $__1.MINUS_MINUS,
	      PLUS_PLUS = $__1.PLUS_PLUS;
	  var ScopeVisitor = System.get("traceur@0.0.87/src/semantics/ScopeVisitor.js").ScopeVisitor;
	  var ScopeChainBuilder = System.get("traceur@0.0.87/src/semantics/ScopeChainBuilder.js").ScopeChainBuilder;
	  var ConstChecker = function ConstChecker(scopeBuilder, reporter) {
	    $traceurRuntime.superConstructor($ConstChecker).call(this);
	    this.scopeBuilder_ = scopeBuilder;
	    this.reporter_ = reporter;
	  };
	  var $ConstChecker = ConstChecker;
	  ($traceurRuntime.createClass)(ConstChecker, {
	    pushScope: function(tree) {
	      return this.scope = this.scopeBuilder_.getScopeForTree(tree);
	    },
	    visitUnaryExpression: function(tree) {
	      if (tree.operand.type === IDENTIFIER_EXPRESSION && (tree.operator.type === PLUS_PLUS || tree.operator.type === MINUS_MINUS)) {
	        this.validateMutation_(tree.operand);
	      }
	      $traceurRuntime.superGet(this, $ConstChecker.prototype, "visitUnaryExpression").call(this, tree);
	    },
	    visitPostfixExpression: function(tree) {
	      if (tree.operand.type === IDENTIFIER_EXPRESSION) {
	        this.validateMutation_(tree.operand);
	      }
	      $traceurRuntime.superGet(this, $ConstChecker.prototype, "visitPostfixExpression").call(this, tree);
	    },
	    visitBinaryExpression: function(tree) {
	      if (tree.left.type === IDENTIFIER_EXPRESSION && tree.operator.isAssignmentOperator()) {
	        this.validateMutation_(tree.left);
	      }
	      $traceurRuntime.superGet(this, $ConstChecker.prototype, "visitBinaryExpression").call(this, tree);
	    },
	    validateMutation_: function(identifierExpression) {
	      if (this.inWithBlock) {
	        return ;
	      }
	      var binding = this.scope.getBinding(identifierExpression);
	      if (binding === null) {
	        return ;
	      }
	      var $__5 = binding,
	          type = $__5.type,
	          tree = $__5.tree;
	      if (type === CONST) {
	        this.reportError_(identifierExpression.location, (tree.getStringValue() + " is read-only"));
	      }
	    },
	    reportError_: function(location, message) {
	      this.reporter_.reportError(location.start, message);
	    }
	  }, {}, ScopeVisitor);
	  function validate(tree, reporter) {
	    var builder = new ScopeChainBuilder(reporter);
	    builder.visitAny(tree);
	    var checker = new ConstChecker(builder, reporter);
	    checker.visitAny(tree);
	  }
	  return {
	    get ConstChecker() {
	      return ConstChecker;
	    },
	    get validate() {
	      return validate;
	    }
	  };
	});
	System.registerModule("traceur@0.0.87/src/semantics/ScopeReferences.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/semantics/ScopeReferences.js";
	  var Scope = System.get("traceur@0.0.87/src/semantics/Scope.js").Scope;
	  var StringSet = System.get("traceur@0.0.87/src/util/StringSet.js").StringSet;
	  var ScopeReferences = function ScopeReferences(parent, tree) {
	    $traceurRuntime.superConstructor($ScopeReferences).call(this, parent, tree);
	    this.freeVars_ = new StringSet();
	  };
	  var $ScopeReferences = ScopeReferences;
	  ($traceurRuntime.createClass)(ScopeReferences, {
	    addReference: function(name) {
	      this.freeVars_.add(name);
	    },
	    hasFreeVariable: function(name) {
	      return this.freeVars_.has(name);
	    }
	  }, {}, Scope);
	  return {get ScopeReferences() {
	      return ScopeReferences;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/semantics/ScopeChainBuilderWithReferences.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/semantics/ScopeChainBuilderWithReferences.js";
	  var ScopeChainBuilder = System.get("traceur@0.0.87/src/semantics/ScopeChainBuilder.js").ScopeChainBuilder;
	  var ScopeReferences = System.get("traceur@0.0.87/src/semantics/ScopeReferences.js").ScopeReferences;
	  var $__2 = System.get("traceur@0.0.87/src/syntax/trees/ParseTreeType.js"),
	      FUNCTION_DECLARATION = $__2.FUNCTION_DECLARATION,
	      FUNCTION_EXPRESSION = $__2.FUNCTION_EXPRESSION,
	      GET_ACCESSOR = $__2.GET_ACCESSOR,
	      IDENTIFIER_EXPRESSION = $__2.IDENTIFIER_EXPRESSION,
	      MODULE = $__2.MODULE,
	      PROPERTY_METHOD_ASSIGNMENT = $__2.PROPERTY_METHOD_ASSIGNMENT,
	      SET_ACCESSOR = $__2.SET_ACCESSOR;
	  var TYPEOF = System.get("traceur@0.0.87/src/syntax/TokenType.js").TYPEOF;
	  function hasArgumentsInScope(scope) {
	    for (; scope; scope = scope.parent) {
	      switch (scope.tree.type) {
	        case FUNCTION_DECLARATION:
	        case FUNCTION_EXPRESSION:
	        case GET_ACCESSOR:
	        case PROPERTY_METHOD_ASSIGNMENT:
	        case SET_ACCESSOR:
	          return true;
	      }
	    }
	    return false;
	  }
	  function inModuleScope(scope) {
	    for (; scope; scope = scope.parent) {
	      if (scope.tree.type === MODULE) {
	        return true;
	      }
	    }
	    return false;
	  }
	  var ScopeChainBuilderWithReferences = function ScopeChainBuilderWithReferences() {
	    $traceurRuntime.superConstructor($ScopeChainBuilderWithReferences).apply(this, arguments);
	    ;
	  };
	  var $ScopeChainBuilderWithReferences = ScopeChainBuilderWithReferences;
	  ($traceurRuntime.createClass)(ScopeChainBuilderWithReferences, {
	    createScope: function(tree) {
	      return new ScopeReferences(this.scope, tree);
	    },
	    visitIdentifierExpression: function(tree) {
	      if (this.inWithBlock) {
	        return ;
	      }
	      var scope = this.scope;
	      var name = tree.getStringValue();
	      if (name === 'arguments' && hasArgumentsInScope(scope)) {
	        return ;
	      }
	      if (name === '__moduleName' && inModuleScope(scope)) {
	        return ;
	      }
	      this.referenceFound(tree, name);
	    },
	    visitUnaryExpression: function(tree) {
	      if (tree.operator.type === TYPEOF && tree.operand.type === IDENTIFIER_EXPRESSION) {
	        var scope = this.scope;
	        var binding = scope.getBinding(tree.operand);
	        if (!binding) {
	          scope.addVar(tree.operand, this.reporter);
	        }
	      } else {
	        $traceurRuntime.superGet(this, $ScopeChainBuilderWithReferences.prototype, "visitUnaryExpression").call(this, tree);
	      }
	    },
	    referenceFound: function(tree, name) {
	      this.scope.addReference(name);
	    }
	  }, {}, ScopeChainBuilder);
	  return {get ScopeChainBuilderWithReferences() {
	      return ScopeChainBuilderWithReferences;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/semantics/FreeVariableChecker.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/semantics/FreeVariableChecker.js";
	  var ScopeChainBuilderWithReferences = System.get("traceur@0.0.87/src/semantics/ScopeChainBuilderWithReferences.js").ScopeChainBuilderWithReferences;
	  var FreeVariableChecker = function FreeVariableChecker(reporter, global) {
	    $traceurRuntime.superConstructor($FreeVariableChecker).call(this, reporter);
	    this.global_ = global;
	  };
	  var $FreeVariableChecker = FreeVariableChecker;
	  ($traceurRuntime.createClass)(FreeVariableChecker, {referenceFound: function(tree, name) {
	      if (this.scope.getBinding(tree))
	        return ;
	      if (!(name in this.global_)) {
	        this.reporter.reportError(tree.location.start, (name + " is not defined"));
	      }
	    }}, {}, ScopeChainBuilderWithReferences);
	  function validate(tree, reporter) {
	    var global = arguments[2] !== (void 0) ? arguments[2] : Reflect.global;
	    var checker = new FreeVariableChecker(reporter, global);
	    checker.visitAny(tree);
	  }
	  return {get validate() {
	      return validate;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/util/JSON.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/util/JSON.js";
	  function transform(v) {
	    var replacer = arguments[1] !== (void 0) ? arguments[1] : (function(k, v) {
	      return v;
	    });
	    return transform_(replacer('', v), replacer);
	  }
	  function transform_(v, replacer) {
	    var rv,
	        tv;
	    if (Array.isArray(v)) {
	      var len = v.length;
	      rv = Array(len);
	      for (var i = 0; i < len; i++) {
	        tv = transform_(replacer(String(i), v[i]), replacer);
	        rv[i] = tv === undefined ? null : tv;
	      }
	      return rv;
	    }
	    if (v instanceof Object) {
	      rv = {};
	      Object.keys(v).forEach((function(k) {
	        tv = transform_(replacer(k, v[k]), replacer);
	        if (tv !== undefined) {
	          rv[k] = tv;
	        }
	      }));
	      return rv;
	    }
	    return v;
	  }
	  return {get transform() {
	      return transform;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/syntax/Token.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/syntax/Token.js";
	  var $__0 = System.get("traceur@0.0.87/src/syntax/TokenType.js"),
	      AMPERSAND_EQUAL = $__0.AMPERSAND_EQUAL,
	      BAR_EQUAL = $__0.BAR_EQUAL,
	      CARET_EQUAL = $__0.CARET_EQUAL,
	      EQUAL = $__0.EQUAL,
	      LEFT_SHIFT_EQUAL = $__0.LEFT_SHIFT_EQUAL,
	      MINUS_EQUAL = $__0.MINUS_EQUAL,
	      PERCENT_EQUAL = $__0.PERCENT_EQUAL,
	      PLUS_EQUAL = $__0.PLUS_EQUAL,
	      RIGHT_SHIFT_EQUAL = $__0.RIGHT_SHIFT_EQUAL,
	      SLASH_EQUAL = $__0.SLASH_EQUAL,
	      STAR_EQUAL = $__0.STAR_EQUAL,
	      STAR_STAR_EQUAL = $__0.STAR_STAR_EQUAL,
	      UNSIGNED_RIGHT_SHIFT_EQUAL = $__0.UNSIGNED_RIGHT_SHIFT_EQUAL;
	  var Token = function Token(type, location) {
	    this.type = type;
	    this.location = location;
	  };
	  ($traceurRuntime.createClass)(Token, {
	    toString: function() {
	      return this.type;
	    },
	    isAssignmentOperator: function() {
	      return isAssignmentOperator(this.type);
	    },
	    isKeyword: function() {
	      return false;
	    },
	    isStrictKeyword: function() {
	      return false;
	    }
	  }, {});
	  function isAssignmentOperator(type) {
	    switch (type) {
	      case AMPERSAND_EQUAL:
	      case BAR_EQUAL:
	      case CARET_EQUAL:
	      case EQUAL:
	      case LEFT_SHIFT_EQUAL:
	      case MINUS_EQUAL:
	      case PERCENT_EQUAL:
	      case PLUS_EQUAL:
	      case RIGHT_SHIFT_EQUAL:
	      case SLASH_EQUAL:
	      case STAR_EQUAL:
	      case STAR_STAR_EQUAL:
	      case UNSIGNED_RIGHT_SHIFT_EQUAL:
	        return true;
	    }
	    return false;
	  }
	  return {
	    get Token() {
	      return Token;
	    },
	    get isAssignmentOperator() {
	      return isAssignmentOperator;
	    }
	  };
	});
	System.registerModule("traceur@0.0.87/src/syntax/trees/ParseTree.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/syntax/trees/ParseTree.js";
	  var ParseTreeType = System.get("traceur@0.0.87/src/syntax/trees/ParseTreeType.js");
	  var $__0 = System.get("traceur@0.0.87/src/syntax/TokenType.js"),
	      IDENTIFIER = $__0.IDENTIFIER,
	      STAR = $__0.STAR,
	      STRING = $__0.STRING,
	      VAR = $__0.VAR;
	  var Token = System.get("traceur@0.0.87/src/syntax/Token.js").Token;
	  var utilJSON = System.get("traceur@0.0.87/src/util/JSON.js");
	  var $__2 = System.get("traceur@0.0.87/src/syntax/PredefinedName.js"),
	      ASYNC = $__2.ASYNC,
	      ASYNC_STAR = $__2.ASYNC_STAR;
	  var $__3 = System.get("traceur@0.0.87/src/syntax/trees/ParseTreeType.js"),
	      ARRAY_COMPREHENSION = $__3.ARRAY_COMPREHENSION,
	      ARRAY_LITERAL_EXPRESSION = $__3.ARRAY_LITERAL_EXPRESSION,
	      ARRAY_PATTERN = $__3.ARRAY_PATTERN,
	      ARROW_FUNCTION_EXPRESSION = $__3.ARROW_FUNCTION_EXPRESSION,
	      AWAIT_EXPRESSION = $__3.AWAIT_EXPRESSION,
	      BINARY_EXPRESSION = $__3.BINARY_EXPRESSION,
	      BINDING_IDENTIFIER = $__3.BINDING_IDENTIFIER,
	      BLOCK = $__3.BLOCK,
	      BREAK_STATEMENT = $__3.BREAK_STATEMENT,
	      CALL_EXPRESSION = $__3.CALL_EXPRESSION,
	      CLASS_DECLARATION = $__3.CLASS_DECLARATION,
	      CLASS_EXPRESSION = $__3.CLASS_EXPRESSION,
	      COMMA_EXPRESSION = $__3.COMMA_EXPRESSION,
	      CONDITIONAL_EXPRESSION = $__3.CONDITIONAL_EXPRESSION,
	      CONTINUE_STATEMENT = $__3.CONTINUE_STATEMENT,
	      DEBUGGER_STATEMENT = $__3.DEBUGGER_STATEMENT,
	      DO_WHILE_STATEMENT = $__3.DO_WHILE_STATEMENT,
	      EMPTY_STATEMENT = $__3.EMPTY_STATEMENT,
	      EXPORT_DECLARATION = $__3.EXPORT_DECLARATION,
	      EXPRESSION_STATEMENT = $__3.EXPRESSION_STATEMENT,
	      FORMAL_PARAMETER = $__3.FORMAL_PARAMETER,
	      FOR_IN_STATEMENT = $__3.FOR_IN_STATEMENT,
	      FOR_OF_STATEMENT = $__3.FOR_OF_STATEMENT,
	      FOR_ON_STATEMENT = $__3.FOR_ON_STATEMENT,
	      FOR_STATEMENT = $__3.FOR_STATEMENT,
	      FUNCTION_DECLARATION = $__3.FUNCTION_DECLARATION,
	      FUNCTION_EXPRESSION = $__3.FUNCTION_EXPRESSION,
	      GENERATOR_COMPREHENSION = $__3.GENERATOR_COMPREHENSION,
	      IDENTIFIER_EXPRESSION = $__3.IDENTIFIER_EXPRESSION,
	      IF_STATEMENT = $__3.IF_STATEMENT,
	      IMPORTED_BINDING = $__3.IMPORTED_BINDING,
	      IMPORT_DECLARATION = $__3.IMPORT_DECLARATION,
	      INTERFACE_DECLARATION = $__3.INTERFACE_DECLARATION,
	      LABELLED_STATEMENT = $__3.LABELLED_STATEMENT,
	      LITERAL_EXPRESSION = $__3.LITERAL_EXPRESSION,
	      LITERAL_PROPERTY_NAME = $__3.LITERAL_PROPERTY_NAME,
	      MEMBER_EXPRESSION = $__3.MEMBER_EXPRESSION,
	      MEMBER_LOOKUP_EXPRESSION = $__3.MEMBER_LOOKUP_EXPRESSION,
	      MODULE_DECLARATION = $__3.MODULE_DECLARATION,
	      NEW_EXPRESSION = $__3.NEW_EXPRESSION,
	      OBJECT_LITERAL_EXPRESSION = $__3.OBJECT_LITERAL_EXPRESSION,
	      OBJECT_PATTERN = $__3.OBJECT_PATTERN,
	      PAREN_EXPRESSION = $__3.PAREN_EXPRESSION,
	      POSTFIX_EXPRESSION = $__3.POSTFIX_EXPRESSION,
	      PREDEFINED_TYPE = $__3.PREDEFINED_TYPE,
	      PROPERTY_NAME_SHORTHAND = $__3.PROPERTY_NAME_SHORTHAND,
	      REST_PARAMETER = $__3.REST_PARAMETER,
	      RETURN_STATEMENT = $__3.RETURN_STATEMENT,
	      SPREAD_EXPRESSION = $__3.SPREAD_EXPRESSION,
	      SPREAD_PATTERN_ELEMENT = $__3.SPREAD_PATTERN_ELEMENT,
	      SUPER_EXPRESSION = $__3.SUPER_EXPRESSION,
	      SWITCH_STATEMENT = $__3.SWITCH_STATEMENT,
	      TEMPLATE_LITERAL_EXPRESSION = $__3.TEMPLATE_LITERAL_EXPRESSION,
	      THIS_EXPRESSION = $__3.THIS_EXPRESSION,
	      THROW_STATEMENT = $__3.THROW_STATEMENT,
	      TRY_STATEMENT = $__3.TRY_STATEMENT,
	      TYPE_REFERENCE = $__3.TYPE_REFERENCE,
	      UNARY_EXPRESSION = $__3.UNARY_EXPRESSION,
	      VARIABLE_DECLARATION = $__3.VARIABLE_DECLARATION,
	      VARIABLE_STATEMENT = $__3.VARIABLE_STATEMENT,
	      WHILE_STATEMENT = $__3.WHILE_STATEMENT,
	      WITH_STATEMENT = $__3.WITH_STATEMENT,
	      YIELD_EXPRESSION = $__3.YIELD_EXPRESSION;
	  ;
	  var ParseTree = function ParseTree(location) {
	    this.location = location;
	  };
	  var $ParseTree = ParseTree;
	  ($traceurRuntime.createClass)(ParseTree, {
	    isPattern: function() {
	      switch (this.type) {
	        case ARRAY_PATTERN:
	        case OBJECT_PATTERN:
	          return true;
	        default:
	          return false;
	      }
	    },
	    isLeftHandSideExpression: function() {
	      switch (this.type) {
	        case THIS_EXPRESSION:
	        case CLASS_EXPRESSION:
	        case SUPER_EXPRESSION:
	        case IDENTIFIER_EXPRESSION:
	        case LITERAL_EXPRESSION:
	        case ARRAY_LITERAL_EXPRESSION:
	        case OBJECT_LITERAL_EXPRESSION:
	        case NEW_EXPRESSION:
	        case MEMBER_EXPRESSION:
	        case MEMBER_LOOKUP_EXPRESSION:
	        case CALL_EXPRESSION:
	        case FUNCTION_EXPRESSION:
	        case TEMPLATE_LITERAL_EXPRESSION:
	          return true;
	        case PAREN_EXPRESSION:
	          return this.expression.isLeftHandSideExpression();
	        default:
	          return false;
	      }
	    },
	    isAssignmentExpression: function() {
	      switch (this.type) {
	        case ARRAY_COMPREHENSION:
	        case ARRAY_LITERAL_EXPRESSION:
	        case ARROW_FUNCTION_EXPRESSION:
	        case AWAIT_EXPRESSION:
	        case BINARY_EXPRESSION:
	        case CALL_EXPRESSION:
	        case CLASS_EXPRESSION:
	        case CONDITIONAL_EXPRESSION:
	        case FUNCTION_EXPRESSION:
	        case GENERATOR_COMPREHENSION:
	        case IDENTIFIER_EXPRESSION:
	        case LITERAL_EXPRESSION:
	        case MEMBER_EXPRESSION:
	        case MEMBER_LOOKUP_EXPRESSION:
	        case NEW_EXPRESSION:
	        case OBJECT_LITERAL_EXPRESSION:
	        case PAREN_EXPRESSION:
	        case POSTFIX_EXPRESSION:
	        case TEMPLATE_LITERAL_EXPRESSION:
	        case SUPER_EXPRESSION:
	        case THIS_EXPRESSION:
	        case UNARY_EXPRESSION:
	        case YIELD_EXPRESSION:
	          return true;
	        default:
	          return false;
	      }
	    },
	    isMemberExpression: function() {
	      switch (this.type) {
	        case THIS_EXPRESSION:
	        case CLASS_EXPRESSION:
	        case SUPER_EXPRESSION:
	        case IDENTIFIER_EXPRESSION:
	        case LITERAL_EXPRESSION:
	        case ARRAY_LITERAL_EXPRESSION:
	        case OBJECT_LITERAL_EXPRESSION:
	        case PAREN_EXPRESSION:
	        case TEMPLATE_LITERAL_EXPRESSION:
	        case FUNCTION_EXPRESSION:
	        case MEMBER_LOOKUP_EXPRESSION:
	        case MEMBER_EXPRESSION:
	        case CALL_EXPRESSION:
	          return true;
	        case NEW_EXPRESSION:
	          return this.args !== null;
	      }
	      return false;
	    },
	    isExpression: function() {
	      return this.isAssignmentExpression() || this.type === COMMA_EXPRESSION;
	    },
	    isAssignmentOrSpread: function() {
	      return this.isAssignmentExpression() || this.type === SPREAD_EXPRESSION;
	    },
	    isRestParameter: function() {
	      return this.type === REST_PARAMETER || (this.type === FORMAL_PARAMETER && this.parameter.isRestParameter());
	    },
	    isSpreadPatternElement: function() {
	      return this.type === SPREAD_PATTERN_ELEMENT;
	    },
	    isStatementListItem: function() {
	      return this.isStatement() || this.isDeclaration();
	    },
	    isStatement: function() {
	      switch (this.type) {
	        case BLOCK:
	        case VARIABLE_STATEMENT:
	        case EMPTY_STATEMENT:
	        case EXPRESSION_STATEMENT:
	        case IF_STATEMENT:
	        case CONTINUE_STATEMENT:
	        case BREAK_STATEMENT:
	        case RETURN_STATEMENT:
	        case WITH_STATEMENT:
	        case LABELLED_STATEMENT:
	        case THROW_STATEMENT:
	        case TRY_STATEMENT:
	        case DEBUGGER_STATEMENT:
	          return true;
	      }
	      return this.isBreakableStatement();
	    },
	    isDeclaration: function() {
	      switch (this.type) {
	        case FUNCTION_DECLARATION:
	        case CLASS_DECLARATION:
	          return true;
	      }
	      return this.isLexicalDeclaration();
	    },
	    isLexicalDeclaration: function() {
	      switch (this.type) {
	        case VARIABLE_STATEMENT:
	          return this.declarations.declarationType !== VAR;
	      }
	      return false;
	    },
	    isBreakableStatement: function() {
	      switch (this.type) {
	        case SWITCH_STATEMENT:
	          return true;
	      }
	      return this.isIterationStatement();
	    },
	    isIterationStatement: function() {
	      switch (this.type) {
	        case DO_WHILE_STATEMENT:
	        case FOR_IN_STATEMENT:
	        case FOR_OF_STATEMENT:
	        case FOR_ON_STATEMENT:
	        case FOR_STATEMENT:
	        case WHILE_STATEMENT:
	          return true;
	      }
	      return false;
	    },
	    isScriptElement: function() {
	      switch (this.type) {
	        case CLASS_DECLARATION:
	        case EXPORT_DECLARATION:
	        case FUNCTION_DECLARATION:
	        case IMPORT_DECLARATION:
	        case INTERFACE_DECLARATION:
	        case MODULE_DECLARATION:
	        case VARIABLE_DECLARATION:
	          return true;
	      }
	      return this.isStatement();
	    },
	    isGenerator: function() {
	      return this.functionKind !== null && this.functionKind.type === STAR;
	    },
	    isAsyncFunction: function() {
	      return this.functionKind !== null && this.functionKind.type === IDENTIFIER && this.functionKind.value === ASYNC;
	    },
	    isAsyncGenerator: function() {
	      return this.functionKind !== null && this.functionKind.type === IDENTIFIER && this.functionKind.value === ASYNC_STAR;
	    },
	    isType: function() {
	      switch (this.type) {
	        case PREDEFINED_TYPE:
	        case TYPE_REFERENCE:
	          return true;
	      }
	      return false;
	    },
	    getDirectivePrologueStringToken_: function() {
	      var tree = this;
	      if (tree.type !== EXPRESSION_STATEMENT || !(tree = tree.expression))
	        return null;
	      if (tree.type !== LITERAL_EXPRESSION || !(tree = tree.literalToken))
	        return null;
	      if (tree.type !== STRING)
	        return null;
	      return tree;
	    },
	    isDirectivePrologue: function() {
	      return this.getDirectivePrologueStringToken_() !== null;
	    },
	    isUseStrictDirective: function() {
	      var token = this.getDirectivePrologueStringToken_();
	      if (!token)
	        return false;
	      var v = token.value;
	      return v === '"use strict"' || v === "'use strict'";
	    },
	    toJSON: function() {
	      return utilJSON.transform(this, $ParseTree.replacer);
	    },
	    stringify: function() {
	      var indent = arguments[0] !== (void 0) ? arguments[0] : 2;
	      return JSON.stringify(this, $ParseTree.replacer, indent);
	    },
	    getStringValue: function() {
	      switch (this.type) {
	        case IDENTIFIER_EXPRESSION:
	        case BINDING_IDENTIFIER:
	          return this.identifierToken.toString();
	        case IMPORTED_BINDING:
	          return this.binding.getStringValue();
	        case PROPERTY_NAME_SHORTHAND:
	          return this.name.toString();
	        case LITERAL_PROPERTY_NAME:
	          return this.literalToken.toString();
	      }
	      throw new Error('Not yet implemented');
	    }
	  }, {
	    stripLocation: function(key, value) {
	      if (key === 'location') {
	        return undefined;
	      }
	      return value;
	    },
	    replacer: function(k, v) {
	      if (v instanceof $ParseTree || v instanceof Token) {
	        var rv = {type: v.type};
	        Object.keys(v).forEach(function(name) {
	          if (name !== 'location')
	            rv[name] = v[name];
	        });
	        return rv;
	      }
	      return v;
	    }
	  });
	  return {
	    get ParseTreeType() {
	      return ParseTreeType;
	    },
	    get ParseTree() {
	      return ParseTree;
	    }
	  };
	});
	System.registerModule("traceur@0.0.87/src/syntax/trees/ParseTrees.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/syntax/trees/ParseTrees.js";
	  var ParseTree = System.get("traceur@0.0.87/src/syntax/trees/ParseTree.js").ParseTree;
	  var ParseTreeType = System.get("traceur@0.0.87/src/syntax/trees/ParseTreeType.js");
	  var ANNOTATION = ParseTreeType.ANNOTATION;
	  var Annotation = function Annotation(location, name, args) {
	    $traceurRuntime.superConstructor($Annotation).call(this, location);
	    this.name = name;
	    this.args = args;
	  };
	  var $Annotation = Annotation;
	  ($traceurRuntime.createClass)(Annotation, {
	    transform: function(transformer) {
	      return transformer.transformAnnotation(this);
	    },
	    visit: function(visitor) {
	      visitor.visitAnnotation(this);
	    },
	    get type() {
	      return ANNOTATION;
	    }
	  }, {}, ParseTree);
	  var ANON_BLOCK = ParseTreeType.ANON_BLOCK;
	  var AnonBlock = function AnonBlock(location, statements) {
	    $traceurRuntime.superConstructor($AnonBlock).call(this, location);
	    this.statements = statements;
	  };
	  var $AnonBlock = AnonBlock;
	  ($traceurRuntime.createClass)(AnonBlock, {
	    transform: function(transformer) {
	      return transformer.transformAnonBlock(this);
	    },
	    visit: function(visitor) {
	      visitor.visitAnonBlock(this);
	    },
	    get type() {
	      return ANON_BLOCK;
	    }
	  }, {}, ParseTree);
	  var ARGUMENT_LIST = ParseTreeType.ARGUMENT_LIST;
	  var ArgumentList = function ArgumentList(location, args) {
	    $traceurRuntime.superConstructor($ArgumentList).call(this, location);
	    this.args = args;
	  };
	  var $ArgumentList = ArgumentList;
	  ($traceurRuntime.createClass)(ArgumentList, {
	    transform: function(transformer) {
	      return transformer.transformArgumentList(this);
	    },
	    visit: function(visitor) {
	      visitor.visitArgumentList(this);
	    },
	    get type() {
	      return ARGUMENT_LIST;
	    }
	  }, {}, ParseTree);
	  var ARRAY_COMPREHENSION = ParseTreeType.ARRAY_COMPREHENSION;
	  var ArrayComprehension = function ArrayComprehension(location, comprehensionList, expression) {
	    $traceurRuntime.superConstructor($ArrayComprehension).call(this, location);
	    this.comprehensionList = comprehensionList;
	    this.expression = expression;
	  };
	  var $ArrayComprehension = ArrayComprehension;
	  ($traceurRuntime.createClass)(ArrayComprehension, {
	    transform: function(transformer) {
	      return transformer.transformArrayComprehension(this);
	    },
	    visit: function(visitor) {
	      visitor.visitArrayComprehension(this);
	    },
	    get type() {
	      return ARRAY_COMPREHENSION;
	    }
	  }, {}, ParseTree);
	  var ARRAY_LITERAL_EXPRESSION = ParseTreeType.ARRAY_LITERAL_EXPRESSION;
	  var ArrayLiteralExpression = function ArrayLiteralExpression(location, elements) {
	    $traceurRuntime.superConstructor($ArrayLiteralExpression).call(this, location);
	    this.elements = elements;
	  };
	  var $ArrayLiteralExpression = ArrayLiteralExpression;
	  ($traceurRuntime.createClass)(ArrayLiteralExpression, {
	    transform: function(transformer) {
	      return transformer.transformArrayLiteralExpression(this);
	    },
	    visit: function(visitor) {
	      visitor.visitArrayLiteralExpression(this);
	    },
	    get type() {
	      return ARRAY_LITERAL_EXPRESSION;
	    }
	  }, {}, ParseTree);
	  var ARRAY_PATTERN = ParseTreeType.ARRAY_PATTERN;
	  var ArrayPattern = function ArrayPattern(location, elements) {
	    $traceurRuntime.superConstructor($ArrayPattern).call(this, location);
	    this.elements = elements;
	  };
	  var $ArrayPattern = ArrayPattern;
	  ($traceurRuntime.createClass)(ArrayPattern, {
	    transform: function(transformer) {
	      return transformer.transformArrayPattern(this);
	    },
	    visit: function(visitor) {
	      visitor.visitArrayPattern(this);
	    },
	    get type() {
	      return ARRAY_PATTERN;
	    }
	  }, {}, ParseTree);
	  var ARRAY_TYPE = ParseTreeType.ARRAY_TYPE;
	  var ArrayType = function ArrayType(location, elementType) {
	    $traceurRuntime.superConstructor($ArrayType).call(this, location);
	    this.elementType = elementType;
	  };
	  var $ArrayType = ArrayType;
	  ($traceurRuntime.createClass)(ArrayType, {
	    transform: function(transformer) {
	      return transformer.transformArrayType(this);
	    },
	    visit: function(visitor) {
	      visitor.visitArrayType(this);
	    },
	    get type() {
	      return ARRAY_TYPE;
	    }
	  }, {}, ParseTree);
	  var ARROW_FUNCTION_EXPRESSION = ParseTreeType.ARROW_FUNCTION_EXPRESSION;
	  var ArrowFunctionExpression = function ArrowFunctionExpression(location, functionKind, parameterList, body) {
	    $traceurRuntime.superConstructor($ArrowFunctionExpression).call(this, location);
	    this.functionKind = functionKind;
	    this.parameterList = parameterList;
	    this.body = body;
	  };
	  var $ArrowFunctionExpression = ArrowFunctionExpression;
	  ($traceurRuntime.createClass)(ArrowFunctionExpression, {
	    transform: function(transformer) {
	      return transformer.transformArrowFunctionExpression(this);
	    },
	    visit: function(visitor) {
	      visitor.visitArrowFunctionExpression(this);
	    },
	    get type() {
	      return ARROW_FUNCTION_EXPRESSION;
	    }
	  }, {}, ParseTree);
	  var ASSIGNMENT_ELEMENT = ParseTreeType.ASSIGNMENT_ELEMENT;
	  var AssignmentElement = function AssignmentElement(location, assignment, initializer) {
	    $traceurRuntime.superConstructor($AssignmentElement).call(this, location);
	    this.assignment = assignment;
	    this.initializer = initializer;
	  };
	  var $AssignmentElement = AssignmentElement;
	  ($traceurRuntime.createClass)(AssignmentElement, {
	    transform: function(transformer) {
	      return transformer.transformAssignmentElement(this);
	    },
	    visit: function(visitor) {
	      visitor.visitAssignmentElement(this);
	    },
	    get type() {
	      return ASSIGNMENT_ELEMENT;
	    }
	  }, {}, ParseTree);
	  var AWAIT_EXPRESSION = ParseTreeType.AWAIT_EXPRESSION;
	  var AwaitExpression = function AwaitExpression(location, expression) {
	    $traceurRuntime.superConstructor($AwaitExpression).call(this, location);
	    this.expression = expression;
	  };
	  var $AwaitExpression = AwaitExpression;
	  ($traceurRuntime.createClass)(AwaitExpression, {
	    transform: function(transformer) {
	      return transformer.transformAwaitExpression(this);
	    },
	    visit: function(visitor) {
	      visitor.visitAwaitExpression(this);
	    },
	    get type() {
	      return AWAIT_EXPRESSION;
	    }
	  }, {}, ParseTree);
	  var BINARY_EXPRESSION = ParseTreeType.BINARY_EXPRESSION;
	  var BinaryExpression = function BinaryExpression(location, left, operator, right) {
	    $traceurRuntime.superConstructor($BinaryExpression).call(this, location);
	    this.left = left;
	    this.operator = operator;
	    this.right = right;
	  };
	  var $BinaryExpression = BinaryExpression;
	  ($traceurRuntime.createClass)(BinaryExpression, {
	    transform: function(transformer) {
	      return transformer.transformBinaryExpression(this);
	    },
	    visit: function(visitor) {
	      visitor.visitBinaryExpression(this);
	    },
	    get type() {
	      return BINARY_EXPRESSION;
	    }
	  }, {}, ParseTree);
	  var BINDING_ELEMENT = ParseTreeType.BINDING_ELEMENT;
	  var BindingElement = function BindingElement(location, binding, initializer) {
	    $traceurRuntime.superConstructor($BindingElement).call(this, location);
	    this.binding = binding;
	    this.initializer = initializer;
	  };
	  var $BindingElement = BindingElement;
	  ($traceurRuntime.createClass)(BindingElement, {
	    transform: function(transformer) {
	      return transformer.transformBindingElement(this);
	    },
	    visit: function(visitor) {
	      visitor.visitBindingElement(this);
	    },
	    get type() {
	      return BINDING_ELEMENT;
	    }
	  }, {}, ParseTree);
	  var BINDING_IDENTIFIER = ParseTreeType.BINDING_IDENTIFIER;
	  var BindingIdentifier = function BindingIdentifier(location, identifierToken) {
	    $traceurRuntime.superConstructor($BindingIdentifier).call(this, location);
	    this.identifierToken = identifierToken;
	  };
	  var $BindingIdentifier = BindingIdentifier;
	  ($traceurRuntime.createClass)(BindingIdentifier, {
	    transform: function(transformer) {
	      return transformer.transformBindingIdentifier(this);
	    },
	    visit: function(visitor) {
	      visitor.visitBindingIdentifier(this);
	    },
	    get type() {
	      return BINDING_IDENTIFIER;
	    }
	  }, {}, ParseTree);
	  var BLOCK = ParseTreeType.BLOCK;
	  var Block = function Block(location, statements) {
	    $traceurRuntime.superConstructor($Block).call(this, location);
	    this.statements = statements;
	  };
	  var $Block = Block;
	  ($traceurRuntime.createClass)(Block, {
	    transform: function(transformer) {
	      return transformer.transformBlock(this);
	    },
	    visit: function(visitor) {
	      visitor.visitBlock(this);
	    },
	    get type() {
	      return BLOCK;
	    }
	  }, {}, ParseTree);
	  var BREAK_STATEMENT = ParseTreeType.BREAK_STATEMENT;
	  var BreakStatement = function BreakStatement(location, name) {
	    $traceurRuntime.superConstructor($BreakStatement).call(this, location);
	    this.name = name;
	  };
	  var $BreakStatement = BreakStatement;
	  ($traceurRuntime.createClass)(BreakStatement, {
	    transform: function(transformer) {
	      return transformer.transformBreakStatement(this);
	    },
	    visit: function(visitor) {
	      visitor.visitBreakStatement(this);
	    },
	    get type() {
	      return BREAK_STATEMENT;
	    }
	  }, {}, ParseTree);
	  var CALL_EXPRESSION = ParseTreeType.CALL_EXPRESSION;
	  var CallExpression = function CallExpression(location, operand, args) {
	    $traceurRuntime.superConstructor($CallExpression).call(this, location);
	    this.operand = operand;
	    this.args = args;
	  };
	  var $CallExpression = CallExpression;
	  ($traceurRuntime.createClass)(CallExpression, {
	    transform: function(transformer) {
	      return transformer.transformCallExpression(this);
	    },
	    visit: function(visitor) {
	      visitor.visitCallExpression(this);
	    },
	    get type() {
	      return CALL_EXPRESSION;
	    }
	  }, {}, ParseTree);
	  var CALL_SIGNATURE = ParseTreeType.CALL_SIGNATURE;
	  var CallSignature = function CallSignature(location, typeParameters, parameterList, returnType) {
	    $traceurRuntime.superConstructor($CallSignature).call(this, location);
	    this.typeParameters = typeParameters;
	    this.parameterList = parameterList;
	    this.returnType = returnType;
	  };
	  var $CallSignature = CallSignature;
	  ($traceurRuntime.createClass)(CallSignature, {
	    transform: function(transformer) {
	      return transformer.transformCallSignature(this);
	    },
	    visit: function(visitor) {
	      visitor.visitCallSignature(this);
	    },
	    get type() {
	      return CALL_SIGNATURE;
	    }
	  }, {}, ParseTree);
	  var CASE_CLAUSE = ParseTreeType.CASE_CLAUSE;
	  var CaseClause = function CaseClause(location, expression, statements) {
	    $traceurRuntime.superConstructor($CaseClause).call(this, location);
	    this.expression = expression;
	    this.statements = statements;
	  };
	  var $CaseClause = CaseClause;
	  ($traceurRuntime.createClass)(CaseClause, {
	    transform: function(transformer) {
	      return transformer.transformCaseClause(this);
	    },
	    visit: function(visitor) {
	      visitor.visitCaseClause(this);
	    },
	    get type() {
	      return CASE_CLAUSE;
	    }
	  }, {}, ParseTree);
	  var CATCH = ParseTreeType.CATCH;
	  var Catch = function Catch(location, binding, catchBody) {
	    $traceurRuntime.superConstructor($Catch).call(this, location);
	    this.binding = binding;
	    this.catchBody = catchBody;
	  };
	  var $Catch = Catch;
	  ($traceurRuntime.createClass)(Catch, {
	    transform: function(transformer) {
	      return transformer.transformCatch(this);
	    },
	    visit: function(visitor) {
	      visitor.visitCatch(this);
	    },
	    get type() {
	      return CATCH;
	    }
	  }, {}, ParseTree);
	  var CLASS_DECLARATION = ParseTreeType.CLASS_DECLARATION;
	  var ClassDeclaration = function ClassDeclaration(location, name, superClass, elements, annotations, typeParameters) {
	    $traceurRuntime.superConstructor($ClassDeclaration).call(this, location);
	    this.name = name;
	    this.superClass = superClass;
	    this.elements = elements;
	    this.annotations = annotations;
	    this.typeParameters = typeParameters;
	  };
	  var $ClassDeclaration = ClassDeclaration;
	  ($traceurRuntime.createClass)(ClassDeclaration, {
	    transform: function(transformer) {
	      return transformer.transformClassDeclaration(this);
	    },
	    visit: function(visitor) {
	      visitor.visitClassDeclaration(this);
	    },
	    get type() {
	      return CLASS_DECLARATION;
	    }
	  }, {}, ParseTree);
	  var CLASS_EXPRESSION = ParseTreeType.CLASS_EXPRESSION;
	  var ClassExpression = function ClassExpression(location, name, superClass, elements, annotations, typeParameters) {
	    $traceurRuntime.superConstructor($ClassExpression).call(this, location);
	    this.name = name;
	    this.superClass = superClass;
	    this.elements = elements;
	    this.annotations = annotations;
	    this.typeParameters = typeParameters;
	  };
	  var $ClassExpression = ClassExpression;
	  ($traceurRuntime.createClass)(ClassExpression, {
	    transform: function(transformer) {
	      return transformer.transformClassExpression(this);
	    },
	    visit: function(visitor) {
	      visitor.visitClassExpression(this);
	    },
	    get type() {
	      return CLASS_EXPRESSION;
	    }
	  }, {}, ParseTree);
	  var COMMA_EXPRESSION = ParseTreeType.COMMA_EXPRESSION;
	  var CommaExpression = function CommaExpression(location, expressions) {
	    $traceurRuntime.superConstructor($CommaExpression).call(this, location);
	    this.expressions = expressions;
	  };
	  var $CommaExpression = CommaExpression;
	  ($traceurRuntime.createClass)(CommaExpression, {
	    transform: function(transformer) {
	      return transformer.transformCommaExpression(this);
	    },
	    visit: function(visitor) {
	      visitor.visitCommaExpression(this);
	    },
	    get type() {
	      return COMMA_EXPRESSION;
	    }
	  }, {}, ParseTree);
	  var COMPREHENSION_FOR = ParseTreeType.COMPREHENSION_FOR;
	  var ComprehensionFor = function ComprehensionFor(location, left, iterator) {
	    $traceurRuntime.superConstructor($ComprehensionFor).call(this, location);
	    this.left = left;
	    this.iterator = iterator;
	  };
	  var $ComprehensionFor = ComprehensionFor;
	  ($traceurRuntime.createClass)(ComprehensionFor, {
	    transform: function(transformer) {
	      return transformer.transformComprehensionFor(this);
	    },
	    visit: function(visitor) {
	      visitor.visitComprehensionFor(this);
	    },
	    get type() {
	      return COMPREHENSION_FOR;
	    }
	  }, {}, ParseTree);
	  var COMPREHENSION_IF = ParseTreeType.COMPREHENSION_IF;
	  var ComprehensionIf = function ComprehensionIf(location, expression) {
	    $traceurRuntime.superConstructor($ComprehensionIf).call(this, location);
	    this.expression = expression;
	  };
	  var $ComprehensionIf = ComprehensionIf;
	  ($traceurRuntime.createClass)(ComprehensionIf, {
	    transform: function(transformer) {
	      return transformer.transformComprehensionIf(this);
	    },
	    visit: function(visitor) {
	      visitor.visitComprehensionIf(this);
	    },
	    get type() {
	      return COMPREHENSION_IF;
	    }
	  }, {}, ParseTree);
	  var COMPUTED_PROPERTY_NAME = ParseTreeType.COMPUTED_PROPERTY_NAME;
	  var ComputedPropertyName = function ComputedPropertyName(location, expression) {
	    $traceurRuntime.superConstructor($ComputedPropertyName).call(this, location);
	    this.expression = expression;
	  };
	  var $ComputedPropertyName = ComputedPropertyName;
	  ($traceurRuntime.createClass)(ComputedPropertyName, {
	    transform: function(transformer) {
	      return transformer.transformComputedPropertyName(this);
	    },
	    visit: function(visitor) {
	      visitor.visitComputedPropertyName(this);
	    },
	    get type() {
	      return COMPUTED_PROPERTY_NAME;
	    }
	  }, {}, ParseTree);
	  var CONDITIONAL_EXPRESSION = ParseTreeType.CONDITIONAL_EXPRESSION;
	  var ConditionalExpression = function ConditionalExpression(location, condition, left, right) {
	    $traceurRuntime.superConstructor($ConditionalExpression).call(this, location);
	    this.condition = condition;
	    this.left = left;
	    this.right = right;
	  };
	  var $ConditionalExpression = ConditionalExpression;
	  ($traceurRuntime.createClass)(ConditionalExpression, {
	    transform: function(transformer) {
	      return transformer.transformConditionalExpression(this);
	    },
	    visit: function(visitor) {
	      visitor.visitConditionalExpression(this);
	    },
	    get type() {
	      return CONDITIONAL_EXPRESSION;
	    }
	  }, {}, ParseTree);
	  var CONSTRUCT_SIGNATURE = ParseTreeType.CONSTRUCT_SIGNATURE;
	  var ConstructSignature = function ConstructSignature(location, typeParameters, parameterList, returnType) {
	    $traceurRuntime.superConstructor($ConstructSignature).call(this, location);
	    this.typeParameters = typeParameters;
	    this.parameterList = parameterList;
	    this.returnType = returnType;
	  };
	  var $ConstructSignature = ConstructSignature;
	  ($traceurRuntime.createClass)(ConstructSignature, {
	    transform: function(transformer) {
	      return transformer.transformConstructSignature(this);
	    },
	    visit: function(visitor) {
	      visitor.visitConstructSignature(this);
	    },
	    get type() {
	      return CONSTRUCT_SIGNATURE;
	    }
	  }, {}, ParseTree);
	  var CONSTRUCTOR_TYPE = ParseTreeType.CONSTRUCTOR_TYPE;
	  var ConstructorType = function ConstructorType(location, typeParameters, parameterList, returnType) {
	    $traceurRuntime.superConstructor($ConstructorType).call(this, location);
	    this.typeParameters = typeParameters;
	    this.parameterList = parameterList;
	    this.returnType = returnType;
	  };
	  var $ConstructorType = ConstructorType;
	  ($traceurRuntime.createClass)(ConstructorType, {
	    transform: function(transformer) {
	      return transformer.transformConstructorType(this);
	    },
	    visit: function(visitor) {
	      visitor.visitConstructorType(this);
	    },
	    get type() {
	      return CONSTRUCTOR_TYPE;
	    }
	  }, {}, ParseTree);
	  var CONTINUE_STATEMENT = ParseTreeType.CONTINUE_STATEMENT;
	  var ContinueStatement = function ContinueStatement(location, name) {
	    $traceurRuntime.superConstructor($ContinueStatement).call(this, location);
	    this.name = name;
	  };
	  var $ContinueStatement = ContinueStatement;
	  ($traceurRuntime.createClass)(ContinueStatement, {
	    transform: function(transformer) {
	      return transformer.transformContinueStatement(this);
	    },
	    visit: function(visitor) {
	      visitor.visitContinueStatement(this);
	    },
	    get type() {
	      return CONTINUE_STATEMENT;
	    }
	  }, {}, ParseTree);
	  var COVER_FORMALS = ParseTreeType.COVER_FORMALS;
	  var CoverFormals = function CoverFormals(location, expressions) {
	    $traceurRuntime.superConstructor($CoverFormals).call(this, location);
	    this.expressions = expressions;
	  };
	  var $CoverFormals = CoverFormals;
	  ($traceurRuntime.createClass)(CoverFormals, {
	    transform: function(transformer) {
	      return transformer.transformCoverFormals(this);
	    },
	    visit: function(visitor) {
	      visitor.visitCoverFormals(this);
	    },
	    get type() {
	      return COVER_FORMALS;
	    }
	  }, {}, ParseTree);
	  var COVER_INITIALIZED_NAME = ParseTreeType.COVER_INITIALIZED_NAME;
	  var CoverInitializedName = function CoverInitializedName(location, name, equalToken, initializer) {
	    $traceurRuntime.superConstructor($CoverInitializedName).call(this, location);
	    this.name = name;
	    this.equalToken = equalToken;
	    this.initializer = initializer;
	  };
	  var $CoverInitializedName = CoverInitializedName;
	  ($traceurRuntime.createClass)(CoverInitializedName, {
	    transform: function(transformer) {
	      return transformer.transformCoverInitializedName(this);
	    },
	    visit: function(visitor) {
	      visitor.visitCoverInitializedName(this);
	    },
	    get type() {
	      return COVER_INITIALIZED_NAME;
	    }
	  }, {}, ParseTree);
	  var DEBUGGER_STATEMENT = ParseTreeType.DEBUGGER_STATEMENT;
	  var DebuggerStatement = function DebuggerStatement(location) {
	    $traceurRuntime.superConstructor($DebuggerStatement).call(this, location);
	  };
	  var $DebuggerStatement = DebuggerStatement;
	  ($traceurRuntime.createClass)(DebuggerStatement, {
	    transform: function(transformer) {
	      return transformer.transformDebuggerStatement(this);
	    },
	    visit: function(visitor) {
	      visitor.visitDebuggerStatement(this);
	    },
	    get type() {
	      return DEBUGGER_STATEMENT;
	    }
	  }, {}, ParseTree);
	  var DEFAULT_CLAUSE = ParseTreeType.DEFAULT_CLAUSE;
	  var DefaultClause = function DefaultClause(location, statements) {
	    $traceurRuntime.superConstructor($DefaultClause).call(this, location);
	    this.statements = statements;
	  };
	  var $DefaultClause = DefaultClause;
	  ($traceurRuntime.createClass)(DefaultClause, {
	    transform: function(transformer) {
	      return transformer.transformDefaultClause(this);
	    },
	    visit: function(visitor) {
	      visitor.visitDefaultClause(this);
	    },
	    get type() {
	      return DEFAULT_CLAUSE;
	    }
	  }, {}, ParseTree);
	  var DO_WHILE_STATEMENT = ParseTreeType.DO_WHILE_STATEMENT;
	  var DoWhileStatement = function DoWhileStatement(location, body, condition) {
	    $traceurRuntime.superConstructor($DoWhileStatement).call(this, location);
	    this.body = body;
	    this.condition = condition;
	  };
	  var $DoWhileStatement = DoWhileStatement;
	  ($traceurRuntime.createClass)(DoWhileStatement, {
	    transform: function(transformer) {
	      return transformer.transformDoWhileStatement(this);
	    },
	    visit: function(visitor) {
	      visitor.visitDoWhileStatement(this);
	    },
	    get type() {
	      return DO_WHILE_STATEMENT;
	    }
	  }, {}, ParseTree);
	  var EMPTY_STATEMENT = ParseTreeType.EMPTY_STATEMENT;
	  var EmptyStatement = function EmptyStatement(location) {
	    $traceurRuntime.superConstructor($EmptyStatement).call(this, location);
	  };
	  var $EmptyStatement = EmptyStatement;
	  ($traceurRuntime.createClass)(EmptyStatement, {
	    transform: function(transformer) {
	      return transformer.transformEmptyStatement(this);
	    },
	    visit: function(visitor) {
	      visitor.visitEmptyStatement(this);
	    },
	    get type() {
	      return EMPTY_STATEMENT;
	    }
	  }, {}, ParseTree);
	  var EXPORT_DECLARATION = ParseTreeType.EXPORT_DECLARATION;
	  var ExportDeclaration = function ExportDeclaration(location, declaration, annotations) {
	    $traceurRuntime.superConstructor($ExportDeclaration).call(this, location);
	    this.declaration = declaration;
	    this.annotations = annotations;
	  };
	  var $ExportDeclaration = ExportDeclaration;
	  ($traceurRuntime.createClass)(ExportDeclaration, {
	    transform: function(transformer) {
	      return transformer.transformExportDeclaration(this);
	    },
	    visit: function(visitor) {
	      visitor.visitExportDeclaration(this);
	    },
	    get type() {
	      return EXPORT_DECLARATION;
	    }
	  }, {}, ParseTree);
	  var EXPORT_DEFAULT = ParseTreeType.EXPORT_DEFAULT;
	  var ExportDefault = function ExportDefault(location, expression) {
	    $traceurRuntime.superConstructor($ExportDefault).call(this, location);
	    this.expression = expression;
	  };
	  var $ExportDefault = ExportDefault;
	  ($traceurRuntime.createClass)(ExportDefault, {
	    transform: function(transformer) {
	      return transformer.transformExportDefault(this);
	    },
	    visit: function(visitor) {
	      visitor.visitExportDefault(this);
	    },
	    get type() {
	      return EXPORT_DEFAULT;
	    }
	  }, {}, ParseTree);
	  var EXPORT_SPECIFIER = ParseTreeType.EXPORT_SPECIFIER;
	  var ExportSpecifier = function ExportSpecifier(location, lhs, rhs) {
	    $traceurRuntime.superConstructor($ExportSpecifier).call(this, location);
	    this.lhs = lhs;
	    this.rhs = rhs;
	  };
	  var $ExportSpecifier = ExportSpecifier;
	  ($traceurRuntime.createClass)(ExportSpecifier, {
	    transform: function(transformer) {
	      return transformer.transformExportSpecifier(this);
	    },
	    visit: function(visitor) {
	      visitor.visitExportSpecifier(this);
	    },
	    get type() {
	      return EXPORT_SPECIFIER;
	    }
	  }, {}, ParseTree);
	  var EXPORT_SPECIFIER_SET = ParseTreeType.EXPORT_SPECIFIER_SET;
	  var ExportSpecifierSet = function ExportSpecifierSet(location, specifiers) {
	    $traceurRuntime.superConstructor($ExportSpecifierSet).call(this, location);
	    this.specifiers = specifiers;
	  };
	  var $ExportSpecifierSet = ExportSpecifierSet;
	  ($traceurRuntime.createClass)(ExportSpecifierSet, {
	    transform: function(transformer) {
	      return transformer.transformExportSpecifierSet(this);
	    },
	    visit: function(visitor) {
	      visitor.visitExportSpecifierSet(this);
	    },
	    get type() {
	      return EXPORT_SPECIFIER_SET;
	    }
	  }, {}, ParseTree);
	  var EXPORT_STAR = ParseTreeType.EXPORT_STAR;
	  var ExportStar = function ExportStar(location) {
	    $traceurRuntime.superConstructor($ExportStar).call(this, location);
	  };
	  var $ExportStar = ExportStar;
	  ($traceurRuntime.createClass)(ExportStar, {
	    transform: function(transformer) {
	      return transformer.transformExportStar(this);
	    },
	    visit: function(visitor) {
	      visitor.visitExportStar(this);
	    },
	    get type() {
	      return EXPORT_STAR;
	    }
	  }, {}, ParseTree);
	  var EXPRESSION_STATEMENT = ParseTreeType.EXPRESSION_STATEMENT;
	  var ExpressionStatement = function ExpressionStatement(location, expression) {
	    $traceurRuntime.superConstructor($ExpressionStatement).call(this, location);
	    this.expression = expression;
	  };
	  var $ExpressionStatement = ExpressionStatement;
	  ($traceurRuntime.createClass)(ExpressionStatement, {
	    transform: function(transformer) {
	      return transformer.transformExpressionStatement(this);
	    },
	    visit: function(visitor) {
	      visitor.visitExpressionStatement(this);
	    },
	    get type() {
	      return EXPRESSION_STATEMENT;
	    }
	  }, {}, ParseTree);
	  var FINALLY = ParseTreeType.FINALLY;
	  var Finally = function Finally(location, block) {
	    $traceurRuntime.superConstructor($Finally).call(this, location);
	    this.block = block;
	  };
	  var $Finally = Finally;
	  ($traceurRuntime.createClass)(Finally, {
	    transform: function(transformer) {
	      return transformer.transformFinally(this);
	    },
	    visit: function(visitor) {
	      visitor.visitFinally(this);
	    },
	    get type() {
	      return FINALLY;
	    }
	  }, {}, ParseTree);
	  var FOR_IN_STATEMENT = ParseTreeType.FOR_IN_STATEMENT;
	  var ForInStatement = function ForInStatement(location, initializer, collection, body) {
	    $traceurRuntime.superConstructor($ForInStatement).call(this, location);
	    this.initializer = initializer;
	    this.collection = collection;
	    this.body = body;
	  };
	  var $ForInStatement = ForInStatement;
	  ($traceurRuntime.createClass)(ForInStatement, {
	    transform: function(transformer) {
	      return transformer.transformForInStatement(this);
	    },
	    visit: function(visitor) {
	      visitor.visitForInStatement(this);
	    },
	    get type() {
	      return FOR_IN_STATEMENT;
	    }
	  }, {}, ParseTree);
	  var FOR_OF_STATEMENT = ParseTreeType.FOR_OF_STATEMENT;
	  var ForOfStatement = function ForOfStatement(location, initializer, collection, body) {
	    $traceurRuntime.superConstructor($ForOfStatement).call(this, location);
	    this.initializer = initializer;
	    this.collection = collection;
	    this.body = body;
	  };
	  var $ForOfStatement = ForOfStatement;
	  ($traceurRuntime.createClass)(ForOfStatement, {
	    transform: function(transformer) {
	      return transformer.transformForOfStatement(this);
	    },
	    visit: function(visitor) {
	      visitor.visitForOfStatement(this);
	    },
	    get type() {
	      return FOR_OF_STATEMENT;
	    }
	  }, {}, ParseTree);
	  var FOR_ON_STATEMENT = ParseTreeType.FOR_ON_STATEMENT;
	  var ForOnStatement = function ForOnStatement(location, initializer, observable, body) {
	    $traceurRuntime.superConstructor($ForOnStatement).call(this, location);
	    this.initializer = initializer;
	    this.observable = observable;
	    this.body = body;
	  };
	  var $ForOnStatement = ForOnStatement;
	  ($traceurRuntime.createClass)(ForOnStatement, {
	    transform: function(transformer) {
	      return transformer.transformForOnStatement(this);
	    },
	    visit: function(visitor) {
	      visitor.visitForOnStatement(this);
	    },
	    get type() {
	      return FOR_ON_STATEMENT;
	    }
	  }, {}, ParseTree);
	  var FOR_STATEMENT = ParseTreeType.FOR_STATEMENT;
	  var ForStatement = function ForStatement(location, initializer, condition, increment, body) {
	    $traceurRuntime.superConstructor($ForStatement).call(this, location);
	    this.initializer = initializer;
	    this.condition = condition;
	    this.increment = increment;
	    this.body = body;
	  };
	  var $ForStatement = ForStatement;
	  ($traceurRuntime.createClass)(ForStatement, {
	    transform: function(transformer) {
	      return transformer.transformForStatement(this);
	    },
	    visit: function(visitor) {
	      visitor.visitForStatement(this);
	    },
	    get type() {
	      return FOR_STATEMENT;
	    }
	  }, {}, ParseTree);
	  var FORMAL_PARAMETER = ParseTreeType.FORMAL_PARAMETER;
	  var FormalParameter = function FormalParameter(location, parameter, typeAnnotation, annotations) {
	    $traceurRuntime.superConstructor($FormalParameter).call(this, location);
	    this.parameter = parameter;
	    this.typeAnnotation = typeAnnotation;
	    this.annotations = annotations;
	  };
	  var $FormalParameter = FormalParameter;
	  ($traceurRuntime.createClass)(FormalParameter, {
	    transform: function(transformer) {
	      return transformer.transformFormalParameter(this);
	    },
	    visit: function(visitor) {
	      visitor.visitFormalParameter(this);
	    },
	    get type() {
	      return FORMAL_PARAMETER;
	    }
	  }, {}, ParseTree);
	  var FORMAL_PARAMETER_LIST = ParseTreeType.FORMAL_PARAMETER_LIST;
	  var FormalParameterList = function FormalParameterList(location, parameters) {
	    $traceurRuntime.superConstructor($FormalParameterList).call(this, location);
	    this.parameters = parameters;
	  };
	  var $FormalParameterList = FormalParameterList;
	  ($traceurRuntime.createClass)(FormalParameterList, {
	    transform: function(transformer) {
	      return transformer.transformFormalParameterList(this);
	    },
	    visit: function(visitor) {
	      visitor.visitFormalParameterList(this);
	    },
	    get type() {
	      return FORMAL_PARAMETER_LIST;
	    }
	  }, {}, ParseTree);
	  var FUNCTION_BODY = ParseTreeType.FUNCTION_BODY;
	  var FunctionBody = function FunctionBody(location, statements) {
	    $traceurRuntime.superConstructor($FunctionBody).call(this, location);
	    this.statements = statements;
	  };
	  var $FunctionBody = FunctionBody;
	  ($traceurRuntime.createClass)(FunctionBody, {
	    transform: function(transformer) {
	      return transformer.transformFunctionBody(this);
	    },
	    visit: function(visitor) {
	      visitor.visitFunctionBody(this);
	    },
	    get type() {
	      return FUNCTION_BODY;
	    }
	  }, {}, ParseTree);
	  var FUNCTION_DECLARATION = ParseTreeType.FUNCTION_DECLARATION;
	  var FunctionDeclaration = function FunctionDeclaration(location, name, functionKind, parameterList, typeAnnotation, annotations, body) {
	    $traceurRuntime.superConstructor($FunctionDeclaration).call(this, location);
	    this.name = name;
	    this.functionKind = functionKind;
	    this.parameterList = parameterList;
	    this.typeAnnotation = typeAnnotation;
	    this.annotations = annotations;
	    this.body = body;
	  };
	  var $FunctionDeclaration = FunctionDeclaration;
	  ($traceurRuntime.createClass)(FunctionDeclaration, {
	    transform: function(transformer) {
	      return transformer.transformFunctionDeclaration(this);
	    },
	    visit: function(visitor) {
	      visitor.visitFunctionDeclaration(this);
	    },
	    get type() {
	      return FUNCTION_DECLARATION;
	    }
	  }, {}, ParseTree);
	  var FUNCTION_EXPRESSION = ParseTreeType.FUNCTION_EXPRESSION;
	  var FunctionExpression = function FunctionExpression(location, name, functionKind, parameterList, typeAnnotation, annotations, body) {
	    $traceurRuntime.superConstructor($FunctionExpression).call(this, location);
	    this.name = name;
	    this.functionKind = functionKind;
	    this.parameterList = parameterList;
	    this.typeAnnotation = typeAnnotation;
	    this.annotations = annotations;
	    this.body = body;
	  };
	  var $FunctionExpression = FunctionExpression;
	  ($traceurRuntime.createClass)(FunctionExpression, {
	    transform: function(transformer) {
	      return transformer.transformFunctionExpression(this);
	    },
	    visit: function(visitor) {
	      visitor.visitFunctionExpression(this);
	    },
	    get type() {
	      return FUNCTION_EXPRESSION;
	    }
	  }, {}, ParseTree);
	  var FUNCTION_TYPE = ParseTreeType.FUNCTION_TYPE;
	  var FunctionType = function FunctionType(location, typeParameters, parameterList, returnType) {
	    $traceurRuntime.superConstructor($FunctionType).call(this, location);
	    this.typeParameters = typeParameters;
	    this.parameterList = parameterList;
	    this.returnType = returnType;
	  };
	  var $FunctionType = FunctionType;
	  ($traceurRuntime.createClass)(FunctionType, {
	    transform: function(transformer) {
	      return transformer.transformFunctionType(this);
	    },
	    visit: function(visitor) {
	      visitor.visitFunctionType(this);
	    },
	    get type() {
	      return FUNCTION_TYPE;
	    }
	  }, {}, ParseTree);
	  var GENERATOR_COMPREHENSION = ParseTreeType.GENERATOR_COMPREHENSION;
	  var GeneratorComprehension = function GeneratorComprehension(location, comprehensionList, expression) {
	    $traceurRuntime.superConstructor($GeneratorComprehension).call(this, location);
	    this.comprehensionList = comprehensionList;
	    this.expression = expression;
	  };
	  var $GeneratorComprehension = GeneratorComprehension;
	  ($traceurRuntime.createClass)(GeneratorComprehension, {
	    transform: function(transformer) {
	      return transformer.transformGeneratorComprehension(this);
	    },
	    visit: function(visitor) {
	      visitor.visitGeneratorComprehension(this);
	    },
	    get type() {
	      return GENERATOR_COMPREHENSION;
	    }
	  }, {}, ParseTree);
	  var GET_ACCESSOR = ParseTreeType.GET_ACCESSOR;
	  var GetAccessor = function GetAccessor(location, isStatic, name, typeAnnotation, annotations, body) {
	    $traceurRuntime.superConstructor($GetAccessor).call(this, location);
	    this.isStatic = isStatic;
	    this.name = name;
	    this.typeAnnotation = typeAnnotation;
	    this.annotations = annotations;
	    this.body = body;
	  };
	  var $GetAccessor = GetAccessor;
	  ($traceurRuntime.createClass)(GetAccessor, {
	    transform: function(transformer) {
	      return transformer.transformGetAccessor(this);
	    },
	    visit: function(visitor) {
	      visitor.visitGetAccessor(this);
	    },
	    get type() {
	      return GET_ACCESSOR;
	    }
	  }, {}, ParseTree);
	  var IDENTIFIER_EXPRESSION = ParseTreeType.IDENTIFIER_EXPRESSION;
	  var IdentifierExpression = function IdentifierExpression(location, identifierToken) {
	    $traceurRuntime.superConstructor($IdentifierExpression).call(this, location);
	    this.identifierToken = identifierToken;
	  };
	  var $IdentifierExpression = IdentifierExpression;
	  ($traceurRuntime.createClass)(IdentifierExpression, {
	    transform: function(transformer) {
	      return transformer.transformIdentifierExpression(this);
	    },
	    visit: function(visitor) {
	      visitor.visitIdentifierExpression(this);
	    },
	    get type() {
	      return IDENTIFIER_EXPRESSION;
	    }
	  }, {}, ParseTree);
	  var IF_STATEMENT = ParseTreeType.IF_STATEMENT;
	  var IfStatement = function IfStatement(location, condition, ifClause, elseClause) {
	    $traceurRuntime.superConstructor($IfStatement).call(this, location);
	    this.condition = condition;
	    this.ifClause = ifClause;
	    this.elseClause = elseClause;
	  };
	  var $IfStatement = IfStatement;
	  ($traceurRuntime.createClass)(IfStatement, {
	    transform: function(transformer) {
	      return transformer.transformIfStatement(this);
	    },
	    visit: function(visitor) {
	      visitor.visitIfStatement(this);
	    },
	    get type() {
	      return IF_STATEMENT;
	    }
	  }, {}, ParseTree);
	  var IMPORTED_BINDING = ParseTreeType.IMPORTED_BINDING;
	  var ImportedBinding = function ImportedBinding(location, binding) {
	    $traceurRuntime.superConstructor($ImportedBinding).call(this, location);
	    this.binding = binding;
	  };
	  var $ImportedBinding = ImportedBinding;
	  ($traceurRuntime.createClass)(ImportedBinding, {
	    transform: function(transformer) {
	      return transformer.transformImportedBinding(this);
	    },
	    visit: function(visitor) {
	      visitor.visitImportedBinding(this);
	    },
	    get type() {
	      return IMPORTED_BINDING;
	    }
	  }, {}, ParseTree);
	  var IMPORT_DECLARATION = ParseTreeType.IMPORT_DECLARATION;
	  var ImportDeclaration = function ImportDeclaration(location, importClause, moduleSpecifier) {
	    $traceurRuntime.superConstructor($ImportDeclaration).call(this, location);
	    this.importClause = importClause;
	    this.moduleSpecifier = moduleSpecifier;
	  };
	  var $ImportDeclaration = ImportDeclaration;
	  ($traceurRuntime.createClass)(ImportDeclaration, {
	    transform: function(transformer) {
	      return transformer.transformImportDeclaration(this);
	    },
	    visit: function(visitor) {
	      visitor.visitImportDeclaration(this);
	    },
	    get type() {
	      return IMPORT_DECLARATION;
	    }
	  }, {}, ParseTree);
	  var IMPORT_SPECIFIER = ParseTreeType.IMPORT_SPECIFIER;
	  var ImportSpecifier = function ImportSpecifier(location, binding, name) {
	    $traceurRuntime.superConstructor($ImportSpecifier).call(this, location);
	    this.binding = binding;
	    this.name = name;
	  };
	  var $ImportSpecifier = ImportSpecifier;
	  ($traceurRuntime.createClass)(ImportSpecifier, {
	    transform: function(transformer) {
	      return transformer.transformImportSpecifier(this);
	    },
	    visit: function(visitor) {
	      visitor.visitImportSpecifier(this);
	    },
	    get type() {
	      return IMPORT_SPECIFIER;
	    }
	  }, {}, ParseTree);
	  var IMPORT_SPECIFIER_SET = ParseTreeType.IMPORT_SPECIFIER_SET;
	  var ImportSpecifierSet = function ImportSpecifierSet(location, specifiers) {
	    $traceurRuntime.superConstructor($ImportSpecifierSet).call(this, location);
	    this.specifiers = specifiers;
	  };
	  var $ImportSpecifierSet = ImportSpecifierSet;
	  ($traceurRuntime.createClass)(ImportSpecifierSet, {
	    transform: function(transformer) {
	      return transformer.transformImportSpecifierSet(this);
	    },
	    visit: function(visitor) {
	      visitor.visitImportSpecifierSet(this);
	    },
	    get type() {
	      return IMPORT_SPECIFIER_SET;
	    }
	  }, {}, ParseTree);
	  var INDEX_SIGNATURE = ParseTreeType.INDEX_SIGNATURE;
	  var IndexSignature = function IndexSignature(location, name, indexType, typeAnnotation) {
	    $traceurRuntime.superConstructor($IndexSignature).call(this, location);
	    this.name = name;
	    this.indexType = indexType;
	    this.typeAnnotation = typeAnnotation;
	  };
	  var $IndexSignature = IndexSignature;
	  ($traceurRuntime.createClass)(IndexSignature, {
	    transform: function(transformer) {
	      return transformer.transformIndexSignature(this);
	    },
	    visit: function(visitor) {
	      visitor.visitIndexSignature(this);
	    },
	    get type() {
	      return INDEX_SIGNATURE;
	    }
	  }, {}, ParseTree);
	  var INTERFACE_DECLARATION = ParseTreeType.INTERFACE_DECLARATION;
	  var InterfaceDeclaration = function InterfaceDeclaration(location, name, typeParameters, extendsClause, objectType) {
	    $traceurRuntime.superConstructor($InterfaceDeclaration).call(this, location);
	    this.name = name;
	    this.typeParameters = typeParameters;
	    this.extendsClause = extendsClause;
	    this.objectType = objectType;
	  };
	  var $InterfaceDeclaration = InterfaceDeclaration;
	  ($traceurRuntime.createClass)(InterfaceDeclaration, {
	    transform: function(transformer) {
	      return transformer.transformInterfaceDeclaration(this);
	    },
	    visit: function(visitor) {
	      visitor.visitInterfaceDeclaration(this);
	    },
	    get type() {
	      return INTERFACE_DECLARATION;
	    }
	  }, {}, ParseTree);
	  var LABELLED_STATEMENT = ParseTreeType.LABELLED_STATEMENT;
	  var LabelledStatement = function LabelledStatement(location, name, statement) {
	    $traceurRuntime.superConstructor($LabelledStatement).call(this, location);
	    this.name = name;
	    this.statement = statement;
	  };
	  var $LabelledStatement = LabelledStatement;
	  ($traceurRuntime.createClass)(LabelledStatement, {
	    transform: function(transformer) {
	      return transformer.transformLabelledStatement(this);
	    },
	    visit: function(visitor) {
	      visitor.visitLabelledStatement(this);
	    },
	    get type() {
	      return LABELLED_STATEMENT;
	    }
	  }, {}, ParseTree);
	  var LITERAL_EXPRESSION = ParseTreeType.LITERAL_EXPRESSION;
	  var LiteralExpression = function LiteralExpression(location, literalToken) {
	    $traceurRuntime.superConstructor($LiteralExpression).call(this, location);
	    this.literalToken = literalToken;
	  };
	  var $LiteralExpression = LiteralExpression;
	  ($traceurRuntime.createClass)(LiteralExpression, {
	    transform: function(transformer) {
	      return transformer.transformLiteralExpression(this);
	    },
	    visit: function(visitor) {
	      visitor.visitLiteralExpression(this);
	    },
	    get type() {
	      return LITERAL_EXPRESSION;
	    }
	  }, {}, ParseTree);
	  var LITERAL_PROPERTY_NAME = ParseTreeType.LITERAL_PROPERTY_NAME;
	  var LiteralPropertyName = function LiteralPropertyName(location, literalToken) {
	    $traceurRuntime.superConstructor($LiteralPropertyName).call(this, location);
	    this.literalToken = literalToken;
	  };
	  var $LiteralPropertyName = LiteralPropertyName;
	  ($traceurRuntime.createClass)(LiteralPropertyName, {
	    transform: function(transformer) {
	      return transformer.transformLiteralPropertyName(this);
	    },
	    visit: function(visitor) {
	      visitor.visitLiteralPropertyName(this);
	    },
	    get type() {
	      return LITERAL_PROPERTY_NAME;
	    }
	  }, {}, ParseTree);
	  var MEMBER_EXPRESSION = ParseTreeType.MEMBER_EXPRESSION;
	  var MemberExpression = function MemberExpression(location, operand, memberName) {
	    $traceurRuntime.superConstructor($MemberExpression).call(this, location);
	    this.operand = operand;
	    this.memberName = memberName;
	  };
	  var $MemberExpression = MemberExpression;
	  ($traceurRuntime.createClass)(MemberExpression, {
	    transform: function(transformer) {
	      return transformer.transformMemberExpression(this);
	    },
	    visit: function(visitor) {
	      visitor.visitMemberExpression(this);
	    },
	    get type() {
	      return MEMBER_EXPRESSION;
	    }
	  }, {}, ParseTree);
	  var MEMBER_LOOKUP_EXPRESSION = ParseTreeType.MEMBER_LOOKUP_EXPRESSION;
	  var MemberLookupExpression = function MemberLookupExpression(location, operand, memberExpression) {
	    $traceurRuntime.superConstructor($MemberLookupExpression).call(this, location);
	    this.operand = operand;
	    this.memberExpression = memberExpression;
	  };
	  var $MemberLookupExpression = MemberLookupExpression;
	  ($traceurRuntime.createClass)(MemberLookupExpression, {
	    transform: function(transformer) {
	      return transformer.transformMemberLookupExpression(this);
	    },
	    visit: function(visitor) {
	      visitor.visitMemberLookupExpression(this);
	    },
	    get type() {
	      return MEMBER_LOOKUP_EXPRESSION;
	    }
	  }, {}, ParseTree);
	  var METHOD_SIGNATURE = ParseTreeType.METHOD_SIGNATURE;
	  var MethodSignature = function MethodSignature(location, name, optional, callSignature) {
	    $traceurRuntime.superConstructor($MethodSignature).call(this, location);
	    this.name = name;
	    this.optional = optional;
	    this.callSignature = callSignature;
	  };
	  var $MethodSignature = MethodSignature;
	  ($traceurRuntime.createClass)(MethodSignature, {
	    transform: function(transformer) {
	      return transformer.transformMethodSignature(this);
	    },
	    visit: function(visitor) {
	      visitor.visitMethodSignature(this);
	    },
	    get type() {
	      return METHOD_SIGNATURE;
	    }
	  }, {}, ParseTree);
	  var MODULE = ParseTreeType.MODULE;
	  var Module = function Module(location, scriptItemList, moduleName) {
	    $traceurRuntime.superConstructor($Module).call(this, location);
	    this.scriptItemList = scriptItemList;
	    this.moduleName = moduleName;
	  };
	  var $Module = Module;
	  ($traceurRuntime.createClass)(Module, {
	    transform: function(transformer) {
	      return transformer.transformModule(this);
	    },
	    visit: function(visitor) {
	      visitor.visitModule(this);
	    },
	    get type() {
	      return MODULE;
	    }
	  }, {}, ParseTree);
	  var MODULE_DECLARATION = ParseTreeType.MODULE_DECLARATION;
	  var ModuleDeclaration = function ModuleDeclaration(location, binding, expression) {
	    $traceurRuntime.superConstructor($ModuleDeclaration).call(this, location);
	    this.binding = binding;
	    this.expression = expression;
	  };
	  var $ModuleDeclaration = ModuleDeclaration;
	  ($traceurRuntime.createClass)(ModuleDeclaration, {
	    transform: function(transformer) {
	      return transformer.transformModuleDeclaration(this);
	    },
	    visit: function(visitor) {
	      visitor.visitModuleDeclaration(this);
	    },
	    get type() {
	      return MODULE_DECLARATION;
	    }
	  }, {}, ParseTree);
	  var MODULE_SPECIFIER = ParseTreeType.MODULE_SPECIFIER;
	  var ModuleSpecifier = function ModuleSpecifier(location, token) {
	    $traceurRuntime.superConstructor($ModuleSpecifier).call(this, location);
	    this.token = token;
	  };
	  var $ModuleSpecifier = ModuleSpecifier;
	  ($traceurRuntime.createClass)(ModuleSpecifier, {
	    transform: function(transformer) {
	      return transformer.transformModuleSpecifier(this);
	    },
	    visit: function(visitor) {
	      visitor.visitModuleSpecifier(this);
	    },
	    get type() {
	      return MODULE_SPECIFIER;
	    }
	  }, {}, ParseTree);
	  var NAMED_EXPORT = ParseTreeType.NAMED_EXPORT;
	  var NamedExport = function NamedExport(location, moduleSpecifier, specifierSet) {
	    $traceurRuntime.superConstructor($NamedExport).call(this, location);
	    this.moduleSpecifier = moduleSpecifier;
	    this.specifierSet = specifierSet;
	  };
	  var $NamedExport = NamedExport;
	  ($traceurRuntime.createClass)(NamedExport, {
	    transform: function(transformer) {
	      return transformer.transformNamedExport(this);
	    },
	    visit: function(visitor) {
	      visitor.visitNamedExport(this);
	    },
	    get type() {
	      return NAMED_EXPORT;
	    }
	  }, {}, ParseTree);
	  var NEW_EXPRESSION = ParseTreeType.NEW_EXPRESSION;
	  var NewExpression = function NewExpression(location, operand, args) {
	    $traceurRuntime.superConstructor($NewExpression).call(this, location);
	    this.operand = operand;
	    this.args = args;
	  };
	  var $NewExpression = NewExpression;
	  ($traceurRuntime.createClass)(NewExpression, {
	    transform: function(transformer) {
	      return transformer.transformNewExpression(this);
	    },
	    visit: function(visitor) {
	      visitor.visitNewExpression(this);
	    },
	    get type() {
	      return NEW_EXPRESSION;
	    }
	  }, {}, ParseTree);
	  var OBJECT_LITERAL_EXPRESSION = ParseTreeType.OBJECT_LITERAL_EXPRESSION;
	  var ObjectLiteralExpression = function ObjectLiteralExpression(location, propertyNameAndValues) {
	    $traceurRuntime.superConstructor($ObjectLiteralExpression).call(this, location);
	    this.propertyNameAndValues = propertyNameAndValues;
	  };
	  var $ObjectLiteralExpression = ObjectLiteralExpression;
	  ($traceurRuntime.createClass)(ObjectLiteralExpression, {
	    transform: function(transformer) {
	      return transformer.transformObjectLiteralExpression(this);
	    },
	    visit: function(visitor) {
	      visitor.visitObjectLiteralExpression(this);
	    },
	    get type() {
	      return OBJECT_LITERAL_EXPRESSION;
	    }
	  }, {}, ParseTree);
	  var OBJECT_PATTERN = ParseTreeType.OBJECT_PATTERN;
	  var ObjectPattern = function ObjectPattern(location, fields) {
	    $traceurRuntime.superConstructor($ObjectPattern).call(this, location);
	    this.fields = fields;
	  };
	  var $ObjectPattern = ObjectPattern;
	  ($traceurRuntime.createClass)(ObjectPattern, {
	    transform: function(transformer) {
	      return transformer.transformObjectPattern(this);
	    },
	    visit: function(visitor) {
	      visitor.visitObjectPattern(this);
	    },
	    get type() {
	      return OBJECT_PATTERN;
	    }
	  }, {}, ParseTree);
	  var OBJECT_PATTERN_FIELD = ParseTreeType.OBJECT_PATTERN_FIELD;
	  var ObjectPatternField = function ObjectPatternField(location, name, element) {
	    $traceurRuntime.superConstructor($ObjectPatternField).call(this, location);
	    this.name = name;
	    this.element = element;
	  };
	  var $ObjectPatternField = ObjectPatternField;
	  ($traceurRuntime.createClass)(ObjectPatternField, {
	    transform: function(transformer) {
	      return transformer.transformObjectPatternField(this);
	    },
	    visit: function(visitor) {
	      visitor.visitObjectPatternField(this);
	    },
	    get type() {
	      return OBJECT_PATTERN_FIELD;
	    }
	  }, {}, ParseTree);
	  var OBJECT_TYPE = ParseTreeType.OBJECT_TYPE;
	  var ObjectType = function ObjectType(location, typeMembers) {
	    $traceurRuntime.superConstructor($ObjectType).call(this, location);
	    this.typeMembers = typeMembers;
	  };
	  var $ObjectType = ObjectType;
	  ($traceurRuntime.createClass)(ObjectType, {
	    transform: function(transformer) {
	      return transformer.transformObjectType(this);
	    },
	    visit: function(visitor) {
	      visitor.visitObjectType(this);
	    },
	    get type() {
	      return OBJECT_TYPE;
	    }
	  }, {}, ParseTree);
	  var PAREN_EXPRESSION = ParseTreeType.PAREN_EXPRESSION;
	  var ParenExpression = function ParenExpression(location, expression) {
	    $traceurRuntime.superConstructor($ParenExpression).call(this, location);
	    this.expression = expression;
	  };
	  var $ParenExpression = ParenExpression;
	  ($traceurRuntime.createClass)(ParenExpression, {
	    transform: function(transformer) {
	      return transformer.transformParenExpression(this);
	    },
	    visit: function(visitor) {
	      visitor.visitParenExpression(this);
	    },
	    get type() {
	      return PAREN_EXPRESSION;
	    }
	  }, {}, ParseTree);
	  var POSTFIX_EXPRESSION = ParseTreeType.POSTFIX_EXPRESSION;
	  var PostfixExpression = function PostfixExpression(location, operand, operator) {
	    $traceurRuntime.superConstructor($PostfixExpression).call(this, location);
	    this.operand = operand;
	    this.operator = operator;
	  };
	  var $PostfixExpression = PostfixExpression;
	  ($traceurRuntime.createClass)(PostfixExpression, {
	    transform: function(transformer) {
	      return transformer.transformPostfixExpression(this);
	    },
	    visit: function(visitor) {
	      visitor.visitPostfixExpression(this);
	    },
	    get type() {
	      return POSTFIX_EXPRESSION;
	    }
	  }, {}, ParseTree);
	  var PREDEFINED_TYPE = ParseTreeType.PREDEFINED_TYPE;
	  var PredefinedType = function PredefinedType(location, typeToken) {
	    $traceurRuntime.superConstructor($PredefinedType).call(this, location);
	    this.typeToken = typeToken;
	  };
	  var $PredefinedType = PredefinedType;
	  ($traceurRuntime.createClass)(PredefinedType, {
	    transform: function(transformer) {
	      return transformer.transformPredefinedType(this);
	    },
	    visit: function(visitor) {
	      visitor.visitPredefinedType(this);
	    },
	    get type() {
	      return PREDEFINED_TYPE;
	    }
	  }, {}, ParseTree);
	  var SCRIPT = ParseTreeType.SCRIPT;
	  var Script = function Script(location, scriptItemList, moduleName) {
	    $traceurRuntime.superConstructor($Script).call(this, location);
	    this.scriptItemList = scriptItemList;
	    this.moduleName = moduleName;
	  };
	  var $Script = Script;
	  ($traceurRuntime.createClass)(Script, {
	    transform: function(transformer) {
	      return transformer.transformScript(this);
	    },
	    visit: function(visitor) {
	      visitor.visitScript(this);
	    },
	    get type() {
	      return SCRIPT;
	    }
	  }, {}, ParseTree);
	  var PROPERTY_METHOD_ASSIGNMENT = ParseTreeType.PROPERTY_METHOD_ASSIGNMENT;
	  var PropertyMethodAssignment = function PropertyMethodAssignment(location, isStatic, functionKind, name, parameterList, typeAnnotation, annotations, body, debugName) {
	    $traceurRuntime.superConstructor($PropertyMethodAssignment).call(this, location);
	    this.isStatic = isStatic;
	    this.functionKind = functionKind;
	    this.name = name;
	    this.parameterList = parameterList;
	    this.typeAnnotation = typeAnnotation;
	    this.annotations = annotations;
	    this.body = body;
	    this.debugName = debugName;
	  };
	  var $PropertyMethodAssignment = PropertyMethodAssignment;
	  ($traceurRuntime.createClass)(PropertyMethodAssignment, {
	    transform: function(transformer) {
	      return transformer.transformPropertyMethodAssignment(this);
	    },
	    visit: function(visitor) {
	      visitor.visitPropertyMethodAssignment(this);
	    },
	    get type() {
	      return PROPERTY_METHOD_ASSIGNMENT;
	    }
	  }, {}, ParseTree);
	  var PROPERTY_NAME_ASSIGNMENT = ParseTreeType.PROPERTY_NAME_ASSIGNMENT;
	  var PropertyNameAssignment = function PropertyNameAssignment(location, name, value) {
	    $traceurRuntime.superConstructor($PropertyNameAssignment).call(this, location);
	    this.name = name;
	    this.value = value;
	  };
	  var $PropertyNameAssignment = PropertyNameAssignment;
	  ($traceurRuntime.createClass)(PropertyNameAssignment, {
	    transform: function(transformer) {
	      return transformer.transformPropertyNameAssignment(this);
	    },
	    visit: function(visitor) {
	      visitor.visitPropertyNameAssignment(this);
	    },
	    get type() {
	      return PROPERTY_NAME_ASSIGNMENT;
	    }
	  }, {}, ParseTree);
	  var PROPERTY_NAME_SHORTHAND = ParseTreeType.PROPERTY_NAME_SHORTHAND;
	  var PropertyNameShorthand = function PropertyNameShorthand(location, name) {
	    $traceurRuntime.superConstructor($PropertyNameShorthand).call(this, location);
	    this.name = name;
	  };
	  var $PropertyNameShorthand = PropertyNameShorthand;
	  ($traceurRuntime.createClass)(PropertyNameShorthand, {
	    transform: function(transformer) {
	      return transformer.transformPropertyNameShorthand(this);
	    },
	    visit: function(visitor) {
	      visitor.visitPropertyNameShorthand(this);
	    },
	    get type() {
	      return PROPERTY_NAME_SHORTHAND;
	    }
	  }, {}, ParseTree);
	  var PROPERTY_VARIABLE_DECLARATION = ParseTreeType.PROPERTY_VARIABLE_DECLARATION;
	  var PropertyVariableDeclaration = function PropertyVariableDeclaration(location, isStatic, name, typeAnnotation, annotations, initializer) {
	    $traceurRuntime.superConstructor($PropertyVariableDeclaration).call(this, location);
	    this.isStatic = isStatic;
	    this.name = name;
	    this.typeAnnotation = typeAnnotation;
	    this.annotations = annotations;
	    this.initializer = initializer;
	  };
	  var $PropertyVariableDeclaration = PropertyVariableDeclaration;
	  ($traceurRuntime.createClass)(PropertyVariableDeclaration, {
	    transform: function(transformer) {
	      return transformer.transformPropertyVariableDeclaration(this);
	    },
	    visit: function(visitor) {
	      visitor.visitPropertyVariableDeclaration(this);
	    },
	    get type() {
	      return PROPERTY_VARIABLE_DECLARATION;
	    }
	  }, {}, ParseTree);
	  var PROPERTY_SIGNATURE = ParseTreeType.PROPERTY_SIGNATURE;
	  var PropertySignature = function PropertySignature(location, name, optional, typeAnnotation) {
	    $traceurRuntime.superConstructor($PropertySignature).call(this, location);
	    this.name = name;
	    this.optional = optional;
	    this.typeAnnotation = typeAnnotation;
	  };
	  var $PropertySignature = PropertySignature;
	  ($traceurRuntime.createClass)(PropertySignature, {
	    transform: function(transformer) {
	      return transformer.transformPropertySignature(this);
	    },
	    visit: function(visitor) {
	      visitor.visitPropertySignature(this);
	    },
	    get type() {
	      return PROPERTY_SIGNATURE;
	    }
	  }, {}, ParseTree);
	  var REST_PARAMETER = ParseTreeType.REST_PARAMETER;
	  var RestParameter = function RestParameter(location, identifier, typeAnnotation) {
	    $traceurRuntime.superConstructor($RestParameter).call(this, location);
	    this.identifier = identifier;
	    this.typeAnnotation = typeAnnotation;
	  };
	  var $RestParameter = RestParameter;
	  ($traceurRuntime.createClass)(RestParameter, {
	    transform: function(transformer) {
	      return transformer.transformRestParameter(this);
	    },
	    visit: function(visitor) {
	      visitor.visitRestParameter(this);
	    },
	    get type() {
	      return REST_PARAMETER;
	    }
	  }, {}, ParseTree);
	  var RETURN_STATEMENT = ParseTreeType.RETURN_STATEMENT;
	  var ReturnStatement = function ReturnStatement(location, expression) {
	    $traceurRuntime.superConstructor($ReturnStatement).call(this, location);
	    this.expression = expression;
	  };
	  var $ReturnStatement = ReturnStatement;
	  ($traceurRuntime.createClass)(ReturnStatement, {
	    transform: function(transformer) {
	      return transformer.transformReturnStatement(this);
	    },
	    visit: function(visitor) {
	      visitor.visitReturnStatement(this);
	    },
	    get type() {
	      return RETURN_STATEMENT;
	    }
	  }, {}, ParseTree);
	  var SET_ACCESSOR = ParseTreeType.SET_ACCESSOR;
	  var SetAccessor = function SetAccessor(location, isStatic, name, parameterList, annotations, body) {
	    $traceurRuntime.superConstructor($SetAccessor).call(this, location);
	    this.isStatic = isStatic;
	    this.name = name;
	    this.parameterList = parameterList;
	    this.annotations = annotations;
	    this.body = body;
	  };
	  var $SetAccessor = SetAccessor;
	  ($traceurRuntime.createClass)(SetAccessor, {
	    transform: function(transformer) {
	      return transformer.transformSetAccessor(this);
	    },
	    visit: function(visitor) {
	      visitor.visitSetAccessor(this);
	    },
	    get type() {
	      return SET_ACCESSOR;
	    }
	  }, {}, ParseTree);
	  var SPREAD_EXPRESSION = ParseTreeType.SPREAD_EXPRESSION;
	  var SpreadExpression = function SpreadExpression(location, expression) {
	    $traceurRuntime.superConstructor($SpreadExpression).call(this, location);
	    this.expression = expression;
	  };
	  var $SpreadExpression = SpreadExpression;
	  ($traceurRuntime.createClass)(SpreadExpression, {
	    transform: function(transformer) {
	      return transformer.transformSpreadExpression(this);
	    },
	    visit: function(visitor) {
	      visitor.visitSpreadExpression(this);
	    },
	    get type() {
	      return SPREAD_EXPRESSION;
	    }
	  }, {}, ParseTree);
	  var SPREAD_PATTERN_ELEMENT = ParseTreeType.SPREAD_PATTERN_ELEMENT;
	  var SpreadPatternElement = function SpreadPatternElement(location, lvalue) {
	    $traceurRuntime.superConstructor($SpreadPatternElement).call(this, location);
	    this.lvalue = lvalue;
	  };
	  var $SpreadPatternElement = SpreadPatternElement;
	  ($traceurRuntime.createClass)(SpreadPatternElement, {
	    transform: function(transformer) {
	      return transformer.transformSpreadPatternElement(this);
	    },
	    visit: function(visitor) {
	      visitor.visitSpreadPatternElement(this);
	    },
	    get type() {
	      return SPREAD_PATTERN_ELEMENT;
	    }
	  }, {}, ParseTree);
	  var SUPER_EXPRESSION = ParseTreeType.SUPER_EXPRESSION;
	  var SuperExpression = function SuperExpression(location) {
	    $traceurRuntime.superConstructor($SuperExpression).call(this, location);
	  };
	  var $SuperExpression = SuperExpression;
	  ($traceurRuntime.createClass)(SuperExpression, {
	    transform: function(transformer) {
	      return transformer.transformSuperExpression(this);
	    },
	    visit: function(visitor) {
	      visitor.visitSuperExpression(this);
	    },
	    get type() {
	      return SUPER_EXPRESSION;
	    }
	  }, {}, ParseTree);
	  var SWITCH_STATEMENT = ParseTreeType.SWITCH_STATEMENT;
	  var SwitchStatement = function SwitchStatement(location, expression, caseClauses) {
	    $traceurRuntime.superConstructor($SwitchStatement).call(this, location);
	    this.expression = expression;
	    this.caseClauses = caseClauses;
	  };
	  var $SwitchStatement = SwitchStatement;
	  ($traceurRuntime.createClass)(SwitchStatement, {
	    transform: function(transformer) {
	      return transformer.transformSwitchStatement(this);
	    },
	    visit: function(visitor) {
	      visitor.visitSwitchStatement(this);
	    },
	    get type() {
	      return SWITCH_STATEMENT;
	    }
	  }, {}, ParseTree);
	  var SYNTAX_ERROR_TREE = ParseTreeType.SYNTAX_ERROR_TREE;
	  var SyntaxErrorTree = function SyntaxErrorTree(location, nextToken, message) {
	    $traceurRuntime.superConstructor($SyntaxErrorTree).call(this, location);
	    this.nextToken = nextToken;
	    this.message = message;
	  };
	  var $SyntaxErrorTree = SyntaxErrorTree;
	  ($traceurRuntime.createClass)(SyntaxErrorTree, {
	    transform: function(transformer) {
	      return transformer.transformSyntaxErrorTree(this);
	    },
	    visit: function(visitor) {
	      visitor.visitSyntaxErrorTree(this);
	    },
	    get type() {
	      return SYNTAX_ERROR_TREE;
	    }
	  }, {}, ParseTree);
	  var TEMPLATE_LITERAL_EXPRESSION = ParseTreeType.TEMPLATE_LITERAL_EXPRESSION;
	  var TemplateLiteralExpression = function TemplateLiteralExpression(location, operand, elements) {
	    $traceurRuntime.superConstructor($TemplateLiteralExpression).call(this, location);
	    this.operand = operand;
	    this.elements = elements;
	  };
	  var $TemplateLiteralExpression = TemplateLiteralExpression;
	  ($traceurRuntime.createClass)(TemplateLiteralExpression, {
	    transform: function(transformer) {
	      return transformer.transformTemplateLiteralExpression(this);
	    },
	    visit: function(visitor) {
	      visitor.visitTemplateLiteralExpression(this);
	    },
	    get type() {
	      return TEMPLATE_LITERAL_EXPRESSION;
	    }
	  }, {}, ParseTree);
	  var TEMPLATE_LITERAL_PORTION = ParseTreeType.TEMPLATE_LITERAL_PORTION;
	  var TemplateLiteralPortion = function TemplateLiteralPortion(location, value) {
	    $traceurRuntime.superConstructor($TemplateLiteralPortion).call(this, location);
	    this.value = value;
	  };
	  var $TemplateLiteralPortion = TemplateLiteralPortion;
	  ($traceurRuntime.createClass)(TemplateLiteralPortion, {
	    transform: function(transformer) {
	      return transformer.transformTemplateLiteralPortion(this);
	    },
	    visit: function(visitor) {
	      visitor.visitTemplateLiteralPortion(this);
	    },
	    get type() {
	      return TEMPLATE_LITERAL_PORTION;
	    }
	  }, {}, ParseTree);
	  var TEMPLATE_SUBSTITUTION = ParseTreeType.TEMPLATE_SUBSTITUTION;
	  var TemplateSubstitution = function TemplateSubstitution(location, expression) {
	    $traceurRuntime.superConstructor($TemplateSubstitution).call(this, location);
	    this.expression = expression;
	  };
	  var $TemplateSubstitution = TemplateSubstitution;
	  ($traceurRuntime.createClass)(TemplateSubstitution, {
	    transform: function(transformer) {
	      return transformer.transformTemplateSubstitution(this);
	    },
	    visit: function(visitor) {
	      visitor.visitTemplateSubstitution(this);
	    },
	    get type() {
	      return TEMPLATE_SUBSTITUTION;
	    }
	  }, {}, ParseTree);
	  var THIS_EXPRESSION = ParseTreeType.THIS_EXPRESSION;
	  var ThisExpression = function ThisExpression(location) {
	    $traceurRuntime.superConstructor($ThisExpression).call(this, location);
	  };
	  var $ThisExpression = ThisExpression;
	  ($traceurRuntime.createClass)(ThisExpression, {
	    transform: function(transformer) {
	      return transformer.transformThisExpression(this);
	    },
	    visit: function(visitor) {
	      visitor.visitThisExpression(this);
	    },
	    get type() {
	      return THIS_EXPRESSION;
	    }
	  }, {}, ParseTree);
	  var THROW_STATEMENT = ParseTreeType.THROW_STATEMENT;
	  var ThrowStatement = function ThrowStatement(location, value) {
	    $traceurRuntime.superConstructor($ThrowStatement).call(this, location);
	    this.value = value;
	  };
	  var $ThrowStatement = ThrowStatement;
	  ($traceurRuntime.createClass)(ThrowStatement, {
	    transform: function(transformer) {
	      return transformer.transformThrowStatement(this);
	    },
	    visit: function(visitor) {
	      visitor.visitThrowStatement(this);
	    },
	    get type() {
	      return THROW_STATEMENT;
	    }
	  }, {}, ParseTree);
	  var TRY_STATEMENT = ParseTreeType.TRY_STATEMENT;
	  var TryStatement = function TryStatement(location, body, catchBlock, finallyBlock) {
	    $traceurRuntime.superConstructor($TryStatement).call(this, location);
	    this.body = body;
	    this.catchBlock = catchBlock;
	    this.finallyBlock = finallyBlock;
	  };
	  var $TryStatement = TryStatement;
	  ($traceurRuntime.createClass)(TryStatement, {
	    transform: function(transformer) {
	      return transformer.transformTryStatement(this);
	    },
	    visit: function(visitor) {
	      visitor.visitTryStatement(this);
	    },
	    get type() {
	      return TRY_STATEMENT;
	    }
	  }, {}, ParseTree);
	  var TYPE_ARGUMENTS = ParseTreeType.TYPE_ARGUMENTS;
	  var TypeArguments = function TypeArguments(location, args) {
	    $traceurRuntime.superConstructor($TypeArguments).call(this, location);
	    this.args = args;
	  };
	  var $TypeArguments = TypeArguments;
	  ($traceurRuntime.createClass)(TypeArguments, {
	    transform: function(transformer) {
	      return transformer.transformTypeArguments(this);
	    },
	    visit: function(visitor) {
	      visitor.visitTypeArguments(this);
	    },
	    get type() {
	      return TYPE_ARGUMENTS;
	    }
	  }, {}, ParseTree);
	  var TYPE_NAME = ParseTreeType.TYPE_NAME;
	  var TypeName = function TypeName(location, moduleName, name) {
	    $traceurRuntime.superConstructor($TypeName).call(this, location);
	    this.moduleName = moduleName;
	    this.name = name;
	  };
	  var $TypeName = TypeName;
	  ($traceurRuntime.createClass)(TypeName, {
	    transform: function(transformer) {
	      return transformer.transformTypeName(this);
	    },
	    visit: function(visitor) {
	      visitor.visitTypeName(this);
	    },
	    get type() {
	      return TYPE_NAME;
	    }
	  }, {}, ParseTree);
	  var TYPE_PARAMETER = ParseTreeType.TYPE_PARAMETER;
	  var TypeParameter = function TypeParameter(location, identifierToken, extendsType) {
	    $traceurRuntime.superConstructor($TypeParameter).call(this, location);
	    this.identifierToken = identifierToken;
	    this.extendsType = extendsType;
	  };
	  var $TypeParameter = TypeParameter;
	  ($traceurRuntime.createClass)(TypeParameter, {
	    transform: function(transformer) {
	      return transformer.transformTypeParameter(this);
	    },
	    visit: function(visitor) {
	      visitor.visitTypeParameter(this);
	    },
	    get type() {
	      return TYPE_PARAMETER;
	    }
	  }, {}, ParseTree);
	  var TYPE_PARAMETERS = ParseTreeType.TYPE_PARAMETERS;
	  var TypeParameters = function TypeParameters(location, parameters) {
	    $traceurRuntime.superConstructor($TypeParameters).call(this, location);
	    this.parameters = parameters;
	  };
	  var $TypeParameters = TypeParameters;
	  ($traceurRuntime.createClass)(TypeParameters, {
	    transform: function(transformer) {
	      return transformer.transformTypeParameters(this);
	    },
	    visit: function(visitor) {
	      visitor.visitTypeParameters(this);
	    },
	    get type() {
	      return TYPE_PARAMETERS;
	    }
	  }, {}, ParseTree);
	  var TYPE_REFERENCE = ParseTreeType.TYPE_REFERENCE;
	  var TypeReference = function TypeReference(location, typeName, args) {
	    $traceurRuntime.superConstructor($TypeReference).call(this, location);
	    this.typeName = typeName;
	    this.args = args;
	  };
	  var $TypeReference = TypeReference;
	  ($traceurRuntime.createClass)(TypeReference, {
	    transform: function(transformer) {
	      return transformer.transformTypeReference(this);
	    },
	    visit: function(visitor) {
	      visitor.visitTypeReference(this);
	    },
	    get type() {
	      return TYPE_REFERENCE;
	    }
	  }, {}, ParseTree);
	  var UNARY_EXPRESSION = ParseTreeType.UNARY_EXPRESSION;
	  var UnaryExpression = function UnaryExpression(location, operator, operand) {
	    $traceurRuntime.superConstructor($UnaryExpression).call(this, location);
	    this.operator = operator;
	    this.operand = operand;
	  };
	  var $UnaryExpression = UnaryExpression;
	  ($traceurRuntime.createClass)(UnaryExpression, {
	    transform: function(transformer) {
	      return transformer.transformUnaryExpression(this);
	    },
	    visit: function(visitor) {
	      visitor.visitUnaryExpression(this);
	    },
	    get type() {
	      return UNARY_EXPRESSION;
	    }
	  }, {}, ParseTree);
	  var UNION_TYPE = ParseTreeType.UNION_TYPE;
	  var UnionType = function UnionType(location, types) {
	    $traceurRuntime.superConstructor($UnionType).call(this, location);
	    this.types = types;
	  };
	  var $UnionType = UnionType;
	  ($traceurRuntime.createClass)(UnionType, {
	    transform: function(transformer) {
	      return transformer.transformUnionType(this);
	    },
	    visit: function(visitor) {
	      visitor.visitUnionType(this);
	    },
	    get type() {
	      return UNION_TYPE;
	    }
	  }, {}, ParseTree);
	  var VARIABLE_DECLARATION = ParseTreeType.VARIABLE_DECLARATION;
	  var VariableDeclaration = function VariableDeclaration(location, lvalue, typeAnnotation, initializer) {
	    $traceurRuntime.superConstructor($VariableDeclaration).call(this, location);
	    this.lvalue = lvalue;
	    this.typeAnnotation = typeAnnotation;
	    this.initializer = initializer;
	  };
	  var $VariableDeclaration = VariableDeclaration;
	  ($traceurRuntime.createClass)(VariableDeclaration, {
	    transform: function(transformer) {
	      return transformer.transformVariableDeclaration(this);
	    },
	    visit: function(visitor) {
	      visitor.visitVariableDeclaration(this);
	    },
	    get type() {
	      return VARIABLE_DECLARATION;
	    }
	  }, {}, ParseTree);
	  var VARIABLE_DECLARATION_LIST = ParseTreeType.VARIABLE_DECLARATION_LIST;
	  var VariableDeclarationList = function VariableDeclarationList(location, declarationType, declarations) {
	    $traceurRuntime.superConstructor($VariableDeclarationList).call(this, location);
	    this.declarationType = declarationType;
	    this.declarations = declarations;
	  };
	  var $VariableDeclarationList = VariableDeclarationList;
	  ($traceurRuntime.createClass)(VariableDeclarationList, {
	    transform: function(transformer) {
	      return transformer.transformVariableDeclarationList(this);
	    },
	    visit: function(visitor) {
	      visitor.visitVariableDeclarationList(this);
	    },
	    get type() {
	      return VARIABLE_DECLARATION_LIST;
	    }
	  }, {}, ParseTree);
	  var VARIABLE_STATEMENT = ParseTreeType.VARIABLE_STATEMENT;
	  var VariableStatement = function VariableStatement(location, declarations) {
	    $traceurRuntime.superConstructor($VariableStatement).call(this, location);
	    this.declarations = declarations;
	  };
	  var $VariableStatement = VariableStatement;
	  ($traceurRuntime.createClass)(VariableStatement, {
	    transform: function(transformer) {
	      return transformer.transformVariableStatement(this);
	    },
	    visit: function(visitor) {
	      visitor.visitVariableStatement(this);
	    },
	    get type() {
	      return VARIABLE_STATEMENT;
	    }
	  }, {}, ParseTree);
	  var WHILE_STATEMENT = ParseTreeType.WHILE_STATEMENT;
	  var WhileStatement = function WhileStatement(location, condition, body) {
	    $traceurRuntime.superConstructor($WhileStatement).call(this, location);
	    this.condition = condition;
	    this.body = body;
	  };
	  var $WhileStatement = WhileStatement;
	  ($traceurRuntime.createClass)(WhileStatement, {
	    transform: function(transformer) {
	      return transformer.transformWhileStatement(this);
	    },
	    visit: function(visitor) {
	      visitor.visitWhileStatement(this);
	    },
	    get type() {
	      return WHILE_STATEMENT;
	    }
	  }, {}, ParseTree);
	  var WITH_STATEMENT = ParseTreeType.WITH_STATEMENT;
	  var WithStatement = function WithStatement(location, expression, body) {
	    $traceurRuntime.superConstructor($WithStatement).call(this, location);
	    this.expression = expression;
	    this.body = body;
	  };
	  var $WithStatement = WithStatement;
	  ($traceurRuntime.createClass)(WithStatement, {
	    transform: function(transformer) {
	      return transformer.transformWithStatement(this);
	    },
	    visit: function(visitor) {
	      visitor.visitWithStatement(this);
	    },
	    get type() {
	      return WITH_STATEMENT;
	    }
	  }, {}, ParseTree);
	  var YIELD_EXPRESSION = ParseTreeType.YIELD_EXPRESSION;
	  var YieldExpression = function YieldExpression(location, expression, isYieldFor) {
	    $traceurRuntime.superConstructor($YieldExpression).call(this, location);
	    this.expression = expression;
	    this.isYieldFor = isYieldFor;
	  };
	  var $YieldExpression = YieldExpression;
	  ($traceurRuntime.createClass)(YieldExpression, {
	    transform: function(transformer) {
	      return transformer.transformYieldExpression(this);
	    },
	    visit: function(visitor) {
	      visitor.visitYieldExpression(this);
	    },
	    get type() {
	      return YIELD_EXPRESSION;
	    }
	  }, {}, ParseTree);
	  return {
	    get Annotation() {
	      return Annotation;
	    },
	    get AnonBlock() {
	      return AnonBlock;
	    },
	    get ArgumentList() {
	      return ArgumentList;
	    },
	    get ArrayComprehension() {
	      return ArrayComprehension;
	    },
	    get ArrayLiteralExpression() {
	      return ArrayLiteralExpression;
	    },
	    get ArrayPattern() {
	      return ArrayPattern;
	    },
	    get ArrayType() {
	      return ArrayType;
	    },
	    get ArrowFunctionExpression() {
	      return ArrowFunctionExpression;
	    },
	    get AssignmentElement() {
	      return AssignmentElement;
	    },
	    get AwaitExpression() {
	      return AwaitExpression;
	    },
	    get BinaryExpression() {
	      return BinaryExpression;
	    },
	    get BindingElement() {
	      return BindingElement;
	    },
	    get BindingIdentifier() {
	      return BindingIdentifier;
	    },
	    get Block() {
	      return Block;
	    },
	    get BreakStatement() {
	      return BreakStatement;
	    },
	    get CallExpression() {
	      return CallExpression;
	    },
	    get CallSignature() {
	      return CallSignature;
	    },
	    get CaseClause() {
	      return CaseClause;
	    },
	    get Catch() {
	      return Catch;
	    },
	    get ClassDeclaration() {
	      return ClassDeclaration;
	    },
	    get ClassExpression() {
	      return ClassExpression;
	    },
	    get CommaExpression() {
	      return CommaExpression;
	    },
	    get ComprehensionFor() {
	      return ComprehensionFor;
	    },
	    get ComprehensionIf() {
	      return ComprehensionIf;
	    },
	    get ComputedPropertyName() {
	      return ComputedPropertyName;
	    },
	    get ConditionalExpression() {
	      return ConditionalExpression;
	    },
	    get ConstructSignature() {
	      return ConstructSignature;
	    },
	    get ConstructorType() {
	      return ConstructorType;
	    },
	    get ContinueStatement() {
	      return ContinueStatement;
	    },
	    get CoverFormals() {
	      return CoverFormals;
	    },
	    get CoverInitializedName() {
	      return CoverInitializedName;
	    },
	    get DebuggerStatement() {
	      return DebuggerStatement;
	    },
	    get DefaultClause() {
	      return DefaultClause;
	    },
	    get DoWhileStatement() {
	      return DoWhileStatement;
	    },
	    get EmptyStatement() {
	      return EmptyStatement;
	    },
	    get ExportDeclaration() {
	      return ExportDeclaration;
	    },
	    get ExportDefault() {
	      return ExportDefault;
	    },
	    get ExportSpecifier() {
	      return ExportSpecifier;
	    },
	    get ExportSpecifierSet() {
	      return ExportSpecifierSet;
	    },
	    get ExportStar() {
	      return ExportStar;
	    },
	    get ExpressionStatement() {
	      return ExpressionStatement;
	    },
	    get Finally() {
	      return Finally;
	    },
	    get ForInStatement() {
	      return ForInStatement;
	    },
	    get ForOfStatement() {
	      return ForOfStatement;
	    },
	    get ForOnStatement() {
	      return ForOnStatement;
	    },
	    get ForStatement() {
	      return ForStatement;
	    },
	    get FormalParameter() {
	      return FormalParameter;
	    },
	    get FormalParameterList() {
	      return FormalParameterList;
	    },
	    get FunctionBody() {
	      return FunctionBody;
	    },
	    get FunctionDeclaration() {
	      return FunctionDeclaration;
	    },
	    get FunctionExpression() {
	      return FunctionExpression;
	    },
	    get FunctionType() {
	      return FunctionType;
	    },
	    get GeneratorComprehension() {
	      return GeneratorComprehension;
	    },
	    get GetAccessor() {
	      return GetAccessor;
	    },
	    get IdentifierExpression() {
	      return IdentifierExpression;
	    },
	    get IfStatement() {
	      return IfStatement;
	    },
	    get ImportedBinding() {
	      return ImportedBinding;
	    },
	    get ImportDeclaration() {
	      return ImportDeclaration;
	    },
	    get ImportSpecifier() {
	      return ImportSpecifier;
	    },
	    get ImportSpecifierSet() {
	      return ImportSpecifierSet;
	    },
	    get IndexSignature() {
	      return IndexSignature;
	    },
	    get InterfaceDeclaration() {
	      return InterfaceDeclaration;
	    },
	    get LabelledStatement() {
	      return LabelledStatement;
	    },
	    get LiteralExpression() {
	      return LiteralExpression;
	    },
	    get LiteralPropertyName() {
	      return LiteralPropertyName;
	    },
	    get MemberExpression() {
	      return MemberExpression;
	    },
	    get MemberLookupExpression() {
	      return MemberLookupExpression;
	    },
	    get MethodSignature() {
	      return MethodSignature;
	    },
	    get Module() {
	      return Module;
	    },
	    get ModuleDeclaration() {
	      return ModuleDeclaration;
	    },
	    get ModuleSpecifier() {
	      return ModuleSpecifier;
	    },
	    get NamedExport() {
	      return NamedExport;
	    },
	    get NewExpression() {
	      return NewExpression;
	    },
	    get ObjectLiteralExpression() {
	      return ObjectLiteralExpression;
	    },
	    get ObjectPattern() {
	      return ObjectPattern;
	    },
	    get ObjectPatternField() {
	      return ObjectPatternField;
	    },
	    get ObjectType() {
	      return ObjectType;
	    },
	    get ParenExpression() {
	      return ParenExpression;
	    },
	    get PostfixExpression() {
	      return PostfixExpression;
	    },
	    get PredefinedType() {
	      return PredefinedType;
	    },
	    get Script() {
	      return Script;
	    },
	    get PropertyMethodAssignment() {
	      return PropertyMethodAssignment;
	    },
	    get PropertyNameAssignment() {
	      return PropertyNameAssignment;
	    },
	    get PropertyNameShorthand() {
	      return PropertyNameShorthand;
	    },
	    get PropertyVariableDeclaration() {
	      return PropertyVariableDeclaration;
	    },
	    get PropertySignature() {
	      return PropertySignature;
	    },
	    get RestParameter() {
	      return RestParameter;
	    },
	    get ReturnStatement() {
	      return ReturnStatement;
	    },
	    get SetAccessor() {
	      return SetAccessor;
	    },
	    get SpreadExpression() {
	      return SpreadExpression;
	    },
	    get SpreadPatternElement() {
	      return SpreadPatternElement;
	    },
	    get SuperExpression() {
	      return SuperExpression;
	    },
	    get SwitchStatement() {
	      return SwitchStatement;
	    },
	    get SyntaxErrorTree() {
	      return SyntaxErrorTree;
	    },
	    get TemplateLiteralExpression() {
	      return TemplateLiteralExpression;
	    },
	    get TemplateLiteralPortion() {
	      return TemplateLiteralPortion;
	    },
	    get TemplateSubstitution() {
	      return TemplateSubstitution;
	    },
	    get ThisExpression() {
	      return ThisExpression;
	    },
	    get ThrowStatement() {
	      return ThrowStatement;
	    },
	    get TryStatement() {
	      return TryStatement;
	    },
	    get TypeArguments() {
	      return TypeArguments;
	    },
	    get TypeName() {
	      return TypeName;
	    },
	    get TypeParameter() {
	      return TypeParameter;
	    },
	    get TypeParameters() {
	      return TypeParameters;
	    },
	    get TypeReference() {
	      return TypeReference;
	    },
	    get UnaryExpression() {
	      return UnaryExpression;
	    },
	    get UnionType() {
	      return UnionType;
	    },
	    get VariableDeclaration() {
	      return VariableDeclaration;
	    },
	    get VariableDeclarationList() {
	      return VariableDeclarationList;
	    },
	    get VariableStatement() {
	      return VariableStatement;
	    },
	    get WhileStatement() {
	      return WhileStatement;
	    },
	    get WithStatement() {
	      return WithStatement;
	    },
	    get YieldExpression() {
	      return YieldExpression;
	    }
	  };
	});
	System.registerModule("traceur@0.0.87/src/util/assert.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/util/assert.js";
	  function assert(b) {
	    if (!b && $traceurRuntime.options.debug)
	      throw Error('Assertion failed');
	  }
	  return {get assert() {
	      return assert;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/syntax/IdentifierToken.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/syntax/IdentifierToken.js";
	  var Token = System.get("traceur@0.0.87/src/syntax/Token.js").Token;
	  var IDENTIFIER = System.get("traceur@0.0.87/src/syntax/TokenType.js").IDENTIFIER;
	  var IdentifierToken = function IdentifierToken(location, value) {
	    $traceurRuntime.superConstructor($IdentifierToken).call(this, IDENTIFIER, location);
	    this.value = value;
	  };
	  var $IdentifierToken = IdentifierToken;
	  ($traceurRuntime.createClass)(IdentifierToken, {toString: function() {
	      return this.value;
	    }}, {}, Token);
	  return {get IdentifierToken() {
	      return IdentifierToken;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/syntax/LiteralToken.js", [], function() {
	  "use strict";
	  var $__3;
	  var __moduleName = "traceur@0.0.87/src/syntax/LiteralToken.js";
	  var Token = System.get("traceur@0.0.87/src/syntax/Token.js").Token;
	  var $__1 = System.get("traceur@0.0.87/src/syntax/TokenType.js"),
	      NULL = $__1.NULL,
	      NUMBER = $__1.NUMBER,
	      STRING = $__1.STRING;
	  var StringParser = function StringParser(value) {
	    this.value = value;
	    this.index = 0;
	  };
	  ($traceurRuntime.createClass)(StringParser, ($__3 = {}, Object.defineProperty($__3, Symbol.iterator, {
	    value: function() {
	      return this;
	    },
	    configurable: true,
	    enumerable: true,
	    writable: true
	  }), Object.defineProperty($__3, "next", {
	    value: function() {
	      if (++this.index >= this.value.length - 1)
	        return {
	          value: undefined,
	          done: true
	        };
	      return {
	        value: this.value[this.index],
	        done: false
	      };
	    },
	    configurable: true,
	    enumerable: true,
	    writable: true
	  }), Object.defineProperty($__3, "parse", {
	    value: function() {
	      if (this.value.indexOf('\\') === -1)
	        return this.value.slice(1, -1);
	      var result = '';
	      var $__7 = true;
	      var $__8 = false;
	      var $__9 = undefined;
	      try {
	        for (var $__5 = void 0,
	            $__4 = (this)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__7 = ($__5 = $__4.next()).done); $__7 = true) {
	          var ch = $__5.value;
	          {
	            result += ch === '\\' ? this.parseEscapeSequence() : ch;
	          }
	        }
	      } catch ($__10) {
	        $__8 = true;
	        $__9 = $__10;
	      } finally {
	        try {
	          if (!$__7 && $__4.return != null) {
	            $__4.return();
	          }
	        } finally {
	          if ($__8) {
	            throw $__9;
	          }
	        }
	      }
	      return result;
	    },
	    configurable: true,
	    enumerable: true,
	    writable: true
	  }), Object.defineProperty($__3, "parseEscapeSequence", {
	    value: function() {
	      var ch = this.next().value;
	      switch (ch) {
	        case '\n':
	        case '\r':
	        case '\u2028':
	        case '\u2029':
	          return '';
	        case '0':
	          return '\0';
	        case 'b':
	          return '\b';
	        case 'f':
	          return '\f';
	        case 'n':
	          return '\n';
	        case 'r':
	          return '\r';
	        case 't':
	          return '\t';
	        case 'v':
	          return '\v';
	        case 'x':
	          return String.fromCharCode(parseInt(this.next().value + this.next().value, 16));
	        case 'u':
	          var nextValue = this.next().value;
	          if (nextValue === '{') {
	            var hexDigits = '';
	            while ((nextValue = this.next().value) !== '}') {
	              hexDigits += nextValue;
	            }
	            var codePoint = parseInt(hexDigits, 16);
	            if (codePoint <= 0xFFFF) {
	              return String.fromCharCode(codePoint);
	            }
	            var high = Math.floor((codePoint - 0x10000) / 0x400) + 0xD800;
	            var low = (codePoint - 0x10000) % 0x400 + 0xDC00;
	            return String.fromCharCode(high, low);
	          }
	          return String.fromCharCode(parseInt(nextValue + this.next().value + this.next().value + this.next().value, 16));
	        default:
	          if (Number(ch) < 8)
	            throw new Error('Octal literals are not supported');
	          return ch;
	      }
	    },
	    configurable: true,
	    enumerable: true,
	    writable: true
	  }), $__3), {});
	  var LiteralToken = function LiteralToken(type, value, location) {
	    $traceurRuntime.superConstructor($LiteralToken).call(this, type, location);
	    this.value = value;
	  };
	  var $LiteralToken = LiteralToken;
	  ($traceurRuntime.createClass)(LiteralToken, {
	    toString: function() {
	      return this.value;
	    },
	    get processedValue() {
	      switch (this.type) {
	        case NULL:
	          return null;
	        case NUMBER:
	          var value = this.value;
	          if (value.charCodeAt(0) === 48) {
	            switch (value.charCodeAt(1)) {
	              case 66:
	              case 98:
	                return parseInt(this.value.slice(2), 2);
	              case 79:
	              case 111:
	                return parseInt(this.value.slice(2), 8);
	            }
	          }
	          return Number(this.value);
	        case STRING:
	          var parser = new StringParser(this.value);
	          return parser.parse();
	        default:
	          throw new Error('Not implemented');
	      }
	    }
	  }, {}, Token);
	  return {get LiteralToken() {
	      return LiteralToken;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/ParseTreeFactory.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/ParseTreeFactory.js";
	  var IdentifierToken = System.get("traceur@0.0.87/src/syntax/IdentifierToken.js").IdentifierToken;
	  var LiteralToken = System.get("traceur@0.0.87/src/syntax/LiteralToken.js").LiteralToken;
	  var $__2 = System.get("traceur@0.0.87/src/syntax/trees/ParseTree.js"),
	      ParseTree = $__2.ParseTree,
	      ParseTreeType = $__2.ParseTreeType;
	  var $__3 = System.get("traceur@0.0.87/src/syntax/PredefinedName.js"),
	      CALL = $__3.CALL,
	      CREATE = $__3.CREATE,
	      DEFINE_PROPERTY = $__3.DEFINE_PROPERTY,
	      FREEZE = $__3.FREEZE,
	      OBJECT = $__3.OBJECT,
	      UNDEFINED = $__3.UNDEFINED;
	  var Token = System.get("traceur@0.0.87/src/syntax/Token.js").Token;
	  var $__5 = System.get("traceur@0.0.87/src/syntax/TokenType.js"),
	      EQUAL = $__5.EQUAL,
	      FALSE = $__5.FALSE,
	      NULL = $__5.NULL,
	      NUMBER = $__5.NUMBER,
	      STRING = $__5.STRING,
	      TRUE = $__5.TRUE,
	      VOID = $__5.VOID;
	  var assert = System.get("traceur@0.0.87/src/util/assert.js").assert;
	  var $__7 = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js"),
	      ArgumentList = $__7.ArgumentList,
	      ArrayLiteralExpression = $__7.ArrayLiteralExpression,
	      BinaryExpression = $__7.BinaryExpression,
	      BindingIdentifier = $__7.BindingIdentifier,
	      Block = $__7.Block,
	      BreakStatement = $__7.BreakStatement,
	      CallExpression = $__7.CallExpression,
	      CaseClause = $__7.CaseClause,
	      Catch = $__7.Catch,
	      ClassDeclaration = $__7.ClassDeclaration,
	      CommaExpression = $__7.CommaExpression,
	      ConditionalExpression = $__7.ConditionalExpression,
	      ContinueStatement = $__7.ContinueStatement,
	      DefaultClause = $__7.DefaultClause,
	      DoWhileStatement = $__7.DoWhileStatement,
	      EmptyStatement = $__7.EmptyStatement,
	      ExpressionStatement = $__7.ExpressionStatement,
	      Finally = $__7.Finally,
	      ForInStatement = $__7.ForInStatement,
	      ForOfStatement = $__7.ForOfStatement,
	      ForStatement = $__7.ForStatement,
	      FormalParameterList = $__7.FormalParameterList,
	      FunctionBody = $__7.FunctionBody,
	      FunctionExpression = $__7.FunctionExpression,
	      IdentifierExpression = $__7.IdentifierExpression,
	      IfStatement = $__7.IfStatement,
	      ImportedBinding = $__7.ImportedBinding,
	      LiteralExpression = $__7.LiteralExpression,
	      LiteralPropertyName = $__7.LiteralPropertyName,
	      MemberExpression = $__7.MemberExpression,
	      MemberLookupExpression = $__7.MemberLookupExpression,
	      NewExpression = $__7.NewExpression,
	      ObjectLiteralExpression = $__7.ObjectLiteralExpression,
	      ParenExpression = $__7.ParenExpression,
	      PostfixExpression = $__7.PostfixExpression,
	      Script = $__7.Script,
	      PropertyNameAssignment = $__7.PropertyNameAssignment,
	      RestParameter = $__7.RestParameter,
	      ReturnStatement = $__7.ReturnStatement,
	      SpreadExpression = $__7.SpreadExpression,
	      SwitchStatement = $__7.SwitchStatement,
	      ThisExpression = $__7.ThisExpression,
	      ThrowStatement = $__7.ThrowStatement,
	      TryStatement = $__7.TryStatement,
	      UnaryExpression = $__7.UnaryExpression,
	      VariableDeclaration = $__7.VariableDeclaration,
	      VariableDeclarationList = $__7.VariableDeclarationList,
	      VariableStatement = $__7.VariableStatement,
	      WhileStatement = $__7.WhileStatement,
	      WithStatement = $__7.WithStatement;
	  var slice = Array.prototype.slice.call.bind(Array.prototype.slice);
	  var map = Array.prototype.map.call.bind(Array.prototype.map);
	  function createOperatorToken(operator) {
	    return new Token(operator, null);
	  }
	  function createIdentifierToken(identifier) {
	    return new IdentifierToken(null, identifier);
	  }
	  function createStringLiteralToken(value) {
	    return new LiteralToken(STRING, JSON.stringify(value), null);
	  }
	  function createBooleanLiteralToken(value) {
	    return new Token(value ? TRUE : FALSE, null);
	  }
	  function createNullLiteralToken() {
	    return new LiteralToken(NULL, 'null', null);
	  }
	  function createNumberLiteralToken(value) {
	    return new LiteralToken(NUMBER, String(value), null);
	  }
	  function createEmptyParameterList() {
	    return new FormalParameterList(null, []);
	  }
	  function createArgumentList(list) {
	    return new ArgumentList(null, list);
	  }
	  function createEmptyArgumentList() {
	    return createArgumentList([]);
	  }
	  function createArrayLiteralExpression(list) {
	    return new ArrayLiteralExpression(null, list);
	  }
	  function createEmptyArrayLiteralExpression() {
	    return createArrayLiteralExpression([]);
	  }
	  function createAssignmentExpression(lhs, rhs) {
	    return new BinaryExpression(null, lhs, createOperatorToken(EQUAL), rhs);
	  }
	  function createBinaryExpression(left, operator, right) {
	    return new BinaryExpression(null, left, operator, right);
	  }
	  function createBindingIdentifier(identifier) {
	    if (typeof identifier === 'string')
	      identifier = createIdentifierToken(identifier);
	    else if (identifier.type === ParseTreeType.BINDING_IDENTIFIER)
	      return identifier;
	    else if (identifier.type === ParseTreeType.IDENTIFIER_EXPRESSION)
	      return new BindingIdentifier(identifier.location, identifier.identifierToken);
	    return new BindingIdentifier(null, identifier);
	  }
	  function createImportedBinding(name) {
	    var bindingIdentifier = createBindingIdentifier(name);
	    return new ImportedBinding(bindingIdentifier.location, bindingIdentifier);
	  }
	  function createEmptyStatement() {
	    return new EmptyStatement(null);
	  }
	  function createEmptyBlock() {
	    return createBlock([]);
	  }
	  function createBlock(statements) {
	    return new Block(null, statements);
	  }
	  function createFunctionBody(statements) {
	    return new FunctionBody(null, statements);
	  }
	  function createScopedExpression(body, scope) {
	    assert(body.type === 'FUNCTION_BODY');
	    return createCallCall(createParenExpression(createFunctionExpression(createEmptyParameterList(), body)), scope);
	  }
	  function createImmediatelyInvokedFunctionExpression(body) {
	    assert(body.type === 'FUNCTION_BODY');
	    return createCallExpression(createParenExpression(createFunctionExpression(createEmptyParameterList(), body)));
	  }
	  function createCallExpression(operand) {
	    var args = arguments[1] !== (void 0) ? arguments[1] : createEmptyArgumentList();
	    return new CallExpression(null, operand, args);
	  }
	  function createBreakStatement() {
	    var name = arguments[0] !== (void 0) ? arguments[0] : null;
	    return new BreakStatement(null, name);
	  }
	  function createCallCall(func, thisExpression) {
	    return createCallExpression(createMemberExpression(func, CALL), createArgumentList([thisExpression]));
	  }
	  function createCaseClause(expression, statements) {
	    return new CaseClause(null, expression, statements);
	  }
	  function createCatch(identifier, catchBody) {
	    identifier = createBindingIdentifier(identifier);
	    return new Catch(null, identifier, catchBody);
	  }
	  function createClassDeclaration(name, superClass, elements) {
	    return new ClassDeclaration(null, name, superClass, elements, []);
	  }
	  function createCommaExpression(expressions) {
	    return new CommaExpression(null, expressions);
	  }
	  function createConditionalExpression(condition, left, right) {
	    return new ConditionalExpression(null, condition, left, right);
	  }
	  function createContinueStatement() {
	    var name = arguments[0] !== (void 0) ? arguments[0] : null;
	    return new ContinueStatement(null, name);
	  }
	  function createDefaultClause(statements) {
	    return new DefaultClause(null, statements);
	  }
	  function createDoWhileStatement(body, condition) {
	    return new DoWhileStatement(null, body, condition);
	  }
	  function createAssignmentStatement(lhs, rhs) {
	    return createExpressionStatement(createAssignmentExpression(lhs, rhs));
	  }
	  function createCallStatement(operand) {
	    var args = arguments[1];
	    return createExpressionStatement(createCallExpression(operand, args));
	  }
	  function createExpressionStatement(expression) {
	    return new ExpressionStatement(null, expression);
	  }
	  function createFinally(block) {
	    return new Finally(null, block);
	  }
	  function createForOfStatement(initializer, collection, body) {
	    return new ForOfStatement(null, initializer, collection, body);
	  }
	  function createForInStatement(initializer, collection, body) {
	    return new ForInStatement(null, initializer, collection, body);
	  }
	  function createForStatement(variables, condition, increment, body) {
	    return new ForStatement(null, variables, condition, increment, body);
	  }
	  function createFunctionExpression(parameterList, body) {
	    assert(body.type === 'FUNCTION_BODY');
	    return new FunctionExpression(null, null, false, parameterList, null, [], body);
	  }
	  function createIdentifierExpression(identifier) {
	    if (typeof identifier === 'string')
	      identifier = createIdentifierToken(identifier);
	    else if (identifier instanceof BindingIdentifier)
	      identifier = identifier.identifierToken;
	    return new IdentifierExpression(null, identifier);
	  }
	  function createUndefinedExpression() {
	    return createIdentifierExpression(UNDEFINED);
	  }
	  function createIfStatement(condition, ifClause) {
	    var elseClause = arguments[2] !== (void 0) ? arguments[2] : null;
	    return new IfStatement(null, condition, ifClause, elseClause);
	  }
	  function createStringLiteral(value) {
	    return new LiteralExpression(null, createStringLiteralToken(value));
	  }
	  function createBooleanLiteral(value) {
	    return new LiteralExpression(null, createBooleanLiteralToken(value));
	  }
	  function createTrueLiteral() {
	    return createBooleanLiteral(true);
	  }
	  function createFalseLiteral() {
	    return createBooleanLiteral(false);
	  }
	  function createNullLiteral() {
	    return new LiteralExpression(null, createNullLiteralToken());
	  }
	  function createNumberLiteral(value) {
	    return new LiteralExpression(null, createNumberLiteralToken(value));
	  }
	  function createMemberExpression(operand, memberName, memberNames) {
	    if (typeof operand === 'string' || operand instanceof IdentifierToken)
	      operand = createIdentifierExpression(operand);
	    if (typeof memberName === 'string')
	      memberName = createIdentifierToken(memberName);
	    if (memberName instanceof LiteralToken)
	      memberName = new LiteralExpression(null, memberName);
	    var tree = memberName instanceof LiteralExpression ? new MemberLookupExpression(null, operand, memberName) : new MemberExpression(null, operand, memberName);
	    for (var i = 2; i < arguments.length; i++) {
	      tree = createMemberExpression(tree, arguments[i]);
	    }
	    return tree;
	  }
	  function createMemberLookupExpression(operand, memberExpression) {
	    return new MemberLookupExpression(null, operand, memberExpression);
	  }
	  function createThisExpression() {
	    return new ThisExpression(null);
	  }
	  function createNewExpression(operand, args) {
	    return new NewExpression(null, operand, args);
	  }
	  function createObjectFreeze(value) {
	    return createCallExpression(createMemberExpression(OBJECT, FREEZE), createArgumentList([value]));
	  }
	  function createObjectCreate(protoExpression, descriptors) {
	    var argumentList = [protoExpression];
	    if (descriptors)
	      argumentList.push(descriptors);
	    return createCallExpression(createMemberExpression(OBJECT, CREATE), createArgumentList(argumentList));
	  }
	  function createObjectLiteral(descr) {
	    var propertyNameAndValues = Object.keys(descr).map(function(name) {
	      var value = descr[name];
	      if (!(value instanceof ParseTree))
	        value = createBooleanLiteral(!!value);
	      return createPropertyNameAssignment(name, value);
	    });
	    return createObjectLiteralExpression(propertyNameAndValues);
	  }
	  function createDefineProperty(tree, name, descr) {
	    if (typeof name === 'string')
	      name = createStringLiteral(name);
	    return createCallExpression(createMemberExpression(OBJECT, DEFINE_PROPERTY), createArgumentList([tree, name, createObjectLiteral(descr)]));
	  }
	  function createObjectLiteralExpression(propertyNameAndValues) {
	    return new ObjectLiteralExpression(null, propertyNameAndValues);
	  }
	  function createParenExpression(expression) {
	    return new ParenExpression(null, expression);
	  }
	  function createPostfixExpression(operand, operator) {
	    return new PostfixExpression(null, operand, operator);
	  }
	  function createScript(scriptItemList) {
	    return new Script(null, scriptItemList);
	  }
	  function createPropertyNameAssignment(identifier, value) {
	    if (typeof identifier === 'string')
	      identifier = createLiteralPropertyName(identifier);
	    return new PropertyNameAssignment(null, identifier, value);
	  }
	  function createLiteralPropertyName(name) {
	    return new LiteralPropertyName(null, createIdentifierToken(name));
	  }
	  function createRestParameter(identifier) {
	    return new RestParameter(null, createBindingIdentifier(identifier), null);
	  }
	  function createReturnStatement(expression) {
	    return new ReturnStatement(null, expression);
	  }
	  function createSpreadExpression(expression) {
	    return new SpreadExpression(null, expression);
	  }
	  function createSwitchStatement(expression, caseClauses) {
	    return new SwitchStatement(null, expression, caseClauses);
	  }
	  function createThrowStatement(value) {
	    return new ThrowStatement(null, value);
	  }
	  function createTryStatement(body, catchBlock) {
	    var finallyBlock = arguments[2] !== (void 0) ? arguments[2] : null;
	    return new TryStatement(null, body, catchBlock, finallyBlock);
	  }
	  function createUnaryExpression(operator, operand) {
	    return new UnaryExpression(null, operator, operand);
	  }
	  function createUseStrictDirective() {
	    return createExpressionStatement(createStringLiteral('use strict'));
	  }
	  function createVariableDeclarationList(binding, identifierOrDeclarations, initializer) {
	    if (identifierOrDeclarations instanceof Array) {
	      var declarations = identifierOrDeclarations;
	      return new VariableDeclarationList(null, binding, declarations);
	    }
	    var identifier = identifierOrDeclarations;
	    return createVariableDeclarationList(binding, [createVariableDeclaration(identifier, initializer)]);
	  }
	  function createVariableDeclaration(identifier, initializer) {
	    if (!(identifier instanceof ParseTree) || identifier.type !== ParseTreeType.BINDING_IDENTIFIER && identifier.type !== ParseTreeType.OBJECT_PATTERN && identifier.type !== ParseTreeType.ARRAY_PATTERN) {
	      identifier = createBindingIdentifier(identifier);
	    }
	    return new VariableDeclaration(null, identifier, null, initializer);
	  }
	  function createVariableStatement(listOrBinding, identifier, initializer) {
	    if (listOrBinding instanceof VariableDeclarationList)
	      return new VariableStatement(null, listOrBinding);
	    var binding = listOrBinding;
	    var list = createVariableDeclarationList(binding, identifier, initializer);
	    return createVariableStatement(list);
	  }
	  function createVoid0() {
	    return createParenExpression(createUnaryExpression(createOperatorToken(VOID), createNumberLiteral(0)));
	  }
	  function createWhileStatement(condition, body) {
	    return new WhileStatement(null, condition, body);
	  }
	  function createWithStatement(expression, body) {
	    return new WithStatement(null, expression, body);
	  }
	  function createAssignStateStatement(state) {
	    return createAssignmentStatement(createMemberExpression('$ctx', 'state'), createNumberLiteral(state));
	  }
	  return {
	    get createOperatorToken() {
	      return createOperatorToken;
	    },
	    get createIdentifierToken() {
	      return createIdentifierToken;
	    },
	    get createStringLiteralToken() {
	      return createStringLiteralToken;
	    },
	    get createBooleanLiteralToken() {
	      return createBooleanLiteralToken;
	    },
	    get createNullLiteralToken() {
	      return createNullLiteralToken;
	    },
	    get createNumberLiteralToken() {
	      return createNumberLiteralToken;
	    },
	    get createEmptyParameterList() {
	      return createEmptyParameterList;
	    },
	    get createArgumentList() {
	      return createArgumentList;
	    },
	    get createEmptyArgumentList() {
	      return createEmptyArgumentList;
	    },
	    get createArrayLiteralExpression() {
	      return createArrayLiteralExpression;
	    },
	    get createEmptyArrayLiteralExpression() {
	      return createEmptyArrayLiteralExpression;
	    },
	    get createAssignmentExpression() {
	      return createAssignmentExpression;
	    },
	    get createBinaryExpression() {
	      return createBinaryExpression;
	    },
	    get createBindingIdentifier() {
	      return createBindingIdentifier;
	    },
	    get createImportedBinding() {
	      return createImportedBinding;
	    },
	    get createEmptyStatement() {
	      return createEmptyStatement;
	    },
	    get createEmptyBlock() {
	      return createEmptyBlock;
	    },
	    get createBlock() {
	      return createBlock;
	    },
	    get createFunctionBody() {
	      return createFunctionBody;
	    },
	    get createScopedExpression() {
	      return createScopedExpression;
	    },
	    get createImmediatelyInvokedFunctionExpression() {
	      return createImmediatelyInvokedFunctionExpression;
	    },
	    get createCallExpression() {
	      return createCallExpression;
	    },
	    get createBreakStatement() {
	      return createBreakStatement;
	    },
	    get createCaseClause() {
	      return createCaseClause;
	    },
	    get createCatch() {
	      return createCatch;
	    },
	    get createClassDeclaration() {
	      return createClassDeclaration;
	    },
	    get createCommaExpression() {
	      return createCommaExpression;
	    },
	    get createConditionalExpression() {
	      return createConditionalExpression;
	    },
	    get createContinueStatement() {
	      return createContinueStatement;
	    },
	    get createDefaultClause() {
	      return createDefaultClause;
	    },
	    get createDoWhileStatement() {
	      return createDoWhileStatement;
	    },
	    get createAssignmentStatement() {
	      return createAssignmentStatement;
	    },
	    get createCallStatement() {
	      return createCallStatement;
	    },
	    get createExpressionStatement() {
	      return createExpressionStatement;
	    },
	    get createFinally() {
	      return createFinally;
	    },
	    get createForOfStatement() {
	      return createForOfStatement;
	    },
	    get createForInStatement() {
	      return createForInStatement;
	    },
	    get createForStatement() {
	      return createForStatement;
	    },
	    get createFunctionExpression() {
	      return createFunctionExpression;
	    },
	    get createIdentifierExpression() {
	      return createIdentifierExpression;
	    },
	    get createUndefinedExpression() {
	      return createUndefinedExpression;
	    },
	    get createIfStatement() {
	      return createIfStatement;
	    },
	    get createStringLiteral() {
	      return createStringLiteral;
	    },
	    get createBooleanLiteral() {
	      return createBooleanLiteral;
	    },
	    get createTrueLiteral() {
	      return createTrueLiteral;
	    },
	    get createFalseLiteral() {
	      return createFalseLiteral;
	    },
	    get createNullLiteral() {
	      return createNullLiteral;
	    },
	    get createNumberLiteral() {
	      return createNumberLiteral;
	    },
	    get createMemberExpression() {
	      return createMemberExpression;
	    },
	    get createMemberLookupExpression() {
	      return createMemberLookupExpression;
	    },
	    get createThisExpression() {
	      return createThisExpression;
	    },
	    get createNewExpression() {
	      return createNewExpression;
	    },
	    get createObjectFreeze() {
	      return createObjectFreeze;
	    },
	    get createObjectCreate() {
	      return createObjectCreate;
	    },
	    get createObjectLiteral() {
	      return createObjectLiteral;
	    },
	    get createDefineProperty() {
	      return createDefineProperty;
	    },
	    get createObjectLiteralExpression() {
	      return createObjectLiteralExpression;
	    },
	    get createParenExpression() {
	      return createParenExpression;
	    },
	    get createPostfixExpression() {
	      return createPostfixExpression;
	    },
	    get createScript() {
	      return createScript;
	    },
	    get createPropertyNameAssignment() {
	      return createPropertyNameAssignment;
	    },
	    get createLiteralPropertyName() {
	      return createLiteralPropertyName;
	    },
	    get createRestParameter() {
	      return createRestParameter;
	    },
	    get createReturnStatement() {
	      return createReturnStatement;
	    },
	    get createSwitchStatement() {
	      return createSwitchStatement;
	    },
	    get createThrowStatement() {
	      return createThrowStatement;
	    },
	    get createTryStatement() {
	      return createTryStatement;
	    },
	    get createUnaryExpression() {
	      return createUnaryExpression;
	    },
	    get createUseStrictDirective() {
	      return createUseStrictDirective;
	    },
	    get createVariableDeclarationList() {
	      return createVariableDeclarationList;
	    },
	    get createVariableDeclaration() {
	      return createVariableDeclaration;
	    },
	    get createVariableStatement() {
	      return createVariableStatement;
	    },
	    get createVoid0() {
	      return createVoid0;
	    },
	    get createWhileStatement() {
	      return createWhileStatement;
	    },
	    get createWithStatement() {
	      return createWithStatement;
	    },
	    get createAssignStateStatement() {
	      return createAssignStateStatement;
	    }
	  };
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/FindVisitor.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/FindVisitor.js";
	  var ParseTreeVisitor = System.get("traceur@0.0.87/src/syntax/ParseTreeVisitor.js").ParseTreeVisitor;
	  var FindVisitor = function FindVisitor() {
	    var keepOnGoing = arguments[0];
	    $traceurRuntime.superConstructor($FindVisitor).call(this);
	    this.found_ = false;
	    this.shouldContinue_ = true;
	    this.keepOnGoing_ = keepOnGoing;
	  };
	  var $FindVisitor = FindVisitor;
	  ($traceurRuntime.createClass)(FindVisitor, {
	    get found() {
	      return this.found_;
	    },
	    set found(v) {
	      if (v) {
	        this.found_ = true;
	        if (!this.keepOnGoing_)
	          this.shouldContinue_ = false;
	      }
	    },
	    visitAny: function(tree) {
	      this.shouldContinue_ && tree && tree.visit(this);
	    },
	    visitList: function(list) {
	      if (list) {
	        for (var i = 0; this.shouldContinue_ && i < list.length; i++) {
	          this.visitAny(list[i]);
	        }
	      }
	    }
	  }, {}, ParseTreeVisitor);
	  return {get FindVisitor() {
	      return FindVisitor;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/semantics/ConstructorValidator.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/semantics/ConstructorValidator.js";
	  var SUPER_EXPRESSION = System.get("traceur@0.0.87/src/syntax/trees/ParseTreeType.js").SUPER_EXPRESSION;
	  var FindVisitor = System.get("traceur@0.0.87/src/codegeneration/FindVisitor.js").FindVisitor;
	  var ConstructorValidator = function ConstructorValidator(reporter) {
	    $traceurRuntime.superConstructor($ConstructorValidator).call(this);
	    this.reporter_ = reporter;
	    this.hasError = false;
	  };
	  var $ConstructorValidator = ConstructorValidator;
	  ($traceurRuntime.createClass)(ConstructorValidator, {
	    visitThisExpression: function(tree) {
	      this.reportError_(tree.location, 'this');
	    },
	    visitCallExpression: function(tree) {
	      if (tree.operand.type === SUPER_EXPRESSION) {
	        this.visitAny(tree.args);
	        this.found = true;
	        return ;
	      }
	      $traceurRuntime.superGet(this, $ConstructorValidator.prototype, "visitCallExpression").call(this, tree);
	    },
	    visitSuperExpression: function(tree) {
	      this.reportError_(tree.location, 'super property');
	    },
	    reportError_: function(location, kind) {
	      var location = location && location.start;
	      this.reporter_.reportError(location, ("'" + kind + "' is not allowed before super()"));
	      this.hasError = true;
	      this.found = true;
	    }
	  }, {}, FindVisitor);
	  function validateConstructor(tree, reporter) {
	    var visitor = new ConstructorValidator(reporter);
	    visitor.visitAny(tree);
	    if (visitor.hasError)
	      return false;
	    if (visitor.found)
	      return true;
	    reporter.reportError(tree.location.end, 'Derived constructor must call super()');
	    return false;
	  }
	  return {get validateConstructor() {
	      return validateConstructor;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/syntax/Keywords.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/syntax/Keywords.js";
	  var keywords = ['break', 'case', 'catch', 'class', 'const', 'continue', 'debugger', 'default', 'delete', 'do', 'else', 'export', 'finally', 'for', 'function', 'if', 'import', 'in', 'instanceof', 'let', 'new', 'return', 'super', 'switch', 'this', 'throw', 'try', 'typeof', 'var', 'void', 'while', 'with', 'enum', 'extends', 'null', 'true', 'false'];
	  var strictKeywords = ['implements', 'interface', 'package', 'private', 'protected', 'public', 'static', 'yield'];
	  var keywordsByName = Object.create(null);
	  var NORMAL_KEYWORD = 1;
	  var STRICT_KEYWORD = 2;
	  keywords.forEach((function(value) {
	    keywordsByName[value] = NORMAL_KEYWORD;
	  }));
	  strictKeywords.forEach((function(value) {
	    keywordsByName[value] = STRICT_KEYWORD;
	  }));
	  function getKeywordType(value) {
	    return keywordsByName[value];
	  }
	  function isStrictKeyword(value) {
	    return getKeywordType(value) === STRICT_KEYWORD;
	  }
	  return {
	    get NORMAL_KEYWORD() {
	      return NORMAL_KEYWORD;
	    },
	    get STRICT_KEYWORD() {
	      return STRICT_KEYWORD;
	    },
	    get getKeywordType() {
	      return getKeywordType;
	    },
	    get isStrictKeyword() {
	      return isStrictKeyword;
	    }
	  };
	});
	System.registerModule("traceur@0.0.87/src/staticsemantics/StrictParams.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/staticsemantics/StrictParams.js";
	  var ParseTreeVisitor = System.get("traceur@0.0.87/src/syntax/ParseTreeVisitor.js").ParseTreeVisitor;
	  var isStrictKeyword = System.get("traceur@0.0.87/src/syntax/Keywords.js").isStrictKeyword;
	  var StrictParams = function StrictParams(errorReporter) {
	    $traceurRuntime.superConstructor($StrictParams).call(this);
	    this.errorReporter = errorReporter;
	  };
	  var $StrictParams = StrictParams;
	  ($traceurRuntime.createClass)(StrictParams, {visitBindingIdentifier: function(tree) {
	      var name = tree.identifierToken.toString();
	      if (isStrictKeyword(name)) {
	        this.errorReporter.reportError(tree.location.start, (name + " is a reserved identifier"));
	      }
	    }}, {visit: function(tree, errorReporter) {
	      new $StrictParams(errorReporter).visitAny(tree);
	    }}, ParseTreeVisitor);
	  return {get StrictParams() {
	      return StrictParams;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/util/SourceRange.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/util/SourceRange.js";
	  var SourceRange = function SourceRange(start, end) {
	    this.start = start;
	    this.end = end;
	  };
	  ($traceurRuntime.createClass)(SourceRange, {toString: function() {
	      var str = this.start.source.contents;
	      return str.slice(this.start.offset, this.end.offset);
	    }}, {});
	  return {get SourceRange() {
	      return SourceRange;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/util/ErrorReporter.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/util/ErrorReporter.js";
	  var ErrorReporter = function ErrorReporter() {
	    this.hadError_ = false;
	  };
	  ($traceurRuntime.createClass)(ErrorReporter, {
	    reportError: function(location, message) {
	      this.hadError_ = true;
	      this.reportMessageInternal(location, message);
	    },
	    reportMessageInternal: function(location, message) {
	      if (location)
	        message = (location + ": " + message);
	      console.error(message);
	    },
	    hadError: function() {
	      return this.hadError_;
	    },
	    clearError: function() {
	      this.hadError_ = false;
	    }
	  }, {});
	  function format(location, text) {
	    var args = arguments[2];
	    var i = 0;
	    text = text.replace(/%./g, function(s) {
	      switch (s) {
	        case '%s':
	          return args && args[i++];
	        case '%%':
	          return '%';
	      }
	      return s;
	    });
	    if (location)
	      text = (location + ": " + text);
	    return text;
	  }
	  ;
	  ErrorReporter.format = format;
	  return {
	    get ErrorReporter() {
	      return ErrorReporter;
	    },
	    get format() {
	      return format;
	    }
	  };
	});
	System.registerModule("traceur@0.0.87/src/util/SyntaxErrorReporter.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/util/SyntaxErrorReporter.js";
	  var $__0 = System.get("traceur@0.0.87/src/util/ErrorReporter.js"),
	      ErrorReporter = $__0.ErrorReporter,
	      format = $__0.format;
	  var SyntaxErrorReporter = function SyntaxErrorReporter() {
	    $traceurRuntime.superConstructor($SyntaxErrorReporter).apply(this, arguments);
	    ;
	  };
	  var $SyntaxErrorReporter = SyntaxErrorReporter;
	  ($traceurRuntime.createClass)(SyntaxErrorReporter, {reportMessageInternal: function(location, message) {
	      var s = format(location, message);
	      throw new SyntaxError(s);
	    }}, {}, ErrorReporter);
	  return {get SyntaxErrorReporter() {
	      return SyntaxErrorReporter;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/syntax/KeywordToken.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/syntax/KeywordToken.js";
	  var STRICT_KEYWORD = System.get("traceur@0.0.87/src/syntax/Keywords.js").STRICT_KEYWORD;
	  var Token = System.get("traceur@0.0.87/src/syntax/Token.js").Token;
	  var KeywordToken = function KeywordToken(type, keywordType, location) {
	    $traceurRuntime.superConstructor($KeywordToken).call(this, type, location);
	    this.isStrictKeyword_ = keywordType === STRICT_KEYWORD;
	  };
	  var $KeywordToken = KeywordToken;
	  ($traceurRuntime.createClass)(KeywordToken, {
	    isKeyword: function() {
	      return true;
	    },
	    isStrictKeyword: function() {
	      return this.isStrictKeyword_;
	    }
	  }, {}, Token);
	  return {get KeywordToken() {
	      return KeywordToken;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/syntax/unicode-tables.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/syntax/unicode-tables.js";
	  var idStartTable = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 442, 443, 443, 444, 447, 448, 451, 452, 659, 660, 660, 661, 687, 688, 705, 710, 721, 736, 740, 748, 748, 750, 750, 880, 883, 884, 884, 886, 887, 890, 890, 891, 893, 895, 895, 902, 902, 904, 906, 908, 908, 910, 929, 931, 1013, 1015, 1153, 1162, 1327, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514, 1520, 1522, 1568, 1599, 1600, 1600, 1601, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774, 1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969, 1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088, 2088, 2112, 2136, 2208, 2226, 2308, 2361, 2365, 2365, 2384, 2384, 2392, 2401, 2417, 2417, 2418, 2432, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529, 2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784, 2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333, 3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634, 3635, 3648, 3653, 3654, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840, 3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186, 4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293, 4295, 4295, 4301, 4301, 4304, 4346, 4348, 4348, 4349, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992, 5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5873, 5880, 5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016, 6067, 6103, 6103, 6108, 6108, 6176, 6210, 6211, 6211, 6212, 6263, 6272, 6312, 6314, 6314, 6320, 6389, 6400, 6430, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688, 6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141, 7168, 7203, 7245, 7247, 7258, 7287, 7288, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424, 7467, 7468, 7530, 7531, 7543, 7544, 7544, 7545, 7578, 7579, 7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8472, 8472, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8494, 8494, 8495, 8500, 8501, 8504, 8505, 8505, 8508, 8511, 8517, 8521, 8526, 8526, 8544, 8578, 8579, 8580, 8581, 8584, 11264, 11310, 11312, 11358, 11360, 11387, 11388, 11389, 11390, 11492, 11499, 11502, 11506, 11507, 11520, 11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670, 11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728, 11734, 11736, 11742, 12293, 12293, 12294, 12294, 12295, 12295, 12321, 12329, 12337, 12341, 12344, 12346, 12347, 12347, 12348, 12348, 12353, 12438, 12443, 12444, 12445, 12446, 12447, 12447, 12449, 12538, 12540, 12542, 12543, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893, 19968, 40908, 40960, 40980, 40981, 40981, 40982, 42124, 42192, 42231, 42232, 42237, 42240, 42507, 42508, 42508, 42512, 42527, 42538, 42539, 42560, 42605, 42606, 42606, 42623, 42623, 42624, 42651, 42652, 42653, 42656, 42725, 42726, 42735, 42775, 42783, 42786, 42863, 42864, 42864, 42865, 42887, 42888, 42888, 42891, 42894, 42896, 42925, 42928, 42929, 42999, 42999, 43000, 43001, 43002, 43002, 43003, 43009, 43011, 43013, 43015, 43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259, 43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43488, 43492, 43494, 43494, 43495, 43503, 43514, 43518, 43520, 43560, 43584, 43586, 43588, 43595, 43616, 43631, 43632, 43632, 43633, 43638, 43642, 43642, 43646, 43695, 43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739, 43740, 43741, 43741, 43744, 43754, 43762, 43762, 43763, 43764, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43814, 43816, 43822, 43824, 43866, 43868, 43871, 43876, 43877, 43968, 44002, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285, 64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65391, 65392, 65392, 65393, 65437, 65438, 65439, 65440, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, 65536, 65547, 65549, 65574, 65576, 65594, 65596, 65597, 65599, 65613, 65616, 65629, 65664, 65786, 65856, 65908, 66176, 66204, 66208, 66256, 66304, 66335, 66352, 66368, 66369, 66369, 66370, 66377, 66378, 66378, 66384, 66421, 66432, 66461, 66464, 66499, 66504, 66511, 66513, 66517, 66560, 66639, 66640, 66717, 66816, 66855, 66864, 66915, 67072, 67382, 67392, 67413, 67424, 67431, 67584, 67589, 67592, 67592, 67594, 67637, 67639, 67640, 67644, 67644, 67647, 67669, 67680, 67702, 67712, 67742, 67840, 67861, 67872, 67897, 67968, 68023, 68030, 68031, 68096, 68096, 68112, 68115, 68117, 68119, 68121, 68147, 68192, 68220, 68224, 68252, 68288, 68295, 68297, 68324, 68352, 68405, 68416, 68437, 68448, 68466, 68480, 68497, 68608, 68680, 69635, 69687, 69763, 69807, 69840, 69864, 69891, 69926, 69968, 70002, 70006, 70006, 70019, 70066, 70081, 70084, 70106, 70106, 70144, 70161, 70163, 70187, 70320, 70366, 70405, 70412, 70415, 70416, 70419, 70440, 70442, 70448, 70450, 70451, 70453, 70457, 70461, 70461, 70493, 70497, 70784, 70831, 70852, 70853, 70855, 70855, 71040, 71086, 71168, 71215, 71236, 71236, 71296, 71338, 71840, 71903, 71935, 71935, 72384, 72440, 73728, 74648, 74752, 74862, 77824, 78894, 92160, 92728, 92736, 92766, 92880, 92909, 92928, 92975, 92992, 92995, 93027, 93047, 93053, 93071, 93952, 94020, 94032, 94032, 94099, 94111, 110592, 110593, 113664, 113770, 113776, 113788, 113792, 113800, 113808, 113817, 119808, 119892, 119894, 119964, 119966, 119967, 119970, 119970, 119973, 119974, 119977, 119980, 119982, 119993, 119995, 119995, 119997, 120003, 120005, 120069, 120071, 120074, 120077, 120084, 120086, 120092, 120094, 120121, 120123, 120126, 120128, 120132, 120134, 120134, 120138, 120144, 120146, 120485, 120488, 120512, 120514, 120538, 120540, 120570, 120572, 120596, 120598, 120628, 120630, 120654, 120656, 120686, 120688, 120712, 120714, 120744, 120746, 120770, 120772, 120779, 124928, 125124, 126464, 126467, 126469, 126495, 126497, 126498, 126500, 126500, 126503, 126503, 126505, 126514, 126516, 126519, 126521, 126521, 126523, 126523, 126530, 126530, 126535, 126535, 126537, 126537, 126539, 126539, 126541, 126543, 126545, 126546, 126548, 126548, 126551, 126551, 126553, 126553, 126555, 126555, 126557, 126557, 126559, 126559, 126561, 126562, 126564, 126564, 126567, 126570, 126572, 126578, 126580, 126583, 126585, 126588, 126590, 126590, 126592, 126601, 126603, 126619, 126625, 126627, 126629, 126633, 126635, 126651, 131072, 173782, 173824, 177972, 177984, 178205, 194560, 195101];
	  var idContinueTable = [183, 183, 768, 879, 903, 903, 1155, 1159, 1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1552, 1562, 1611, 1631, 1632, 1641, 1648, 1648, 1750, 1756, 1759, 1764, 1767, 1768, 1770, 1773, 1776, 1785, 1809, 1809, 1840, 1866, 1958, 1968, 1984, 1993, 2027, 2035, 2070, 2073, 2075, 2083, 2085, 2087, 2089, 2093, 2137, 2139, 2276, 2306, 2307, 2307, 2362, 2362, 2363, 2363, 2364, 2364, 2366, 2368, 2369, 2376, 2377, 2380, 2381, 2381, 2382, 2383, 2385, 2391, 2402, 2403, 2406, 2415, 2433, 2433, 2434, 2435, 2492, 2492, 2494, 2496, 2497, 2500, 2503, 2504, 2507, 2508, 2509, 2509, 2519, 2519, 2530, 2531, 2534, 2543, 2561, 2562, 2563, 2563, 2620, 2620, 2622, 2624, 2625, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2662, 2671, 2672, 2673, 2677, 2677, 2689, 2690, 2691, 2691, 2748, 2748, 2750, 2752, 2753, 2757, 2759, 2760, 2761, 2761, 2763, 2764, 2765, 2765, 2786, 2787, 2790, 2799, 2817, 2817, 2818, 2819, 2876, 2876, 2878, 2878, 2879, 2879, 2880, 2880, 2881, 2884, 2887, 2888, 2891, 2892, 2893, 2893, 2902, 2902, 2903, 2903, 2914, 2915, 2918, 2927, 2946, 2946, 3006, 3007, 3008, 3008, 3009, 3010, 3014, 3016, 3018, 3020, 3021, 3021, 3031, 3031, 3046, 3055, 3072, 3072, 3073, 3075, 3134, 3136, 3137, 3140, 3142, 3144, 3146, 3149, 3157, 3158, 3170, 3171, 3174, 3183, 3201, 3201, 3202, 3203, 3260, 3260, 3262, 3262, 3263, 3263, 3264, 3268, 3270, 3270, 3271, 3272, 3274, 3275, 3276, 3277, 3285, 3286, 3298, 3299, 3302, 3311, 3329, 3329, 3330, 3331, 3390, 3392, 3393, 3396, 3398, 3400, 3402, 3404, 3405, 3405, 3415, 3415, 3426, 3427, 3430, 3439, 3458, 3459, 3530, 3530, 3535, 3537, 3538, 3540, 3542, 3542, 3544, 3551, 3558, 3567, 3570, 3571, 3633, 3633, 3636, 3642, 3655, 3662, 3664, 3673, 3761, 3761, 3764, 3769, 3771, 3772, 3784, 3789, 3792, 3801, 3864, 3865, 3872, 3881, 3893, 3893, 3895, 3895, 3897, 3897, 3902, 3903, 3953, 3966, 3967, 3967, 3968, 3972, 3974, 3975, 3981, 3991, 3993, 4028, 4038, 4038, 4139, 4140, 4141, 4144, 4145, 4145, 4146, 4151, 4152, 4152, 4153, 4154, 4155, 4156, 4157, 4158, 4160, 4169, 4182, 4183, 4184, 4185, 4190, 4192, 4194, 4196, 4199, 4205, 4209, 4212, 4226, 4226, 4227, 4228, 4229, 4230, 4231, 4236, 4237, 4237, 4239, 4239, 4240, 4249, 4250, 4252, 4253, 4253, 4957, 4959, 4969, 4977, 5906, 5908, 5938, 5940, 5970, 5971, 6002, 6003, 6068, 6069, 6070, 6070, 6071, 6077, 6078, 6085, 6086, 6086, 6087, 6088, 6089, 6099, 6109, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6313, 6313, 6432, 6434, 6435, 6438, 6439, 6440, 6441, 6443, 6448, 6449, 6450, 6450, 6451, 6456, 6457, 6459, 6470, 6479, 6576, 6592, 6600, 6601, 6608, 6617, 6618, 6618, 6679, 6680, 6681, 6682, 6683, 6683, 6741, 6741, 6742, 6742, 6743, 6743, 6744, 6750, 6752, 6752, 6753, 6753, 6754, 6754, 6755, 6756, 6757, 6764, 6765, 6770, 6771, 6780, 6783, 6783, 6784, 6793, 6800, 6809, 6832, 6845, 6912, 6915, 6916, 6916, 6964, 6964, 6965, 6965, 6966, 6970, 6971, 6971, 6972, 6972, 6973, 6977, 6978, 6978, 6979, 6980, 6992, 7001, 7019, 7027, 7040, 7041, 7042, 7042, 7073, 7073, 7074, 7077, 7078, 7079, 7080, 7081, 7082, 7082, 7083, 7085, 7088, 7097, 7142, 7142, 7143, 7143, 7144, 7145, 7146, 7148, 7149, 7149, 7150, 7150, 7151, 7153, 7154, 7155, 7204, 7211, 7212, 7219, 7220, 7221, 7222, 7223, 7232, 7241, 7248, 7257, 7376, 7378, 7380, 7392, 7393, 7393, 7394, 7400, 7405, 7405, 7410, 7411, 7412, 7412, 7416, 7417, 7616, 7669, 7676, 7679, 8255, 8256, 8276, 8276, 8400, 8412, 8417, 8417, 8421, 8432, 11503, 11505, 11647, 11647, 11744, 11775, 12330, 12333, 12334, 12335, 12441, 12442, 42528, 42537, 42607, 42607, 42612, 42621, 42655, 42655, 42736, 42737, 43010, 43010, 43014, 43014, 43019, 43019, 43043, 43044, 43045, 43046, 43047, 43047, 43136, 43137, 43188, 43203, 43204, 43204, 43216, 43225, 43232, 43249, 43264, 43273, 43302, 43309, 43335, 43345, 43346, 43347, 43392, 43394, 43395, 43395, 43443, 43443, 43444, 43445, 43446, 43449, 43450, 43451, 43452, 43452, 43453, 43456, 43472, 43481, 43493, 43493, 43504, 43513, 43561, 43566, 43567, 43568, 43569, 43570, 43571, 43572, 43573, 43574, 43587, 43587, 43596, 43596, 43597, 43597, 43600, 43609, 43643, 43643, 43644, 43644, 43645, 43645, 43696, 43696, 43698, 43700, 43703, 43704, 43710, 43711, 43713, 43713, 43755, 43755, 43756, 43757, 43758, 43759, 43765, 43765, 43766, 43766, 44003, 44004, 44005, 44005, 44006, 44007, 44008, 44008, 44009, 44010, 44012, 44012, 44013, 44013, 44016, 44025, 64286, 64286, 65024, 65039, 65056, 65069, 65075, 65076, 65101, 65103, 65296, 65305, 65343, 65343, 66045, 66045, 66272, 66272, 66422, 66426, 66720, 66729, 68097, 68099, 68101, 68102, 68108, 68111, 68152, 68154, 68159, 68159, 68325, 68326, 69632, 69632, 69633, 69633, 69634, 69634, 69688, 69702, 69734, 69743, 69759, 69761, 69762, 69762, 69808, 69810, 69811, 69814, 69815, 69816, 69817, 69818, 69872, 69881, 69888, 69890, 69927, 69931, 69932, 69932, 69933, 69940, 69942, 69951, 70003, 70003, 70016, 70017, 70018, 70018, 70067, 70069, 70070, 70078, 70079, 70080, 70096, 70105, 70188, 70190, 70191, 70193, 70194, 70195, 70196, 70196, 70197, 70197, 70198, 70199, 70367, 70367, 70368, 70370, 70371, 70378, 70384, 70393, 70401, 70401, 70402, 70403, 70460, 70460, 70462, 70463, 70464, 70464, 70465, 70468, 70471, 70472, 70475, 70477, 70487, 70487, 70498, 70499, 70502, 70508, 70512, 70516, 70832, 70834, 70835, 70840, 70841, 70841, 70842, 70842, 70843, 70846, 70847, 70848, 70849, 70849, 70850, 70851, 70864, 70873, 71087, 71089, 71090, 71093, 71096, 71099, 71100, 71101, 71102, 71102, 71103, 71104, 71216, 71218, 71219, 71226, 71227, 71228, 71229, 71229, 71230, 71230, 71231, 71232, 71248, 71257, 71339, 71339, 71340, 71340, 71341, 71341, 71342, 71343, 71344, 71349, 71350, 71350, 71351, 71351, 71360, 71369, 71904, 71913, 92768, 92777, 92912, 92916, 92976, 92982, 93008, 93017, 94033, 94078, 94095, 94098, 113821, 113822, 119141, 119142, 119143, 119145, 119149, 119154, 119163, 119170, 119173, 119179, 119210, 119213, 119362, 119364, 120782, 120831, 125136, 125142, 917760, 917999];
	  return {
	    get idStartTable() {
	      return idStartTable;
	    },
	    get idContinueTable() {
	      return idContinueTable;
	    }
	  };
	});
	System.registerModule("traceur@0.0.87/src/syntax/Scanner.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/syntax/Scanner.js";
	  var IdentifierToken = System.get("traceur@0.0.87/src/syntax/IdentifierToken.js").IdentifierToken;
	  var KeywordToken = System.get("traceur@0.0.87/src/syntax/KeywordToken.js").KeywordToken;
	  var LiteralToken = System.get("traceur@0.0.87/src/syntax/LiteralToken.js").LiteralToken;
	  var Token = System.get("traceur@0.0.87/src/syntax/Token.js").Token;
	  var getKeywordType = System.get("traceur@0.0.87/src/syntax/Keywords.js").getKeywordType;
	  var $__5 = System.get("traceur@0.0.87/src/syntax/unicode-tables.js"),
	      idContinueTable = $__5.idContinueTable,
	      idStartTable = $__5.idStartTable;
	  var $__6 = System.get("traceur@0.0.87/src/syntax/TokenType.js"),
	      AMPERSAND = $__6.AMPERSAND,
	      AMPERSAND_EQUAL = $__6.AMPERSAND_EQUAL,
	      AND = $__6.AND,
	      ARROW = $__6.ARROW,
	      AT = $__6.AT,
	      BANG = $__6.BANG,
	      BAR = $__6.BAR,
	      BAR_EQUAL = $__6.BAR_EQUAL,
	      CARET = $__6.CARET,
	      CARET_EQUAL = $__6.CARET_EQUAL,
	      CLOSE_ANGLE = $__6.CLOSE_ANGLE,
	      CLOSE_CURLY = $__6.CLOSE_CURLY,
	      CLOSE_PAREN = $__6.CLOSE_PAREN,
	      CLOSE_SQUARE = $__6.CLOSE_SQUARE,
	      COLON = $__6.COLON,
	      COMMA = $__6.COMMA,
	      DOT_DOT_DOT = $__6.DOT_DOT_DOT,
	      END_OF_FILE = $__6.END_OF_FILE,
	      EQUAL = $__6.EQUAL,
	      EQUAL_EQUAL = $__6.EQUAL_EQUAL,
	      EQUAL_EQUAL_EQUAL = $__6.EQUAL_EQUAL_EQUAL,
	      ERROR = $__6.ERROR,
	      GREATER_EQUAL = $__6.GREATER_EQUAL,
	      LEFT_SHIFT = $__6.LEFT_SHIFT,
	      LEFT_SHIFT_EQUAL = $__6.LEFT_SHIFT_EQUAL,
	      LESS_EQUAL = $__6.LESS_EQUAL,
	      MINUS = $__6.MINUS,
	      MINUS_EQUAL = $__6.MINUS_EQUAL,
	      MINUS_MINUS = $__6.MINUS_MINUS,
	      NO_SUBSTITUTION_TEMPLATE = $__6.NO_SUBSTITUTION_TEMPLATE,
	      NOT_EQUAL = $__6.NOT_EQUAL,
	      NOT_EQUAL_EQUAL = $__6.NOT_EQUAL_EQUAL,
	      NUMBER = $__6.NUMBER,
	      OPEN_ANGLE = $__6.OPEN_ANGLE,
	      OPEN_CURLY = $__6.OPEN_CURLY,
	      OPEN_PAREN = $__6.OPEN_PAREN,
	      OPEN_SQUARE = $__6.OPEN_SQUARE,
	      OR = $__6.OR,
	      PERCENT = $__6.PERCENT,
	      PERCENT_EQUAL = $__6.PERCENT_EQUAL,
	      PERIOD = $__6.PERIOD,
	      PLUS = $__6.PLUS,
	      PLUS_EQUAL = $__6.PLUS_EQUAL,
	      PLUS_PLUS = $__6.PLUS_PLUS,
	      QUESTION = $__6.QUESTION,
	      REGULAR_EXPRESSION = $__6.REGULAR_EXPRESSION,
	      RIGHT_SHIFT = $__6.RIGHT_SHIFT,
	      RIGHT_SHIFT_EQUAL = $__6.RIGHT_SHIFT_EQUAL,
	      SEMI_COLON = $__6.SEMI_COLON,
	      SLASH = $__6.SLASH,
	      SLASH_EQUAL = $__6.SLASH_EQUAL,
	      STAR = $__6.STAR,
	      STAR_EQUAL = $__6.STAR_EQUAL,
	      STAR_STAR = $__6.STAR_STAR,
	      STAR_STAR_EQUAL = $__6.STAR_STAR_EQUAL,
	      STRING = $__6.STRING,
	      TEMPLATE_HEAD = $__6.TEMPLATE_HEAD,
	      TEMPLATE_MIDDLE = $__6.TEMPLATE_MIDDLE,
	      TEMPLATE_TAIL = $__6.TEMPLATE_TAIL,
	      TILDE = $__6.TILDE,
	      UNSIGNED_RIGHT_SHIFT = $__6.UNSIGNED_RIGHT_SHIFT,
	      UNSIGNED_RIGHT_SHIFT_EQUAL = $__6.UNSIGNED_RIGHT_SHIFT_EQUAL;
	  var isWhitespaceArray = [];
	  for (var i = 0; i < 128; i++) {
	    isWhitespaceArray[i] = i >= 9 && i <= 13 || i === 0x20;
	  }
	  function isWhitespace(code) {
	    if (code < 128)
	      return isWhitespaceArray[code];
	    switch (code) {
	      case 0xA0:
	      case 0xFEFF:
	      case 0x2028:
	      case 0x2029:
	        return true;
	    }
	    return false;
	  }
	  function isLineTerminator(code) {
	    switch (code) {
	      case 10:
	      case 13:
	      case 0x2028:
	      case 0x2029:
	        return true;
	    }
	    return false;
	  }
	  function isDecimalDigit(code) {
	    return code >= 48 && code <= 57;
	  }
	  var isHexDigitArray = [];
	  for (var i$__8 = 0; i$__8 < 128; i$__8++) {
	    isHexDigitArray[i$__8] = i$__8 >= 48 && i$__8 <= 57 || i$__8 >= 65 && i$__8 <= 70 || i$__8 >= 97 && i$__8 <= 102;
	  }
	  function isHexDigit(code) {
	    return code < 128 && isHexDigitArray[code];
	  }
	  function isBinaryDigit(code) {
	    return code === 48 || code === 49;
	  }
	  function isOctalDigit(code) {
	    return code >= 48 && code <= 55;
	  }
	  var isIdentifierStartArray = [];
	  for (var i$__9 = 0; i$__9 < 128; i$__9++) {
	    isIdentifierStartArray[i$__9] = i$__9 === 36 || i$__9 >= 65 && i$__9 <= 90 || i$__9 === 95 || i$__9 >= 97 && i$__9 <= 122;
	  }
	  function isIdentifierStart(code) {
	    return code < 128 ? isIdentifierStartArray[code] : inTable(idStartTable, code);
	  }
	  var isIdentifierPartArray = [];
	  for (var i$__10 = 0; i$__10 < 128; i$__10++) {
	    isIdentifierPartArray[i$__10] = isIdentifierStart(i$__10) || isDecimalDigit(i$__10);
	  }
	  function isIdentifierPart(code) {
	    return code < 128 ? isIdentifierPartArray[code] : inTable(idStartTable, code) || inTable(idContinueTable, code) || code === 8204 || code === 8205;
	  }
	  function inTable(table, code) {
	    for (var i = 0; i < table.length; ) {
	      if (code < table[i++])
	        return false;
	      if (code <= table[i++])
	        return true;
	    }
	    return false;
	  }
	  function isRegularExpressionChar(code) {
	    switch (code) {
	      case 47:
	        return false;
	      case 91:
	      case 92:
	        return true;
	    }
	    return !isLineTerminator(code);
	  }
	  function isRegularExpressionFirstChar(code) {
	    return isRegularExpressionChar(code) && code !== 42;
	  }
	  var index,
	      input,
	      length,
	      token,
	      lastToken,
	      lookaheadToken,
	      currentCharCode,
	      lineNumberTable,
	      errorReporter,
	      currentParser,
	      options;
	  var Scanner = function Scanner(reporter, file, parser, traceurOptions) {
	    errorReporter = reporter;
	    lineNumberTable = file.lineNumberTable;
	    input = file.contents;
	    length = file.contents.length;
	    this.index = 0;
	    currentParser = parser;
	    options = traceurOptions;
	  };
	  ($traceurRuntime.createClass)(Scanner, {
	    get lastToken() {
	      return lastToken;
	    },
	    getPosition: function() {
	      return getPosition(getOffset());
	    },
	    nextRegularExpressionLiteralToken: function() {
	      lastToken = nextRegularExpressionLiteralToken();
	      token = scanToken();
	      return lastToken;
	    },
	    nextTemplateLiteralToken: function() {
	      var t = nextTemplateLiteralToken();
	      token = scanToken();
	      return t;
	    },
	    nextCloseAngle: function() {
	      switch (token.type) {
	        case GREATER_EQUAL:
	        case RIGHT_SHIFT:
	        case RIGHT_SHIFT_EQUAL:
	        case UNSIGNED_RIGHT_SHIFT:
	        case UNSIGNED_RIGHT_SHIFT_EQUAL:
	          this.index -= token.type.length - 1;
	          lastToken = createToken(CLOSE_ANGLE, index);
	          token = scanToken();
	          return lastToken;
	      }
	      return nextToken();
	    },
	    nextToken: function() {
	      return nextToken();
	    },
	    peekToken: function(opt_index) {
	      return opt_index ? peekTokenLookahead() : peekToken();
	    },
	    peekTokenNoLineTerminator: function() {
	      return peekTokenNoLineTerminator();
	    },
	    isAtEnd: function() {
	      return isAtEnd();
	    },
	    set index(i) {
	      index = i;
	      lastToken = null;
	      token = null;
	      lookaheadToken = null;
	      updateCurrentCharCode();
	    },
	    get index() {
	      return index;
	    }
	  }, {});
	  function getPosition(offset) {
	    return lineNumberTable.getSourcePosition(offset);
	  }
	  function getTokenRange(startOffset) {
	    return lineNumberTable.getSourceRange(startOffset, index);
	  }
	  function getOffset() {
	    return token ? token.location.start.offset : index;
	  }
	  function nextRegularExpressionLiteralToken() {
	    var beginIndex = index - token.toString().length;
	    if (!(token.type === SLASH_EQUAL && currentCharCode === 47) && !skipRegularExpressionBody()) {
	      return new LiteralToken(REGULAR_EXPRESSION, getTokenString(beginIndex), getTokenRange(beginIndex));
	    }
	    if (currentCharCode !== 47) {
	      reportError('Expected \'/\' in regular expression literal');
	      return new LiteralToken(REGULAR_EXPRESSION, getTokenString(beginIndex), getTokenRange(beginIndex));
	    }
	    next();
	    while (isIdentifierPart(currentCharCode)) {
	      next();
	    }
	    return new LiteralToken(REGULAR_EXPRESSION, getTokenString(beginIndex), getTokenRange(beginIndex));
	  }
	  function skipRegularExpressionBody() {
	    if (!isRegularExpressionFirstChar(currentCharCode)) {
	      reportError('Expected regular expression first char');
	      return false;
	    }
	    while (!isAtEnd() && isRegularExpressionChar(currentCharCode)) {
	      if (!skipRegularExpressionChar())
	        return false;
	    }
	    return true;
	  }
	  function skipRegularExpressionChar() {
	    switch (currentCharCode) {
	      case 92:
	        return skipRegularExpressionBackslashSequence();
	      case 91:
	        return skipRegularExpressionClass();
	      default:
	        next();
	        return true;
	    }
	  }
	  function skipRegularExpressionBackslashSequence() {
	    next();
	    if (isLineTerminator(currentCharCode) || isAtEnd()) {
	      reportError('New line not allowed in regular expression literal');
	      return false;
	    }
	    next();
	    return true;
	  }
	  function skipRegularExpressionClass() {
	    next();
	    while (!isAtEnd() && peekRegularExpressionClassChar()) {
	      if (!skipRegularExpressionClassChar()) {
	        return false;
	      }
	    }
	    if (currentCharCode !== 93) {
	      reportError('\']\' expected');
	      return false;
	    }
	    next();
	    return true;
	  }
	  function peekRegularExpressionClassChar() {
	    return currentCharCode !== 93 && !isLineTerminator(currentCharCode);
	  }
	  function skipRegularExpressionClassChar() {
	    if (currentCharCode === 92) {
	      return skipRegularExpressionBackslashSequence();
	    }
	    next();
	    return true;
	  }
	  function skipTemplateCharacter() {
	    while (!isAtEnd()) {
	      switch (currentCharCode) {
	        case 96:
	          return ;
	        case 92:
	          skipStringLiteralEscapeSequence();
	          break;
	        case 36:
	          var code = input.charCodeAt(index + 1);
	          if (code === 123)
	            return ;
	        default:
	          next();
	      }
	    }
	  }
	  function scanTemplateStart(beginIndex) {
	    if (isAtEnd()) {
	      reportError('Unterminated template literal');
	      return lastToken = createToken(END_OF_FILE, beginIndex);
	    }
	    return nextTemplateLiteralTokenShared(NO_SUBSTITUTION_TEMPLATE, TEMPLATE_HEAD);
	  }
	  function nextTemplateLiteralToken() {
	    if (isAtEnd()) {
	      reportError('Expected \'}\' after expression in template literal');
	      return createToken(END_OF_FILE, index);
	    }
	    if (token.type !== CLOSE_CURLY) {
	      reportError('Expected \'}\' after expression in template literal');
	      return createToken(ERROR, index);
	    }
	    return nextTemplateLiteralTokenShared(TEMPLATE_TAIL, TEMPLATE_MIDDLE);
	  }
	  function nextTemplateLiteralTokenShared(endType, middleType) {
	    var beginIndex = index;
	    skipTemplateCharacter();
	    if (isAtEnd()) {
	      reportError('Unterminated template literal');
	      return createToken(ERROR, beginIndex);
	    }
	    var value = getTokenString(beginIndex);
	    switch (currentCharCode) {
	      case 96:
	        next();
	        return lastToken = new LiteralToken(endType, value, getTokenRange(beginIndex - 1));
	      case 36:
	        next();
	        next();
	        return lastToken = new LiteralToken(middleType, value, getTokenRange(beginIndex - 1));
	    }
	  }
	  function nextToken() {
	    var t = peekToken();
	    token = lookaheadToken || scanToken();
	    lookaheadToken = null;
	    lastToken = t;
	    return t;
	  }
	  function peekTokenNoLineTerminator() {
	    var t = peekToken();
	    var start = lastToken.location.end.offset;
	    var end = t.location.start.offset;
	    for (var i = start; i < end; i++) {
	      var code = input.charCodeAt(i);
	      if (isLineTerminator(code))
	        return null;
	      if (code === 47) {
	        code = input.charCodeAt(++i);
	        if (code === 47)
	          return null;
	        i = input.indexOf('*/', i) + 2;
	      }
	    }
	    return t;
	  }
	  function peekToken() {
	    return token || (token = scanToken());
	  }
	  function peekTokenLookahead() {
	    if (!token)
	      token = scanToken();
	    if (!lookaheadToken)
	      lookaheadToken = scanToken();
	    return lookaheadToken;
	  }
	  function skipWhitespace() {
	    while (!isAtEnd() && peekWhitespace()) {
	      next();
	    }
	  }
	  function peekWhitespace() {
	    return isWhitespace(currentCharCode);
	  }
	  function skipComments() {
	    while (skipComment()) {}
	  }
	  function skipComment() {
	    skipWhitespace();
	    var code = currentCharCode;
	    if (code === 47) {
	      code = input.charCodeAt(index + 1);
	      switch (code) {
	        case 47:
	          skipSingleLineComment();
	          return true;
	        case 42:
	          skipMultiLineComment();
	          return true;
	      }
	    }
	    return false;
	  }
	  function commentCallback(start, index) {
	    if (options.commentCallback)
	      currentParser.handleComment(lineNumberTable.getSourceRange(start, index));
	  }
	  function skipSingleLineComment() {
	    var start = index;
	    index += 2;
	    while (!isAtEnd() && !isLineTerminator(input.charCodeAt(index++))) {}
	    updateCurrentCharCode();
	    commentCallback(start, index);
	  }
	  function skipMultiLineComment() {
	    var start = index;
	    var i = input.indexOf('*/', index + 2);
	    if (i !== -1)
	      index = i + 2;
	    else
	      index = length;
	    updateCurrentCharCode();
	    commentCallback(start, index);
	  }
	  function scanToken() {
	    skipComments();
	    var beginIndex = index;
	    if (isAtEnd())
	      return createToken(END_OF_FILE, beginIndex);
	    var code = currentCharCode;
	    next();
	    switch (code) {
	      case 123:
	        return createToken(OPEN_CURLY, beginIndex);
	      case 125:
	        return createToken(CLOSE_CURLY, beginIndex);
	      case 40:
	        return createToken(OPEN_PAREN, beginIndex);
	      case 41:
	        return createToken(CLOSE_PAREN, beginIndex);
	      case 91:
	        return createToken(OPEN_SQUARE, beginIndex);
	      case 93:
	        return createToken(CLOSE_SQUARE, beginIndex);
	      case 46:
	        switch (currentCharCode) {
	          case 46:
	            if (input.charCodeAt(index + 1) === 46) {
	              next();
	              next();
	              return createToken(DOT_DOT_DOT, beginIndex);
	            }
	            break;
	          default:
	            if (isDecimalDigit(currentCharCode))
	              return scanNumberPostPeriod(beginIndex);
	        }
	        return createToken(PERIOD, beginIndex);
	      case 59:
	        return createToken(SEMI_COLON, beginIndex);
	      case 44:
	        return createToken(COMMA, beginIndex);
	      case 126:
	        return createToken(TILDE, beginIndex);
	      case 63:
	        return createToken(QUESTION, beginIndex);
	      case 58:
	        return createToken(COLON, beginIndex);
	      case 60:
	        switch (currentCharCode) {
	          case 60:
	            next();
	            if (currentCharCode === 61) {
	              next();
	              return createToken(LEFT_SHIFT_EQUAL, beginIndex);
	            }
	            return createToken(LEFT_SHIFT, beginIndex);
	          case 61:
	            next();
	            return createToken(LESS_EQUAL, beginIndex);
	          default:
	            return createToken(OPEN_ANGLE, beginIndex);
	        }
	      case 62:
	        switch (currentCharCode) {
	          case 62:
	            next();
	            switch (currentCharCode) {
	              case 61:
	                next();
	                return createToken(RIGHT_SHIFT_EQUAL, beginIndex);
	              case 62:
	                next();
	                if (currentCharCode === 61) {
	                  next();
	                  return createToken(UNSIGNED_RIGHT_SHIFT_EQUAL, beginIndex);
	                }
	                return createToken(UNSIGNED_RIGHT_SHIFT, beginIndex);
	              default:
	                return createToken(RIGHT_SHIFT, beginIndex);
	            }
	          case 61:
	            next();
	            return createToken(GREATER_EQUAL, beginIndex);
	          default:
	            return createToken(CLOSE_ANGLE, beginIndex);
	        }
	      case 61:
	        if (currentCharCode === 61) {
	          next();
	          if (currentCharCode === 61) {
	            next();
	            return createToken(EQUAL_EQUAL_EQUAL, beginIndex);
	          }
	          return createToken(EQUAL_EQUAL, beginIndex);
	        }
	        if (currentCharCode === 62 && options.arrowFunctions) {
	          next();
	          return createToken(ARROW, beginIndex);
	        }
	        return createToken(EQUAL, beginIndex);
	      case 33:
	        if (currentCharCode === 61) {
	          next();
	          if (currentCharCode === 61) {
	            next();
	            return createToken(NOT_EQUAL_EQUAL, beginIndex);
	          }
	          return createToken(NOT_EQUAL, beginIndex);
	        }
	        return createToken(BANG, beginIndex);
	      case 42:
	        if (currentCharCode === 61) {
	          next();
	          return createToken(STAR_EQUAL, beginIndex);
	        }
	        if (currentCharCode === 42 && options.exponentiation) {
	          next();
	          if (currentCharCode === 61) {
	            next();
	            return createToken(STAR_STAR_EQUAL, beginIndex);
	          }
	          return createToken(STAR_STAR, beginIndex);
	        }
	        return createToken(STAR, beginIndex);
	      case 37:
	        if (currentCharCode === 61) {
	          next();
	          return createToken(PERCENT_EQUAL, beginIndex);
	        }
	        return createToken(PERCENT, beginIndex);
	      case 94:
	        if (currentCharCode === 61) {
	          next();
	          return createToken(CARET_EQUAL, beginIndex);
	        }
	        return createToken(CARET, beginIndex);
	      case 47:
	        if (currentCharCode === 61) {
	          next();
	          return createToken(SLASH_EQUAL, beginIndex);
	        }
	        return createToken(SLASH, beginIndex);
	      case 43:
	        switch (currentCharCode) {
	          case 43:
	            next();
	            return createToken(PLUS_PLUS, beginIndex);
	          case 61:
	            next();
	            return createToken(PLUS_EQUAL, beginIndex);
	          default:
	            return createToken(PLUS, beginIndex);
	        }
	      case 45:
	        switch (currentCharCode) {
	          case 45:
	            next();
	            return createToken(MINUS_MINUS, beginIndex);
	          case 61:
	            next();
	            return createToken(MINUS_EQUAL, beginIndex);
	          default:
	            return createToken(MINUS, beginIndex);
	        }
	      case 38:
	        switch (currentCharCode) {
	          case 38:
	            next();
	            return createToken(AND, beginIndex);
	          case 61:
	            next();
	            return createToken(AMPERSAND_EQUAL, beginIndex);
	          default:
	            return createToken(AMPERSAND, beginIndex);
	        }
	      case 124:
	        switch (currentCharCode) {
	          case 124:
	            next();
	            return createToken(OR, beginIndex);
	          case 61:
	            next();
	            return createToken(BAR_EQUAL, beginIndex);
	          default:
	            return createToken(BAR, beginIndex);
	        }
	      case 96:
	        return scanTemplateStart(beginIndex);
	      case 64:
	        return createToken(AT, beginIndex);
	      case 48:
	        return scanPostZero(beginIndex);
	      case 49:
	      case 50:
	      case 51:
	      case 52:
	      case 53:
	      case 54:
	      case 55:
	      case 56:
	      case 57:
	        return scanPostDigit(beginIndex);
	      case 34:
	      case 39:
	        return scanStringLiteral(beginIndex, code);
	      default:
	        return scanIdentifierOrKeyword(beginIndex, code);
	    }
	  }
	  function scanNumberPostPeriod(beginIndex) {
	    skipDecimalDigits();
	    return scanExponentOfNumericLiteral(beginIndex);
	  }
	  function scanPostDigit(beginIndex) {
	    skipDecimalDigits();
	    return scanFractionalNumericLiteral(beginIndex);
	  }
	  function scanPostZero(beginIndex) {
	    switch (currentCharCode) {
	      case 46:
	        return scanFractionalNumericLiteral(beginIndex);
	      case 88:
	      case 120:
	        next();
	        if (!isHexDigit(currentCharCode)) {
	          reportError('Hex Integer Literal must contain at least one digit');
	        }
	        skipHexDigits();
	        return new LiteralToken(NUMBER, getTokenString(beginIndex), getTokenRange(beginIndex));
	      case 66:
	      case 98:
	        if (!options.numericLiterals)
	          break;
	        next();
	        if (!isBinaryDigit(currentCharCode)) {
	          reportError('Binary Integer Literal must contain at least one digit');
	        }
	        skipBinaryDigits();
	        return new LiteralToken(NUMBER, getTokenString(beginIndex), getTokenRange(beginIndex));
	      case 79:
	      case 111:
	        if (!options.numericLiterals)
	          break;
	        next();
	        if (!isOctalDigit(currentCharCode)) {
	          reportError('Octal Integer Literal must contain at least one digit');
	        }
	        skipOctalDigits();
	        return new LiteralToken(NUMBER, getTokenString(beginIndex), getTokenRange(beginIndex));
	      case 48:
	      case 49:
	      case 50:
	      case 51:
	      case 52:
	      case 53:
	      case 54:
	      case 55:
	      case 56:
	      case 57:
	        return scanPostDigit(beginIndex);
	    }
	    return new LiteralToken(NUMBER, getTokenString(beginIndex), getTokenRange(beginIndex));
	  }
	  function createToken(type, beginIndex) {
	    return new Token(type, getTokenRange(beginIndex));
	  }
	  function readUnicodeEscapeSequence() {
	    var beginIndex = index;
	    if (currentCharCode === 117) {
	      next();
	      if (skipHexDigit() && skipHexDigit() && skipHexDigit() && skipHexDigit()) {
	        return parseInt(getTokenString(beginIndex + 1), 16);
	      }
	    }
	    reportError('Invalid unicode escape sequence in identifier', beginIndex - 1);
	    return 0;
	  }
	  function scanIdentifierOrKeyword(beginIndex, code) {
	    var escapedCharCodes;
	    if (code === 92) {
	      code = readUnicodeEscapeSequence();
	      escapedCharCodes = [code];
	    }
	    if (!isIdentifierStart(code)) {
	      reportError(("Character code '" + code + "' is not a valid identifier start char"), beginIndex);
	      return createToken(ERROR, beginIndex);
	    }
	    for (; ; ) {
	      code = currentCharCode;
	      if (isIdentifierPart(code)) {
	        next();
	      } else if (code === 92) {
	        next();
	        code = readUnicodeEscapeSequence();
	        if (!escapedCharCodes)
	          escapedCharCodes = [];
	        escapedCharCodes.push(code);
	        if (!isIdentifierPart(code))
	          return createToken(ERROR, beginIndex);
	      } else {
	        break;
	      }
	    }
	    var value = input.slice(beginIndex, index);
	    var keywordType = getKeywordType(value);
	    if (keywordType)
	      return new KeywordToken(value, keywordType, getTokenRange(beginIndex));
	    if (escapedCharCodes) {
	      var i = 0;
	      value = value.replace(/\\u..../g, function(s) {
	        return String.fromCharCode(escapedCharCodes[i++]);
	      });
	    }
	    return new IdentifierToken(getTokenRange(beginIndex), value);
	  }
	  function scanStringLiteral(beginIndex, terminator) {
	    while (peekStringLiteralChar(terminator)) {
	      if (!skipStringLiteralChar()) {
	        return new LiteralToken(STRING, getTokenString(beginIndex), getTokenRange(beginIndex));
	      }
	    }
	    if (currentCharCode !== terminator) {
	      reportError('Unterminated String Literal', beginIndex);
	    } else {
	      next();
	    }
	    return new LiteralToken(STRING, getTokenString(beginIndex), getTokenRange(beginIndex));
	  }
	  function getTokenString(beginIndex) {
	    return input.substring(beginIndex, index);
	  }
	  function peekStringLiteralChar(terminator) {
	    return !isAtEnd() && currentCharCode !== terminator && !isLineTerminator(currentCharCode);
	  }
	  function skipStringLiteralChar() {
	    if (currentCharCode === 92) {
	      return skipStringLiteralEscapeSequence();
	    }
	    next();
	    return true;
	  }
	  function skipStringLiteralEscapeSequence() {
	    next();
	    if (isAtEnd()) {
	      reportError('Unterminated string literal escape sequence');
	      return false;
	    }
	    if (isLineTerminator(currentCharCode)) {
	      skipLineTerminator();
	      return true;
	    }
	    var code = currentCharCode;
	    next();
	    switch (code) {
	      case 39:
	      case 34:
	      case 92:
	      case 98:
	      case 102:
	      case 110:
	      case 114:
	      case 116:
	      case 118:
	      case 48:
	        return true;
	      case 120:
	        return skipHexDigit() && skipHexDigit();
	      case 117:
	        return skipUnicodeEscapeSequence();
	      default:
	        return true;
	    }
	  }
	  function skipUnicodeEscapeSequence() {
	    if (currentCharCode === 123 && options.unicodeEscapeSequences) {
	      next();
	      var beginIndex = index;
	      if (!isHexDigit(currentCharCode)) {
	        reportError('Hex digit expected');
	        return false;
	      }
	      skipHexDigits();
	      if (currentCharCode !== 125) {
	        reportError('Hex digit expected');
	        return false;
	      }
	      var codePoint = getTokenString(beginIndex, index);
	      if (parseInt(codePoint, 16) > 0x10FFFF) {
	        reportError('The code point in a Unicode escape sequence cannot exceed 10FFFF');
	        return false;
	      }
	      next();
	      return true;
	    }
	    return skipHexDigit() && skipHexDigit() && skipHexDigit() && skipHexDigit();
	  }
	  function skipHexDigit() {
	    if (!isHexDigit(currentCharCode)) {
	      reportError('Hex digit expected');
	      return false;
	    }
	    next();
	    return true;
	  }
	  function skipLineTerminator() {
	    var first = currentCharCode;
	    next();
	    if (first === 13 && currentCharCode === 10) {
	      next();
	    }
	  }
	  function scanFractionalNumericLiteral(beginIndex) {
	    if (currentCharCode === 46) {
	      next();
	      skipDecimalDigits();
	    }
	    return scanExponentOfNumericLiteral(beginIndex);
	  }
	  function scanExponentOfNumericLiteral(beginIndex) {
	    switch (currentCharCode) {
	      case 101:
	      case 69:
	        next();
	        switch (currentCharCode) {
	          case 43:
	          case 45:
	            next();
	            break;
	        }
	        if (!isDecimalDigit(currentCharCode)) {
	          reportError('Exponent part must contain at least one digit');
	        }
	        skipDecimalDigits();
	        break;
	      default:
	        break;
	    }
	    return new LiteralToken(NUMBER, getTokenString(beginIndex), getTokenRange(beginIndex));
	  }
	  function skipDecimalDigits() {
	    while (isDecimalDigit(currentCharCode)) {
	      next();
	    }
	  }
	  function skipHexDigits() {
	    while (isHexDigit(currentCharCode)) {
	      next();
	    }
	  }
	  function skipBinaryDigits() {
	    while (isBinaryDigit(currentCharCode)) {
	      next();
	    }
	  }
	  function skipOctalDigits() {
	    while (isOctalDigit(currentCharCode)) {
	      next();
	    }
	  }
	  function isAtEnd() {
	    return index === length;
	  }
	  function next() {
	    index++;
	    updateCurrentCharCode();
	  }
	  function updateCurrentCharCode() {
	    currentCharCode = input.charCodeAt(index);
	  }
	  function reportError(message) {
	    var indexArg = arguments[1] !== (void 0) ? arguments[1] : index;
	    var position = getPosition(indexArg);
	    errorReporter.reportError(position, message);
	  }
	  return {
	    get isWhitespace() {
	      return isWhitespace;
	    },
	    get isLineTerminator() {
	      return isLineTerminator;
	    },
	    get isIdentifierPart() {
	      return isIdentifierPart;
	    },
	    get Scanner() {
	      return Scanner;
	    }
	  };
	});
	System.registerModule("traceur@0.0.87/src/syntax/Parser.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/syntax/Parser.js";
	  var FindVisitor = System.get("traceur@0.0.87/src/codegeneration/FindVisitor.js").FindVisitor;
	  var IdentifierToken = System.get("traceur@0.0.87/src/syntax/IdentifierToken.js").IdentifierToken;
	  var $__2 = System.get("traceur@0.0.87/src/syntax/trees/ParseTreeType.js"),
	      ARRAY_LITERAL_EXPRESSION = $__2.ARRAY_LITERAL_EXPRESSION,
	      BINDING_IDENTIFIER = $__2.BINDING_IDENTIFIER,
	      CALL_EXPRESSION = $__2.CALL_EXPRESSION,
	      COMPUTED_PROPERTY_NAME = $__2.COMPUTED_PROPERTY_NAME,
	      COVER_FORMALS = $__2.COVER_FORMALS,
	      FORMAL_PARAMETER_LIST = $__2.FORMAL_PARAMETER_LIST,
	      IDENTIFIER_EXPRESSION = $__2.IDENTIFIER_EXPRESSION,
	      LITERAL_PROPERTY_NAME = $__2.LITERAL_PROPERTY_NAME,
	      OBJECT_LITERAL_EXPRESSION = $__2.OBJECT_LITERAL_EXPRESSION,
	      REST_PARAMETER = $__2.REST_PARAMETER,
	      SYNTAX_ERROR_TREE = $__2.SYNTAX_ERROR_TREE;
	  var Options = System.get("traceur@0.0.87/src/Options.js").Options;
	  var $__4 = System.get("traceur@0.0.87/src/syntax/PredefinedName.js"),
	      AS = $__4.AS,
	      ASYNC = $__4.ASYNC,
	      ASYNC_STAR = $__4.ASYNC_STAR,
	      AWAIT = $__4.AWAIT,
	      CONSTRUCTOR = $__4.CONSTRUCTOR,
	      FROM = $__4.FROM,
	      GET = $__4.GET,
	      OF = $__4.OF,
	      ON = $__4.ON,
	      SET = $__4.SET;
	  var SyntaxErrorReporter = System.get("traceur@0.0.87/src/util/SyntaxErrorReporter.js").SyntaxErrorReporter;
	  var Scanner = System.get("traceur@0.0.87/src/syntax/Scanner.js").Scanner;
	  var SourceRange = System.get("traceur@0.0.87/src/util/SourceRange.js").SourceRange;
	  var StrictParams = System.get("traceur@0.0.87/src/staticsemantics/StrictParams.js").StrictParams;
	  var $__9 = System.get("traceur@0.0.87/src/syntax/Token.js"),
	      Token = $__9.Token,
	      isAssignmentOperator = $__9.isAssignmentOperator;
	  var getKeywordType = System.get("traceur@0.0.87/src/syntax/Keywords.js").getKeywordType;
	  var validateConstructor = System.get("traceur@0.0.87/src/semantics/ConstructorValidator.js").validateConstructor;
	  var $__12 = System.get("traceur@0.0.87/src/syntax/TokenType.js"),
	      AMPERSAND = $__12.AMPERSAND,
	      AND = $__12.AND,
	      ARROW = $__12.ARROW,
	      AT = $__12.AT,
	      BANG = $__12.BANG,
	      BAR = $__12.BAR,
	      BREAK = $__12.BREAK,
	      CARET = $__12.CARET,
	      CASE = $__12.CASE,
	      CATCH = $__12.CATCH,
	      CLASS = $__12.CLASS,
	      CLOSE_ANGLE = $__12.CLOSE_ANGLE,
	      CLOSE_CURLY = $__12.CLOSE_CURLY,
	      CLOSE_PAREN = $__12.CLOSE_PAREN,
	      CLOSE_SQUARE = $__12.CLOSE_SQUARE,
	      COLON = $__12.COLON,
	      COMMA = $__12.COMMA,
	      CONST = $__12.CONST,
	      CONTINUE = $__12.CONTINUE,
	      DEBUGGER = $__12.DEBUGGER,
	      DEFAULT = $__12.DEFAULT,
	      DELETE = $__12.DELETE,
	      DO = $__12.DO,
	      DOT_DOT_DOT = $__12.DOT_DOT_DOT,
	      ELSE = $__12.ELSE,
	      END_OF_FILE = $__12.END_OF_FILE,
	      EQUAL = $__12.EQUAL,
	      EQUAL_EQUAL = $__12.EQUAL_EQUAL,
	      EQUAL_EQUAL_EQUAL = $__12.EQUAL_EQUAL_EQUAL,
	      ERROR = $__12.ERROR,
	      EXPORT = $__12.EXPORT,
	      EXTENDS = $__12.EXTENDS,
	      FALSE = $__12.FALSE,
	      FINALLY = $__12.FINALLY,
	      FOR = $__12.FOR,
	      FUNCTION = $__12.FUNCTION,
	      GREATER_EQUAL = $__12.GREATER_EQUAL,
	      IDENTIFIER = $__12.IDENTIFIER,
	      IF = $__12.IF,
	      IMPLEMENTS = $__12.IMPLEMENTS,
	      IMPORT = $__12.IMPORT,
	      IN = $__12.IN,
	      INSTANCEOF = $__12.INSTANCEOF,
	      INTERFACE = $__12.INTERFACE,
	      LEFT_SHIFT = $__12.LEFT_SHIFT,
	      LESS_EQUAL = $__12.LESS_EQUAL,
	      LET = $__12.LET,
	      MINUS = $__12.MINUS,
	      MINUS_MINUS = $__12.MINUS_MINUS,
	      NEW = $__12.NEW,
	      NO_SUBSTITUTION_TEMPLATE = $__12.NO_SUBSTITUTION_TEMPLATE,
	      NOT_EQUAL = $__12.NOT_EQUAL,
	      NOT_EQUAL_EQUAL = $__12.NOT_EQUAL_EQUAL,
	      NULL = $__12.NULL,
	      NUMBER = $__12.NUMBER,
	      OPEN_ANGLE = $__12.OPEN_ANGLE,
	      OPEN_CURLY = $__12.OPEN_CURLY,
	      OPEN_PAREN = $__12.OPEN_PAREN,
	      OPEN_SQUARE = $__12.OPEN_SQUARE,
	      OR = $__12.OR,
	      PACKAGE = $__12.PACKAGE,
	      PERCENT = $__12.PERCENT,
	      PERIOD = $__12.PERIOD,
	      PLUS = $__12.PLUS,
	      PLUS_PLUS = $__12.PLUS_PLUS,
	      PRIVATE = $__12.PRIVATE,
	      PROTECTED = $__12.PROTECTED,
	      PUBLIC = $__12.PUBLIC,
	      QUESTION = $__12.QUESTION,
	      RETURN = $__12.RETURN,
	      RIGHT_SHIFT = $__12.RIGHT_SHIFT,
	      SEMI_COLON = $__12.SEMI_COLON,
	      SLASH = $__12.SLASH,
	      SLASH_EQUAL = $__12.SLASH_EQUAL,
	      STAR = $__12.STAR,
	      STAR_STAR = $__12.STAR_STAR,
	      STATIC = $__12.STATIC,
	      STRING = $__12.STRING,
	      SUPER = $__12.SUPER,
	      SWITCH = $__12.SWITCH,
	      TEMPLATE_HEAD = $__12.TEMPLATE_HEAD,
	      TEMPLATE_TAIL = $__12.TEMPLATE_TAIL,
	      THIS = $__12.THIS,
	      THROW = $__12.THROW,
	      TILDE = $__12.TILDE,
	      TRUE = $__12.TRUE,
	      TRY = $__12.TRY,
	      TYPEOF = $__12.TYPEOF,
	      UNSIGNED_RIGHT_SHIFT = $__12.UNSIGNED_RIGHT_SHIFT,
	      VAR = $__12.VAR,
	      VOID = $__12.VOID,
	      WHILE = $__12.WHILE,
	      WITH = $__12.WITH,
	      YIELD = $__12.YIELD;
	  var $__13 = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js"),
	      ArgumentList = $__13.ArgumentList,
	      ArrayComprehension = $__13.ArrayComprehension,
	      ArrayLiteralExpression = $__13.ArrayLiteralExpression,
	      ArrayPattern = $__13.ArrayPattern,
	      ArrayType = $__13.ArrayType,
	      ArrowFunctionExpression = $__13.ArrowFunctionExpression,
	      AssignmentElement = $__13.AssignmentElement,
	      AwaitExpression = $__13.AwaitExpression,
	      BinaryExpression = $__13.BinaryExpression,
	      BindingElement = $__13.BindingElement,
	      BindingIdentifier = $__13.BindingIdentifier,
	      Block = $__13.Block,
	      BreakStatement = $__13.BreakStatement,
	      CallExpression = $__13.CallExpression,
	      CallSignature = $__13.CallSignature,
	      CaseClause = $__13.CaseClause,
	      Catch = $__13.Catch,
	      ClassDeclaration = $__13.ClassDeclaration,
	      ClassExpression = $__13.ClassExpression,
	      CommaExpression = $__13.CommaExpression,
	      ComprehensionFor = $__13.ComprehensionFor,
	      ComprehensionIf = $__13.ComprehensionIf,
	      ComputedPropertyName = $__13.ComputedPropertyName,
	      ConditionalExpression = $__13.ConditionalExpression,
	      ConstructSignature = $__13.ConstructSignature,
	      ConstructorType = $__13.ConstructorType,
	      ContinueStatement = $__13.ContinueStatement,
	      CoverFormals = $__13.CoverFormals,
	      CoverInitializedName = $__13.CoverInitializedName,
	      DebuggerStatement = $__13.DebuggerStatement,
	      Annotation = $__13.Annotation,
	      DefaultClause = $__13.DefaultClause,
	      DoWhileStatement = $__13.DoWhileStatement,
	      EmptyStatement = $__13.EmptyStatement,
	      ExportDeclaration = $__13.ExportDeclaration,
	      ExportDefault = $__13.ExportDefault,
	      ExportSpecifier = $__13.ExportSpecifier,
	      ExportSpecifierSet = $__13.ExportSpecifierSet,
	      ExportStar = $__13.ExportStar,
	      ExpressionStatement = $__13.ExpressionStatement,
	      Finally = $__13.Finally,
	      ForInStatement = $__13.ForInStatement,
	      ForOfStatement = $__13.ForOfStatement,
	      ForOnStatement = $__13.ForOnStatement,
	      ForStatement = $__13.ForStatement,
	      FormalParameter = $__13.FormalParameter,
	      FormalParameterList = $__13.FormalParameterList,
	      FunctionBody = $__13.FunctionBody,
	      FunctionDeclaration = $__13.FunctionDeclaration,
	      FunctionExpression = $__13.FunctionExpression,
	      FunctionType = $__13.FunctionType,
	      GeneratorComprehension = $__13.GeneratorComprehension,
	      GetAccessor = $__13.GetAccessor,
	      IdentifierExpression = $__13.IdentifierExpression,
	      IfStatement = $__13.IfStatement,
	      ImportDeclaration = $__13.ImportDeclaration,
	      ImportSpecifier = $__13.ImportSpecifier,
	      ImportSpecifierSet = $__13.ImportSpecifierSet,
	      ImportedBinding = $__13.ImportedBinding,
	      IndexSignature = $__13.IndexSignature,
	      InterfaceDeclaration = $__13.InterfaceDeclaration,
	      LabelledStatement = $__13.LabelledStatement,
	      LiteralExpression = $__13.LiteralExpression,
	      LiteralPropertyName = $__13.LiteralPropertyName,
	      MemberExpression = $__13.MemberExpression,
	      MemberLookupExpression = $__13.MemberLookupExpression,
	      MethodSignature = $__13.MethodSignature,
	      Module = $__13.Module,
	      ModuleDeclaration = $__13.ModuleDeclaration,
	      ModuleSpecifier = $__13.ModuleSpecifier,
	      NamedExport = $__13.NamedExport,
	      NewExpression = $__13.NewExpression,
	      ObjectLiteralExpression = $__13.ObjectLiteralExpression,
	      ObjectPattern = $__13.ObjectPattern,
	      ObjectPatternField = $__13.ObjectPatternField,
	      ObjectType = $__13.ObjectType,
	      ParenExpression = $__13.ParenExpression,
	      PostfixExpression = $__13.PostfixExpression,
	      PredefinedType = $__13.PredefinedType,
	      PropertyMethodAssignment = $__13.PropertyMethodAssignment,
	      PropertyNameAssignment = $__13.PropertyNameAssignment,
	      PropertyNameShorthand = $__13.PropertyNameShorthand,
	      PropertySignature = $__13.PropertySignature,
	      PropertyVariableDeclaration = $__13.PropertyVariableDeclaration,
	      RestParameter = $__13.RestParameter,
	      ReturnStatement = $__13.ReturnStatement,
	      Script = $__13.Script,
	      SetAccessor = $__13.SetAccessor,
	      SpreadExpression = $__13.SpreadExpression,
	      SpreadPatternElement = $__13.SpreadPatternElement,
	      SuperExpression = $__13.SuperExpression,
	      SwitchStatement = $__13.SwitchStatement,
	      SyntaxErrorTree = $__13.SyntaxErrorTree,
	      TemplateLiteralExpression = $__13.TemplateLiteralExpression,
	      TemplateLiteralPortion = $__13.TemplateLiteralPortion,
	      TemplateSubstitution = $__13.TemplateSubstitution,
	      ThisExpression = $__13.ThisExpression,
	      ThrowStatement = $__13.ThrowStatement,
	      TryStatement = $__13.TryStatement,
	      TypeArguments = $__13.TypeArguments,
	      TypeName = $__13.TypeName,
	      TypeParameter = $__13.TypeParameter,
	      TypeParameters = $__13.TypeParameters,
	      TypeReference = $__13.TypeReference,
	      UnaryExpression = $__13.UnaryExpression,
	      UnionType = $__13.UnionType,
	      VariableDeclaration = $__13.VariableDeclaration,
	      VariableDeclarationList = $__13.VariableDeclarationList,
	      VariableStatement = $__13.VariableStatement,
	      WhileStatement = $__13.WhileStatement,
	      WithStatement = $__13.WithStatement,
	      YieldExpression = $__13.YieldExpression;
	  var Expression = {
	    NO_IN: 'NO_IN',
	    NORMAL: 'NORMAL'
	  };
	  var DestructuringInitializer = {
	    REQUIRED: 'REQUIRED',
	    OPTIONAL: 'OPTIONAL'
	  };
	  var Initializer = {
	    ALLOWED: 'ALLOWED',
	    REQUIRED: 'REQUIRED'
	  };
	  var ValidateObjectLiteral = function ValidateObjectLiteral() {
	    $traceurRuntime.superConstructor($ValidateObjectLiteral).call(this);
	    this.errorToken = null;
	  };
	  var $ValidateObjectLiteral = ValidateObjectLiteral;
	  ($traceurRuntime.createClass)(ValidateObjectLiteral, {visitCoverInitializedName: function(tree) {
	      this.errorToken = tree.equalToken;
	      this.found = true;
	    }}, {}, FindVisitor);
	  function containsInitializer(declarations) {
	    return declarations.some((function(v) {
	      return v.initializer;
	    }));
	  }
	  var FUNCTION_STATE_SCRIPT = 1;
	  var FUNCTION_STATE_MODULE = 1 << 1;
	  var FUNCTION_STATE_FUNCTION = 1 << 2;
	  var FUNCTION_STATE_ARROW = 1 << 3;
	  var FUNCTION_STATE_METHOD = 1 << 4;
	  var FUNCTION_STATE_DERIVED_CONSTRUCTOR = 1 << 5;
	  var FUNCTION_STATE_GENERATOR = 1 << 6;
	  var FUNCTION_STATE_ASYNC = 1 << 7;
	  var FUNCTION_STATE_LENIENT = FUNCTION_STATE_METHOD | FUNCTION_STATE_GENERATOR | FUNCTION_STATE_ASYNC | FUNCTION_STATE_DERIVED_CONSTRUCTOR;
	  var FunctionState = function FunctionState(outer, kind) {
	    this.outer = outer;
	    this.kind = kind;
	  };
	  ($traceurRuntime.createClass)(FunctionState, {
	    isTopMost: function() {
	      return this.kind & (FUNCTION_STATE_SCRIPT | FUNCTION_STATE_MODULE);
	    },
	    isMethod: function() {
	      return this.kind & FUNCTION_STATE_METHOD;
	    },
	    isDerivedConstructor: function() {
	      return this.kind & FUNCTION_STATE_DERIVED_CONSTRUCTOR;
	    },
	    isArrowFunction: function() {
	      return this.kind & FUNCTION_STATE_ARROW;
	    },
	    isGenerator: function() {
	      return this.kind & FUNCTION_STATE_GENERATOR;
	    },
	    isAsyncFunction: function() {
	      return this.kind & FUNCTION_STATE_ASYNC;
	    },
	    isAsyncGenerator: function() {
	      return this.kind & (FUNCTION_STATE_ASYNC | FUNCTION_STATE_GENERATOR);
	    }
	  }, {});
	  var Parser = function Parser(file) {
	    var errorReporter = arguments[1] !== (void 0) ? arguments[1] : new SyntaxErrorReporter();
	    var options = arguments[2] !== (void 0) ? arguments[2] : new Options();
	    this.errorReporter_ = errorReporter;
	    this.scanner_ = new Scanner(errorReporter, file, this, options);
	    this.options_ = options;
	    this.coverInitializedNameCount_ = 0;
	    this.strictMode_ = false;
	    this.annotations_ = [];
	    this.functionState_ = null;
	  };
	  ($traceurRuntime.createClass)(Parser, {
	    get allowYield_() {
	      return this.functionState_.isGenerator();
	    },
	    get allowAwait_() {
	      return this.functionState_.isAsyncFunction();
	    },
	    get allowForOn_() {
	      return this.functionState_.isAsyncGenerator();
	    },
	    parseScript: function() {
	      this.strictMode_ = false;
	      var start = this.getTreeStartLocation_();
	      var fs = this.pushFunctionState_(FUNCTION_STATE_SCRIPT);
	      var scriptItemList = this.parseStatementList_(true);
	      this.eat_(END_OF_FILE);
	      this.popFunctionState_(fs);
	      return new Script(this.getTreeLocation_(start), scriptItemList);
	    },
	    pushFunctionState_: function(kind) {
	      return this.functionState_ = new FunctionState(this.functionState_, kind);
	    },
	    popFunctionState_: function(fs) {
	      if (fs != this.functionState_) {
	        throw new Error('Internal error');
	      }
	      this.functionState_ = this.functionState_.outer;
	    },
	    parseStatementList_: function(checkUseStrictDirective) {
	      var result = [];
	      var type;
	      while ((type = this.peekType_()) !== CLOSE_CURLY && type !== END_OF_FILE) {
	        var statement = this.parseStatementListItem_(type);
	        if (checkUseStrictDirective) {
	          if (!statement.isDirectivePrologue()) {
	            checkUseStrictDirective = false;
	          } else if (statement.isUseStrictDirective()) {
	            this.strictMode_ = true;
	            checkUseStrictDirective = false;
	          }
	        }
	        result.push(statement);
	      }
	      return result;
	    },
	    parseStatementListItem_: function(type) {
	      return this.parseStatementWithType_(type);
	    },
	    parseModule: function() {
	      var start = this.getTreeStartLocation_();
	      var fs = this.pushFunctionState_(FUNCTION_STATE_MODULE);
	      var scriptItemList = this.parseModuleItemList_();
	      this.eat_(END_OF_FILE);
	      this.popFunctionState_(fs);
	      return new Module(this.getTreeLocation_(start), scriptItemList, null);
	    },
	    parseModuleItemList_: function() {
	      this.strictMode_ = true;
	      var result = [];
	      var type;
	      while ((type = this.peekType_()) !== END_OF_FILE) {
	        var statement = this.parseModuleItem_(type);
	        result.push(statement);
	      }
	      return result;
	    },
	    parseModuleItem_: function(type) {
	      switch (type) {
	        case IMPORT:
	          return this.parseImportDeclaration_();
	        case EXPORT:
	          return this.parseExportDeclaration_();
	        case AT:
	          if (this.options_.annotations)
	            return this.parseAnnotatedDeclarations_(true);
	          break;
	      }
	      return this.parseStatementListItem_(type);
	    },
	    parseModuleSpecifier_: function() {
	      var start = this.getTreeStartLocation_();
	      var token = this.eat_(STRING);
	      return new ModuleSpecifier(this.getTreeLocation_(start), token);
	    },
	    parseImportDeclaration_: function() {
	      var start = this.getTreeStartLocation_();
	      this.eat_(IMPORT);
	      if (this.peek_(STAR)) {
	        this.eat_(STAR);
	        this.eatId_(AS);
	        var binding = this.parseImportedBinding_();
	        this.eatId_(FROM);
	        var moduleSpecifier$__16 = this.parseModuleSpecifier_();
	        this.eatPossibleImplicitSemiColon_();
	        return new ModuleDeclaration(this.getTreeLocation_(start), binding, moduleSpecifier$__16);
	      }
	      var importClause = null;
	      if (this.peekImportClause_(this.peekType_())) {
	        importClause = this.parseImportClause_();
	        this.eatId_(FROM);
	      }
	      var moduleSpecifier = this.parseModuleSpecifier_();
	      this.eatPossibleImplicitSemiColon_();
	      return new ImportDeclaration(this.getTreeLocation_(start), importClause, moduleSpecifier);
	    },
	    peekImportClause_: function(type) {
	      return type === OPEN_CURLY || this.peekBindingIdentifier_(type);
	    },
	    parseImportClause_: function() {
	      var start = this.getTreeStartLocation_();
	      if (this.eatIf_(OPEN_CURLY)) {
	        var specifiers = [];
	        while (!this.peek_(CLOSE_CURLY) && !this.isAtEnd()) {
	          specifiers.push(this.parseImportSpecifier_());
	          if (!this.eatIf_(COMMA))
	            break;
	        }
	        this.eat_(CLOSE_CURLY);
	        return new ImportSpecifierSet(this.getTreeLocation_(start), specifiers);
	      }
	      return this.parseImportedBinding_();
	    },
	    parseImportedBinding_: function() {
	      var start = this.getTreeStartLocation_();
	      var binding = this.parseBindingIdentifier_();
	      return new ImportedBinding(this.getTreeLocation_(start), binding);
	    },
	    parseImportSpecifier_: function() {
	      var start = this.getTreeStartLocation_();
	      var token = this.peekToken_();
	      var isKeyword = token.isKeyword();
	      var binding;
	      var name = this.eatIdName_();
	      if (isKeyword || this.peekPredefinedString_(AS)) {
	        this.eatId_(AS);
	        binding = this.parseImportedBinding_();
	      } else {
	        binding = new ImportedBinding(name.location, new BindingIdentifier(name.location, name));
	        name = null;
	      }
	      return new ImportSpecifier(this.getTreeLocation_(start), binding, name);
	    },
	    parseExportDeclaration_: function() {
	      var start = this.getTreeStartLocation_();
	      this.eat_(EXPORT);
	      var exportTree;
	      var annotations = this.popAnnotations_();
	      var type = this.peekType_();
	      switch (type) {
	        case CONST:
	        case LET:
	          if (!this.options_.blockBinding) {
	            return this.parseUnexpectedToken_(type);
	          }
	        case VAR:
	          exportTree = this.parseVariableStatement_();
	          break;
	        case FUNCTION:
	          exportTree = this.parseFunctionDeclaration_();
	          break;
	        case CLASS:
	          exportTree = this.parseClassDeclaration_();
	          break;
	        case DEFAULT:
	          exportTree = this.parseExportDefault_();
	          break;
	        case OPEN_CURLY:
	        case STAR:
	          exportTree = this.parseNamedExport_();
	          break;
	        case IDENTIFIER:
	          if (this.options_.asyncFunctions && this.peekPredefinedString_(ASYNC)) {
	            var asyncToken = this.eatId_();
	            exportTree = this.parseAsyncFunctionDeclaration_(asyncToken);
	            break;
	          }
	        default:
	          return this.parseUnexpectedToken_(type);
	      }
	      return new ExportDeclaration(this.getTreeLocation_(start), exportTree, annotations);
	    },
	    parseExportDefault_: function() {
	      var start = this.getTreeStartLocation_();
	      this.eat_(DEFAULT);
	      var exportValue;
	      switch (this.peekType_()) {
	        case FUNCTION:
	          var tree = this.parseFunctionExpression_();
	          if (tree.name) {
	            tree = new FunctionDeclaration(tree.location, tree.name, tree.functionKind, tree.parameterList, tree.typeAnnotation, tree.annotations, tree.body);
	          }
	          exportValue = tree;
	          break;
	        case CLASS:
	          if (this.options_.classes) {
	            var tree$__17 = this.parseClassExpression_();
	            if (tree$__17.name) {
	              tree$__17 = new ClassDeclaration(tree$__17.location, tree$__17.name, tree$__17.superClass, tree$__17.elements, tree$__17.annotations);
	            }
	            exportValue = tree$__17;
	            break;
	          }
	        default:
	          exportValue = this.parseAssignmentExpression_();
	          this.eatPossibleImplicitSemiColon_();
	      }
	      return new ExportDefault(this.getTreeLocation_(start), exportValue);
	    },
	    parseNamedExport_: function() {
	      var start = this.getTreeStartLocation_();
	      var specifierSet,
	          expression = null;
	      if (this.peek_(OPEN_CURLY)) {
	        specifierSet = this.parseExportSpecifierSet_();
	        if (this.peekPredefinedString_(FROM)) {
	          this.eatId_(FROM);
	          expression = this.parseModuleSpecifier_();
	        } else {
	          this.validateExportSpecifierSet_(specifierSet);
	        }
	      } else {
	        this.eat_(STAR);
	        specifierSet = new ExportStar(this.getTreeLocation_(start));
	        this.eatId_(FROM);
	        expression = this.parseModuleSpecifier_();
	      }
	      this.eatPossibleImplicitSemiColon_();
	      return new NamedExport(this.getTreeLocation_(start), expression, specifierSet);
	    },
	    parseExportSpecifierSet_: function() {
	      var start = this.getTreeStartLocation_();
	      this.eat_(OPEN_CURLY);
	      var specifiers = [this.parseExportSpecifier_()];
	      while (this.eatIf_(COMMA)) {
	        if (this.peek_(CLOSE_CURLY))
	          break;
	        specifiers.push(this.parseExportSpecifier_());
	      }
	      this.eat_(CLOSE_CURLY);
	      return new ExportSpecifierSet(this.getTreeLocation_(start), specifiers);
	    },
	    parseExportSpecifier_: function() {
	      var start = this.getTreeStartLocation_();
	      var lhs = this.eatIdName_();
	      var rhs = null;
	      if (this.peekPredefinedString_(AS)) {
	        this.eatId_();
	        rhs = this.eatIdName_();
	      }
	      return new ExportSpecifier(this.getTreeLocation_(start), lhs, rhs);
	    },
	    validateExportSpecifierSet_: function(tree) {
	      for (var i = 0; i < tree.specifiers.length; i++) {
	        var specifier = tree.specifiers[i];
	        if (getKeywordType(specifier.lhs.value)) {
	          this.reportError_(specifier.lhs.location, ("Unexpected token " + specifier.lhs.value));
	        }
	      }
	    },
	    peekId_: function(type) {
	      if (type === IDENTIFIER)
	        return true;
	      if (this.strictMode_)
	        return false;
	      return this.peekToken_().isStrictKeyword();
	    },
	    peekIdName_: function(token) {
	      return token.type === IDENTIFIER || token.isKeyword();
	    },
	    parseClassShared_: function(constr) {
	      var start = this.getTreeStartLocation_();
	      var strictMode = this.strictMode_;
	      this.strictMode_ = true;
	      this.eat_(CLASS);
	      var name = null;
	      var typeParameters = null;
	      var annotations = [];
	      if (constr === ClassDeclaration || !this.peek_(EXTENDS) && !this.peek_(OPEN_CURLY)) {
	        name = this.parseBindingIdentifier_();
	        if (this.options_.types) {
	          typeParameters = this.parseTypeParametersOpt_();
	        }
	        annotations = this.popAnnotations_();
	      }
	      var superClass = null;
	      if (this.eatIf_(EXTENDS)) {
	        superClass = this.parseLeftHandSideExpression_();
	      }
	      this.eat_(OPEN_CURLY);
	      var elements = this.parseClassElements_(superClass);
	      this.eat_(CLOSE_CURLY);
	      this.strictMode_ = strictMode;
	      return new constr(this.getTreeLocation_(start), name, superClass, elements, annotations, typeParameters);
	    },
	    parseClassDeclaration_: function() {
	      return this.parseClassShared_(ClassDeclaration);
	    },
	    parseClassExpression_: function() {
	      return this.parseClassShared_(ClassExpression);
	    },
	    parseClassElements_: function(derivedClass) {
	      var result = [];
	      while (true) {
	        var type = this.peekType_();
	        if (type === SEMI_COLON) {
	          this.nextToken_();
	        } else if (this.peekClassElement_(this.peekType_())) {
	          result.push(this.parseClassElement_(derivedClass));
	        } else {
	          break;
	        }
	      }
	      return result;
	    },
	    peekClassElement_: function(type) {
	      return this.peekPropertyName_(type) || type === STAR && this.options_.generators || type === AT && this.options_.annotations;
	    },
	    parsePropertyName_: function() {
	      if (this.peek_(OPEN_SQUARE))
	        return this.parseComputedPropertyName_();
	      return this.parseLiteralPropertyName_();
	    },
	    parseLiteralPropertyName_: function() {
	      var start = this.getTreeStartLocation_();
	      var token = this.nextToken_();
	      return new LiteralPropertyName(this.getTreeLocation_(start), token);
	    },
	    parseComputedPropertyName_: function() {
	      var start = this.getTreeStartLocation_();
	      this.eat_(OPEN_SQUARE);
	      var expression = this.parseAssignmentExpression_();
	      this.eat_(CLOSE_SQUARE);
	      return new ComputedPropertyName(this.getTreeLocation_(start), expression);
	    },
	    parseStatement: function() {
	      var fs = this.pushFunctionState_(FUNCTION_STATE_LENIENT);
	      var result = this.parseModuleItem_(this.peekType_());
	      this.popFunctionState_(fs);
	      return result;
	    },
	    parseStatements: function() {
	      var fs = this.pushFunctionState_(FUNCTION_STATE_LENIENT);
	      var result = this.parseModuleItemList_();
	      this.popFunctionState_(fs);
	      return result;
	    },
	    parseStatement_: function() {
	      return this.parseStatementWithType_(this.peekType_());
	    },
	    parseStatementWithType_: function(type) {
	      switch (type) {
	        case RETURN:
	          return this.parseReturnStatement_();
	        case CONST:
	        case LET:
	          if (!this.options_.blockBinding)
	            break;
	        case VAR:
	          return this.parseVariableStatement_();
	        case IF:
	          return this.parseIfStatement_();
	        case FOR:
	          return this.parseForStatement_();
	        case BREAK:
	          return this.parseBreakStatement_();
	        case SWITCH:
	          return this.parseSwitchStatement_();
	        case THROW:
	          return this.parseThrowStatement_();
	        case WHILE:
	          return this.parseWhileStatement_();
	        case FUNCTION:
	          return this.parseFunctionDeclaration_();
	        case AT:
	          if (this.options_.annotations)
	            return this.parseAnnotatedDeclarations_(false);
	          break;
	        case CLASS:
	          if (this.options_.classes)
	            return this.parseClassDeclaration_();
	          break;
	        case CONTINUE:
	          return this.parseContinueStatement_();
	        case DEBUGGER:
	          return this.parseDebuggerStatement_();
	        case DO:
	          return this.parseDoWhileStatement_();
	        case OPEN_CURLY:
	          return this.parseBlock_();
	        case SEMI_COLON:
	          return this.parseEmptyStatement_();
	        case TRY:
	          return this.parseTryStatement_();
	        case WITH:
	          return this.parseWithStatement_();
	        case INTERFACE:
	          if (this.options_.types) {
	            return this.parseInterfaceDeclaration_();
	          }
	      }
	      return this.parseFallThroughStatement_();
	    },
	    parseFunctionDeclaration_: function() {
	      return this.parseFunction_(FunctionDeclaration);
	    },
	    parseFunctionExpression_: function() {
	      return this.parseFunction_(FunctionExpression);
	    },
	    parseAsyncFunctionDeclaration_: function(asyncToken) {
	      return this.parseAsyncFunction_(asyncToken, FunctionDeclaration);
	    },
	    parseAsyncFunctionExpression_: function(asyncToken) {
	      return this.parseAsyncFunction_(asyncToken, FunctionExpression);
	    },
	    parseAsyncFunction_: function(asyncToken, ctor) {
	      var start = asyncToken.location.start;
	      this.eat_(FUNCTION);
	      var kind = FUNCTION_STATE_FUNCTION | FUNCTION_STATE_ASYNC;
	      if (this.options_.asyncGenerators && this.peek_(STAR)) {
	        kind |= FUNCTION_STATE_GENERATOR;
	        this.eat_(STAR);
	        asyncToken = new IdentifierToken(asyncToken.location, ASYNC_STAR);
	      }
	      var fs = this.pushFunctionState_(kind);
	      var f = this.parseFunction2_(start, asyncToken, ctor);
	      this.popFunctionState_(fs);
	      return f;
	    },
	    parseFunction_: function(ctor) {
	      var start = this.getTreeStartLocation_();
	      this.eat_(FUNCTION);
	      var functionKind = null;
	      var kind = FUNCTION_STATE_FUNCTION;
	      if (this.options_.generators && this.peek_(STAR)) {
	        functionKind = this.eat_(STAR);
	        kind |= FUNCTION_STATE_GENERATOR;
	      }
	      var fs = this.pushFunctionState_(kind);
	      var f = this.parseFunction2_(start, functionKind, ctor);
	      this.popFunctionState_(fs);
	      return f;
	    },
	    parseFunction2_: function(start, functionKind, ctor) {
	      var name = null;
	      var annotations = [];
	      if (ctor === FunctionDeclaration || this.peekBindingIdentifier_(this.peekType_())) {
	        name = this.parseBindingIdentifier_();
	        annotations = this.popAnnotations_();
	      }
	      this.eat_(OPEN_PAREN);
	      var parameters = this.parseFormalParameters_();
	      this.eat_(CLOSE_PAREN);
	      var typeAnnotation = this.parseTypeAnnotationOpt_();
	      var body = this.parseFunctionBody_(parameters);
	      return new ctor(this.getTreeLocation_(start), name, functionKind, parameters, typeAnnotation, annotations, body);
	    },
	    peekRest_: function(type) {
	      return type === DOT_DOT_DOT && this.options_.restParameters;
	    },
	    parseFormalParameters_: function() {
	      var start = this.getTreeStartLocation_();
	      var formals = [];
	      this.pushAnnotations_();
	      var type = this.peekType_();
	      if (this.peekRest_(type)) {
	        formals.push(this.parseFormalRestParameter_());
	      } else {
	        if (this.peekFormalParameter_(this.peekType_()))
	          formals.push(this.parseFormalParameter_());
	        while (this.eatIf_(COMMA)) {
	          this.pushAnnotations_();
	          if (this.peekRest_(this.peekType_())) {
	            formals.push(this.parseFormalRestParameter_());
	            break;
	          }
	          formals.push(this.parseFormalParameter_());
	        }
	      }
	      return new FormalParameterList(this.getTreeLocation_(start), formals);
	    },
	    peekFormalParameter_: function(type) {
	      return this.peekBindingElement_(type);
	    },
	    parseFormalParameter_: function() {
	      var initializerAllowed = arguments[0];
	      var start = this.getTreeStartLocation_();
	      var binding = this.parseBindingElementBinding_();
	      var typeAnnotation = this.parseTypeAnnotationOpt_();
	      var initializer = this.parseBindingElementInitializer_(initializerAllowed);
	      return new FormalParameter(this.getTreeLocation_(start), new BindingElement(this.getTreeLocation_(start), binding, initializer), typeAnnotation, this.popAnnotations_());
	    },
	    parseFormalRestParameter_: function() {
	      var start = this.getTreeStartLocation_();
	      var restParameter = this.parseRestParameter_();
	      var typeAnnotation = this.parseTypeAnnotationOpt_();
	      return new FormalParameter(this.getTreeLocation_(start), restParameter, typeAnnotation, this.popAnnotations_());
	    },
	    parseRestParameter_: function() {
	      var start = this.getTreeStartLocation_();
	      this.eat_(DOT_DOT_DOT);
	      var id = this.parseBindingIdentifier_();
	      var typeAnnotation = this.parseTypeAnnotationOpt_();
	      return new RestParameter(this.getTreeLocation_(start), id, typeAnnotation);
	    },
	    parseFunctionBody_: function(params) {
	      var start = this.getTreeStartLocation_();
	      this.eat_(OPEN_CURLY);
	      var strictMode = this.strictMode_;
	      var result = this.parseStatementList_(!strictMode);
	      if (!strictMode && this.strictMode_ && params)
	        StrictParams.visit(params, this.errorReporter_);
	      this.strictMode_ = strictMode;
	      this.eat_(CLOSE_CURLY);
	      return new FunctionBody(this.getTreeLocation_(start), result);
	    },
	    parseSpreadExpression_: function() {
	      if (!this.options_.spread)
	        return this.parseUnexpectedToken_(DOT_DOT_DOT);
	      var start = this.getTreeStartLocation_();
	      this.eat_(DOT_DOT_DOT);
	      var operand = this.parseAssignmentExpression_();
	      return new SpreadExpression(this.getTreeLocation_(start), operand);
	    },
	    parseBlock_: function() {
	      var start = this.getTreeStartLocation_();
	      this.eat_(OPEN_CURLY);
	      var result = this.parseStatementList_(false);
	      this.eat_(CLOSE_CURLY);
	      return new Block(this.getTreeLocation_(start), result);
	    },
	    parseVariableStatement_: function() {
	      var start = this.getTreeStartLocation_();
	      var declarations = this.parseVariableDeclarationList_();
	      this.checkInitializers_(declarations);
	      this.eatPossibleImplicitSemiColon_();
	      return new VariableStatement(this.getTreeLocation_(start), declarations);
	    },
	    parseVariableDeclarationList_: function() {
	      var expressionIn = arguments[0] !== (void 0) ? arguments[0] : Expression.NORMAL;
	      var initializer = arguments[1] !== (void 0) ? arguments[1] : DestructuringInitializer.REQUIRED;
	      var type = this.peekType_();
	      switch (type) {
	        case CONST:
	        case LET:
	        case VAR:
	          this.nextToken_();
	          break;
	        default:
	          throw Error('unreachable');
	      }
	      var start = this.getTreeStartLocation_();
	      var declarations = [];
	      declarations.push(this.parseVariableDeclaration_(type, expressionIn, initializer));
	      while (this.eatIf_(COMMA)) {
	        declarations.push(this.parseVariableDeclaration_(type, expressionIn, initializer));
	      }
	      return new VariableDeclarationList(this.getTreeLocation_(start), type, declarations);
	    },
	    parseVariableDeclaration_: function(binding, expressionIn) {
	      var initializer = arguments[2] !== (void 0) ? arguments[2] : DestructuringInitializer.REQUIRED;
	      var initRequired = initializer !== DestructuringInitializer.OPTIONAL;
	      var start = this.getTreeStartLocation_();
	      var lvalue;
	      var typeAnnotation;
	      if (this.peekPattern_(this.peekType_())) {
	        lvalue = this.parseBindingPattern_();
	        typeAnnotation = null;
	      } else {
	        lvalue = this.parseBindingIdentifier_();
	        typeAnnotation = this.parseTypeAnnotationOpt_();
	      }
	      var init = null;
	      if (this.peek_(EQUAL))
	        init = this.parseInitializer_(expressionIn);
	      else if (lvalue.isPattern() && initRequired)
	        this.reportError_('destructuring must have an initializer');
	      return new VariableDeclaration(this.getTreeLocation_(start), lvalue, typeAnnotation, init);
	    },
	    parseInitializer_: function(expressionIn) {
	      this.eat_(EQUAL);
	      return this.parseAssignmentExpression_(expressionIn);
	    },
	    parseInitializerOpt_: function(expressionIn) {
	      if (this.eatIf_(EQUAL))
	        return this.parseAssignmentExpression_(expressionIn);
	      return null;
	    },
	    parseEmptyStatement_: function() {
	      var start = this.getTreeStartLocation_();
	      this.eat_(SEMI_COLON);
	      return new EmptyStatement(this.getTreeLocation_(start));
	    },
	    parseFallThroughStatement_: function() {
	      var start = this.getTreeStartLocation_();
	      var expression;
	      if (this.options_.asyncFunctions && this.peekPredefinedString_(ASYNC) && this.peek_(FUNCTION, 1)) {
	        var asyncToken = this.eatId_();
	        var functionToken = this.peekTokenNoLineTerminator_();
	        if (functionToken !== null)
	          return this.parseAsyncFunctionDeclaration_(asyncToken);
	        expression = new IdentifierExpression(this.getTreeLocation_(start), asyncToken);
	      } else {
	        expression = this.parseExpression_();
	      }
	      if (expression.type === IDENTIFIER_EXPRESSION) {
	        if (this.eatIf_(COLON)) {
	          var nameToken = expression.identifierToken;
	          var statement = this.parseStatement_();
	          return new LabelledStatement(this.getTreeLocation_(start), nameToken, statement);
	        }
	      }
	      this.eatPossibleImplicitSemiColon_();
	      return new ExpressionStatement(this.getTreeLocation_(start), expression);
	    },
	    parseIfStatement_: function() {
	      var start = this.getTreeStartLocation_();
	      this.eat_(IF);
	      this.eat_(OPEN_PAREN);
	      var condition = this.parseExpression_();
	      this.eat_(CLOSE_PAREN);
	      var ifClause = this.parseStatement_();
	      var elseClause = null;
	      if (this.eatIf_(ELSE)) {
	        elseClause = this.parseStatement_();
	      }
	      return new IfStatement(this.getTreeLocation_(start), condition, ifClause, elseClause);
	    },
	    parseDoWhileStatement_: function() {
	      var start = this.getTreeStartLocation_();
	      this.eat_(DO);
	      var body = this.parseStatement_();
	      this.eat_(WHILE);
	      this.eat_(OPEN_PAREN);
	      var condition = this.parseExpression_();
	      this.eat_(CLOSE_PAREN);
	      this.eatPossibleImplicitSemiColon_();
	      return new DoWhileStatement(this.getTreeLocation_(start), body, condition);
	    },
	    parseWhileStatement_: function() {
	      var start = this.getTreeStartLocation_();
	      this.eat_(WHILE);
	      this.eat_(OPEN_PAREN);
	      var condition = this.parseExpression_();
	      this.eat_(CLOSE_PAREN);
	      var body = this.parseStatement_();
	      return new WhileStatement(this.getTreeLocation_(start), condition, body);
	    },
	    parseForStatement_: function() {
	      var start = this.getTreeStartLocation_();
	      this.eat_(FOR);
	      this.eat_(OPEN_PAREN);
	      var type = this.peekType_();
	      if (this.peekVariableDeclarationList_(type)) {
	        var variables = this.parseVariableDeclarationList_(Expression.NO_IN, DestructuringInitializer.OPTIONAL);
	        var declarations = variables.declarations;
	        if (declarations.length > 1 || containsInitializer(declarations)) {
	          return this.parseForStatement2_(start, variables);
	        }
	        type = this.peekType_();
	        if (type === IN) {
	          return this.parseForInStatement_(start, variables);
	        } else if (this.peekOf_()) {
	          return this.parseForOfStatement_(start, variables);
	        } else if (this.allowForOn_ && this.peekOn_()) {
	          return this.parseForOnStatement_(start, variables);
	        } else {
	          this.checkInitializers_(variables);
	          return this.parseForStatement2_(start, variables);
	        }
	      }
	      if (type === SEMI_COLON) {
	        return this.parseForStatement2_(start, null);
	      }
	      var coverInitializedNameCount = this.coverInitializedNameCount_;
	      var initializer = this.parseExpressionAllowPattern_(Expression.NO_IN);
	      type = this.peekType_();
	      if (initializer.isLeftHandSideExpression() && (type === IN || this.peekOf_() || this.allowForOn_ && this.peekOn_())) {
	        initializer = this.transformLeftHandSideExpression_(initializer);
	        if (this.peekOf_()) {
	          return this.parseForOfStatement_(start, initializer);
	        } else if (this.allowForOn_ && this.peekOn_()) {
	          return this.parseForOnStatement_(start, initializer);
	        }
	        return this.parseForInStatement_(start, initializer);
	      }
	      this.ensureNoCoverInitializedNames_(initializer, coverInitializedNameCount);
	      return this.parseForStatement2_(start, initializer);
	    },
	    peekOf_: function() {
	      return this.options_.forOf && this.peekPredefinedString_(OF);
	    },
	    peekOn_: function() {
	      return this.options_.forOn && this.peekPredefinedString_(ON);
	    },
	    parseForOfStatement_: function(start, initializer) {
	      this.eatId_();
	      var collection = this.parseExpression_();
	      this.eat_(CLOSE_PAREN);
	      var body = this.parseStatement_();
	      return new ForOfStatement(this.getTreeLocation_(start), initializer, collection, body);
	    },
	    parseForOnStatement_: function(start, initializer) {
	      this.eatId_();
	      var observable = this.parseExpression_();
	      this.eat_(CLOSE_PAREN);
	      var body = this.parseStatement_();
	      return new ForOnStatement(this.getTreeLocation_(start), initializer, observable, body);
	    },
	    checkInitializers_: function(variables) {
	      if (this.options_.blockBinding && variables.declarationType === CONST) {
	        var type = variables.declarationType;
	        for (var i = 0; i < variables.declarations.length; i++) {
	          if (!this.checkInitializer_(type, variables.declarations[i])) {
	            break;
	          }
	        }
	      }
	    },
	    checkInitializer_: function(type, declaration) {
	      if (this.options_.blockBinding && type === CONST && declaration.initializer === null) {
	        this.reportError_('const variables must have an initializer');
	        return false;
	      }
	      return true;
	    },
	    peekVariableDeclarationList_: function(type) {
	      switch (type) {
	        case VAR:
	          return true;
	        case CONST:
	        case LET:
	          return this.options_.blockBinding;
	        default:
	          return false;
	      }
	    },
	    parseForStatement2_: function(start, initializer) {
	      this.eat_(SEMI_COLON);
	      var condition = null;
	      if (!this.peek_(SEMI_COLON)) {
	        condition = this.parseExpression_();
	      }
	      this.eat_(SEMI_COLON);
	      var increment = null;
	      if (!this.peek_(CLOSE_PAREN)) {
	        increment = this.parseExpression_();
	      }
	      this.eat_(CLOSE_PAREN);
	      var body = this.parseStatement_();
	      return new ForStatement(this.getTreeLocation_(start), initializer, condition, increment, body);
	    },
	    parseForInStatement_: function(start, initializer) {
	      this.eat_(IN);
	      var collection = this.parseExpression_();
	      this.eat_(CLOSE_PAREN);
	      var body = this.parseStatement_();
	      return new ForInStatement(this.getTreeLocation_(start), initializer, collection, body);
	    },
	    parseContinueStatement_: function() {
	      var start = this.getTreeStartLocation_();
	      this.eat_(CONTINUE);
	      var name = null;
	      if (!this.peekImplicitSemiColon_(this.peekType_())) {
	        name = this.eatIdOpt_();
	      }
	      this.eatPossibleImplicitSemiColon_();
	      return new ContinueStatement(this.getTreeLocation_(start), name);
	    },
	    parseBreakStatement_: function() {
	      var start = this.getTreeStartLocation_();
	      this.eat_(BREAK);
	      var name = null;
	      if (!this.peekImplicitSemiColon_(this.peekType_())) {
	        name = this.eatIdOpt_();
	      }
	      this.eatPossibleImplicitSemiColon_();
	      return new BreakStatement(this.getTreeLocation_(start), name);
	    },
	    parseReturnStatement_: function() {
	      var start = this.getTreeStartLocation_();
	      if (this.functionState_.isTopMost()) {
	        this.reportError_('Illegal return statement');
	      }
	      this.eat_(RETURN);
	      var expression = null;
	      if (!this.peekImplicitSemiColon_(this.peekType_())) {
	        expression = this.parseExpression_();
	      }
	      this.eatPossibleImplicitSemiColon_();
	      return new ReturnStatement(this.getTreeLocation_(start), expression);
	    },
	    parseYieldExpression_: function() {
	      var start = this.getTreeStartLocation_();
	      this.eat_(YIELD);
	      var expression = null;
	      var isYieldFor = false;
	      if (!this.peekImplicitSemiColon_(this.peekType_())) {
	        isYieldFor = this.eatIf_(STAR);
	        expression = this.parseAssignmentExpression_();
	      }
	      return new YieldExpression(this.getTreeLocation_(start), expression, isYieldFor);
	    },
	    parseWithStatement_: function() {
	      if (this.strictMode_)
	        this.reportError_('Strict mode code may not include a with statement');
	      var start = this.getTreeStartLocation_();
	      this.eat_(WITH);
	      this.eat_(OPEN_PAREN);
	      var expression = this.parseExpression_();
	      this.eat_(CLOSE_PAREN);
	      var body = this.parseStatement_();
	      return new WithStatement(this.getTreeLocation_(start), expression, body);
	    },
	    parseSwitchStatement_: function() {
	      var start = this.getTreeStartLocation_();
	      this.eat_(SWITCH);
	      this.eat_(OPEN_PAREN);
	      var expression = this.parseExpression_();
	      this.eat_(CLOSE_PAREN);
	      this.eat_(OPEN_CURLY);
	      var caseClauses = this.parseCaseClauses_();
	      this.eat_(CLOSE_CURLY);
	      return new SwitchStatement(this.getTreeLocation_(start), expression, caseClauses);
	    },
	    parseCaseClauses_: function() {
	      var foundDefaultClause = false;
	      var result = [];
	      while (true) {
	        var start = this.getTreeStartLocation_();
	        switch (this.peekType_()) {
	          case CASE:
	            this.nextToken_();
	            var expression = this.parseExpression_();
	            this.eat_(COLON);
	            var statements = this.parseCaseStatementsOpt_();
	            result.push(new CaseClause(this.getTreeLocation_(start), expression, statements));
	            break;
	          case DEFAULT:
	            if (foundDefaultClause) {
	              this.reportError_('Switch statements may have at most one default clause');
	            } else {
	              foundDefaultClause = true;
	            }
	            this.nextToken_();
	            this.eat_(COLON);
	            result.push(new DefaultClause(this.getTreeLocation_(start), this.parseCaseStatementsOpt_()));
	            break;
	          default:
	            return result;
	        }
	      }
	    },
	    parseCaseStatementsOpt_: function() {
	      var result = [];
	      var type;
	      while (true) {
	        switch (type = this.peekType_()) {
	          case CASE:
	          case DEFAULT:
	          case CLOSE_CURLY:
	          case END_OF_FILE:
	            return result;
	        }
	        result.push(this.parseStatementWithType_(type));
	      }
	    },
	    parseThrowStatement_: function() {
	      var start = this.getTreeStartLocation_();
	      this.eat_(THROW);
	      var value = null;
	      if (!this.peekImplicitSemiColon_(this.peekType_())) {
	        value = this.parseExpression_();
	      }
	      this.eatPossibleImplicitSemiColon_();
	      return new ThrowStatement(this.getTreeLocation_(start), value);
	    },
	    parseTryStatement_: function() {
	      var start = this.getTreeStartLocation_();
	      this.eat_(TRY);
	      var body = this.parseBlock_();
	      var catchBlock = null;
	      if (this.peek_(CATCH)) {
	        catchBlock = this.parseCatch_();
	      }
	      var finallyBlock = null;
	      if (this.peek_(FINALLY)) {
	        finallyBlock = this.parseFinallyBlock_();
	      }
	      if (catchBlock === null && finallyBlock === null) {
	        this.reportError_("'catch' or 'finally' expected.");
	      }
	      return new TryStatement(this.getTreeLocation_(start), body, catchBlock, finallyBlock);
	    },
	    parseCatch_: function() {
	      var start = this.getTreeStartLocation_();
	      var catchBlock;
	      this.eat_(CATCH);
	      this.eat_(OPEN_PAREN);
	      var binding;
	      if (this.peekPattern_(this.peekType_()))
	        binding = this.parseBindingPattern_();
	      else
	        binding = this.parseBindingIdentifier_();
	      this.eat_(CLOSE_PAREN);
	      var catchBody = this.parseBlock_();
	      catchBlock = new Catch(this.getTreeLocation_(start), binding, catchBody);
	      return catchBlock;
	    },
	    parseFinallyBlock_: function() {
	      var start = this.getTreeStartLocation_();
	      this.eat_(FINALLY);
	      var finallyBlock = this.parseBlock_();
	      return new Finally(this.getTreeLocation_(start), finallyBlock);
	    },
	    parseDebuggerStatement_: function() {
	      var start = this.getTreeStartLocation_();
	      this.eat_(DEBUGGER);
	      this.eatPossibleImplicitSemiColon_();
	      return new DebuggerStatement(this.getTreeLocation_(start));
	    },
	    parsePrimaryExpression_: function() {
	      switch (this.peekType_()) {
	        case CLASS:
	          return this.options_.classes ? this.parseClassExpression_() : this.parseSyntaxError_('Unexpected reserved word');
	        case THIS:
	          return this.parseThisExpression_();
	        case IDENTIFIER:
	          var identifier = this.parseIdentifierExpression_();
	          if (this.options_.asyncFunctions && identifier.identifierToken.value === ASYNC) {
	            var token = this.peekTokenNoLineTerminator_();
	            if (token && token.type === FUNCTION) {
	              var asyncToken = identifier.identifierToken;
	              return this.parseAsyncFunctionExpression_(asyncToken);
	            }
	          }
	          return identifier;
	        case NUMBER:
	        case STRING:
	        case TRUE:
	        case FALSE:
	        case NULL:
	          return this.parseLiteralExpression_();
	        case OPEN_SQUARE:
	          return this.parseArrayLiteral_();
	        case OPEN_CURLY:
	          return this.parseObjectLiteral_();
	        case OPEN_PAREN:
	          return this.parsePrimaryExpressionStartingWithParen_();
	        case SLASH:
	        case SLASH_EQUAL:
	          return this.parseRegularExpressionLiteral_();
	        case NO_SUBSTITUTION_TEMPLATE:
	        case TEMPLATE_HEAD:
	          return this.parseTemplateLiteral_(null);
	        case IMPLEMENTS:
	        case INTERFACE:
	        case PACKAGE:
	        case PRIVATE:
	        case PROTECTED:
	        case PUBLIC:
	        case STATIC:
	        case YIELD:
	          if (!this.strictMode_)
	            return this.parseIdentifierExpression_();
	          this.reportReservedIdentifier_(this.nextToken_());
	        case END_OF_FILE:
	          return this.parseSyntaxError_('Unexpected end of input');
	        default:
	          return this.parseUnexpectedToken_(this.peekToken_());
	      }
	    },
	    parseSuperExpression_: function(isNew) {
	      var start = this.getTreeStartLocation_();
	      var fs = this.functionState_;
	      while (fs && fs.isArrowFunction()) {
	        fs = fs.outer;
	      }
	      if (!fs || !fs.isMethod()) {
	        return this.parseSyntaxError_('super is only allowed in methods');
	      }
	      this.eat_(SUPER);
	      var operand = new SuperExpression(this.getTreeLocation_(start));
	      var type = this.peekType_();
	      if (isNew) {
	        if (type === OPEN_SQUARE) {
	          return this.parseMemberLookupExpression_(start, operand);
	        }
	        return this.parseMemberExpression_(start, operand);
	      }
	      switch (type) {
	        case OPEN_SQUARE:
	          return this.parseMemberLookupExpression_(start, operand);
	        case PERIOD:
	          return this.parseMemberExpression_(start, operand);
	        case OPEN_PAREN:
	          var superCall = this.parseCallExpression_(start, operand);
	          if (!fs.isDerivedConstructor()) {
	            this.errorReporter_.reportError(start, 'super call is only allowed in derived constructor');
	          }
	          return superCall;
	      }
	      return this.parseUnexpectedToken_(type);
	    },
	    parseThisExpression_: function() {
	      var start = this.getTreeStartLocation_();
	      this.eat_(THIS);
	      return new ThisExpression(this.getTreeLocation_(start));
	    },
	    peekBindingIdentifier_: function(type) {
	      return this.peekId_(type);
	    },
	    parseBindingIdentifier_: function() {
	      var start = this.getTreeStartLocation_();
	      var identifier = this.eatId_();
	      return new BindingIdentifier(this.getTreeLocation_(start), identifier);
	    },
	    parseIdentifierExpression_: function() {
	      var start = this.getTreeStartLocation_();
	      var identifier = this.eatId_();
	      return new IdentifierExpression(this.getTreeLocation_(start), identifier);
	    },
	    parseIdentifierNameExpression_: function() {
	      var start = this.getTreeStartLocation_();
	      var identifier = this.eatIdName_();
	      return new IdentifierExpression(this.getTreeLocation_(start), identifier);
	    },
	    parseLiteralExpression_: function() {
	      var start = this.getTreeStartLocation_();
	      var literal = this.nextLiteralToken_();
	      return new LiteralExpression(this.getTreeLocation_(start), literal);
	    },
	    nextLiteralToken_: function() {
	      return this.nextToken_();
	    },
	    parseRegularExpressionLiteral_: function() {
	      var start = this.getTreeStartLocation_();
	      var literal = this.nextRegularExpressionLiteralToken_();
	      return new LiteralExpression(this.getTreeLocation_(start), literal);
	    },
	    peekSpread_: function(type) {
	      return type === DOT_DOT_DOT && this.options_.spread;
	    },
	    parseArrayLiteral_: function() {
	      var start = this.getTreeStartLocation_();
	      var expression;
	      var elements = [];
	      this.eat_(OPEN_SQUARE);
	      var type = this.peekType_();
	      if (type === FOR && this.options_.arrayComprehension)
	        return this.parseArrayComprehension_(start);
	      while (true) {
	        type = this.peekType_();
	        if (type === COMMA) {
	          expression = null;
	        } else if (this.peekSpread_(type)) {
	          expression = this.parseSpreadExpression_();
	        } else if (this.peekAssignmentExpression_(type)) {
	          expression = this.parseAssignmentExpression_();
	        } else {
	          break;
	        }
	        elements.push(expression);
	        type = this.peekType_();
	        if (type !== CLOSE_SQUARE)
	          this.eat_(COMMA);
	      }
	      this.eat_(CLOSE_SQUARE);
	      return new ArrayLiteralExpression(this.getTreeLocation_(start), elements);
	    },
	    parseArrayComprehension_: function(start) {
	      var list = this.parseComprehensionList_();
	      var expression = this.parseAssignmentExpression_();
	      this.eat_(CLOSE_SQUARE);
	      return new ArrayComprehension(this.getTreeLocation_(start), list, expression);
	    },
	    parseComprehensionList_: function() {
	      var list = [this.parseComprehensionFor_()];
	      while (true) {
	        var type = this.peekType_();
	        switch (type) {
	          case FOR:
	            list.push(this.parseComprehensionFor_());
	            break;
	          case IF:
	            list.push(this.parseComprehensionIf_());
	            break;
	          default:
	            return list;
	        }
	      }
	    },
	    parseComprehensionFor_: function() {
	      var start = this.getTreeStartLocation_();
	      this.eat_(FOR);
	      this.eat_(OPEN_PAREN);
	      var left = this.parseForBinding_();
	      this.eatId_(OF);
	      var iterator = this.parseExpression_();
	      this.eat_(CLOSE_PAREN);
	      return new ComprehensionFor(this.getTreeLocation_(start), left, iterator);
	    },
	    parseComprehensionIf_: function() {
	      var start = this.getTreeStartLocation_();
	      this.eat_(IF);
	      this.eat_(OPEN_PAREN);
	      var expression = this.parseExpression_();
	      this.eat_(CLOSE_PAREN);
	      return new ComprehensionIf(this.getTreeLocation_(start), expression);
	    },
	    parseObjectLiteral_: function() {
	      var start = this.getTreeStartLocation_();
	      var result = [];
	      this.eat_(OPEN_CURLY);
	      while (this.peekPropertyDefinition_(this.peekType_())) {
	        var propertyDefinition = this.parsePropertyDefinition_();
	        result.push(propertyDefinition);
	        if (!this.eatIf_(COMMA))
	          break;
	      }
	      this.eat_(CLOSE_CURLY);
	      return new ObjectLiteralExpression(this.getTreeLocation_(start), result);
	    },
	    parsePropertyDefinition: function() {
	      var fs = this.pushFunctionState_(FUNCTION_STATE_SCRIPT);
	      var result = this.parsePropertyDefinition_();
	      this.popFunctionState_(fs);
	      return result;
	    },
	    parsePropertyDefinition_: function() {
	      var start = this.getTreeStartLocation_();
	      var functionKind = null;
	      var isStatic = false;
	      if (this.options_.generators && this.options_.propertyMethods && this.peek_(STAR)) {
	        var fs = this.pushFunctionState_(FUNCTION_STATE_METHOD | FUNCTION_STATE_GENERATOR);
	        var m = this.parseGeneratorMethod_(start, isStatic, []);
	        this.popFunctionState_(fs);
	        return m;
	      }
	      var token = this.peekToken_();
	      var name = this.parsePropertyName_();
	      if (this.options_.propertyMethods && this.peek_(OPEN_PAREN)) {
	        var fs$__18 = this.pushFunctionState_(FUNCTION_STATE_METHOD);
	        var m$__19 = this.parseMethod_(start, isStatic, functionKind, name, []);
	        this.popFunctionState_(fs$__18);
	        return m$__19;
	      }
	      if (this.eatIf_(COLON)) {
	        var value = this.parseAssignmentExpression_();
	        return new PropertyNameAssignment(this.getTreeLocation_(start), name, value);
	      }
	      var type = this.peekType_();
	      if (name.type === LITERAL_PROPERTY_NAME) {
	        var nameLiteral = name.literalToken;
	        if (nameLiteral.value === GET && this.peekPropertyName_(type)) {
	          return this.parseGetAccessor_(start, isStatic, []);
	        }
	        if (nameLiteral.value === SET && this.peekPropertyName_(type)) {
	          return this.parseSetAccessor_(start, isStatic, []);
	        }
	        if (this.options_.asyncFunctions && nameLiteral.value === ASYNC && this.peekPropertyName_(type)) {
	          var async = nameLiteral;
	          var name$__20 = this.parsePropertyName_();
	          var fs$__21 = this.pushFunctionState_(FUNCTION_STATE_METHOD | FUNCTION_STATE_ASYNC);
	          var m$__22 = this.parseMethod_(start, isStatic, async, name$__20, []);
	          this.popFunctionState_(fs$__21);
	          return m$__22;
	        }
	        if (this.options_.propertyNameShorthand && nameLiteral.type === IDENTIFIER || !this.strictMode_ && nameLiteral.type === YIELD) {
	          if (this.peek_(EQUAL)) {
	            token = this.nextToken_();
	            var coverInitializedNameCount = this.coverInitializedNameCount_;
	            var expr = this.parseAssignmentExpression_();
	            this.ensureNoCoverInitializedNames_(expr, coverInitializedNameCount);
	            this.coverInitializedNameCount_++;
	            return new CoverInitializedName(this.getTreeLocation_(start), nameLiteral, token, expr);
	          }
	          if (nameLiteral.type === YIELD)
	            nameLiteral = new IdentifierToken(nameLiteral.location, YIELD);
	          return new PropertyNameShorthand(this.getTreeLocation_(start), nameLiteral);
	        }
	        if (this.strictMode_ && nameLiteral.isStrictKeyword())
	          this.reportReservedIdentifier_(nameLiteral);
	      }
	      if (name.type === COMPUTED_PROPERTY_NAME)
	        token = this.peekToken_();
	      return this.parseUnexpectedToken_(token);
	    },
	    parseClassElement_: function(derivedClass) {
	      var start = this.getTreeStartLocation_();
	      var annotations = this.parseAnnotations_();
	      var type = this.peekType_();
	      var isStatic = false,
	          functionKind = null;
	      switch (type) {
	        case STATIC:
	          var staticToken = this.nextToken_();
	          type = this.peekType_();
	          switch (type) {
	            case OPEN_PAREN:
	              var location = this.getTreeLocation_(start);
	              var name = new LiteralPropertyName(location, staticToken);
	              var fs = this.pushFunctionState_(FUNCTION_STATE_METHOD);
	              var m = this.parseMethod_(start, isStatic, functionKind, name, annotations);
	              this.popFunctionState_(fs);
	              return m;
	            default:
	              isStatic = true;
	              if (type === STAR && this.options_.generators)
	                return this.parseGeneratorMethod_(start, true, annotations);
	              return this.parseClassElement2_(start, isStatic, annotations, derivedClass);
	          }
	          break;
	        case STAR:
	          return this.parseGeneratorMethod_(start, isStatic, annotations);
	        default:
	          return this.parseClassElement2_(start, isStatic, annotations, derivedClass);
	      }
	    },
	    parseGeneratorMethod_: function(start, isStatic, annotations) {
	      var functionKind = this.eat_(STAR);
	      var name = this.parsePropertyName_();
	      var fs = this.pushFunctionState_(FUNCTION_STATE_METHOD | FUNCTION_STATE_GENERATOR);
	      var m = this.parseMethod_(start, isStatic, functionKind, name, annotations);
	      this.popFunctionState_(fs);
	      return m;
	    },
	    parseMethod_: function(start, isStatic, functionKind, name, annotations) {
	      this.eat_(OPEN_PAREN);
	      var parameterList = this.parseFormalParameters_();
	      this.eat_(CLOSE_PAREN);
	      var typeAnnotation = this.parseTypeAnnotationOpt_();
	      var body = this.parseFunctionBody_(parameterList);
	      return new PropertyMethodAssignment(this.getTreeLocation_(start), isStatic, functionKind, name, parameterList, typeAnnotation, annotations, body, null);
	    },
	    parsePropertyVariableDeclaration_: function(start, isStatic, name, annotations) {
	      var typeAnnotation = this.parseTypeAnnotationOpt_();
	      var initializer = this.parseInitializerOpt_(Expression.NORMAL);
	      this.eat_(SEMI_COLON);
	      return new PropertyVariableDeclaration(this.getTreeLocation_(start), isStatic, name, typeAnnotation, annotations, initializer);
	    },
	    parseClassElement2_: function(start, isStatic, annotations, derivedClass) {
	      var functionKind = null;
	      var name = this.parsePropertyName_();
	      var type = this.peekType_();
	      if (name.type === LITERAL_PROPERTY_NAME && name.literalToken.value === GET && this.peekPropertyName_(type)) {
	        return this.parseGetAccessor_(start, isStatic, annotations);
	      }
	      if (name.type === LITERAL_PROPERTY_NAME && name.literalToken.value === SET && this.peekPropertyName_(type)) {
	        return this.parseSetAccessor_(start, isStatic, annotations);
	      }
	      if (this.options_.asyncFunctions && name.type === LITERAL_PROPERTY_NAME && name.literalToken.value === ASYNC && this.peekPropertyName_(type)) {
	        var async = name.literalToken;
	        name = this.parsePropertyName_();
	        var fs = this.pushFunctionState_(FUNCTION_STATE_METHOD | FUNCTION_STATE_ASYNC);
	        var m = this.parseMethod_(start, isStatic, async, name, annotations);
	        this.popFunctionState_(fs);
	        return m;
	      }
	      if (!this.options_.memberVariables || type === OPEN_PAREN) {
	        var kind = FUNCTION_STATE_METHOD;
	        var isDerivedConstructor = derivedClass && !isStatic && functionKind === null && name.type === LITERAL_PROPERTY_NAME && name.literalToken.value === CONSTRUCTOR;
	        if (isDerivedConstructor) {
	          kind |= FUNCTION_STATE_DERIVED_CONSTRUCTOR;
	        }
	        var fs$__23 = this.pushFunctionState_(kind);
	        var m$__24 = this.parseMethod_(start, isStatic, functionKind, name, annotations);
	        this.popFunctionState_(fs$__23);
	        if (isDerivedConstructor) {
	          validateConstructor(m$__24, this.errorReporter_);
	        }
	        return m$__24;
	      }
	      return this.parsePropertyVariableDeclaration_(start, isStatic, name, annotations);
	    },
	    parseGetAccessor_: function(start, isStatic, annotations) {
	      var name = this.parsePropertyName_();
	      var fs = this.pushFunctionState_(FUNCTION_STATE_METHOD);
	      this.eat_(OPEN_PAREN);
	      this.eat_(CLOSE_PAREN);
	      var typeAnnotation = this.parseTypeAnnotationOpt_();
	      var body = this.parseFunctionBody_(null);
	      this.popFunctionState_(fs);
	      return new GetAccessor(this.getTreeLocation_(start), isStatic, name, typeAnnotation, annotations, body);
	    },
	    parseSetAccessor_: function(start, isStatic, annotations) {
	      var name = this.parsePropertyName_();
	      var fs = this.pushFunctionState_(FUNCTION_STATE_METHOD);
	      this.eat_(OPEN_PAREN);
	      var parameterList = this.parsePropertySetParameterList_();
	      this.eat_(CLOSE_PAREN);
	      var body = this.parseFunctionBody_(parameterList);
	      this.popFunctionState_(fs);
	      return new SetAccessor(this.getTreeLocation_(start), isStatic, name, parameterList, annotations, body);
	    },
	    peekPropertyDefinition_: function(type) {
	      return this.peekPropertyName_(type) || type === STAR && this.options_.propertyMethods && this.options_.generators;
	    },
	    peekPropertyName_: function(type) {
	      switch (type) {
	        case IDENTIFIER:
	        case STRING:
	        case NUMBER:
	          return true;
	        case OPEN_SQUARE:
	          return this.options_.computedPropertyNames;
	        default:
	          return this.peekToken_().isKeyword();
	      }
	    },
	    peekPredefinedString_: function(string) {
	      var token = this.peekToken_();
	      return token.type === IDENTIFIER && token.value === string;
	    },
	    parsePropertySetParameterList_: function() {
	      var start = this.getTreeStartLocation_();
	      var binding;
	      this.pushAnnotations_();
	      if (this.peekPattern_(this.peekType_()))
	        binding = this.parseBindingPattern_();
	      else
	        binding = this.parseBindingIdentifier_();
	      var typeAnnotation = this.parseTypeAnnotationOpt_();
	      var parameter = new FormalParameter(this.getTreeLocation_(start), new BindingElement(this.getTreeLocation_(start), binding, null), typeAnnotation, this.popAnnotations_());
	      return new FormalParameterList(parameter.location, [parameter]);
	    },
	    parsePrimaryExpressionStartingWithParen_: function() {
	      var start = this.getTreeStartLocation_();
	      this.eat_(OPEN_PAREN);
	      if (this.peek_(FOR) && this.options_.generatorComprehension)
	        return this.parseGeneratorComprehension_(start);
	      return this.parseCoverFormals_(start);
	    },
	    parseSyntaxError_: function(message) {
	      var start = this.getTreeStartLocation_();
	      this.reportError_(message);
	      var token = this.nextToken_();
	      return new SyntaxErrorTree(this.getTreeLocation_(start), token, message);
	    },
	    parseUnexpectedToken_: function(name) {
	      return this.parseSyntaxError_(("Unexpected token " + name));
	    },
	    peekExpression_: function(type) {
	      switch (type) {
	        case NO_SUBSTITUTION_TEMPLATE:
	        case TEMPLATE_HEAD:
	          return this.options_.templateLiterals;
	        case BANG:
	        case CLASS:
	        case DELETE:
	        case FALSE:
	        case FUNCTION:
	        case IDENTIFIER:
	        case MINUS:
	        case MINUS_MINUS:
	        case NEW:
	        case NULL:
	        case NUMBER:
	        case OPEN_CURLY:
	        case OPEN_PAREN:
	        case OPEN_SQUARE:
	        case PLUS:
	        case PLUS_PLUS:
	        case SLASH:
	        case SLASH_EQUAL:
	        case STRING:
	        case SUPER:
	        case THIS:
	        case TILDE:
	        case TRUE:
	        case TYPEOF:
	        case VOID:
	        case YIELD:
	          return true;
	        default:
	          return false;
	      }
	    },
	    parseExpression_: function() {
	      var expressionIn = arguments[0] !== (void 0) ? arguments[0] : Expression.IN;
	      var coverInitializedNameCount = this.coverInitializedNameCount_;
	      var expression = this.parseExpressionAllowPattern_(expressionIn);
	      this.ensureNoCoverInitializedNames_(expression, coverInitializedNameCount);
	      return expression;
	    },
	    parseExpression: function() {
	      var fs = this.pushFunctionState_(FUNCTION_STATE_LENIENT);
	      var expression = this.parseExpression_();
	      this.popFunctionState_(fs);
	      return expression;
	    },
	    parseExpressionAllowPattern_: function(expressionIn) {
	      var start = this.getTreeStartLocation_();
	      var expression = this.parseAssignmentExpression_(expressionIn);
	      if (this.peek_(COMMA)) {
	        var expressions = [expression];
	        while (this.eatIf_(COMMA)) {
	          expressions.push(this.parseAssignmentExpression_(expressionIn));
	        }
	        return new CommaExpression(this.getTreeLocation_(start), expressions);
	      }
	      return expression;
	    },
	    peekAssignmentExpression_: function(type) {
	      return this.peekExpression_(type);
	    },
	    parseAssignmentExpression_: function() {
	      var expressionIn = arguments[0] !== (void 0) ? arguments[0] : Expression.NORMAL;
	      if (this.allowYield_ && this.peek_(YIELD))
	        return this.parseYieldExpression_();
	      var start = this.getTreeStartLocation_();
	      var validAsyncParen = false;
	      if (this.options_.asyncFunctions && this.peekPredefinedString_(ASYNC)) {
	        var asyncToken = this.peekToken_();
	        var maybeOpenParenToken = this.peekToken_(1);
	        validAsyncParen = maybeOpenParenToken.type === OPEN_PAREN && asyncToken.location.end.line === maybeOpenParenToken.location.start.line;
	      }
	      var left = this.parseConditional_(expressionIn);
	      var type = this.peekType_();
	      if (this.options_.asyncFunctions && left.type === IDENTIFIER_EXPRESSION && left.identifierToken.value === ASYNC && type === IDENTIFIER) {
	        if (this.peekTokenNoLineTerminator_() !== null) {
	          var bindingIdentifier = this.parseBindingIdentifier_();
	          var asyncToken$__25 = left.identifierToken;
	          return this.parseArrowFunction_(start, bindingIdentifier, asyncToken$__25);
	        }
	      }
	      if (type === ARROW && this.peekTokenNoLineTerminator_() !== null) {
	        if (left.type === COVER_FORMALS || left.type === IDENTIFIER_EXPRESSION)
	          return this.parseArrowFunction_(start, left, null);
	        if (validAsyncParen && left.type === CALL_EXPRESSION) {
	          var asyncToken$__26 = left.operand.identifierToken;
	          return this.parseArrowFunction_(start, left.args, asyncToken$__26);
	        }
	      }
	      left = this.coverFormalsToParenExpression_(left);
	      if (this.peekAssignmentOperator_(type)) {
	        if (type === EQUAL)
	          left = this.transformLeftHandSideExpression_(left);
	        if (!left.isLeftHandSideExpression() && !left.isPattern()) {
	          this.reportError_('Left hand side of assignment must be new, call, member, function, primary expressions or destructuring pattern');
	        }
	        var operator = this.nextToken_();
	        var right = this.parseAssignmentExpression_(expressionIn);
	        return new BinaryExpression(this.getTreeLocation_(start), left, operator, right);
	      }
	      return left;
	    },
	    transformLeftHandSideExpression_: function(tree) {
	      switch (tree.type) {
	        case ARRAY_LITERAL_EXPRESSION:
	        case OBJECT_LITERAL_EXPRESSION:
	          this.scanner_.index = tree.location.start.offset;
	          return this.parseAssignmentPattern_();
	      }
	      return tree;
	    },
	    peekAssignmentOperator_: function(type) {
	      return isAssignmentOperator(type);
	    },
	    parseConditional_: function(expressionIn) {
	      var start = this.getTreeStartLocation_();
	      var condition = this.parseLogicalOR_(expressionIn);
	      if (this.eatIf_(QUESTION)) {
	        condition = this.toPrimaryExpression_(condition);
	        var left = this.parseAssignmentExpression_();
	        this.eat_(COLON);
	        var right = this.parseAssignmentExpression_(expressionIn);
	        return new ConditionalExpression(this.getTreeLocation_(start), condition, left, right);
	      }
	      return condition;
	    },
	    newBinaryExpression_: function(start, left, operator, right) {
	      left = this.toPrimaryExpression_(left);
	      right = this.toPrimaryExpression_(right);
	      return new BinaryExpression(this.getTreeLocation_(start), left, operator, right);
	    },
	    parseLogicalOR_: function(expressionIn) {
	      var start = this.getTreeStartLocation_();
	      var left = this.parseLogicalAND_(expressionIn);
	      var operator;
	      while (operator = this.eatOpt_(OR)) {
	        var right = this.parseLogicalAND_(expressionIn);
	        left = this.newBinaryExpression_(start, left, operator, right);
	      }
	      return left;
	    },
	    parseLogicalAND_: function(expressionIn) {
	      var start = this.getTreeStartLocation_();
	      var left = this.parseBitwiseOR_(expressionIn);
	      var operator;
	      while (operator = this.eatOpt_(AND)) {
	        var right = this.parseBitwiseOR_(expressionIn);
	        left = this.newBinaryExpression_(start, left, operator, right);
	      }
	      return left;
	    },
	    parseBitwiseOR_: function(expressionIn) {
	      var start = this.getTreeStartLocation_();
	      var left = this.parseBitwiseXOR_(expressionIn);
	      var operator;
	      while (operator = this.eatOpt_(BAR)) {
	        var right = this.parseBitwiseXOR_(expressionIn);
	        left = this.newBinaryExpression_(start, left, operator, right);
	      }
	      return left;
	    },
	    parseBitwiseXOR_: function(expressionIn) {
	      var start = this.getTreeStartLocation_();
	      var left = this.parseBitwiseAND_(expressionIn);
	      var operator;
	      while (operator = this.eatOpt_(CARET)) {
	        var right = this.parseBitwiseAND_(expressionIn);
	        left = this.newBinaryExpression_(start, left, operator, right);
	      }
	      return left;
	    },
	    parseBitwiseAND_: function(expressionIn) {
	      var start = this.getTreeStartLocation_();
	      var left = this.parseEquality_(expressionIn);
	      var operator;
	      while (operator = this.eatOpt_(AMPERSAND)) {
	        var right = this.parseEquality_(expressionIn);
	        left = this.newBinaryExpression_(start, left, operator, right);
	      }
	      return left;
	    },
	    parseEquality_: function(expressionIn) {
	      var start = this.getTreeStartLocation_();
	      var left = this.parseRelational_(expressionIn);
	      while (this.peekEqualityOperator_(this.peekType_())) {
	        var operator = this.nextToken_();
	        var right = this.parseRelational_(expressionIn);
	        left = this.newBinaryExpression_(start, left, operator, right);
	      }
	      return left;
	    },
	    peekEqualityOperator_: function(type) {
	      switch (type) {
	        case EQUAL_EQUAL:
	        case NOT_EQUAL:
	        case EQUAL_EQUAL_EQUAL:
	        case NOT_EQUAL_EQUAL:
	          return true;
	      }
	      return false;
	    },
	    parseRelational_: function(expressionIn) {
	      var start = this.getTreeStartLocation_();
	      var left = this.parseShiftExpression_();
	      while (this.peekRelationalOperator_(expressionIn)) {
	        var operator = this.nextToken_();
	        var right = this.parseShiftExpression_();
	        left = this.newBinaryExpression_(start, left, operator, right);
	      }
	      return left;
	    },
	    peekRelationalOperator_: function(expressionIn) {
	      switch (this.peekType_()) {
	        case OPEN_ANGLE:
	        case CLOSE_ANGLE:
	        case GREATER_EQUAL:
	        case LESS_EQUAL:
	        case INSTANCEOF:
	          return true;
	        case IN:
	          return expressionIn === Expression.NORMAL;
	        default:
	          return false;
	      }
	    },
	    parseShiftExpression_: function() {
	      var start = this.getTreeStartLocation_();
	      var left = this.parseAdditiveExpression_();
	      while (this.peekShiftOperator_(this.peekType_())) {
	        var operator = this.nextToken_();
	        var right = this.parseAdditiveExpression_();
	        left = this.newBinaryExpression_(start, left, operator, right);
	      }
	      return left;
	    },
	    peekShiftOperator_: function(type) {
	      switch (type) {
	        case LEFT_SHIFT:
	        case RIGHT_SHIFT:
	        case UNSIGNED_RIGHT_SHIFT:
	          return true;
	        default:
	          return false;
	      }
	    },
	    parseAdditiveExpression_: function() {
	      var start = this.getTreeStartLocation_();
	      var left = this.parseMultiplicativeExpression_();
	      while (this.peekAdditiveOperator_(this.peekType_())) {
	        var operator = this.nextToken_();
	        var right = this.parseMultiplicativeExpression_();
	        left = this.newBinaryExpression_(start, left, operator, right);
	      }
	      return left;
	    },
	    peekAdditiveOperator_: function(type) {
	      switch (type) {
	        case PLUS:
	        case MINUS:
	          return true;
	        default:
	          return false;
	      }
	    },
	    parseMultiplicativeExpression_: function() {
	      var start = this.getTreeStartLocation_();
	      var left = this.parseExponentiationExpression_();
	      while (this.peekMultiplicativeOperator_(this.peekType_())) {
	        var operator = this.nextToken_();
	        var right = this.parseExponentiationExpression_();
	        left = this.newBinaryExpression_(start, left, operator, right);
	      }
	      return left;
	    },
	    parseExponentiationExpression_: function() {
	      var start = this.getTreeStartLocation_();
	      var left = this.parseUnaryExpression_();
	      while (this.peekExponentiationExpression_(this.peekType_())) {
	        var operator = this.nextToken_();
	        var right = this.parseExponentiationExpression_();
	        left = this.newBinaryExpression_(start, left, operator, right);
	      }
	      return left;
	    },
	    peekMultiplicativeOperator_: function(type) {
	      switch (type) {
	        case STAR:
	        case SLASH:
	        case PERCENT:
	          return true;
	        default:
	          return false;
	      }
	    },
	    peekExponentiationExpression_: function(type) {
	      return type === STAR_STAR;
	    },
	    parseUnaryExpression_: function() {
	      var start = this.getTreeStartLocation_();
	      if (this.allowAwait_ && this.peekPredefinedString_(AWAIT)) {
	        this.eatId_();
	        var operand;
	        if (this.allowYield_ && this.peek_(YIELD)) {
	          operand = this.parseYieldExpression_();
	        } else {
	          operand = this.parseUnaryExpression_();
	          operand = this.toPrimaryExpression_(operand);
	        }
	        return new AwaitExpression(this.getTreeLocation_(start), operand);
	      }
	      if (this.peekUnaryOperator_(this.peekType_())) {
	        var operator = this.nextToken_();
	        var operand$__27 = this.parseUnaryExpression_();
	        operand$__27 = this.toPrimaryExpression_(operand$__27);
	        return new UnaryExpression(this.getTreeLocation_(start), operator, operand$__27);
	      }
	      return this.parsePostfixExpression_();
	    },
	    peekUnaryOperator_: function(type) {
	      switch (type) {
	        case DELETE:
	        case VOID:
	        case TYPEOF:
	        case PLUS_PLUS:
	        case MINUS_MINUS:
	        case PLUS:
	        case MINUS:
	        case TILDE:
	        case BANG:
	          return true;
	        default:
	          return false;
	      }
	    },
	    parsePostfixExpression_: function() {
	      var start = this.getTreeStartLocation_();
	      var operand = this.parseLeftHandSideExpression_();
	      while (this.peekPostfixOperator_(this.peekType_())) {
	        operand = this.toPrimaryExpression_(operand);
	        var operator = this.nextToken_();
	        operand = new PostfixExpression(this.getTreeLocation_(start), operand, operator);
	      }
	      return operand;
	    },
	    peekPostfixOperator_: function(type) {
	      switch (type) {
	        case PLUS_PLUS:
	        case MINUS_MINUS:
	          var token = this.peekTokenNoLineTerminator_();
	          return token !== null;
	      }
	      return false;
	    },
	    parseLeftHandSideExpression_: function() {
	      var start = this.getTreeStartLocation_();
	      var operand = this.parseNewExpression_();
	      if (!(operand instanceof NewExpression) || operand.args !== null) {
	        loop: while (true) {
	          switch (this.peekType_()) {
	            case OPEN_PAREN:
	              operand = this.toPrimaryExpression_(operand);
	              operand = this.parseCallExpression_(start, operand);
	              break;
	            case OPEN_SQUARE:
	              operand = this.toPrimaryExpression_(operand);
	              operand = this.parseMemberLookupExpression_(start, operand);
	              break;
	            case PERIOD:
	              operand = this.toPrimaryExpression_(operand);
	              operand = this.parseMemberExpression_(start, operand);
	              break;
	            case NO_SUBSTITUTION_TEMPLATE:
	            case TEMPLATE_HEAD:
	              if (!this.options_.templateLiterals)
	                break loop;
	              operand = this.toPrimaryExpression_(operand);
	              operand = this.parseTemplateLiteral_(operand);
	              break;
	            default:
	              break loop;
	          }
	        }
	      }
	      return operand;
	    },
	    parseMemberExpressionNoNew_: function() {
	      var start = this.getTreeStartLocation_();
	      var operand;
	      if (this.peekType_() === FUNCTION) {
	        operand = this.parseFunctionExpression_();
	      } else {
	        operand = this.parsePrimaryExpression_();
	      }
	      loop: while (true) {
	        switch (this.peekType_()) {
	          case OPEN_SQUARE:
	            operand = this.toPrimaryExpression_(operand);
	            operand = this.parseMemberLookupExpression_(start, operand);
	            break;
	          case PERIOD:
	            operand = this.toPrimaryExpression_(operand);
	            operand = this.parseMemberExpression_(start, operand);
	            break;
	          case NO_SUBSTITUTION_TEMPLATE:
	          case TEMPLATE_HEAD:
	            if (!this.options_.templateLiterals)
	              break loop;
	            operand = this.toPrimaryExpression_(operand);
	            operand = this.parseTemplateLiteral_(operand);
	            break;
	          default:
	            break loop;
	        }
	      }
	      return operand;
	    },
	    parseMemberExpression_: function(start, operand) {
	      this.eat_(PERIOD);
	      var name = this.eatIdName_();
	      return new MemberExpression(this.getTreeLocation_(start), operand, name);
	    },
	    parseMemberLookupExpression_: function(start, operand) {
	      this.eat_(OPEN_SQUARE);
	      var member = this.parseExpression_();
	      this.eat_(CLOSE_SQUARE);
	      return new MemberLookupExpression(this.getTreeLocation_(start), operand, member);
	    },
	    parseCallExpression_: function(start, operand) {
	      var args = this.parseArguments_();
	      return new CallExpression(this.getTreeLocation_(start), operand, args);
	    },
	    parseNewExpression_: function() {
	      var operand,
	          start;
	      switch (this.peekType_()) {
	        case NEW:
	          start = this.getTreeStartLocation_();
	          this.eat_(NEW);
	          if (this.peek_(SUPER)) {
	            operand = this.parseSuperExpression_(true);
	          } else {
	            operand = this.toPrimaryExpression_(this.parseNewExpression_());
	          }
	          var args = null;
	          if (this.peek_(OPEN_PAREN)) {
	            args = this.parseArguments_();
	          }
	          return new NewExpression(this.getTreeLocation_(start), operand, args);
	        case SUPER:
	          return this.parseSuperExpression_(false);
	        default:
	          return this.parseMemberExpressionNoNew_();
	      }
	    },
	    parseArguments_: function() {
	      var start = this.getTreeStartLocation_();
	      var args = [];
	      this.eat_(OPEN_PAREN);
	      if (!this.peek_(CLOSE_PAREN)) {
	        args.push(this.parseArgument_());
	        while (this.eatIf_(COMMA)) {
	          args.push(this.parseArgument_());
	        }
	      }
	      this.eat_(CLOSE_PAREN);
	      return new ArgumentList(this.getTreeLocation_(start), args);
	    },
	    parseArgument_: function() {
	      if (this.peekSpread_(this.peekType_()))
	        return this.parseSpreadExpression_();
	      return this.parseAssignmentExpression_();
	    },
	    parseArrowFunction_: function(start, tree, asyncToken) {
	      var formals;
	      var kind = FUNCTION_STATE_ARROW;
	      if (asyncToken && asyncToken.value === ASYNC) {
	        kind |= FUNCTION_STATE_ASYNC;
	      }
	      var fs = this.pushFunctionState_(kind);
	      switch (tree.type) {
	        case IDENTIFIER_EXPRESSION:
	          tree = new BindingIdentifier(tree.location, tree.identifierToken);
	        case BINDING_IDENTIFIER:
	          formals = new FormalParameterList(this.getTreeLocation_(start), [new FormalParameter(tree.location, new BindingElement(tree.location, tree, null), null, [])]);
	          break;
	        case FORMAL_PARAMETER_LIST:
	          formals = tree;
	          break;
	        default:
	          formals = this.toFormalParameters_(start, tree, asyncToken);
	      }
	      this.eat_(ARROW);
	      var body = this.parseConciseBody_();
	      this.popFunctionState_(fs);
	      return new ArrowFunctionExpression(this.getTreeLocation_(start), asyncToken, formals, body);
	    },
	    parseCoverFormals_: function(start) {
	      var expressions = [];
	      if (!this.peek_(CLOSE_PAREN)) {
	        do {
	          var type = this.peekType_();
	          if (this.peekRest_(type)) {
	            expressions.push(this.parseRestParameter_());
	            break;
	          } else {
	            expressions.push(this.parseAssignmentExpression_());
	          }
	          if (this.eatIf_(COMMA))
	            continue;
	        } while (!this.peek_(CLOSE_PAREN) && !this.isAtEnd());
	      }
	      this.eat_(CLOSE_PAREN);
	      return new CoverFormals(this.getTreeLocation_(start), expressions);
	    },
	    ensureNoCoverInitializedNames_: function(tree, coverInitializedNameCount) {
	      if (coverInitializedNameCount === this.coverInitializedNameCount_)
	        return ;
	      var finder = new ValidateObjectLiteral();
	      finder.visitAny(tree);
	      if (finder.found) {
	        var token = finder.errorToken;
	        this.reportError_(token.location, ("Unexpected token " + token));
	      }
	    },
	    toPrimaryExpression_: function(tree) {
	      if (tree.type === COVER_FORMALS)
	        return this.coverFormalsToParenExpression_(tree);
	      return tree;
	    },
	    validateCoverFormalsAsParenExpression_: function(tree) {
	      for (var i = 0; i < tree.expressions.length; i++) {
	        if (tree.expressions[i].type === REST_PARAMETER) {
	          var token = new Token(DOT_DOT_DOT, tree.expressions[i].location);
	          this.reportError_(token.location, ("Unexpected token " + token));
	          return ;
	        }
	      }
	    },
	    coverFormalsToParenExpression_: function(tree) {
	      if (tree.type === COVER_FORMALS) {
	        var expressions = tree.expressions;
	        if (expressions.length === 0) {
	          var message = 'Unexpected token )';
	          this.reportError_(tree.location, message);
	        } else {
	          this.validateCoverFormalsAsParenExpression_(tree);
	          var expression;
	          if (expressions.length > 1)
	            expression = new CommaExpression(expressions[0].location, expressions);
	          else
	            expression = expressions[0];
	          return new ParenExpression(tree.location, expression);
	        }
	      }
	      return tree;
	    },
	    toFormalParameters_: function(start, tree, asyncToken) {
	      this.scanner_.index = start.offset;
	      return this.parseArrowFormalParameters_(asyncToken);
	    },
	    parseArrowFormalParameters_: function(asyncToken) {
	      if (asyncToken)
	        this.eat_(IDENTIFIER);
	      this.eat_(OPEN_PAREN);
	      var parameters = this.parseFormalParameters_();
	      this.eat_(CLOSE_PAREN);
	      return parameters;
	    },
	    peekArrow_: function(type) {
	      return type === ARROW && this.options_.arrowFunctions;
	    },
	    parseConciseBody_: function() {
	      if (this.peek_(OPEN_CURLY))
	        return this.parseFunctionBody_(null);
	      return this.parseAssignmentExpression_();
	    },
	    parseGeneratorComprehension_: function(start) {
	      var comprehensionList = this.parseComprehensionList_();
	      var expression = this.parseAssignmentExpression_();
	      this.eat_(CLOSE_PAREN);
	      return new GeneratorComprehension(this.getTreeLocation_(start), comprehensionList, expression);
	    },
	    parseForBinding_: function() {
	      if (this.peekPattern_(this.peekType_()))
	        return this.parseBindingPattern_();
	      return this.parseBindingIdentifier_();
	    },
	    peekPattern_: function(type) {
	      return this.options_.destructuring && (this.peekObjectPattern_(type) || this.peekArrayPattern_(type));
	    },
	    peekArrayPattern_: function(type) {
	      return type === OPEN_SQUARE;
	    },
	    peekObjectPattern_: function(type) {
	      return type === OPEN_CURLY;
	    },
	    parseBindingPattern_: function() {
	      return this.parsePattern_(true);
	    },
	    parsePattern_: function(useBinding) {
	      if (this.peekArrayPattern_(this.peekType_()))
	        return this.parseArrayPattern_(useBinding);
	      return this.parseObjectPattern_(useBinding);
	    },
	    parseArrayBindingPattern_: function() {
	      return this.parseArrayPattern_(true);
	    },
	    parsePatternElement_: function(useBinding) {
	      return useBinding ? this.parseBindingElement_() : this.parseAssignmentElement_();
	    },
	    parsePatternRestElement_: function(useBinding) {
	      return useBinding ? this.parseBindingRestElement_() : this.parseAssignmentRestElement_();
	    },
	    parseArrayPattern_: function(useBinding) {
	      var start = this.getTreeStartLocation_();
	      var elements = [];
	      this.eat_(OPEN_SQUARE);
	      var type;
	      while ((type = this.peekType_()) !== CLOSE_SQUARE && type !== END_OF_FILE) {
	        this.parseElisionOpt_(elements);
	        if (this.peekRest_(this.peekType_())) {
	          elements.push(this.parsePatternRestElement_(useBinding));
	          break;
	        } else {
	          elements.push(this.parsePatternElement_(useBinding));
	          if (this.peek_(COMMA) && !this.peek_(CLOSE_SQUARE, 1)) {
	            this.nextToken_();
	          }
	        }
	      }
	      this.eat_(CLOSE_SQUARE);
	      return new ArrayPattern(this.getTreeLocation_(start), elements);
	    },
	    parseBindingElementList_: function(elements) {
	      this.parseElisionOpt_(elements);
	      elements.push(this.parseBindingElement_());
	      while (this.eatIf_(COMMA)) {
	        this.parseElisionOpt_(elements);
	        elements.push(this.parseBindingElement_());
	      }
	    },
	    parseElisionOpt_: function(elements) {
	      while (this.eatIf_(COMMA)) {
	        elements.push(null);
	      }
	    },
	    peekBindingElement_: function(type) {
	      return this.peekBindingIdentifier_(type) || this.peekPattern_(type);
	    },
	    parseBindingElement_: function() {
	      var start = this.getTreeStartLocation_();
	      var binding = this.parseBindingElementBinding_();
	      var initializer = this.parseBindingElementInitializer_();
	      return new BindingElement(this.getTreeLocation_(start), binding, initializer);
	    },
	    parseBindingElementBinding_: function() {
	      if (this.peekPattern_(this.peekType_()))
	        return this.parseBindingPattern_();
	      return this.parseBindingIdentifier_();
	    },
	    parseBindingElementInitializer_: function() {
	      var initializer = arguments[0] !== (void 0) ? arguments[0] : Initializer.OPTIONAL;
	      if (this.peek_(EQUAL) || initializer === Initializer.REQUIRED) {
	        return this.parseInitializer_();
	      }
	      return null;
	    },
	    parseBindingRestElement_: function() {
	      var start = this.getTreeStartLocation_();
	      this.eat_(DOT_DOT_DOT);
	      var identifier = this.parseBindingIdentifier_();
	      return new SpreadPatternElement(this.getTreeLocation_(start), identifier);
	    },
	    parseObjectPattern_: function(useBinding) {
	      var start = this.getTreeStartLocation_();
	      var elements = [];
	      this.eat_(OPEN_CURLY);
	      var type;
	      while ((type = this.peekType_()) !== CLOSE_CURLY && type !== END_OF_FILE) {
	        elements.push(this.parsePatternProperty_(useBinding));
	        if (!this.eatIf_(COMMA))
	          break;
	      }
	      this.eat_(CLOSE_CURLY);
	      return new ObjectPattern(this.getTreeLocation_(start), elements);
	    },
	    parsePatternProperty_: function(useBinding) {
	      var start = this.getTreeStartLocation_();
	      var name = this.parsePropertyName_();
	      var requireColon = name.type !== LITERAL_PROPERTY_NAME || !name.literalToken.isStrictKeyword() && name.literalToken.type !== IDENTIFIER;
	      if (requireColon || this.peek_(COLON)) {
	        this.eat_(COLON);
	        var element = this.parsePatternElement_(useBinding);
	        return new ObjectPatternField(this.getTreeLocation_(start), name, element);
	      }
	      var token = name.literalToken;
	      if (this.strictMode_ && token.isStrictKeyword())
	        this.reportReservedIdentifier_(token);
	      if (useBinding) {
	        var binding = new BindingIdentifier(name.location, token);
	        var initializer$__28 = this.parseInitializerOpt_(Expression.NORMAL);
	        return new BindingElement(this.getTreeLocation_(start), binding, initializer$__28);
	      }
	      var assignment = new IdentifierExpression(name.location, token);
	      var initializer = this.parseInitializerOpt_(Expression.NORMAL);
	      return new AssignmentElement(this.getTreeLocation_(start), assignment, initializer);
	    },
	    parseAssignmentPattern_: function() {
	      return this.parsePattern_(false);
	    },
	    parseArrayAssignmentPattern_: function() {
	      return this.parseArrayPattern_(false);
	    },
	    parseAssignmentElement_: function() {
	      var start = this.getTreeStartLocation_();
	      var assignment = this.parseDestructuringAssignmentTarget_();
	      var initializer = this.parseInitializerOpt_(Expression.NORMAL);
	      return new AssignmentElement(this.getTreeLocation_(start), assignment, initializer);
	    },
	    parseDestructuringAssignmentTarget_: function() {
	      switch (this.peekType_()) {
	        case OPEN_SQUARE:
	          return this.parseArrayAssignmentPattern_();
	        case OPEN_CURLY:
	          return this.parseObjectAssignmentPattern_();
	      }
	      var expression = this.parseLeftHandSideExpression_();
	      return this.coverFormalsToParenExpression_(expression);
	    },
	    parseAssignmentRestElement_: function() {
	      var start = this.getTreeStartLocation_();
	      this.eat_(DOT_DOT_DOT);
	      var id = this.parseDestructuringAssignmentTarget_();
	      return new SpreadPatternElement(this.getTreeLocation_(start), id);
	    },
	    parseObjectAssignmentPattern_: function() {
	      return this.parseObjectPattern_(false);
	    },
	    parseAssignmentProperty_: function() {
	      return this.parsePatternProperty_(false);
	    },
	    parseTemplateLiteral_: function(operand) {
	      if (!this.options_.templateLiterals)
	        return this.parseUnexpectedToken_('`');
	      var start = operand ? operand.location.start : this.getTreeStartLocation_();
	      var token = this.nextToken_();
	      var elements = [new TemplateLiteralPortion(token.location, token)];
	      if (token.type === NO_SUBSTITUTION_TEMPLATE) {
	        return new TemplateLiteralExpression(this.getTreeLocation_(start), operand, elements);
	      }
	      var expression = this.parseExpression_();
	      elements.push(new TemplateSubstitution(expression.location, expression));
	      while (expression.type !== SYNTAX_ERROR_TREE) {
	        token = this.nextTemplateLiteralToken_();
	        if (token.type === ERROR || token.type === END_OF_FILE)
	          break;
	        elements.push(new TemplateLiteralPortion(token.location, token));
	        if (token.type === TEMPLATE_TAIL)
	          break;
	        expression = this.parseExpression_();
	        elements.push(new TemplateSubstitution(expression.location, expression));
	      }
	      return new TemplateLiteralExpression(this.getTreeLocation_(start), operand, elements);
	    },
	    parseTypeAnnotationOpt_: function() {
	      if (this.options_.types && this.eatOpt_(COLON)) {
	        return this.parseType_();
	      }
	      return null;
	    },
	    parseType_: function() {
	      switch (this.peekType_()) {
	        case NEW:
	          return this.parseConstructorType_();
	        case OPEN_PAREN:
	        case OPEN_ANGLE:
	          return this.parseFunctionType_();
	      }
	      var start = this.getTreeStartLocation_();
	      var elementType = this.parsePrimaryType_();
	      return this.parseUnionTypeSuffix_(start, elementType);
	    },
	    parsePrimaryType_: function() {
	      var start = this.getTreeStartLocation_();
	      var elementType,
	          token;
	      switch (this.peekType_()) {
	        case VOID:
	          token = this.nextToken_();
	          elementType = new PredefinedType(this.getTreeLocation_(start), token);
	          break;
	        case IDENTIFIER:
	          switch (this.peekToken_().value) {
	            case 'any':
	            case 'boolean':
	            case 'number':
	            case 'string':
	            case 'symbol':
	              token = this.nextToken_();
	              elementType = new PredefinedType(this.getTreeLocation_(start), token);
	              break;
	            default:
	              elementType = this.parseTypeReference_();
	          }
	          break;
	        case TYPEOF:
	          elementType = this.parseTypeQuery_(start);
	          break;
	        case OPEN_CURLY:
	          elementType = this.parseObjectType_();
	          break;
	        default:
	          return this.parseUnexpectedToken_(this.peekToken_());
	      }
	      return this.parseArrayTypeSuffix_(start, elementType);
	    },
	    parseTypeReference_: function() {
	      var start = this.getTreeStartLocation_();
	      var typeName = this.parseTypeName_();
	      var args = null;
	      if (this.peek_(OPEN_ANGLE)) {
	        var args$__29 = this.parseTypeArguments_();
	        return new TypeReference(this.getTreeLocation_(start), typeName, args$__29);
	      }
	      return typeName;
	    },
	    parseUnionTypeSuffix_: function(start, elementType) {
	      if (this.peek_(BAR)) {
	        var types = [elementType];
	        this.eat_(BAR);
	        while (true) {
	          types.push(this.parsePrimaryType_());
	          if (!this.eatIf_(BAR)) {
	            break;
	          }
	        }
	        return new UnionType(this.getTreeLocation_(start), types);
	      }
	      return elementType;
	    },
	    parseArrayTypeSuffix_: function(start, elementType) {
	      var token = this.peekTokenNoLineTerminator_();
	      if (token && token.type === OPEN_SQUARE) {
	        this.eat_(OPEN_SQUARE);
	        this.eat_(CLOSE_SQUARE);
	        elementType = new ArrayType(this.getTreeLocation_(start), elementType);
	        return this.parseArrayTypeSuffix_(start, elementType);
	      }
	      return elementType;
	    },
	    parseTypeArguments_: function() {
	      var start = this.getTreeStartLocation_();
	      this.eat_(OPEN_ANGLE);
	      var args = [this.parseType_()];
	      while (this.peek_(COMMA)) {
	        this.eat_(COMMA);
	        args.push(this.parseType_());
	      }
	      var token = this.nextCloseAngle_();
	      if (token.type !== CLOSE_ANGLE) {
	        return this.parseUnexpectedToken_(token.type);
	      }
	      return new TypeArguments(this.getTreeLocation_(start), args);
	    },
	    parseConstructorType_: function() {
	      var start = this.getTreeStartLocation_();
	      this.eat_(NEW);
	      var typeParameters = this.parseTypeParametersOpt_();
	      this.eat_(OPEN_PAREN);
	      var parameterList = this.parseFormalParameters_();
	      this.eat_(CLOSE_PAREN);
	      this.eat_(ARROW);
	      var returnType = this.parseType_();
	      return new ConstructorType(this.getTreeLocation_(start), typeParameters, parameterList, returnType);
	    },
	    parseObjectType_: function() {
	      var start = this.getTreeStartLocation_();
	      var typeMembers = [];
	      this.eat_(OPEN_CURLY);
	      var type;
	      while (this.peekTypeMember_(type = this.peekType_())) {
	        typeMembers.push(this.parseTypeMember_(type));
	        if (!this.eatIf_(SEMI_COLON)) {
	          break;
	        }
	      }
	      this.eat_(CLOSE_CURLY);
	      return new ObjectType(this.getTreeLocation_(start), typeMembers);
	    },
	    peekTypeMember_: function(type) {
	      switch (type) {
	        case NEW:
	        case OPEN_PAREN:
	        case OPEN_ANGLE:
	        case OPEN_SQUARE:
	        case IDENTIFIER:
	        case STRING:
	        case NUMBER:
	          return true;
	        default:
	          return this.peekToken_().isKeyword();
	      }
	    },
	    parseTypeMember_: function(type) {
	      switch (type) {
	        case NEW:
	          return this.parseConstructSignature_();
	        case OPEN_PAREN:
	        case OPEN_ANGLE:
	          return this.parseCallSignature_();
	        case OPEN_SQUARE:
	          return this.parseIndexSignature_();
	      }
	      var start = this.getTreeStartLocation_();
	      var propertyName = this.parseLiteralPropertyName_();
	      var isOpt = this.eatIf_(QUESTION);
	      type = this.peekType_();
	      if (type === OPEN_ANGLE || type === OPEN_PAREN) {
	        var callSignature = this.parseCallSignature_();
	        return new MethodSignature(this.getTreeLocation_(start), propertyName, isOpt, callSignature);
	      }
	      var typeAnnotation = this.parseTypeAnnotationOpt_();
	      return new PropertySignature(this.getTreeLocation_(start), propertyName, isOpt, typeAnnotation);
	    },
	    parseCallSignature_: function() {
	      var start = this.getTreeStartLocation_();
	      var typeParameters = this.parseTypeParametersOpt_();
	      this.eat_(OPEN_PAREN);
	      var parameterList = this.parseFormalParameters_();
	      this.eat_(CLOSE_PAREN);
	      var returnType = this.parseTypeAnnotationOpt_();
	      return new CallSignature(this.getTreeLocation_(start), typeParameters, parameterList, returnType);
	    },
	    parseConstructSignature_: function() {
	      var start = this.getTreeStartLocation_();
	      this.eat_(NEW);
	      var typeParameters = this.parseTypeParametersOpt_();
	      this.eat_(OPEN_PAREN);
	      var parameterList = this.parseFormalParameters_();
	      this.eat_(CLOSE_PAREN);
	      var returnType = this.parseTypeAnnotationOpt_();
	      return new ConstructSignature(this.getTreeLocation_(start), typeParameters, parameterList, returnType);
	    },
	    parseIndexSignature_: function() {
	      var start = this.getTreeStartLocation_();
	      this.eat_(OPEN_SQUARE);
	      var id = this.eatId_();
	      this.eat_(COLON);
	      var typeName;
	      var typeStart = this.getTreeStartLocation_();
	      if (this.peekPredefinedString_('string')) {
	        typeName = this.eatId_('string');
	      } else {
	        typeName = this.eatId_('number');
	      }
	      var indexType = new PredefinedType(this.getTreeLocation_(typeStart), typeName);
	      this.eat_(CLOSE_SQUARE);
	      this.eat_(COLON);
	      var typeAnnotation = this.parseType_();
	      return new IndexSignature(this.getTreeLocation_(start), id, indexType, typeAnnotation);
	    },
	    parseFunctionType_: function() {
	      var start = this.getTreeStartLocation_();
	      var typeParameters = this.parseTypeParametersOpt_();
	      this.eat_(OPEN_PAREN);
	      var parameterList = this.parseFormalParameters_();
	      this.eat_(CLOSE_PAREN);
	      this.eat_(ARROW);
	      var returnType = this.parseType_();
	      return new FunctionType(this.getTreeLocation_(start), typeParameters, parameterList, returnType);
	    },
	    parseTypeQuery_: function(start) {
	      throw 'NYI';
	    },
	    peekTypeParameters_: function() {
	      return this.peek_(OPEN_ANGLE);
	    },
	    parseTypeParametersOpt_: function() {
	      if (this.peek_(OPEN_ANGLE)) {
	        return this.parseTypeParameters_();
	      }
	      return null;
	    },
	    parseTypeParameters_: function() {
	      var start = this.getTreeStartLocation_();
	      this.eat_(OPEN_ANGLE);
	      var parameters = [this.parseTypeParameter_()];
	      while (this.peek_(COMMA)) {
	        this.eat_(COMMA);
	        parameters.push(this.parseTypeParameter_());
	      }
	      this.eat_(CLOSE_ANGLE);
	      return new TypeParameters(this.getTreeLocation_(start), parameters);
	    },
	    parseTypeParameter_: function() {
	      var start = this.getTreeStartLocation_();
	      var id = this.eatId_();
	      var extendsType = null;
	      if (this.eatIf_(EXTENDS)) {
	        extendsType = this.parseType_();
	      }
	      return new TypeParameter(this.getTreeLocation_(start), id, extendsType);
	    },
	    parseNamedOrPredefinedType_: function() {
	      var start = this.getTreeStartLocation_();
	      switch (this.peekToken_().value) {
	        case 'any':
	        case 'number':
	        case 'boolean':
	        case 'string':
	          var token = this.nextToken_();
	          return new PredefinedType(this.getTreeLocation_(start), token);
	        default:
	          return this.parseTypeName_();
	      }
	    },
	    parseTypeName_: function() {
	      var start = this.getTreeStartLocation_();
	      var id = this.eatId_();
	      var typeName = new TypeName(this.getTreeLocation_(start), null, id);
	      while (this.eatIf_(PERIOD)) {
	        var memberName = this.eatIdName_();
	        typeName = new TypeName(this.getTreeLocation_(start), typeName, memberName);
	      }
	      return typeName;
	    },
	    parseInterfaceDeclaration_: function() {
	      var start = this.getTreeStartLocation_();
	      this.eat_(INTERFACE);
	      var name = this.eatId_();
	      var typeParameters = this.parseTypeParametersOpt_();
	      var extendsClause;
	      if (this.eatIf_(EXTENDS)) {
	        extendsClause = this.parseInterfaceExtendsClause_();
	      } else {
	        extendsClause = [];
	      }
	      var objectType = this.parseObjectType_();
	      return new InterfaceDeclaration(this.getTreeLocation_(start), name, typeParameters, extendsClause, objectType);
	    },
	    parseInterfaceExtendsClause_: function() {
	      var result = [this.parseTypeReference_()];
	      while (this.eatIf_(COMMA)) {
	        result.push(this.parseTypeReference_());
	      }
	      return result;
	    },
	    parseAnnotatedDeclarations_: function(parsingModuleItem) {
	      this.pushAnnotations_();
	      var declaration;
	      var type = this.peekType_();
	      if (parsingModuleItem) {
	        declaration = this.parseModuleItem_(type);
	      } else {
	        declaration = this.parseStatementListItem_(type);
	      }
	      if (this.annotations_.length > 0) {
	        return this.parseSyntaxError_('Unsupported annotated expression');
	      }
	      return declaration;
	    },
	    parseAnnotations_: function() {
	      var annotations = [];
	      while (this.eatIf_(AT)) {
	        annotations.push(this.parseAnnotation_());
	      }
	      return annotations;
	    },
	    pushAnnotations_: function() {
	      this.annotations_ = this.parseAnnotations_();
	    },
	    popAnnotations_: function() {
	      var annotations = this.annotations_;
	      this.annotations_ = [];
	      return annotations;
	    },
	    parseAnnotation_: function() {
	      var start = this.getTreeStartLocation_();
	      var expression = this.parseMemberExpressionNoNew_();
	      var args = null;
	      if (this.peek_(OPEN_PAREN))
	        args = this.parseArguments_();
	      return new Annotation(this.getTreeLocation_(start), expression, args);
	    },
	    eatPossibleImplicitSemiColon_: function() {
	      var token = this.peekTokenNoLineTerminator_();
	      if (!token)
	        return ;
	      switch (token.type) {
	        case SEMI_COLON:
	          this.nextToken_();
	          return ;
	        case END_OF_FILE:
	        case CLOSE_CURLY:
	          return ;
	      }
	      this.reportError_('Semi-colon expected');
	    },
	    peekImplicitSemiColon_: function() {
	      switch (this.peekType_()) {
	        case SEMI_COLON:
	        case CLOSE_CURLY:
	        case END_OF_FILE:
	          return true;
	      }
	      var token = this.peekTokenNoLineTerminator_();
	      return token === null;
	    },
	    eatOpt_: function(expectedTokenType) {
	      if (this.peek_(expectedTokenType))
	        return this.nextToken_();
	      return null;
	    },
	    eatIdOpt_: function() {
	      return this.peek_(IDENTIFIER) ? this.eatId_() : null;
	    },
	    eatId_: function() {
	      var expected = arguments[0];
	      var token = this.nextToken_();
	      if (!token) {
	        if (expected)
	          this.reportError_(this.peekToken_(), ("expected '" + expected + "'"));
	        return null;
	      }
	      if (token.type === IDENTIFIER) {
	        if (expected && token.value !== expected)
	          this.reportExpectedError_(token, expected);
	        return token;
	      }
	      if (token.isStrictKeyword()) {
	        if (this.strictMode_) {
	          this.reportReservedIdentifier_(token);
	        } else {
	          return new IdentifierToken(token.location, token.type);
	        }
	      } else {
	        this.reportExpectedError_(token, expected || 'identifier');
	      }
	      return token;
	    },
	    eatIdName_: function() {
	      var t = this.nextToken_();
	      if (t.type !== IDENTIFIER) {
	        if (!t.isKeyword()) {
	          this.reportExpectedError_(t, 'identifier');
	          return null;
	        }
	        return new IdentifierToken(t.location, t.type);
	      }
	      return t;
	    },
	    eat_: function(expectedTokenType) {
	      var token = this.nextToken_();
	      if (token.type !== expectedTokenType) {
	        this.reportExpectedError_(token, expectedTokenType);
	        return null;
	      }
	      return token;
	    },
	    eatIf_: function(expectedTokenType) {
	      if (this.peek_(expectedTokenType)) {
	        this.nextToken_();
	        return true;
	      }
	      return false;
	    },
	    reportExpectedError_: function(token, expected) {
	      this.reportError_(token, ("Unexpected token " + token));
	    },
	    getTreeStartLocation_: function() {
	      return this.peekToken_().location.start;
	    },
	    getTreeEndLocation_: function() {
	      return this.scanner_.lastToken.location.end;
	    },
	    getTreeLocation_: function(start) {
	      return new SourceRange(start, this.getTreeEndLocation_());
	    },
	    handleComment: function(range) {},
	    nextToken_: function() {
	      return this.scanner_.nextToken();
	    },
	    nextRegularExpressionLiteralToken_: function() {
	      return this.scanner_.nextRegularExpressionLiteralToken();
	    },
	    nextTemplateLiteralToken_: function() {
	      return this.scanner_.nextTemplateLiteralToken();
	    },
	    nextCloseAngle_: function() {
	      return this.scanner_.nextCloseAngle();
	    },
	    isAtEnd: function() {
	      return this.scanner_.isAtEnd();
	    },
	    peek_: function(expectedType, opt_index) {
	      return this.peekToken_(opt_index).type === expectedType;
	    },
	    peekType_: function() {
	      return this.peekToken_().type;
	    },
	    peekToken_: function(opt_index) {
	      return this.scanner_.peekToken(opt_index);
	    },
	    peekTokenNoLineTerminator_: function() {
	      return this.scanner_.peekTokenNoLineTerminator();
	    },
	    reportError_: function() {
	      for (var args = [],
	          $__15 = 0; $__15 < arguments.length; $__15++)
	        args[$__15] = arguments[$__15];
	      if (args.length === 1) {
	        this.errorReporter_.reportError(this.scanner_.getPosition(), args[0]);
	      } else {
	        var location = args[0];
	        if (location instanceof Token) {
	          location = location.location;
	        }
	        this.errorReporter_.reportError(location.start, args[1]);
	      }
	    },
	    reportReservedIdentifier_: function(token) {
	      this.reportError_(token, (token.type + " is a reserved identifier"));
	    }
	  }, {});
	  return {get Parser() {
	      return Parser;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/util/SourcePosition.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/util/SourcePosition.js";
	  var SourcePosition = function SourcePosition(source, offset) {
	    this.source = source;
	    this.offset = offset;
	    this.line_ = -1;
	    this.column_ = -1;
	  };
	  ($traceurRuntime.createClass)(SourcePosition, {
	    get line() {
	      if (this.line_ === -1)
	        this.line_ = this.source.lineNumberTable.getLine(this.offset);
	      return this.line_;
	    },
	    get column() {
	      if (this.column_ === -1)
	        this.column_ = this.source.lineNumberTable.getColumn(this.offset);
	      return this.column_;
	    },
	    toString: function() {
	      var name = this.source ? this.source.name : '';
	      return (name + ":" + (this.line + 1) + ":" + (this.column + 1));
	    }
	  }, {});
	  return {get SourcePosition() {
	      return SourcePosition;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/syntax/LineNumberTable.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/syntax/LineNumberTable.js";
	  var SourcePosition = System.get("traceur@0.0.87/src/util/SourcePosition.js").SourcePosition;
	  var SourceRange = System.get("traceur@0.0.87/src/util/SourceRange.js").SourceRange;
	  var isLineTerminator = System.get("traceur@0.0.87/src/syntax/Scanner.js").isLineTerminator;
	  var MAX_INT_REPRESENTATION = 9007199254740992;
	  function computeLineStartOffsets(source) {
	    var lineStartOffsets = [0];
	    var k = 1;
	    for (var index = 0; index < source.length; index++) {
	      var code = source.charCodeAt(index);
	      if (isLineTerminator(code)) {
	        if (code === 13 && source.charCodeAt(index + 1) === 10) {
	          index++;
	        }
	        lineStartOffsets[k++] = index + 1;
	      }
	    }
	    lineStartOffsets[k++] = MAX_INT_REPRESENTATION;
	    return lineStartOffsets;
	  }
	  var LineNumberTable = function LineNumberTable(sourceFile) {
	    this.sourceFile_ = sourceFile;
	    this.lineStartOffsets_ = null;
	    this.lastLine_ = 0;
	    this.lastOffset_ = -1;
	  };
	  ($traceurRuntime.createClass)(LineNumberTable, {
	    ensureLineStartOffsets_: function() {
	      if (!this.lineStartOffsets_) {
	        this.lineStartOffsets_ = computeLineStartOffsets(this.sourceFile_.contents);
	      }
	    },
	    getSourcePosition: function(offset) {
	      return new SourcePosition(this.sourceFile_, offset);
	    },
	    getLine: function(offset) {
	      if (offset === this.lastOffset_)
	        return this.lastLine_;
	      this.ensureLineStartOffsets_();
	      if (offset < 0)
	        return 0;
	      var line;
	      if (offset < this.lastOffset_) {
	        for (var i = this.lastLine_; i >= 0; i--) {
	          if (this.lineStartOffsets_[i] <= offset) {
	            line = i;
	            break;
	          }
	        }
	      } else {
	        for (var i$__4 = this.lastLine_; true; i$__4++) {
	          if (this.lineStartOffsets_[i$__4] > offset) {
	            line = i$__4 - 1;
	            break;
	          }
	        }
	      }
	      this.lastLine_ = line;
	      this.lastOffset_ = offset;
	      return line;
	    },
	    offsetOfLine: function(line) {
	      this.ensureLineStartOffsets_();
	      return this.lineStartOffsets_[line];
	    },
	    getColumn: function(offset) {
	      var line = this.getLine(offset);
	      return offset - this.lineStartOffsets_[line];
	    },
	    getSourceRange: function(startOffset, endOffset) {
	      return new SourceRange(this.getSourcePosition(startOffset), this.getSourcePosition(endOffset));
	    }
	  }, {});
	  return {get LineNumberTable() {
	      return LineNumberTable;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/syntax/SourceFile.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/syntax/SourceFile.js";
	  var LineNumberTable = System.get("traceur@0.0.87/src/syntax/LineNumberTable.js").LineNumberTable;
	  var SourceFile = function SourceFile(name, contents) {
	    this.name = name;
	    this.contents = contents;
	    this.lineNumberTable = new LineNumberTable(this);
	  };
	  ($traceurRuntime.createClass)(SourceFile, {}, {});
	  return {get SourceFile() {
	      return SourceFile;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/util/CollectingErrorReporter.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/util/CollectingErrorReporter.js";
	  var ErrorReporter = System.get("traceur@0.0.87/src/util/ErrorReporter.js").ErrorReporter;
	  var MultipleErrors = function MultipleErrors(errors) {
	    $traceurRuntime.superConstructor($MultipleErrors).call(this);
	    this.message = errors ? errors.join('\n') + '' : '';
	    this.name = errors && (errors.length > 1) ? 'MultipleErrors' : '';
	    this.errors = errors;
	  };
	  var $MultipleErrors = MultipleErrors;
	  ($traceurRuntime.createClass)(MultipleErrors, {}, {}, Error);
	  var CollectingErrorReporter = function CollectingErrorReporter() {
	    $traceurRuntime.superConstructor($CollectingErrorReporter).call(this);
	    this.errors = [];
	  };
	  var $CollectingErrorReporter = CollectingErrorReporter;
	  ($traceurRuntime.createClass)(CollectingErrorReporter, {
	    reportMessageInternal: function(location, message) {
	      if (location)
	        message = (location + ": " + message);
	      this.errors.push(message);
	    },
	    errorsAsString: function() {
	      return this.toError().message;
	    },
	    toError: function() {
	      return new MultipleErrors(this.errors);
	    }
	  }, {}, ErrorReporter);
	  return {
	    get MultipleErrors() {
	      return MultipleErrors;
	    },
	    get CollectingErrorReporter() {
	      return CollectingErrorReporter;
	    }
	  };
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/ParseTreeTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/ParseTreeTransformer.js";
	  var $__0 = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js"),
	      Annotation = $__0.Annotation,
	      AnonBlock = $__0.AnonBlock,
	      ArgumentList = $__0.ArgumentList,
	      ArrayComprehension = $__0.ArrayComprehension,
	      ArrayLiteralExpression = $__0.ArrayLiteralExpression,
	      ArrayPattern = $__0.ArrayPattern,
	      ArrayType = $__0.ArrayType,
	      ArrowFunctionExpression = $__0.ArrowFunctionExpression,
	      AssignmentElement = $__0.AssignmentElement,
	      AwaitExpression = $__0.AwaitExpression,
	      BinaryExpression = $__0.BinaryExpression,
	      BindingElement = $__0.BindingElement,
	      BindingIdentifier = $__0.BindingIdentifier,
	      Block = $__0.Block,
	      BreakStatement = $__0.BreakStatement,
	      CallExpression = $__0.CallExpression,
	      CallSignature = $__0.CallSignature,
	      CaseClause = $__0.CaseClause,
	      Catch = $__0.Catch,
	      ClassDeclaration = $__0.ClassDeclaration,
	      ClassExpression = $__0.ClassExpression,
	      CommaExpression = $__0.CommaExpression,
	      ComprehensionFor = $__0.ComprehensionFor,
	      ComprehensionIf = $__0.ComprehensionIf,
	      ComputedPropertyName = $__0.ComputedPropertyName,
	      ConditionalExpression = $__0.ConditionalExpression,
	      ConstructSignature = $__0.ConstructSignature,
	      ConstructorType = $__0.ConstructorType,
	      ContinueStatement = $__0.ContinueStatement,
	      CoverFormals = $__0.CoverFormals,
	      CoverInitializedName = $__0.CoverInitializedName,
	      DebuggerStatement = $__0.DebuggerStatement,
	      DefaultClause = $__0.DefaultClause,
	      DoWhileStatement = $__0.DoWhileStatement,
	      EmptyStatement = $__0.EmptyStatement,
	      ExportDeclaration = $__0.ExportDeclaration,
	      ExportDefault = $__0.ExportDefault,
	      ExportSpecifier = $__0.ExportSpecifier,
	      ExportSpecifierSet = $__0.ExportSpecifierSet,
	      ExportStar = $__0.ExportStar,
	      ExpressionStatement = $__0.ExpressionStatement,
	      Finally = $__0.Finally,
	      ForInStatement = $__0.ForInStatement,
	      ForOfStatement = $__0.ForOfStatement,
	      ForOnStatement = $__0.ForOnStatement,
	      ForStatement = $__0.ForStatement,
	      FormalParameter = $__0.FormalParameter,
	      FormalParameterList = $__0.FormalParameterList,
	      FunctionBody = $__0.FunctionBody,
	      FunctionDeclaration = $__0.FunctionDeclaration,
	      FunctionExpression = $__0.FunctionExpression,
	      FunctionType = $__0.FunctionType,
	      GeneratorComprehension = $__0.GeneratorComprehension,
	      GetAccessor = $__0.GetAccessor,
	      IdentifierExpression = $__0.IdentifierExpression,
	      IfStatement = $__0.IfStatement,
	      ImportedBinding = $__0.ImportedBinding,
	      ImportDeclaration = $__0.ImportDeclaration,
	      ImportSpecifier = $__0.ImportSpecifier,
	      ImportSpecifierSet = $__0.ImportSpecifierSet,
	      IndexSignature = $__0.IndexSignature,
	      InterfaceDeclaration = $__0.InterfaceDeclaration,
	      LabelledStatement = $__0.LabelledStatement,
	      LiteralExpression = $__0.LiteralExpression,
	      LiteralPropertyName = $__0.LiteralPropertyName,
	      MemberExpression = $__0.MemberExpression,
	      MemberLookupExpression = $__0.MemberLookupExpression,
	      MethodSignature = $__0.MethodSignature,
	      Module = $__0.Module,
	      ModuleDeclaration = $__0.ModuleDeclaration,
	      ModuleSpecifier = $__0.ModuleSpecifier,
	      NamedExport = $__0.NamedExport,
	      NewExpression = $__0.NewExpression,
	      ObjectLiteralExpression = $__0.ObjectLiteralExpression,
	      ObjectPattern = $__0.ObjectPattern,
	      ObjectPatternField = $__0.ObjectPatternField,
	      ObjectType = $__0.ObjectType,
	      ParenExpression = $__0.ParenExpression,
	      PostfixExpression = $__0.PostfixExpression,
	      PredefinedType = $__0.PredefinedType,
	      Script = $__0.Script,
	      PropertyMethodAssignment = $__0.PropertyMethodAssignment,
	      PropertyNameAssignment = $__0.PropertyNameAssignment,
	      PropertyNameShorthand = $__0.PropertyNameShorthand,
	      PropertyVariableDeclaration = $__0.PropertyVariableDeclaration,
	      PropertySignature = $__0.PropertySignature,
	      RestParameter = $__0.RestParameter,
	      ReturnStatement = $__0.ReturnStatement,
	      SetAccessor = $__0.SetAccessor,
	      SpreadExpression = $__0.SpreadExpression,
	      SpreadPatternElement = $__0.SpreadPatternElement,
	      SuperExpression = $__0.SuperExpression,
	      SwitchStatement = $__0.SwitchStatement,
	      SyntaxErrorTree = $__0.SyntaxErrorTree,
	      TemplateLiteralExpression = $__0.TemplateLiteralExpression,
	      TemplateLiteralPortion = $__0.TemplateLiteralPortion,
	      TemplateSubstitution = $__0.TemplateSubstitution,
	      ThisExpression = $__0.ThisExpression,
	      ThrowStatement = $__0.ThrowStatement,
	      TryStatement = $__0.TryStatement,
	      TypeArguments = $__0.TypeArguments,
	      TypeName = $__0.TypeName,
	      TypeParameter = $__0.TypeParameter,
	      TypeParameters = $__0.TypeParameters,
	      TypeReference = $__0.TypeReference,
	      UnaryExpression = $__0.UnaryExpression,
	      UnionType = $__0.UnionType,
	      VariableDeclaration = $__0.VariableDeclaration,
	      VariableDeclarationList = $__0.VariableDeclarationList,
	      VariableStatement = $__0.VariableStatement,
	      WhileStatement = $__0.WhileStatement,
	      WithStatement = $__0.WithStatement,
	      YieldExpression = $__0.YieldExpression;
	  var ParseTreeTransformer = function ParseTreeTransformer() {
	    ;
	  };
	  ($traceurRuntime.createClass)(ParseTreeTransformer, {
	    transformAny: function(tree) {
	      return tree && tree.transform(this);
	    },
	    transformList: function(list) {
	      var $__2;
	      var builder = null;
	      for (var index = 0; index < list.length; index++) {
	        var element = list[index];
	        var transformed = this.transformAny(element);
	        if (builder != null || element != transformed) {
	          if (builder == null) {
	            builder = list.slice(0, index);
	          }
	          if (transformed instanceof AnonBlock)
	            ($__2 = builder).push.apply($__2, $traceurRuntime.spread(transformed.statements));
	          else
	            builder.push(transformed);
	        }
	      }
	      return builder || list;
	    },
	    transformStateMachine: function(tree) {
	      throw Error('State machines should not live outside of the GeneratorTransformer.');
	    },
	    transformToBlockOrStatement: function(tree) {
	      var transformed = this.transformAny(tree);
	      if (transformed instanceof AnonBlock) {
	        return new Block(transformed.location, transformed.statements);
	      }
	      return transformed;
	    },
	    transformAnnotation: function(tree) {
	      var name = this.transformAny(tree.name);
	      var args = this.transformAny(tree.args);
	      if (name === tree.name && args === tree.args) {
	        return tree;
	      }
	      return new Annotation(tree.location, name, args);
	    },
	    transformAnonBlock: function(tree) {
	      var statements = this.transformList(tree.statements);
	      if (statements === tree.statements) {
	        return tree;
	      }
	      return new AnonBlock(tree.location, statements);
	    },
	    transformArgumentList: function(tree) {
	      var args = this.transformList(tree.args);
	      if (args === tree.args) {
	        return tree;
	      }
	      return new ArgumentList(tree.location, args);
	    },
	    transformArrayComprehension: function(tree) {
	      var comprehensionList = this.transformList(tree.comprehensionList);
	      var expression = this.transformAny(tree.expression);
	      if (comprehensionList === tree.comprehensionList && expression === tree.expression) {
	        return tree;
	      }
	      return new ArrayComprehension(tree.location, comprehensionList, expression);
	    },
	    transformArrayLiteralExpression: function(tree) {
	      var elements = this.transformList(tree.elements);
	      if (elements === tree.elements) {
	        return tree;
	      }
	      return new ArrayLiteralExpression(tree.location, elements);
	    },
	    transformArrayPattern: function(tree) {
	      var elements = this.transformList(tree.elements);
	      if (elements === tree.elements) {
	        return tree;
	      }
	      return new ArrayPattern(tree.location, elements);
	    },
	    transformArrayType: function(tree) {
	      var elementType = this.transformAny(tree.elementType);
	      if (elementType === tree.elementType) {
	        return tree;
	      }
	      return new ArrayType(tree.location, elementType);
	    },
	    transformArrowFunctionExpression: function(tree) {
	      var parameterList = this.transformAny(tree.parameterList);
	      var body = this.transformAny(tree.body);
	      if (parameterList === tree.parameterList && body === tree.body) {
	        return tree;
	      }
	      return new ArrowFunctionExpression(tree.location, tree.functionKind, parameterList, body);
	    },
	    transformAssignmentElement: function(tree) {
	      var assignment = this.transformAny(tree.assignment);
	      var initializer = this.transformAny(tree.initializer);
	      if (assignment === tree.assignment && initializer === tree.initializer) {
	        return tree;
	      }
	      return new AssignmentElement(tree.location, assignment, initializer);
	    },
	    transformAwaitExpression: function(tree) {
	      var expression = this.transformAny(tree.expression);
	      if (expression === tree.expression) {
	        return tree;
	      }
	      return new AwaitExpression(tree.location, expression);
	    },
	    transformBinaryExpression: function(tree) {
	      var left = this.transformAny(tree.left);
	      var right = this.transformAny(tree.right);
	      if (left === tree.left && right === tree.right) {
	        return tree;
	      }
	      return new BinaryExpression(tree.location, left, tree.operator, right);
	    },
	    transformBindingElement: function(tree) {
	      var binding = this.transformAny(tree.binding);
	      var initializer = this.transformAny(tree.initializer);
	      if (binding === tree.binding && initializer === tree.initializer) {
	        return tree;
	      }
	      return new BindingElement(tree.location, binding, initializer);
	    },
	    transformBindingIdentifier: function(tree) {
	      return tree;
	    },
	    transformBlock: function(tree) {
	      var statements = this.transformList(tree.statements);
	      if (statements === tree.statements) {
	        return tree;
	      }
	      return new Block(tree.location, statements);
	    },
	    transformBreakStatement: function(tree) {
	      return tree;
	    },
	    transformCallExpression: function(tree) {
	      var operand = this.transformAny(tree.operand);
	      var args = this.transformAny(tree.args);
	      if (operand === tree.operand && args === tree.args) {
	        return tree;
	      }
	      return new CallExpression(tree.location, operand, args);
	    },
	    transformCallSignature: function(tree) {
	      var typeParameters = this.transformAny(tree.typeParameters);
	      var parameterList = this.transformAny(tree.parameterList);
	      var returnType = this.transformAny(tree.returnType);
	      if (typeParameters === tree.typeParameters && parameterList === tree.parameterList && returnType === tree.returnType) {
	        return tree;
	      }
	      return new CallSignature(tree.location, typeParameters, parameterList, returnType);
	    },
	    transformCaseClause: function(tree) {
	      var expression = this.transformAny(tree.expression);
	      var statements = this.transformList(tree.statements);
	      if (expression === tree.expression && statements === tree.statements) {
	        return tree;
	      }
	      return new CaseClause(tree.location, expression, statements);
	    },
	    transformCatch: function(tree) {
	      var binding = this.transformAny(tree.binding);
	      var catchBody = this.transformAny(tree.catchBody);
	      if (binding === tree.binding && catchBody === tree.catchBody) {
	        return tree;
	      }
	      return new Catch(tree.location, binding, catchBody);
	    },
	    transformClassDeclaration: function(tree) {
	      var name = this.transformAny(tree.name);
	      var superClass = this.transformAny(tree.superClass);
	      var elements = this.transformList(tree.elements);
	      var annotations = this.transformList(tree.annotations);
	      var typeParameters = this.transformAny(tree.typeParameters);
	      if (name === tree.name && superClass === tree.superClass && elements === tree.elements && annotations === tree.annotations && typeParameters === tree.typeParameters) {
	        return tree;
	      }
	      return new ClassDeclaration(tree.location, name, superClass, elements, annotations, typeParameters);
	    },
	    transformClassExpression: function(tree) {
	      var name = this.transformAny(tree.name);
	      var superClass = this.transformAny(tree.superClass);
	      var elements = this.transformList(tree.elements);
	      var annotations = this.transformList(tree.annotations);
	      var typeParameters = this.transformAny(tree.typeParameters);
	      if (name === tree.name && superClass === tree.superClass && elements === tree.elements && annotations === tree.annotations && typeParameters === tree.typeParameters) {
	        return tree;
	      }
	      return new ClassExpression(tree.location, name, superClass, elements, annotations, typeParameters);
	    },
	    transformCommaExpression: function(tree) {
	      var expressions = this.transformList(tree.expressions);
	      if (expressions === tree.expressions) {
	        return tree;
	      }
	      return new CommaExpression(tree.location, expressions);
	    },
	    transformComprehensionFor: function(tree) {
	      var left = this.transformAny(tree.left);
	      var iterator = this.transformAny(tree.iterator);
	      if (left === tree.left && iterator === tree.iterator) {
	        return tree;
	      }
	      return new ComprehensionFor(tree.location, left, iterator);
	    },
	    transformComprehensionIf: function(tree) {
	      var expression = this.transformAny(tree.expression);
	      if (expression === tree.expression) {
	        return tree;
	      }
	      return new ComprehensionIf(tree.location, expression);
	    },
	    transformComputedPropertyName: function(tree) {
	      var expression = this.transformAny(tree.expression);
	      if (expression === tree.expression) {
	        return tree;
	      }
	      return new ComputedPropertyName(tree.location, expression);
	    },
	    transformConditionalExpression: function(tree) {
	      var condition = this.transformAny(tree.condition);
	      var left = this.transformAny(tree.left);
	      var right = this.transformAny(tree.right);
	      if (condition === tree.condition && left === tree.left && right === tree.right) {
	        return tree;
	      }
	      return new ConditionalExpression(tree.location, condition, left, right);
	    },
	    transformConstructSignature: function(tree) {
	      var typeParameters = this.transformAny(tree.typeParameters);
	      var parameterList = this.transformAny(tree.parameterList);
	      var returnType = this.transformAny(tree.returnType);
	      if (typeParameters === tree.typeParameters && parameterList === tree.parameterList && returnType === tree.returnType) {
	        return tree;
	      }
	      return new ConstructSignature(tree.location, typeParameters, parameterList, returnType);
	    },
	    transformConstructorType: function(tree) {
	      var typeParameters = this.transformAny(tree.typeParameters);
	      var parameterList = this.transformAny(tree.parameterList);
	      var returnType = this.transformAny(tree.returnType);
	      if (typeParameters === tree.typeParameters && parameterList === tree.parameterList && returnType === tree.returnType) {
	        return tree;
	      }
	      return new ConstructorType(tree.location, typeParameters, parameterList, returnType);
	    },
	    transformContinueStatement: function(tree) {
	      return tree;
	    },
	    transformCoverFormals: function(tree) {
	      var expressions = this.transformList(tree.expressions);
	      if (expressions === tree.expressions) {
	        return tree;
	      }
	      return new CoverFormals(tree.location, expressions);
	    },
	    transformCoverInitializedName: function(tree) {
	      var initializer = this.transformAny(tree.initializer);
	      if (initializer === tree.initializer) {
	        return tree;
	      }
	      return new CoverInitializedName(tree.location, tree.name, tree.equalToken, initializer);
	    },
	    transformDebuggerStatement: function(tree) {
	      return tree;
	    },
	    transformDefaultClause: function(tree) {
	      var statements = this.transformList(tree.statements);
	      if (statements === tree.statements) {
	        return tree;
	      }
	      return new DefaultClause(tree.location, statements);
	    },
	    transformDoWhileStatement: function(tree) {
	      var body = this.transformToBlockOrStatement(tree.body);
	      var condition = this.transformAny(tree.condition);
	      if (body === tree.body && condition === tree.condition) {
	        return tree;
	      }
	      return new DoWhileStatement(tree.location, body, condition);
	    },
	    transformEmptyStatement: function(tree) {
	      return tree;
	    },
	    transformExportDeclaration: function(tree) {
	      var declaration = this.transformAny(tree.declaration);
	      var annotations = this.transformList(tree.annotations);
	      if (declaration === tree.declaration && annotations === tree.annotations) {
	        return tree;
	      }
	      return new ExportDeclaration(tree.location, declaration, annotations);
	    },
	    transformExportDefault: function(tree) {
	      var expression = this.transformAny(tree.expression);
	      if (expression === tree.expression) {
	        return tree;
	      }
	      return new ExportDefault(tree.location, expression);
	    },
	    transformExportSpecifier: function(tree) {
	      return tree;
	    },
	    transformExportSpecifierSet: function(tree) {
	      var specifiers = this.transformList(tree.specifiers);
	      if (specifiers === tree.specifiers) {
	        return tree;
	      }
	      return new ExportSpecifierSet(tree.location, specifiers);
	    },
	    transformExportStar: function(tree) {
	      return tree;
	    },
	    transformExpressionStatement: function(tree) {
	      var expression = this.transformAny(tree.expression);
	      if (expression === tree.expression) {
	        return tree;
	      }
	      return new ExpressionStatement(tree.location, expression);
	    },
	    transformFinally: function(tree) {
	      var block = this.transformAny(tree.block);
	      if (block === tree.block) {
	        return tree;
	      }
	      return new Finally(tree.location, block);
	    },
	    transformForInStatement: function(tree) {
	      var initializer = this.transformAny(tree.initializer);
	      var collection = this.transformAny(tree.collection);
	      var body = this.transformToBlockOrStatement(tree.body);
	      if (initializer === tree.initializer && collection === tree.collection && body === tree.body) {
	        return tree;
	      }
	      return new ForInStatement(tree.location, initializer, collection, body);
	    },
	    transformForOfStatement: function(tree) {
	      var initializer = this.transformAny(tree.initializer);
	      var collection = this.transformAny(tree.collection);
	      var body = this.transformToBlockOrStatement(tree.body);
	      if (initializer === tree.initializer && collection === tree.collection && body === tree.body) {
	        return tree;
	      }
	      return new ForOfStatement(tree.location, initializer, collection, body);
	    },
	    transformForOnStatement: function(tree) {
	      var initializer = this.transformAny(tree.initializer);
	      var observable = this.transformAny(tree.observable);
	      var body = this.transformToBlockOrStatement(tree.body);
	      if (initializer === tree.initializer && observable === tree.observable && body === tree.body) {
	        return tree;
	      }
	      return new ForOnStatement(tree.location, initializer, observable, body);
	    },
	    transformForStatement: function(tree) {
	      var initializer = this.transformAny(tree.initializer);
	      var condition = this.transformAny(tree.condition);
	      var increment = this.transformAny(tree.increment);
	      var body = this.transformToBlockOrStatement(tree.body);
	      if (initializer === tree.initializer && condition === tree.condition && increment === tree.increment && body === tree.body) {
	        return tree;
	      }
	      return new ForStatement(tree.location, initializer, condition, increment, body);
	    },
	    transformFormalParameter: function(tree) {
	      var parameter = this.transformAny(tree.parameter);
	      var typeAnnotation = this.transformAny(tree.typeAnnotation);
	      var annotations = this.transformList(tree.annotations);
	      if (parameter === tree.parameter && typeAnnotation === tree.typeAnnotation && annotations === tree.annotations) {
	        return tree;
	      }
	      return new FormalParameter(tree.location, parameter, typeAnnotation, annotations);
	    },
	    transformFormalParameterList: function(tree) {
	      var parameters = this.transformList(tree.parameters);
	      if (parameters === tree.parameters) {
	        return tree;
	      }
	      return new FormalParameterList(tree.location, parameters);
	    },
	    transformFunctionBody: function(tree) {
	      var statements = this.transformList(tree.statements);
	      if (statements === tree.statements) {
	        return tree;
	      }
	      return new FunctionBody(tree.location, statements);
	    },
	    transformFunctionDeclaration: function(tree) {
	      var name = this.transformAny(tree.name);
	      var parameterList = this.transformAny(tree.parameterList);
	      var typeAnnotation = this.transformAny(tree.typeAnnotation);
	      var annotations = this.transformList(tree.annotations);
	      var body = this.transformAny(tree.body);
	      if (name === tree.name && parameterList === tree.parameterList && typeAnnotation === tree.typeAnnotation && annotations === tree.annotations && body === tree.body) {
	        return tree;
	      }
	      return new FunctionDeclaration(tree.location, name, tree.functionKind, parameterList, typeAnnotation, annotations, body);
	    },
	    transformFunctionExpression: function(tree) {
	      var name = this.transformAny(tree.name);
	      var parameterList = this.transformAny(tree.parameterList);
	      var typeAnnotation = this.transformAny(tree.typeAnnotation);
	      var annotations = this.transformList(tree.annotations);
	      var body = this.transformAny(tree.body);
	      if (name === tree.name && parameterList === tree.parameterList && typeAnnotation === tree.typeAnnotation && annotations === tree.annotations && body === tree.body) {
	        return tree;
	      }
	      return new FunctionExpression(tree.location, name, tree.functionKind, parameterList, typeAnnotation, annotations, body);
	    },
	    transformFunctionType: function(tree) {
	      var typeParameters = this.transformAny(tree.typeParameters);
	      var parameterList = this.transformAny(tree.parameterList);
	      var returnType = this.transformAny(tree.returnType);
	      if (typeParameters === tree.typeParameters && parameterList === tree.parameterList && returnType === tree.returnType) {
	        return tree;
	      }
	      return new FunctionType(tree.location, typeParameters, parameterList, returnType);
	    },
	    transformGeneratorComprehension: function(tree) {
	      var comprehensionList = this.transformList(tree.comprehensionList);
	      var expression = this.transformAny(tree.expression);
	      if (comprehensionList === tree.comprehensionList && expression === tree.expression) {
	        return tree;
	      }
	      return new GeneratorComprehension(tree.location, comprehensionList, expression);
	    },
	    transformGetAccessor: function(tree) {
	      var name = this.transformAny(tree.name);
	      var typeAnnotation = this.transformAny(tree.typeAnnotation);
	      var annotations = this.transformList(tree.annotations);
	      var body = this.transformAny(tree.body);
	      if (name === tree.name && typeAnnotation === tree.typeAnnotation && annotations === tree.annotations && body === tree.body) {
	        return tree;
	      }
	      return new GetAccessor(tree.location, tree.isStatic, name, typeAnnotation, annotations, body);
	    },
	    transformIdentifierExpression: function(tree) {
	      return tree;
	    },
	    transformIfStatement: function(tree) {
	      var condition = this.transformAny(tree.condition);
	      var ifClause = this.transformToBlockOrStatement(tree.ifClause);
	      var elseClause = this.transformToBlockOrStatement(tree.elseClause);
	      if (condition === tree.condition && ifClause === tree.ifClause && elseClause === tree.elseClause) {
	        return tree;
	      }
	      return new IfStatement(tree.location, condition, ifClause, elseClause);
	    },
	    transformImportedBinding: function(tree) {
	      var binding = this.transformAny(tree.binding);
	      if (binding === tree.binding) {
	        return tree;
	      }
	      return new ImportedBinding(tree.location, binding);
	    },
	    transformImportDeclaration: function(tree) {
	      var importClause = this.transformAny(tree.importClause);
	      var moduleSpecifier = this.transformAny(tree.moduleSpecifier);
	      if (importClause === tree.importClause && moduleSpecifier === tree.moduleSpecifier) {
	        return tree;
	      }
	      return new ImportDeclaration(tree.location, importClause, moduleSpecifier);
	    },
	    transformImportSpecifier: function(tree) {
	      var binding = this.transformAny(tree.binding);
	      if (binding === tree.binding) {
	        return tree;
	      }
	      return new ImportSpecifier(tree.location, binding, tree.name);
	    },
	    transformImportSpecifierSet: function(tree) {
	      var specifiers = this.transformList(tree.specifiers);
	      if (specifiers === tree.specifiers) {
	        return tree;
	      }
	      return new ImportSpecifierSet(tree.location, specifiers);
	    },
	    transformIndexSignature: function(tree) {
	      var indexType = this.transformAny(tree.indexType);
	      var typeAnnotation = this.transformAny(tree.typeAnnotation);
	      if (indexType === tree.indexType && typeAnnotation === tree.typeAnnotation) {
	        return tree;
	      }
	      return new IndexSignature(tree.location, tree.name, indexType, typeAnnotation);
	    },
	    transformInterfaceDeclaration: function(tree) {
	      var typeParameters = this.transformAny(tree.typeParameters);
	      var objectType = this.transformAny(tree.objectType);
	      if (typeParameters === tree.typeParameters && objectType === tree.objectType) {
	        return tree;
	      }
	      return new InterfaceDeclaration(tree.location, tree.name, typeParameters, tree.extendsClause, objectType);
	    },
	    transformLabelledStatement: function(tree) {
	      var statement = this.transformAny(tree.statement);
	      if (statement === tree.statement) {
	        return tree;
	      }
	      return new LabelledStatement(tree.location, tree.name, statement);
	    },
	    transformLiteralExpression: function(tree) {
	      return tree;
	    },
	    transformLiteralPropertyName: function(tree) {
	      return tree;
	    },
	    transformMemberExpression: function(tree) {
	      var operand = this.transformAny(tree.operand);
	      if (operand === tree.operand) {
	        return tree;
	      }
	      return new MemberExpression(tree.location, operand, tree.memberName);
	    },
	    transformMemberLookupExpression: function(tree) {
	      var operand = this.transformAny(tree.operand);
	      var memberExpression = this.transformAny(tree.memberExpression);
	      if (operand === tree.operand && memberExpression === tree.memberExpression) {
	        return tree;
	      }
	      return new MemberLookupExpression(tree.location, operand, memberExpression);
	    },
	    transformMethodSignature: function(tree) {
	      var name = this.transformAny(tree.name);
	      var callSignature = this.transformAny(tree.callSignature);
	      if (name === tree.name && callSignature === tree.callSignature) {
	        return tree;
	      }
	      return new MethodSignature(tree.location, name, tree.optional, callSignature);
	    },
	    transformModule: function(tree) {
	      var scriptItemList = this.transformList(tree.scriptItemList);
	      if (scriptItemList === tree.scriptItemList) {
	        return tree;
	      }
	      return new Module(tree.location, scriptItemList, tree.moduleName);
	    },
	    transformModuleDeclaration: function(tree) {
	      var binding = this.transformAny(tree.binding);
	      var expression = this.transformAny(tree.expression);
	      if (binding === tree.binding && expression === tree.expression) {
	        return tree;
	      }
	      return new ModuleDeclaration(tree.location, binding, expression);
	    },
	    transformModuleSpecifier: function(tree) {
	      return tree;
	    },
	    transformNamedExport: function(tree) {
	      var moduleSpecifier = this.transformAny(tree.moduleSpecifier);
	      var specifierSet = this.transformAny(tree.specifierSet);
	      if (moduleSpecifier === tree.moduleSpecifier && specifierSet === tree.specifierSet) {
	        return tree;
	      }
	      return new NamedExport(tree.location, moduleSpecifier, specifierSet);
	    },
	    transformNewExpression: function(tree) {
	      var operand = this.transformAny(tree.operand);
	      var args = this.transformAny(tree.args);
	      if (operand === tree.operand && args === tree.args) {
	        return tree;
	      }
	      return new NewExpression(tree.location, operand, args);
	    },
	    transformObjectLiteralExpression: function(tree) {
	      var propertyNameAndValues = this.transformList(tree.propertyNameAndValues);
	      if (propertyNameAndValues === tree.propertyNameAndValues) {
	        return tree;
	      }
	      return new ObjectLiteralExpression(tree.location, propertyNameAndValues);
	    },
	    transformObjectPattern: function(tree) {
	      var fields = this.transformList(tree.fields);
	      if (fields === tree.fields) {
	        return tree;
	      }
	      return new ObjectPattern(tree.location, fields);
	    },
	    transformObjectPatternField: function(tree) {
	      var name = this.transformAny(tree.name);
	      var element = this.transformAny(tree.element);
	      if (name === tree.name && element === tree.element) {
	        return tree;
	      }
	      return new ObjectPatternField(tree.location, name, element);
	    },
	    transformObjectType: function(tree) {
	      var typeMembers = this.transformList(tree.typeMembers);
	      if (typeMembers === tree.typeMembers) {
	        return tree;
	      }
	      return new ObjectType(tree.location, typeMembers);
	    },
	    transformParenExpression: function(tree) {
	      var expression = this.transformAny(tree.expression);
	      if (expression === tree.expression) {
	        return tree;
	      }
	      return new ParenExpression(tree.location, expression);
	    },
	    transformPostfixExpression: function(tree) {
	      var operand = this.transformAny(tree.operand);
	      if (operand === tree.operand) {
	        return tree;
	      }
	      return new PostfixExpression(tree.location, operand, tree.operator);
	    },
	    transformPredefinedType: function(tree) {
	      return tree;
	    },
	    transformScript: function(tree) {
	      var scriptItemList = this.transformList(tree.scriptItemList);
	      if (scriptItemList === tree.scriptItemList) {
	        return tree;
	      }
	      return new Script(tree.location, scriptItemList, tree.moduleName);
	    },
	    transformPropertyMethodAssignment: function(tree) {
	      var name = this.transformAny(tree.name);
	      var parameterList = this.transformAny(tree.parameterList);
	      var typeAnnotation = this.transformAny(tree.typeAnnotation);
	      var annotations = this.transformList(tree.annotations);
	      var body = this.transformAny(tree.body);
	      var debugName = this.transformAny(tree.debugName);
	      if (name === tree.name && parameterList === tree.parameterList && typeAnnotation === tree.typeAnnotation && annotations === tree.annotations && body === tree.body && debugName === tree.debugName) {
	        return tree;
	      }
	      return new PropertyMethodAssignment(tree.location, tree.isStatic, tree.functionKind, name, parameterList, typeAnnotation, annotations, body, debugName);
	    },
	    transformPropertyNameAssignment: function(tree) {
	      var name = this.transformAny(tree.name);
	      var value = this.transformAny(tree.value);
	      if (name === tree.name && value === tree.value) {
	        return tree;
	      }
	      return new PropertyNameAssignment(tree.location, name, value);
	    },
	    transformPropertyNameShorthand: function(tree) {
	      return tree;
	    },
	    transformPropertyVariableDeclaration: function(tree) {
	      var name = this.transformAny(tree.name);
	      var typeAnnotation = this.transformAny(tree.typeAnnotation);
	      var annotations = this.transformList(tree.annotations);
	      var initializer = this.transformAny(tree.initializer);
	      if (name === tree.name && typeAnnotation === tree.typeAnnotation && annotations === tree.annotations && initializer === tree.initializer) {
	        return tree;
	      }
	      return new PropertyVariableDeclaration(tree.location, tree.isStatic, name, typeAnnotation, annotations, initializer);
	    },
	    transformPropertySignature: function(tree) {
	      var name = this.transformAny(tree.name);
	      var typeAnnotation = this.transformAny(tree.typeAnnotation);
	      if (name === tree.name && typeAnnotation === tree.typeAnnotation) {
	        return tree;
	      }
	      return new PropertySignature(tree.location, name, tree.optional, typeAnnotation);
	    },
	    transformRestParameter: function(tree) {
	      var identifier = this.transformAny(tree.identifier);
	      var typeAnnotation = this.transformAny(tree.typeAnnotation);
	      if (identifier === tree.identifier && typeAnnotation === tree.typeAnnotation) {
	        return tree;
	      }
	      return new RestParameter(tree.location, identifier, typeAnnotation);
	    },
	    transformReturnStatement: function(tree) {
	      var expression = this.transformAny(tree.expression);
	      if (expression === tree.expression) {
	        return tree;
	      }
	      return new ReturnStatement(tree.location, expression);
	    },
	    transformSetAccessor: function(tree) {
	      var name = this.transformAny(tree.name);
	      var parameterList = this.transformAny(tree.parameterList);
	      var annotations = this.transformList(tree.annotations);
	      var body = this.transformAny(tree.body);
	      if (name === tree.name && parameterList === tree.parameterList && annotations === tree.annotations && body === tree.body) {
	        return tree;
	      }
	      return new SetAccessor(tree.location, tree.isStatic, name, parameterList, annotations, body);
	    },
	    transformSpreadExpression: function(tree) {
	      var expression = this.transformAny(tree.expression);
	      if (expression === tree.expression) {
	        return tree;
	      }
	      return new SpreadExpression(tree.location, expression);
	    },
	    transformSpreadPatternElement: function(tree) {
	      var lvalue = this.transformAny(tree.lvalue);
	      if (lvalue === tree.lvalue) {
	        return tree;
	      }
	      return new SpreadPatternElement(tree.location, lvalue);
	    },
	    transformSuperExpression: function(tree) {
	      return tree;
	    },
	    transformSwitchStatement: function(tree) {
	      var expression = this.transformAny(tree.expression);
	      var caseClauses = this.transformList(tree.caseClauses);
	      if (expression === tree.expression && caseClauses === tree.caseClauses) {
	        return tree;
	      }
	      return new SwitchStatement(tree.location, expression, caseClauses);
	    },
	    transformSyntaxErrorTree: function(tree) {
	      return tree;
	    },
	    transformTemplateLiteralExpression: function(tree) {
	      var operand = this.transformAny(tree.operand);
	      var elements = this.transformList(tree.elements);
	      if (operand === tree.operand && elements === tree.elements) {
	        return tree;
	      }
	      return new TemplateLiteralExpression(tree.location, operand, elements);
	    },
	    transformTemplateLiteralPortion: function(tree) {
	      return tree;
	    },
	    transformTemplateSubstitution: function(tree) {
	      var expression = this.transformAny(tree.expression);
	      if (expression === tree.expression) {
	        return tree;
	      }
	      return new TemplateSubstitution(tree.location, expression);
	    },
	    transformThisExpression: function(tree) {
	      return tree;
	    },
	    transformThrowStatement: function(tree) {
	      var value = this.transformAny(tree.value);
	      if (value === tree.value) {
	        return tree;
	      }
	      return new ThrowStatement(tree.location, value);
	    },
	    transformTryStatement: function(tree) {
	      var body = this.transformAny(tree.body);
	      var catchBlock = this.transformAny(tree.catchBlock);
	      var finallyBlock = this.transformAny(tree.finallyBlock);
	      if (body === tree.body && catchBlock === tree.catchBlock && finallyBlock === tree.finallyBlock) {
	        return tree;
	      }
	      return new TryStatement(tree.location, body, catchBlock, finallyBlock);
	    },
	    transformTypeArguments: function(tree) {
	      var args = this.transformList(tree.args);
	      if (args === tree.args) {
	        return tree;
	      }
	      return new TypeArguments(tree.location, args);
	    },
	    transformTypeName: function(tree) {
	      var moduleName = this.transformAny(tree.moduleName);
	      if (moduleName === tree.moduleName) {
	        return tree;
	      }
	      return new TypeName(tree.location, moduleName, tree.name);
	    },
	    transformTypeParameter: function(tree) {
	      var extendsType = this.transformAny(tree.extendsType);
	      if (extendsType === tree.extendsType) {
	        return tree;
	      }
	      return new TypeParameter(tree.location, tree.identifierToken, extendsType);
	    },
	    transformTypeParameters: function(tree) {
	      var parameters = this.transformList(tree.parameters);
	      if (parameters === tree.parameters) {
	        return tree;
	      }
	      return new TypeParameters(tree.location, parameters);
	    },
	    transformTypeReference: function(tree) {
	      var typeName = this.transformAny(tree.typeName);
	      var args = this.transformAny(tree.args);
	      if (typeName === tree.typeName && args === tree.args) {
	        return tree;
	      }
	      return new TypeReference(tree.location, typeName, args);
	    },
	    transformUnaryExpression: function(tree) {
	      var operand = this.transformAny(tree.operand);
	      if (operand === tree.operand) {
	        return tree;
	      }
	      return new UnaryExpression(tree.location, tree.operator, operand);
	    },
	    transformUnionType: function(tree) {
	      var types = this.transformList(tree.types);
	      if (types === tree.types) {
	        return tree;
	      }
	      return new UnionType(tree.location, types);
	    },
	    transformVariableDeclaration: function(tree) {
	      var lvalue = this.transformAny(tree.lvalue);
	      var typeAnnotation = this.transformAny(tree.typeAnnotation);
	      var initializer = this.transformAny(tree.initializer);
	      if (lvalue === tree.lvalue && typeAnnotation === tree.typeAnnotation && initializer === tree.initializer) {
	        return tree;
	      }
	      return new VariableDeclaration(tree.location, lvalue, typeAnnotation, initializer);
	    },
	    transformVariableDeclarationList: function(tree) {
	      var declarations = this.transformList(tree.declarations);
	      if (declarations === tree.declarations) {
	        return tree;
	      }
	      return new VariableDeclarationList(tree.location, tree.declarationType, declarations);
	    },
	    transformVariableStatement: function(tree) {
	      var declarations = this.transformAny(tree.declarations);
	      if (declarations === tree.declarations) {
	        return tree;
	      }
	      return new VariableStatement(tree.location, declarations);
	    },
	    transformWhileStatement: function(tree) {
	      var condition = this.transformAny(tree.condition);
	      var body = this.transformToBlockOrStatement(tree.body);
	      if (condition === tree.condition && body === tree.body) {
	        return tree;
	      }
	      return new WhileStatement(tree.location, condition, body);
	    },
	    transformWithStatement: function(tree) {
	      var expression = this.transformAny(tree.expression);
	      var body = this.transformToBlockOrStatement(tree.body);
	      if (expression === tree.expression && body === tree.body) {
	        return tree;
	      }
	      return new WithStatement(tree.location, expression, body);
	    },
	    transformYieldExpression: function(tree) {
	      var expression = this.transformAny(tree.expression);
	      if (expression === tree.expression) {
	        return tree;
	      }
	      return new YieldExpression(tree.location, expression, tree.isYieldFor);
	    }
	  }, {});
	  return {get ParseTreeTransformer() {
	      return ParseTreeTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/PlaceholderParser.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/PlaceholderParser.js";
	  var $__0 = System.get("traceur@0.0.87/src/syntax/trees/ParseTreeType.js"),
	      ARGUMENT_LIST = $__0.ARGUMENT_LIST,
	      BLOCK = $__0.BLOCK,
	      EXPRESSION_STATEMENT = $__0.EXPRESSION_STATEMENT,
	      IDENTIFIER_EXPRESSION = $__0.IDENTIFIER_EXPRESSION;
	  var IdentifierToken = System.get("traceur@0.0.87/src/syntax/IdentifierToken.js").IdentifierToken;
	  var LiteralToken = System.get("traceur@0.0.87/src/syntax/LiteralToken.js").LiteralToken;
	  var Map = System.get("traceur@0.0.87/src/runtime/polyfills/Map.js").Map;
	  var CollectingErrorReporter = System.get("traceur@0.0.87/src/util/CollectingErrorReporter.js").CollectingErrorReporter;
	  var Options = System.get("traceur@0.0.87/src/Options.js").Options;
	  var ParseTree = System.get("traceur@0.0.87/src/syntax/trees/ParseTree.js").ParseTree;
	  var ParseTreeTransformer = System.get("traceur@0.0.87/src/codegeneration/ParseTreeTransformer.js").ParseTreeTransformer;
	  var Parser = System.get("traceur@0.0.87/src/syntax/Parser.js").Parser;
	  var $__9 = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js"),
	      LiteralExpression = $__9.LiteralExpression,
	      LiteralPropertyName = $__9.LiteralPropertyName,
	      TypeName = $__9.TypeName;
	  var SourceFile = System.get("traceur@0.0.87/src/syntax/SourceFile.js").SourceFile;
	  var IDENTIFIER = System.get("traceur@0.0.87/src/syntax/TokenType.js").IDENTIFIER;
	  var $__12 = System.get("traceur@0.0.87/src/codegeneration/ParseTreeFactory.js"),
	      createArrayLiteralExpression = $__12.createArrayLiteralExpression,
	      createBindingIdentifier = $__12.createBindingIdentifier,
	      createBlock = $__12.createBlock,
	      createBooleanLiteral = $__12.createBooleanLiteral,
	      createCommaExpression = $__12.createCommaExpression,
	      createExpressionStatement = $__12.createExpressionStatement,
	      createFunctionBody = $__12.createFunctionBody,
	      createIdentifierExpression = $__12.createIdentifierExpression,
	      createIdentifierToken = $__12.createIdentifierToken,
	      createMemberExpression = $__12.createMemberExpression,
	      createNullLiteral = $__12.createNullLiteral,
	      createNumberLiteral = $__12.createNumberLiteral,
	      createParenExpression = $__12.createParenExpression,
	      createStringLiteral = $__12.createStringLiteral,
	      createVoid0 = $__12.createVoid0;
	  var NOT_FOUND = {};
	  var cache = new Map();
	  function makeParseFunction(doParse) {
	    return (function(sourceLiterals) {
	      for (var values = [],
	          $__14 = 1; $__14 < arguments.length; $__14++)
	        values[$__14 - 1] = arguments[$__14];
	      return parse(sourceLiterals, values, doParse);
	    });
	  }
	  var parseExpression = makeParseFunction((function(p) {
	    return p.parseExpression();
	  }));
	  var parseStatement = makeParseFunction((function(p) {
	    return p.parseStatement();
	  }));
	  var parseModule = makeParseFunction((function(p) {
	    return p.parseModule();
	  }));
	  var parseScript = makeParseFunction((function(p) {
	    return p.parseScript();
	  }));
	  var parseStatements = makeParseFunction((function(p) {
	    return p.parseStatements();
	  }));
	  var parsePropertyDefinition = makeParseFunction((function(p) {
	    return p.parsePropertyDefinition();
	  }));
	  function parse(sourceLiterals, values, doParse) {
	    var tree = cache.get(sourceLiterals);
	    if (!tree) {
	      var source = insertPlaceholderIdentifiers(sourceLiterals);
	      var errorReporter = new CollectingErrorReporter();
	      var parser = getParser(source, errorReporter);
	      tree = doParse(parser);
	      if (errorReporter.hadError() || !tree || !parser.isAtEnd()) {
	        throw new Error(("Internal error trying to parse:\n\n" + source + "\n\n" + errorReporter.errorsAsString()));
	      }
	      cache.set(sourceLiterals, tree);
	    }
	    if (!values.length)
	      return tree;
	    if (tree instanceof ParseTree)
	      return new PlaceholderTransformer(values).transformAny(tree);
	    return new PlaceholderTransformer(values).transformList(tree);
	  }
	  var PREFIX = '$__placeholder__';
	  function insertPlaceholderIdentifiers(sourceLiterals) {
	    var source = sourceLiterals[0];
	    for (var i = 1; i < sourceLiterals.length; i++) {
	      source += PREFIX + (i - 1) + sourceLiterals[i];
	    }
	    return source;
	  }
	  var counter = 0;
	  function getParser(source, errorReporter) {
	    var file = new SourceFile(null, source);
	    var options = new Options();
	    options.experimental = true;
	    return new Parser(file, errorReporter, options);
	  }
	  function convertValueToExpression(value) {
	    if (value instanceof ParseTree)
	      return value;
	    if (value instanceof IdentifierToken)
	      return createIdentifierExpression(value);
	    if (value instanceof LiteralToken)
	      return new LiteralExpression(value.location, value);
	    if (Array.isArray(value)) {
	      if (value[0] instanceof ParseTree) {
	        if (value.length === 1)
	          return value[0];
	        if (value[0].isStatement())
	          return createBlock(value);
	        else
	          return createParenExpression(createCommaExpression(value));
	      }
	      return createArrayLiteralExpression(value.map(convertValueToExpression));
	    }
	    if (value === null)
	      return createNullLiteral();
	    if (value === undefined)
	      return createVoid0();
	    switch (typeof value) {
	      case 'string':
	        return createStringLiteral(value);
	      case 'boolean':
	        return createBooleanLiteral(value);
	      case 'number':
	        return createNumberLiteral(value);
	    }
	    throw new Error('Not implemented');
	  }
	  function convertValueToIdentifierToken(value) {
	    if (value instanceof IdentifierToken)
	      return value;
	    return createIdentifierToken(value);
	  }
	  function convertValueToType(value) {
	    if (value === null)
	      return null;
	    if (value instanceof ParseTree)
	      return value;
	    if (typeof value === 'string') {
	      return new TypeName(null, null, convertValueToIdentifierToken(value));
	    }
	    if (value instanceof IdentifierToken) {
	      return new TypeName(null, null, value);
	    }
	    throw new Error('Not implemented');
	  }
	  var PlaceholderTransformer = function PlaceholderTransformer(values) {
	    $traceurRuntime.superConstructor($PlaceholderTransformer).call(this);
	    this.values = values;
	  };
	  var $PlaceholderTransformer = PlaceholderTransformer;
	  ($traceurRuntime.createClass)(PlaceholderTransformer, {
	    getValueAt: function(index) {
	      return this.values[index];
	    },
	    getValue_: function(str) {
	      if (str.indexOf(PREFIX) !== 0)
	        return NOT_FOUND;
	      return this.getValueAt(Number(str.slice(PREFIX.length)));
	    },
	    transformIdentifierExpression: function(tree) {
	      var value = this.getValue_(tree.identifierToken.value);
	      if (value === NOT_FOUND)
	        return tree;
	      return convertValueToExpression(value);
	    },
	    transformBindingIdentifier: function(tree) {
	      var value = this.getValue_(tree.identifierToken.value);
	      if (value === NOT_FOUND)
	        return tree;
	      return createBindingIdentifier(value);
	    },
	    transformExpressionStatement: function(tree) {
	      if (tree.expression.type === IDENTIFIER_EXPRESSION) {
	        var transformedExpression = this.transformIdentifierExpression(tree.expression);
	        if (transformedExpression === tree.expression)
	          return tree;
	        if (transformedExpression.isStatement())
	          return transformedExpression;
	        return createExpressionStatement(transformedExpression);
	      }
	      return $traceurRuntime.superGet(this, $PlaceholderTransformer.prototype, "transformExpressionStatement").call(this, tree);
	    },
	    transformBlock: function(tree) {
	      if (tree.statements.length === 1 && tree.statements[0].type === EXPRESSION_STATEMENT) {
	        var transformedStatement = this.transformExpressionStatement(tree.statements[0]);
	        if (transformedStatement === tree.statements[0])
	          return tree;
	        if (transformedStatement.type === BLOCK)
	          return transformedStatement;
	      }
	      return $traceurRuntime.superGet(this, $PlaceholderTransformer.prototype, "transformBlock").call(this, tree);
	    },
	    transformFunctionBody: function(tree) {
	      if (tree.statements.length === 1 && tree.statements[0].type === EXPRESSION_STATEMENT) {
	        var transformedStatement = this.transformExpressionStatement(tree.statements[0]);
	        if (transformedStatement === tree.statements[0])
	          return tree;
	        if (transformedStatement.type === BLOCK)
	          return createFunctionBody(transformedStatement.statements);
	      }
	      return $traceurRuntime.superGet(this, $PlaceholderTransformer.prototype, "transformFunctionBody").call(this, tree);
	    },
	    transformMemberExpression: function(tree) {
	      var value = this.getValue_(tree.memberName.value);
	      if (value === NOT_FOUND)
	        return $traceurRuntime.superGet(this, $PlaceholderTransformer.prototype, "transformMemberExpression").call(this, tree);
	      var operand = this.transformAny(tree.operand);
	      return createMemberExpression(operand, value);
	    },
	    transformLiteralPropertyName: function(tree) {
	      if (tree.literalToken.type === IDENTIFIER) {
	        var value = this.getValue_(tree.literalToken.value);
	        if (value !== NOT_FOUND) {
	          return new LiteralPropertyName(null, convertValueToIdentifierToken(value));
	        }
	      }
	      return $traceurRuntime.superGet(this, $PlaceholderTransformer.prototype, "transformLiteralPropertyName").call(this, tree);
	    },
	    transformArgumentList: function(tree) {
	      if (tree.args.length === 1 && tree.args[0].type === IDENTIFIER_EXPRESSION) {
	        var arg0 = this.transformAny(tree.args[0]);
	        if (arg0 === tree.args[0])
	          return tree;
	        if (arg0.type === ARGUMENT_LIST)
	          return arg0;
	      }
	      return $traceurRuntime.superGet(this, $PlaceholderTransformer.prototype, "transformArgumentList").call(this, tree);
	    },
	    transformTypeName: function(tree) {
	      var value = this.getValue_(tree.name.value);
	      if (value === NOT_FOUND)
	        return $traceurRuntime.superGet(this, $PlaceholderTransformer.prototype, "transformTypeName").call(this, tree);
	      var moduleName = this.transformAny(tree.moduleName);
	      if (moduleName !== null) {
	        return new TypeName(null, moduleName, convertValueToIdentifierToken(value));
	      }
	      return convertValueToType(value);
	    }
	  }, {}, ParseTreeTransformer);
	  return {
	    get parseExpression() {
	      return parseExpression;
	    },
	    get parseStatement() {
	      return parseStatement;
	    },
	    get parseModule() {
	      return parseModule;
	    },
	    get parseScript() {
	      return parseScript;
	    },
	    get parseStatements() {
	      return parseStatements;
	    },
	    get parsePropertyDefinition() {
	      return parsePropertyDefinition;
	    },
	    get PlaceholderTransformer() {
	      return PlaceholderTransformer;
	    }
	  };
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/PrependStatements.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/PrependStatements.js";
	  function prependStatements(statements) {
	    for (var statementsToPrepend = [],
	        $__0 = 1; $__0 < arguments.length; $__0++)
	      statementsToPrepend[$__0 - 1] = arguments[$__0];
	    if (!statements.length)
	      return statementsToPrepend;
	    if (!statementsToPrepend.length)
	      return statements;
	    var transformed = [];
	    var inProlog = true;
	    statements.forEach((function(statement) {
	      var $__1;
	      if (inProlog && !statement.isDirectivePrologue()) {
	        ($__1 = transformed).push.apply($__1, $traceurRuntime.spread(statementsToPrepend));
	        inProlog = false;
	      }
	      transformed.push(statement);
	    }));
	    return transformed;
	  }
	  return {get prependStatements() {
	      return prependStatements;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/TempVarTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/TempVarTransformer.js";
	  var ParseTreeTransformer = System.get("traceur@0.0.87/src/codegeneration/ParseTreeTransformer.js").ParseTreeTransformer;
	  var $__1 = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js"),
	      Module = $__1.Module,
	      Script = $__1.Script;
	  var ARGUMENTS = System.get("traceur@0.0.87/src/syntax/PredefinedName.js").ARGUMENTS;
	  var StringSet = System.get("traceur@0.0.87/src/util/StringSet.js").StringSet;
	  var VAR = System.get("traceur@0.0.87/src/syntax/TokenType.js").VAR;
	  var $__5 = System.get("traceur@0.0.87/src/codegeneration/ParseTreeFactory.js"),
	      createFunctionBody = $__5.createFunctionBody,
	      createThisExpression = $__5.createThisExpression,
	      createIdentifierExpression = $__5.createIdentifierExpression,
	      createVariableDeclaration = $__5.createVariableDeclaration,
	      createVariableDeclarationList = $__5.createVariableDeclarationList,
	      createVariableStatement = $__5.createVariableStatement;
	  var prependStatements = System.get("traceur@0.0.87/src/codegeneration/PrependStatements.js").prependStatements;
	  var TempVarStatement = function TempVarStatement(name, initializer) {
	    this.name = name;
	    this.initializer = initializer;
	  };
	  ($traceurRuntime.createClass)(TempVarStatement, {}, {});
	  var TempScope = function TempScope() {
	    this.identifiers = [];
	  };
	  ($traceurRuntime.createClass)(TempScope, {
	    push: function(identifier) {
	      this.identifiers.push(identifier);
	    },
	    pop: function() {
	      return this.identifiers.pop();
	    },
	    release: function(obj) {
	      for (var i = this.identifiers.length - 1; i >= 0; i--) {
	        obj.release_(this.identifiers[i]);
	      }
	    }
	  }, {});
	  var VarScope = function VarScope() {
	    this.thisName = null;
	    this.argumentName = null;
	    this.tempVarStatements = [];
	  };
	  ($traceurRuntime.createClass)(VarScope, {
	    push: function(tempVarStatement) {
	      this.tempVarStatements.push(tempVarStatement);
	    },
	    pop: function() {
	      return this.tempVarStatements.pop();
	    },
	    release: function(obj) {
	      for (var i = this.tempVarStatements.length - 1; i >= 0; i--) {
	        obj.release_(this.tempVarStatements[i].name);
	      }
	    },
	    isEmpty: function() {
	      return !this.tempVarStatements.length;
	    },
	    createVariableStatement: function() {
	      var declarations = [];
	      var seenNames = new StringSet();
	      for (var i = 0; i < this.tempVarStatements.length; i++) {
	        var $__8 = this.tempVarStatements[i],
	            name = $__8.name,
	            initializer = $__8.initializer;
	        if (seenNames.has(name)) {
	          if (initializer)
	            throw new Error('Invalid use of TempVarTransformer');
	          continue;
	        }
	        seenNames.add(name);
	        declarations.push(createVariableDeclaration(name, initializer));
	      }
	      return createVariableStatement(createVariableDeclarationList(VAR, declarations));
	    }
	  }, {});
	  var TempVarTransformer = function TempVarTransformer(identifierGenerator) {
	    $traceurRuntime.superConstructor($TempVarTransformer).call(this);
	    this.identifierGenerator = identifierGenerator;
	    this.tempVarStack_ = [new VarScope()];
	    this.tempScopeStack_ = [new TempScope()];
	    this.namePool_ = [];
	  };
	  var $TempVarTransformer = TempVarTransformer;
	  ($traceurRuntime.createClass)(TempVarTransformer, {
	    transformStatements_: function(statements) {
	      this.tempVarStack_.push(new VarScope());
	      var transformedStatements = this.transformList(statements);
	      var vars = this.tempVarStack_.pop();
	      if (vars.isEmpty())
	        return transformedStatements;
	      var variableStatement = vars.createVariableStatement();
	      vars.release(this);
	      return prependStatements(transformedStatements, variableStatement);
	    },
	    transformScript: function(tree) {
	      var scriptItemList = this.transformStatements_(tree.scriptItemList);
	      if (scriptItemList === tree.scriptItemList) {
	        return tree;
	      }
	      return new Script(tree.location, scriptItemList, tree.moduleName);
	    },
	    transformModule: function(tree) {
	      var scriptItemList = this.transformStatements_(tree.scriptItemList);
	      if (scriptItemList === tree.scriptItemList) {
	        return tree;
	      }
	      return new Module(tree.location, scriptItemList, tree.moduleName);
	    },
	    transformFunctionBody: function(tree) {
	      this.pushTempScope();
	      var statements = this.transformStatements_(tree.statements);
	      this.popTempScope();
	      if (statements === tree.statements)
	        return tree;
	      return createFunctionBody(statements);
	    },
	    getTempIdentifier: function() {
	      var name = this.getName_();
	      this.tempScopeStack_[this.tempScopeStack_.length - 1].push(name);
	      return name;
	    },
	    getName_: function() {
	      return this.namePool_.length ? this.namePool_.pop() : this.identifierGenerator.generateUniqueIdentifier();
	    },
	    addTempVar: function() {
	      var initializer = arguments[0] !== (void 0) ? arguments[0] : null;
	      var vars = this.tempVarStack_[this.tempVarStack_.length - 1];
	      var name = this.getName_();
	      vars.push(new TempVarStatement(name, initializer));
	      return name;
	    },
	    addTempVarForThis: function() {
	      var varScope = this.tempVarStack_[this.tempVarStack_.length - 1];
	      return varScope.thisName || (varScope.thisName = this.addTempVar(createThisExpression()));
	    },
	    addTempVarForArguments: function() {
	      var varScope = this.tempVarStack_[this.tempVarStack_.length - 1];
	      return varScope.argumentName || (varScope.argumentName = this.addTempVar(createIdentifierExpression(ARGUMENTS)));
	    },
	    pushTempScope: function() {
	      this.tempScopeStack_.push(new TempScope());
	    },
	    popTempScope: function() {
	      this.tempScopeStack_.pop().release(this);
	    },
	    release_: function(name) {
	      this.namePool_.push(name);
	    }
	  }, {}, ParseTreeTransformer);
	  return {get TempVarTransformer() {
	      return TempVarTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/DestructuringTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/DestructuringTransformer.js";
	  var $__0 = Object.freeze(Object.defineProperties(["", " =\n            ", "[$traceurRuntime.toProperty(Symbol.iterator)]()"], {raw: {value: Object.freeze(["", " =\n            ", "[$traceurRuntime.toProperty(Symbol.iterator)]()"])}})),
	      $__1 = Object.freeze(Object.defineProperties(["", ".next()"], {raw: {value: Object.freeze(["", ".next()"])}})),
	      $__2 = Object.freeze(Object.defineProperties(["$traceurRuntime.iteratorToArray(", ")"], {raw: {value: Object.freeze(["$traceurRuntime.iteratorToArray(", ")"])}})),
	      $__3 = Object.freeze(Object.defineProperties(["(", " = ", ".", ") === void 0 ?\n        ", " : ", ""], {raw: {value: Object.freeze(["(", " = ", ".", ") === void 0 ?\n        ", " : ", ""])}})),
	      $__4 = Object.freeze(Object.defineProperties(["(", " = ", "[", "]) === void 0 ?\n        ", " : ", ""], {raw: {value: Object.freeze(["(", " = ", "[", "]) === void 0 ?\n        ", " : ", ""])}})),
	      $__5 = Object.freeze(Object.defineProperties(["(", " =\n        ", ".next()).done ? void 0 : ", ".value"], {raw: {value: Object.freeze(["(", " =\n        ", ".next()).done ? void 0 : ", ".value"])}})),
	      $__6 = Object.freeze(Object.defineProperties(["(", " = ", ") === void 0 ?\n        ", " : ", ""], {raw: {value: Object.freeze(["(", " = ", ") === void 0 ?\n        ", " : ", ""])}}));
	  var $__7 = System.get("traceur@0.0.87/src/syntax/trees/ParseTreeType.js"),
	      ARRAY_LITERAL_EXPRESSION = $__7.ARRAY_LITERAL_EXPRESSION,
	      ARRAY_PATTERN = $__7.ARRAY_PATTERN,
	      ASSIGNMENT_ELEMENT = $__7.ASSIGNMENT_ELEMENT,
	      BINDING_ELEMENT = $__7.BINDING_ELEMENT,
	      BINDING_IDENTIFIER = $__7.BINDING_IDENTIFIER,
	      BLOCK = $__7.BLOCK,
	      CALL_EXPRESSION = $__7.CALL_EXPRESSION,
	      COMPUTED_PROPERTY_NAME = $__7.COMPUTED_PROPERTY_NAME,
	      IDENTIFIER_EXPRESSION = $__7.IDENTIFIER_EXPRESSION,
	      LITERAL_EXPRESSION = $__7.LITERAL_EXPRESSION,
	      MEMBER_EXPRESSION = $__7.MEMBER_EXPRESSION,
	      MEMBER_LOOKUP_EXPRESSION = $__7.MEMBER_LOOKUP_EXPRESSION,
	      OBJECT_LITERAL_EXPRESSION = $__7.OBJECT_LITERAL_EXPRESSION,
	      OBJECT_PATTERN = $__7.OBJECT_PATTERN,
	      OBJECT_PATTERN_FIELD = $__7.OBJECT_PATTERN_FIELD,
	      PAREN_EXPRESSION = $__7.PAREN_EXPRESSION,
	      VARIABLE_DECLARATION_LIST = $__7.VARIABLE_DECLARATION_LIST;
	  var $__8 = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js"),
	      AssignmentElement = $__8.AssignmentElement,
	      BindingElement = $__8.BindingElement,
	      Catch = $__8.Catch,
	      ForInStatement = $__8.ForInStatement,
	      ForOfStatement = $__8.ForOfStatement,
	      ForOnStatement = $__8.ForOnStatement;
	  var TempVarTransformer = System.get("traceur@0.0.87/src/codegeneration/TempVarTransformer.js").TempVarTransformer;
	  var $__10 = System.get("traceur@0.0.87/src/syntax/TokenType.js"),
	      EQUAL = $__10.EQUAL,
	      LET = $__10.LET,
	      VAR = $__10.VAR;
	  var $__11 = System.get("traceur@0.0.87/src/codegeneration/ParseTreeFactory.js"),
	      createAssignmentExpression = $__11.createAssignmentExpression,
	      createBindingIdentifier = $__11.createBindingIdentifier,
	      createBlock = $__11.createBlock,
	      createCommaExpression = $__11.createCommaExpression,
	      createExpressionStatement = $__11.createExpressionStatement,
	      createFunctionBody = $__11.createFunctionBody,
	      createIdentifierExpression = $__11.createIdentifierExpression,
	      createMemberExpression = $__11.createMemberExpression,
	      createMemberLookupExpression = $__11.createMemberLookupExpression,
	      createParenExpression = $__11.createParenExpression,
	      createVariableDeclaration = $__11.createVariableDeclaration,
	      createVariableDeclarationList = $__11.createVariableDeclarationList,
	      createVariableStatement = $__11.createVariableStatement;
	  var parseExpression = System.get("traceur@0.0.87/src/codegeneration/PlaceholderParser.js").parseExpression;
	  var prependStatements = System.get("traceur@0.0.87/src/codegeneration/PrependStatements.js").prependStatements;
	  var Desugaring = function Desugaring(rvalue) {
	    this.rvalue = rvalue;
	    this.expressions = [];
	    this.pendingExpressions = [];
	  };
	  ($traceurRuntime.createClass)(Desugaring, {
	    createIterator: function(iterId) {
	      this.pendingExpressions.push(parseExpression($__0, iterId, this.rvalue));
	    },
	    createInitializer: function(expression) {
	      if (this.pendingExpressions.length === 0)
	        return expression;
	      var expressions = this.pendingExpressions;
	      this.pendingExpressions = [];
	      expressions.push(expression);
	      return createParenExpression(createCommaExpression(expressions));
	    },
	    skipHole: function(iterId) {
	      this.pendingExpressions.push(parseExpression($__1, iterId));
	    }
	  }, {});
	  var AssignmentExpressionDesugaring = function AssignmentExpressionDesugaring(rvalue) {
	    $traceurRuntime.superConstructor($AssignmentExpressionDesugaring).call(this, rvalue);
	  };
	  var $AssignmentExpressionDesugaring = AssignmentExpressionDesugaring;
	  ($traceurRuntime.createClass)(AssignmentExpressionDesugaring, {
	    assign: function(lvalue, rvalue) {
	      lvalue = lvalue instanceof AssignmentElement ? lvalue.assignment : lvalue;
	      rvalue = this.createInitializer(rvalue);
	      this.expressions.push(createAssignmentExpression(lvalue, rvalue));
	    },
	    createAssignmentExpression: function(tempId, rvalue) {
	      var $__16;
	      var expressions = this.expressions;
	      expressions.unshift(createAssignmentExpression(tempId, rvalue));
	      ($__16 = expressions).push.apply($__16, $traceurRuntime.spread(this.pendingExpressions, [tempId]));
	      return createParenExpression(createCommaExpression(expressions));
	    }
	  }, {}, Desugaring);
	  var VariableDeclarationDesugaring = function VariableDeclarationDesugaring(rvalue) {
	    $traceurRuntime.superConstructor($VariableDeclarationDesugaring).call(this, rvalue);
	  };
	  var $VariableDeclarationDesugaring = VariableDeclarationDesugaring;
	  ($traceurRuntime.createClass)(VariableDeclarationDesugaring, {
	    assign: function(lvalue, rvalue) {
	      var binding = lvalue instanceof BindingElement ? lvalue.binding : createBindingIdentifier(lvalue);
	      rvalue = this.createInitializer(rvalue);
	      this.expressions.push(createVariableDeclaration(binding, rvalue));
	    },
	    get declarations() {
	      return this.expressions;
	    }
	  }, {}, Desugaring);
	  var DestructuringTransformer = function DestructuringTransformer(identifierGenerator, reporter, options) {
	    $traceurRuntime.superConstructor($DestructuringTransformer).call(this, identifierGenerator);
	    this.options_ = options;
	    this.parameterDeclarations = null;
	  };
	  var $DestructuringTransformer = DestructuringTransformer;
	  ($traceurRuntime.createClass)(DestructuringTransformer, {
	    transformArrayPattern: function(tree) {
	      throw new Error('unreachable');
	    },
	    transformObjectPattern: function(tree) {
	      throw new Error('unreachable');
	    },
	    transformBinaryExpression: function(tree) {
	      this.pushTempScope();
	      var rv;
	      if (tree.operator.type === EQUAL && tree.left.isPattern()) {
	        rv = this.transformAny(this.desugarAssignment_(tree.left, tree.right));
	      } else {
	        rv = $traceurRuntime.superGet(this, $DestructuringTransformer.prototype, "transformBinaryExpression").call(this, tree);
	      }
	      this.popTempScope();
	      return rv;
	    },
	    desugarAssignment_: function(lvalue, rvalue) {
	      var tempId = createIdentifierExpression(this.addTempVar());
	      var desugaring = new AssignmentExpressionDesugaring(tempId);
	      this.desugarPattern_(desugaring, lvalue);
	      return desugaring.createAssignmentExpression(tempId, rvalue);
	    },
	    transformVariableDeclarationList: function(tree) {
	      var $__14 = this;
	      if (!this.destructuringInDeclaration_(tree)) {
	        return $traceurRuntime.superGet(this, $DestructuringTransformer.prototype, "transformVariableDeclarationList").call(this, tree);
	      }
	      var desugaredDeclarations = [];
	      tree.declarations.forEach((function(declaration) {
	        var $__16;
	        if (declaration.lvalue.isPattern()) {
	          ($__16 = desugaredDeclarations).push.apply($__16, $traceurRuntime.spread($__14.desugarVariableDeclaration_(declaration)));
	        } else {
	          desugaredDeclarations.push(declaration);
	        }
	      }));
	      var transformedTree = this.transformVariableDeclarationList(createVariableDeclarationList(tree.declarationType, desugaredDeclarations));
	      return transformedTree;
	    },
	    transformForInStatement: function(tree) {
	      return this.transformForInOrOfOrOn_(tree, $traceurRuntime.superGet(this, $DestructuringTransformer.prototype, "transformForInStatement"), ForInStatement);
	    },
	    transformForOfStatement: function(tree) {
	      return this.transformForInOrOfOrOn_(tree, $traceurRuntime.superGet(this, $DestructuringTransformer.prototype, "transformForOfStatement"), ForOfStatement);
	    },
	    transformForOnStatement: function(tree) {
	      return this.transformForInOrOfOrOn_(tree, $traceurRuntime.superGet(this, $DestructuringTransformer.prototype, "transformForOnStatement"), ForOnStatement);
	    },
	    transformForInOrOfOrOn_: function(tree, superMethod, constr) {
	      var $__16;
	      if (!tree.initializer.isPattern() && (tree.initializer.type !== VARIABLE_DECLARATION_LIST || !this.destructuringInDeclaration_(tree.initializer))) {
	        return superMethod.call(this, tree);
	      }
	      this.pushTempScope();
	      var declarationType,
	          lvalue;
	      if (tree.initializer.isPattern()) {
	        declarationType = null;
	        lvalue = tree.initializer;
	      } else {
	        declarationType = tree.initializer.declarationType;
	        lvalue = tree.initializer.declarations[0].lvalue;
	      }
	      var statements = [];
	      var binding = this.desugarBinding_(lvalue, statements, declarationType);
	      var initializer = createVariableDeclarationList(VAR, binding, null);
	      var collection = this.transformAny(tree.collection);
	      var body = this.transformAny(tree.body);
	      if (body.type === BLOCK)
	        ($__16 = statements).push.apply($__16, $traceurRuntime.spread(body.statements));
	      else
	        statements.push(body);
	      body = createBlock(statements);
	      this.popTempScope();
	      return new constr(tree.location, initializer, collection, body);
	    },
	    transformAssignmentElement: function(tree) {
	      throw new Error('unreachable');
	    },
	    transformBindingElement: function(tree) {
	      if (!tree.binding.isPattern() || tree.initializer)
	        return tree;
	      if (this.parameterDeclarations === null) {
	        this.parameterDeclarations = [];
	        this.pushTempScope();
	      }
	      var varName = this.getTempIdentifier();
	      var binding = createBindingIdentifier(varName);
	      var initializer = createIdentifierExpression(varName);
	      var decl = createVariableDeclaration(tree.binding, initializer);
	      this.parameterDeclarations.push(decl);
	      return new BindingElement(null, binding, null);
	    },
	    transformFunctionBody: function(tree) {
	      if (this.parameterDeclarations === null)
	        return $traceurRuntime.superGet(this, $DestructuringTransformer.prototype, "transformFunctionBody").call(this, tree);
	      var list = createVariableDeclarationList(VAR, this.parameterDeclarations);
	      var statement = createVariableStatement(list);
	      var statements = prependStatements(tree.statements, statement);
	      var newBody = createFunctionBody(statements);
	      this.parameterDeclarations = null;
	      var result = $traceurRuntime.superGet(this, $DestructuringTransformer.prototype, "transformFunctionBody").call(this, newBody);
	      this.popTempScope();
	      return result;
	    },
	    transformCatch: function(tree) {
	      var $__16;
	      if (!tree.binding.isPattern())
	        return $traceurRuntime.superGet(this, $DestructuringTransformer.prototype, "transformCatch").call(this, tree);
	      var body = this.transformAny(tree.catchBody);
	      var statements = [];
	      var kind = this.options_.blockBinding ? LET : VAR;
	      var binding = this.desugarBinding_(tree.binding, statements, kind);
	      ($__16 = statements).push.apply($__16, $traceurRuntime.spread(body.statements));
	      return new Catch(tree.location, binding, createBlock(statements));
	    },
	    desugarBinding_: function(bindingTree, statements, declarationType) {
	      var varName = this.getTempIdentifier();
	      var binding = createBindingIdentifier(varName);
	      var idExpr = createIdentifierExpression(varName);
	      var desugaring;
	      if (declarationType === null)
	        desugaring = new AssignmentExpressionDesugaring(idExpr);
	      else
	        desugaring = new VariableDeclarationDesugaring(idExpr);
	      this.desugarPattern_(desugaring, bindingTree);
	      if (declarationType === null) {
	        statements.push(createExpressionStatement(createCommaExpression(desugaring.expressions)));
	      } else {
	        statements.push(createVariableStatement(this.transformVariableDeclarationList(createVariableDeclarationList(declarationType, desugaring.declarations))));
	      }
	      return binding;
	    },
	    destructuringInDeclaration_: function(tree) {
	      return tree.declarations.some((function(declaration) {
	        return declaration.lvalue.isPattern();
	      }));
	    },
	    desugarVariableDeclaration_: function(tree) {
	      var tempRValueName = this.getTempIdentifier();
	      var tempRValueIdent = createIdentifierExpression(tempRValueName);
	      var desugaring;
	      var initializer;
	      switch (tree.initializer.type) {
	        case ARRAY_LITERAL_EXPRESSION:
	        case CALL_EXPRESSION:
	        case IDENTIFIER_EXPRESSION:
	        case LITERAL_EXPRESSION:
	        case MEMBER_EXPRESSION:
	        case MEMBER_LOOKUP_EXPRESSION:
	        case OBJECT_LITERAL_EXPRESSION:
	        case PAREN_EXPRESSION:
	          initializer = tree.initializer;
	        default:
	          desugaring = new VariableDeclarationDesugaring(tempRValueIdent);
	          desugaring.assign(desugaring.rvalue, tree.initializer);
	          var initializerFound = this.desugarPattern_(desugaring, tree.lvalue);
	          if (initializerFound || desugaring.declarations.length > 2) {
	            return desugaring.declarations;
	          }
	          if (!initializer) {
	            initializer = createParenExpression(tree.initializer);
	          }
	          desugaring = new VariableDeclarationDesugaring(initializer);
	          this.desugarPattern_(desugaring, tree.lvalue);
	          return desugaring.declarations;
	      }
	    },
	    desugarPattern_: function(desugaring, tree) {
	      var $__14 = this;
	      var initializerFound = false;
	      var pattern;
	      switch (tree.type) {
	        case ARRAY_PATTERN:
	          pattern = tree;
	          this.pushTempScope();
	          var iterId = createIdentifierExpression(this.addTempVar());
	          var iterObjectId = createIdentifierExpression(this.addTempVar());
	          desugaring.createIterator(iterId);
	          for (var i = 0; i < pattern.elements.length; i++) {
	            var lvalue = pattern.elements[i];
	            if (lvalue === null) {
	              desugaring.skipHole(iterId);
	              continue;
	            } else if (lvalue.isSpreadPatternElement()) {
	              desugaring.assign(lvalue.lvalue, parseExpression($__2, iterId));
	            } else {
	              if (lvalue.initializer) {
	                initializerFound = true;
	              }
	              desugaring.assign(lvalue, this.createConditionalIterExpression(iterObjectId, iterId, lvalue.initializer));
	            }
	          }
	          this.popTempScope();
	          break;
	        case OBJECT_PATTERN:
	          pattern = tree;
	          var elementHelper = (function(lvalue, initializer) {
	            if (initializer)
	              initializerFound = true;
	            var lookup = $__14.createConditionalMemberExpression(desugaring.rvalue, lvalue, initializer);
	            desugaring.assign(lvalue, lookup);
	          });
	          pattern.fields.forEach((function(field) {
	            var lookup;
	            switch (field.type) {
	              case ASSIGNMENT_ELEMENT:
	                elementHelper(field.assignment, field.initializer);
	                break;
	              case BINDING_ELEMENT:
	                elementHelper(field.binding, field.initializer);
	                break;
	              case OBJECT_PATTERN_FIELD:
	                if (field.element.initializer)
	                  initializerFound = true;
	                var name = field.name;
	                lookup = $__14.createConditionalMemberExpression(desugaring.rvalue, name, field.element.initializer);
	                desugaring.assign(field.element, lookup);
	                break;
	              default:
	                throw Error('unreachable');
	            }
	          }));
	          break;
	        case PAREN_EXPRESSION:
	          return this.desugarPattern_(desugaring, tree.expression);
	        default:
	          throw new Error('unreachable');
	      }
	      if (desugaring instanceof VariableDeclarationDesugaring && desugaring.declarations.length === 0) {
	        desugaring.assign(createBindingIdentifier(this.getTempIdentifier()), desugaring.rvalue);
	      }
	      return initializerFound;
	    },
	    createConditionalMemberExpression: function(rvalue, name, initializer) {
	      if (name.type === COMPUTED_PROPERTY_NAME) {
	        return this.createConditionalMemberLookupExpression(rvalue, name.expression, initializer);
	      }
	      var token;
	      switch (name.type) {
	        case BINDING_IDENTIFIER:
	        case IDENTIFIER_EXPRESSION:
	          token = name.identifierToken;
	          break;
	        default:
	          token = name.literalToken;
	      }
	      if (!initializer)
	        return createMemberExpression(rvalue, token);
	      var tempIdent = createIdentifierExpression(this.addTempVar());
	      return parseExpression($__3, tempIdent, rvalue, token, initializer, tempIdent);
	    },
	    createConditionalMemberLookupExpression: function(rvalue, index, initializer) {
	      if (!initializer)
	        return createMemberLookupExpression(rvalue, index);
	      var tempIdent = createIdentifierExpression(this.addTempVar());
	      return parseExpression($__4, tempIdent, rvalue, index, initializer, tempIdent);
	    },
	    createConditionalIterExpression: function(iterObjectId, iterId, initializer) {
	      var expr = parseExpression($__5, iterObjectId, iterId, iterObjectId);
	      if (!initializer) {
	        return expr;
	      }
	      var tempIdent = createIdentifierExpression(this.addTempVar());
	      return parseExpression($__6, tempIdent, expr, initializer, tempIdent);
	    }
	  }, {}, TempVarTransformer);
	  return {get DestructuringTransformer() {
	      return DestructuringTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/module/ModuleSymbol.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/module/ModuleSymbol.js";
	  var StringMap = System.get("traceur@0.0.87/src/util/StringMap.js").StringMap;
	  var assert = System.get("traceur@0.0.87/src/util/assert.js").assert;
	  var ExportsList = function ExportsList(normalizedName) {
	    this.exports_ = new StringMap();
	    if (normalizedName !== null)
	      this.normalizedName = normalizedName.replace(/\\/g, '/');
	    else
	      this.normalizedName = null;
	  };
	  ($traceurRuntime.createClass)(ExportsList, {
	    addExport: function(name, tree) {
	      assert(!this.exports_.has(name));
	      this.exports_.set(name, tree);
	    },
	    getExport: function(name) {
	      return this.exports_.get(name);
	    },
	    getExports: function() {
	      return this.exports_.keysAsArray();
	    },
	    addExportsFromModule: function(module) {
	      var $__2 = this;
	      Object.getOwnPropertyNames(module).forEach((function(name) {
	        $__2.addExport(name, true);
	      }));
	    }
	  }, {});
	  var ModuleSymbol = function ModuleSymbol(tree, normalizedName) {
	    $traceurRuntime.superConstructor($ModuleSymbol).call(this, normalizedName);
	    this.tree = tree;
	    this.imports_ = new StringMap();
	  };
	  var $ModuleSymbol = ModuleSymbol;
	  ($traceurRuntime.createClass)(ModuleSymbol, {
	    addImport: function(name, tree) {
	      assert(!this.imports_.has(name));
	      this.imports_.set(name, tree);
	    },
	    getImport: function(name) {
	      return this.imports_.get(name);
	    }
	  }, {}, ExportsList);
	  return {
	    get ExportsList() {
	      return ExportsList;
	    },
	    get ModuleSymbol() {
	      return ModuleSymbol;
	    }
	  };
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/module/ModuleVisitor.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/module/ModuleVisitor.js";
	  var ExportsList = System.get("traceur@0.0.87/src/codegeneration/module/ModuleSymbol.js").ExportsList;
	  var ParseTreeVisitor = System.get("traceur@0.0.87/src/syntax/ParseTreeVisitor.js").ParseTreeVisitor;
	  var $__2 = System.get("traceur@0.0.87/src/syntax/trees/ParseTreeType.js"),
	      MODULE_DECLARATION = $__2.MODULE_DECLARATION,
	      EXPORT_DECLARATION = $__2.EXPORT_DECLARATION,
	      IMPORT_DECLARATION = $__2.IMPORT_DECLARATION;
	  var ModuleVisitor = function ModuleVisitor(reporter, loader, moduleSymbol) {
	    $traceurRuntime.superConstructor($ModuleVisitor).call(this);
	    this.reporter = reporter;
	    this.loader_ = loader;
	    this.moduleSymbol = moduleSymbol;
	  };
	  var $ModuleVisitor = ModuleVisitor;
	  ($traceurRuntime.createClass)(ModuleVisitor, {
	    getExportsListForModuleSpecifier: function(name) {
	      var referrer = this.moduleSymbol.normalizedName;
	      return this.loader_.getExportsListForModuleSpecifier(name, referrer);
	    },
	    visitFunctionDeclaration: function(tree) {},
	    visitFunctionExpression: function(tree) {},
	    visitFunctionBody: function(tree) {},
	    visitBlock: function(tree) {},
	    visitClassDeclaration: function(tree) {},
	    visitClassExpression: function(tree) {},
	    visitModuleElement_: function(element) {
	      switch (element.type) {
	        case MODULE_DECLARATION:
	        case EXPORT_DECLARATION:
	        case IMPORT_DECLARATION:
	          this.visitAny(element);
	      }
	    },
	    visitScript: function(tree) {
	      tree.scriptItemList.forEach(this.visitModuleElement_, this);
	    },
	    visitModule: function(tree) {
	      tree.scriptItemList.forEach(this.visitModuleElement_, this);
	    },
	    reportError: function(tree, message) {
	      this.reporter.reportError(tree.location.start, message);
	    }
	  }, {}, ParseTreeVisitor);
	  return {get ModuleVisitor() {
	      return ModuleVisitor;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/module/ExportVisitor.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/module/ExportVisitor.js";
	  var ModuleVisitor = System.get("traceur@0.0.87/src/codegeneration/module/ModuleVisitor.js").ModuleVisitor;
	  var assert = System.get("traceur@0.0.87/src/util/assert.js").assert;
	  var ExportVisitor = function ExportVisitor(reporter, loader, moduleSymbol) {
	    $traceurRuntime.superConstructor($ExportVisitor).call(this, reporter, loader, moduleSymbol);
	    this.inExport_ = false;
	    this.moduleSpecifier = null;
	  };
	  var $ExportVisitor = ExportVisitor;
	  ($traceurRuntime.createClass)(ExportVisitor, {
	    addExport_: function(name, tree) {
	      assert(typeof name === 'string');
	      if (this.inExport_)
	        this.addExport(name, tree);
	    },
	    addExport: function(name, tree) {
	      var moduleSymbol = this.moduleSymbol;
	      var existingExport = moduleSymbol.getExport(name);
	      if (existingExport) {
	        this.reportError(tree, ("Duplicate export. '" + name + "' was previously ") + ("exported at " + existingExport.location.start));
	      } else {
	        moduleSymbol.addExport(name, tree);
	      }
	    },
	    visitClassDeclaration: function(tree) {
	      this.addExport_(tree.name.identifierToken.value, tree);
	    },
	    visitExportDeclaration: function(tree) {
	      this.inExport_ = true;
	      this.visitAny(tree.declaration);
	      this.inExport_ = false;
	    },
	    visitNamedExport: function(tree) {
	      this.moduleSpecifier = tree.moduleSpecifier;
	      this.visitAny(tree.specifierSet);
	      this.moduleSpecifier = null;
	    },
	    visitExportDefault: function(tree) {
	      this.addExport_('default', tree);
	    },
	    visitExportSpecifier: function(tree) {
	      this.addExport_((tree.rhs || tree.lhs).value, tree);
	    },
	    visitExportStar: function(tree) {
	      var $__2 = this;
	      var name = this.moduleSpecifier.token.processedValue;
	      var exportList = this.getExportsListForModuleSpecifier(name);
	      if (exportList) {
	        exportList.getExports().forEach((function(name) {
	          return $__2.addExport(name, tree);
	        }));
	      }
	    },
	    visitFunctionDeclaration: function(tree) {
	      this.addExport_(tree.name.getStringValue(), tree);
	    },
	    visitModuleDeclaration: function(tree) {
	      var name = tree.binding.getStringValue();
	      this.addExport_(name, tree);
	    },
	    visitVariableDeclaration: function(tree) {
	      this.addExport_(tree.lvalue.getStringValue(), tree);
	    }
	  }, {}, ModuleVisitor);
	  return {get ExportVisitor() {
	      return ExportVisitor;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/module/DirectExportVisitor.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/module/DirectExportVisitor.js";
	  var ExportVisitor = System.get("traceur@0.0.87/src/codegeneration/module/ExportVisitor.js").ExportVisitor;
	  var DirectExportVisitor = function DirectExportVisitor() {
	    $traceurRuntime.superConstructor($DirectExportVisitor).call(this, null, null, null);
	    this.namedExports = [];
	    this.starExports = [];
	  };
	  var $DirectExportVisitor = DirectExportVisitor;
	  ($traceurRuntime.createClass)(DirectExportVisitor, {
	    addExport: function(name, tree) {
	      this.namedExports.push({
	        name: name,
	        tree: tree,
	        moduleSpecifier: this.moduleSpecifier
	      });
	    },
	    visitExportStar: function(tree) {
	      this.starExports.push(this.moduleSpecifier);
	    },
	    hasExports: function() {
	      return this.namedExports.length !== 0 || this.starExports.length !== 0;
	    }
	  }, {}, ExportVisitor);
	  return {get DirectExportVisitor() {
	      return DirectExportVisitor;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/ModuleTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/ModuleTransformer.js";
	  var $__0 = Object.freeze(Object.defineProperties(["var __moduleName = ", ";"], {raw: {value: Object.freeze(["var __moduleName = ", ";"])}})),
	      $__1 = Object.freeze(Object.defineProperties(["function(require) {\n        ", "\n      }"], {raw: {value: Object.freeze(["function(require) {\n        ", "\n      }"])}})),
	      $__2 = Object.freeze(Object.defineProperties(["function() {\n        ", "\n      }"], {raw: {value: Object.freeze(["function() {\n        ", "\n      }"])}})),
	      $__3 = Object.freeze(Object.defineProperties(["$traceurRuntime.ModuleStore.getAnonymousModule(\n              ", ");"], {raw: {value: Object.freeze(["$traceurRuntime.ModuleStore.getAnonymousModule(\n              ", ");"])}})),
	      $__4 = Object.freeze(Object.defineProperties(["System.registerModule(", ", [], ", ");"], {raw: {value: Object.freeze(["System.registerModule(", ", [], ", ");"])}})),
	      $__5 = Object.freeze(Object.defineProperties(["get ", "() { return ", "; }"], {raw: {value: Object.freeze(["get ", "() { return ", "; }"])}})),
	      $__6 = Object.freeze(Object.defineProperties(["$traceurRuntime.exportStar(", ")"], {raw: {value: Object.freeze(["$traceurRuntime.exportStar(", ")"])}})),
	      $__7 = Object.freeze(Object.defineProperties(["return ", ""], {raw: {value: Object.freeze(["return ", ""])}})),
	      $__8 = Object.freeze(Object.defineProperties(["var $__default = ", ""], {raw: {value: Object.freeze(["var $__default = ", ""])}})),
	      $__9 = Object.freeze(Object.defineProperties(["var $__default = ", ""], {raw: {value: Object.freeze(["var $__default = ", ""])}})),
	      $__10 = Object.freeze(Object.defineProperties(["System.get(", ")"], {raw: {value: Object.freeze(["System.get(", ")"])}}));
	  var $__11 = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js"),
	      AnonBlock = $__11.AnonBlock,
	      BindingElement = $__11.BindingElement,
	      EmptyStatement = $__11.EmptyStatement,
	      LiteralPropertyName = $__11.LiteralPropertyName,
	      ObjectPattern = $__11.ObjectPattern,
	      ObjectPatternField = $__11.ObjectPatternField,
	      Script = $__11.Script;
	  var DestructuringTransformer = System.get("traceur@0.0.87/src/codegeneration/DestructuringTransformer.js").DestructuringTransformer;
	  var DirectExportVisitor = System.get("traceur@0.0.87/src/codegeneration/module/DirectExportVisitor.js").DirectExportVisitor;
	  var TempVarTransformer = System.get("traceur@0.0.87/src/codegeneration/TempVarTransformer.js").TempVarTransformer;
	  var $__15 = System.get("traceur@0.0.87/src/syntax/trees/ParseTreeType.js"),
	      CLASS_DECLARATION = $__15.CLASS_DECLARATION,
	      EXPORT_DEFAULT = $__15.EXPORT_DEFAULT,
	      EXPORT_SPECIFIER = $__15.EXPORT_SPECIFIER,
	      FUNCTION_DECLARATION = $__15.FUNCTION_DECLARATION,
	      IMPORT_SPECIFIER_SET = $__15.IMPORT_SPECIFIER_SET;
	  var VAR = System.get("traceur@0.0.87/src/syntax/TokenType.js").VAR;
	  var assert = System.get("traceur@0.0.87/src/util/assert.js").assert;
	  var $__18 = System.get("traceur@0.0.87/src/codegeneration/ParseTreeFactory.js"),
	      createArgumentList = $__18.createArgumentList,
	      createExpressionStatement = $__18.createExpressionStatement,
	      createIdentifierExpression = $__18.createIdentifierExpression,
	      createIdentifierToken = $__18.createIdentifierToken,
	      createMemberExpression = $__18.createMemberExpression,
	      createObjectLiteralExpression = $__18.createObjectLiteralExpression,
	      createUseStrictDirective = $__18.createUseStrictDirective,
	      createVariableStatement = $__18.createVariableStatement;
	  var $__19 = System.get("traceur@0.0.87/src/codegeneration/PlaceholderParser.js"),
	      parseExpression = $__19.parseExpression,
	      parsePropertyDefinition = $__19.parsePropertyDefinition,
	      parseStatement = $__19.parseStatement,
	      parseStatements = $__19.parseStatements;
	  var DestructImportVarStatement = function DestructImportVarStatement() {
	    $traceurRuntime.superConstructor($DestructImportVarStatement).apply(this, arguments);
	    ;
	  };
	  var $DestructImportVarStatement = DestructImportVarStatement;
	  ($traceurRuntime.createClass)(DestructImportVarStatement, {createGuardedExpression: function(tree) {
	      return tree;
	    }}, {}, DestructuringTransformer);
	  var ModuleTransformer = function ModuleTransformer(identifierGenerator, reporter, options) {
	    $traceurRuntime.superConstructor($ModuleTransformer).call(this, identifierGenerator);
	    this.options_ = options;
	    this.exportVisitor_ = new DirectExportVisitor();
	    this.moduleSpecifierKind_ = null;
	    this.moduleName = null;
	  };
	  var $ModuleTransformer = ModuleTransformer;
	  ($traceurRuntime.createClass)(ModuleTransformer, {
	    getTempVarNameForModuleName: function(moduleName) {
	      return '$__' + moduleName.replace(/[^a-zA-Z0-9$]/g, function(c) {
	        return '_' + c.charCodeAt(0) + '_';
	      }) + '__';
	    },
	    getModuleName: function(tree) {
	      return tree.moduleName;
	    },
	    getTempVarNameForModuleSpecifier: function(moduleSpecifier) {
	      var normalizedName = System.normalize(moduleSpecifier.token.processedValue, this.moduleName);
	      return this.getTempVarNameForModuleName(normalizedName);
	    },
	    transformScript: function(tree) {
	      this.moduleName = tree.moduleName;
	      return $traceurRuntime.superGet(this, $ModuleTransformer.prototype, "transformScript").call(this, tree);
	    },
	    transformModule: function(tree) {
	      this.moduleName = this.getModuleName(tree);
	      this.pushTempScope();
	      var statements = this.transformList(tree.scriptItemList);
	      statements = this.appendExportStatement(statements);
	      this.popTempScope();
	      statements = this.wrapModule(this.moduleProlog().concat(statements));
	      return new Script(tree.location, statements);
	    },
	    moduleProlog: function() {
	      var statements = [createUseStrictDirective()];
	      if (this.moduleName) {
	        statements.push(parseStatement($__0, this.moduleName));
	      }
	      return statements;
	    },
	    wrapModule: function(statements) {
	      var functionExpression;
	      if (this.options_.transformOptions.require) {
	        functionExpression = parseExpression($__1, statements);
	      } else {
	        functionExpression = parseExpression($__2, statements);
	      }
	      if (this.moduleName === null) {
	        return parseStatements($__3, functionExpression);
	      }
	      return parseStatements($__4, this.moduleName, functionExpression);
	    },
	    getGetterExport: function($__22) {
	      var $__23 = $__22,
	          name = $__23.name,
	          tree = $__23.tree,
	          moduleSpecifier = $__23.moduleSpecifier;
	      var returnExpression;
	      switch (tree.type) {
	        case EXPORT_DEFAULT:
	          returnExpression = createIdentifierExpression('$__default');
	          break;
	        case EXPORT_SPECIFIER:
	          if (moduleSpecifier) {
	            var idName = this.getTempVarNameForModuleSpecifier(moduleSpecifier);
	            returnExpression = createMemberExpression(idName, tree.lhs);
	          } else {
	            returnExpression = createIdentifierExpression(tree.lhs);
	          }
	          break;
	        default:
	          returnExpression = createIdentifierExpression(name);
	          break;
	      }
	      return parsePropertyDefinition($__5, name, returnExpression);
	    },
	    getExportProperties: function() {
	      var $__20 = this;
	      return this.exportVisitor_.namedExports.map((function(exp) {
	        return $__20.getGetterExport(exp);
	      })).concat(this.exportVisitor_.namedExports.map((function(exp) {
	        return $__20.getSetterExport(exp);
	      }))).filter((function(e) {
	        return e;
	      }));
	    },
	    getSetterExport: function($__22) {
	      var $__23 = $__22,
	          name = $__23.name,
	          tree = $__23.tree,
	          moduleSpecifier = $__23.moduleSpecifier;
	      return null;
	    },
	    getExportObject: function() {
	      var $__20 = this;
	      var exportObject = createObjectLiteralExpression(this.getExportProperties());
	      if (this.exportVisitor_.starExports.length) {
	        var starExports = this.exportVisitor_.starExports;
	        var starIdents = starExports.map((function(moduleSpecifier) {
	          return createIdentifierExpression($__20.getTempVarNameForModuleSpecifier(moduleSpecifier));
	        }));
	        var args = createArgumentList($traceurRuntime.spread([exportObject], starIdents));
	        return parseExpression($__6, args);
	      }
	      return exportObject;
	    },
	    appendExportStatement: function(statements) {
	      var exportObject = this.getExportObject();
	      statements.push(parseStatement($__7, exportObject));
	      return statements;
	    },
	    hasExports: function() {
	      return this.exportVisitor_.hasExports();
	    },
	    hasStarExports: function() {
	      return this.exportVisitor_.starExports.length > 0;
	    },
	    transformExportDeclaration: function(tree) {
	      this.exportVisitor_.visitAny(tree);
	      return this.transformAny(tree.declaration);
	    },
	    transformExportDefault: function(tree) {
	      switch (tree.expression.type) {
	        case CLASS_DECLARATION:
	        case FUNCTION_DECLARATION:
	          var nameBinding = tree.expression.name;
	          var name = createIdentifierExpression(nameBinding.identifierToken);
	          return new AnonBlock(null, [tree.expression, parseStatement($__8, name)]);
	      }
	      return parseStatement($__9, tree.expression);
	    },
	    transformNamedExport: function(tree) {
	      var moduleSpecifier = tree.moduleSpecifier;
	      if (moduleSpecifier) {
	        var expression = this.transformAny(moduleSpecifier);
	        var idName = this.getTempVarNameForModuleSpecifier(moduleSpecifier);
	        return createVariableStatement(VAR, idName, expression);
	      }
	      return new EmptyStatement(null);
	    },
	    transformModuleSpecifier: function(tree) {
	      assert(this.moduleName);
	      var name = tree.token.processedValue;
	      var normalizedName = System.normalize(name, this.moduleName);
	      return parseExpression($__10, normalizedName);
	    },
	    transformModuleDeclaration: function(tree) {
	      this.moduleSpecifierKind_ = 'module';
	      var initializer = this.transformAny(tree.expression);
	      var bindingIdentifier = tree.binding.binding;
	      return createVariableStatement(VAR, bindingIdentifier, initializer);
	    },
	    transformImportedBinding: function(tree) {
	      var bindingElement = new BindingElement(tree.location, tree.binding, null);
	      var name = new LiteralPropertyName(null, createIdentifierToken('default'));
	      return new ObjectPattern(null, [new ObjectPatternField(null, name, bindingElement)]);
	    },
	    transformImportDeclaration: function(tree) {
	      this.moduleSpecifierKind_ = 'import';
	      if (!tree.importClause || (tree.importClause.type === IMPORT_SPECIFIER_SET && tree.importClause.specifiers.length === 0)) {
	        return createExpressionStatement(this.transformAny(tree.moduleSpecifier));
	      }
	      var binding = this.transformAny(tree.importClause);
	      var initializer = this.transformAny(tree.moduleSpecifier);
	      var varStatement = createVariableStatement(VAR, binding, initializer);
	      if (this.options_.transformOptions.destructuring || !this.options_.parseOptions.destructuring) {
	        var destructuringTransformer = new DestructImportVarStatement(this.identifierGenerator);
	        varStatement = varStatement.transform(destructuringTransformer);
	      }
	      return varStatement;
	    },
	    transformImportSpecifierSet: function(tree) {
	      var fields = this.transformList(tree.specifiers);
	      return new ObjectPattern(null, fields);
	    },
	    transformImportSpecifier: function(tree) {
	      var binding = tree.binding.binding;
	      var bindingElement = new BindingElement(binding.location, binding, null);
	      if (tree.name) {
	        var name = new LiteralPropertyName(tree.name.location, tree.name);
	        return new ObjectPatternField(tree.location, name, bindingElement);
	      }
	      return bindingElement;
	    }
	  }, {}, TempVarTransformer);
	  return {get ModuleTransformer() {
	      return ModuleTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/globalThis.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/globalThis.js";
	  var $__0 = Object.freeze(Object.defineProperties(["Reflect.global"], {raw: {value: Object.freeze(["Reflect.global"])}}));
	  var parseExpression = System.get("traceur@0.0.87/src/codegeneration/PlaceholderParser.js").parseExpression;
	  var expr;
	  function globalThis() {
	    if (!expr)
	      expr = parseExpression($__0);
	    return expr;
	  }
	  var $__default = globalThis;
	  return {get default() {
	      return $__default;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/FindInFunctionScope.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/FindInFunctionScope.js";
	  var FindVisitor = System.get("traceur@0.0.87/src/codegeneration/FindVisitor.js").FindVisitor;
	  var FindInFunctionScope = function FindInFunctionScope() {
	    $traceurRuntime.superConstructor($FindInFunctionScope).apply(this, arguments);
	    ;
	  };
	  var $FindInFunctionScope = FindInFunctionScope;
	  ($traceurRuntime.createClass)(FindInFunctionScope, {
	    visitFunctionDeclaration: function(tree) {},
	    visitFunctionExpression: function(tree) {},
	    visitSetAccessor: function(tree) {},
	    visitGetAccessor: function(tree) {},
	    visitPropertyMethodAssignment: function(tree) {}
	  }, {}, FindVisitor);
	  return {get FindInFunctionScope() {
	      return FindInFunctionScope;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/scopeContainsThis.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/scopeContainsThis.js";
	  var FindInFunctionScope = System.get("traceur@0.0.87/src/codegeneration/FindInFunctionScope.js").FindInFunctionScope;
	  var FindThis = function FindThis() {
	    $traceurRuntime.superConstructor($FindThis).apply(this, arguments);
	    ;
	  };
	  var $FindThis = FindThis;
	  ($traceurRuntime.createClass)(FindThis, {visitThisExpression: function(tree) {
	      this.found = true;
	    }}, {}, FindInFunctionScope);
	  function scopeContainsThis(tree) {
	    var visitor = new FindThis();
	    visitor.visitAny(tree);
	    return visitor.found;
	  }
	  var $__default = scopeContainsThis;
	  return {get default() {
	      return $__default;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/AmdTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/AmdTransformer.js";
	  var $__0 = Object.freeze(Object.defineProperties(["__esModule: true"], {raw: {value: Object.freeze(["__esModule: true"])}})),
	      $__1 = Object.freeze(Object.defineProperties(["if (!", " || !", ".__esModule)\n            ", " = {default: ", "}"], {raw: {value: Object.freeze(["if (!", " || !", ".__esModule)\n            ", " = {default: ", "}"])}})),
	      $__2 = Object.freeze(Object.defineProperties(["function(", ") {\n      ", "\n    }"], {raw: {value: Object.freeze(["function(", ") {\n      ", "\n    }"])}})),
	      $__3 = Object.freeze(Object.defineProperties(["", ".bind(", ")"], {raw: {value: Object.freeze(["", ".bind(", ")"])}})),
	      $__4 = Object.freeze(Object.defineProperties(["define(", ", ", ", ", ");"], {raw: {value: Object.freeze(["define(", ", ", ", ", ");"])}})),
	      $__5 = Object.freeze(Object.defineProperties(["define(", ", ", ");"], {raw: {value: Object.freeze(["define(", ", ", ");"])}}));
	  var ModuleTransformer = System.get("traceur@0.0.87/src/codegeneration/ModuleTransformer.js").ModuleTransformer;
	  var $__7 = System.get("traceur@0.0.87/src/codegeneration/ParseTreeFactory.js"),
	      createIdentifierExpression = $__7.createIdentifierExpression,
	      createStringLiteralToken = $__7.createStringLiteralToken;
	  var globalThis = System.get("traceur@0.0.87/src/codegeneration/globalThis.js").default;
	  var $__9 = System.get("traceur@0.0.87/src/codegeneration/PlaceholderParser.js"),
	      parseExpression = $__9.parseExpression,
	      parseStatement = $__9.parseStatement,
	      parseStatements = $__9.parseStatements,
	      parsePropertyDefinition = $__9.parsePropertyDefinition;
	  var scopeContainsThis = System.get("traceur@0.0.87/src/codegeneration/scopeContainsThis.js").default;
	  var AmdTransformer = function AmdTransformer(identifierGenerator, reporter) {
	    var options = arguments[2];
	    $traceurRuntime.superConstructor($AmdTransformer).call(this, identifierGenerator, reporter, options);
	    this.dependencies = [];
	    this.anonymousModule = options && !options.bundle && options.moduleName !== true;
	  };
	  var $AmdTransformer = AmdTransformer;
	  ($traceurRuntime.createClass)(AmdTransformer, {
	    getModuleName: function(tree) {
	      if (this.anonymousModule)
	        return null;
	      return tree.moduleName;
	    },
	    getExportProperties: function() {
	      var properties = $traceurRuntime.superGet(this, $AmdTransformer.prototype, "getExportProperties").call(this);
	      if (this.exportVisitor_.hasExports())
	        properties.push(parsePropertyDefinition($__0));
	      return properties;
	    },
	    moduleProlog: function() {
	      var locals = this.dependencies.map((function(dep) {
	        var local = createIdentifierExpression(dep.local);
	        return parseStatement($__1, local, local, local, local);
	      }));
	      return $traceurRuntime.superGet(this, $AmdTransformer.prototype, "moduleProlog").call(this).concat(locals);
	    },
	    wrapModule: function(statements) {
	      var depPaths = this.dependencies.map((function(dep) {
	        return dep.path;
	      }));
	      var depLocals = this.dependencies.map((function(dep) {
	        return dep.local;
	      }));
	      var hasTopLevelThis = statements.some(scopeContainsThis);
	      var func = parseExpression($__2, depLocals, statements);
	      if (hasTopLevelThis)
	        func = parseExpression($__3, func, globalThis());
	      if (this.moduleName) {
	        return parseStatements($__4, this.moduleName, depPaths, func);
	      } else {
	        return parseStatements($__5, depPaths, func);
	      }
	    },
	    transformModuleSpecifier: function(tree) {
	      var localName = this.getTempIdentifier();
	      var value = tree.token.processedValue;
	      var stringLiteral = createStringLiteralToken(value.replace(/\.js$/, ''));
	      this.dependencies.push({
	        path: stringLiteral,
	        local: localName
	      });
	      return createIdentifierExpression(localName);
	    }
	  }, {}, ModuleTransformer);
	  return {get AmdTransformer() {
	      return AmdTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/staticsemantics/PropName.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/staticsemantics/PropName.js";
	  var $__0 = System.get("traceur@0.0.87/src/syntax/trees/ParseTreeType.js"),
	      COMPUTED_PROPERTY_NAME = $__0.COMPUTED_PROPERTY_NAME,
	      GET_ACCESSOR = $__0.GET_ACCESSOR,
	      LITERAL_PROPERTY_NAME = $__0.LITERAL_PROPERTY_NAME,
	      PROPERTY_METHOD_ASSIGNMENT = $__0.PROPERTY_METHOD_ASSIGNMENT,
	      PROPERTY_NAME_ASSIGNMENT = $__0.PROPERTY_NAME_ASSIGNMENT,
	      PROPERTY_NAME_SHORTHAND = $__0.PROPERTY_NAME_SHORTHAND,
	      SET_ACCESSOR = $__0.SET_ACCESSOR;
	  var IDENTIFIER = System.get("traceur@0.0.87/src/syntax/TokenType.js").IDENTIFIER;
	  function propName(tree) {
	    switch (tree.type) {
	      case LITERAL_PROPERTY_NAME:
	        var token = tree.literalToken;
	        if (token.isKeyword() || token.type === IDENTIFIER)
	          return token.toString();
	        return String(tree.literalToken.processedValue);
	      case COMPUTED_PROPERTY_NAME:
	        return '';
	      case PROPERTY_NAME_SHORTHAND:
	        return tree.name.toString();
	      case PROPERTY_METHOD_ASSIGNMENT:
	      case PROPERTY_NAME_ASSIGNMENT:
	      case GET_ACCESSOR:
	      case SET_ACCESSOR:
	        return propName(tree.name);
	    }
	  }
	  return {get propName() {
	      return propName;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/AnnotationsTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/AnnotationsTransformer.js";
	  var $__0 = Object.freeze(Object.defineProperties(["Object.getOwnPropertyDescriptor(", ")"], {raw: {value: Object.freeze(["Object.getOwnPropertyDescriptor(", ")"])}})),
	      $__1 = Object.freeze(Object.defineProperties(["Object.defineProperty(", ", ", ",\n        {get: function() {return ", "}});"], {raw: {value: Object.freeze(["Object.defineProperty(", ", ", ",\n        {get: function() {return ", "}});"])}}));
	  var ParseTreeTransformer = System.get("traceur@0.0.87/src/codegeneration/ParseTreeTransformer.js").ParseTreeTransformer;
	  var CONSTRUCTOR = System.get("traceur@0.0.87/src/syntax/PredefinedName.js").CONSTRUCTOR;
	  var STRING = System.get("traceur@0.0.87/src/syntax/TokenType.js").STRING;
	  var $__5 = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js"),
	      AnonBlock = $__5.AnonBlock,
	      ClassDeclaration = $__5.ClassDeclaration,
	      ExportDeclaration = $__5.ExportDeclaration,
	      FormalParameter = $__5.FormalParameter,
	      FunctionDeclaration = $__5.FunctionDeclaration,
	      GetAccessor = $__5.GetAccessor,
	      LiteralExpression = $__5.LiteralExpression,
	      PropertyMethodAssignment = $__5.PropertyMethodAssignment,
	      SetAccessor = $__5.SetAccessor;
	  var propName = System.get("traceur@0.0.87/src/staticsemantics/PropName.js").propName;
	  var $__7 = System.get("traceur@0.0.87/src/codegeneration/ParseTreeFactory.js"),
	      createArgumentList = $__7.createArgumentList,
	      createArrayLiteralExpression = $__7.createArrayLiteralExpression,
	      createAssignmentStatement = $__7.createAssignmentStatement,
	      createIdentifierExpression = $__7.createIdentifierExpression,
	      createMemberExpression = $__7.createMemberExpression,
	      createNewExpression = $__7.createNewExpression,
	      createStringLiteralToken = $__7.createStringLiteralToken;
	  var $__8 = System.get("traceur@0.0.87/src/codegeneration/PlaceholderParser.js"),
	      parseExpression = $__8.parseExpression,
	      parseStatement = $__8.parseStatement;
	  var AnnotationsScope = function AnnotationsScope() {
	    this.className = null;
	    this.isExport = false;
	    this.constructorParameters = [];
	    this.annotations = [];
	    this.metadata = [];
	  };
	  ($traceurRuntime.createClass)(AnnotationsScope, {get inClassScope() {
	      return this.className !== null;
	    }}, {});
	  var AnnotationsTransformer = function AnnotationsTransformer() {
	    $traceurRuntime.superConstructor($AnnotationsTransformer).call(this);
	    this.stack_ = [new AnnotationsScope()];
	  };
	  var $AnnotationsTransformer = AnnotationsTransformer;
	  ($traceurRuntime.createClass)(AnnotationsTransformer, {
	    transformExportDeclaration: function(tree) {
	      var $__11;
	      var scope = this.pushAnnotationScope_();
	      scope.isExport = true;
	      ($__11 = scope.annotations).push.apply($__11, $traceurRuntime.spread(tree.annotations));
	      var declaration = this.transformAny(tree.declaration);
	      if (declaration !== tree.declaration || tree.annotations.length > 0)
	        tree = new ExportDeclaration(tree.location, declaration, []);
	      return this.appendMetadata_(tree);
	    },
	    transformClassDeclaration: function(tree) {
	      var $__11,
	          $__12;
	      var elementsChanged = false;
	      var exportAnnotations = this.scope.isExport ? this.scope.annotations : [];
	      var scope = this.pushAnnotationScope_();
	      scope.className = tree.name;
	      ($__11 = scope.annotations).push.apply($__11, $traceurRuntime.spread(exportAnnotations, tree.annotations));
	      tree = $traceurRuntime.superGet(this, $AnnotationsTransformer.prototype, "transformClassDeclaration").call(this, tree);
	      ($__12 = scope.metadata).unshift.apply($__12, $traceurRuntime.spread(this.transformMetadata_(createIdentifierExpression(tree.name), scope.annotations, scope.constructorParameters)));
	      if (tree.annotations.length > 0) {
	        tree = new ClassDeclaration(tree.location, tree.name, tree.superClass, tree.elements, [], null);
	      }
	      return this.appendMetadata_(tree);
	    },
	    transformFunctionDeclaration: function(tree) {
	      var $__11,
	          $__12;
	      var exportAnnotations = this.scope.isExport ? this.scope.annotations : [];
	      var scope = this.pushAnnotationScope_();
	      ($__11 = scope.annotations).push.apply($__11, $traceurRuntime.spread(exportAnnotations, tree.annotations));
	      ($__12 = scope.metadata).push.apply($__12, $traceurRuntime.spread(this.transformMetadata_(createIdentifierExpression(tree.name), scope.annotations, tree.parameterList.parameters)));
	      tree = $traceurRuntime.superGet(this, $AnnotationsTransformer.prototype, "transformFunctionDeclaration").call(this, tree);
	      if (tree.annotations.length > 0) {
	        tree = new FunctionDeclaration(tree.location, tree.name, tree.functionKind, tree.parameterList, tree.typeAnnotation, [], tree.body);
	      }
	      return this.appendMetadata_(tree);
	    },
	    transformFormalParameter: function(tree) {
	      if (tree.annotations.length > 0) {
	        tree = new FormalParameter(tree.location, tree.parameter, tree.typeAnnotation, []);
	      }
	      return $traceurRuntime.superGet(this, $AnnotationsTransformer.prototype, "transformFormalParameter").call(this, tree);
	    },
	    transformGetAccessor: function(tree) {
	      var $__11;
	      if (!this.scope.inClassScope)
	        return $traceurRuntime.superGet(this, $AnnotationsTransformer.prototype, "transformGetAccessor").call(this, tree);
	      ($__11 = this.scope.metadata).push.apply($__11, $traceurRuntime.spread(this.transformMetadata_(this.transformAccessor_(tree, this.scope.className, 'get'), tree.annotations, [])));
	      if (tree.annotations.length > 0) {
	        tree = new GetAccessor(tree.location, tree.isStatic, tree.name, tree.typeAnnotation, [], tree.body);
	      }
	      return $traceurRuntime.superGet(this, $AnnotationsTransformer.prototype, "transformGetAccessor").call(this, tree);
	    },
	    transformSetAccessor: function(tree) {
	      var $__11;
	      if (!this.scope.inClassScope)
	        return $traceurRuntime.superGet(this, $AnnotationsTransformer.prototype, "transformSetAccessor").call(this, tree);
	      ($__11 = this.scope.metadata).push.apply($__11, $traceurRuntime.spread(this.transformMetadata_(this.transformAccessor_(tree, this.scope.className, 'set'), tree.annotations, tree.parameterList.parameters)));
	      var parameterList = this.transformAny(tree.parameterList);
	      if (parameterList !== tree.parameterList || tree.annotations.length > 0) {
	        tree = new SetAccessor(tree.location, tree.isStatic, tree.name, parameterList, [], tree.body);
	      }
	      return $traceurRuntime.superGet(this, $AnnotationsTransformer.prototype, "transformSetAccessor").call(this, tree);
	    },
	    transformPropertyMethodAssignment: function(tree) {
	      var $__11,
	          $__12;
	      if (!this.scope.inClassScope)
	        return $traceurRuntime.superGet(this, $AnnotationsTransformer.prototype, "transformPropertyMethodAssignment").call(this, tree);
	      if (!tree.isStatic && propName(tree) === CONSTRUCTOR) {
	        ($__11 = this.scope.annotations).push.apply($__11, $traceurRuntime.spread(tree.annotations));
	        this.scope.constructorParameters = tree.parameterList.parameters;
	      } else {
	        ($__12 = this.scope.metadata).push.apply($__12, $traceurRuntime.spread(this.transformMetadata_(this.transformPropertyMethod_(tree, this.scope.className), tree.annotations, tree.parameterList.parameters)));
	      }
	      var parameterList = this.transformAny(tree.parameterList);
	      if (parameterList !== tree.parameterList || tree.annotations.length > 0) {
	        tree = new PropertyMethodAssignment(tree.location, tree.isStatic, tree.functionKind, tree.name, parameterList, tree.typeAnnotation, [], tree.body, tree.debugName);
	      }
	      return $traceurRuntime.superGet(this, $AnnotationsTransformer.prototype, "transformPropertyMethodAssignment").call(this, tree);
	    },
	    appendMetadata_: function(tree) {
	      var $__11;
	      var metadata = this.stack_.pop().metadata;
	      if (metadata.length > 0) {
	        if (this.scope.isExport) {
	          ($__11 = this.scope.metadata).push.apply($__11, $traceurRuntime.spread(metadata));
	        } else {
	          tree = new AnonBlock(null, $traceurRuntime.spread([tree], metadata));
	        }
	      }
	      return tree;
	    },
	    transformClassReference_: function(tree, className) {
	      var parent = createIdentifierExpression(className);
	      if (!tree.isStatic)
	        parent = createMemberExpression(parent, 'prototype');
	      return parent;
	    },
	    transformPropertyMethod_: function(tree, className) {
	      return createMemberExpression(this.transformClassReference_(tree, className), tree.name.literalToken);
	    },
	    transformAccessor_: function(tree, className, accessor) {
	      var args = createArgumentList([this.transformClassReference_(tree, className), this.createLiteralStringExpression_(tree.name)]);
	      var descriptor = parseExpression($__0, args);
	      return createMemberExpression(descriptor, accessor);
	    },
	    transformParameters_: function(parameters) {
	      var $__9 = this;
	      var hasParameterMetadata = false;
	      parameters = parameters.map((function(param) {
	        var $__11;
	        var metadata = [];
	        if (param.typeAnnotation)
	          metadata.push($__9.transformAny(param.typeAnnotation));
	        if (param.annotations && param.annotations.length > 0)
	          ($__11 = metadata).push.apply($__11, $traceurRuntime.spread($__9.transformAnnotations_(param.annotations)));
	        if (metadata.length > 0) {
	          hasParameterMetadata = true;
	          return createArrayLiteralExpression(metadata);
	        }
	        return createArrayLiteralExpression([]);
	      }));
	      return hasParameterMetadata ? parameters : [];
	    },
	    transformAnnotations_: function(annotations) {
	      return annotations.map((function(annotation) {
	        return createNewExpression(annotation.name, annotation.args);
	      }));
	    },
	    transformMetadata_: function(target, annotations, parameters) {
	      var metadataStatements = [];
	      if (annotations !== null) {
	        annotations = this.transformAnnotations_(annotations);
	        if (annotations.length > 0) {
	          metadataStatements.push(this.createDefinePropertyStatement_(target, 'annotations', createArrayLiteralExpression(annotations)));
	        }
	      }
	      if (parameters !== null) {
	        parameters = this.transformParameters_(parameters);
	        if (parameters.length > 0) {
	          metadataStatements.push(this.createDefinePropertyStatement_(target, 'parameters', createArrayLiteralExpression(parameters)));
	        }
	      }
	      return metadataStatements;
	    },
	    createDefinePropertyStatement_: function(target, property, value) {
	      return parseStatement($__1, target, property, value);
	    },
	    createLiteralStringExpression_: function(tree) {
	      var token = tree.literalToken;
	      if (tree.literalToken.type !== STRING)
	        token = createStringLiteralToken(tree.literalToken.value);
	      return new LiteralExpression(null, token);
	    },
	    get scope() {
	      return this.stack_[this.stack_.length - 1];
	    },
	    pushAnnotationScope_: function() {
	      var scope = new AnnotationsScope();
	      this.stack_.push(scope);
	      return scope;
	    }
	  }, {}, ParseTreeTransformer);
	  return {get AnnotationsTransformer() {
	      return AnnotationsTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/semantics/VariableBinder.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/semantics/VariableBinder.js";
	  var ScopeChainBuilder = System.get("traceur@0.0.87/src/semantics/ScopeChainBuilder.js").ScopeChainBuilder;
	  function variablesInBlock(tree) {
	    var includeFunctionScope = arguments[1];
	    var builder = new ScopeChainBuilder(null);
	    builder.visitAny(tree);
	    var scope = builder.getScopeForTree(tree);
	    var names = scope.getLexicalBindingNames();
	    if (!includeFunctionScope) {
	      return names;
	    }
	    var variableBindingNames = scope.getVariableBindingNames();
	    variableBindingNames.forEach((function(name) {
	      return names.add(name);
	    }));
	    return names;
	  }
	  function variablesInFunction(tree) {
	    var builder = new ScopeChainBuilder(null);
	    builder.visitAny(tree);
	    var scope = builder.getScopeForTree(tree);
	    return scope.getAllBindingNames();
	  }
	  return {
	    get variablesInBlock() {
	      return variablesInBlock;
	    },
	    get variablesInFunction() {
	      return variablesInFunction;
	    }
	  };
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/ScopeTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/ScopeTransformer.js";
	  var $__0 = System.get("traceur@0.0.87/src/syntax/PredefinedName.js"),
	      ARGUMENTS = $__0.ARGUMENTS,
	      THIS = $__0.THIS;
	  var FindInFunctionScope = System.get("traceur@0.0.87/src/codegeneration/FindInFunctionScope.js").FindInFunctionScope;
	  var ParseTreeTransformer = System.get("traceur@0.0.87/src/codegeneration/ParseTreeTransformer.js").ParseTreeTransformer;
	  var StringSet = System.get("traceur@0.0.87/src/util/StringSet.js").StringSet;
	  var VARIABLE_DECLARATION_LIST = System.get("traceur@0.0.87/src/syntax/trees/ParseTreeType.js").VARIABLE_DECLARATION_LIST;
	  var VAR = System.get("traceur@0.0.87/src/syntax/TokenType.js").VAR;
	  var $__6 = System.get("traceur@0.0.87/src/semantics/VariableBinder.js"),
	      variablesInBlock = $__6.variablesInBlock,
	      variablesInFunction = $__6.variablesInFunction;
	  var FindNames = function FindNames(names) {
	    $traceurRuntime.superConstructor($FindNames).call(this);
	    this.names = names;
	  };
	  var $FindNames = FindNames;
	  ($traceurRuntime.createClass)(FindNames, {visitBindingIdentifier: function(tree) {
	      this.names.add(tree.getStringValue());
	    }}, {}, FindInFunctionScope);
	  function getLexicalBindingNames(tree) {
	    var names = new StringSet();
	    if (tree !== null && tree.type === VARIABLE_DECLARATION_LIST && tree.declarationType !== VAR) {
	      var visitor = new FindNames(names);
	      for (var i = 0; i < tree.declarations.length; i++) {
	        visitor.visitAny(tree.declarations[i].lvalue);
	      }
	    }
	    return names;
	  }
	  var ScopeTransformer = function ScopeTransformer(varName) {
	    $traceurRuntime.superConstructor($ScopeTransformer).call(this);
	    this.varName_ = varName;
	  };
	  var $ScopeTransformer = ScopeTransformer;
	  ($traceurRuntime.createClass)(ScopeTransformer, {
	    transformBlock: function(tree) {
	      if (variablesInBlock(tree).has(this.varName_)) {
	        return tree;
	      }
	      return $traceurRuntime.superGet(this, $ScopeTransformer.prototype, "transformBlock").call(this, tree);
	    },
	    sameTreeIfNameInLoopInitializer_: function(tree) {
	      var names = getLexicalBindingNames(tree.initializer);
	      if (names.has(this.varName_)) {
	        return tree;
	      }
	      return null;
	    },
	    transformForStatement: function(tree) {
	      return this.sameTreeIfNameInLoopInitializer_(tree) || $traceurRuntime.superGet(this, $ScopeTransformer.prototype, "transformForStatement").call(this, tree);
	    },
	    transformForInStatement: function(tree) {
	      return this.sameTreeIfNameInLoopInitializer_(tree) || $traceurRuntime.superGet(this, $ScopeTransformer.prototype, "transformForInStatement").call(this, tree);
	    },
	    transformForOfStatement: function(tree) {
	      return this.sameTreeIfNameInLoopInitializer_(tree) || $traceurRuntime.superGet(this, $ScopeTransformer.prototype, "transformForOfStatement").call(this, tree);
	    },
	    transformForOnStatement: function(tree) {
	      return this.sameTreeIfNameInLoopInitializer_(tree) || $traceurRuntime.superGet(this, $ScopeTransformer.prototype, "transformForOnStatement").call(this, tree);
	    },
	    transformThisExpression: function(tree) {
	      if (this.varName_ !== THIS)
	        return tree;
	      return $traceurRuntime.superGet(this, $ScopeTransformer.prototype, "transformThisExpression").call(this, tree);
	    },
	    transformFunctionDeclaration: function(tree) {
	      if (this.getDoNotRecurse(tree))
	        return tree;
	      return $traceurRuntime.superGet(this, $ScopeTransformer.prototype, "transformFunctionDeclaration").call(this, tree);
	    },
	    transformFunctionExpression: function(tree) {
	      if (this.getDoNotRecurse(tree))
	        return tree;
	      return $traceurRuntime.superGet(this, $ScopeTransformer.prototype, "transformFunctionExpression").call(this, tree);
	    },
	    transformPropertyMethodAssignment: function(tree) {
	      if (this.getDoNotRecurse(tree))
	        return tree;
	      return $traceurRuntime.superGet(this, $ScopeTransformer.prototype, "transformPropertyMethodAssignment").call(this, tree);
	    },
	    getDoNotRecurse: function(tree) {
	      return this.varName_ === ARGUMENTS || this.varName_ === THIS || variablesInFunction(tree).has(this.varName_);
	    },
	    transformCatch: function(tree) {
	      if (!tree.binding.isPattern() && this.varName_ === tree.binding.identifierToken.value) {
	        return tree;
	      }
	      return $traceurRuntime.superGet(this, $ScopeTransformer.prototype, "transformCatch").call(this, tree);
	    }
	  }, {}, ParseTreeTransformer);
	  return {get ScopeTransformer() {
	      return ScopeTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/AlphaRenamer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/AlphaRenamer.js";
	  var ScopeTransformer = System.get("traceur@0.0.87/src/codegeneration/ScopeTransformer.js").ScopeTransformer;
	  var $__1 = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js"),
	      FunctionDeclaration = $__1.FunctionDeclaration,
	      FunctionExpression = $__1.FunctionExpression;
	  var THIS = System.get("traceur@0.0.87/src/syntax/PredefinedName.js").THIS;
	  var createIdentifierExpression = System.get("traceur@0.0.87/src/codegeneration/ParseTreeFactory.js").createIdentifierExpression;
	  var AlphaRenamer = function AlphaRenamer(varName, newName) {
	    $traceurRuntime.superConstructor($AlphaRenamer).call(this, varName);
	    this.newName_ = newName;
	  };
	  var $AlphaRenamer = AlphaRenamer;
	  ($traceurRuntime.createClass)(AlphaRenamer, {
	    transformIdentifierExpression: function(tree) {
	      if (this.varName_ === tree.identifierToken.value) {
	        return createIdentifierExpression(this.newName_);
	      } else {
	        return tree;
	      }
	    },
	    transformThisExpression: function(tree) {
	      if (this.varName_ !== THIS)
	        return tree;
	      return createIdentifierExpression(this.newName_);
	    },
	    transformFunctionDeclaration: function(tree) {
	      if (this.varName_ === tree.name) {
	        tree = new FunctionDeclaration(tree.location, this.newName_, tree.functionKind, tree.parameterList, tree.typeAnnotation, tree.annotations, tree.body);
	      }
	      return $traceurRuntime.superGet(this, $AlphaRenamer.prototype, "transformFunctionDeclaration").call(this, tree);
	    },
	    transformFunctionExpression: function(tree) {
	      if (this.varName_ === tree.name) {
	        tree = new FunctionExpression(tree.location, this.newName_, tree.functionKind, tree.parameterList, tree.typeAnnotation, tree.annotations, tree.body);
	      }
	      return $traceurRuntime.superGet(this, $AlphaRenamer.prototype, "transformFunctionExpression").call(this, tree);
	    }
	  }, {rename: function(tree, varName, newName) {
	      return new $AlphaRenamer(varName, newName).transformAny(tree);
	    }}, ScopeTransformer);
	  return {get AlphaRenamer() {
	      return AlphaRenamer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/FindThisOrArguments.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/FindThisOrArguments.js";
	  var ARGUMENTS = System.get("traceur@0.0.87/src/syntax/PredefinedName.js").ARGUMENTS;
	  var FindInFunctionScope = System.get("traceur@0.0.87/src/codegeneration/FindInFunctionScope.js").FindInFunctionScope;
	  var FindThisOrArguments = function FindThisOrArguments() {
	    $traceurRuntime.superConstructor($FindThisOrArguments).call(this);
	    this.foundThis = false;
	    this.foundArguments = false;
	  };
	  var $FindThisOrArguments = FindThisOrArguments;
	  ($traceurRuntime.createClass)(FindThisOrArguments, {
	    visitThisExpression: function(tree) {
	      this.foundThis = true;
	      this.found = this.foundArguments;
	    },
	    visitIdentifierExpression: function(tree) {
	      if (tree.identifierToken.value === ARGUMENTS) {
	        this.foundArguments = true;
	        this.found = this.foundThis;
	      }
	    }
	  }, {}, FindInFunctionScope);
	  return {get FindThisOrArguments() {
	      return FindThisOrArguments;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/alphaRenameThisAndArguments.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/alphaRenameThisAndArguments.js";
	  var $__0 = System.get("traceur@0.0.87/src/syntax/PredefinedName.js"),
	      ARGUMENTS = $__0.ARGUMENTS,
	      THIS = $__0.THIS;
	  var AlphaRenamer = System.get("traceur@0.0.87/src/codegeneration/AlphaRenamer.js").AlphaRenamer;
	  var FindThisOrArguments = System.get("traceur@0.0.87/src/codegeneration/FindThisOrArguments.js").FindThisOrArguments;
	  function alphaRenameThisAndArguments(tempVarTransformer, tree) {
	    var finder = new FindThisOrArguments();
	    finder.visitAny(tree);
	    if (finder.foundArguments) {
	      var argumentsTempName = tempVarTransformer.addTempVarForArguments();
	      tree = AlphaRenamer.rename(tree, ARGUMENTS, argumentsTempName);
	    }
	    if (finder.foundThis) {
	      var thisTempName = tempVarTransformer.addTempVarForThis();
	      tree = AlphaRenamer.rename(tree, THIS, thisTempName);
	    }
	    return tree;
	  }
	  var $__default = alphaRenameThisAndArguments;
	  return {get default() {
	      return $__default;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/ComprehensionTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/ComprehensionTransformer.js";
	  var alphaRenameThisAndArguments = System.get("traceur@0.0.87/src/codegeneration/alphaRenameThisAndArguments.js").default;
	  var FunctionExpression = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js").FunctionExpression;
	  var TempVarTransformer = System.get("traceur@0.0.87/src/codegeneration/TempVarTransformer.js").TempVarTransformer;
	  var $__3 = System.get("traceur@0.0.87/src/syntax/TokenType.js"),
	      LET = $__3.LET,
	      STAR = $__3.STAR,
	      VAR = $__3.VAR;
	  var $__4 = System.get("traceur@0.0.87/src/syntax/trees/ParseTreeType.js"),
	      COMPREHENSION_FOR = $__4.COMPREHENSION_FOR,
	      COMPREHENSION_IF = $__4.COMPREHENSION_IF;
	  var Token = System.get("traceur@0.0.87/src/syntax/Token.js").Token;
	  var $__6 = System.get("traceur@0.0.87/src/codegeneration/ParseTreeFactory.js"),
	      createCallExpression = $__6.createCallExpression,
	      createEmptyParameterList = $__6.createEmptyParameterList,
	      createForOfStatement = $__6.createForOfStatement,
	      createFunctionBody = $__6.createFunctionBody,
	      createIfStatement = $__6.createIfStatement,
	      createParenExpression = $__6.createParenExpression,
	      createVariableDeclarationList = $__6.createVariableDeclarationList;
	  var ComprehensionTransformer = function ComprehensionTransformer(idGenerator, reporter, options) {
	    $traceurRuntime.superConstructor($ComprehensionTransformer).call(this, idGenerator);
	    this.options_ = options;
	  };
	  var $ComprehensionTransformer = ComprehensionTransformer;
	  ($traceurRuntime.createClass)(ComprehensionTransformer, {transformComprehension: function(tree, statement, isGenerator) {
	      var prefix = arguments[3];
	      var suffix = arguments[4];
	      var bindingKind = isGenerator || !this.options_.blockBinding ? VAR : LET;
	      var statements = prefix ? [prefix] : [];
	      for (var i = tree.comprehensionList.length - 1; i >= 0; i--) {
	        var item = tree.comprehensionList[i];
	        switch (item.type) {
	          case COMPREHENSION_IF:
	            var expression = this.transformAny(item.expression);
	            statement = createIfStatement(expression, statement);
	            break;
	          case COMPREHENSION_FOR:
	            var left = this.transformAny(item.left);
	            var iterator = this.transformAny(item.iterator);
	            var initializer = createVariableDeclarationList(bindingKind, left, null);
	            statement = createForOfStatement(initializer, iterator, statement);
	            break;
	          default:
	            throw new Error('Unreachable.');
	        }
	      }
	      statement = alphaRenameThisAndArguments(this, statement);
	      statements.push(statement);
	      if (suffix)
	        statements.push(suffix);
	      var functionKind = isGenerator ? new Token(STAR, null) : null;
	      var func = new FunctionExpression(null, null, functionKind, createEmptyParameterList(), null, [], createFunctionBody(statements));
	      return createParenExpression(createCallExpression(func));
	    }}, {}, TempVarTransformer);
	  return {get ComprehensionTransformer() {
	      return ComprehensionTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/ArrayComprehensionTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/ArrayComprehensionTransformer.js";
	  var $__0 = Object.freeze(Object.defineProperties(["var ", " = 0, ", " = [];"], {raw: {value: Object.freeze(["var ", " = 0, ", " = [];"])}})),
	      $__1 = Object.freeze(Object.defineProperties(["", "[", "++] = ", ";"], {raw: {value: Object.freeze(["", "[", "++] = ", ";"])}})),
	      $__2 = Object.freeze(Object.defineProperties(["return ", ";"], {raw: {value: Object.freeze(["return ", ";"])}}));
	  var ComprehensionTransformer = System.get("traceur@0.0.87/src/codegeneration/ComprehensionTransformer.js").ComprehensionTransformer;
	  var createIdentifierExpression = System.get("traceur@0.0.87/src/codegeneration/ParseTreeFactory.js").createIdentifierExpression;
	  var parseStatement = System.get("traceur@0.0.87/src/codegeneration/PlaceholderParser.js").parseStatement;
	  var ArrayComprehensionTransformer = function ArrayComprehensionTransformer() {
	    $traceurRuntime.superConstructor($ArrayComprehensionTransformer).apply(this, arguments);
	    ;
	  };
	  var $ArrayComprehensionTransformer = ArrayComprehensionTransformer;
	  ($traceurRuntime.createClass)(ArrayComprehensionTransformer, {transformArrayComprehension: function(tree) {
	      this.pushTempScope();
	      var expression = this.transformAny(tree.expression);
	      var index = createIdentifierExpression(this.getTempIdentifier());
	      var result = createIdentifierExpression(this.getTempIdentifier());
	      var tempVarsStatatement = parseStatement($__0, index, result);
	      var statement = parseStatement($__1, result, index, expression);
	      var returnStatement = parseStatement($__2, result);
	      var functionKind = null;
	      result = this.transformComprehension(tree, statement, functionKind, tempVarsStatatement, returnStatement);
	      this.popTempScope();
	      return result;
	    }}, {}, ComprehensionTransformer);
	  return {get ArrayComprehensionTransformer() {
	      return ArrayComprehensionTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/ArrowFunctionTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/ArrowFunctionTransformer.js";
	  var $__0 = System.get("traceur@0.0.87/src/syntax/PredefinedName.js"),
	      ARGUMENTS = $__0.ARGUMENTS,
	      CONSTRUCTOR = $__0.CONSTRUCTOR,
	      THIS = $__0.THIS;
	  var AlphaRenamer = System.get("traceur@0.0.87/src/codegeneration/AlphaRenamer.js").AlphaRenamer;
	  var FunctionExpression = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js").FunctionExpression;
	  var TempVarTransformer = System.get("traceur@0.0.87/src/codegeneration/TempVarTransformer.js").TempVarTransformer;
	  var alphaRenameThisAndArguments = System.get("traceur@0.0.87/src/codegeneration/alphaRenameThisAndArguments.js").default;
	  var $__5 = System.get("traceur@0.0.87/src/syntax/trees/ParseTreeType.js"),
	      FUNCTION_BODY = $__5.FUNCTION_BODY,
	      LITERAL_PROPERTY_NAME = $__5.LITERAL_PROPERTY_NAME;
	  var FindThisOrArguments = System.get("traceur@0.0.87/src/codegeneration/FindThisOrArguments.js").FindThisOrArguments;
	  var $__7 = System.get("traceur@0.0.87/src/codegeneration/ParseTreeFactory.js"),
	      createAssignmentExpression = $__7.createAssignmentExpression,
	      createCommaExpression = $__7.createCommaExpression,
	      createFunctionBody = $__7.createFunctionBody,
	      createIdentifierExpression = $__7.createIdentifierExpression,
	      createParenExpression = $__7.createParenExpression,
	      createReturnStatement = $__7.createReturnStatement,
	      createThisExpression = $__7.createThisExpression;
	  function convertConciseBody(tree) {
	    if (tree.type !== FUNCTION_BODY)
	      return createFunctionBody([createReturnStatement(tree)]);
	    return tree;
	  }
	  var ArrowFunctionTransformer = function ArrowFunctionTransformer(identifierGenerator) {
	    $traceurRuntime.superConstructor($ArrowFunctionTransformer).call(this, identifierGenerator);
	    this.inDerivedClass_ = false;
	    this.inConstructor_ = false;
	  };
	  var $ArrowFunctionTransformer = ArrowFunctionTransformer;
	  ($traceurRuntime.createClass)(ArrowFunctionTransformer, {
	    transformArrowFunctionExpression: function(tree) {
	      if (this.inDerivedClass_ && this.inConstructor_) {
	        return this.transformUsingCommaExpression_(tree);
	      }
	      return this.transformUsingTempVar_(tree);
	    },
	    transformUsingCommaExpression_: function(tree) {
	      var finder = new FindThisOrArguments();
	      var argumentsTempName,
	          thisTempName;
	      finder.visitAny(tree);
	      if (finder.foundArguments) {
	        argumentsTempName = this.addTempVar();
	        tree = AlphaRenamer.rename(tree, ARGUMENTS, argumentsTempName);
	      }
	      if (finder.foundThis) {
	        thisTempName = this.addTempVar();
	        tree = AlphaRenamer.rename(tree, THIS, thisTempName);
	      }
	      var parameterList = this.transformAny(tree.parameterList);
	      var body = this.transformAny(tree.body);
	      body = convertConciseBody(body);
	      var functionExpression = new FunctionExpression(tree.location, null, tree.functionKind, parameterList, null, [], body);
	      var expressions = [];
	      if (argumentsTempName) {
	        expressions.push(createAssignmentExpression(createIdentifierExpression(argumentsTempName), createIdentifierExpression(ARGUMENTS)));
	      }
	      if (thisTempName) {
	        expressions.push(createAssignmentExpression(createIdentifierExpression(thisTempName), createThisExpression()));
	      }
	      if (expressions.length === 0) {
	        return createParenExpression(functionExpression);
	      }
	      expressions.push(functionExpression);
	      return createParenExpression(createCommaExpression(expressions));
	    },
	    transformUsingTempVar_: function(tree) {
	      var alphaRenamed = alphaRenameThisAndArguments(this, tree);
	      var parameterList = this.transformAny(alphaRenamed.parameterList);
	      var body = this.transformAny(alphaRenamed.body);
	      body = convertConciseBody(body);
	      var functionExpression = new FunctionExpression(tree.location, null, tree.functionKind, parameterList, null, [], body);
	      return createParenExpression(functionExpression);
	    },
	    transformClassExpression: function(tree) {
	      var inDerivedClass = this.inDerivedClass_;
	      this.inDerivedClass_ = tree.superClass !== null;
	      var result = $traceurRuntime.superGet(this, $ArrowFunctionTransformer.prototype, "transformClassExpression").call(this, tree);
	      this.inDerivedClass_ = inDerivedClass;
	      return result;
	    },
	    transformClassDeclaration: function(tree) {
	      var inDerivedClass = this.inDerivedClass_;
	      this.inDerivedClass_ = tree.superClass !== null;
	      var result = $traceurRuntime.superGet(this, $ArrowFunctionTransformer.prototype, "transformClassDeclaration").call(this, tree);
	      this.inDerivedClass_ = inDerivedClass;
	      return result;
	    },
	    transformPropertyMethodAssignment: function(tree) {
	      var inConstructor = this.inConstructor_;
	      this.inConstructor_ = !tree.isStatic && tree.functionKind === null && tree.name.type === LITERAL_PROPERTY_NAME && tree.name.literalToken.value === CONSTRUCTOR;
	      var result = $traceurRuntime.superGet(this, $ArrowFunctionTransformer.prototype, "transformPropertyMethodAssignment").call(this, tree);
	      this.inConstructor_ = inConstructor;
	      return result;
	    }
	  }, {transform: function(tempVarTransformer, tree) {
	      tree = alphaRenameThisAndArguments(tempVarTransformer, tree);
	      var body = convertConciseBody(tree.body);
	      return new FunctionExpression(tree.location, null, tree.functionKind, tree.parameterList, null, [], body);
	    }}, TempVarTransformer);
	  return {get ArrowFunctionTransformer() {
	      return ArrowFunctionTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/AsyncGeneratorTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/AsyncGeneratorTransformer.js";
	  var $__0 = Object.freeze(Object.defineProperties(["\n        if (", ".inReturn) {\n          throw undefined;\n        }"], {raw: {value: Object.freeze(["\n        if (", ".inReturn) {\n          throw undefined;\n        }"])}})),
	      $__1 = Object.freeze(Object.defineProperties(["\n        return $traceurRuntime.createAsyncGeneratorInstance(\n            async function (", ") {\n                ", "\n            }, ", ");"], {raw: {value: Object.freeze(["\n        return $traceurRuntime.createAsyncGeneratorInstance(\n            async function (", ") {\n                ", "\n            }, ", ");"])}}));
	  var alphaRenameThisAndArguments = System.get("traceur@0.0.87/src/codegeneration/alphaRenameThisAndArguments.js").default;
	  var $__3 = System.get("traceur@0.0.87/src/codegeneration/ParseTreeFactory.js"),
	      createArgumentList = $__3.createArgumentList,
	      createBlock = $__3.createBlock,
	      createFunctionBody = $__3.createFunctionBody,
	      id = $__3.createIdentifierExpression,
	      createMemberExpression = $__3.createMemberExpression,
	      createThisExpression = $__3.createThisExpression,
	      createVariableDeclaration = $__3.createVariableDeclaration,
	      createVariableDeclarationList = $__3.createVariableDeclarationList,
	      createVariableStatement = $__3.createVariableStatement;
	  var parseStatement = System.get("traceur@0.0.87/src/codegeneration/PlaceholderParser.js").parseStatement;
	  var TempVarTransformer = System.get("traceur@0.0.87/src/codegeneration/TempVarTransformer.js").TempVarTransformer;
	  var $__6 = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js"),
	      AwaitExpression = $__6.AwaitExpression,
	      Block = $__6.Block,
	      CallExpression = $__6.CallExpression,
	      Catch = $__6.Catch;
	  var ARGUMENTS = System.get("traceur@0.0.87/src/syntax/PredefinedName.js").ARGUMENTS;
	  var VAR = System.get("traceur@0.0.87/src/syntax/TokenType.js").VAR;
	  var AsyncGeneratorTransformer = function AsyncGeneratorTransformer(identifierGenerator) {
	    $traceurRuntime.superConstructor($AsyncGeneratorTransformer).call(this, identifierGenerator);
	    this.variableDeclarations_ = [];
	    this.ctx_ = id(this.getTempIdentifier());
	  };
	  var $AsyncGeneratorTransformer = AsyncGeneratorTransformer;
	  ($traceurRuntime.createClass)(AsyncGeneratorTransformer, {
	    transformYieldExpression: function(tree) {
	      var argList = createArgumentList([tree.expression]);
	      if (tree.isYieldFor) {
	        return new AwaitExpression(tree.location, new CallExpression(null, createMemberExpression(this.ctx_, 'yieldFor'), argList));
	      }
	      return new CallExpression(tree.location, createMemberExpression(this.ctx_, 'yield'), argList);
	    },
	    transformCatch: function(tree) {
	      var body = tree.catchBody;
	      body = new Block(body.location, $traceurRuntime.spread([parseStatement($__0, this.ctx_)], body.statements));
	      return new Catch(tree.location, tree.binding, body);
	    },
	    transformFunctionDeclaration: function(tree) {
	      return tree;
	    },
	    transformFunctionExpression: function(tree) {
	      return tree;
	    },
	    transformSetAccessor: function(tree) {
	      return tree;
	    },
	    transformGetAccessor: function(tree) {
	      return tree;
	    },
	    transformPropertyMethodAssignment: function(tree) {
	      return tree;
	    },
	    transformArrowFunctionExpression: function(tree) {
	      return tree;
	    },
	    transformAsyncGeneratorBody_: function(tree, name) {
	      tree = this.transformAny(tree);
	      tree = alphaRenameThisAndArguments(this, tree);
	      var statements = [];
	      if (this.variableDeclarations_.length > 0) {
	        statements.push(createVariableStatement(createVariableDeclarationList(VAR, this.variableDeclarations_)));
	      }
	      var body = createBlock(tree.statements);
	      statements.push(parseStatement($__1, this.ctx_, body, name));
	      return createFunctionBody(statements);
	    },
	    addTempVarForArguments: function() {
	      var tmpVarName = this.getTempIdentifier();
	      this.variableDeclarations_.push(createVariableDeclaration(tmpVarName, id(ARGUMENTS)));
	      return tmpVarName;
	    },
	    addTempVarForThis: function() {
	      var tmpVarName = this.getTempIdentifier();
	      this.variableDeclarations_.push(createVariableDeclaration(tmpVarName, createThisExpression()));
	      return tmpVarName;
	    }
	  }, {transformAsyncGeneratorBody: function(identifierGenerator, reporter, body, name) {
	      return new $AsyncGeneratorTransformer(identifierGenerator, reporter).transformAsyncGeneratorBody_(body, name);
	    }}, TempVarTransformer);
	  return {get AsyncGeneratorTransformer() {
	      return AsyncGeneratorTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/AsyncGeneratorTransformPass.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/AsyncGeneratorTransformPass.js";
	  var $__0 = Object.freeze(Object.defineProperties(["$traceurRuntime.initAsyncGeneratorFunction(", ")"], {raw: {value: Object.freeze(["$traceurRuntime.initAsyncGeneratorFunction(", ")"])}})),
	      $__1 = Object.freeze(Object.defineProperties(["var ", " = ", ""], {raw: {value: Object.freeze(["var ", " = ", ""])}})),
	      $__2 = Object.freeze(Object.defineProperties(["$traceurRuntime.initAsyncGeneratorFunction(", ")"], {raw: {value: Object.freeze(["$traceurRuntime.initAsyncGeneratorFunction(", ")"])}}));
	  var AsyncGeneratorTransformer = System.get("traceur@0.0.87/src/codegeneration/AsyncGeneratorTransformer.js").AsyncGeneratorTransformer;
	  var TempVarTransformer = System.get("traceur@0.0.87/src/codegeneration/TempVarTransformer.js").TempVarTransformer;
	  var $__5 = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js"),
	      AnonBlock = $__5.AnonBlock,
	      FunctionDeclaration = $__5.FunctionDeclaration,
	      FunctionExpression = $__5.FunctionExpression;
	  var $__6 = System.get("traceur@0.0.87/src/codegeneration/ParseTreeFactory.js"),
	      createBindingIdentifier = $__6.createBindingIdentifier,
	      id = $__6.createIdentifierExpression,
	      createIdentifierToken = $__6.createIdentifierToken;
	  var $__7 = System.get("traceur@0.0.87/src/codegeneration/PlaceholderParser.js"),
	      parseExpression = $__7.parseExpression,
	      parseStatement = $__7.parseStatement;
	  var AsyncGeneratorTransformPass = function AsyncGeneratorTransformPass(identifierGenerator, reporter, options) {
	    $traceurRuntime.superConstructor($AsyncGeneratorTransformPass).call(this, identifierGenerator);
	    this.transformOptions_ = options.transformOptions;
	    this.inBlock_ = false;
	  };
	  var $AsyncGeneratorTransformPass = AsyncGeneratorTransformPass;
	  ($traceurRuntime.createClass)(AsyncGeneratorTransformPass, {
	    needsTransform_: function(tree) {
	      return this.transformOptions_.asyncGenerators && tree.isAsyncGenerator();
	    },
	    transformFunctionDeclaration: function(tree) {
	      if (!this.needsTransform_(tree))
	        return $traceurRuntime.superGet(this, $AsyncGeneratorTransformPass.prototype, "transformFunctionDeclaration").call(this, tree);
	      var nameIdExpression = id(tree.name.identifierToken);
	      var setupPrototypeExpression = parseExpression($__0, nameIdExpression);
	      var tmpVar = id(this.inBlock_ ? this.getTempIdentifier() : this.addTempVar(setupPrototypeExpression));
	      var funcDecl = this.transformFunction_(tree, FunctionDeclaration, tmpVar);
	      if (!this.inBlock_)
	        return funcDecl;
	      return new AnonBlock(null, [funcDecl, parseStatement($__1, tmpVar, setupPrototypeExpression)]);
	    },
	    transformFunctionExpression: function(tree) {
	      if (!this.needsTransform_(tree)) {
	        return $traceurRuntime.superGet(this, $AsyncGeneratorTransformPass.prototype, "transformFunctionExpression").call(this, tree);
	      }
	      var name;
	      if (!tree.name) {
	        name = createIdentifierToken(this.getTempIdentifier());
	        tree = new FunctionExpression(tree.location, createBindingIdentifier(name), tree.functionKind, tree.parameterList, tree.typeAnnotation, tree.annotations, tree.body);
	      } else {
	        name = tree.name.identifierToken;
	      }
	      var functionExpression = this.transformFunction_(tree, FunctionExpression, id(name));
	      return parseExpression($__2, functionExpression);
	    },
	    transformFunction_: function(tree, constructor, nameExpression) {
	      var body = $traceurRuntime.superGet(this, $AsyncGeneratorTransformPass.prototype, "transformAny").call(this, tree.body);
	      body = AsyncGeneratorTransformer.transformAsyncGeneratorBody(this.identifierGenerator, this.reporter_, body, nameExpression);
	      var functionKind = null;
	      return new constructor(tree.location, tree.name, functionKind, tree.parameterList, tree.typeAnnotation || null, tree.annotations || null, body);
	    },
	    transformBlock: function(tree) {
	      var inBlock = this.inBlock_;
	      this.inBlock_ = true;
	      var rv = $traceurRuntime.superGet(this, $AsyncGeneratorTransformPass.prototype, "transformBlock").call(this, tree);
	      this.inBlock_ = inBlock;
	      return rv;
	    }
	  }, {}, TempVarTransformer);
	  return {get AsyncGeneratorTransformPass() {
	      return AsyncGeneratorTransformPass;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/FindIdentifiers.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/FindIdentifiers.js";
	  var ScopeVisitor = System.get("traceur@0.0.87/src/semantics/ScopeVisitor.js").ScopeVisitor;
	  var FindIdentifiers = function FindIdentifiers(tree, filterFunction) {
	    $traceurRuntime.superConstructor($FindIdentifiers).call(this);
	    this.filterFunction_ = filterFunction;
	    this.found_ = false;
	    this.visitAny(tree);
	  };
	  var $FindIdentifiers = FindIdentifiers;
	  ($traceurRuntime.createClass)(FindIdentifiers, {
	    visitIdentifierExpression: function(tree) {
	      if (this.filterFunction_(tree.identifierToken.value, this.scope.tree)) {
	        this.found = true;
	      }
	    },
	    get found() {
	      return this.found_;
	    },
	    set found(v) {
	      if (v) {
	        this.found_ = true;
	      }
	    },
	    visitAny: function(tree) {
	      !this.found_ && tree && tree.visit(this);
	    },
	    visitList: function(list) {
	      if (list) {
	        for (var i = 0; !this.found_ && i < list.length; i++) {
	          this.visitAny(list[i]);
	        }
	      }
	    }
	  }, {}, ScopeVisitor);
	  return {get FindIdentifiers() {
	      return FindIdentifiers;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/FnExtractAbruptCompletions.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/FnExtractAbruptCompletions.js";
	  var $__0 = Object.freeze(Object.defineProperties(["if (typeof ", " === \"object\")\n            return ", ".v;"], {raw: {value: Object.freeze(["if (typeof ", " === \"object\")\n            return ", ".v;"])}})),
	      $__1 = Object.freeze(Object.defineProperties(["return ", ";"], {raw: {value: Object.freeze(["return ", ";"])}}));
	  var ParseTreeTransformer = System.get("traceur@0.0.87/src/codegeneration/ParseTreeTransformer.js").ParseTreeTransformer;
	  var alphaRenameThisAndArguments = System.get("traceur@0.0.87/src/codegeneration/alphaRenameThisAndArguments.js").default;
	  var parseStatement = System.get("traceur@0.0.87/src/codegeneration/PlaceholderParser.js").parseStatement;
	  var $__5 = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js"),
	      AnonBlock = $__5.AnonBlock,
	      BreakStatement = $__5.BreakStatement,
	      ContinueStatement = $__5.ContinueStatement,
	      FormalParameterList = $__5.FormalParameterList,
	      FunctionExpression = $__5.FunctionExpression,
	      ReturnStatement = $__5.ReturnStatement,
	      YieldExpression = $__5.YieldExpression;
	  var $__6 = System.get("traceur@0.0.87/src/codegeneration/ParseTreeFactory.js"),
	      createArgumentList = $__6.createArgumentList,
	      createAssignmentStatement = $__6.createAssignmentStatement,
	      createAssignmentExpression = $__6.createAssignmentExpression,
	      createBlock = $__6.createBlock,
	      createCallExpression = $__6.createCallExpression,
	      createCaseClause = $__6.createCaseClause,
	      createDefaultClause = $__6.createDefaultClause,
	      createExpressionStatement = $__6.createExpressionStatement,
	      createFunctionBody = $__6.createFunctionBody,
	      createFunctionExpression = $__6.createFunctionExpression,
	      createIdentifierExpression = $__6.createIdentifierExpression,
	      createNumberLiteral = $__6.createNumberLiteral,
	      createObjectLiteral = $__6.createObjectLiteral,
	      createSwitchStatement = $__6.createSwitchStatement,
	      createThisExpression = $__6.createThisExpression,
	      createVariableDeclaration = $__6.createVariableDeclaration,
	      createVariableDeclarationList = $__6.createVariableDeclarationList,
	      createVariableStatement = $__6.createVariableStatement,
	      createVoid0 = $__6.createVoid0;
	  var ARGUMENTS = System.get("traceur@0.0.87/src/syntax/PredefinedName.js").ARGUMENTS;
	  var StringSet = System.get("traceur@0.0.87/src/util/StringSet.js").StringSet;
	  var Token = System.get("traceur@0.0.87/src/syntax/Token.js").Token;
	  var $__10 = System.get("traceur@0.0.87/src/syntax/TokenType.js"),
	      STAR = $__10.STAR,
	      VAR = $__10.VAR;
	  var FnExtractAbruptCompletions = function FnExtractAbruptCompletions(idGenerator, requestParentLabel) {
	    $traceurRuntime.superConstructor($FnExtractAbruptCompletions).call(this);
	    this.idGenerator_ = idGenerator;
	    this.inLoop_ = 0;
	    this.inBreakble_ = 0;
	    this.variableDeclarations_ = [];
	    this.extractedStatements_ = [];
	    this.requestParentLabel_ = requestParentLabel;
	    this.labelledStatements_ = new StringSet();
	  };
	  var $FnExtractAbruptCompletions = FnExtractAbruptCompletions;
	  ($traceurRuntime.createClass)(FnExtractAbruptCompletions, {
	    createIIFE: function(body, paramList, argsList, inGenerator) {
	      body = this.transformAny(body);
	      body = alphaRenameThisAndArguments(this, body);
	      var tmpFnName = this.idGenerator_.generateUniqueIdentifier();
	      var functionKind = inGenerator ? new Token(STAR, null) : null;
	      var functionExpression = new FunctionExpression(null, null, functionKind, new FormalParameterList(null, paramList), null, [], createFunctionBody(body.statements || [body]));
	      this.variableDeclarations_.push(createVariableDeclaration(tmpFnName, functionExpression));
	      var functionCall = createCallExpression(createIdentifierExpression(tmpFnName), createArgumentList(argsList));
	      if (inGenerator) {
	        functionCall = new YieldExpression(null, functionCall, true);
	      }
	      var loopBody = null;
	      if (this.extractedStatements_.length || this.hasReturns) {
	        var tmpVarName = createIdentifierExpression(this.idGenerator_.generateUniqueIdentifier());
	        this.variableDeclarations_.push(createVariableDeclaration(tmpVarName, null));
	        var maybeReturn;
	        if (this.hasReturns) {
	          maybeReturn = parseStatement($__0, tmpVarName, tmpVarName);
	        }
	        if (this.extractedStatements_.length) {
	          var caseClauses = this.extractedStatements_.map((function(statement, index) {
	            return createCaseClause(createNumberLiteral(index), [statement]);
	          }));
	          if (maybeReturn) {
	            caseClauses.push(createDefaultClause([maybeReturn]));
	          }
	          loopBody = createBlock([createExpressionStatement(createAssignmentExpression(tmpVarName, functionCall)), createSwitchStatement(tmpVarName, caseClauses)]);
	        } else {
	          loopBody = createBlock([createExpressionStatement(createAssignmentExpression(tmpVarName, functionCall)), maybeReturn]);
	        }
	      } else {
	        loopBody = createBlock([createExpressionStatement(functionCall)]);
	      }
	      return {
	        variableStatements: createVariableStatement(createVariableDeclarationList(VAR, this.variableDeclarations_)),
	        loopBody: loopBody
	      };
	    },
	    addTempVarForArguments: function() {
	      var tmpVarName = this.idGenerator_.generateUniqueIdentifier();
	      this.variableDeclarations_.push(createVariableDeclaration(tmpVarName, createIdentifierExpression(ARGUMENTS)));
	      return tmpVarName;
	    },
	    addTempVarForThis: function() {
	      var tmpVarName = this.idGenerator_.generateUniqueIdentifier();
	      this.variableDeclarations_.push(createVariableDeclaration(tmpVarName, createThisExpression()));
	      return tmpVarName;
	    },
	    transformAny: function(tree) {
	      if (tree) {
	        if (tree.isBreakableStatement())
	          this.inBreakble_++;
	        if (tree.isIterationStatement())
	          this.inLoop_++;
	        tree = $traceurRuntime.superGet(this, $FnExtractAbruptCompletions.prototype, "transformAny").call(this, tree);
	        if (tree.isBreakableStatement())
	          this.inBreakble_--;
	        if (tree.isIterationStatement())
	          this.inLoop_--;
	      }
	      return tree;
	    },
	    transformReturnStatement: function(tree) {
	      this.hasReturns = true;
	      return new ReturnStatement(tree.location, createObjectLiteral({v: tree.expression || createVoid0()}));
	    },
	    transformAbruptCompletion_: function(tree) {
	      this.extractedStatements_.push(tree);
	      var index = this.extractedStatements_.length - 1;
	      return parseStatement($__1, index);
	    },
	    transformBreakStatement: function(tree) {
	      if (!tree.name) {
	        if (this.inBreakble_) {
	          return $traceurRuntime.superGet(this, $FnExtractAbruptCompletions.prototype, "transformBreakStatement").call(this, tree);
	        } else {
	          tree = new BreakStatement(tree.location, this.requestParentLabel_());
	        }
	      } else if (this.labelledStatements_.has(tree.name.value)) {
	        return $traceurRuntime.superGet(this, $FnExtractAbruptCompletions.prototype, "transformBreakStatement").call(this, tree);
	      }
	      return this.transformAbruptCompletion_(tree);
	    },
	    transformContinueStatement: function(tree) {
	      if (!tree.name) {
	        if (this.inLoop_) {
	          return $traceurRuntime.superGet(this, $FnExtractAbruptCompletions.prototype, "transformContinueStatement").call(this, tree);
	        } else {
	          tree = new ContinueStatement(tree.location, this.requestParentLabel_());
	        }
	      } else if (this.labelledStatements_.has(tree.name.value)) {
	        return $traceurRuntime.superGet(this, $FnExtractAbruptCompletions.prototype, "transformContinueStatement").call(this, tree);
	      }
	      return this.transformAbruptCompletion_(tree);
	    },
	    transformLabelledStatement: function(tree) {
	      this.labelledStatements_.add(tree.name.value);
	      return $traceurRuntime.superGet(this, $FnExtractAbruptCompletions.prototype, "transformLabelledStatement").call(this, tree);
	    },
	    transformVariableStatement: function(tree) {
	      var $__12 = this;
	      var $__11 = this;
	      if (tree.declarations.declarationType === VAR) {
	        var assignments = [];
	        tree.declarations.declarations.forEach((function(variableDeclaration) {
	          var variableName = variableDeclaration.lvalue.getStringValue();
	          var initializer = $traceurRuntime.superGet($__12, $FnExtractAbruptCompletions.prototype, "transformAny").call($__12, variableDeclaration.initializer);
	          $__11.variableDeclarations_.push(createVariableDeclaration(variableName, null));
	          assignments.push(createAssignmentStatement(createIdentifierExpression(variableName), initializer));
	        }));
	        return new AnonBlock(null, assignments);
	      }
	      return $traceurRuntime.superGet(this, $FnExtractAbruptCompletions.prototype, "transformVariableStatement").call(this, tree);
	    },
	    transformFunctionDeclaration: function(tree) {
	      return tree;
	    },
	    transformFunctionExpression: function(tree) {
	      return tree;
	    },
	    transformSetAccessor: function(tree) {
	      return tree;
	    },
	    transformGetAccessor: function(tree) {
	      return tree;
	    },
	    transformPropertyMethodAssignment: function(tree) {
	      return tree;
	    },
	    transformArrowFunctionExpression: function(tree) {
	      return tree;
	    }
	  }, {createIIFE: function(idGenerator, body, paramList, argsList, requestParentLabel, inGenerator) {
	      return new $FnExtractAbruptCompletions(idGenerator, requestParentLabel).createIIFE(body, paramList, argsList, inGenerator);
	    }}, ParseTreeTransformer);
	  return {get FnExtractAbruptCompletions() {
	      return FnExtractAbruptCompletions;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/BlockBindingTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/BlockBindingTransformer.js";
	  var $__0 = Object.freeze(Object.defineProperties(["void 0"], {raw: {value: Object.freeze(["void 0"])}}));
	  var AlphaRenamer = System.get("traceur@0.0.87/src/codegeneration/AlphaRenamer.js").AlphaRenamer;
	  var $__2 = System.get("traceur@0.0.87/src/syntax/trees/ParseTreeType.js"),
	      ANON_BLOCK = $__2.ANON_BLOCK,
	      BINDING_IDENTIFIER = $__2.BINDING_IDENTIFIER,
	      FOR_IN_STATEMENT = $__2.FOR_IN_STATEMENT,
	      FOR_OF_STATEMENT = $__2.FOR_OF_STATEMENT,
	      VARIABLE_DECLARATION_LIST = $__2.VARIABLE_DECLARATION_LIST;
	  var $__3 = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js"),
	      AnonBlock = $__3.AnonBlock,
	      BindingElement = $__3.BindingElement,
	      BindingIdentifier = $__3.BindingIdentifier,
	      Block = $__3.Block,
	      Catch = $__3.Catch,
	      DoWhileStatement = $__3.DoWhileStatement,
	      ForInStatement = $__3.ForInStatement,
	      ForStatement = $__3.ForStatement,
	      FormalParameter = $__3.FormalParameter,
	      FunctionBody = $__3.FunctionBody,
	      FunctionExpression = $__3.FunctionExpression,
	      LabelledStatement = $__3.LabelledStatement,
	      LiteralPropertyName = $__3.LiteralPropertyName,
	      Module = $__3.Module,
	      ObjectPatternField = $__3.ObjectPatternField,
	      Script = $__3.Script,
	      VariableDeclaration = $__3.VariableDeclaration,
	      VariableDeclarationList = $__3.VariableDeclarationList,
	      VariableStatement = $__3.VariableStatement,
	      WhileStatement = $__3.WhileStatement;
	  var IdentifierToken = System.get("traceur@0.0.87/src/syntax/IdentifierToken.js").IdentifierToken;
	  var ParseTreeTransformer = System.get("traceur@0.0.87/src/codegeneration/ParseTreeTransformer.js").ParseTreeTransformer;
	  var VAR = System.get("traceur@0.0.87/src/syntax/TokenType.js").VAR;
	  var $__7 = System.get("traceur@0.0.87/src/codegeneration/ParseTreeFactory.js"),
	      createBindingIdentifier = $__7.createBindingIdentifier,
	      createIdentifierExpression = $__7.createIdentifierExpression,
	      createIdentifierToken = $__7.createIdentifierToken;
	  var FindIdentifiers = System.get("traceur@0.0.87/src/codegeneration/FindIdentifiers.js").FindIdentifiers;
	  var FindVisitor = System.get("traceur@0.0.87/src/codegeneration/FindVisitor.js").FindVisitor;
	  var FnExtractAbruptCompletions = System.get("traceur@0.0.87/src/codegeneration/FnExtractAbruptCompletions.js").FnExtractAbruptCompletions;
	  var ScopeChainBuilderWithReferences = System.get("traceur@0.0.87/src/semantics/ScopeChainBuilderWithReferences.js").ScopeChainBuilderWithReferences;
	  var parseExpression = System.get("traceur@0.0.87/src/codegeneration/PlaceholderParser.js").parseExpression;
	  var prependStatements = System.get("traceur@0.0.87/src/codegeneration/PrependStatements.js").prependStatements;
	  function varNeedsInitializer(tree, loopTree) {
	    if (loopTree === null)
	      return false;
	    var type = loopTree.type;
	    if (type !== FOR_IN_STATEMENT && type !== FOR_OF_STATEMENT)
	      return true;
	    return loopTree.initializer.declarations[0] !== tree;
	  }
	  var BlockBindingTransformer = function BlockBindingTransformer(idGenerator, reporter, tree) {
	    var scopeBuilder = arguments[3];
	    var latestScope = arguments[4];
	    $traceurRuntime.superConstructor($BlockBindingTransformer).call(this);
	    this.idGenerator_ = idGenerator;
	    this.reporter_ = reporter;
	    if (!scopeBuilder) {
	      scopeBuilder = new ScopeChainBuilderWithReferences(reporter);
	      scopeBuilder.visitAny(tree);
	    }
	    this.scopeBuilder_ = scopeBuilder;
	    this.labelledLoops_ = new Map();
	    this.prependStatement_ = [];
	    this.prependBlockStatement_ = [];
	    this.blockRenames_ = [];
	    this.rootTree_ = tree;
	    if (latestScope) {
	      this.scope_ = latestScope;
	    } else {
	      this.pushScope(tree);
	    }
	    this.usedVars_ = this.scope_.getAllBindingNames();
	    this.maybeRename_ = false;
	    this.inObjectPattern_ = false;
	    this.currentLoopTree_ = null;
	  };
	  var $BlockBindingTransformer = BlockBindingTransformer;
	  ($traceurRuntime.createClass)(BlockBindingTransformer, {
	    getVariableName_: function(variable) {
	      var lvalue = variable.lvalue;
	      if (lvalue.type === BINDING_IDENTIFIER) {
	        return lvalue.getStringValue();
	      }
	      throw new Error('Unexpected destructuring declaration found.');
	    },
	    flushRenames: function(tree) {
	      tree = renameAll(this.blockRenames_, tree);
	      this.blockRenames_.length = 0;
	      return tree;
	    },
	    pushScope: function(tree) {
	      var scope = this.scopeBuilder_.getScopeForTree(tree);
	      if (!scope)
	        throw new Error('BlockBindingTransformer tree with no scope');
	      if (this.scope_)
	        this.scope_.blockBindingRenames = this.blockRenames_;
	      this.scope_ = scope;
	      this.blockRenames_ = [];
	      return scope;
	    },
	    popScope: function(scope) {
	      if (this.scope_ !== scope) {
	        throw new Error('BlockBindingTransformer scope mismatch');
	      }
	      this.scope_ = scope.parent;
	      this.blockRenames_ = this.scope_ && this.scope_.blockBindingRenames || [];
	    },
	    revisitTreeForScopes: function(tree) {
	      this.scopeBuilder_.scope = this.scope_;
	      this.scopeBuilder_.visitAny(tree);
	      this.scopeBuilder_.scope = null;
	    },
	    needsRename_: function(name) {
	      if (this.usedVars_.has(name))
	        return true;
	      var scope = this.scope_;
	      var parent = scope.parent;
	      if (!parent || scope.isVarScope)
	        return false;
	      var varScope = scope.getVarScope();
	      if (varScope && varScope.hasFreeVariable(name)) {
	        return true;
	      }
	      var parentBinding = parent.getBindingByName(name);
	      if (!parentBinding)
	        return false;
	      var currentBinding = scope.getBindingByName(name);
	      if (currentBinding.tree === parentBinding.tree)
	        return false;
	      return true;
	    },
	    newNameFromOrig: function(origName, renames) {
	      var newName;
	      if (this.needsRename_(origName)) {
	        newName = origName + this.idGenerator_.generateUniqueIdentifier();
	        renames.push(new Rename(origName, newName));
	      } else {
	        this.usedVars_.add(origName);
	        newName = origName;
	      }
	      return newName;
	    },
	    transformFunctionBody: function(tree) {
	      if (tree === this.rootTree_ || !this.rootTree_) {
	        tree = $traceurRuntime.superGet(this, $BlockBindingTransformer.prototype, "transformFunctionBody").call(this, tree);
	        if (this.prependStatement_.length || this.blockRenames_.length) {
	          var statements = prependStatements.apply((void 0), $traceurRuntime.spread([tree.statements], this.prependStatement_));
	          tree = new FunctionBody(tree.location, statements);
	          tree = this.flushRenames(tree);
	        }
	      } else {
	        var functionTransform = new $BlockBindingTransformer(this.idGenerator_, this.reporter_, tree, this.scopeBuilder_, this.scope_);
	        var functionBodyTree = functionTransform.transformAny(tree);
	        if (functionBodyTree === tree) {
	          return tree;
	        }
	        tree = new FunctionBody(tree.location, functionBodyTree.statements);
	      }
	      return tree;
	    },
	    transformScript: function(tree) {
	      if (tree === this.rootTree_ || !this.rootTree_) {
	        tree = $traceurRuntime.superGet(this, $BlockBindingTransformer.prototype, "transformScript").call(this, tree);
	        if (this.prependStatement_.length || this.blockRenames_.length) {
	          var scriptItemList = prependStatements.apply((void 0), $traceurRuntime.spread([tree.scriptItemList], this.prependStatement_));
	          tree = new Script(tree.location, scriptItemList, tree.moduleName);
	          tree = this.flushRenames(tree);
	        }
	      } else {
	        var functionTransform = new $BlockBindingTransformer(this.idGenerator_, this.reporter_, tree, this.scopeBuilder_);
	        var newTree = functionTransform.transformAny(tree);
	        if (newTree === tree) {
	          return tree;
	        }
	        tree = new Script(tree.location, newTree.scriptItemList, tree.moduleName);
	      }
	      return tree;
	    },
	    transformModule: function(tree) {
	      if (tree === this.rootTree_ || !this.rootTree_) {
	        tree = $traceurRuntime.superGet(this, $BlockBindingTransformer.prototype, "transformModule").call(this, tree);
	        if (this.prependStatement_.length || this.blockRenames_.length) {
	          var scriptItemList = prependStatements.apply((void 0), $traceurRuntime.spread([tree.scriptItemList], this.prependStatement_));
	          tree = new Module(tree.location, scriptItemList, tree.moduleName);
	          tree = this.flushRenames(tree);
	        }
	      } else {
	        var functionTransform = new $BlockBindingTransformer(this.idGenerator_, this.reporter_, tree, this.scopeBuilder_);
	        var newTree = functionTransform.transformAny(tree);
	        if (newTree === tree) {
	          return tree;
	        }
	        tree = new Module(tree.location, newTree.scriptItemList, tree.moduleName);
	      }
	      return tree;
	    },
	    transformVariableStatement: function(tree) {
	      var declarations = this.transformAny(tree.declarations);
	      if (declarations.type === ANON_BLOCK) {
	        return declarations;
	      }
	      if (declarations === tree.declarations) {
	        return tree;
	      }
	      return new VariableStatement(tree.location, declarations);
	    },
	    transformVariableDeclarationList: function(tree) {
	      if (tree.declarationType === VAR) {
	        return $traceurRuntime.superGet(this, $BlockBindingTransformer.prototype, "transformVariableDeclarationList").call(this, tree);
	      }
	      this.maybeRename_ = !this.scope_.isVarScope;
	      var declarations = this.transformList(tree.declarations);
	      this.maybeRename_ = false;
	      return new VariableDeclarationList(tree.location, VAR, declarations);
	    },
	    transformVariableDeclaration: function(tree) {
	      var maybeRename = this.maybeRename_;
	      var lvalue = this.transformAny(tree.lvalue);
	      this.maybeRename_ = false;
	      var initializer = null;
	      if (tree.initializer) {
	        initializer = this.transformAny(tree.initializer);
	      } else if (varNeedsInitializer(tree, this.currentLoopTree_)) {
	        initializer = parseExpression($__0);
	      }
	      this.maybeRename_ = maybeRename;
	      if (tree.lvalue === lvalue && tree.initializer === initializer) {
	        return tree;
	      }
	      return new VariableDeclaration(tree.location, lvalue, tree.typeAnnotation, initializer);
	    },
	    transformBindingIdentifier: function(tree) {
	      if (this.maybeRename_) {
	        var origName = tree.getStringValue();
	        var newName = this.newNameFromOrig(origName, this.blockRenames_);
	        if (origName === newName) {
	          return tree;
	        }
	        var newToken = new IdentifierToken(tree.location, newName);
	        var bindingIdentifier = new BindingIdentifier(tree.location, newToken);
	        this.scope_.renameBinding(origName, bindingIdentifier, VAR, this.reporter_);
	        return bindingIdentifier;
	      }
	      return $traceurRuntime.superGet(this, $BlockBindingTransformer.prototype, "transformBindingIdentifier").call(this, tree);
	    },
	    transformBindingElement: function(tree) {
	      var maybeRename = this.maybeRename_;
	      var inObjectPattern = this.inObjectPattern_;
	      var binding = this.transformAny(tree.binding);
	      this.maybeRename_ = false;
	      this.inObjectPattern_ = false;
	      var initializer = this.transformAny(tree.initializer);
	      this.maybeRename_ = maybeRename;
	      this.inObjectPattern_ = inObjectPattern;
	      if (tree.binding === binding && tree.initializer === initializer) {
	        return tree;
	      }
	      var bindingElement = new BindingElement(tree.location, binding, initializer);
	      if (this.inObjectPattern_ && tree.binding !== binding && tree.binding.type === BINDING_IDENTIFIER) {
	        return new ObjectPatternField(tree.location, new LiteralPropertyName(tree.location, tree.binding.identifierToken), bindingElement);
	      }
	      return bindingElement;
	    },
	    transformObjectPattern: function(tree) {
	      var inObjectPattern = this.inObjectPattern_;
	      this.inObjectPattern_ = true;
	      var transformed = $traceurRuntime.superGet(this, $BlockBindingTransformer.prototype, "transformObjectPattern").call(this, tree);
	      this.inObjectPattern_ = inObjectPattern;
	      return transformed;
	    },
	    transformObjectPatternField: function(tree) {
	      var name = this.transformAny(tree.name);
	      this.inObjectPattern_ = false;
	      var element = this.transformAny(tree.element);
	      this.inObjectPattern_ = true;
	      if (tree.name === name && tree.element === element) {
	        return tree;
	      }
	      return new ObjectPatternField(tree.location, name, element);
	    },
	    transformBlock: function(tree) {
	      var scope = this.pushScope(tree);
	      var outerPrepends = this.prependBlockStatement_;
	      this.prependBlockStatement_ = [];
	      tree = $traceurRuntime.superGet(this, $BlockBindingTransformer.prototype, "transformBlock").call(this, tree);
	      if (this.prependBlockStatement_.length) {
	        tree = new Block(tree.location, prependStatements.apply((void 0), $traceurRuntime.spread([tree.statements], this.prependBlockStatement_)));
	      }
	      this.prependBlockStatement_ = outerPrepends;
	      tree = this.flushRenames(tree);
	      this.popScope(scope);
	      return tree;
	    },
	    transformCatch: function(tree) {
	      var scope = this.pushScope(tree);
	      var binding = this.transformAny(tree.binding);
	      var statements = this.transformList(tree.catchBody.statements);
	      if (binding !== tree.binding || statements !== tree.catchBody.statements) {
	        tree = new Catch(tree.location, binding, new Block(tree.catchBody.location, statements));
	      }
	      tree = this.flushRenames(tree);
	      this.popScope(scope);
	      return tree;
	    },
	    transformFunctionForScope_: function(func, tree) {
	      var scope = this.pushScope(tree);
	      tree = func();
	      tree = this.flushRenames(tree);
	      this.popScope(scope);
	      return tree;
	    },
	    transformGetAccessor: function(tree) {
	      var $__15 = this;
	      return this.transformFunctionForScope_((function() {
	        return $traceurRuntime.superGet($__15, $BlockBindingTransformer.prototype, "transformGetAccessor").call($__15, tree);
	      }), tree);
	    },
	    transformSetAccessor: function(tree) {
	      var $__15 = this;
	      return this.transformFunctionForScope_((function() {
	        return $traceurRuntime.superGet($__15, $BlockBindingTransformer.prototype, "transformSetAccessor").call($__15, tree);
	      }), tree);
	    },
	    transformFunctionExpression: function(tree) {
	      var $__15 = this;
	      return this.transformFunctionForScope_((function() {
	        return $traceurRuntime.superGet($__15, $BlockBindingTransformer.prototype, "transformFunctionExpression").call($__15, tree);
	      }), tree);
	    },
	    transformFunctionDeclaration: function(tree) {
	      var $__15 = this;
	      if (!this.scope_.isVarScope) {
	        var origName = tree.name.getStringValue();
	        var newName = this.newNameFromOrig(origName, this.blockRenames_);
	        var functionExpression = new FunctionExpression(tree.location, null, tree.functionKind, tree.parameterList, tree.typeAnnotation, tree.annotations, tree.body);
	        this.revisitTreeForScopes(functionExpression);
	        functionExpression = this.transformAny(functionExpression);
	        var bindingIdentifier = createBindingIdentifier(newName);
	        var statement = new VariableStatement(tree.location, new VariableDeclarationList(tree.location, VAR, [new VariableDeclaration(tree.location, bindingIdentifier, null, functionExpression)]));
	        this.scope_.renameBinding(origName, bindingIdentifier, VAR, this.reporter_);
	        this.prependBlockStatement_.push(statement);
	        return new AnonBlock(null, []);
	      }
	      return this.transformFunctionForScope_((function() {
	        return $traceurRuntime.superGet($__15, $BlockBindingTransformer.prototype, "transformFunctionDeclaration").call($__15, tree);
	      }), tree);
	    },
	    transformLoop_: function(func, tree, loopFactory) {
	      var $__14 = this;
	      var scope,
	          initializerIsBlockBinding;
	      if (tree.initializer && tree.initializer.type === VARIABLE_DECLARATION_LIST && tree.initializer.declarationType !== VAR) {
	        initializerIsBlockBinding = true;
	      }
	      if (initializerIsBlockBinding) {
	        scope = this.pushScope(tree);
	      }
	      var finder = new FindBlockBindingInLoop(tree, this.scopeBuilder_);
	      finder.visitAny(tree);
	      if (!finder.found) {
	        if (initializerIsBlockBinding) {
	          var renames = [];
	          var initializer = new VariableDeclarationList(null, VAR, tree.initializer.declarations.map((function(declaration) {
	            var origName = $__14.getVariableName_(declaration);
	            var newName = $__14.newNameFromOrig(origName, renames);
	            var bindingIdentifier = createBindingIdentifier(newName);
	            $__14.scope_.renameBinding(origName, bindingIdentifier, VAR, $__14.reporter_);
	            return new VariableDeclaration(null, bindingIdentifier, null, declaration.initializer);
	          })));
	          initializer = renameAll(renames, initializer);
	          tree = loopFactory(initializer, renames, renameAll(renames, tree.body));
	          this.revisitTreeForScopes(tree);
	          tree = func(tree);
	        } else {
	          var currentLoopTree = this.currentLoopTree_;
	          this.currentLoopTree_ = tree;
	          var rv = func(tree);
	          this.currentLoopTree_ = currentLoopTree;
	          return rv;
	        }
	      } else {
	        var iifeParameterList = [];
	        var iifeArgumentList = [];
	        var renames$__16 = [];
	        var initializer$__17 = null;
	        if (tree.initializer && tree.initializer.type === VARIABLE_DECLARATION_LIST && tree.initializer.declarationType !== VAR) {
	          initializer$__17 = new VariableDeclarationList(null, VAR, tree.initializer.declarations.map((function(declaration) {
	            var origName = $__14.getVariableName_(declaration);
	            var newName = $__14.newNameFromOrig(origName, renames$__16);
	            iifeArgumentList.push(createIdentifierExpression(newName));
	            iifeParameterList.push(new FormalParameter(null, new BindingElement(null, createBindingIdentifier(origName), null), null, []));
	            var bindingIdentifier = createBindingIdentifier(newName);
	            $__14.scope_.renameBinding(origName, bindingIdentifier, VAR, $__14.reporter_);
	            return new VariableDeclaration(null, bindingIdentifier, null, declaration.initializer);
	          })));
	          initializer$__17 = renameAll(renames$__16, initializer$__17);
	        } else {
	          initializer$__17 = this.transformAny(tree.initializer);
	        }
	        var loopLabel = this.labelledLoops_.get(tree);
	        var iifeInfo = FnExtractAbruptCompletions.createIIFE(this.idGenerator_, tree.body, iifeParameterList, iifeArgumentList, (function() {
	          return loopLabel = loopLabel || $__14.idGenerator_.generateUniqueIdentifier();
	        }), this.scope_.inGenerator);
	        tree = loopFactory(initializer$__17, renames$__16, iifeInfo.loopBody);
	        if (loopLabel) {
	          tree = new LabelledStatement(tree.location, createIdentifierToken(loopLabel), tree);
	        }
	        tree = new AnonBlock(tree.location, [iifeInfo.variableStatements, tree]);
	        this.revisitTreeForScopes(tree);
	        tree = this.transformAny(tree);
	      }
	      if (initializerIsBlockBinding) {
	        tree = this.flushRenames(tree);
	        this.popScope(scope);
	      }
	      return tree;
	    },
	    transformForInStatement: function(tree) {
	      var $__15 = this;
	      return this.transformLoop_((function(t) {
	        return $traceurRuntime.superGet($__15, $BlockBindingTransformer.prototype, "transformForInStatement").call($__15, t);
	      }), tree, (function(initializer, renames, body) {
	        return new ForInStatement(tree.location, initializer, renameAll(renames, tree.collection), body);
	      }));
	    },
	    transformForStatement: function(tree) {
	      var $__15 = this;
	      return this.transformLoop_((function(t) {
	        return $traceurRuntime.superGet($__15, $BlockBindingTransformer.prototype, "transformForStatement").call($__15, t);
	      }), tree, (function(initializer, renames, body) {
	        return new ForStatement(tree.location, initializer, renameAll(renames, tree.condition), renameAll(renames, tree.increment), body);
	      }));
	    },
	    transformWhileStatement: function(tree) {
	      var $__15 = this;
	      return this.transformLoop_((function(t) {
	        return $traceurRuntime.superGet($__15, $BlockBindingTransformer.prototype, "transformWhileStatement").call($__15, t);
	      }), tree, (function(initializer, renames, body) {
	        return new WhileStatement(tree.location, renameAll(renames, tree.condition), body);
	      }));
	    },
	    transformDoWhileStatement: function(tree) {
	      var $__15 = this;
	      return this.transformLoop_((function(t) {
	        return $traceurRuntime.superGet($__15, $BlockBindingTransformer.prototype, "transformDoWhileStatement").call($__15, t);
	      }), tree, (function(initializer, renames, body) {
	        return new DoWhileStatement(tree.location, body, renameAll(renames, tree.condition));
	      }));
	    },
	    transformLabelledStatement: function(tree) {
	      if (tree.statement.isIterationStatement()) {
	        this.labelledLoops_.set(tree.statement, tree.name.value);
	        var statement = this.transformAny(tree.statement);
	        if (!statement.isStatement()) {
	          return statement;
	        }
	        if (statement === tree.statement) {
	          return tree;
	        }
	        return new LabelledStatement(tree.location, tree.name, statement);
	      }
	      return $traceurRuntime.superGet(this, $BlockBindingTransformer.prototype, "transformLabelledStatement").call(this, tree);
	    }
	  }, {}, ParseTreeTransformer);
	  var Rename = function Rename(oldName, newName) {
	    this.oldName = oldName;
	    this.newName = newName;
	  };
	  ($traceurRuntime.createClass)(Rename, {}, {});
	  function renameAll(renames, tree) {
	    renames.forEach((function(rename) {
	      tree = AlphaRenamer.rename(tree, rename.oldName, rename.newName);
	    }));
	    return tree;
	  }
	  var FindBlockBindingInLoop = function FindBlockBindingInLoop(tree, scopeBuilder) {
	    $traceurRuntime.superConstructor($FindBlockBindingInLoop).call(this);
	    this.scopeBuilder_ = scopeBuilder;
	    this.topScope_ = scopeBuilder.getScopeForTree(tree) || scopeBuilder.getScopeForTree(tree.body);
	    this.outOfScope_ = null;
	    this.acceptLoop_ = tree.isIterationStatement();
	  };
	  var $FindBlockBindingInLoop = FindBlockBindingInLoop;
	  ($traceurRuntime.createClass)(FindBlockBindingInLoop, {
	    visitForInStatement: function(tree) {
	      var $__15 = this;
	      this.visitLoop_(tree, (function() {
	        return $traceurRuntime.superGet($__15, $FindBlockBindingInLoop.prototype, "visitForInStatement").call($__15, tree);
	      }));
	    },
	    visitForStatement: function(tree) {
	      var $__15 = this;
	      this.visitLoop_(tree, (function() {
	        return $traceurRuntime.superGet($__15, $FindBlockBindingInLoop.prototype, "visitForStatement").call($__15, tree);
	      }));
	    },
	    visitWhileStatement: function(tree) {
	      var $__15 = this;
	      this.visitLoop_(tree, (function() {
	        return $traceurRuntime.superGet($__15, $FindBlockBindingInLoop.prototype, "visitWhileStatement").call($__15, tree);
	      }));
	    },
	    visitDoWhileStatement: function(tree) {
	      var $__15 = this;
	      this.visitLoop_(tree, (function() {
	        return $traceurRuntime.superGet($__15, $FindBlockBindingInLoop.prototype, "visitDoWhileStatement").call($__15, tree);
	      }));
	    },
	    visitLoop_: function(tree, func) {
	      if (this.acceptLoop_) {
	        this.acceptLoop_ = false;
	      } else if (!this.outOfScope_) {
	        this.outOfScope_ = this.scopeBuilder_.getScopeForTree(tree) || this.scopeBuilder_.getScopeForTree(tree.body);
	      }
	      func();
	    },
	    visitFunctionDeclaration: function(tree) {
	      this.visitFunction_(tree);
	    },
	    visitFunctionExpression: function(tree) {
	      this.visitFunction_(tree);
	    },
	    visitSetAccessor: function(tree) {
	      this.visitFunction_(tree);
	    },
	    visitGetAccessor: function(tree) {
	      this.visitFunction_(tree);
	    },
	    visitPropertyMethodAssignment: function(tree) {
	      this.visitFunction_(tree);
	    },
	    visitArrowFunctionExpression: function(tree) {
	      this.visitFunction_(tree);
	    },
	    visitFunction_: function(tree) {
	      var $__14 = this;
	      this.found = new FindIdentifiers(tree, (function(identifierToken, identScope) {
	        identScope = $__14.scopeBuilder_.getScopeForTree(identScope);
	        var fnScope = $__14.outOfScope_ || $__14.scopeBuilder_.getScopeForTree(tree);
	        if (identScope.hasLexicalBindingName(identifierToken)) {
	          return false;
	        }
	        while (identScope !== fnScope && (identScope = identScope.parent)) {
	          if (identScope.hasLexicalBindingName(identifierToken)) {
	            return false;
	          }
	        }
	        while (fnScope = fnScope.parent) {
	          if (fnScope.hasLexicalBindingName(identifierToken)) {
	            return true;
	          }
	          if (fnScope.hasVariableBindingName(identifierToken)) {
	            return false;
	          }
	          if (fnScope === $__14.topScope_)
	            break;
	        }
	        return false;
	      })).found;
	    }
	  }, {}, FindVisitor);
	  return {get BlockBindingTransformer() {
	      return BlockBindingTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/MakeStrictTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/MakeStrictTransformer.js";
	  var $__0 = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js"),
	      FunctionBody = $__0.FunctionBody,
	      Script = $__0.Script;
	  var ParseTreeTransformer = System.get("traceur@0.0.87/src/codegeneration/ParseTreeTransformer.js").ParseTreeTransformer;
	  var createUseStrictDirective = System.get("traceur@0.0.87/src/codegeneration/ParseTreeFactory.js").createUseStrictDirective;
	  var hasUseStrict = System.get("traceur@0.0.87/src/semantics/util.js").hasUseStrict;
	  function prepend(statements) {
	    return $traceurRuntime.spread([createUseStrictDirective()], statements);
	  }
	  var MakeStrictTransformer = function MakeStrictTransformer() {
	    $traceurRuntime.superConstructor($MakeStrictTransformer).apply(this, arguments);
	    ;
	  };
	  var $MakeStrictTransformer = MakeStrictTransformer;
	  ($traceurRuntime.createClass)(MakeStrictTransformer, {
	    transformScript: function(tree) {
	      if (hasUseStrict(tree.scriptItemList))
	        return tree;
	      return new Script(tree.location, prepend(tree.scriptItemList));
	    },
	    transformFunctionBody: function(tree) {
	      if (hasUseStrict(tree.statements))
	        return tree;
	      return new FunctionBody(tree.location, prepend(tree.statements));
	    }
	  }, {transformTree: function(tree) {
	      return new $MakeStrictTransformer().transformAny(tree);
	    }}, ParseTreeTransformer);
	  return {get MakeStrictTransformer() {
	      return MakeStrictTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/MemberVariableConstructorTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/MemberVariableConstructorTransformer.js";
	  var $__0 = Object.freeze(Object.defineProperties(["this.", " = ", ""], {raw: {value: Object.freeze(["this.", " = ", ""])}}));
	  var PropertyMethodAssignment = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js").PropertyMethodAssignment;
	  var SUPER_EXPRESSION = System.get("traceur@0.0.87/src/syntax/trees/ParseTreeType.js").SUPER_EXPRESSION;
	  var ParseTreeTransformer = System.get("traceur@0.0.87/src/codegeneration/ParseTreeTransformer.js").ParseTreeTransformer;
	  var $__4 = System.get("traceur@0.0.87/src/codegeneration/ParseTreeFactory.js"),
	      createCommaExpression = $__4.createCommaExpression,
	      createExpressionStatement = $__4.createExpressionStatement,
	      createFunctionBody = $__4.createFunctionBody,
	      createParenExpression = $__4.createParenExpression,
	      createThisExpression = $__4.createThisExpression;
	  var prependStatements = System.get("traceur@0.0.87/src/codegeneration/PrependStatements.js").prependStatements;
	  var parseExpression = System.get("traceur@0.0.87/src/codegeneration/PlaceholderParser.js").parseExpression;
	  function transformConstructor(constructor, initExpression, superClass) {
	    if (superClass) {
	      var transformer = new SuperCallTransformer(initExpression);
	      return transformer.transformAny(constructor);
	    }
	    var statements = constructor.body.statements;
	    var initStatement = createExpressionStatement(initExpression);
	    statements = prependStatements(statements, initStatement);
	    return new PropertyMethodAssignment(constructor.location, false, constructor.functionKind, constructor.name, constructor.parameterList, constructor.typeAnnotation, constructor.annotations, createFunctionBody(statements));
	  }
	  function getInstanceInitExpression(initInstanceVars) {
	    var expressions = initInstanceVars.map((function(mv) {
	      var name = mv.name.literalToken;
	      return parseExpression($__0, name, mv.initializer);
	    }));
	    return createCommaExpression(expressions);
	  }
	  var SuperCallTransformer = function SuperCallTransformer(expression) {
	    $traceurRuntime.superConstructor($SuperCallTransformer).call(this);
	    this.expression = expression;
	  };
	  var $SuperCallTransformer = SuperCallTransformer;
	  ($traceurRuntime.createClass)(SuperCallTransformer, {
	    transformCallExpression: function(tree) {
	      if (tree.operand.type === SUPER_EXPRESSION) {
	        var thisExpression = createThisExpression();
	        return createParenExpression(createCommaExpression([tree, this.expression, thisExpression]));
	      }
	      return $traceurRuntime.superGet(this, $SuperCallTransformer.prototype, "transformCallExpression").call(this, tree);
	    },
	    transformClassDeclaration: function(tree) {
	      return tree;
	    },
	    transformClassExpression: function(tree) {
	      return tree;
	    }
	  }, {}, ParseTreeTransformer);
	  return {
	    get transformConstructor() {
	      return transformConstructor;
	    },
	    get getInstanceInitExpression() {
	      return getInstanceInitExpression;
	    }
	  };
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/assignmentOperatorToBinaryOperator.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/assignmentOperatorToBinaryOperator.js";
	  var $__0 = System.get("traceur@0.0.87/src/syntax/TokenType.js"),
	      AMPERSAND = $__0.AMPERSAND,
	      AMPERSAND_EQUAL = $__0.AMPERSAND_EQUAL,
	      BAR = $__0.BAR,
	      BAR_EQUAL = $__0.BAR_EQUAL,
	      CARET = $__0.CARET,
	      CARET_EQUAL = $__0.CARET_EQUAL,
	      LEFT_SHIFT = $__0.LEFT_SHIFT,
	      LEFT_SHIFT_EQUAL = $__0.LEFT_SHIFT_EQUAL,
	      MINUS = $__0.MINUS,
	      MINUS_EQUAL = $__0.MINUS_EQUAL,
	      PERCENT = $__0.PERCENT,
	      PERCENT_EQUAL = $__0.PERCENT_EQUAL,
	      PLUS = $__0.PLUS,
	      PLUS_EQUAL = $__0.PLUS_EQUAL,
	      RIGHT_SHIFT = $__0.RIGHT_SHIFT,
	      RIGHT_SHIFT_EQUAL = $__0.RIGHT_SHIFT_EQUAL,
	      SLASH = $__0.SLASH,
	      SLASH_EQUAL = $__0.SLASH_EQUAL,
	      STAR = $__0.STAR,
	      STAR_EQUAL = $__0.STAR_EQUAL,
	      STAR_STAR = $__0.STAR_STAR,
	      STAR_STAR_EQUAL = $__0.STAR_STAR_EQUAL,
	      UNSIGNED_RIGHT_SHIFT = $__0.UNSIGNED_RIGHT_SHIFT,
	      UNSIGNED_RIGHT_SHIFT_EQUAL = $__0.UNSIGNED_RIGHT_SHIFT_EQUAL;
	  function assignmentOperatorToBinaryOperator(type) {
	    switch (type) {
	      case STAR_EQUAL:
	        return STAR;
	      case STAR_STAR_EQUAL:
	        return STAR_STAR;
	      case SLASH_EQUAL:
	        return SLASH;
	      case PERCENT_EQUAL:
	        return PERCENT;
	      case PLUS_EQUAL:
	        return PLUS;
	      case MINUS_EQUAL:
	        return MINUS;
	      case LEFT_SHIFT_EQUAL:
	        return LEFT_SHIFT;
	      case RIGHT_SHIFT_EQUAL:
	        return RIGHT_SHIFT;
	      case UNSIGNED_RIGHT_SHIFT_EQUAL:
	        return UNSIGNED_RIGHT_SHIFT;
	      case AMPERSAND_EQUAL:
	        return AMPERSAND;
	      case CARET_EQUAL:
	        return CARET;
	      case BAR_EQUAL:
	        return BAR;
	      default:
	        throw Error('unreachable');
	    }
	  }
	  var $__default = assignmentOperatorToBinaryOperator;
	  return {get default() {
	      return $__default;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/ExplodeExpressionTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/ExplodeExpressionTransformer.js";
	  var ParseTreeTransformer = System.get("traceur@0.0.87/src/codegeneration/ParseTreeTransformer.js").ParseTreeTransformer;
	  var $__1 = System.get("traceur@0.0.87/src/codegeneration/ParseTreeFactory.js"),
	      createAssignmentExpression = $__1.createAssignmentExpression,
	      createCommaExpression = $__1.createCommaExpression,
	      id = $__1.createIdentifierExpression,
	      createMemberExpression = $__1.createMemberExpression,
	      createNumberLiteral = $__1.createNumberLiteral,
	      createOperatorToken = $__1.createOperatorToken,
	      createParenExpression = $__1.createParenExpression;
	  var $__2 = System.get("traceur@0.0.87/src/syntax/TokenType.js"),
	      AND = $__2.AND,
	      EQUAL = $__2.EQUAL,
	      MINUS = $__2.MINUS,
	      MINUS_EQUAL = $__2.MINUS_EQUAL,
	      MINUS_MINUS = $__2.MINUS_MINUS,
	      OR = $__2.OR,
	      PLUS = $__2.PLUS,
	      PLUS_EQUAL = $__2.PLUS_EQUAL,
	      PLUS_PLUS = $__2.PLUS_PLUS;
	  var $__3 = System.get("traceur@0.0.87/src/syntax/trees/ParseTreeType.js"),
	      COMMA_EXPRESSION = $__3.COMMA_EXPRESSION,
	      IDENTIFIER_EXPRESSION = $__3.IDENTIFIER_EXPRESSION,
	      MEMBER_EXPRESSION = $__3.MEMBER_EXPRESSION,
	      MEMBER_LOOKUP_EXPRESSION = $__3.MEMBER_LOOKUP_EXPRESSION,
	      PROPERTY_NAME_ASSIGNMENT = $__3.PROPERTY_NAME_ASSIGNMENT,
	      SPREAD_EXPRESSION = $__3.SPREAD_EXPRESSION,
	      TEMPLATE_LITERAL_PORTION = $__3.TEMPLATE_LITERAL_PORTION;
	  var $__4 = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js"),
	      ArgumentList = $__4.ArgumentList,
	      ArrayLiteralExpression = $__4.ArrayLiteralExpression,
	      AwaitExpression = $__4.AwaitExpression,
	      BinaryExpression = $__4.BinaryExpression,
	      CallExpression = $__4.CallExpression,
	      ConditionalExpression = $__4.ConditionalExpression,
	      MemberExpression = $__4.MemberExpression,
	      MemberLookupExpression = $__4.MemberLookupExpression,
	      NewExpression = $__4.NewExpression,
	      ObjectLiteralExpression = $__4.ObjectLiteralExpression,
	      PropertyNameAssignment = $__4.PropertyNameAssignment,
	      SpreadExpression = $__4.SpreadExpression,
	      TemplateLiteralExpression = $__4.TemplateLiteralExpression,
	      TemplateSubstitution = $__4.TemplateSubstitution,
	      UnaryExpression = $__4.UnaryExpression,
	      YieldExpression = $__4.YieldExpression;
	  var assert = System.get("traceur@0.0.87/src/util/assert.js").assert;
	  var assignmentOperatorToBinaryOperator = System.get("traceur@0.0.87/src/codegeneration/assignmentOperatorToBinaryOperator.js").default;
	  var CommaExpressionBuilder = function CommaExpressionBuilder(tempVar) {
	    this.tempVar = tempVar;
	    this.expressions = [];
	  };
	  ($traceurRuntime.createClass)(CommaExpressionBuilder, {
	    add: function(tree) {
	      var $__8;
	      if (tree.type === COMMA_EXPRESSION)
	        ($__8 = this.expressions).push.apply($__8, $traceurRuntime.spread(getExpressions(tree)));
	      return this;
	    },
	    build: function(tree) {
	      var tempVar = this.tempVar;
	      this.expressions.push(createAssignmentExpression(tempVar, tree), tempVar);
	      return createCommaExpression(this.expressions);
	    }
	  }, {});
	  function getResult(tree) {
	    if (tree.type === COMMA_EXPRESSION)
	      return tree.expressions[tree.expressions.length - 1];
	    return tree;
	  }
	  function getExpressions(tree) {
	    if (tree.type === COMMA_EXPRESSION)
	      return tree.expressions.slice(0, -1);
	    return [];
	  }
	  var ExplodeExpressionTransformer = function ExplodeExpressionTransformer(tempVarTransformer) {
	    $traceurRuntime.superConstructor($ExplodeExpressionTransformer).call(this);
	    this.tempVarTransformer_ = tempVarTransformer;
	  };
	  var $ExplodeExpressionTransformer = ExplodeExpressionTransformer;
	  ($traceurRuntime.createClass)(ExplodeExpressionTransformer, {
	    addTempVar: function() {
	      var tmpId = this.tempVarTransformer_.addTempVar();
	      return id(tmpId);
	    },
	    transformUnaryExpression: function(tree) {
	      if (tree.operator.type === PLUS_PLUS)
	        return this.transformUnaryNumeric(tree, PLUS_EQUAL);
	      if (tree.operator.type === MINUS_MINUS)
	        return this.transformUnaryNumeric(tree, MINUS_EQUAL);
	      var operand = this.transformAny(tree.operand);
	      if (operand === tree.operand)
	        return tree;
	      var expressions = $traceurRuntime.spread(getExpressions(operand), [new UnaryExpression(tree.location, tree.operator, getResult(operand))]);
	      return createCommaExpression(expressions);
	    },
	    transformUnaryNumeric: function(tree, operator) {
	      return this.transformAny(new BinaryExpression(tree.location, tree.operand, createOperatorToken(operator), createNumberLiteral(1)));
	    },
	    transformPostfixExpression: function(tree) {
	      if (tree.operand.type === MEMBER_EXPRESSION)
	        return this.transformPostfixMemberExpression(tree);
	      if (tree.operand.type === MEMBER_LOOKUP_EXPRESSION)
	        return this.transformPostfixMemberLookupExpression(tree);
	      assert(tree.operand.type === IDENTIFIER_EXPRESSION);
	      var operand = tree.operand;
	      var tmp = this.addTempVar();
	      var operator = tree.operator.type === PLUS_PLUS ? PLUS : MINUS;
	      var expressions = [createAssignmentExpression(tmp, operand), createAssignmentExpression(operand, new BinaryExpression(tree.location, tmp, createOperatorToken(operator), createNumberLiteral(1))), tmp];
	      return createCommaExpression(expressions);
	    },
	    transformPostfixMemberExpression: function(tree) {
	      var memberName = tree.operand.memberName;
	      var operand = this.transformAny(tree.operand.operand);
	      var tmp = this.addTempVar();
	      var memberExpression = new MemberExpression(tree.operand.location, getResult(operand), memberName);
	      var operator = tree.operator.type === PLUS_PLUS ? PLUS : MINUS;
	      var expressions = $traceurRuntime.spread(getExpressions(operand), [createAssignmentExpression(tmp, memberExpression), createAssignmentExpression(memberExpression, new BinaryExpression(tree.location, tmp, createOperatorToken(operator), createNumberLiteral(1))), tmp]);
	      return createCommaExpression(expressions);
	    },
	    transformPostfixMemberLookupExpression: function(tree) {
	      var memberExpression = this.transformAny(tree.operand.memberExpression);
	      var operand = this.transformAny(tree.operand.operand);
	      var tmp = this.addTempVar();
	      var memberLookupExpression = new MemberLookupExpression(null, getResult(operand), getResult(memberExpression));
	      var operator = tree.operator.type === PLUS_PLUS ? PLUS : MINUS;
	      var expressions = $traceurRuntime.spread(getExpressions(operand), getExpressions(memberExpression), [createAssignmentExpression(tmp, memberLookupExpression), createAssignmentExpression(memberLookupExpression, new BinaryExpression(tree.location, tmp, createOperatorToken(operator), createNumberLiteral(1))), tmp]);
	      return createCommaExpression(expressions);
	    },
	    transformYieldExpression: function(tree) {
	      var expression = this.transformAny(tree.expression);
	      return this.createCommaExpressionBuilder().add(expression).build(new YieldExpression(tree.location, getResult(expression), tree.isYieldFor));
	    },
	    transformAwaitExpression: function(tree) {
	      var expression = this.transformAny(tree.expression);
	      return this.createCommaExpressionBuilder().add(expression).build(new AwaitExpression(tree.location, getResult(expression)));
	    },
	    transformParenExpression: function(tree) {
	      var expression = this.transformAny(tree.expression);
	      if (expression === tree.expression)
	        return tree;
	      var result = getResult(expression);
	      if (result.type === IDENTIFIER_EXPRESSION)
	        return expression;
	      return this.createCommaExpressionBuilder().add(expression).build(result);
	    },
	    transformCommaExpression: function(tree) {
	      var expressions = this.transformList(tree.expressions);
	      if (expressions === tree.expressions)
	        return tree;
	      var builder = new CommaExpressionBuilder(null);
	      for (var i = 0; i < expressions.length; i++) {
	        builder.add(expressions[i]);
	      }
	      return createCommaExpression($traceurRuntime.spread(builder.expressions, [getResult(expressions[expressions.length - 1])]));
	    },
	    transformMemberExpression: function(tree) {
	      var operand = this.transformAny(tree.operand);
	      return this.createCommaExpressionBuilder().add(operand).build(new MemberExpression(tree.location, getResult(operand), tree.memberName));
	    },
	    transformMemberLookupExpression: function(tree) {
	      var operand = this.transformAny(tree.operand);
	      var memberExpression = this.transformAny(tree.memberExpression);
	      return this.createCommaExpressionBuilder().add(operand).add(memberExpression).build(new MemberLookupExpression(tree.location, getResult(operand), getResult(memberExpression)));
	    },
	    transformBinaryExpression: function(tree) {
	      if (tree.operator.isAssignmentOperator())
	        return this.transformAssignmentExpression(tree);
	      var left = this.transformAny(tree.left);
	      var right = this.transformAny(tree.right);
	      if (left === tree.left && right === tree.right)
	        return tree;
	      if (tree.operator.type === OR)
	        return this.transformOr(left, right);
	      if (tree.operator.type === AND)
	        return this.transformAnd(left, right);
	      var expressions = $traceurRuntime.spread(getExpressions(left), getExpressions(right), [new BinaryExpression(tree.location, getResult(left), tree.operator, getResult(right))]);
	      return createCommaExpression(expressions);
	    },
	    transformAssignmentExpression: function(tree) {
	      var left = tree.left;
	      if (left.type === MEMBER_EXPRESSION)
	        return this.transformAssignMemberExpression(tree);
	      if (left.type === MEMBER_LOOKUP_EXPRESSION)
	        return this.transformAssignMemberLookupExpression(tree);
	      assert(tree.left.type === IDENTIFIER_EXPRESSION);
	      if (tree.operator.type === EQUAL) {
	        left = this.transformAny(left);
	        var right$__9 = this.transformAny(tree.right);
	        var expressions$__10 = $traceurRuntime.spread(getExpressions(right$__9), [createAssignmentExpression(left, getResult(right$__9)), getResult(right$__9)]);
	        return createCommaExpression(expressions$__10);
	      }
	      var right = this.transformAny(tree.right);
	      var tmp = this.addTempVar();
	      var binop = createOperatorToken(assignmentOperatorToBinaryOperator(tree.operator.type));
	      var expressions = $traceurRuntime.spread(getExpressions(right), [createAssignmentExpression(tmp, new BinaryExpression(tree.location, left, binop, getResult(right))), createAssignmentExpression(left, tmp), tmp]);
	      return createCommaExpression(expressions);
	    },
	    transformAssignMemberExpression: function(tree) {
	      var left = tree.left;
	      if (tree.operator.type === EQUAL) {
	        var operand$__11 = this.transformAny(left.operand);
	        var right$__12 = this.transformAny(tree.right);
	        var expressions$__13 = $traceurRuntime.spread(getExpressions(operand$__11), getExpressions(right$__12), [new BinaryExpression(tree.location, new MemberExpression(left.location, getResult(operand$__11), left.memberName), tree.operator, getResult(right$__12)), getResult(right$__12)]);
	        return createCommaExpression(expressions$__13);
	      }
	      var operand = this.transformAny(left.operand);
	      var right = this.transformAny(tree.right);
	      var tmp = this.addTempVar();
	      var memberExpression = new MemberExpression(left.location, getResult(operand), left.memberName);
	      var tmp2 = this.addTempVar();
	      var binop = createOperatorToken(assignmentOperatorToBinaryOperator(tree.operator.type));
	      var expressions = $traceurRuntime.spread(getExpressions(operand), getExpressions(right), [createAssignmentExpression(tmp, memberExpression), createAssignmentExpression(tmp2, new BinaryExpression(tree.location, tmp, binop, getResult(right))), createAssignmentExpression(memberExpression, tmp2), tmp2]);
	      return createCommaExpression(expressions);
	    },
	    transformAssignMemberLookupExpression: function(tree) {
	      var left = tree.left;
	      if (tree.operator.type === EQUAL) {
	        var operand$__14 = this.transformAny(left.operand);
	        var memberExpression$__15 = this.transformAny(left.memberExpression);
	        var right$__16 = this.transformAny(tree.right);
	        var expressions$__17 = $traceurRuntime.spread(getExpressions(operand$__14), getExpressions(memberExpression$__15), getExpressions(right$__16), [new BinaryExpression(tree.location, new MemberLookupExpression(left.location, getResult(operand$__14), getResult(memberExpression$__15)), tree.operator, getResult(right$__16)), getResult(right$__16)]);
	        return createCommaExpression(expressions$__17);
	      }
	      var operand = this.transformAny(left.operand);
	      var memberExpression = this.transformAny(left.memberExpression);
	      var right = this.transformAny(tree.right);
	      var tmp = this.addTempVar();
	      var memberLookupExpression = new MemberLookupExpression(left.location, getResult(operand), getResult(memberExpression));
	      var tmp2 = this.addTempVar();
	      var binop = createOperatorToken(assignmentOperatorToBinaryOperator(tree.operator.type));
	      var expressions = $traceurRuntime.spread(getExpressions(operand), getExpressions(memberExpression), getExpressions(right), [createAssignmentExpression(tmp, memberLookupExpression), createAssignmentExpression(tmp2, new BinaryExpression(tree.location, tmp, binop, getResult(right))), createAssignmentExpression(memberLookupExpression, tmp2), tmp2]);
	      return createCommaExpression(expressions);
	    },
	    transformArrayLiteralExpression: function(tree) {
	      var elements = this.transformList(tree.elements);
	      if (elements === tree.elements)
	        return tree;
	      var builder = this.createCommaExpressionBuilder();
	      var results = [];
	      for (var i = 0; i < elements.length; i++) {
	        builder.add(elements[i]);
	        results.push(getResult(elements[i]));
	      }
	      return builder.build(new ArrayLiteralExpression(tree.location, results));
	    },
	    transformObjectLiteralExpression: function(tree) {
	      var propertyNameAndValues = this.transformList(tree.propertyNameAndValues);
	      if (propertyNameAndValues === tree.propertyNameAndValues)
	        return tree;
	      var builder = this.createCommaExpressionBuilder();
	      var results = [];
	      for (var i = 0; i < propertyNameAndValues.length; i++) {
	        if (propertyNameAndValues[i].type === PROPERTY_NAME_ASSIGNMENT) {
	          builder.add(propertyNameAndValues[i].value);
	          results.push(new PropertyNameAssignment(propertyNameAndValues[i].location, propertyNameAndValues[i].name, getResult(propertyNameAndValues[i].value)));
	        } else {
	          results.push(propertyNameAndValues[i]);
	        }
	      }
	      return builder.build(new ObjectLiteralExpression(tree.location, results));
	    },
	    transformTemplateLiteralExpression: function(tree) {
	      var operand = this.transformAny(tree.operand);
	      var elements = this.transformList(tree.elements);
	      if (!operand && operand === tree.operand && elements === tree.elements)
	        return tree;
	      var builder = this.createCommaExpressionBuilder();
	      if (operand)
	        builder.add(operand);
	      var results = [];
	      for (var i = 0; i < elements.length; i++) {
	        if (elements[i].type === TEMPLATE_LITERAL_PORTION) {
	          results.push(elements[i]);
	        } else {
	          var expression = elements[i].expression;
	          builder.add(expression);
	          var result = getResult(expression);
	          results.push(new TemplateSubstitution(expression.location, result));
	        }
	      }
	      return builder.build(new TemplateLiteralExpression(tree.location, operand && getResult(operand), results));
	    },
	    transformCallExpression: function(tree) {
	      if (tree.operand.type === MEMBER_EXPRESSION)
	        return this.transformCallMemberExpression(tree);
	      if (tree.operand.type === MEMBER_LOOKUP_EXPRESSION)
	        return this.transformCallMemberLookupExpression(tree);
	      return this.transformCallAndNew_(tree, CallExpression);
	    },
	    transformNewExpression: function(tree) {
	      return this.transformCallAndNew_(tree, NewExpression);
	    },
	    transformCallAndNew_: function(tree, ctor) {
	      var operand = this.transformAny(tree.operand);
	      var args = this.transformAny(tree.args);
	      var builder = this.createCommaExpressionBuilder().add(operand);
	      var argResults = [];
	      args.args.forEach((function(arg) {
	        builder.add(arg);
	        argResults.push(getResult(arg));
	      }));
	      return builder.build(new ctor(tree.location, getResult(operand), new ArgumentList(args.location, argResults)));
	    },
	    transformCallMemberExpression: function(tree) {
	      var memberName = tree.operand.memberName;
	      var operand = this.transformAny(tree.operand.operand);
	      var tmp = this.addTempVar();
	      var memberExpresssion = new MemberExpression(tree.operand.location, getResult(operand), memberName);
	      var args = this.transformAny(tree.args);
	      var expressions = $traceurRuntime.spread(getExpressions(operand), [createAssignmentExpression(tmp, memberExpresssion)]);
	      var argResults = [getResult(operand)];
	      args.args.forEach((function(arg) {
	        var $__8;
	        ($__8 = expressions).push.apply($__8, $traceurRuntime.spread(getExpressions(arg)));
	        argResults.push(getResult(arg));
	      }));
	      var callExpression = new CallExpression(tree.location, createMemberExpression(tmp, 'call'), new ArgumentList(args.location, argResults));
	      var tmp2 = this.addTempVar();
	      expressions.push(createAssignmentExpression(tmp2, callExpression), tmp2);
	      return createCommaExpression(expressions);
	    },
	    transformCallMemberLookupExpression: function(tree) {
	      var operand = this.transformAny(tree.operand.operand);
	      var memberExpression = this.transformAny(tree.operand.memberExpression);
	      var tmp = this.addTempVar();
	      var lookupExpresssion = new MemberLookupExpression(tree.operand.location, getResult(operand), getResult(memberExpression));
	      var args = this.transformAny(tree.args);
	      var expressions = $traceurRuntime.spread(getExpressions(operand), getExpressions(memberExpression), [createAssignmentExpression(tmp, lookupExpresssion)]);
	      var argResults = [getResult(operand)];
	      args.args.forEach((function(arg, i) {
	        var $__8;
	        ($__8 = expressions).push.apply($__8, $traceurRuntime.spread(getExpressions(arg)));
	        var result = getResult(arg);
	        if (tree.args.args[i].type === SPREAD_EXPRESSION)
	          result = new SpreadExpression(arg.location, result);
	        argResults.push(result);
	      }));
	      var callExpression = new CallExpression(tree.location, createMemberExpression(tmp, 'call'), new ArgumentList(args.location, argResults));
	      var tmp2 = this.addTempVar();
	      expressions.push(createAssignmentExpression(tmp2, callExpression), tmp2);
	      return createCommaExpression(expressions);
	    },
	    transformConditionalExpression: function(tree) {
	      var condition = this.transformAny(tree.condition);
	      var left = this.transformAny(tree.left);
	      var right = this.transformAny(tree.right);
	      if (condition === tree.condition && left === tree.left && right === tree.right)
	        return tree;
	      var res = this.addTempVar();
	      var leftTree = createCommaExpression($traceurRuntime.spread(getExpressions(left), [createAssignmentExpression(res, getResult(left))]));
	      var rightTree = createCommaExpression($traceurRuntime.spread(getExpressions(right), [createAssignmentExpression(res, getResult(right))]));
	      var expressions = $traceurRuntime.spread(getExpressions(condition), [new ConditionalExpression(tree.location, getResult(condition), createParenExpression(leftTree), createParenExpression(rightTree)), res]);
	      return createCommaExpression(expressions);
	    },
	    transformOr: function(left, right) {
	      var res = this.addTempVar();
	      var leftTree = createCommaExpression([createAssignmentExpression(res, getResult(left))]);
	      var rightTree = createCommaExpression($traceurRuntime.spread(getExpressions(right), [createAssignmentExpression(res, getResult(right))]));
	      var expressions = $traceurRuntime.spread(getExpressions(left), [new ConditionalExpression(left.location, getResult(left), createParenExpression(leftTree), createParenExpression(rightTree)), res]);
	      return createCommaExpression(expressions);
	    },
	    transformAnd: function(left, right) {
	      var res = this.addTempVar();
	      var leftTree = createCommaExpression($traceurRuntime.spread(getExpressions(right), [createAssignmentExpression(res, getResult(right))]));
	      var rightTree = createCommaExpression([createAssignmentExpression(res, getResult(left))]);
	      var expressions = $traceurRuntime.spread(getExpressions(left), [new ConditionalExpression(left.location, getResult(left), createParenExpression(leftTree), createParenExpression(rightTree)), res]);
	      return createCommaExpression(expressions);
	    },
	    transformSpreadExpression: function(tree) {
	      var expression = this.transformAny(tree.expression);
	      if (expression === tree.expression)
	        return tree;
	      var result = getResult(expression);
	      if (result.type !== SPREAD_EXPRESSION)
	        result = new SpreadExpression(result.location, result);
	      var expressions = $traceurRuntime.spread(getExpressions(expression), [result]);
	      return createCommaExpression(expressions);
	    },
	    createCommaExpressionBuilder: function() {
	      return new CommaExpressionBuilder(this.addTempVar());
	    }
	  }, {}, ParseTreeTransformer);
	  return {get ExplodeExpressionTransformer() {
	      return ExplodeExpressionTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/SuperTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/SuperTransformer.js";
	  var $__0 = Object.freeze(Object.defineProperties(["$traceurRuntime.superConstructor(", ").call(", ")"], {raw: {value: Object.freeze(["$traceurRuntime.superConstructor(", ").call(", ")"])}})),
	      $__1 = Object.freeze(Object.defineProperties(["", ".call(", ")"], {raw: {value: Object.freeze(["", ".call(", ")"])}})),
	      $__2 = Object.freeze(Object.defineProperties(["$traceurRuntime.superGet(", ", ", ", ", ")"], {raw: {value: Object.freeze(["$traceurRuntime.superGet(", ", ", ", ", ")"])}})),
	      $__3 = Object.freeze(Object.defineProperties(["$traceurRuntime.superSet(", ", ", ", ", ",\n                                    ", ")"], {raw: {value: Object.freeze(["$traceurRuntime.superSet(", ", ", ", ", ",\n                                    ", ")"])}}));
	  var ExplodeExpressionTransformer = System.get("traceur@0.0.87/src/codegeneration/ExplodeExpressionTransformer.js").ExplodeExpressionTransformer;
	  var $__5 = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js"),
	      FunctionDeclaration = $__5.FunctionDeclaration,
	      FunctionExpression = $__5.FunctionExpression;
	  var $__6 = System.get("traceur@0.0.87/src/syntax/trees/ParseTreeType.js"),
	      MEMBER_EXPRESSION = $__6.MEMBER_EXPRESSION,
	      MEMBER_LOOKUP_EXPRESSION = $__6.MEMBER_LOOKUP_EXPRESSION,
	      SUPER_EXPRESSION = $__6.SUPER_EXPRESSION;
	  var ParseTreeTransformer = System.get("traceur@0.0.87/src/codegeneration/ParseTreeTransformer.js").ParseTreeTransformer;
	  var $__8 = System.get("traceur@0.0.87/src/syntax/TokenType.js"),
	      EQUAL = $__8.EQUAL,
	      MINUS_MINUS = $__8.MINUS_MINUS,
	      PLUS_PLUS = $__8.PLUS_PLUS;
	  var $__9 = System.get("traceur@0.0.87/src/codegeneration/ParseTreeFactory.js"),
	      createArgumentList = $__9.createArgumentList,
	      createIdentifierExpression = $__9.createIdentifierExpression,
	      createParenExpression = $__9.createParenExpression,
	      createStringLiteral = $__9.createStringLiteral,
	      createThisExpression = $__9.createThisExpression;
	  var parseExpression = System.get("traceur@0.0.87/src/codegeneration/PlaceholderParser.js").parseExpression;
	  var ExplodeSuperExpression = function ExplodeSuperExpression() {
	    $traceurRuntime.superConstructor($ExplodeSuperExpression).apply(this, arguments);
	    ;
	  };
	  var $ExplodeSuperExpression = ExplodeSuperExpression;
	  ($traceurRuntime.createClass)(ExplodeSuperExpression, {
	    transformArrowFunctionExpression: function(tree) {
	      return tree;
	    },
	    transformClassExpression: function(tree) {
	      return tree;
	    },
	    transformFunctionBody: function(tree) {
	      return tree;
	    }
	  }, {}, ExplodeExpressionTransformer);
	  var SuperTransformer = function SuperTransformer(tempVarTransformer, protoName, thisName, internalName) {
	    $traceurRuntime.superConstructor($SuperTransformer).call(this);
	    this.tempVarTransformer_ = tempVarTransformer;
	    this.protoName_ = protoName;
	    this.internalName_ = internalName;
	    this.superCount_ = 0;
	    this.thisVar_ = createIdentifierExpression(thisName);
	    this.inNestedFunc_ = 0;
	    this.nestedSuperCount_ = 0;
	  };
	  var $SuperTransformer = SuperTransformer;
	  ($traceurRuntime.createClass)(SuperTransformer, {
	    get hasSuper() {
	      return this.superCount_ > 0;
	    },
	    get nestedSuper() {
	      return this.nestedSuperCount_ > 0;
	    },
	    transformFunctionDeclaration: function(tree) {
	      return this.transformFunction_(tree, FunctionDeclaration);
	    },
	    transformFunctionExpression: function(tree) {
	      return this.transformFunction_(tree, FunctionExpression);
	    },
	    transformFunction_: function(tree, constructor) {
	      var oldSuperCount = this.superCount_;
	      this.inNestedFunc_++;
	      var transformedTree = constructor === FunctionExpression ? $traceurRuntime.superGet(this, $SuperTransformer.prototype, "transformFunctionExpression").call(this, tree) : $traceurRuntime.superGet(this, $SuperTransformer.prototype, "transformFunctionDeclaration").call(this, tree);
	      this.inNestedFunc_--;
	      if (oldSuperCount !== this.superCount_)
	        this.nestedSuperCount_ += this.superCount_ - oldSuperCount;
	      return transformedTree;
	    },
	    transformGetAccessor: function(tree) {
	      return tree;
	    },
	    transformSetAccessor: function(tree) {
	      return tree;
	    },
	    transformPropertyMethodAssignment: function(tree) {
	      return tree;
	    },
	    transformCallExpression: function(tree) {
	      if (tree.operand.type === SUPER_EXPRESSION) {
	        this.superCount_++;
	        return this.createSuperCall_(tree);
	      }
	      if (hasSuperMemberExpression(tree.operand)) {
	        this.superCount_++;
	        var name;
	        if (tree.operand.type === MEMBER_EXPRESSION)
	          name = tree.operand.memberName.value;
	        else
	          name = tree.operand.memberExpression;
	        return this.createSuperCallMethod_(name, tree);
	      }
	      return $traceurRuntime.superGet(this, $SuperTransformer.prototype, "transformCallExpression").call(this, tree);
	    },
	    createSuperCall_: function(tree) {
	      var thisExpr = this.inNestedFunc_ ? this.thisVar_ : createThisExpression();
	      var args = createArgumentList($traceurRuntime.spread([thisExpr], tree.args.args));
	      return parseExpression($__0, this.internalName_, args);
	    },
	    createSuperCallMethod_: function(methodName, tree) {
	      var thisExpr = this.inNestedFunc_ ? this.thisVar_ : createThisExpression();
	      var operand = this.transformMemberShared_(methodName);
	      var args = createArgumentList($traceurRuntime.spread([thisExpr], tree.args.args));
	      return parseExpression($__1, operand, args);
	    },
	    transformMemberShared_: function(name) {
	      var thisExpr = this.inNestedFunc_ ? this.thisVar_ : createThisExpression();
	      return parseExpression($__2, thisExpr, this.protoName_, name);
	    },
	    transformMemberExpression: function(tree) {
	      if (tree.operand.type === SUPER_EXPRESSION) {
	        this.superCount_++;
	        return this.transformMemberShared_(tree.memberName.value);
	      }
	      return $traceurRuntime.superGet(this, $SuperTransformer.prototype, "transformMemberExpression").call(this, tree);
	    },
	    transformMemberLookupExpression: function(tree) {
	      if (tree.operand.type === SUPER_EXPRESSION)
	        return this.transformMemberShared_(tree.memberExpression);
	      return $traceurRuntime.superGet(this, $SuperTransformer.prototype, "transformMemberLookupExpression").call(this, tree);
	    },
	    transformBinaryExpression: function(tree) {
	      if (tree.operator.isAssignmentOperator() && hasSuperMemberExpression(tree.left)) {
	        if (tree.operator.type !== EQUAL) {
	          var exploded = new ExplodeSuperExpression(this.tempVarTransformer_).transformAny(tree);
	          return this.transformAny(createParenExpression(exploded));
	        }
	        this.superCount_++;
	        var name = tree.left.type === MEMBER_LOOKUP_EXPRESSION ? tree.left.memberExpression : createStringLiteral(tree.left.memberName.value);
	        var thisExpr = this.inNestedFunc_ ? this.thisVar_ : createThisExpression();
	        var right = this.transformAny(tree.right);
	        return parseExpression($__3, thisExpr, this.protoName_, name, right);
	      }
	      return $traceurRuntime.superGet(this, $SuperTransformer.prototype, "transformBinaryExpression").call(this, tree);
	    },
	    transformUnaryExpression: function(tree) {
	      var transformed = this.transformIncrementDecrement_(tree);
	      if (transformed)
	        return transformed;
	      return $traceurRuntime.superGet(this, $SuperTransformer.prototype, "transformUnaryExpression").call(this, tree);
	    },
	    transformPostfixExpression: function(tree) {
	      var transformed = this.transformIncrementDecrement_(tree);
	      if (transformed)
	        return transformed;
	      return $traceurRuntime.superGet(this, $SuperTransformer.prototype, "transformPostfixExpression").call(this, tree);
	    },
	    transformIncrementDecrement_: function(tree) {
	      var operator = tree.operator;
	      var operand = tree.operand;
	      if ((operator.type === PLUS_PLUS || operator.type === MINUS_MINUS) && hasSuperMemberExpression(operand)) {
	        var exploded = new ExplodeSuperExpression(this.tempVarTransformer_).transformAny(tree);
	        if (exploded !== tree)
	          exploded = createParenExpression(exploded);
	        return this.transformAny(exploded);
	      }
	      return null;
	    }
	  }, {}, ParseTreeTransformer);
	  function hasSuperMemberExpression(tree) {
	    if (tree.type !== MEMBER_EXPRESSION && tree.type !== MEMBER_LOOKUP_EXPRESSION)
	      return false;
	    return tree.operand.type === SUPER_EXPRESSION;
	  }
	  return {get SuperTransformer() {
	      return SuperTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/ClassTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/ClassTransformer.js";
	  var $__0 = Object.freeze(Object.defineProperties(["($traceurRuntime.createClass)(", ", ", ", ", ",\n                                       ", ")"], {raw: {value: Object.freeze(["($traceurRuntime.createClass)(", ", ", ", ", ",\n                                       ", ")"])}})),
	      $__1 = Object.freeze(Object.defineProperties(["($traceurRuntime.createClass)(", ", ", ", ", ")"], {raw: {value: Object.freeze(["($traceurRuntime.createClass)(", ", ", ", ", ")"])}})),
	      $__2 = Object.freeze(Object.defineProperties(["var ", " = ", ""], {raw: {value: Object.freeze(["var ", " = ", ""])}})),
	      $__3 = Object.freeze(Object.defineProperties(["var ", " = ", ""], {raw: {value: Object.freeze(["var ", " = ", ""])}})),
	      $__4 = Object.freeze(Object.defineProperties(["function($__super) {\n          var ", " = ", ";\n          return ($traceurRuntime.createClass)(", ", ", ",\n                                               ", ", $__super);\n        }(", ")"], {raw: {value: Object.freeze(["function($__super) {\n          var ", " = ", ";\n          return ($traceurRuntime.createClass)(", ", ", ",\n                                               ", ", $__super);\n        }(", ")"])}})),
	      $__5 = Object.freeze(Object.defineProperties(["function() {\n          var ", " = ", ";\n          return ($traceurRuntime.createClass)(", ", ", ",\n                                               ", ");\n        }()"], {raw: {value: Object.freeze(["function() {\n          var ", " = ", ";\n          return ($traceurRuntime.createClass)(", ", ", ",\n                                               ", ");\n        }()"])}})),
	      $__6 = Object.freeze(Object.defineProperties(["$traceurRuntime.superConstructor(\n          ", ").apply(this, arguments)"], {raw: {value: Object.freeze(["$traceurRuntime.superConstructor(\n          ", ").apply(this, arguments)"])}}));
	  var AlphaRenamer = System.get("traceur@0.0.87/src/codegeneration/AlphaRenamer.js").AlphaRenamer;
	  var CONSTRUCTOR = System.get("traceur@0.0.87/src/syntax/PredefinedName.js").CONSTRUCTOR;
	  var $__9 = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js"),
	      AnonBlock = $__9.AnonBlock,
	      ExportDeclaration = $__9.ExportDeclaration,
	      FunctionExpression = $__9.FunctionExpression,
	      GetAccessor = $__9.GetAccessor,
	      PropertyMethodAssignment = $__9.PropertyMethodAssignment,
	      SetAccessor = $__9.SetAccessor;
	  var $__10 = System.get("traceur@0.0.87/src/codegeneration/ParseTreeFactory.js"),
	      createBindingIdentifier = $__10.createBindingIdentifier,
	      createIdentifierToken = $__10.createIdentifierToken;
	  var $__11 = System.get("traceur@0.0.87/src/syntax/trees/ParseTreeType.js"),
	      COMPUTED_PROPERTY_NAME = $__11.COMPUTED_PROPERTY_NAME,
	      GET_ACCESSOR = $__11.GET_ACCESSOR,
	      PROPERTY_METHOD_ASSIGNMENT = $__11.PROPERTY_METHOD_ASSIGNMENT,
	      PROPERTY_VARIABLE_DECLARATION = $__11.PROPERTY_VARIABLE_DECLARATION,
	      SET_ACCESSOR = $__11.SET_ACCESSOR;
	  var SuperTransformer = System.get("traceur@0.0.87/src/codegeneration/SuperTransformer.js").SuperTransformer;
	  var TempVarTransformer = System.get("traceur@0.0.87/src/codegeneration/TempVarTransformer.js").TempVarTransformer;
	  var $__14 = System.get("traceur@0.0.87/src/syntax/TokenType.js"),
	      VAR = $__14.VAR,
	      STRING = $__14.STRING;
	  var MakeStrictTransformer = System.get("traceur@0.0.87/src/codegeneration/MakeStrictTransformer.js").MakeStrictTransformer;
	  var $__16 = System.get("traceur@0.0.87/src/codegeneration/ParseTreeFactory.js"),
	      createEmptyParameterList = $__16.createEmptyParameterList,
	      createExpressionStatement = $__16.createExpressionStatement,
	      createFunctionBody = $__16.createFunctionBody,
	      id = $__16.createIdentifierExpression,
	      createMemberExpression = $__16.createMemberExpression,
	      createObjectLiteralExpression = $__16.createObjectLiteralExpression,
	      createParenExpression = $__16.createParenExpression,
	      createPropertyNameAssignment = $__16.createPropertyNameAssignment,
	      createThisExpression = $__16.createThisExpression,
	      createVariableStatement = $__16.createVariableStatement;
	  var hasUseStrict = System.get("traceur@0.0.87/src/semantics/util.js").hasUseStrict;
	  var $__18 = System.get("traceur@0.0.87/src/codegeneration/PlaceholderParser.js"),
	      parseExpression = $__18.parseExpression,
	      parseStatement = $__18.parseStatement,
	      parseStatements = $__18.parseStatements;
	  var propName = System.get("traceur@0.0.87/src/staticsemantics/PropName.js").propName;
	  var prependStatements = System.get("traceur@0.0.87/src/codegeneration/PrependStatements.js").prependStatements;
	  var $__21 = System.get("traceur@0.0.87/src/codegeneration/MemberVariableConstructorTransformer.js"),
	      transformConstructor = $__21.transformConstructor,
	      getInstanceInitExpression = $__21.getInstanceInitExpression;
	  function classCall(func, object, staticObject, superClass) {
	    if (superClass) {
	      return parseExpression($__0, func, object, staticObject, superClass);
	    }
	    return parseExpression($__1, func, object, staticObject);
	  }
	  function methodNameFromTree(tree) {
	    if (tree.type === COMPUTED_PROPERTY_NAME) {
	      return '';
	    }
	    if (tree.literalToken && tree.literalToken.type === STRING) {
	      return tree.getStringValue().substr(1, -1);
	    }
	    return tree.getStringValue();
	  }
	  function classMethodDebugName(className, methodName, isStatic) {
	    if (isStatic) {
	      return createBindingIdentifier('$__' + className + '_' + methodName);
	    }
	    return createBindingIdentifier('$__' + className + '_prototype_' + methodName);
	  }
	  var ClassTransformer = function ClassTransformer(identifierGenerator, reporter, options) {
	    $traceurRuntime.superConstructor($ClassTransformer).call(this, identifierGenerator);
	    this.strictCount_ = 0;
	    this.state_ = null;
	    this.reporter_ = reporter;
	    this.showDebugNames_ = options.debugNames;
	  };
	  var $ClassTransformer = ClassTransformer;
	  ($traceurRuntime.createClass)(ClassTransformer, {
	    transformExportDeclaration: function(tree) {
	      var transformed = $traceurRuntime.superGet(this, $ClassTransformer.prototype, "transformExportDeclaration").call(this, tree);
	      if (transformed === tree)
	        return tree;
	      var declaration = transformed.declaration;
	      if (declaration instanceof AnonBlock) {
	        var statements = $traceurRuntime.spread([new ExportDeclaration(null, declaration.statements[0], [])], declaration.statements.slice(1));
	        return new AnonBlock(null, statements);
	      }
	      return transformed;
	    },
	    transformModule: function(tree) {
	      this.strictCount_ = 1;
	      return $traceurRuntime.superGet(this, $ClassTransformer.prototype, "transformModule").call(this, tree);
	    },
	    transformScript: function(tree) {
	      this.strictCount_ = +hasUseStrict(tree.scriptItemList);
	      return $traceurRuntime.superGet(this, $ClassTransformer.prototype, "transformScript").call(this, tree);
	    },
	    transformFunctionBody: function(tree) {
	      var useStrict = +hasUseStrict(tree.statements);
	      this.strictCount_ += useStrict;
	      var result = $traceurRuntime.superGet(this, $ClassTransformer.prototype, "transformFunctionBody").call(this, tree);
	      this.strictCount_ -= useStrict;
	      return result;
	    },
	    makeStrict_: function(tree) {
	      if (this.strictCount_)
	        return tree;
	      return MakeStrictTransformer.transformTree(tree);
	    },
	    transformClassElements_: function(tree, internalName, originalName) {
	      var $__22 = this;
	      var oldState = this.state_;
	      this.state_ = {hasSuper: false};
	      var superClass = this.transformAny(tree.superClass);
	      var protoElements = [],
	          staticElements = [];
	      var initInstanceVars = [],
	          initStaticVars = [];
	      var constructor;
	      tree.elements.forEach((function(tree) {
	        var elements,
	            homeObject,
	            initVars;
	        if (tree.isStatic) {
	          elements = staticElements;
	          homeObject = internalName;
	          initVars = initStaticVars;
	        } else {
	          elements = protoElements;
	          homeObject = createMemberExpression(internalName, 'prototype');
	          initVars = initInstanceVars;
	        }
	        switch (tree.type) {
	          case GET_ACCESSOR:
	            elements.push($__22.transformGetAccessor_(tree, homeObject));
	            break;
	          case SET_ACCESSOR:
	            elements.push($__22.transformSetAccessor_(tree, homeObject));
	            break;
	          case PROPERTY_METHOD_ASSIGNMENT:
	            if (!tree.isStatic && propName(tree) === CONSTRUCTOR) {
	              constructor = tree;
	            } else {
	              var transformed = $__22.transformPropertyMethodAssignment_(tree, homeObject, internalName, originalName);
	              elements.push(transformed);
	            }
	            break;
	          case PROPERTY_VARIABLE_DECLARATION:
	            tree = $__22.transformAny(tree);
	            if (tree.initializer !== null) {
	              initVars.push(tree);
	            }
	            break;
	          default:
	            throw new Error(("Unexpected class element: " + tree.type));
	        }
	      }));
	      var object = createObjectLiteralExpression(protoElements);
	      var staticObject = createObjectLiteralExpression(staticElements);
	      var initExpression = getInstanceInitExpression(initInstanceVars);
	      var func;
	      if (!constructor) {
	        func = this.getDefaultConstructor_(tree, internalName, initExpression);
	      } else {
	        if (initInstanceVars.length > 0) {
	          constructor = transformConstructor(constructor, initExpression, tree.superClass);
	        }
	        var homeObject = createMemberExpression(internalName, 'prototype');
	        var transformedCtor = this.transformPropertyMethodAssignment_(constructor, homeObject, internalName);
	        func = new FunctionExpression(tree.location, tree.name, false, transformedCtor.parameterList, null, [], transformedCtor.body);
	      }
	      var state = this.state_;
	      this.state_ = oldState;
	      return {
	        func: func,
	        superClass: superClass,
	        object: object,
	        staticObject: staticObject,
	        hasSuper: state.hasSuper,
	        initStaticVars: initStaticVars
	      };
	    },
	    transformClassDeclaration: function(tree) {
	      var name = tree.name.identifierToken;
	      var internalName = id(("$" + name));
	      var renamed = AlphaRenamer.rename(tree, name.value, internalName.identifierToken.value);
	      var referencesClassName = renamed !== tree;
	      tree = renamed;
	      var $__24 = this.transformClassElements_(tree, internalName, name),
	          func = $__24.func,
	          hasSuper = $__24.hasSuper,
	          object = $__24.object,
	          staticObject = $__24.staticObject,
	          superClass = $__24.superClass,
	          initStaticVars = $__24.initStaticVars;
	      var statements = parseStatements($__2, name, func);
	      staticObject = appendStaticInitializers(staticObject, initStaticVars);
	      var expr = classCall(name, object, staticObject, superClass);
	      if (hasSuper || referencesClassName) {
	        statements.push(parseStatement($__3, internalName, name));
	      }
	      statements.push(createExpressionStatement(expr));
	      var anonBlock = new AnonBlock(null, statements);
	      return this.makeStrict_(anonBlock);
	    },
	    transformClassExpression: function(tree) {
	      this.pushTempScope();
	      var name;
	      if (tree.name)
	        name = tree.name.identifierToken;
	      else
	        name = createIdentifierToken(this.getTempIdentifier());
	      var internalName = id(("" + name));
	      var $__24 = this.transformClassElements_(tree, internalName, name),
	          func = $__24.func,
	          hasSuper = $__24.hasSuper,
	          object = $__24.object,
	          staticObject = $__24.staticObject,
	          superClass = $__24.superClass,
	          initStaticVars = $__24.initStaticVars;
	      var expression;
	      staticObject = appendStaticInitializers(staticObject, initStaticVars);
	      if (hasSuper || tree.name) {
	        if (superClass) {
	          expression = parseExpression($__4, internalName, func, internalName, object, staticObject, superClass);
	        } else {
	          expression = parseExpression($__5, internalName, func, internalName, object, staticObject);
	        }
	      } else {
	        expression = classCall(func, object, staticObject, superClass);
	      }
	      this.popTempScope();
	      return createParenExpression(this.makeStrict_(expression));
	    },
	    transformPropertyMethodAssignment_: function(tree, homeObject, internalName, originalName) {
	      var parameterList = this.transformAny(tree.parameterList);
	      var body = this.transformSuperInFunctionBody_(tree.body, homeObject, internalName);
	      if (this.showDebugNames_) {
	        tree.debugName = classMethodDebugName(originalName, methodNameFromTree(tree.name), isStatic);
	      }
	      if (!tree.isStatic && parameterList === tree.parameterList && body === tree.body) {
	        return tree;
	      }
	      var isStatic = false;
	      return new PropertyMethodAssignment(tree.location, isStatic, tree.functionKind, tree.name, parameterList, tree.typeAnnotation, tree.annotations, body, tree.debugName);
	    },
	    transformGetAccessor_: function(tree, homeObject) {
	      var body = this.transformSuperInFunctionBody_(tree.body, homeObject);
	      if (!tree.isStatic && body === tree.body)
	        return tree;
	      return new GetAccessor(tree.location, false, tree.name, tree.typeAnnotation, tree.annotations, body);
	    },
	    transformSetAccessor_: function(tree, homeObject) {
	      var parameterList = this.transformAny(tree.parameterList);
	      var body = this.transformSuperInFunctionBody_(tree.body, homeObject);
	      if (!tree.isStatic && body === tree.body)
	        return tree;
	      return new SetAccessor(tree.location, false, tree.name, parameterList, tree.annotations, body);
	    },
	    transformSuperInFunctionBody_: function(tree, homeObject, internalName) {
	      this.pushTempScope();
	      var thisName = this.getTempIdentifier();
	      var thisDecl = createVariableStatement(VAR, thisName, createThisExpression());
	      var superTransformer = new SuperTransformer(this, homeObject, thisName, internalName);
	      var transformedTree = superTransformer.transformFunctionBody(this.transformFunctionBody(tree));
	      if (superTransformer.hasSuper)
	        this.state_.hasSuper = true;
	      this.popTempScope();
	      if (superTransformer.nestedSuper)
	        return createFunctionBody([thisDecl].concat(transformedTree.statements));
	      return transformedTree;
	    },
	    getDefaultConstructor_: function(tree, internalName, initExpression) {
	      var constructorParams = createEmptyParameterList();
	      var constructorBody;
	      var initStatement = createExpressionStatement(initExpression);
	      if (tree.superClass) {
	        var statement = parseStatement($__6, internalName);
	        constructorBody = createFunctionBody([statement, initStatement]);
	        this.state_.hasSuper = true;
	      } else {
	        constructorBody = createFunctionBody([initStatement]);
	      }
	      return new FunctionExpression(tree.location, tree.name, false, constructorParams, null, [], constructorBody);
	    },
	    transformConstructorWithInitializer_: function(constructor, initExpression, superClass) {
	      if (superClass) {
	        var transformer = new SuperExpressionTransformer(initExpression);
	        return transformer.transformAny(constructor);
	      }
	      var statements = constructor.body.statements;
	      var initStatement = createExpressionStatement(initExpression);
	      statements = prependStatements(statements, initStatement);
	      return new PropertyMethodAssignment(constructor.location, false, constructor.functionKind, constructor.name, constructor.parameterList, constructor.typeAnnotation, constructor.annotations, createFunctionBody(statements));
	    }
	  }, {}, TempVarTransformer);
	  function appendStaticInitializers(staticObject, initStaticMemberVars) {
	    if (initStaticMemberVars.length === 0)
	      return staticObject;
	    var properties = initStaticMemberVars.map((function(mv) {
	      return createPropertyNameAssignment(mv.name, mv.initializer);
	    }));
	    return createObjectLiteralExpression(staticObject.propertyNameAndValues.concat(properties));
	  }
	  return {get ClassTransformer() {
	      return ClassTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/ClosureModuleTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/ClosureModuleTransformer.js";
	  var $__0 = Object.freeze(Object.defineProperties(["goog.module(", ");"], {raw: {value: Object.freeze(["goog.module(", ");"])}})),
	      $__1 = Object.freeze(Object.defineProperties(["exports = ", ""], {raw: {value: Object.freeze(["exports = ", ""])}})),
	      $__2 = Object.freeze(Object.defineProperties(["goog.require(", ")"], {raw: {value: Object.freeze(["goog.require(", ")"])}}));
	  var ModuleTransformer = System.get("traceur@0.0.87/src/codegeneration/ModuleTransformer.js").ModuleTransformer;
	  var $__4 = System.get("traceur@0.0.87/src/codegeneration/ParseTreeFactory.js"),
	      createIdentifierExpression = $__4.createIdentifierExpression,
	      createMemberExpression = $__4.createMemberExpression,
	      createPropertyNameAssignment = $__4.createPropertyNameAssignment;
	  var $__5 = System.get("traceur@0.0.87/src/syntax/trees/ParseTreeType.js"),
	      EXPORT_DEFAULT = $__5.EXPORT_DEFAULT,
	      EXPORT_SPECIFIER = $__5.EXPORT_SPECIFIER;
	  var $__6 = System.get("traceur@0.0.87/src/codegeneration/PlaceholderParser.js"),
	      parseExpression = $__6.parseExpression,
	      parseStatement = $__6.parseStatement,
	      parseStatements = $__6.parseStatements;
	  var prependStatements = System.get("traceur@0.0.87/src/codegeneration/PrependStatements.js").prependStatements;
	  var ClosureModuleTransformer = function ClosureModuleTransformer() {
	    $traceurRuntime.superConstructor($ClosureModuleTransformer).apply(this, arguments);
	    ;
	  };
	  var $ClosureModuleTransformer = ClosureModuleTransformer;
	  ($traceurRuntime.createClass)(ClosureModuleTransformer, {
	    moduleProlog: function() {
	      if (!this.moduleName) {
	        throw new Error('Closure modules (goog.module) require a moduleName');
	      }
	      return parseStatements($__0, this.moduleName);
	    },
	    wrapModule: function(statements) {
	      if (this.hasStarExports()) {
	        throw new Error('Closure modules (goog.module) do not support "export *"');
	      }
	      return statements;
	    },
	    appendExportStatement: function(statements) {
	      if (!this.hasExports())
	        return statements;
	      var exportObject = this.getExportObject();
	      statements.push(parseStatement($__1, exportObject));
	      return statements;
	    },
	    getGetterExport: function($__9) {
	      var $__10 = $__9,
	          name = $__10.name,
	          tree = $__10.tree,
	          moduleSpecifier = $__10.moduleSpecifier;
	      var expression;
	      switch (tree.type) {
	        case EXPORT_DEFAULT:
	          expression = createIdentifierExpression('$__default');
	          break;
	        case EXPORT_SPECIFIER:
	          if (moduleSpecifier) {
	            var idName = this.getTempVarNameForModuleSpecifier(moduleSpecifier);
	            expression = createMemberExpression(idName, tree.lhs);
	          } else {
	            expression = createPropertyNameAssignment(name, tree.lhs);
	          }
	          break;
	        default:
	          expression = createIdentifierExpression(name);
	          break;
	      }
	      return createPropertyNameAssignment(name, expression);
	    },
	    transformModuleSpecifier: function(tree) {
	      var moduleName = tree.token.processedValue;
	      return parseExpression($__2, moduleName);
	    }
	  }, {}, ModuleTransformer);
	  return {get ClosureModuleTransformer() {
	      return ClosureModuleTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/CommonJsModuleTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/CommonJsModuleTransformer.js";
	  var $__0 = Object.freeze(Object.defineProperties(["module.exports = function() {\n            ", "\n          }.call(", ");"], {raw: {value: Object.freeze(["module.exports = function() {\n            ", "\n          }.call(", ");"])}})),
	      $__1 = Object.freeze(Object.defineProperties(["Object.defineProperties(module.exports, ", ");"], {raw: {value: Object.freeze(["Object.defineProperties(module.exports, ", ");"])}})),
	      $__2 = Object.freeze(Object.defineProperties(["{get: ", "}"], {raw: {value: Object.freeze(["{get: ", "}"])}})),
	      $__3 = Object.freeze(Object.defineProperties(["{value: ", "}"], {raw: {value: Object.freeze(["{value: ", "}"])}})),
	      $__4 = Object.freeze(Object.defineProperties(["(", " = require(", "),\n        ", " && ", ".__esModule && ", " || {default: ", "})"], {raw: {value: Object.freeze(["(", " = require(", "),\n        ", " && ", ".__esModule && ", " || {default: ", "})"])}})),
	      $__5 = Object.freeze(Object.defineProperties(["__esModule: true"], {raw: {value: Object.freeze(["__esModule: true"])}}));
	  var ModuleTransformer = System.get("traceur@0.0.87/src/codegeneration/ModuleTransformer.js").ModuleTransformer;
	  var $__7 = System.get("traceur@0.0.87/src/syntax/trees/ParseTreeType.js"),
	      GET_ACCESSOR = $__7.GET_ACCESSOR,
	      OBJECT_LITERAL_EXPRESSION = $__7.OBJECT_LITERAL_EXPRESSION,
	      PROPERTY_NAME_ASSIGNMENT = $__7.PROPERTY_NAME_ASSIGNMENT,
	      RETURN_STATEMENT = $__7.RETURN_STATEMENT;
	  var assert = System.get("traceur@0.0.87/src/util/assert.js").assert;
	  var globalThis = System.get("traceur@0.0.87/src/codegeneration/globalThis.js").default;
	  var $__10 = System.get("traceur@0.0.87/src/codegeneration/PlaceholderParser.js"),
	      parseExpression = $__10.parseExpression,
	      parsePropertyDefinition = $__10.parsePropertyDefinition,
	      parseStatement = $__10.parseStatement,
	      parseStatements = $__10.parseStatements;
	  var scopeContainsThis = System.get("traceur@0.0.87/src/codegeneration/scopeContainsThis.js").default;
	  var $__12 = System.get("traceur@0.0.87/src/codegeneration/ParseTreeFactory.js"),
	      createEmptyParameterList = $__12.createEmptyParameterList,
	      createFunctionExpression = $__12.createFunctionExpression,
	      createIdentifierExpression = $__12.createIdentifierExpression,
	      createObjectLiteralExpression = $__12.createObjectLiteralExpression,
	      createPropertyNameAssignment = $__12.createPropertyNameAssignment,
	      createVariableStatement = $__12.createVariableStatement,
	      createVariableDeclaration = $__12.createVariableDeclaration,
	      createVariableDeclarationList = $__12.createVariableDeclarationList;
	  var VAR = System.get("traceur@0.0.87/src/syntax/TokenType.js").VAR;
	  var prependStatements = System.get("traceur@0.0.87/src/codegeneration/PrependStatements.js").prependStatements;
	  var CommonJsModuleTransformer = function CommonJsModuleTransformer(identifierGenerator, reporter) {
	    var options = arguments[2];
	    $traceurRuntime.superConstructor($CommonJsModuleTransformer).call(this, identifierGenerator, reporter, options);
	    this.moduleVars_ = [];
	    this.anonymousModule = options && !options.bundle && options.moduleName !== true;
	  };
	  var $CommonJsModuleTransformer = CommonJsModuleTransformer;
	  ($traceurRuntime.createClass)(CommonJsModuleTransformer, {
	    getModuleName: function(tree) {
	      if (this.anonymousModule)
	        return null;
	      return tree.moduleName;
	    },
	    moduleProlog: function() {
	      var statements = $traceurRuntime.superGet(this, $CommonJsModuleTransformer.prototype, "moduleProlog").call(this);
	      if (this.moduleVars_.length) {
	        var tmpVarDeclarations = createVariableStatement(createVariableDeclarationList(VAR, this.moduleVars_.map((function(varName) {
	          return createVariableDeclaration(varName, null);
	        }))));
	        statements.push(tmpVarDeclarations);
	      }
	      return statements;
	    },
	    wrapModule: function(statements) {
	      var needsIife = statements.some(scopeContainsThis);
	      if (needsIife) {
	        return parseStatements($__0, statements, globalThis());
	      }
	      var last = statements[statements.length - 1];
	      statements = statements.slice(0, -1);
	      assert(last.type === RETURN_STATEMENT);
	      var exportObject = last.expression;
	      if (this.hasExports()) {
	        var descriptors = this.transformObjectLiteralToDescriptors(exportObject);
	        var exportStatement = parseStatement($__1, descriptors);
	        statements = prependStatements(statements, exportStatement);
	      }
	      return statements;
	    },
	    transformObjectLiteralToDescriptors: function(literalTree) {
	      assert(literalTree.type === OBJECT_LITERAL_EXPRESSION);
	      var props = literalTree.propertyNameAndValues.map((function(exp) {
	        var descriptor;
	        switch (exp.type) {
	          case GET_ACCESSOR:
	            var getterFunction = createFunctionExpression(createEmptyParameterList(), exp.body);
	            descriptor = parseExpression($__2, getterFunction);
	            break;
	          case PROPERTY_NAME_ASSIGNMENT:
	            descriptor = parseExpression($__3, exp.value);
	            break;
	          default:
	            throw new Error(("Unexpected property type " + exp.type));
	        }
	        return createPropertyNameAssignment(exp.name, descriptor);
	      }));
	      return createObjectLiteralExpression(props);
	    },
	    transformModuleSpecifier: function(tree) {
	      var moduleName = tree.token.processedValue;
	      var tmpVar = this.getTempVarNameForModuleSpecifier(tree);
	      this.moduleVars_.push(tmpVar);
	      var tvId = createIdentifierExpression(tmpVar);
	      return parseExpression($__4, tvId, moduleName, tvId, tvId, tvId, tvId);
	    },
	    getExportProperties: function() {
	      var properties = $traceurRuntime.superGet(this, $CommonJsModuleTransformer.prototype, "getExportProperties").call(this);
	      if (this.exportVisitor_.hasExports())
	        properties.push(parsePropertyDefinition($__5));
	      return properties;
	    }
	  }, {}, ModuleTransformer);
	  return {get CommonJsModuleTransformer() {
	      return CommonJsModuleTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/ParameterTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/ParameterTransformer.js";
	  var FunctionBody = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js").FunctionBody;
	  var TempVarTransformer = System.get("traceur@0.0.87/src/codegeneration/TempVarTransformer.js").TempVarTransformer;
	  var prependStatements = System.get("traceur@0.0.87/src/codegeneration/PrependStatements.js").prependStatements;
	  var stack = [];
	  var ParameterTransformer = function ParameterTransformer() {
	    $traceurRuntime.superConstructor($ParameterTransformer).apply(this, arguments);
	    ;
	  };
	  var $ParameterTransformer = ParameterTransformer;
	  ($traceurRuntime.createClass)(ParameterTransformer, {
	    transformArrowFunctionExpression: function(tree) {
	      stack.push([]);
	      return $traceurRuntime.superGet(this, $ParameterTransformer.prototype, "transformArrowFunctionExpression").call(this, tree);
	    },
	    transformFunctionDeclaration: function(tree) {
	      stack.push([]);
	      return $traceurRuntime.superGet(this, $ParameterTransformer.prototype, "transformFunctionDeclaration").call(this, tree);
	    },
	    transformFunctionExpression: function(tree) {
	      stack.push([]);
	      return $traceurRuntime.superGet(this, $ParameterTransformer.prototype, "transformFunctionExpression").call(this, tree);
	    },
	    transformGetAccessor: function(tree) {
	      stack.push([]);
	      return $traceurRuntime.superGet(this, $ParameterTransformer.prototype, "transformGetAccessor").call(this, tree);
	    },
	    transformSetAccessor: function(tree) {
	      stack.push([]);
	      return $traceurRuntime.superGet(this, $ParameterTransformer.prototype, "transformSetAccessor").call(this, tree);
	    },
	    transformPropertyMethodAssignment: function(tree) {
	      stack.push([]);
	      return $traceurRuntime.superGet(this, $ParameterTransformer.prototype, "transformPropertyMethodAssignment").call(this, tree);
	    },
	    transformFunctionBody: function(tree) {
	      var transformedTree = $traceurRuntime.superGet(this, $ParameterTransformer.prototype, "transformFunctionBody").call(this, tree);
	      var statements = stack.pop();
	      if (!statements.length)
	        return transformedTree;
	      statements = prependStatements.apply((void 0), $traceurRuntime.spread([transformedTree.statements], statements));
	      return new FunctionBody(transformedTree.location, statements);
	    },
	    get parameterStatements() {
	      return stack[stack.length - 1];
	    }
	  }, {}, TempVarTransformer);
	  return {get ParameterTransformer() {
	      return ParameterTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/DefaultParametersTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/DefaultParametersTransformer.js";
	  var $__0 = System.get("traceur@0.0.87/src/semantics/util.js"),
	      isUndefined = $__0.isUndefined,
	      isVoidExpression = $__0.isVoidExpression;
	  var FormalParameterList = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js").FormalParameterList;
	  var ParameterTransformer = System.get("traceur@0.0.87/src/codegeneration/ParameterTransformer.js").ParameterTransformer;
	  var ARGUMENTS = System.get("traceur@0.0.87/src/syntax/PredefinedName.js").ARGUMENTS;
	  var $__4 = System.get("traceur@0.0.87/src/syntax/TokenType.js"),
	      NOT_EQUAL_EQUAL = $__4.NOT_EQUAL_EQUAL,
	      VAR = $__4.VAR;
	  var $__5 = System.get("traceur@0.0.87/src/codegeneration/ParseTreeFactory.js"),
	      createBinaryExpression = $__5.createBinaryExpression,
	      createConditionalExpression = $__5.createConditionalExpression,
	      createIdentifierExpression = $__5.createIdentifierExpression,
	      createMemberLookupExpression = $__5.createMemberLookupExpression,
	      createNumberLiteral = $__5.createNumberLiteral,
	      createOperatorToken = $__5.createOperatorToken,
	      createVariableStatement = $__5.createVariableStatement,
	      createVoid0 = $__5.createVoid0;
	  function createDefaultAssignment(index, binding, initializer) {
	    var argumentsExpression = createMemberLookupExpression(createIdentifierExpression(ARGUMENTS), createNumberLiteral(index));
	    var assignmentExpression;
	    if (initializer === null || isUndefined(initializer) || isVoidExpression(initializer)) {
	      assignmentExpression = argumentsExpression;
	    } else {
	      assignmentExpression = createConditionalExpression(createBinaryExpression(argumentsExpression, createOperatorToken(NOT_EQUAL_EQUAL), createVoid0()), argumentsExpression, initializer);
	    }
	    return createVariableStatement(VAR, binding, assignmentExpression);
	  }
	  var DefaultParametersTransformer = function DefaultParametersTransformer() {
	    $traceurRuntime.superConstructor($DefaultParametersTransformer).apply(this, arguments);
	    ;
	  };
	  var $DefaultParametersTransformer = DefaultParametersTransformer;
	  ($traceurRuntime.createClass)(DefaultParametersTransformer, {
	    transformFormalParameterList: function(tree) {
	      var parameters = [];
	      var changed = false;
	      var defaultToUndefined = false;
	      for (var i = 0; i < tree.parameters.length; i++) {
	        var param = this.transformAny(tree.parameters[i]);
	        if (param !== tree.parameters[i])
	          changed = true;
	        if (param.isRestParameter() || !param.parameter.initializer && !defaultToUndefined) {
	          parameters.push(param);
	        } else {
	          defaultToUndefined = true;
	          changed = true;
	          this.parameterStatements.push(createDefaultAssignment(i, param.parameter.binding, param.parameter.initializer));
	        }
	      }
	      if (!changed)
	        return tree;
	      return new FormalParameterList(tree.location, parameters);
	    },
	    transformConstructorType: function(tree) {
	      return tree;
	    },
	    transformFunctionType: function(tree) {
	      return tree;
	    }
	  }, {}, ParameterTransformer);
	  return {get DefaultParametersTransformer() {
	      return DefaultParametersTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/ExponentiationTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/ExponentiationTransformer.js";
	  var $__0 = Object.freeze(Object.defineProperties(["Math.pow(", ", ", ")"], {raw: {value: Object.freeze(["Math.pow(", ", ", ")"])}}));
	  var ExplodeExpressionTransformer = System.get("traceur@0.0.87/src/codegeneration/ExplodeExpressionTransformer.js").ExplodeExpressionTransformer;
	  var TempVarTransformer = System.get("traceur@0.0.87/src/codegeneration/TempVarTransformer.js").TempVarTransformer;
	  var $__3 = System.get("traceur@0.0.87/src/syntax/TokenType.js"),
	      STAR_STAR = $__3.STAR_STAR,
	      STAR_STAR_EQUAL = $__3.STAR_STAR_EQUAL;
	  var parseExpression = System.get("traceur@0.0.87/src/codegeneration/PlaceholderParser.js").parseExpression;
	  var ExponentiationTransformer = function ExponentiationTransformer() {
	    $traceurRuntime.superConstructor($ExponentiationTransformer).apply(this, arguments);
	    ;
	  };
	  var $ExponentiationTransformer = ExponentiationTransformer;
	  ($traceurRuntime.createClass)(ExponentiationTransformer, {transformBinaryExpression: function(tree) {
	      switch (tree.operator.type) {
	        case STAR_STAR:
	          var left = this.transformAny(tree.left);
	          var right = this.transformAny(tree.right);
	          return parseExpression($__0, left, right);
	        case STAR_STAR_EQUAL:
	          var exploded = new ExplodeExpressionTransformer(this).transformAny(tree);
	          return this.transformAny(exploded);
	      }
	      return $traceurRuntime.superGet(this, $ExponentiationTransformer.prototype, "transformBinaryExpression").call(this, tree);
	    }}, {}, TempVarTransformer);
	  return {get ExponentiationTransformer() {
	      return ExponentiationTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/ForOfTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/ForOfTransformer.js";
	  var $__0 = Object.freeze(Object.defineProperties(["", " = ", ".value;"], {raw: {value: Object.freeze(["", " = ", ".value;"])}})),
	      $__1 = Object.freeze(Object.defineProperties(["\n        for (var ", ",\n                 ", " = (", ")[\n                     $traceurRuntime.toProperty(Symbol.iterator)]();\n             !(", " = (", " = ", ".next()).done);\n             ", " = true) {\n          ", "\n          ", "\n        }"], {raw: {value: Object.freeze(["\n        for (var ", ",\n                 ", " = (", ")[\n                     $traceurRuntime.toProperty(Symbol.iterator)]();\n             !(", " = (", " = ", ".next()).done);\n             ", " = true) {\n          ", "\n          ", "\n        }"])}})),
	      $__2 = Object.freeze(Object.defineProperties(["\n        var ", " = true;\n        var ", " = false;\n        var ", " = undefined;\n        try {\n          ", "\n        } catch (", ") {\n          ", " = true;\n          ", " = ", ";\n        } finally {\n          try {\n            if (!", " && ", ".return != null) {\n              ", ".return();\n            }\n          } finally {\n            if (", ") {\n              throw ", ";\n            }\n          }\n        }"], {raw: {value: Object.freeze(["\n        var ", " = true;\n        var ", " = false;\n        var ", " = undefined;\n        try {\n          ", "\n        } catch (", ") {\n          ", " = true;\n          ", " = ", ";\n        } finally {\n          try {\n            if (!", " && ", ".return != null) {\n              ", ".return();\n            }\n          } finally {\n            if (", ") {\n              throw ", ";\n            }\n          }\n        }"])}}));
	  var $__3 = System.get("traceur@0.0.87/src/syntax/trees/ParseTreeType.js"),
	      FOR_OF_STATEMENT = $__3.FOR_OF_STATEMENT,
	      VARIABLE_DECLARATION_LIST = $__3.VARIABLE_DECLARATION_LIST,
	      LABELLED_STATEMENT = $__3.LABELLED_STATEMENT;
	  var TempVarTransformer = System.get("traceur@0.0.87/src/codegeneration/TempVarTransformer.js").TempVarTransformer;
	  var $__5 = System.get("traceur@0.0.87/src/codegeneration/ParseTreeFactory.js"),
	      id = $__5.createIdentifierExpression,
	      createMemberExpression = $__5.createMemberExpression,
	      createVariableStatement = $__5.createVariableStatement;
	  var $__6 = System.get("traceur@0.0.87/src/codegeneration/PlaceholderParser.js"),
	      parseStatement = $__6.parseStatement,
	      parseStatements = $__6.parseStatements;
	  var $__7 = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js"),
	      AnonBlock = $__7.AnonBlock,
	      LabelledStatement = $__7.LabelledStatement;
	  var ForOfTransformer = function ForOfTransformer() {
	    $traceurRuntime.superConstructor($ForOfTransformer).apply(this, arguments);
	    ;
	  };
	  var $ForOfTransformer = ForOfTransformer;
	  ($traceurRuntime.createClass)(ForOfTransformer, {
	    transformForOfStatement: function(original) {
	      return this.transformForOfStatement_(original, []);
	    },
	    transformForOfStatement_: function(original, labelSet) {
	      var tree = $traceurRuntime.superGet(this, $ForOfTransformer.prototype, "transformForOfStatement").call(this, original);
	      var iter = id(this.getTempIdentifier());
	      var result = id(this.getTempIdentifier());
	      var label = id(this.getTempIdentifier());
	      var normalCompletion = id(this.getTempIdentifier());
	      var throwCompletion = id(this.getTempIdentifier());
	      var exception = id(this.getTempIdentifier());
	      var ex = id(this.getTempIdentifier());
	      var labelledStatement;
	      var innerStatement;
	      var assignment;
	      if (tree.initializer.type === VARIABLE_DECLARATION_LIST) {
	        assignment = createVariableStatement(tree.initializer.declarationType, tree.initializer.declarations[0].lvalue, createMemberExpression(result, 'value'));
	      } else {
	        assignment = parseStatement($__0, tree.initializer, result);
	      }
	      innerStatement = parseStatement($__1, result, iter, tree.collection, normalCompletion, result, iter, normalCompletion, assignment, tree.body);
	      while (labelledStatement = labelSet.pop()) {
	        innerStatement = new LabelledStatement(labelledStatement.location, labelledStatement.name, innerStatement);
	      }
	      return new AnonBlock(null, parseStatements($__2, normalCompletion, throwCompletion, exception, innerStatement, ex, throwCompletion, exception, ex, normalCompletion, iter, iter, throwCompletion, exception));
	    },
	    transformLabelledStatement: function(tree) {
	      var labelSet = [tree];
	      var statement = tree.statement;
	      while (statement.type === LABELLED_STATEMENT) {
	        labelSet.push(statement);
	        statement = statement.statement;
	      }
	      if (statement.type !== FOR_OF_STATEMENT) {
	        return $traceurRuntime.superGet(this, $ForOfTransformer.prototype, "transformLabelledStatement").call(this, tree);
	      }
	      return this.transformForOfStatement_(statement, labelSet);
	    }
	  }, {}, TempVarTransformer);
	  return {get ForOfTransformer() {
	      return ForOfTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/InnerForOnTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/InnerForOnTransformer.js";
	  var $__0 = Object.freeze(Object.defineProperties(["\n          ", " = ", ";"], {raw: {value: Object.freeze(["\n          ", " = ", ";"])}})),
	      $__1 = Object.freeze(Object.defineProperties(["\n        return ", ".v;"], {raw: {value: Object.freeze(["\n        return ", ".v;"])}})),
	      $__2 = Object.freeze(Object.defineProperties(["\n        do {\n          ", "\n            await $traceurRuntime.observeForEach(\n              ", "[$traceurRuntime.toProperty(Symbol.observer)].\n                  bind(", "),\n              async function (", ") {\n                var ", " = this;\n                try {\n                  ", "\n                } catch (e) {\n                  ", ".throw(e);\n                }\n              });\n          ", "\n        } while (false);"], {raw: {value: Object.freeze(["\n        do {\n          ", "\n            await $traceurRuntime.observeForEach(\n              ", "[$traceurRuntime.toProperty(Symbol.observer)].\n                  bind(", "),\n              async function (", ") {\n                var ", " = this;\n                try {\n                  ", "\n                } catch (e) {\n                  ", ".throw(e);\n                }\n              });\n          ", "\n        } while (false);"])}})),
	      $__3 = Object.freeze(Object.defineProperties(["\n        ", ".return();\n        ", " = {v: ", "};\n        return;"], {raw: {value: Object.freeze(["\n        ", ".return();\n        ", " = {v: ", "};\n        return;"])}})),
	      $__4 = Object.freeze(Object.defineProperties(["\n        ", ".return();\n        ", " = ", ";\n        return;"], {raw: {value: Object.freeze(["\n        ", ".return();\n        ", " = ", ";\n        return;"])}}));
	  var ParseTreeTransformer = System.get("traceur@0.0.87/src/codegeneration/ParseTreeTransformer.js").ParseTreeTransformer;
	  var alphaRenameThisAndArguments = System.get("traceur@0.0.87/src/codegeneration/alphaRenameThisAndArguments.js").default;
	  var $__7 = System.get("traceur@0.0.87/src/codegeneration/PlaceholderParser.js"),
	      parseStatement = $__7.parseStatement,
	      parseStatements = $__7.parseStatements;
	  var $__8 = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js"),
	      AnonBlock = $__8.AnonBlock,
	      Block = $__8.Block,
	      ContinueStatement = $__8.ContinueStatement,
	      LabelledStatement = $__8.LabelledStatement,
	      ReturnStatement = $__8.ReturnStatement;
	  var StringSet = System.get("traceur@0.0.87/src/util/StringSet.js").StringSet;
	  var $__10 = System.get("traceur@0.0.87/src/codegeneration/ParseTreeFactory.js"),
	      createAssignmentStatement = $__10.createAssignmentStatement,
	      createCaseClause = $__10.createCaseClause,
	      createDefaultClause = $__10.createDefaultClause,
	      id = $__10.createIdentifierExpression,
	      createNumberLiteral = $__10.createNumberLiteral,
	      createSwitchStatement = $__10.createSwitchStatement,
	      createThisExpression = $__10.createThisExpression,
	      createVariableStatement = $__10.createVariableStatement,
	      createVariableDeclaration = $__10.createVariableDeclaration,
	      createVariableDeclarationList = $__10.createVariableDeclarationList,
	      createVoid0 = $__10.createVoid0;
	  var ARGUMENTS = System.get("traceur@0.0.87/src/syntax/PredefinedName.js").ARGUMENTS;
	  var VAR = System.get("traceur@0.0.87/src/syntax/TokenType.js").VAR;
	  var VARIABLE_DECLARATION_LIST = System.get("traceur@0.0.87/src/syntax/trees/ParseTreeType.js").VARIABLE_DECLARATION_LIST;
	  var InnerForOnTransformer = function InnerForOnTransformer(tempIdGenerator, labelSet) {
	    var $__14;
	    $traceurRuntime.superConstructor($InnerForOnTransformer).call(this);
	    this.idGenerator_ = tempIdGenerator;
	    this.inLoop_ = 0;
	    this.inBreakble_ = 0;
	    this.variableDeclarations_ = [];
	    this.extractedStatements_ = [];
	    this.labelSet_ = labelSet;
	    this.labelledStatements_ = new StringSet();
	    this.observer_ = id(this.idGenerator_.getTempIdentifier());
	    this.result_ = id(this.idGenerator_.getTempIdentifier());
	    this.parentLabels_ = new StringSet();
	    this.labelSet_.forEach(($__14 = this, function(tree) {
	      $__14.parentLabels_.add(tree.name.value);
	    }));
	  };
	  var $InnerForOnTransformer = InnerForOnTransformer;
	  ($traceurRuntime.createClass)(InnerForOnTransformer, {
	    transform: function(tree) {
	      var value = id(this.idGenerator_.getTempIdentifier());
	      var assignment;
	      if (tree.initializer.type === VARIABLE_DECLARATION_LIST) {
	        assignment = createVariableStatement(tree.initializer.declarationType, tree.initializer.declarations[0].lvalue, value);
	      } else {
	        assignment = parseStatement($__0, tree.initializer, value);
	      }
	      var body = new Block(tree.body.location, $traceurRuntime.spread([assignment], tree.body.statements));
	      body = this.transformAny(body);
	      body = alphaRenameThisAndArguments(this, body);
	      this.variableDeclarations_.push(createVariableDeclaration(this.result_, createVoid0()));
	      var caseClauses = this.extractedStatements_.map((function(statement, index) {
	        return createCaseClause(createNumberLiteral(index), [statement]);
	      }));
	      caseClauses.push(createCaseClause(createVoid0(), [new ContinueStatement(null, null)]));
	      caseClauses.push(createDefaultClause(parseStatements($__1, this.result_)));
	      var switchStatement = createSwitchStatement(this.result_, caseClauses);
	      var statement = parseStatement($__2, createVariableStatement(createVariableDeclarationList(VAR, this.variableDeclarations_)), tree.observable, tree.observable, value, this.observer_, body, this.observer_, switchStatement);
	      var labelledStatement;
	      while (labelledStatement = this.labelSet_.pop()) {
	        statement = new LabelledStatement(labelledStatement.location, labelledStatement.name, statement);
	      }
	      return statement;
	    },
	    addTempVarForArguments: function() {
	      var tmpVarName = this.idGenerator_.generateUniqueIdentifier();
	      this.variableDeclarations_.push(createVariableDeclaration(tmpVarName, id(ARGUMENTS)));
	      return tmpVarName;
	    },
	    addTempVarForThis: function() {
	      var tmpVarName = this.idGenerator_.generateUniqueIdentifier();
	      this.variableDeclarations_.push(createVariableDeclaration(tmpVarName, createThisExpression()));
	      return tmpVarName;
	    },
	    transformAny: function(tree) {
	      if (tree) {
	        if (tree.isBreakableStatement())
	          this.inBreakble_++;
	        if (tree.isIterationStatement())
	          this.inLoop_++;
	        tree = $traceurRuntime.superGet(this, $InnerForOnTransformer.prototype, "transformAny").call(this, tree);
	        if (tree.isBreakableStatement())
	          this.inBreakble_--;
	        if (tree.isIterationStatement())
	          this.inLoop_--;
	      }
	      return tree;
	    },
	    transformReturnStatement: function(tree) {
	      return new AnonBlock(tree.location, parseStatements($__3, this.observer_, this.result_, (tree.expression || createVoid0())));
	    },
	    transformAbruptCompletion_: function(tree) {
	      this.extractedStatements_.push(tree);
	      var index = this.extractedStatements_.length - 1;
	      return new AnonBlock(null, parseStatements($__4, this.observer_, this.result_, index));
	    },
	    transformBreakStatement: function(tree) {
	      if (!tree.name) {
	        if (this.inBreakble_) {
	          return $traceurRuntime.superGet(this, $InnerForOnTransformer.prototype, "transformBreakStatement").call(this, tree);
	        }
	        return this.transformAbruptCompletion_(new ContinueStatement(tree.location, null));
	      }
	      if (this.labelledStatements_.has(tree.name.value)) {
	        return $traceurRuntime.superGet(this, $InnerForOnTransformer.prototype, "transformBreakStatement").call(this, tree);
	      }
	      return this.transformAbruptCompletion_(tree);
	    },
	    transformContinueStatement: function(tree) {
	      if (!tree.name) {
	        if (this.inLoop_) {
	          return $traceurRuntime.superGet(this, $InnerForOnTransformer.prototype, "transformContinueStatement").call(this, tree);
	        }
	        return new ReturnStatement(tree.location, null);
	      }
	      if (this.labelledStatements_.has(tree.name.value)) {
	        return $traceurRuntime.superGet(this, $InnerForOnTransformer.prototype, "transformContinueStatement").call(this, tree);
	      }
	      if (this.parentLabels_.has(tree.name.value)) {
	        return new ReturnStatement(tree.location, null);
	      }
	      return this.transformAbruptCompletion_(tree);
	    },
	    transformLabelledStatement: function(tree) {
	      this.labelledStatements_.add(tree.name.value);
	      return $traceurRuntime.superGet(this, $InnerForOnTransformer.prototype, "transformLabelledStatement").call(this, tree);
	    },
	    transformVariableStatement: function(tree) {
	      var $__15 = this;
	      var $__14 = this;
	      if (tree.declarations.declarationType === VAR) {
	        var assignments = [];
	        tree.declarations.declarations.forEach((function(variableDeclaration) {
	          var variableName = variableDeclaration.lvalue.getStringValue();
	          var initializer = $traceurRuntime.superGet($__15, $InnerForOnTransformer.prototype, "transformAny").call($__15, variableDeclaration.initializer);
	          $__14.variableDeclarations_.push(createVariableDeclaration(variableName, null));
	          assignments.push(createAssignmentStatement(id(variableName), initializer));
	        }));
	        return new AnonBlock(null, assignments);
	      }
	      return $traceurRuntime.superGet(this, $InnerForOnTransformer.prototype, "transformVariableStatement").call(this, tree);
	    },
	    transformFunctionDeclaration: function(tree) {
	      return tree;
	    },
	    transformFunctionExpression: function(tree) {
	      return tree;
	    },
	    transformSetAccessor: function(tree) {
	      return tree;
	    },
	    transformGetAccessor: function(tree) {
	      return tree;
	    },
	    transformPropertyMethodAssignment: function(tree) {
	      return tree;
	    },
	    transformArrowFunctionExpression: function(tree) {
	      return tree;
	    }
	  }, {transform: function(tempIdGenerator, tree, labelSet) {
	      return new $InnerForOnTransformer(tempIdGenerator, labelSet).transform(tree);
	    }}, ParseTreeTransformer);
	  return {get InnerForOnTransformer() {
	      return InnerForOnTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/ForOnTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/ForOnTransformer.js";
	  var $__0 = System.get("traceur@0.0.87/src/syntax/trees/ParseTreeType.js"),
	      FOR_ON_STATEMENT = $__0.FOR_ON_STATEMENT,
	      LABELLED_STATEMENT = $__0.LABELLED_STATEMENT;
	  var TempVarTransformer = System.get("traceur@0.0.87/src/codegeneration/TempVarTransformer.js").TempVarTransformer;
	  var InnerForOnTransformer = System.get("traceur@0.0.87/src/codegeneration/InnerForOnTransformer.js").InnerForOnTransformer;
	  var ForOnTransformer = function ForOnTransformer() {
	    $traceurRuntime.superConstructor($ForOnTransformer).apply(this, arguments);
	    ;
	  };
	  var $ForOnTransformer = ForOnTransformer;
	  ($traceurRuntime.createClass)(ForOnTransformer, {
	    transformForOnStatement: function(original) {
	      return this.transformForOnStatement_(original, []);
	    },
	    transformForOnStatement_: function(original, labelSet) {
	      return InnerForOnTransformer.transform(this, $traceurRuntime.superGet(this, $ForOnTransformer.prototype, "transformForOnStatement").call(this, original), labelSet);
	    },
	    transformLabelledStatement: function(tree) {
	      var labelSet = [tree];
	      var statement;
	      for (statement = tree.statement; statement.type === LABELLED_STATEMENT; statement = statement.statement) {
	        labelSet.push(statement);
	      }
	      if (statement.type !== FOR_ON_STATEMENT) {
	        return $traceurRuntime.superGet(this, $ForOnTransformer.prototype, "transformLabelledStatement").call(this, tree);
	      }
	      return this.transformForOnStatement_(statement, labelSet);
	    }
	  }, {}, TempVarTransformer);
	  return {get ForOnTransformer() {
	      return ForOnTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/GeneratorComprehensionTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/GeneratorComprehensionTransformer.js";
	  var $__0 = Object.freeze(Object.defineProperties(["yield ", ""], {raw: {value: Object.freeze(["yield ", ""])}}));
	  var ComprehensionTransformer = System.get("traceur@0.0.87/src/codegeneration/ComprehensionTransformer.js").ComprehensionTransformer;
	  var parseStatement = System.get("traceur@0.0.87/src/codegeneration/PlaceholderParser.js").parseStatement;
	  var GeneratorComprehensionTransformer = function GeneratorComprehensionTransformer() {
	    $traceurRuntime.superConstructor($GeneratorComprehensionTransformer).apply(this, arguments);
	    ;
	  };
	  var $GeneratorComprehensionTransformer = GeneratorComprehensionTransformer;
	  ($traceurRuntime.createClass)(GeneratorComprehensionTransformer, {transformGeneratorComprehension: function(tree) {
	      var expression = this.transformAny(tree.expression);
	      var statement = parseStatement($__0, expression);
	      var isGenerator = true;
	      return this.transformComprehension(tree, statement, isGenerator);
	    }}, {}, ComprehensionTransformer);
	  return {get GeneratorComprehensionTransformer() {
	      return GeneratorComprehensionTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/generator/State.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/generator/State.js";
	  var $__0 = Object.freeze(Object.defineProperties(["$ctx.finallyFallThrough = ", ""], {raw: {value: Object.freeze(["$ctx.finallyFallThrough = ", ""])}}));
	  var $__1 = System.get("traceur@0.0.87/src/codegeneration/ParseTreeFactory.js"),
	      createAssignStateStatement = $__1.createAssignStateStatement,
	      createBreakStatement = $__1.createBreakStatement,
	      createCaseClause = $__1.createCaseClause,
	      createNumberLiteral = $__1.createNumberLiteral;
	  var parseStatement = System.get("traceur@0.0.87/src/codegeneration/PlaceholderParser.js").parseStatement;
	  var State = function State(id) {
	    this.id = id;
	  };
	  ($traceurRuntime.createClass)(State, {
	    transformMachineState: function(enclosingFinally, machineEndState, reporter) {
	      return createCaseClause(createNumberLiteral(this.id), this.transform(enclosingFinally, machineEndState, reporter));
	    },
	    transformBreak: function(labelSet, breakState) {
	      return this;
	    },
	    transformBreakOrContinue: function(labelSet) {
	      var breakState = arguments[1];
	      var continueState = arguments[2];
	      return this;
	    }
	  }, {});
	  State.START_STATE = 0;
	  State.INVALID_STATE = -1;
	  State.END_STATE = -2;
	  State.RETHROW_STATE = -3;
	  State.generateJump = function(enclosingFinally, fallThroughState) {
	    return $traceurRuntime.spread(State.generateAssignState(enclosingFinally, fallThroughState), [createBreakStatement()]);
	  };
	  State.generateAssignState = function(enclosingFinally, fallThroughState) {
	    var assignState;
	    if (State.isFinallyExit(enclosingFinally, fallThroughState)) {
	      assignState = generateAssignStateOutOfFinally(enclosingFinally, fallThroughState);
	    } else {
	      assignState = [createAssignStateStatement(fallThroughState)];
	    }
	    return assignState;
	  };
	  State.isFinallyExit = function(enclosingFinally, destination) {
	    return enclosingFinally != null && enclosingFinally.tryStates.indexOf(destination) < 0;
	  };
	  function generateAssignStateOutOfFinally(enclosingFinally, destination) {
	    var finallyState = enclosingFinally.finallyState;
	    return [createAssignStateStatement(finallyState), parseStatement($__0, destination)];
	  }
	  State.replaceStateList = function(oldStates, oldState, newState) {
	    var states = [];
	    for (var i = 0; i < oldStates.length; i++) {
	      states.push(State.replaceStateId(oldStates[i], oldState, newState));
	    }
	    return states;
	  };
	  State.replaceStateId = function(current, oldState, newState) {
	    return current === oldState ? newState : current;
	  };
	  State.replaceAllStates = function(exceptionBlocks, oldState, newState) {
	    var result = [];
	    for (var i = 0; i < exceptionBlocks.length; i++) {
	      result.push(exceptionBlocks[i].replaceState(oldState, newState));
	    }
	    return result;
	  };
	  return {get State() {
	      return State;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/generator/TryState.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/generator/TryState.js";
	  var State = System.get("traceur@0.0.87/src/codegeneration/generator/State.js").State;
	  var Kind = {
	    CATCH: 'catch',
	    FINALLY: 'finally'
	  };
	  var TryState = function TryState(kind, tryStates, nestedTrys) {
	    this.kind = kind;
	    this.tryStates = tryStates;
	    this.nestedTrys = nestedTrys;
	  };
	  ($traceurRuntime.createClass)(TryState, {
	    replaceAllStates: function(oldState, newState) {
	      return State.replaceStateList(this.tryStates, oldState, newState);
	    },
	    replaceNestedTrys: function(oldState, newState) {
	      var states = [];
	      for (var i = 0; i < this.nestedTrys.length; i++) {
	        states.push(this.nestedTrys[i].replaceState(oldState, newState));
	      }
	      return states;
	    }
	  }, {});
	  TryState.Kind = Kind;
	  return {get TryState() {
	      return TryState;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/syntax/trees/StateMachine.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/syntax/trees/StateMachine.js";
	  var ParseTree = System.get("traceur@0.0.87/src/syntax/trees/ParseTree.js").ParseTree;
	  var STATE_MACHINE = System.get("traceur@0.0.87/src/syntax/trees/ParseTreeType.js").STATE_MACHINE;
	  var State = System.get("traceur@0.0.87/src/codegeneration/generator/State.js").State;
	  var TryState = System.get("traceur@0.0.87/src/codegeneration/generator/TryState.js").TryState;
	  function addCatchOrFinallyStates(kind, enclosingMap, tryStates) {
	    for (var i = 0; i < tryStates.length; i++) {
	      var tryState = tryStates[i];
	      if (tryState.kind === kind) {
	        for (var j = 0; j < tryState.tryStates.length; j++) {
	          var id = tryState.tryStates[j];
	          enclosingMap[id] = tryState;
	        }
	      }
	      addCatchOrFinallyStates(kind, enclosingMap, tryState.nestedTrys);
	    }
	  }
	  function addAllCatchStates(tryStates, catches) {
	    for (var i = 0; i < tryStates.length; i++) {
	      var tryState = tryStates[i];
	      if (tryState.kind === TryState.Kind.CATCH) {
	        catches.push(tryState);
	      }
	      addAllCatchStates(tryState.nestedTrys, catches);
	    }
	  }
	  var StateMachine = function StateMachine(startState, fallThroughState, states, exceptionBlocks) {
	    $traceurRuntime.superConstructor($StateMachine).call(this, null);
	    this.startState = startState;
	    this.fallThroughState = fallThroughState;
	    this.states = states;
	    this.exceptionBlocks = exceptionBlocks;
	  };
	  var $StateMachine = StateMachine;
	  ($traceurRuntime.createClass)(StateMachine, {
	    get type() {
	      return STATE_MACHINE;
	    },
	    transform: function(transformer) {
	      return transformer.transformStateMachine(this);
	    },
	    visit: function(visitor) {
	      visitor.visitStateMachine(this);
	    },
	    getAllStateIDs: function() {
	      var result = [];
	      for (var i = 0; i < this.states.length; i++) {
	        result.push(this.states[i].id);
	      }
	      return result;
	    },
	    getEnclosingFinallyMap: function() {
	      var enclosingMap = Object.create(null);
	      addCatchOrFinallyStates(TryState.Kind.FINALLY, enclosingMap, this.exceptionBlocks);
	      return enclosingMap;
	    },
	    allCatchStates: function() {
	      var catches = [];
	      addAllCatchStates(this.exceptionBlocks, catches);
	      return catches;
	    },
	    replaceStateId: function(oldState, newState) {
	      return new $StateMachine(State.replaceStateId(this.startState, oldState, newState), State.replaceStateId(this.fallThroughState, oldState, newState), State.replaceAllStates(this.states, oldState, newState), State.replaceAllStates(this.exceptionBlocks, oldState, newState));
	    },
	    replaceStartState: function(newState) {
	      return this.replaceStateId(this.startState, newState);
	    },
	    replaceFallThroughState: function(newState) {
	      return this.replaceStateId(this.fallThroughState, newState);
	    },
	    append: function(nextMachine) {
	      var states = $traceurRuntime.spread(this.states);
	      for (var i = 0; i < nextMachine.states.length; i++) {
	        var otherState = nextMachine.states[i];
	        states.push(otherState.replaceState(nextMachine.startState, this.fallThroughState));
	      }
	      var exceptionBlocks = $traceurRuntime.spread(this.exceptionBlocks);
	      for (var i$__5 = 0; i$__5 < nextMachine.exceptionBlocks.length; i$__5++) {
	        var tryState = nextMachine.exceptionBlocks[i$__5];
	        exceptionBlocks.push(tryState.replaceState(nextMachine.startState, this.fallThroughState));
	      }
	      return new $StateMachine(this.startState, nextMachine.fallThroughState, states, exceptionBlocks);
	    }
	  }, {}, ParseTree);
	  return {get StateMachine() {
	      return StateMachine;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/generator/AwaitState.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/generator/AwaitState.js";
	  var $__0 = Object.freeze(Object.defineProperties(["$ctx.finallyFallThrough = ", ""], {raw: {value: Object.freeze(["$ctx.finallyFallThrough = ", ""])}})),
	      $__1 = Object.freeze(Object.defineProperties(["Promise.resolve(", ").then(\n          $ctx.createCallback(", "), $ctx.errback);\n          return;"], {raw: {value: Object.freeze(["Promise.resolve(", ").then(\n          $ctx.createCallback(", "), $ctx.errback);\n          return;"])}}));
	  var State = System.get("traceur@0.0.87/src/codegeneration/generator/State.js").State;
	  var parseStatements = System.get("traceur@0.0.87/src/codegeneration/PlaceholderParser.js").parseStatements;
	  var AwaitState = function AwaitState(id, callbackState, expression) {
	    $traceurRuntime.superConstructor($AwaitState).call(this, id), this.callbackState = callbackState;
	    this.expression = expression;
	  };
	  var $AwaitState = AwaitState;
	  ($traceurRuntime.createClass)(AwaitState, {
	    replaceState: function(oldState, newState) {
	      return new $AwaitState(State.replaceStateId(this.id, oldState, newState), State.replaceStateId(this.callbackState, oldState, newState), this.expression);
	    },
	    transform: function(enclosingFinally, machineEndState, reporter) {
	      var $__5;
	      var stateId,
	          statements;
	      if (State.isFinallyExit(enclosingFinally, this.callbackState)) {
	        stateId = enclosingFinally.finallyState;
	        statements = parseStatements($__0, this.callbackState);
	      } else {
	        stateId = this.callbackState;
	        statements = [];
	      }
	      ($__5 = statements).push.apply($__5, $traceurRuntime.spread(parseStatements($__1, this.expression, stateId)));
	      return statements;
	    }
	  }, {}, State);
	  return {get AwaitState() {
	      return AwaitState;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/HoistVariablesTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/HoistVariablesTransformer.js";
	  var $__0 = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js"),
	      AnonBlock = $__0.AnonBlock,
	      Catch = $__0.Catch,
	      FunctionBody = $__0.FunctionBody,
	      ForInStatement = $__0.ForInStatement,
	      ForOfStatement = $__0.ForOfStatement,
	      ForStatement = $__0.ForStatement,
	      VariableDeclarationList = $__0.VariableDeclarationList,
	      VariableStatement = $__0.VariableStatement;
	  var $__1 = System.get("traceur@0.0.87/src/syntax/trees/ParseTreeType.js"),
	      OBJECT_PATTERN = $__1.OBJECT_PATTERN,
	      VARIABLE_DECLARATION_LIST = $__1.VARIABLE_DECLARATION_LIST;
	  var ParseTreeTransformer = System.get("traceur@0.0.87/src/codegeneration/ParseTreeTransformer.js").ParseTreeTransformer;
	  var StringSet = System.get("traceur@0.0.87/src/util/StringSet.js").StringSet;
	  var VAR = System.get("traceur@0.0.87/src/syntax/TokenType.js").VAR;
	  var $__5 = System.get("traceur@0.0.87/src/codegeneration/ParseTreeFactory.js"),
	      createAssignmentExpression = $__5.createAssignmentExpression,
	      createCommaExpression = $__5.createCommaExpression,
	      createExpressionStatement = $__5.createExpressionStatement,
	      id = $__5.createIdentifierExpression,
	      createParenExpression = $__5.createParenExpression,
	      createVariableDeclaration = $__5.createVariableDeclaration;
	  var prependStatements = System.get("traceur@0.0.87/src/codegeneration/PrependStatements.js").prependStatements;
	  var HoistVariablesTransformer = function HoistVariablesTransformer() {
	    var shouldHoistFunctions = arguments[0] !== (void 0) ? arguments[0] : false;
	    $traceurRuntime.superConstructor($HoistVariablesTransformer).call(this);
	    this.hoistedFunctions_ = [];
	    this.hoistedVariables_ = new StringSet();
	    this.keepBindingIdentifiers_ = false;
	    this.inBlockOrFor_ = false;
	    this.shouldHoistFunctions_ = shouldHoistFunctions;
	  };
	  var $HoistVariablesTransformer = HoistVariablesTransformer;
	  ($traceurRuntime.createClass)(HoistVariablesTransformer, {
	    transformFunctionBody: function(tree) {
	      var statements = this.transformList(tree.statements);
	      if (statements === tree.statements)
	        return tree;
	      statements = this.prependVariables(statements);
	      statements = this.prependFunctions(statements);
	      return new FunctionBody(tree.location, statements);
	    },
	    addVariable: function(name) {
	      this.hoistedVariables_.add(name);
	    },
	    addFunctionDeclaration: function(tree) {
	      this.hoistedFunctions_.push(tree);
	    },
	    hasVariables: function() {
	      return !this.hoistedVariables_.isEmpty();
	    },
	    hasFunctions: function() {
	      return this.hoistedFunctions_.length > 0;
	    },
	    getVariableNames: function() {
	      return this.hoistedVariables_.valuesAsArray();
	    },
	    getVariableStatement: function() {
	      if (!this.hasVariables())
	        return new AnonBlock(null, []);
	      var declarations = this.getVariableNames().map((function(name) {
	        return createVariableDeclaration(name, null);
	      }));
	      return new VariableStatement(null, new VariableDeclarationList(null, VAR, declarations));
	    },
	    getFunctions: function() {
	      return this.hoistedFunctions_;
	    },
	    prependVariables: function(statements) {
	      if (!this.hasVariables())
	        return statements;
	      return prependStatements(statements, this.getVariableStatement());
	    },
	    prependFunctions: function(statements) {
	      if (!this.hasFunctions())
	        return statements;
	      return prependStatements(statements, this.getFunctionDeclarations());
	    },
	    transformVariableStatement: function(tree) {
	      var declarations = this.transformAny(tree.declarations);
	      if (declarations === tree.declarations)
	        return tree;
	      if (declarations === null)
	        return new AnonBlock(null, []);
	      if (declarations.type === VARIABLE_DECLARATION_LIST)
	        return new VariableStatement(tree.location, declarations);
	      return createExpressionStatement(declarations);
	    },
	    transformVariableDeclaration: function(tree) {
	      var lvalue = this.transformAny(tree.lvalue);
	      var initializer = this.transformAny(tree.initializer);
	      if (initializer) {
	        var expression = createAssignmentExpression(lvalue, initializer);
	        if (lvalue.type === OBJECT_PATTERN)
	          expression = createParenExpression(expression);
	        return expression;
	      }
	      return null;
	    },
	    transformObjectPattern: function(tree) {
	      var keepBindingIdentifiers = this.keepBindingIdentifiers_;
	      this.keepBindingIdentifiers_ = true;
	      var transformed = $traceurRuntime.superGet(this, $HoistVariablesTransformer.prototype, "transformObjectPattern").call(this, tree);
	      this.keepBindingIdentifiers_ = keepBindingIdentifiers;
	      return transformed;
	    },
	    transformArrayPattern: function(tree) {
	      var keepBindingIdentifiers = this.keepBindingIdentifiers_;
	      this.keepBindingIdentifiers_ = true;
	      var transformed = $traceurRuntime.superGet(this, $HoistVariablesTransformer.prototype, "transformArrayPattern").call(this, tree);
	      this.keepBindingIdentifiers_ = keepBindingIdentifiers;
	      return transformed;
	    },
	    transformBindingIdentifier: function(tree) {
	      var idToken = tree.identifierToken;
	      this.addVariable(idToken.value);
	      if (this.keepBindingIdentifiers_)
	        return tree;
	      return id(idToken);
	    },
	    transformVariableDeclarationList: function(tree) {
	      if (tree.declarationType === VAR || !this.inBlockOrFor_) {
	        var expressions = this.transformList(tree.declarations);
	        expressions = expressions.filter((function(tree) {
	          return tree;
	        }));
	        if (expressions.length === 0)
	          return null;
	        if (expressions.length === 1)
	          return expressions[0];
	        return createCommaExpression(expressions);
	      }
	      return tree;
	    },
	    transformCatch: function(tree) {
	      var catchBody = this.transformAny(tree.catchBody);
	      if (catchBody === tree.catchBody)
	        return tree;
	      return new Catch(tree.location, tree.binding, catchBody);
	    },
	    transformForInStatement: function(tree) {
	      return this.transformLoop_(tree, ForInStatement);
	    },
	    transformForOfStatement: function(tree) {
	      return this.transformLoop_(tree, ForOfStatement);
	    },
	    transformForOnStatement: function(tree) {
	      return this.transformLoop_(tree, ForOfStatement);
	    },
	    transformLoop_: function(tree, ctor) {
	      var initializer = this.transformLoopIninitaliser_(tree.initializer);
	      var collection = this.transformAny(tree.collection);
	      var body = this.transformAny(tree.body);
	      if (initializer === tree.initializer && collection === tree.collection && body === tree.body) {
	        return tree;
	      }
	      return new ctor(tree.location, initializer, collection, body);
	    },
	    transformLoopIninitaliser_: function(tree) {
	      if (tree.type !== VARIABLE_DECLARATION_LIST || tree.declarationType !== VAR)
	        return tree;
	      return this.transformAny(tree.declarations[0].lvalue);
	    },
	    transformForStatement: function(tree) {
	      var inBlockOrFor = this.inBlockOrFor_;
	      this.inBlockOrFor_ = true;
	      var initializer = this.transformAny(tree.initializer);
	      this.inBlockOrFor_ = inBlockOrFor;
	      var condition = this.transformAny(tree.condition);
	      var increment = this.transformAny(tree.increment);
	      var body = this.transformAny(tree.body);
	      if (initializer === tree.initializer && condition === tree.condition && increment === tree.increment && body === tree.body) {
	        return tree;
	      }
	      return new ForStatement(tree.location, initializer, condition, increment, body);
	    },
	    transformBlock: function(tree) {
	      var inBlockOrFor = this.inBlockOrFor_;
	      this.inBlockOrFor_ = true;
	      tree = $traceurRuntime.superGet(this, $HoistVariablesTransformer.prototype, "transformBlock").call(this, tree);
	      this.inBlockOrFor_ = inBlockOrFor;
	      return tree;
	    },
	    addMachineVariable: function(name) {
	      this.machineVariables_[name] = true;
	    },
	    transformClassDeclaration: function(tree) {
	      return tree;
	    },
	    transformClassExpression: function(tree) {
	      return tree;
	    },
	    transformFunctionDeclaration: function(tree) {
	      if (this.shouldHoistFunctions_) {
	        this.addFunctionDeclaration(tree);
	        return new AnonBlock(null, []);
	      }
	      return tree;
	    },
	    transformFunctionExpression: function(tree) {
	      return tree;
	    },
	    transformGetAccessor: function(tree) {
	      return tree;
	    },
	    transformSetAccessor: function(tree) {
	      return tree;
	    },
	    transformPropertyMethodAssignment: function(tree) {
	      return tree;
	    },
	    transformArrowFunctionExpression: function(tree) {
	      return tree;
	    },
	    transformComprehensionFor: function(tree) {
	      return tree;
	    }
	  }, {}, ParseTreeTransformer);
	  var $__default = HoistVariablesTransformer;
	  return {get default() {
	      return $__default;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/generator/FallThroughState.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/generator/FallThroughState.js";
	  var State = System.get("traceur@0.0.87/src/codegeneration/generator/State.js").State;
	  var FallThroughState = function FallThroughState(id, fallThroughState, statements) {
	    $traceurRuntime.superConstructor($FallThroughState).call(this, id);
	    this.fallThroughState = fallThroughState;
	    this.statements = statements;
	  };
	  var $FallThroughState = FallThroughState;
	  ($traceurRuntime.createClass)(FallThroughState, {
	    replaceState: function(oldState, newState) {
	      return new $FallThroughState(State.replaceStateId(this.id, oldState, newState), State.replaceStateId(this.fallThroughState, oldState, newState), this.statements);
	    },
	    transform: function(enclosingFinally, machineEndState, reporter) {
	      return $traceurRuntime.spread(this.statements, State.generateJump(enclosingFinally, this.fallThroughState));
	    }
	  }, {}, State);
	  return {get FallThroughState() {
	      return FallThroughState;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/generator/BreakState.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/generator/BreakState.js";
	  var FallThroughState = System.get("traceur@0.0.87/src/codegeneration/generator/FallThroughState.js").FallThroughState;
	  var State = System.get("traceur@0.0.87/src/codegeneration/generator/State.js").State;
	  var BreakState = function BreakState(id, label) {
	    $traceurRuntime.superConstructor($BreakState).call(this, id);
	    this.label = label;
	  };
	  var $BreakState = BreakState;
	  ($traceurRuntime.createClass)(BreakState, {
	    replaceState: function(oldState, newState) {
	      return new $BreakState(State.replaceStateId(this.id, oldState, newState), this.label);
	    },
	    transform: function(enclosingFinally, machineEndState, reporter) {
	      throw new Error('These should be removed before the transform step');
	    },
	    transformBreak: function(labelSet) {
	      var breakState = arguments[1];
	      if (this.label === null)
	        return new FallThroughState(this.id, breakState, []);
	      if (labelSet.has(this.label)) {
	        return new FallThroughState(this.id, labelSet.get(this.label).fallThroughState, []);
	      }
	      return this;
	    },
	    transformBreakOrContinue: function(labelSet) {
	      var breakState = arguments[1];
	      var continueState = arguments[2];
	      return this.transformBreak(labelSet, breakState);
	    }
	  }, {}, State);
	  return {get BreakState() {
	      return BreakState;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/generator/ContinueState.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/generator/ContinueState.js";
	  var FallThroughState = System.get("traceur@0.0.87/src/codegeneration/generator/FallThroughState.js").FallThroughState;
	  var State = System.get("traceur@0.0.87/src/codegeneration/generator/State.js").State;
	  var ContinueState = function ContinueState(id, label) {
	    $traceurRuntime.superConstructor($ContinueState).call(this, id);
	    this.label = label;
	  };
	  var $ContinueState = ContinueState;
	  ($traceurRuntime.createClass)(ContinueState, {
	    replaceState: function(oldState, newState) {
	      return new $ContinueState(State.replaceStateId(this.id, oldState, newState), this.label);
	    },
	    transform: function(enclosingFinally, machineEndState, reporter) {
	      throw new Error('These should be removed before the transform step');
	    },
	    transformBreakOrContinue: function(labelSet) {
	      var breakState = arguments[1];
	      var continueState = arguments[2];
	      if (this.label === null)
	        return new FallThroughState(this.id, continueState, []);
	      if (labelSet.has(this.label)) {
	        return new FallThroughState(this.id, labelSet.get(this.label).continueState, []);
	      }
	      return this;
	    }
	  }, {}, State);
	  return {get ContinueState() {
	      return ContinueState;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/generator/BreakContinueTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/generator/BreakContinueTransformer.js";
	  var BreakState = System.get("traceur@0.0.87/src/codegeneration/generator/BreakState.js").BreakState;
	  var ContinueState = System.get("traceur@0.0.87/src/codegeneration/generator/ContinueState.js").ContinueState;
	  var ParseTreeTransformer = System.get("traceur@0.0.87/src/codegeneration/ParseTreeTransformer.js").ParseTreeTransformer;
	  var StateMachine = System.get("traceur@0.0.87/src/syntax/trees/StateMachine.js").StateMachine;
	  function safeGetLabel(tree) {
	    return tree.name ? tree.name.value : null;
	  }
	  var BreakContinueTransformer = function BreakContinueTransformer(stateAllocator) {
	    $traceurRuntime.superConstructor($BreakContinueTransformer).call(this);
	    this.transformBreaks_ = true;
	    this.stateAllocator_ = stateAllocator;
	  };
	  var $BreakContinueTransformer = BreakContinueTransformer;
	  ($traceurRuntime.createClass)(BreakContinueTransformer, {
	    allocateState_: function() {
	      return this.stateAllocator_.allocateState();
	    },
	    stateToStateMachine_: function(newState) {
	      var fallThroughState = this.allocateState_();
	      return new StateMachine(newState.id, fallThroughState, [newState], []);
	    },
	    transformBreakStatement: function(tree) {
	      return this.transformBreaks_ || tree.name ? this.stateToStateMachine_(new BreakState(this.allocateState_(), safeGetLabel(tree))) : tree;
	    },
	    transformContinueStatement: function(tree) {
	      return this.stateToStateMachine_(new ContinueState(this.allocateState_(), safeGetLabel(tree)));
	    },
	    transformDoWhileStatement: function(tree) {
	      return tree;
	    },
	    transformForOfStatement: function(tree) {
	      return tree;
	    },
	    transformForOnStatement: function(tree) {
	      return tree;
	    },
	    transformForStatement: function(tree) {
	      return tree;
	    },
	    transformFunctionDeclaration: function(tree) {
	      return tree;
	    },
	    transformFunctionExpression: function(tree) {
	      return tree;
	    },
	    transformStateMachine: function(tree) {
	      return tree;
	    },
	    transformSwitchStatement: function(tree) {
	      var oldState = this.transformBreaks_;
	      this.transformBreaks_ = false;
	      var result = $traceurRuntime.superGet(this, $BreakContinueTransformer.prototype, "transformSwitchStatement").call(this, tree);
	      this.transformBreaks_ = oldState;
	      return result;
	    },
	    transformWhileStatement: function(tree) {
	      return tree;
	    }
	  }, {}, ParseTreeTransformer);
	  return {get BreakContinueTransformer() {
	      return BreakContinueTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/generator/CatchState.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/generator/CatchState.js";
	  var State = System.get("traceur@0.0.87/src/codegeneration/generator/State.js").State;
	  var TryState = System.get("traceur@0.0.87/src/codegeneration/generator/TryState.js").TryState;
	  var CatchState = function CatchState(identifier, catchState, fallThroughState, allStates, nestedTrys) {
	    $traceurRuntime.superConstructor($CatchState).call(this, TryState.Kind.CATCH, allStates, nestedTrys);
	    this.identifier = identifier;
	    this.catchState = catchState;
	    this.fallThroughState = fallThroughState;
	  };
	  var $CatchState = CatchState;
	  ($traceurRuntime.createClass)(CatchState, {replaceState: function(oldState, newState) {
	      return new $CatchState(this.identifier, State.replaceStateId(this.catchState, oldState, newState), State.replaceStateId(this.fallThroughState, oldState, newState), this.replaceAllStates(oldState, newState), this.replaceNestedTrys(oldState, newState));
	    }}, {}, TryState);
	  return {get CatchState() {
	      return CatchState;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/generator/ConditionalState.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/generator/ConditionalState.js";
	  var $__0 = Object.freeze(Object.defineProperties(["$ctx.state = (", ") ? ", " : ", ";\n        break"], {raw: {value: Object.freeze(["$ctx.state = (", ") ? ", " : ", ";\n        break"])}}));
	  var State = System.get("traceur@0.0.87/src/codegeneration/generator/State.js").State;
	  var $__2 = System.get("traceur@0.0.87/src/codegeneration/ParseTreeFactory.js"),
	      createBlock = $__2.createBlock,
	      createIfStatement = $__2.createIfStatement;
	  var parseStatements = System.get("traceur@0.0.87/src/codegeneration/PlaceholderParser.js").parseStatements;
	  var ConditionalState = function ConditionalState(id, ifState, elseState, condition) {
	    $traceurRuntime.superConstructor($ConditionalState).call(this, id);
	    this.ifState = ifState;
	    this.elseState = elseState;
	    this.condition = condition;
	  };
	  var $ConditionalState = ConditionalState;
	  ($traceurRuntime.createClass)(ConditionalState, {
	    replaceState: function(oldState, newState) {
	      return new $ConditionalState(State.replaceStateId(this.id, oldState, newState), State.replaceStateId(this.ifState, oldState, newState), State.replaceStateId(this.elseState, oldState, newState), this.condition);
	    },
	    transform: function(enclosingFinally, machineEndState, reporter) {
	      if (State.isFinallyExit(enclosingFinally, this.ifState) || State.isFinallyExit(enclosingFinally, this.elseState)) {
	        return [createIfStatement(this.condition, createBlock(State.generateJump(enclosingFinally, this.ifState)), createBlock(State.generateJump(enclosingFinally, this.elseState)))];
	      }
	      return parseStatements($__0, this.condition, this.ifState, this.elseState);
	    }
	  }, {}, State);
	  return {get ConditionalState() {
	      return ConditionalState;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/generator/FinallyFallThroughState.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/generator/FinallyFallThroughState.js";
	  var State = System.get("traceur@0.0.87/src/codegeneration/generator/State.js").State;
	  var FinallyFallThroughState = function FinallyFallThroughState() {
	    $traceurRuntime.superConstructor($FinallyFallThroughState).apply(this, arguments);
	    ;
	  };
	  var $FinallyFallThroughState = FinallyFallThroughState;
	  ($traceurRuntime.createClass)(FinallyFallThroughState, {
	    replaceState: function(oldState, newState) {
	      return new $FinallyFallThroughState(State.replaceStateId(this.id, oldState, newState));
	    },
	    transformMachineState: function(enclosingFinally, machineEndState, reporter) {
	      return null;
	    },
	    transform: function(enclosingFinally, machineEndState, reporter) {
	      throw new Error('these are generated in addFinallyFallThroughDispatches');
	    }
	  }, {}, State);
	  return {get FinallyFallThroughState() {
	      return FinallyFallThroughState;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/generator/FinallyState.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/generator/FinallyState.js";
	  var State = System.get("traceur@0.0.87/src/codegeneration/generator/State.js").State;
	  var TryState = System.get("traceur@0.0.87/src/codegeneration/generator/TryState.js").TryState;
	  var FinallyState = function FinallyState(finallyState, fallThroughState, allStates, nestedTrys) {
	    $traceurRuntime.superConstructor($FinallyState).call(this, TryState.Kind.FINALLY, allStates, nestedTrys);
	    this.finallyState = finallyState;
	    this.fallThroughState = fallThroughState;
	  };
	  var $FinallyState = FinallyState;
	  ($traceurRuntime.createClass)(FinallyState, {replaceState: function(oldState, newState) {
	      return new $FinallyState(State.replaceStateId(this.finallyState, oldState, newState), State.replaceStateId(this.fallThroughState, oldState, newState), this.replaceAllStates(oldState, newState), this.replaceNestedTrys(oldState, newState));
	    }}, {}, TryState);
	  return {get FinallyState() {
	      return FinallyState;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/generator/StateAllocator.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/generator/StateAllocator.js";
	  var State = System.get("traceur@0.0.87/src/codegeneration/generator/State.js").State;
	  var StateAllocator = function StateAllocator() {
	    this.nextState_ = State.START_STATE + 1;
	  };
	  ($traceurRuntime.createClass)(StateAllocator, {allocateState: function() {
	      return this.nextState_++;
	    }}, {});
	  return {get StateAllocator() {
	      return StateAllocator;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/generator/SwitchState.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/generator/SwitchState.js";
	  var $__0 = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js"),
	      CaseClause = $__0.CaseClause,
	      DefaultClause = $__0.DefaultClause,
	      SwitchStatement = $__0.SwitchStatement;
	  var State = System.get("traceur@0.0.87/src/codegeneration/generator/State.js").State;
	  var createBreakStatement = System.get("traceur@0.0.87/src/codegeneration/ParseTreeFactory.js").createBreakStatement;
	  var SwitchClause = function SwitchClause(first, second) {
	    this.first = first;
	    this.second = second;
	  };
	  ($traceurRuntime.createClass)(SwitchClause, {}, {});
	  var SwitchState = function SwitchState(id, expression, clauses) {
	    $traceurRuntime.superConstructor($SwitchState).call(this, id);
	    this.expression = expression;
	    this.clauses = clauses;
	  };
	  var $SwitchState = SwitchState;
	  ($traceurRuntime.createClass)(SwitchState, {
	    replaceState: function(oldState, newState) {
	      var clauses = this.clauses.map((function(clause) {
	        return new SwitchClause(clause.first, State.replaceStateId(clause.second, oldState, newState));
	      }));
	      return new $SwitchState(State.replaceStateId(this.id, oldState, newState), this.expression, clauses);
	    },
	    transform: function(enclosingFinally, machineEndState, reporter) {
	      var clauses = [];
	      for (var i = 0; i < this.clauses.length; i++) {
	        var clause = this.clauses[i];
	        if (clause.first === null) {
	          clauses.push(new DefaultClause(null, State.generateJump(enclosingFinally, clause.second)));
	        } else {
	          clauses.push(new CaseClause(null, clause.first, State.generateJump(enclosingFinally, clause.second)));
	        }
	      }
	      return [new SwitchStatement(null, this.expression, clauses), createBreakStatement()];
	    }
	  }, {}, State);
	  return {
	    get SwitchClause() {
	      return SwitchClause;
	    },
	    get SwitchState() {
	      return SwitchState;
	    }
	  };
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/generator/CPSTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/generator/CPSTransformer.js";
	  var $__0 = Object.freeze(Object.defineProperties(["$ctx.pushTry(\n            ", ",\n            ", ");"], {raw: {value: Object.freeze(["$ctx.pushTry(\n            ", ",\n            ", ");"])}})),
	      $__1 = Object.freeze(Object.defineProperties(["$ctx.popTry();"], {raw: {value: Object.freeze(["$ctx.popTry();"])}})),
	      $__2 = Object.freeze(Object.defineProperties(["\n              $ctx.popTry();\n              $ctx.maybeUncatchable(); // see RETURN_SENTINEL in runtime\n              ", " = $ctx.storedException;"], {raw: {value: Object.freeze(["\n              $ctx.popTry();\n              $ctx.maybeUncatchable(); // see RETURN_SENTINEL in runtime\n              ", " = $ctx.storedException;"])}})),
	      $__3 = Object.freeze(Object.defineProperties(["$ctx.popTry();"], {raw: {value: Object.freeze(["$ctx.popTry();"])}})),
	      $__4 = Object.freeze(Object.defineProperties(["function($ctx) {\n      while (true) ", "\n    }"], {raw: {value: Object.freeze(["function($ctx) {\n      while (true) ", "\n    }"])}})),
	      $__5 = Object.freeze(Object.defineProperties(["var $arguments = arguments;"], {raw: {value: Object.freeze(["var $arguments = arguments;"])}})),
	      $__6 = Object.freeze(Object.defineProperties(["return ", "(\n              ", ",\n              ", ", this);"], {raw: {value: Object.freeze(["return ", "(\n              ", ",\n              ", ", this);"])}})),
	      $__7 = Object.freeze(Object.defineProperties(["return ", "(\n              ", ", this);"], {raw: {value: Object.freeze(["return ", "(\n              ", ", this);"])}})),
	      $__8 = Object.freeze(Object.defineProperties(["return $ctx.end()"], {raw: {value: Object.freeze(["return $ctx.end()"])}})),
	      $__9 = Object.freeze(Object.defineProperties(["\n                  $ctx.state = $ctx.finallyFallThrough;\n                  $ctx.finallyFallThrough = ", ";\n                  break;"], {raw: {value: Object.freeze(["\n                  $ctx.state = $ctx.finallyFallThrough;\n                  $ctx.finallyFallThrough = ", ";\n                  break;"])}})),
	      $__10 = Object.freeze(Object.defineProperties(["\n                      $ctx.state = $ctx.finallyFallThrough;\n                      break;"], {raw: {value: Object.freeze(["\n                      $ctx.state = $ctx.finallyFallThrough;\n                      break;"])}}));
	  var AlphaRenamer = System.get("traceur@0.0.87/src/codegeneration/AlphaRenamer.js").AlphaRenamer;
	  var BreakContinueTransformer = System.get("traceur@0.0.87/src/codegeneration/generator/BreakContinueTransformer.js").BreakContinueTransformer;
	  var $__13 = System.get("traceur@0.0.87/src/syntax/trees/ParseTreeType.js"),
	      BLOCK = $__13.BLOCK,
	      CASE_CLAUSE = $__13.CASE_CLAUSE,
	      CONDITIONAL_EXPRESSION = $__13.CONDITIONAL_EXPRESSION,
	      EXPRESSION_STATEMENT = $__13.EXPRESSION_STATEMENT,
	      PAREN_EXPRESSION = $__13.PAREN_EXPRESSION,
	      STATE_MACHINE = $__13.STATE_MACHINE;
	  var $__14 = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js"),
	      AnonBlock = $__14.AnonBlock,
	      Block = $__14.Block,
	      CaseClause = $__14.CaseClause,
	      IfStatement = $__14.IfStatement,
	      SwitchStatement = $__14.SwitchStatement;
	  var CatchState = System.get("traceur@0.0.87/src/codegeneration/generator/CatchState.js").CatchState;
	  var ConditionalState = System.get("traceur@0.0.87/src/codegeneration/generator/ConditionalState.js").ConditionalState;
	  var ExplodeExpressionTransformer = System.get("traceur@0.0.87/src/codegeneration/ExplodeExpressionTransformer.js").ExplodeExpressionTransformer;
	  var FallThroughState = System.get("traceur@0.0.87/src/codegeneration/generator/FallThroughState.js").FallThroughState;
	  var FinallyFallThroughState = System.get("traceur@0.0.87/src/codegeneration/generator/FinallyFallThroughState.js").FinallyFallThroughState;
	  var FinallyState = System.get("traceur@0.0.87/src/codegeneration/generator/FinallyState.js").FinallyState;
	  var FindInFunctionScope = System.get("traceur@0.0.87/src/codegeneration/FindInFunctionScope.js").FindInFunctionScope;
	  var ParseTreeTransformer = System.get("traceur@0.0.87/src/codegeneration/ParseTreeTransformer.js").ParseTreeTransformer;
	  var StringMap = System.get("traceur@0.0.87/src/util/StringMap.js").StringMap;
	  var TempVarTransformer = System.get("traceur@0.0.87/src/codegeneration/TempVarTransformer.js").TempVarTransformer;
	  var assert = System.get("traceur@0.0.87/src/util/assert.js").assert;
	  var $__26 = System.get("traceur@0.0.87/src/codegeneration/PlaceholderParser.js"),
	      parseExpression = $__26.parseExpression,
	      parseStatement = $__26.parseStatement,
	      parseStatements = $__26.parseStatements;
	  var State = System.get("traceur@0.0.87/src/codegeneration/generator/State.js").State;
	  var StateAllocator = System.get("traceur@0.0.87/src/codegeneration/generator/StateAllocator.js").StateAllocator;
	  var StateMachine = System.get("traceur@0.0.87/src/syntax/trees/StateMachine.js").StateMachine;
	  var $__30 = System.get("traceur@0.0.87/src/codegeneration/generator/SwitchState.js"),
	      SwitchClause = $__30.SwitchClause,
	      SwitchState = $__30.SwitchState;
	  var TryState = System.get("traceur@0.0.87/src/codegeneration/generator/TryState.js").TryState;
	  var $__32 = System.get("traceur@0.0.87/src/codegeneration/ParseTreeFactory.js"),
	      createAssignStateStatement = $__32.createAssignStateStatement,
	      createBreakStatement = $__32.createBreakStatement,
	      createCaseClause = $__32.createCaseClause,
	      createDefaultClause = $__32.createDefaultClause,
	      createExpressionStatement = $__32.createExpressionStatement,
	      createFunctionBody = $__32.createFunctionBody,
	      id = $__32.createIdentifierExpression,
	      createMemberExpression = $__32.createMemberExpression,
	      createNumberLiteral = $__32.createNumberLiteral,
	      createSwitchStatement = $__32.createSwitchStatement;
	  var HoistVariablesTransformer = System.get("traceur@0.0.87/src/codegeneration/HoistVariablesTransformer.js").default;
	  var LabelState = function LabelState(name, continueState, fallThroughState) {
	    this.name = name;
	    this.continueState = continueState;
	    this.fallThroughState = fallThroughState;
	  };
	  ($traceurRuntime.createClass)(LabelState, {}, {});
	  var NeedsStateMachine = function NeedsStateMachine() {
	    $traceurRuntime.superConstructor($NeedsStateMachine).apply(this, arguments);
	    ;
	  };
	  var $NeedsStateMachine = NeedsStateMachine;
	  ($traceurRuntime.createClass)(NeedsStateMachine, {
	    visitBreakStatement: function(tree) {
	      this.found = true;
	    },
	    visitContinueStatement: function(tree) {
	      this.found = true;
	    },
	    visitStateMachine: function(tree) {
	      this.found = true;
	    },
	    visitYieldExpression: function(tee) {
	      this.found = true;
	    }
	  }, {}, FindInFunctionScope);
	  function needsStateMachine(tree) {
	    var visitor = new NeedsStateMachine();
	    visitor.visitAny(tree);
	    return visitor.found;
	  }
	  var HoistVariables = function HoistVariables() {
	    $traceurRuntime.superConstructor($HoistVariables).call(this, true);
	  };
	  var $HoistVariables = HoistVariables;
	  ($traceurRuntime.createClass)(HoistVariables, {
	    prependVariables: function(statements) {
	      return statements;
	    },
	    prependFunctions: function(statements) {
	      return statements;
	    }
	  }, {}, HoistVariablesTransformer);
	  var CPSTransformer = function CPSTransformer(identifierGenerator, reporter) {
	    $traceurRuntime.superConstructor($CPSTransformer).call(this, identifierGenerator);
	    this.reporter = reporter;
	    this.stateAllocator_ = new StateAllocator();
	    this.labelSet_ = new StringMap();
	    this.currentLabel_ = null;
	    this.hoistVariablesTransformer_ = new HoistVariables();
	  };
	  var $CPSTransformer = CPSTransformer;
	  ($traceurRuntime.createClass)(CPSTransformer, {
	    expressionNeedsStateMachine: function(tree) {
	      return false;
	    },
	    allocateState: function() {
	      return this.stateAllocator_.allocateState();
	    },
	    transformBlock: function(tree) {
	      var labels = this.getLabels_();
	      var label = this.clearCurrentLabel_();
	      var transformedTree = $traceurRuntime.superGet(this, $CPSTransformer.prototype, "transformBlock").call(this, tree);
	      var machine = this.transformStatementList_(transformedTree.statements);
	      if (machine === null)
	        return transformedTree;
	      if (label) {
	        var states = [];
	        for (var i = 0; i < machine.states.length; i++) {
	          var state = machine.states[i];
	          states.push(state.transformBreakOrContinue(labels));
	        }
	        machine = new StateMachine(machine.startState, machine.fallThroughState, states, machine.exceptionBlocks);
	      }
	      return machine;
	    },
	    transformFunctionBody: function(tree) {
	      this.pushTempScope();
	      var oldLabels = this.clearLabels_();
	      var transformedTree = $traceurRuntime.superGet(this, $CPSTransformer.prototype, "transformFunctionBody").call(this, tree);
	      var machine = this.transformStatementList_(transformedTree.statements);
	      this.restoreLabels_(oldLabels);
	      this.popTempScope();
	      return machine === null ? transformedTree : machine;
	    },
	    transformStatementList_: function(trees) {
	      var groups = [];
	      var newMachine;
	      for (var i = 0; i < trees.length; i++) {
	        if (trees[i].type === STATE_MACHINE) {
	          groups.push(trees[i]);
	        } else if (needsStateMachine(trees[i])) {
	          newMachine = this.ensureTransformed_(trees[i]);
	          groups.push(newMachine);
	        } else {
	          var last = groups[groups.length - 1];
	          if (!(last instanceof Array))
	            groups.push(last = []);
	          last.push(trees[i]);
	        }
	      }
	      if (groups.length === 1 && groups[0] instanceof Array)
	        return null;
	      var machine = null;
	      for (var i$__41 = 0; i$__41 < groups.length; i$__41++) {
	        if (groups[i$__41] instanceof Array) {
	          newMachine = this.statementsToStateMachine_(groups[i$__41]);
	        } else {
	          newMachine = groups[i$__41];
	        }
	        if (i$__41 === 0)
	          machine = newMachine;
	        else
	          machine = machine.append(newMachine);
	      }
	      return machine;
	    },
	    needsStateMachine_: function(statements) {
	      if (statements instanceof Array) {
	        for (var i = 0; i < statements.length; i++) {
	          if (needsStateMachine(statements[i]))
	            return true;
	        }
	        return false;
	      }
	      assert(statements instanceof SwitchStatement);
	      return needsStateMachine(statements);
	    },
	    transformCaseClause: function(tree) {
	      var result = $traceurRuntime.superGet(this, $CPSTransformer.prototype, "transformCaseClause").call(this, tree);
	      var machine = this.transformStatementList_(result.statements);
	      return machine === null ? result : new CaseClause(null, result.expression, [machine]);
	    },
	    transformDoWhileStatement: function(tree) {
	      var $__38;
	      var $__36,
	          $__37;
	      var labels = this.getLabels_();
	      var label = this.clearCurrentLabel_();
	      var machine,
	          condition,
	          body;
	      if (this.expressionNeedsStateMachine(tree.condition)) {
	        (($__36 = this.expressionToStateMachine(tree.condition), machine = $__36.machine, condition = $__36.expression, $__36));
	        body = this.transformAny(tree.body);
	      } else {
	        var result = $traceurRuntime.superGet(this, $CPSTransformer.prototype, "transformDoWhileStatement").call(this, tree);
	        (($__37 = result, condition = $__37.condition, body = $__37.body, $__37));
	        if (body.type !== STATE_MACHINE)
	          return result;
	      }
	      var loopBodyMachine = this.ensureTransformed_(body);
	      var startState = loopBodyMachine.startState;
	      var conditionState = loopBodyMachine.fallThroughState;
	      var fallThroughState = this.allocateState();
	      var states = [];
	      this.addLoopBodyStates_(loopBodyMachine, conditionState, fallThroughState, labels, states);
	      if (machine) {
	        machine = machine.replaceStartState(conditionState);
	        conditionState = machine.fallThroughState;
	        ($__38 = states).push.apply($__38, $traceurRuntime.spread(machine.states));
	      }
	      states.push(new ConditionalState(conditionState, startState, fallThroughState, condition));
	      machine = new StateMachine(startState, fallThroughState, states, loopBodyMachine.exceptionBlocks);
	      if (label)
	        machine = machine.replaceStateId(conditionState, label.continueState);
	      return machine;
	    },
	    addLoopBodyStates_: function(loopBodyMachine, continueState, breakState, labels, states) {
	      for (var i = 0; i < loopBodyMachine.states.length; i++) {
	        var state = loopBodyMachine.states[i];
	        states.push(state.transformBreakOrContinue(labels, breakState, continueState));
	      }
	    },
	    transformForStatement: function(tree) {
	      var $__38,
	          $__39,
	          $__40;
	      var labels = this.getLabels_();
	      var label = this.clearCurrentLabel_();
	      var tmp;
	      var initializer = null,
	          initializerMachine;
	      if (tree.initializer) {
	        if (this.expressionNeedsStateMachine(tree.initializer)) {
	          tmp = this.expressionToStateMachine(tree.initializer);
	          initializer = tmp.expression;
	          initializerMachine = tmp.machine;
	        } else {
	          initializer = this.transformAny(tree.initializer);
	        }
	      }
	      var condition = null,
	          conditionMachine;
	      if (tree.condition) {
	        if (this.expressionNeedsStateMachine(tree.condition)) {
	          tmp = this.expressionToStateMachine(tree.condition);
	          condition = tmp.expression;
	          conditionMachine = tmp.machine;
	        } else {
	          condition = this.transformAny(tree.condition);
	        }
	      }
	      var increment = null,
	          incrementMachine;
	      if (tree.increment) {
	        if (this.expressionNeedsStateMachine(tree.increment)) {
	          tmp = this.expressionToStateMachine(tree.increment);
	          increment = tmp.expression;
	          incrementMachine = tmp.machine;
	        } else {
	          increment = this.transformAny(tree.increment);
	        }
	      }
	      var body = this.transformAny(tree.body);
	      if (initializer === tree.initializer && condition === tree.condition && increment === tree.increment && body === tree.body) {
	        return tree;
	      }
	      if (!initializerMachine && !conditionMachine && !incrementMachine && body.type !== STATE_MACHINE) {
	        return new ForStatement(tree.location, initializer, condition, increment, body);
	      }
	      var loopBodyMachine = this.ensureTransformed_(body);
	      var bodyFallThroughId = loopBodyMachine.fallThroughState;
	      var fallThroughId = this.allocateState();
	      var startId;
	      var initializerStartId = initializer ? this.allocateState() : State.INVALID_STATE;
	      var conditionStartId = increment ? this.allocateState() : bodyFallThroughId;
	      var loopStartId = loopBodyMachine.startState;
	      var incrementStartId = bodyFallThroughId;
	      var states = [];
	      if (initializer) {
	        startId = initializerStartId;
	        var initialiserFallThroughId;
	        if (condition)
	          initialiserFallThroughId = conditionStartId;
	        else
	          initialiserFallThroughId = loopStartId;
	        var tmpId = initializerStartId;
	        if (initializerMachine) {
	          initializerMachine = initializerMachine.replaceStartState(initializerStartId);
	          tmpId = initializerMachine.fallThroughState;
	          ($__38 = states).push.apply($__38, $traceurRuntime.spread(initializerMachine.states));
	        }
	        states.push(new FallThroughState(tmpId, initialiserFallThroughId, [createExpressionStatement(initializer)]));
	      }
	      if (condition) {
	        if (!initializer)
	          startId = conditionStartId;
	        var tmpId$__42 = conditionStartId;
	        if (conditionMachine) {
	          conditionMachine = conditionMachine.replaceStartState(conditionStartId);
	          tmpId$__42 = conditionMachine.fallThroughState;
	          ($__39 = states).push.apply($__39, $traceurRuntime.spread(conditionMachine.states));
	        }
	        states.push(new ConditionalState(tmpId$__42, loopStartId, fallThroughId, condition));
	      }
	      if (increment) {
	        var incrementFallThroughId;
	        if (condition)
	          incrementFallThroughId = conditionStartId;
	        else
	          incrementFallThroughId = loopStartId;
	        var tmpId$__43 = incrementStartId;
	        if (incrementMachine) {
	          incrementMachine = incrementMachine.replaceStartState(incrementStartId);
	          tmpId$__43 = incrementMachine.fallThroughState;
	          ($__40 = states).push.apply($__40, $traceurRuntime.spread(incrementMachine.states));
	        }
	        states.push(new FallThroughState(tmpId$__43, incrementFallThroughId, [createExpressionStatement(increment)]));
	      }
	      if (!initializer && !condition)
	        startId = loopStartId;
	      var continueId;
	      if (increment)
	        continueId = incrementStartId;
	      else if (condition)
	        continueId = conditionStartId;
	      else
	        continueId = loopStartId;
	      if (!increment && !condition) {
	        loopBodyMachine = loopBodyMachine.replaceFallThroughState(loopBodyMachine.startState);
	      }
	      this.addLoopBodyStates_(loopBodyMachine, continueId, fallThroughId, labels, states);
	      var machine = new StateMachine(startId, fallThroughId, states, loopBodyMachine.exceptionBlocks);
	      if (label)
	        machine = machine.replaceStateId(continueId, label.continueState);
	      return machine;
	    },
	    transformForInStatement: function(tree) {
	      return tree;
	    },
	    transformForOfStatement: function(tree) {
	      throw new Error('for of statements should be transformed before this pass');
	    },
	    transformIfStatement: function(tree) {
	      var $__38,
	          $__39,
	          $__40;
	      var $__36,
	          $__37;
	      var machine,
	          condition,
	          ifClause,
	          elseClause;
	      if (this.expressionNeedsStateMachine(tree.condition)) {
	        (($__36 = this.expressionToStateMachine(tree.condition), machine = $__36.machine, condition = $__36.expression, $__36));
	        ifClause = this.transformAny(tree.ifClause);
	        elseClause = this.transformAny(tree.elseClause);
	      } else {
	        var result = $traceurRuntime.superGet(this, $CPSTransformer.prototype, "transformIfStatement").call(this, tree);
	        (($__37 = result, condition = $__37.condition, ifClause = $__37.ifClause, elseClause = $__37.elseClause, $__37));
	        if (ifClause.type !== STATE_MACHINE && (elseClause === null || elseClause.type !== STATE_MACHINE)) {
	          return result;
	        }
	      }
	      ifClause = this.ensureTransformed_(ifClause);
	      elseClause = this.ensureTransformed_(elseClause);
	      var startState = this.allocateState();
	      var fallThroughState = ifClause.fallThroughState;
	      var ifState = ifClause.startState;
	      var elseState = elseClause === null ? fallThroughState : elseClause.startState;
	      var states = [];
	      var exceptionBlocks = [];
	      states.push(new ConditionalState(startState, ifState, elseState, condition));
	      ($__38 = states).push.apply($__38, $traceurRuntime.spread(ifClause.states));
	      ($__39 = exceptionBlocks).push.apply($__39, $traceurRuntime.spread(ifClause.exceptionBlocks));
	      if (elseClause !== null) {
	        this.replaceAndAddStates_(elseClause.states, elseClause.fallThroughState, fallThroughState, states);
	        ($__40 = exceptionBlocks).push.apply($__40, $traceurRuntime.spread(State.replaceAllStates(elseClause.exceptionBlocks, elseClause.fallThroughState, fallThroughState)));
	      }
	      var ifMachine = new StateMachine(startState, fallThroughState, states, exceptionBlocks);
	      if (machine)
	        ifMachine = machine.append(ifMachine);
	      return ifMachine;
	    },
	    removeEmptyStates: function(oldStates) {
	      var emptyStates = [],
	          newStates = [];
	      for (var i = 0; i < oldStates.length; i++) {
	        if (oldStates[i] instanceof FallThroughState && oldStates[i].statements.length === 0) {
	          emptyStates.push(oldStates[i]);
	        } else {
	          newStates.push(oldStates[i]);
	        }
	      }
	      for (i = 0; i < newStates.length; i++) {
	        newStates[i] = emptyStates.reduce((function(state, $__36) {
	          var $__37 = $__36,
	              id = $__37.id,
	              fallThroughState = $__37.fallThroughState;
	          return state.replaceState(id, fallThroughState);
	        }), newStates[i]);
	      }
	      return newStates;
	    },
	    replaceAndAddStates_: function(oldStates, oldState, newState, newStates) {
	      for (var i = 0; i < oldStates.length; i++) {
	        newStates.push(oldStates[i].replaceState(oldState, newState));
	      }
	    },
	    transformLabelledStatement: function(tree) {
	      var startState = this.allocateState();
	      var continueState = this.allocateState();
	      var fallThroughState = this.allocateState();
	      var label = new LabelState(tree.name.value, continueState, fallThroughState);
	      var oldLabels = this.addLabel_(label);
	      this.currentLabel_ = label;
	      var result = this.transformAny(tree.statement);
	      if (result === tree.statement) {
	        result = tree;
	      } else if (result.type === STATE_MACHINE) {
	        result = result.replaceStartState(startState);
	        result = result.replaceFallThroughState(fallThroughState);
	      }
	      this.restoreLabels_(oldLabels);
	      return result;
	    },
	    getLabels_: function() {
	      return this.labelSet_;
	    },
	    restoreLabels_: function(oldLabels) {
	      this.labelSet_ = oldLabels;
	    },
	    addLabel_: function(label) {
	      var $__34 = this;
	      var oldLabels = this.labelSet_;
	      var labelSet = new StringMap();
	      this.labelSet_.forEach((function(k) {
	        return labelSet[k] = $__34.labelSet_[k];
	      }));
	      labelSet.set(label.name, label);
	      this.labelSet_ = labelSet;
	      return oldLabels;
	    },
	    clearLabels_: function() {
	      var result = this.labelSet_;
	      this.labelSet_ = new StringMap();
	      return result;
	    },
	    clearCurrentLabel_: function() {
	      var result = this.currentLabel_;
	      this.currentLabel_ = null;
	      return result;
	    },
	    transformSwitchStatement: function(tree) {
	      var $__36,
	          $__37;
	      var labels = this.getLabels_();
	      var expression,
	          machine,
	          caseClauses;
	      if (this.expressionNeedsStateMachine(tree.expression)) {
	        (($__36 = this.expressionToStateMachine(tree.expression), expression = $__36.expression, machine = $__36.machine, $__36));
	        caseClauses = this.transformList(tree.caseClauses);
	      } else {
	        var result = $traceurRuntime.superGet(this, $CPSTransformer.prototype, "transformSwitchStatement").call(this, tree);
	        if (!needsStateMachine(result))
	          return result;
	        (($__37 = result, expression = $__37.expression, caseClauses = $__37.caseClauses, $__37));
	      }
	      var startState = this.allocateState();
	      var fallThroughState = this.allocateState();
	      var nextState = fallThroughState;
	      var states = [];
	      var clauses = [];
	      var tryStates = [];
	      var hasDefault = false;
	      for (var index = caseClauses.length - 1; index >= 0; index--) {
	        var clause = caseClauses[index];
	        if (clause.type === CASE_CLAUSE) {
	          var caseClause = clause;
	          nextState = this.addSwitchClauseStates_(nextState, fallThroughState, labels, caseClause.statements, states, tryStates);
	          clauses.push(new SwitchClause(caseClause.expression, nextState));
	        } else {
	          hasDefault = true;
	          var defaultClause = clause;
	          nextState = this.addSwitchClauseStates_(nextState, fallThroughState, labels, defaultClause.statements, states, tryStates);
	          clauses.push(new SwitchClause(null, nextState));
	        }
	      }
	      if (!hasDefault) {
	        clauses.push(new SwitchClause(null, fallThroughState));
	      }
	      states.push(new SwitchState(startState, expression, clauses.reverse()));
	      var switchMachine = new StateMachine(startState, fallThroughState, states.reverse(), tryStates);
	      if (machine)
	        switchMachine = machine.append(switchMachine);
	      return switchMachine;
	    },
	    addSwitchClauseStates_: function(nextState, fallThroughState, labels, statements, states, tryStates) {
	      var $__38;
	      var machine = this.ensureTransformedList_(statements);
	      for (var i = 0; i < machine.states.length; i++) {
	        var state = machine.states[i];
	        var transformedState = state.transformBreak(labels, fallThroughState);
	        states.push(transformedState.replaceState(machine.fallThroughState, nextState));
	      }
	      ($__38 = tryStates).push.apply($__38, $traceurRuntime.spread(machine.exceptionBlocks));
	      return machine.startState;
	    },
	    transformTryStatement: function(tree) {
	      var result = $traceurRuntime.superGet(this, $CPSTransformer.prototype, "transformTryStatement").call(this, tree);
	      var $__36 = result,
	          body = $__36.body,
	          catchBlock = $__36.catchBlock,
	          finallyBlock = $__36.finallyBlock;
	      if (body.type !== STATE_MACHINE && (catchBlock === null || catchBlock.catchBody.type !== STATE_MACHINE) && (finallyBlock === null || finallyBlock.block.type !== STATE_MACHINE)) {
	        return result;
	      }
	      var outerCatchState = this.allocateState();
	      var outerFinallyState = this.allocateState();
	      var pushTryState = this.statementToStateMachine_(parseStatement($__0, (catchBlock && outerCatchState), (finallyBlock && outerFinallyState)));
	      var tryMachine = this.ensureTransformed_(body);
	      tryMachine = pushTryState.append(tryMachine);
	      if (catchBlock !== null) {
	        var popTry = this.statementToStateMachine_(parseStatement($__1));
	        tryMachine = tryMachine.append(popTry);
	        var exceptionName = catchBlock.binding.identifierToken.value;
	        var catchMachine = this.ensureTransformed_(catchBlock.catchBody);
	        var catchStart = this.allocateState();
	        this.addMachineVariable(exceptionName);
	        var states = $traceurRuntime.spread(tryMachine.states, [new FallThroughState(catchStart, catchMachine.startState, parseStatements($__2, id(exceptionName)))]);
	        this.replaceAndAddStates_(catchMachine.states, catchMachine.fallThroughState, tryMachine.fallThroughState, states);
	        tryMachine = new StateMachine(tryMachine.startState, tryMachine.fallThroughState, states, [new CatchState(exceptionName, catchStart, tryMachine.fallThroughState, tryMachine.getAllStateIDs(), tryMachine.exceptionBlocks)]);
	        tryMachine = tryMachine.replaceStateId(catchStart, outerCatchState);
	      }
	      if (finallyBlock !== null) {
	        var finallyMachine = this.ensureTransformed_(finallyBlock.block);
	        var popTry$__44 = this.statementToStateMachine_(parseStatement($__3));
	        finallyMachine = popTry$__44.append(finallyMachine);
	        var states$__45 = $traceurRuntime.spread(tryMachine.states, finallyMachine.states, [new FinallyFallThroughState(finallyMachine.fallThroughState)]);
	        tryMachine = new StateMachine(tryMachine.startState, tryMachine.fallThroughState, states$__45, [new FinallyState(finallyMachine.startState, finallyMachine.fallThroughState, tryMachine.getAllStateIDs(), tryMachine.exceptionBlocks)]);
	        tryMachine = tryMachine.replaceStateId(finallyMachine.startState, outerFinallyState);
	      }
	      return tryMachine;
	    },
	    transformWhileStatement: function(tree) {
	      var $__38;
	      var $__36,
	          $__37;
	      var labels = this.getLabels_();
	      var label = this.clearCurrentLabel_();
	      var condition,
	          machine,
	          body;
	      if (this.expressionNeedsStateMachine(tree.condition)) {
	        (($__36 = this.expressionToStateMachine(tree.condition), machine = $__36.machine, condition = $__36.expression, $__36));
	        body = this.transformAny(tree.body);
	      } else {
	        var result = $traceurRuntime.superGet(this, $CPSTransformer.prototype, "transformWhileStatement").call(this, tree);
	        (($__37 = result, condition = $__37.condition, body = $__37.body, $__37));
	        if (body.type !== STATE_MACHINE)
	          return result;
	      }
	      var loopBodyMachine = this.ensureTransformed_(body);
	      var startState = loopBodyMachine.fallThroughState;
	      var fallThroughState = this.allocateState();
	      var states = [];
	      var conditionStart = startState;
	      if (machine) {
	        machine = machine.replaceStartState(startState);
	        conditionStart = machine.fallThroughState;
	        ($__38 = states).push.apply($__38, $traceurRuntime.spread(machine.states));
	      }
	      states.push(new ConditionalState(conditionStart, loopBodyMachine.startState, fallThroughState, condition));
	      this.addLoopBodyStates_(loopBodyMachine, startState, fallThroughState, labels, states);
	      machine = new StateMachine(startState, fallThroughState, states, loopBodyMachine.exceptionBlocks);
	      if (label)
	        machine = machine.replaceStateId(startState, label.continueState);
	      return machine;
	    },
	    transformWithStatement: function(tree) {
	      var result = $traceurRuntime.superGet(this, $CPSTransformer.prototype, "transformWithStatement").call(this, tree);
	      if (result.body.type !== STATE_MACHINE) {
	        return result;
	      }
	      throw new Error('Unreachable - with statement not allowed in strict mode/harmony');
	    },
	    generateMachineInnerFunction: function(machine) {
	      var enclosingFinallyState = machine.getEnclosingFinallyMap();
	      var SwitchStatement = createSwitchStatement(createMemberExpression('$ctx', 'state'), this.transformMachineStates(machine, State.END_STATE, State.RETHROW_STATE, enclosingFinallyState));
	      return parseExpression($__4, SwitchStatement);
	    },
	    addTempVar: function() {
	      var name = this.getTempIdentifier();
	      this.addMachineVariable(name);
	      return name;
	    },
	    addMachineVariable: function(name) {
	      this.hoistVariablesTransformer_.addVariable(name);
	    },
	    transformCpsFunctionBody: function(tree, runtimeMethod) {
	      var $__38;
	      var functionRef = arguments[2];
	      var alphaRenamedTree = AlphaRenamer.rename(tree, 'arguments', '$arguments');
	      var hasArguments = alphaRenamedTree !== tree;
	      var hoistedTree = this.hoistVariablesTransformer_.transformAny(alphaRenamedTree);
	      var maybeMachine = this.transformAny(hoistedTree);
	      if (this.reporter.hadError())
	        return tree;
	      var machine;
	      if (maybeMachine.type !== STATE_MACHINE) {
	        machine = this.statementsToStateMachine_(maybeMachine.statements);
	      } else {
	        machine = new StateMachine(maybeMachine.startState, maybeMachine.fallThroughState, this.removeEmptyStates(maybeMachine.states), maybeMachine.exceptionBlocks);
	      }
	      machine = machine.replaceFallThroughState(State.END_STATE).replaceStartState(State.START_STATE);
	      var statements = [];
	      if (this.hoistVariablesTransformer_.hasFunctions())
	        ($__38 = statements).push.apply($__38, $traceurRuntime.spread(this.hoistVariablesTransformer_.getFunctions()));
	      if (this.hoistVariablesTransformer_.hasVariables())
	        statements.push(this.hoistVariablesTransformer_.getVariableStatement());
	      if (hasArguments)
	        statements.push(parseStatement($__5));
	      if (functionRef) {
	        statements.push(parseStatement($__6, runtimeMethod, this.generateMachineInnerFunction(machine), functionRef));
	      } else {
	        statements.push(parseStatement($__7, runtimeMethod, this.generateMachineInnerFunction(machine)));
	      }
	      return createFunctionBody(statements);
	    },
	    transformFunctionDeclaration: function(tree) {
	      return tree;
	    },
	    transformFunctionExpression: function(tree) {
	      return tree;
	    },
	    transformGetAccessor: function(tree) {
	      return tree;
	    },
	    transformSetAccessor: function(tree) {
	      return tree;
	    },
	    transformArrowFunctionExpression: function(tree) {
	      return tree;
	    },
	    transformStateMachine: function(tree) {
	      return tree;
	    },
	    statementToStateMachine_: function(statement) {
	      var statements;
	      if (statement.type === BLOCK)
	        statements = statement.statements;
	      else
	        statements = [statement];
	      return this.statementsToStateMachine_(statements);
	    },
	    statementsToStateMachine_: function(statements) {
	      var startState = this.allocateState();
	      var fallThroughState = this.allocateState();
	      return this.stateToStateMachine_(new FallThroughState(startState, fallThroughState, statements), fallThroughState);
	    },
	    stateToStateMachine_: function(newState, fallThroughState) {
	      return new StateMachine(newState.id, fallThroughState, [newState], []);
	    },
	    transformMachineStates: function(machine, machineEndState, rethrowState, enclosingFinallyState) {
	      var cases = [];
	      for (var i = 0; i < machine.states.length; i++) {
	        var state = machine.states[i];
	        var stateCase = state.transformMachineState(enclosingFinallyState[state.id], machineEndState, this.reporter);
	        if (stateCase !== null) {
	          cases.push(stateCase);
	        }
	      }
	      this.addFinallyFallThroughDispatches(null, machine.exceptionBlocks, cases);
	      cases.push(createDefaultClause(parseStatements($__8)));
	      return cases;
	    },
	    addFinallyFallThroughDispatches: function(enclosingFinallyState, tryStates, cases) {
	      for (var i = 0; i < tryStates.length; i++) {
	        var tryState = tryStates[i];
	        if (tryState.kind === TryState.Kind.FINALLY) {
	          var finallyState = tryState;
	          if (enclosingFinallyState !== null) {
	            var caseClauses = [];
	            var index = 0;
	            for (var j = 0; j < enclosingFinallyState.tryStates.length; j++) {
	              var destination = enclosingFinallyState.tryStates[j];
	              index++;
	              var statements;
	              if (index < enclosingFinallyState.tryStates.length) {
	                statements = [];
	              } else {
	                statements = parseStatements($__9, State.INVALID_STATE);
	              }
	              caseClauses.push(createCaseClause(createNumberLiteral(destination), statements));
	            }
	            caseClauses.push(createDefaultClause([createAssignStateStatement(enclosingFinallyState.finallyState), createBreakStatement()]));
	            cases.push(createCaseClause(createNumberLiteral(finallyState.fallThroughState), [createSwitchStatement(createMemberExpression('$ctx', 'finallyFallThrough'), caseClauses), createBreakStatement()]));
	          } else {
	            cases.push(createCaseClause(createNumberLiteral(finallyState.fallThroughState), parseStatements($__10)));
	          }
	          this.addFinallyFallThroughDispatches(finallyState, finallyState.nestedTrys, cases);
	        } else {
	          this.addFinallyFallThroughDispatches(enclosingFinallyState, tryState.nestedTrys, cases);
	        }
	      }
	    },
	    transformVariableDeclarationList: function(tree) {
	      this.reporter.reportError(tree.location && tree.location.start, 'Traceur: const/let declarations in a block containing a yield are ' + 'not yet implemented');
	      return tree;
	    },
	    maybeTransformStatement_: function(maybeTransformedStatement) {
	      var breakContinueTransformed = new BreakContinueTransformer(this.stateAllocator_).transformAny(maybeTransformedStatement);
	      if (breakContinueTransformed !== maybeTransformedStatement) {
	        breakContinueTransformed = this.transformAny(breakContinueTransformed);
	      }
	      return breakContinueTransformed;
	    },
	    ensureTransformed_: function(statement) {
	      if (statement === null) {
	        return null;
	      }
	      var maybeTransformed = this.maybeTransformStatement_(statement);
	      return maybeTransformed.type === STATE_MACHINE ? maybeTransformed : this.statementToStateMachine_(maybeTransformed);
	    },
	    ensureTransformedList_: function(statements) {
	      var maybeTransformedStatements = [];
	      var foundMachine = false;
	      for (var i = 0; i < statements.length; i++) {
	        var statement = statements[i];
	        var maybeTransformedStatement = this.maybeTransformStatement_(statement);
	        maybeTransformedStatements.push(maybeTransformedStatement);
	        if (maybeTransformedStatement.type === STATE_MACHINE) {
	          foundMachine = true;
	        }
	      }
	      if (!foundMachine) {
	        return this.statementsToStateMachine_(statements);
	      }
	      return this.transformStatementList_(maybeTransformedStatements);
	    },
	    expressionToStateMachine: function(tree) {
	      var commaExpression = new ExplodeExpressionTransformer(this).transformAny(tree);
	      var statements = new NormalizeCommaExpressionToStatementTransformer().transformAny(commaExpression).statements;
	      var lastStatement = statements.pop();
	      assert(lastStatement.type === EXPRESSION_STATEMENT);
	      var expression = lastStatement.expression;
	      statements = $traceurRuntime.superGet(this, $CPSTransformer.prototype, "transformList").call(this, statements);
	      var machine = this.transformStatementList_(statements);
	      return {
	        expression: expression,
	        machine: machine
	      };
	    }
	  }, {}, TempVarTransformer);
	  var NormalizeCommaExpressionToStatementTransformer = function NormalizeCommaExpressionToStatementTransformer() {
	    $traceurRuntime.superConstructor($NormalizeCommaExpressionToStatementTransformer).apply(this, arguments);
	    ;
	  };
	  var $NormalizeCommaExpressionToStatementTransformer = NormalizeCommaExpressionToStatementTransformer;
	  ($traceurRuntime.createClass)(NormalizeCommaExpressionToStatementTransformer, {
	    transformCommaExpression: function(tree) {
	      var $__34 = this;
	      var statements = tree.expressions.map((function(expr) {
	        if (expr.type === CONDITIONAL_EXPRESSION)
	          return $__34.transformAny(expr);
	        return createExpressionStatement(expr);
	      }));
	      return new AnonBlock(tree.location, statements);
	    },
	    transformConditionalExpression: function(tree) {
	      var ifBlock = this.transformAny(tree.left);
	      var elseBlock = this.transformAny(tree.right);
	      return new IfStatement(tree.location, tree.condition, anonBlockToBlock(ifBlock), anonBlockToBlock(elseBlock));
	    }
	  }, {}, ParseTreeTransformer);
	  function anonBlockToBlock(tree) {
	    if (tree.type === PAREN_EXPRESSION)
	      return anonBlockToBlock(tree.expression);
	    return new Block(tree.location, tree.statements);
	  }
	  return {get CPSTransformer() {
	      return CPSTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/generator/EndState.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/generator/EndState.js";
	  var State = System.get("traceur@0.0.87/src/codegeneration/generator/State.js").State;
	  var EndState = function EndState() {
	    $traceurRuntime.superConstructor($EndState).apply(this, arguments);
	    ;
	  };
	  var $EndState = EndState;
	  ($traceurRuntime.createClass)(EndState, {
	    replaceState: function(oldState, newState) {
	      return new $EndState(State.replaceStateId(this.id, oldState, newState));
	    },
	    transform: function(enclosingFinally, machineEndState, reporter) {
	      return State.generateJump(enclosingFinally, machineEndState);
	    }
	  }, {}, State);
	  return {get EndState() {
	      return EndState;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/generator/AsyncTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/generator/AsyncTransformer.js";
	  var $__0 = Object.freeze(Object.defineProperties(["$ctx.value"], {raw: {value: Object.freeze(["$ctx.value"])}})),
	      $__1 = Object.freeze(Object.defineProperties(["$ctx.returnValue = ", ""], {raw: {value: Object.freeze(["$ctx.returnValue = ", ""])}})),
	      $__2 = Object.freeze(Object.defineProperties(["$ctx.resolve(", ")"], {raw: {value: Object.freeze(["$ctx.resolve(", ")"])}})),
	      $__3 = Object.freeze(Object.defineProperties(["$traceurRuntime.asyncWrap"], {raw: {value: Object.freeze(["$traceurRuntime.asyncWrap"])}}));
	  var AwaitState = System.get("traceur@0.0.87/src/codegeneration/generator/AwaitState.js").AwaitState;
	  var $__5 = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js"),
	      BinaryExpression = $__5.BinaryExpression,
	      ExpressionStatement = $__5.ExpressionStatement;
	  var CPSTransformer = System.get("traceur@0.0.87/src/codegeneration/generator/CPSTransformer.js").CPSTransformer;
	  var EndState = System.get("traceur@0.0.87/src/codegeneration/generator/EndState.js").EndState;
	  var FallThroughState = System.get("traceur@0.0.87/src/codegeneration/generator/FallThroughState.js").FallThroughState;
	  var $__9 = System.get("traceur@0.0.87/src/syntax/trees/ParseTreeType.js"),
	      AWAIT_EXPRESSION = $__9.AWAIT_EXPRESSION,
	      BINARY_EXPRESSION = $__9.BINARY_EXPRESSION,
	      STATE_MACHINE = $__9.STATE_MACHINE;
	  var $__10 = System.get("traceur@0.0.87/src/codegeneration/PlaceholderParser.js"),
	      parseExpression = $__10.parseExpression,
	      parseStatement = $__10.parseStatement,
	      parseStatements = $__10.parseStatements;
	  var StateMachine = System.get("traceur@0.0.87/src/syntax/trees/StateMachine.js").StateMachine;
	  var FindInFunctionScope = System.get("traceur@0.0.87/src/codegeneration/FindInFunctionScope.js").FindInFunctionScope;
	  var createUndefinedExpression = System.get("traceur@0.0.87/src/codegeneration/ParseTreeFactory.js").createUndefinedExpression;
	  function isAwaitAssign(tree) {
	    return tree.type === BINARY_EXPRESSION && tree.operator.isAssignmentOperator() && tree.right.type === AWAIT_EXPRESSION && tree.left.isLeftHandSideExpression();
	  }
	  var AwaitFinder = function AwaitFinder() {
	    $traceurRuntime.superConstructor($AwaitFinder).apply(this, arguments);
	    ;
	  };
	  var $AwaitFinder = AwaitFinder;
	  ($traceurRuntime.createClass)(AwaitFinder, {visitAwaitExpression: function(tree) {
	      this.found = true;
	    }}, {}, FindInFunctionScope);
	  function scopeContainsAwait(tree) {
	    var visitor = new AwaitFinder();
	    visitor.visitAny(tree);
	    return visitor.found;
	  }
	  var AsyncTransformer = function AsyncTransformer() {
	    $traceurRuntime.superConstructor($AsyncTransformer).apply(this, arguments);
	    ;
	  };
	  var $AsyncTransformer = AsyncTransformer;
	  ($traceurRuntime.createClass)(AsyncTransformer, {
	    expressionNeedsStateMachine: function(tree) {
	      if (tree === null)
	        return false;
	      return scopeContainsAwait(tree);
	    },
	    transformExpressionStatement: function(tree) {
	      var expression = tree.expression;
	      if (expression.type === AWAIT_EXPRESSION)
	        return this.transformAwaitExpression_(expression);
	      if (isAwaitAssign(expression))
	        return this.transformAwaitAssign_(expression);
	      if (this.expressionNeedsStateMachine(expression)) {
	        return this.expressionToStateMachine(expression).machine;
	      }
	      return $traceurRuntime.superGet(this, $AsyncTransformer.prototype, "transformExpressionStatement").call(this, tree);
	    },
	    transformAwaitExpression: function(tree) {
	      throw new Error('Internal error');
	    },
	    transformAwaitExpression_: function(tree) {
	      return this.transformAwait_(tree, tree.expression, null, null);
	    },
	    transformAwaitAssign_: function(tree) {
	      return this.transformAwait_(tree, tree.right.expression, tree.left, tree.operator);
	    },
	    transformAwait_: function(tree, inExpression, left, operator) {
	      var $__15;
	      var expression,
	          machine;
	      if (this.expressionNeedsStateMachine(inExpression)) {
	        (($__15 = this.expressionToStateMachine(inExpression), expression = $__15.expression, machine = $__15.machine, $__15));
	      } else {
	        expression = this.transformAny(inExpression);
	      }
	      var createTaskState = this.allocateState();
	      var fallThroughState = this.allocateState();
	      var callbackState = left ? this.allocateState() : fallThroughState;
	      var states = [];
	      states.push(new AwaitState(createTaskState, callbackState, expression));
	      if (left) {
	        var statement = new ExpressionStatement(tree.location, new BinaryExpression(tree.location, left, operator, parseExpression($__0)));
	        states.push(new FallThroughState(callbackState, fallThroughState, [statement]));
	      }
	      var awaitMachine = new StateMachine(createTaskState, fallThroughState, states, []);
	      if (machine) {
	        awaitMachine = machine.append(awaitMachine);
	      }
	      return awaitMachine;
	    },
	    transformFinally: function(tree) {
	      var result = $traceurRuntime.superGet(this, $AsyncTransformer.prototype, "transformFinally").call(this, tree);
	      if (result.block.type !== STATE_MACHINE) {
	        return result;
	      }
	      this.reporter.reportError(tree.location.start, 'await not permitted within a finally block.');
	      return result;
	    },
	    transformReturnStatement: function(tree) {
	      var $__15;
	      var expression,
	          machine;
	      if (this.expressionNeedsStateMachine(tree.expression)) {
	        (($__15 = this.expressionToStateMachine(tree.expression), expression = $__15.expression, machine = $__15.machine, $__15));
	      } else {
	        expression = tree.expression || createUndefinedExpression();
	      }
	      var startState = this.allocateState();
	      var endState = this.allocateState();
	      var completeState = new FallThroughState(startState, endState, parseStatements($__1, expression));
	      var end = new EndState(endState);
	      var returnMachine = new StateMachine(startState, this.allocateState(), [completeState, end], []);
	      if (machine)
	        returnMachine = machine.append(returnMachine);
	      return returnMachine;
	    },
	    createCompleteTask_: function(result) {
	      return parseStatement($__2, result);
	    },
	    transformAsyncBody: function(tree) {
	      var runtimeFunction = parseExpression($__3);
	      return this.transformCpsFunctionBody(tree, runtimeFunction);
	    }
	  }, {transformAsyncBody: function(identifierGenerator, reporter, body) {
	      return new $AsyncTransformer(identifierGenerator, reporter).transformAsyncBody(body);
	    }}, CPSTransformer);
	  ;
	  return {get AsyncTransformer() {
	      return AsyncTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/generator/ForInTransformPass.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/generator/ForInTransformPass.js";
	  var $__0 = System.get("traceur@0.0.87/src/syntax/trees/ParseTreeType.js"),
	      BLOCK = $__0.BLOCK,
	      VARIABLE_DECLARATION_LIST = $__0.VARIABLE_DECLARATION_LIST,
	      IDENTIFIER_EXPRESSION = $__0.IDENTIFIER_EXPRESSION;
	  var $__1 = System.get("traceur@0.0.87/src/syntax/PredefinedName.js"),
	      LENGTH = $__1.LENGTH,
	      PUSH = $__1.PUSH;
	  var TempVarTransformer = System.get("traceur@0.0.87/src/codegeneration/TempVarTransformer.js").TempVarTransformer;
	  var $__3 = System.get("traceur@0.0.87/src/syntax/TokenType.js"),
	      BANG = $__3.BANG,
	      IN = $__3.IN,
	      OPEN_ANGLE = $__3.OPEN_ANGLE,
	      PLUS_PLUS = $__3.PLUS_PLUS,
	      VAR = $__3.VAR;
	  var $__4 = System.get("traceur@0.0.87/src/codegeneration/ParseTreeFactory.js"),
	      createArgumentList = $__4.createArgumentList,
	      createAssignmentStatement = $__4.createAssignmentStatement,
	      createBinaryExpression = $__4.createBinaryExpression,
	      createBlock = $__4.createBlock,
	      createCallStatement = $__4.createCallStatement,
	      createContinueStatement = $__4.createContinueStatement,
	      createEmptyArrayLiteralExpression = $__4.createEmptyArrayLiteralExpression,
	      createForInStatement = $__4.createForInStatement,
	      createForStatement = $__4.createForStatement,
	      createIdentifierExpression = $__4.createIdentifierExpression,
	      createIfStatement = $__4.createIfStatement,
	      createMemberExpression = $__4.createMemberExpression,
	      createMemberLookupExpression = $__4.createMemberLookupExpression,
	      createNumberLiteral = $__4.createNumberLiteral,
	      createOperatorToken = $__4.createOperatorToken,
	      createParenExpression = $__4.createParenExpression,
	      createPostfixExpression = $__4.createPostfixExpression,
	      createUnaryExpression = $__4.createUnaryExpression,
	      createVariableDeclarationList = $__4.createVariableDeclarationList,
	      createVariableStatement = $__4.createVariableStatement;
	  var ForInTransformPass = function ForInTransformPass() {
	    $traceurRuntime.superConstructor($ForInTransformPass).apply(this, arguments);
	    ;
	  };
	  var $ForInTransformPass = ForInTransformPass;
	  ($traceurRuntime.createClass)(ForInTransformPass, {transformForInStatement: function(tree) {
	      var $__6,
	          $__7;
	      var bodyStatements = [];
	      var body = this.transformAny(tree.body);
	      if (body.type === BLOCK) {
	        ($__6 = bodyStatements).push.apply($__6, $traceurRuntime.spread(body.statements));
	      } else {
	        bodyStatements.push(body);
	      }
	      var elements = [];
	      var keys = this.getTempIdentifier();
	      elements.push(createVariableStatement(VAR, keys, createEmptyArrayLiteralExpression()));
	      var collection = this.getTempIdentifier();
	      elements.push(createVariableStatement(VAR, collection, tree.collection));
	      var p = this.getTempIdentifier();
	      elements.push(createForInStatement(createVariableDeclarationList(VAR, p, null), createIdentifierExpression(collection), createCallStatement(createMemberExpression(keys, PUSH), createArgumentList([createIdentifierExpression(p)]))));
	      var i = this.getTempIdentifier();
	      var lookup = createMemberLookupExpression(createIdentifierExpression(keys), createIdentifierExpression(i));
	      var originalKey,
	          assignOriginalKey;
	      if (tree.initializer.type === VARIABLE_DECLARATION_LIST) {
	        var decList = tree.initializer;
	        originalKey = createIdentifierExpression(decList.declarations[0].lvalue);
	        assignOriginalKey = createVariableStatement(decList.declarationType, originalKey.identifierToken, lookup);
	      } else if (tree.initializer.type === IDENTIFIER_EXPRESSION) {
	        originalKey = tree.initializer;
	        assignOriginalKey = createAssignmentStatement(tree.initializer, lookup);
	      } else {
	        throw new Error('Invalid left hand side of for in loop');
	      }
	      var innerBlock = [];
	      innerBlock.push(assignOriginalKey);
	      innerBlock.push(createIfStatement(createUnaryExpression(createOperatorToken(BANG), createParenExpression(createBinaryExpression(originalKey, createOperatorToken(IN), createIdentifierExpression(collection)))), createContinueStatement(), null));
	      ($__7 = innerBlock).push.apply($__7, $traceurRuntime.spread(bodyStatements));
	      elements.push(createForStatement(createVariableDeclarationList(VAR, i, createNumberLiteral(0)), createBinaryExpression(createIdentifierExpression(i), createOperatorToken(OPEN_ANGLE), createMemberExpression(keys, LENGTH)), createPostfixExpression(createIdentifierExpression(i), createOperatorToken(PLUS_PLUS)), createBlock(innerBlock)));
	      return createBlock(elements);
	    }}, {}, TempVarTransformer);
	  return {get ForInTransformPass() {
	      return ForInTransformPass;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/generator/YieldState.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/generator/YieldState.js";
	  var $__0 = Object.freeze(Object.defineProperties(["return ", ""], {raw: {value: Object.freeze(["return ", ""])}}));
	  var State = System.get("traceur@0.0.87/src/codegeneration/generator/State.js").State;
	  var parseStatement = System.get("traceur@0.0.87/src/codegeneration/PlaceholderParser.js").parseStatement;
	  var YieldState = function YieldState(id, fallThroughState, expression) {
	    $traceurRuntime.superConstructor($YieldState).call(this, id);
	    this.fallThroughState = fallThroughState;
	    this.expression = expression;
	  };
	  var $YieldState = YieldState;
	  ($traceurRuntime.createClass)(YieldState, {
	    replaceState: function(oldState, newState) {
	      return new this.constructor(State.replaceStateId(this.id, oldState, newState), State.replaceStateId(this.fallThroughState, oldState, newState), this.expression);
	    },
	    transform: function(enclosingFinally, machineEndState, reporter) {
	      return $traceurRuntime.spread(State.generateAssignState(enclosingFinally, this.fallThroughState), [parseStatement($__0, this.expression)]);
	    }
	  }, {}, State);
	  return {get YieldState() {
	      return YieldState;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/generator/ReturnState.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/generator/ReturnState.js";
	  var $__0 = Object.freeze(Object.defineProperties(["$ctx.returnValue = ", ""], {raw: {value: Object.freeze(["$ctx.returnValue = ", ""])}}));
	  var $__1 = System.get("traceur@0.0.87/src/semantics/util.js"),
	      isUndefined = $__1.isUndefined,
	      isVoidExpression = $__1.isVoidExpression;
	  var YieldState = System.get("traceur@0.0.87/src/codegeneration/generator/YieldState.js").YieldState;
	  var State = System.get("traceur@0.0.87/src/codegeneration/generator/State.js").State;
	  var parseStatement = System.get("traceur@0.0.87/src/codegeneration/PlaceholderParser.js").parseStatement;
	  var ReturnState = function ReturnState() {
	    $traceurRuntime.superConstructor($ReturnState).apply(this, arguments);
	    ;
	  };
	  var $ReturnState = ReturnState;
	  ($traceurRuntime.createClass)(ReturnState, {transform: function(enclosingFinally, machineEndState, reporter) {
	      var $__6;
	      var e = this.expression;
	      var statements = [];
	      if (e && !isUndefined(e) && !isVoidExpression(e))
	        statements.push(parseStatement($__0, this.expression));
	      ($__6 = statements).push.apply($__6, $traceurRuntime.spread(State.generateJump(enclosingFinally, machineEndState)));
	      return statements;
	    }}, {}, YieldState);
	  return {get ReturnState() {
	      return ReturnState;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/generator/GeneratorTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/generator/GeneratorTransformer.js";
	  var $__0 = Object.freeze(Object.defineProperties(["\n        ", " = $ctx.wrapYieldStar(", "[Symbol.iterator]());\n        // received = void 0;\n        $ctx.sent = void 0;\n        // send = true; // roughly equivalent\n        $ctx.action = 'next';\n\n        for (;;) {\n          ", " = ", "[$ctx.action]($ctx.sentIgnoreThrow);\n          if (", ".done) {\n            $ctx.sent = ", ".value;\n            break;\n          }\n          yield ", ".value;\n        }"], {raw: {value: Object.freeze(["\n        ", " = $ctx.wrapYieldStar(", "[Symbol.iterator]());\n        // received = void 0;\n        $ctx.sent = void 0;\n        // send = true; // roughly equivalent\n        $ctx.action = 'next';\n\n        for (;;) {\n          ", " = ", "[$ctx.action]($ctx.sentIgnoreThrow);\n          if (", ".done) {\n            $ctx.sent = ", ".value;\n            break;\n          }\n          yield ", ".value;\n        }"])}})),
	      $__1 = Object.freeze(Object.defineProperties(["$ctx.sentIgnoreThrow"], {raw: {value: Object.freeze(["$ctx.sentIgnoreThrow"])}})),
	      $__2 = Object.freeze(Object.defineProperties(["$ctx.sent"], {raw: {value: Object.freeze(["$ctx.sent"])}})),
	      $__3 = Object.freeze(Object.defineProperties(["$ctx.maybeThrow()"], {raw: {value: Object.freeze(["$ctx.maybeThrow()"])}})),
	      $__4 = Object.freeze(Object.defineProperties(["$traceurRuntime.createGeneratorInstance"], {raw: {value: Object.freeze(["$traceurRuntime.createGeneratorInstance"])}}));
	  var CPSTransformer = System.get("traceur@0.0.87/src/codegeneration/generator/CPSTransformer.js").CPSTransformer;
	  var $__6 = System.get("traceur@0.0.87/src/syntax/trees/ParseTreeType.js"),
	      BINARY_EXPRESSION = $__6.BINARY_EXPRESSION,
	      YIELD_EXPRESSION = $__6.YIELD_EXPRESSION;
	  var $__7 = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js"),
	      BinaryExpression = $__7.BinaryExpression,
	      ExpressionStatement = $__7.ExpressionStatement;
	  var FindInFunctionScope = System.get("traceur@0.0.87/src/codegeneration/FindInFunctionScope.js").FindInFunctionScope;
	  var ReturnState = System.get("traceur@0.0.87/src/codegeneration/generator/ReturnState.js").ReturnState;
	  var YieldState = System.get("traceur@0.0.87/src/codegeneration/generator/YieldState.js").YieldState;
	  var $__11 = System.get("traceur@0.0.87/src/codegeneration/ParseTreeFactory.js"),
	      id = $__11.createIdentifierExpression,
	      createMemberExpression = $__11.createMemberExpression,
	      createUndefinedExpression = $__11.createUndefinedExpression;
	  var $__12 = System.get("traceur@0.0.87/src/codegeneration/PlaceholderParser.js"),
	      parseExpression = $__12.parseExpression,
	      parseStatement = $__12.parseStatement,
	      parseStatements = $__12.parseStatements;
	  function isYieldAssign(tree) {
	    return tree.type === BINARY_EXPRESSION && tree.operator.isAssignmentOperator() && tree.right.type === YIELD_EXPRESSION && tree.left.isLeftHandSideExpression();
	  }
	  var YieldFinder = function YieldFinder() {
	    $traceurRuntime.superConstructor($YieldFinder).apply(this, arguments);
	    ;
	  };
	  var $YieldFinder = YieldFinder;
	  ($traceurRuntime.createClass)(YieldFinder, {visitYieldExpression: function(tree) {
	      this.found = true;
	    }}, {}, FindInFunctionScope);
	  function scopeContainsYield(tree) {
	    var finder = new YieldFinder();
	    finder.visitAny(tree);
	    return finder.found;
	  }
	  var GeneratorTransformer = function GeneratorTransformer(identifierGenerator, reporter) {
	    $traceurRuntime.superConstructor($GeneratorTransformer).call(this, identifierGenerator, reporter);
	    this.shouldAppendThrowCloseState_ = true;
	  };
	  var $GeneratorTransformer = GeneratorTransformer;
	  ($traceurRuntime.createClass)(GeneratorTransformer, {
	    expressionNeedsStateMachine: function(tree) {
	      if (tree === null)
	        return false;
	      return scopeContainsYield(tree);
	    },
	    transformYieldExpression_: function(tree) {
	      var $__14;
	      var expression,
	          machine;
	      if (this.expressionNeedsStateMachine(tree.expression)) {
	        (($__14 = this.expressionToStateMachine(tree.expression), expression = $__14.expression, machine = $__14.machine, $__14));
	      } else {
	        expression = this.transformAny(tree.expression);
	        if (!expression)
	          expression = createUndefinedExpression();
	      }
	      if (tree.isYieldFor)
	        return this.transformYieldForExpression_(expression, machine);
	      var startState = this.allocateState();
	      var fallThroughState = this.allocateState();
	      var yieldMachine = this.stateToStateMachine_(new YieldState(startState, fallThroughState, expression), fallThroughState);
	      if (machine)
	        yieldMachine = machine.append(yieldMachine);
	      if (this.shouldAppendThrowCloseState_)
	        yieldMachine = yieldMachine.append(this.createThrowCloseState_());
	      return yieldMachine;
	    },
	    transformYieldForExpression_: function(expression) {
	      var machine = arguments[1];
	      var gName = this.getTempIdentifier();
	      this.addMachineVariable(gName);
	      var g = id(gName);
	      var nextName = this.getTempIdentifier();
	      this.addMachineVariable(nextName);
	      var next = id(nextName);
	      var statements = parseStatements($__0, g, expression, next, g, next, next, next);
	      var shouldAppendThrowCloseState = this.shouldAppendThrowCloseState_;
	      this.shouldAppendThrowCloseState_ = false;
	      statements = this.transformList(statements);
	      var yieldMachine = this.transformStatementList_(statements);
	      this.shouldAppendThrowCloseState_ = shouldAppendThrowCloseState;
	      if (machine)
	        yieldMachine = machine.append(yieldMachine);
	      return yieldMachine;
	    },
	    transformYieldExpression: function(tree) {
	      this.reporter.reportError(tree.location.start, 'Only \'a = yield b\' and \'var a = yield b\' currently supported.');
	      return tree;
	    },
	    transformYieldAssign_: function(tree) {
	      var shouldAppendThrowCloseState = this.shouldAppendThrowCloseState_;
	      this.shouldAppendThrowCloseState_ = false;
	      var machine = this.transformYieldExpression_(tree.right);
	      var left = this.transformAny(tree.left);
	      var sentExpression = tree.right.isYieldFor ? parseExpression($__1) : parseExpression($__2);
	      var statement = new ExpressionStatement(tree.location, new BinaryExpression(tree.location, left, tree.operator, sentExpression));
	      var assignMachine = this.statementToStateMachine_(statement);
	      this.shouldAppendThrowCloseState_ = shouldAppendThrowCloseState;
	      return machine.append(assignMachine);
	    },
	    createThrowCloseState_: function() {
	      return this.statementToStateMachine_(parseStatement($__3));
	    },
	    transformExpressionStatement: function(tree) {
	      var expression = tree.expression;
	      if (expression.type === YIELD_EXPRESSION)
	        return this.transformYieldExpression_(expression);
	      if (isYieldAssign(expression))
	        return this.transformYieldAssign_(expression);
	      if (this.expressionNeedsStateMachine(expression)) {
	        return this.expressionToStateMachine(expression).machine;
	      }
	      return $traceurRuntime.superGet(this, $GeneratorTransformer.prototype, "transformExpressionStatement").call(this, tree);
	    },
	    transformAwaitStatement: function(tree) {
	      this.reporter.reportError(tree.location.start, 'Generator function may not have an await statement.');
	      return tree;
	    },
	    transformReturnStatement: function(tree) {
	      var $__14;
	      var expression,
	          machine;
	      if (this.expressionNeedsStateMachine(tree.expression))
	        (($__14 = this.expressionToStateMachine(tree.expression), expression = $__14.expression, machine = $__14.machine, $__14));
	      else
	        expression = tree.expression;
	      var startState = this.allocateState();
	      var fallThroughState = this.allocateState();
	      var returnMachine = this.stateToStateMachine_(new ReturnState(startState, fallThroughState, this.transformAny(expression)), fallThroughState);
	      if (machine)
	        return machine.append(returnMachine);
	      return returnMachine;
	    },
	    transformGeneratorBody: function(tree, name) {
	      var runtimeFunction = parseExpression($__4);
	      return this.transformCpsFunctionBody(tree, runtimeFunction, name);
	    }
	  }, {transformGeneratorBody: function(identifierGenerator, reporter, body, name) {
	      return new $GeneratorTransformer(identifierGenerator, reporter).transformGeneratorBody(body, name);
	    }}, CPSTransformer);
	  ;
	  return {get GeneratorTransformer() {
	      return GeneratorTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/GeneratorTransformPass.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/GeneratorTransformPass.js";
	  var $__0 = Object.freeze(Object.defineProperties(["$traceurRuntime.initGeneratorFunction(", ")"], {raw: {value: Object.freeze(["$traceurRuntime.initGeneratorFunction(", ")"])}})),
	      $__1 = Object.freeze(Object.defineProperties(["var ", " = ", ""], {raw: {value: Object.freeze(["var ", " = ", ""])}})),
	      $__2 = Object.freeze(Object.defineProperties(["$traceurRuntime.initGeneratorFunction(", ")"], {raw: {value: Object.freeze(["$traceurRuntime.initGeneratorFunction(", ")"])}}));
	  var ArrowFunctionTransformer = System.get("traceur@0.0.87/src/codegeneration/ArrowFunctionTransformer.js").ArrowFunctionTransformer;
	  var AsyncTransformer = System.get("traceur@0.0.87/src/codegeneration/generator/AsyncTransformer.js").AsyncTransformer;
	  var ForInTransformPass = System.get("traceur@0.0.87/src/codegeneration/generator/ForInTransformPass.js").ForInTransformPass;
	  var GeneratorTransformer = System.get("traceur@0.0.87/src/codegeneration/generator/GeneratorTransformer.js").GeneratorTransformer;
	  var $__7 = System.get("traceur@0.0.87/src/codegeneration/PlaceholderParser.js"),
	      parseExpression = $__7.parseExpression,
	      parseStatement = $__7.parseStatement;
	  var TempVarTransformer = System.get("traceur@0.0.87/src/codegeneration/TempVarTransformer.js").TempVarTransformer;
	  var FindInFunctionScope = System.get("traceur@0.0.87/src/codegeneration/FindInFunctionScope.js").FindInFunctionScope;
	  var $__10 = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js"),
	      AnonBlock = $__10.AnonBlock,
	      FunctionDeclaration = $__10.FunctionDeclaration,
	      FunctionExpression = $__10.FunctionExpression;
	  var $__11 = System.get("traceur@0.0.87/src/codegeneration/ParseTreeFactory.js"),
	      createBindingIdentifier = $__11.createBindingIdentifier,
	      id = $__11.createIdentifierExpression,
	      createIdentifierToken = $__11.createIdentifierToken;
	  var ForInFinder = function ForInFinder() {
	    $traceurRuntime.superConstructor($ForInFinder).apply(this, arguments);
	    ;
	  };
	  var $ForInFinder = ForInFinder;
	  ($traceurRuntime.createClass)(ForInFinder, {visitForInStatement: function(tree) {
	      this.found = true;
	    }}, {}, FindInFunctionScope);
	  function needsTransform(tree, transformOptions) {
	    return transformOptions.generators && tree.isGenerator() || transformOptions.asyncFunctions && tree.isAsyncFunction();
	  }
	  var GeneratorTransformPass = function GeneratorTransformPass(identifierGenerator, reporter, options) {
	    $traceurRuntime.superConstructor($GeneratorTransformPass).call(this, identifierGenerator);
	    this.reporter_ = reporter;
	    this.tranformOptions_ = options.transformOptions;
	    this.inBlock_ = false;
	  };
	  var $GeneratorTransformPass = GeneratorTransformPass;
	  ($traceurRuntime.createClass)(GeneratorTransformPass, {
	    transformFunctionDeclaration: function(tree) {
	      if (!needsTransform(tree, this.tranformOptions_))
	        return $traceurRuntime.superGet(this, $GeneratorTransformPass.prototype, "transformFunctionDeclaration").call(this, tree);
	      if (tree.isGenerator())
	        return this.transformGeneratorDeclaration_(tree);
	      return this.transformFunction_(tree, FunctionDeclaration, null);
	    },
	    transformGeneratorDeclaration_: function(tree) {
	      var nameIdExpression = id(tree.name.identifierToken);
	      var setupPrototypeExpression = parseExpression($__0, nameIdExpression);
	      var tmpVar = id(this.inBlock_ ? this.getTempIdentifier() : this.addTempVar(setupPrototypeExpression));
	      var funcDecl = this.transformFunction_(tree, FunctionDeclaration, tmpVar);
	      if (!this.inBlock_)
	        return funcDecl;
	      return new AnonBlock(null, [funcDecl, parseStatement($__1, tmpVar, setupPrototypeExpression)]);
	    },
	    transformFunctionExpression: function(tree) {
	      if (!needsTransform(tree, this.tranformOptions_))
	        return $traceurRuntime.superGet(this, $GeneratorTransformPass.prototype, "transformFunctionExpression").call(this, tree);
	      if (tree.isGenerator())
	        return this.transformGeneratorExpression_(tree);
	      return this.transformFunction_(tree, FunctionExpression, null);
	    },
	    transformGeneratorExpression_: function(tree) {
	      var name;
	      if (!tree.name) {
	        name = createIdentifierToken(this.getTempIdentifier());
	        tree = new FunctionExpression(tree.location, createBindingIdentifier(name), tree.functionKind, tree.parameterList, tree.typeAnnotation, tree.annotations, tree.body);
	      } else {
	        name = tree.name.identifierToken;
	      }
	      var functionExpression = this.transformFunction_(tree, FunctionExpression, id(name));
	      return parseExpression($__2, functionExpression);
	    },
	    transformFunction_: function(tree, constructor, nameExpression) {
	      var body = $traceurRuntime.superGet(this, $GeneratorTransformPass.prototype, "transformAny").call(this, tree.body);
	      var finder = new ForInFinder();
	      finder.visitAny(body);
	      if (finder.found) {
	        body = new ForInTransformPass(this.identifierGenerator).transformAny(body);
	      }
	      if (this.tranformOptions_.generators && tree.isGenerator()) {
	        body = GeneratorTransformer.transformGeneratorBody(this.identifierGenerator, this.reporter_, body, nameExpression);
	      } else if (this.tranformOptions_.asyncFunctions && tree.isAsyncFunction()) {
	        body = AsyncTransformer.transformAsyncBody(this.identifierGenerator, this.reporter_, body);
	      }
	      var functionKind = null;
	      return new constructor(tree.location, tree.name, functionKind, tree.parameterList, tree.typeAnnotation || null, tree.annotations || null, body);
	    },
	    transformArrowFunctionExpression: function(tree) {
	      if (!tree.isAsyncFunction())
	        return $traceurRuntime.superGet(this, $GeneratorTransformPass.prototype, "transformArrowFunctionExpression").call(this, tree);
	      return this.transformAny(ArrowFunctionTransformer.transform(this, tree));
	    },
	    transformBlock: function(tree) {
	      var inBlock = this.inBlock_;
	      this.inBlock_ = true;
	      var rv = $traceurRuntime.superGet(this, $GeneratorTransformPass.prototype, "transformBlock").call(this, tree);
	      this.inBlock_ = inBlock;
	      return rv;
	    }
	  }, {}, TempVarTransformer);
	  return {get GeneratorTransformPass() {
	      return GeneratorTransformPass;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/InlineModuleTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/InlineModuleTransformer.js";
	  var VAR = System.get("traceur@0.0.87/src/syntax/TokenType.js").VAR;
	  var ModuleTransformer = System.get("traceur@0.0.87/src/codegeneration/ModuleTransformer.js").ModuleTransformer;
	  var $__2 = System.get("traceur@0.0.87/src/codegeneration/ParseTreeFactory.js"),
	      createBindingIdentifier = $__2.createBindingIdentifier,
	      createEmptyStatement = $__2.createEmptyStatement,
	      createFunctionBody = $__2.createFunctionBody,
	      createImmediatelyInvokedFunctionExpression = $__2.createImmediatelyInvokedFunctionExpression,
	      createScopedExpression = $__2.createScopedExpression,
	      createVariableStatement = $__2.createVariableStatement;
	  var globalThis = System.get("traceur@0.0.87/src/codegeneration/globalThis.js").default;
	  var scopeContainsThis = System.get("traceur@0.0.87/src/codegeneration/scopeContainsThis.js").default;
	  var anonInlineModules = 0;
	  var InlineModuleTransformer = function InlineModuleTransformer() {
	    $traceurRuntime.superConstructor($InlineModuleTransformer).apply(this, arguments);
	    ;
	  };
	  var $InlineModuleTransformer = InlineModuleTransformer;
	  ($traceurRuntime.createClass)(InlineModuleTransformer, {
	    wrapModule: function(statements) {
	      var seed = this.moduleName || 'anon_' + ++anonInlineModules;
	      var idName = this.getTempVarNameForModuleName(seed);
	      var body = createFunctionBody(statements);
	      var moduleExpression;
	      if (statements.some(scopeContainsThis)) {
	        moduleExpression = createScopedExpression(body, globalThis());
	      } else {
	        moduleExpression = createImmediatelyInvokedFunctionExpression(body);
	      }
	      return [createVariableStatement(VAR, idName, moduleExpression)];
	    },
	    transformNamedExport: function(tree) {
	      return createEmptyStatement();
	    },
	    transformModuleSpecifier: function(tree) {
	      return createBindingIdentifier(this.getTempVarNameForModuleSpecifier(tree));
	    }
	  }, {}, ModuleTransformer);
	  return {get InlineModuleTransformer() {
	      return InlineModuleTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/InstantiateModuleTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/InstantiateModuleTransformer.js";
	  var $__0 = Object.freeze(Object.defineProperties(["", " = ", ""], {raw: {value: Object.freeze(["", " = ", ""])}})),
	      $__1 = Object.freeze(Object.defineProperties(["$__export(", ", ", ")"], {raw: {value: Object.freeze(["$__export(", ", ", ")"])}})),
	      $__2 = Object.freeze(Object.defineProperties(["($__export(", ", ", " + 1), ", ")"], {raw: {value: Object.freeze(["($__export(", ", ", " + 1), ", ")"])}})),
	      $__3 = Object.freeze(Object.defineProperties(["($__export(", ", ", " - 1), ", ")"], {raw: {value: Object.freeze(["($__export(", ", ", " - 1), ", ")"])}})),
	      $__4 = Object.freeze(Object.defineProperties(["$__export(", ", ", ")}"], {raw: {value: Object.freeze(["$__export(", ", ", ")}"])}})),
	      $__5 = Object.freeze(Object.defineProperties(["System.register(", ", ", ", function($__export) {\n          ", "\n        });"], {raw: {value: Object.freeze(["System.register(", ", ", ", function($__export) {\n          ", "\n        });"])}})),
	      $__6 = Object.freeze(Object.defineProperties(["System.register(", ", function($__export) {\n          ", "\n        });"], {raw: {value: Object.freeze(["System.register(", ", function($__export) {\n          ", "\n        });"])}})),
	      $__7 = Object.freeze(Object.defineProperties(["", " = $__m.", ";"], {raw: {value: Object.freeze(["", " = $__m.", ";"])}})),
	      $__8 = Object.freeze(Object.defineProperties(["$__export(", ", $__m.", ");"], {raw: {value: Object.freeze(["$__export(", ", $__m.", ");"])}})),
	      $__9 = Object.freeze(Object.defineProperties(["", " = $__m;"], {raw: {value: Object.freeze(["", " = $__m;"])}})),
	      $__10 = Object.freeze(Object.defineProperties(["\n          Object.keys($__m).forEach(function(p) {\n            if (!$__exportNames[p])\n              $__export(p, $__m[p]);\n          });\n        "], {raw: {value: Object.freeze(["\n          Object.keys($__m).forEach(function(p) {\n            if (!$__exportNames[p])\n              $__export(p, $__m[p]);\n          });\n        "])}})),
	      $__11 = Object.freeze(Object.defineProperties(["\n          var $__exportNames = ", ";\n        "], {raw: {value: Object.freeze(["\n          var $__exportNames = ", ";\n        "])}})),
	      $__12 = Object.freeze(Object.defineProperties(["function($__m) {\n          ", "\n        }"], {raw: {value: Object.freeze(["function($__m) {\n          ", "\n        }"])}})),
	      $__13 = Object.freeze(Object.defineProperties(["function($__m) {}"], {raw: {value: Object.freeze(["function($__m) {}"])}})),
	      $__14 = Object.freeze(Object.defineProperties(["\n        $__export(", ", ", ")\n      "], {raw: {value: Object.freeze(["\n        $__export(", ", ", ")\n      "])}})),
	      $__15 = Object.freeze(Object.defineProperties(["return {\n      setters: ", ",\n      execute: ", "\n    }"], {raw: {value: Object.freeze(["return {\n      setters: ", ",\n      execute: ", "\n    }"])}})),
	      $__16 = Object.freeze(Object.defineProperties(["$__export(", ", ", ")"], {raw: {value: Object.freeze(["$__export(", ", ", ")"])}})),
	      $__17 = Object.freeze(Object.defineProperties(["$__export(", ", ", ")"], {raw: {value: Object.freeze(["$__export(", ", ", ")"])}})),
	      $__18 = Object.freeze(Object.defineProperties(["var ", " = $__export(", ", ", ");"], {raw: {value: Object.freeze(["var ", " = $__export(", ", ", ");"])}})),
	      $__19 = Object.freeze(Object.defineProperties(["var ", ";"], {raw: {value: Object.freeze(["var ", ";"])}})),
	      $__20 = Object.freeze(Object.defineProperties(["$__export('default', ", ");"], {raw: {value: Object.freeze(["$__export('default', ", ");"])}})),
	      $__21 = Object.freeze(Object.defineProperties(["$__export(", ", ", ");"], {raw: {value: Object.freeze(["$__export(", ", ", ");"])}})),
	      $__22 = Object.freeze(Object.defineProperties(["var ", ";"], {raw: {value: Object.freeze(["var ", ";"])}}));
	  var $__23 = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js"),
	      AnonBlock = $__23.AnonBlock,
	      ArrayLiteralExpression = $__23.ArrayLiteralExpression,
	      ClassExpression = $__23.ClassExpression,
	      CommaExpression = $__23.CommaExpression,
	      ExpressionStatement = $__23.ExpressionStatement;
	  var $__24 = System.get("traceur@0.0.87/src/syntax/trees/ParseTreeType.js"),
	      CLASS_DECLARATION = $__24.CLASS_DECLARATION,
	      FUNCTION_DECLARATION = $__24.FUNCTION_DECLARATION,
	      IDENTIFIER_EXPRESSION = $__24.IDENTIFIER_EXPRESSION,
	      IMPORT_SPECIFIER_SET = $__24.IMPORT_SPECIFIER_SET;
	  var ScopeTransformer = System.get("traceur@0.0.87/src/codegeneration/ScopeTransformer.js").ScopeTransformer;
	  var $__26 = System.get("traceur@0.0.87/src/codegeneration/ParseTreeFactory.js"),
	      id = $__26.createIdentifierExpression,
	      createIdentifierToken = $__26.createIdentifierToken,
	      createVariableStatement = $__26.createVariableStatement,
	      createVariableDeclaration = $__26.createVariableDeclaration,
	      createVariableDeclarationList = $__26.createVariableDeclarationList;
	  var ModuleTransformer = System.get("traceur@0.0.87/src/codegeneration/ModuleTransformer.js").ModuleTransformer;
	  var $__28 = System.get("traceur@0.0.87/src/syntax/TokenType.js"),
	      MINUS_MINUS = $__28.MINUS_MINUS,
	      PLUS_PLUS = $__28.PLUS_PLUS,
	      VAR = $__28.VAR;
	  var $__29 = System.get("traceur@0.0.87/src/codegeneration/PlaceholderParser.js"),
	      parseExpression = $__29.parseExpression,
	      parseStatement = $__29.parseStatement,
	      parseStatements = $__29.parseStatements;
	  var HoistVariablesTransformer = System.get("traceur@0.0.87/src/codegeneration/HoistVariablesTransformer.js").default;
	  var $__31 = System.get("traceur@0.0.87/src/codegeneration/ParseTreeFactory.js"),
	      createFunctionExpression = $__31.createFunctionExpression,
	      createEmptyParameterList = $__31.createEmptyParameterList,
	      createFunctionBody = $__31.createFunctionBody,
	      createObjectLiteral = $__31.createObjectLiteral;
	  var DeclarationExtractionTransformer = function DeclarationExtractionTransformer() {
	    $traceurRuntime.superConstructor($DeclarationExtractionTransformer).call(this);
	    this.declarations_ = [];
	  };
	  var $DeclarationExtractionTransformer = DeclarationExtractionTransformer;
	  ($traceurRuntime.createClass)(DeclarationExtractionTransformer, {
	    getDeclarationStatements: function() {
	      return $traceurRuntime.spread([this.getVariableStatement()], this.declarations_);
	    },
	    addDeclaration: function(tree) {
	      this.declarations_.push(tree);
	    },
	    transformFunctionDeclaration: function(tree) {
	      this.addDeclaration(tree);
	      return new AnonBlock(null, []);
	    },
	    transformClassDeclaration: function(tree) {
	      this.addVariable(tree.name.identifierToken.value);
	      tree = new ClassExpression(tree.location, tree.name, tree.superClass, tree.elements, tree.annotations, tree.typeParameters);
	      return parseStatement($__0, tree.name.identifierToken, tree);
	    }
	  }, {}, HoistVariablesTransformer);
	  var InsertBindingAssignmentTransformer = function InsertBindingAssignmentTransformer(exportName, bindingName) {
	    $traceurRuntime.superConstructor($InsertBindingAssignmentTransformer).call(this, bindingName);
	    this.bindingName_ = bindingName;
	    this.exportName_ = exportName;
	  };
	  var $InsertBindingAssignmentTransformer = InsertBindingAssignmentTransformer;
	  ($traceurRuntime.createClass)(InsertBindingAssignmentTransformer, {
	    matchesBindingName_: function(binding) {
	      return binding.type === IDENTIFIER_EXPRESSION && binding.identifierToken.value === this.bindingName_;
	    },
	    transformUnaryExpression: function(tree) {
	      if (!this.matchesBindingName_(tree.operand))
	        return $traceurRuntime.superGet(this, $InsertBindingAssignmentTransformer.prototype, "transformUnaryExpression").call(this, tree);
	      var operatorType = tree.operator.type;
	      if (operatorType !== PLUS_PLUS && operatorType !== MINUS_MINUS)
	        return $traceurRuntime.superGet(this, $InsertBindingAssignmentTransformer.prototype, "transformUnaryExpression").call(this, tree);
	      var operand = this.transformAny(tree.operand);
	      if (operand !== tree.operand)
	        tree = new UnaryExpression(tree.location, tree.operator, operand);
	      return parseExpression($__1, this.exportName_, tree);
	    },
	    transformPostfixExpression: function(tree) {
	      tree = $traceurRuntime.superGet(this, $InsertBindingAssignmentTransformer.prototype, "transformPostfixExpression").call(this, tree);
	      if (!this.matchesBindingName_(tree.operand))
	        return tree;
	      switch (tree.operator.type) {
	        case PLUS_PLUS:
	          return parseExpression($__2, this.exportName_, tree.operand, tree);
	        case MINUS_MINUS:
	          return parseExpression($__3, this.exportName_, tree.operand, tree);
	      }
	      return tree;
	    },
	    transformBinaryExpression: function(tree) {
	      tree = $traceurRuntime.superGet(this, $InsertBindingAssignmentTransformer.prototype, "transformBinaryExpression").call(this, tree);
	      if (!tree.operator.isAssignmentOperator())
	        return tree;
	      if (!this.matchesBindingName_(tree.left))
	        return tree;
	      return parseExpression($__4, this.exportName_, tree);
	    }
	  }, {}, ScopeTransformer);
	  var InstantiateModuleTransformer = function InstantiateModuleTransformer(identifierGenerator, reporter) {
	    var options = arguments[2];
	    $traceurRuntime.superConstructor($InstantiateModuleTransformer).call(this, identifierGenerator, reporter, options);
	    this.anonymousModule = options && !options.bundle && options.moduleName !== true;
	    this.inExport_ = false;
	    this.curDepIndex_ = null;
	    this.dependencies = [];
	    this.externalExportBindings = [];
	    this.importBindings = [];
	    this.localExportBindings = [];
	    this.functionDeclarations = [];
	    this.moduleBindings = [];
	    this.exportStarBindings = [];
	  };
	  var $InstantiateModuleTransformer = InstantiateModuleTransformer;
	  ($traceurRuntime.createClass)(InstantiateModuleTransformer, {
	    getModuleName: function(tree) {
	      if (this.anonymousModule)
	        return null;
	      return tree.moduleName;
	    },
	    moduleProlog: function() {
	      return [];
	    },
	    wrapModule: function(statements) {
	      var prolog = $traceurRuntime.superGet(this, $InstantiateModuleTransformer.prototype, "moduleProlog").call(this);
	      statements = prolog.concat(statements);
	      if (this.moduleName) {
	        return parseStatements($__5, this.moduleName, this.dependencies, statements);
	      } else {
	        return parseStatements($__6, this.dependencies, statements);
	      }
	    },
	    appendExportStatement: function(statements) {
	      var $__32 = this;
	      var declarationExtractionTransformer = new DeclarationExtractionTransformer();
	      this.localExportBindings.forEach((function(binding) {
	        statements = new InsertBindingAssignmentTransformer(binding.exportName, binding.localName).transformList(statements);
	      }));
	      var executionStatements = statements.map((function(statement) {
	        return declarationExtractionTransformer.transformAny(statement);
	      }));
	      var executionFunction = createFunctionExpression(createEmptyParameterList(), createFunctionBody(executionStatements));
	      var declarationStatements = declarationExtractionTransformer.getDeclarationStatements();
	      var setterFunctions = this.dependencies.map((function(dep, index) {
	        var importBindings = $__32.importBindings[index];
	        var externalExportBindings = $__32.externalExportBindings[index];
	        var exportStarBinding = $__32.exportStarBindings[index];
	        var moduleBinding = $__32.moduleBindings[index];
	        var setterStatements = [];
	        if (importBindings) {
	          importBindings.forEach((function(binding) {
	            setterStatements.push(parseStatement($__7, createIdentifierToken(binding.variableName), binding.exportName));
	          }));
	        }
	        if (externalExportBindings) {
	          externalExportBindings.forEach((function(binding) {
	            setterStatements.push(parseStatement($__8, binding.exportName, binding.importName));
	          }));
	        }
	        if (moduleBinding) {
	          setterStatements.push(parseStatement($__9, id(moduleBinding)));
	        }
	        if (exportStarBinding) {
	          setterStatements = setterStatements.concat(parseStatements($__10));
	          var exportNames = {};
	          $__32.localExportBindings.concat($__32.externalExportBindings).forEach(function(binding) {
	            exportNames[binding.exportName] = true;
	          });
	          declarationStatements.push(parseStatement($__11, createObjectLiteral(exportNames)));
	        }
	        if (setterStatements.length) {
	          return parseExpression($__12, setterStatements);
	        } else {
	          return parseExpression($__13);
	        }
	      }));
	      declarationStatements = declarationStatements.concat(this.functionDeclarations.map((function(binding) {
	        return parseStatement($__14, binding.exportName, createIdentifierToken(binding.functionName));
	      })));
	      declarationStatements.push(parseStatement($__15, new ArrayLiteralExpression(null, setterFunctions), executionFunction));
	      return declarationStatements;
	    },
	    addLocalExportBinding: function(exportName) {
	      var localName = arguments[1] !== (void 0) ? arguments[1] : exportName;
	      this.localExportBindings.push({
	        exportName: exportName,
	        localName: localName
	      });
	    },
	    addImportBinding: function(depIndex, variableName, exportName) {
	      this.importBindings[depIndex] = this.importBindings[depIndex] || [];
	      this.importBindings[depIndex].push({
	        variableName: variableName,
	        exportName: exportName
	      });
	    },
	    addExternalExportBinding: function(depIndex, exportName, importName) {
	      this.externalExportBindings[depIndex] = this.externalExportBindings[depIndex] || [];
	      this.externalExportBindings[depIndex].push({
	        exportName: exportName,
	        importName: importName
	      });
	    },
	    addExportStarBinding: function(depIndex) {
	      this.exportStarBindings[depIndex] = true;
	    },
	    addModuleBinding: function(depIndex, variableName) {
	      this.moduleBindings[depIndex] = variableName;
	    },
	    addExportFunction: function(exportName) {
	      var functionName = arguments[1] !== (void 0) ? arguments[1] : exportName;
	      this.functionDeclarations.push({
	        exportName: exportName,
	        functionName: functionName
	      });
	    },
	    getOrCreateDependencyIndex: function(moduleSpecifier) {
	      var name = moduleSpecifier.token.processedValue;
	      var depIndex = this.dependencies.indexOf(name);
	      if (depIndex === -1) {
	        depIndex = this.dependencies.length;
	        this.dependencies.push(name);
	      }
	      return depIndex;
	    },
	    transformExportDeclaration: function(tree) {
	      this.inExport_ = true;
	      if (tree.declaration.moduleSpecifier) {
	        this.curDepIndex_ = this.getOrCreateDependencyIndex(tree.declaration.moduleSpecifier);
	      } else {
	        this.curDepIndex_ = null;
	      }
	      var transformed = this.transformAny(tree.declaration);
	      this.inExport_ = false;
	      return transformed;
	    },
	    transformVariableStatement: function(tree) {
	      var $__32 = this;
	      if (!this.inExport_)
	        return $traceurRuntime.superGet(this, $InstantiateModuleTransformer.prototype, "transformVariableStatement").call(this, tree);
	      this.inExport_ = false;
	      return createVariableStatement(createVariableDeclarationList(VAR, tree.declarations.declarations.map((function(declaration) {
	        var varName = declaration.lvalue.identifierToken.value;
	        var initializer;
	        $__32.addLocalExportBinding(varName);
	        if (declaration.initializer)
	          initializer = parseExpression($__16, varName, $__32.transformAny(declaration.initializer));
	        else
	          initializer = parseExpression($__17, varName, id(varName));
	        return createVariableDeclaration(varName, initializer);
	      }))));
	    },
	    transformExportStar: function(tree) {
	      this.inExport_ = false;
	      this.addExportStarBinding(this.curDepIndex_);
	      return new AnonBlock(null, []);
	    },
	    transformClassDeclaration: function(tree) {
	      if (!this.inExport_)
	        return $traceurRuntime.superGet(this, $InstantiateModuleTransformer.prototype, "transformClassDeclaration").call(this, tree);
	      this.inExport_ = false;
	      var name = this.transformAny(tree.name);
	      var superClass = this.transformAny(tree.superClass);
	      var elements = this.transformList(tree.elements);
	      var annotations = this.transformList(tree.annotations);
	      var typeParameters = this.transformAny(tree.typeParameters);
	      var varName = name.identifierToken.value;
	      var classExpression = new ClassExpression(tree.location, name, superClass, elements, annotations, typeParameters);
	      this.addLocalExportBinding(varName);
	      return parseStatement($__18, varName, varName, classExpression);
	    },
	    transformFunctionDeclaration: function(tree) {
	      if (this.inExport_) {
	        var name = tree.name.getStringValue();
	        this.addLocalExportBinding(name);
	        this.addExportFunction(name);
	        this.inExport_ = false;
	      }
	      return $traceurRuntime.superGet(this, $InstantiateModuleTransformer.prototype, "transformFunctionDeclaration").call(this, tree);
	    },
	    transformNamedExport: function(tree) {
	      this.transformAny(tree.moduleSpecifier);
	      var specifierSet = this.transformAny(tree.specifierSet);
	      if (this.curDepIndex_ === null) {
	        return specifierSet;
	      } else {
	        return new AnonBlock(null, []);
	      }
	    },
	    transformImportDeclaration: function(tree) {
	      this.curDepIndex_ = this.getOrCreateDependencyIndex(tree.moduleSpecifier);
	      var initializer = this.transformAny(tree.moduleSpecifier);
	      if (!tree.importClause)
	        return new AnonBlock(null, []);
	      var importClause = this.transformAny(tree.importClause);
	      if (tree.importClause.type === IMPORT_SPECIFIER_SET) {
	        return importClause;
	      } else {
	        var bindingName = tree.importClause.binding.getStringValue();
	        this.addImportBinding(this.curDepIndex_, bindingName, 'default');
	        return parseStatement($__19, bindingName);
	      }
	      return new AnonBlock(null, []);
	    },
	    transformImportSpecifierSet: function(tree) {
	      return createVariableStatement(createVariableDeclarationList(VAR, this.transformList(tree.specifiers)));
	    },
	    transformExportDefault: function(tree) {
	      this.inExport_ = false;
	      var expression = this.transformAny(tree.expression);
	      this.addLocalExportBinding('default');
	      if (expression.type === CLASS_DECLARATION) {
	        expression = new ClassExpression(expression.location, expression.name, expression.superClass, expression.elements, expression.annotations, expression.typeParameters);
	      }
	      if (expression.type === FUNCTION_DECLARATION) {
	        this.addExportFunction('default', expression.name.identifierToken.value);
	        return expression;
	      } else {
	        return parseStatement($__20, expression);
	      }
	    },
	    transformExportSpecifier: function(tree) {
	      var exportName;
	      var bindingName;
	      if (tree.rhs) {
	        exportName = tree.rhs.value;
	        bindingName = tree.lhs.value;
	      } else {
	        exportName = tree.lhs.value;
	        bindingName = exportName;
	      }
	      if (this.curDepIndex_ !== null) {
	        this.addExternalExportBinding(this.curDepIndex_, exportName, bindingName);
	      } else {
	        this.addLocalExportBinding(exportName, bindingName);
	        return parseExpression($__21, exportName, id(bindingName));
	      }
	    },
	    transformExportSpecifierSet: function(tree) {
	      var specifiers = this.transformList(tree.specifiers);
	      return new ExpressionStatement(tree.location, new CommaExpression(tree.location, specifiers.filter((function(specifier) {
	        return specifier;
	      }))));
	    },
	    transformImportSpecifier: function(tree) {
	      var localBinding = tree.binding.binding;
	      var localBindingToken = localBinding.identifierToken;
	      var importName = (tree.name || localBindingToken).value;
	      this.addImportBinding(this.curDepIndex_, localBindingToken.value, importName);
	      return createVariableDeclaration(localBinding);
	    },
	    transformModuleDeclaration: function(tree) {
	      this.transformAny(tree.expression);
	      var bindingIdentifier = tree.binding.binding;
	      var name = bindingIdentifier.getStringValue();
	      this.addModuleBinding(this.curDepIndex_, name);
	      return parseStatement($__22, bindingIdentifier);
	    },
	    transformModuleSpecifier: function(tree) {
	      this.curDepIndex_ = this.getOrCreateDependencyIndex(tree);
	      return tree;
	    }
	  }, {}, ModuleTransformer);
	  return {get InstantiateModuleTransformer() {
	      return InstantiateModuleTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/MemberVariableTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/MemberVariableTransformer.js";
	  var $__0 = Object.freeze(Object.defineProperties(["get ", "():", "\n      { return this.", "; }"], {raw: {value: Object.freeze(["get ", "():", "\n      { return this.", "; }"])}})),
	      $__1 = Object.freeze(Object.defineProperties(["set ", "(value:", ")\n      { this.", " = value; }"], {raw: {value: Object.freeze(["set ", "(value:", ")\n      { this.", " = value; }"])}}));
	  var $__2 = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js"),
	      AnonBlock = $__2.AnonBlock,
	      ClassDeclaration = $__2.ClassDeclaration,
	      ClassExpression = $__2.ClassExpression;
	  var PROPERTY_VARIABLE_DECLARATION = System.get("traceur@0.0.87/src/syntax/trees/ParseTreeType.js").PROPERTY_VARIABLE_DECLARATION;
	  var parsePropertyDefinition = System.get("traceur@0.0.87/src/codegeneration/PlaceholderParser.js").parsePropertyDefinition;
	  var ParseTreeTransformer = System.get("traceur@0.0.87/src/codegeneration/ParseTreeTransformer.js").ParseTreeTransformer;
	  var MemberVariableTransformer = function MemberVariableTransformer(identifierGenerator) {
	    $traceurRuntime.superConstructor($MemberVariableTransformer).call(this);
	    this.identifierGenerator_ = identifierGenerator;
	  };
	  var $MemberVariableTransformer = MemberVariableTransformer;
	  ($traceurRuntime.createClass)(MemberVariableTransformer, {
	    transformPropertyVariableDeclaration: function(tree) {
	      var identifier = this.identifierGenerator_.generateUniqueIdentifier();
	      var getter = this.createGetAccessor_(identifier, tree);
	      var setter = this.createSetAccessor_(identifier, tree);
	      return new AnonBlock(tree.location, [getter, setter, tree]);
	    },
	    createGetAccessor_: function(identifier, tree) {
	      var name = tree.name.literalToken;
	      var type = tree.typeAnnotation;
	      var def = parsePropertyDefinition($__0, name, type, identifier);
	      def.isStatic = tree.isStatic;
	      return def;
	    },
	    createSetAccessor_: function(identifier, tree) {
	      var name = tree.name.literalToken;
	      var type = tree.typeAnnotation;
	      var def = parsePropertyDefinition($__1, name, type, identifier);
	      def.isStatic = tree.isStatic;
	      return def;
	    }
	  }, {}, ParseTreeTransformer);
	  return {get MemberVariableTransformer() {
	      return MemberVariableTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/outputgeneration/ParseTreeWriter.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/outputgeneration/ParseTreeWriter.js";
	  var $__0 = System.get("traceur@0.0.87/src/syntax/trees/ParseTreeType.js"),
	      BLOCK = $__0.BLOCK,
	      CLASS_DECLARATION = $__0.CLASS_DECLARATION,
	      FUNCTION_DECLARATION = $__0.FUNCTION_DECLARATION,
	      IF_STATEMENT = $__0.IF_STATEMENT,
	      LITERAL_EXPRESSION = $__0.LITERAL_EXPRESSION,
	      POSTFIX_EXPRESSION = $__0.POSTFIX_EXPRESSION,
	      UNARY_EXPRESSION = $__0.UNARY_EXPRESSION;
	  var ParseTreeVisitor = System.get("traceur@0.0.87/src/syntax/ParseTreeVisitor.js").ParseTreeVisitor;
	  var $__2 = System.get("traceur@0.0.87/src/syntax/PredefinedName.js"),
	      AS = $__2.AS,
	      ASYNC = $__2.ASYNC,
	      AWAIT = $__2.AWAIT,
	      FROM = $__2.FROM,
	      GET = $__2.GET,
	      OF = $__2.OF,
	      ON = $__2.ON,
	      SET = $__2.SET;
	  var $__3 = System.get("traceur@0.0.87/src/syntax/Scanner.js"),
	      isIdentifierPart = $__3.isIdentifierPart,
	      isWhitespace = $__3.isWhitespace;
	  var $__4 = System.get("traceur@0.0.87/src/syntax/TokenType.js"),
	      ARROW = $__4.ARROW,
	      AT = $__4.AT,
	      BACK_QUOTE = $__4.BACK_QUOTE,
	      BAR = $__4.BAR,
	      BREAK = $__4.BREAK,
	      CASE = $__4.CASE,
	      CATCH = $__4.CATCH,
	      CLASS = $__4.CLASS,
	      CLOSE_ANGLE = $__4.CLOSE_ANGLE,
	      CLOSE_CURLY = $__4.CLOSE_CURLY,
	      CLOSE_PAREN = $__4.CLOSE_PAREN,
	      CLOSE_SQUARE = $__4.CLOSE_SQUARE,
	      COLON = $__4.COLON,
	      COMMA = $__4.COMMA,
	      CONTINUE = $__4.CONTINUE,
	      DEBUGGER = $__4.DEBUGGER,
	      DEFAULT = $__4.DEFAULT,
	      DO = $__4.DO,
	      DOT_DOT_DOT = $__4.DOT_DOT_DOT,
	      ELSE = $__4.ELSE,
	      EQUAL = $__4.EQUAL,
	      EXPORT = $__4.EXPORT,
	      EXTENDS = $__4.EXTENDS,
	      FINALLY = $__4.FINALLY,
	      FOR = $__4.FOR,
	      FUNCTION = $__4.FUNCTION,
	      IF = $__4.IF,
	      IMPORT = $__4.IMPORT,
	      IN = $__4.IN,
	      INTERFACE = $__4.INTERFACE,
	      MINUS = $__4.MINUS,
	      MINUS_MINUS = $__4.MINUS_MINUS,
	      NEW = $__4.NEW,
	      NUMBER = $__4.NUMBER,
	      OPEN_ANGLE = $__4.OPEN_ANGLE,
	      OPEN_CURLY = $__4.OPEN_CURLY,
	      OPEN_PAREN = $__4.OPEN_PAREN,
	      OPEN_SQUARE = $__4.OPEN_SQUARE,
	      PERIOD = $__4.PERIOD,
	      PLUS = $__4.PLUS,
	      PLUS_PLUS = $__4.PLUS_PLUS,
	      QUESTION = $__4.QUESTION,
	      RETURN = $__4.RETURN,
	      SEMI_COLON = $__4.SEMI_COLON,
	      STAR = $__4.STAR,
	      STATIC = $__4.STATIC,
	      SUPER = $__4.SUPER,
	      SWITCH = $__4.SWITCH,
	      THIS = $__4.THIS,
	      THROW = $__4.THROW,
	      TRY = $__4.TRY,
	      WHILE = $__4.WHILE,
	      WITH = $__4.WITH,
	      YIELD = $__4.YIELD;
	  var NEW_LINE = '\n';
	  var LINE_LENGTH = 80;
	  var ParseTreeWriter = function ParseTreeWriter() {
	    var $__7;
	    var $__6 = arguments[0] !== (void 0) ? arguments[0] : {},
	        prettyPrint = ($__7 = $__6.prettyPrint) === void 0 ? true : $__7;
	    $traceurRuntime.superConstructor($ParseTreeWriter).call(this);
	    this.prettyPrint_ = prettyPrint;
	    this.result_ = '';
	    this.currentLine_ = '';
	    this.lastCode_ = -1;
	    this.indentDepth_ = 0;
	    this.currentParameterTypeAnnotation_ = null;
	  };
	  var $ParseTreeWriter = ParseTreeWriter;
	  ($traceurRuntime.createClass)(ParseTreeWriter, {
	    toString: function() {
	      if (this.currentLine_.length > 0) {
	        this.result_ += this.currentLine_;
	        this.currentLine_ = '';
	        this.lastCode_ = -1;
	      }
	      return this.result_;
	    },
	    visitAnnotation: function(tree) {
	      this.write_(AT);
	      this.visitAny(tree.name);
	      if (tree.args !== null) {
	        this.write_(OPEN_PAREN);
	        this.writeList_(tree.args, COMMA, false);
	        this.write_(CLOSE_PAREN);
	      }
	    },
	    visitArgumentList: function(tree) {
	      this.write_(OPEN_PAREN);
	      this.writeList_(tree.args, COMMA, false);
	      this.write_(CLOSE_PAREN);
	    },
	    visitArrayComprehension: function(tree) {
	      this.write_(OPEN_SQUARE);
	      this.visitList(tree.comprehensionList);
	      this.visitAny(tree.expression);
	      this.write_(CLOSE_SQUARE);
	    },
	    visitArrayLiteralExpression: function(tree) {
	      this.write_(OPEN_SQUARE);
	      this.writeList_(tree.elements, COMMA, false);
	      this.write_(CLOSE_SQUARE);
	    },
	    visitArrayPattern: function(tree) {
	      this.write_(OPEN_SQUARE);
	      this.writeList_(tree.elements, COMMA, false);
	      this.write_(CLOSE_SQUARE);
	    },
	    visitArrayType: function(tree) {
	      this.visitAny(tree.elementType);
	      this.write_(OPEN_SQUARE);
	      this.write_(CLOSE_SQUARE);
	    },
	    visitArrowFunctionExpression: function(tree) {
	      if (tree.functionKind) {
	        this.write_(tree.functionKind);
	        this.writeSpace_();
	      }
	      this.write_(OPEN_PAREN);
	      this.visitAny(tree.parameterList);
	      this.write_(CLOSE_PAREN);
	      this.writeSpace_();
	      this.write_(ARROW);
	      this.writeSpace_();
	      this.visitAny(tree.body);
	    },
	    visitAssignmentElement: function(tree) {
	      this.visitAny(tree.assignment);
	      if (tree.initializer) {
	        this.writeSpace_();
	        this.write_(EQUAL);
	        this.writeSpace_();
	        this.visitAny(tree.initializer);
	      }
	    },
	    visitAwaitExpression: function(tree) {
	      this.write_(AWAIT);
	      this.writeSpace_();
	      this.visitAny(tree.expression);
	    },
	    visitBinaryExpression: function(tree) {
	      var left = tree.left;
	      this.visitAny(left);
	      var operator = tree.operator;
	      if (left.type === POSTFIX_EXPRESSION && requiresSpaceBetween(left.operator.type, operator.type)) {
	        this.writeRequiredSpace_();
	      } else {
	        this.writeSpace_();
	      }
	      this.write_(operator);
	      var right = tree.right;
	      if (right.type === UNARY_EXPRESSION && requiresSpaceBetween(operator.type, right.operator.type)) {
	        this.writeRequiredSpace_();
	      } else {
	        this.writeSpace_();
	      }
	      this.visitAny(right);
	    },
	    visitBindingElement: function(tree) {
	      var typeAnnotation = this.currentParameterTypeAnnotation_;
	      this.currentParameterTypeAnnotation_ = null;
	      this.visitAny(tree.binding);
	      this.writeTypeAnnotation_(typeAnnotation);
	      if (tree.initializer) {
	        this.writeSpace_();
	        this.write_(EQUAL);
	        this.writeSpace_();
	        this.visitAny(tree.initializer);
	      }
	    },
	    visitBindingIdentifier: function(tree) {
	      this.write_(tree.identifierToken);
	    },
	    visitBlock: function(tree) {
	      this.writeOpenCurly_();
	      this.writelnList_(tree.statements);
	      this.writeCloseCurly_();
	    },
	    visitBreakStatement: function(tree) {
	      this.write_(BREAK);
	      if (tree.name !== null) {
	        this.writeSpace_();
	        this.write_(tree.name);
	      }
	      this.write_(SEMI_COLON);
	    },
	    visitCallExpression: function(tree) {
	      this.visitAny(tree.operand);
	      this.visitAny(tree.args);
	    },
	    visitCallSignature: function(tree) {
	      if (tree.typeParameters) {
	        this.visitAny(tree.typeParameters);
	      }
	      this.write_(OPEN_PAREN);
	      this.visitAny(tree.parameterList);
	      this.write_(CLOSE_PAREN);
	      this.writeTypeAnnotation_(tree.returnType);
	    },
	    visitCaseClause: function(tree) {
	      this.write_(CASE);
	      this.writeSpace_();
	      this.visitAny(tree.expression);
	      this.write_(COLON);
	      this.indentDepth_++;
	      this.writelnList_(tree.statements);
	      this.indentDepth_--;
	    },
	    visitCatch: function(tree) {
	      this.write_(CATCH);
	      this.writeSpace_();
	      this.write_(OPEN_PAREN);
	      this.visitAny(tree.binding);
	      this.write_(CLOSE_PAREN);
	      this.writeSpace_();
	      this.visitAny(tree.catchBody);
	    },
	    visitClassShared_: function(tree) {
	      this.writeAnnotations_(tree.annotations);
	      this.write_(CLASS);
	      this.writeSpace_();
	      this.visitAny(tree.name);
	      if (tree.typeParameters !== null) {
	        this.visitAny(tree.typeParameters);
	      }
	      if (tree.superClass !== null) {
	        this.writeSpace_();
	        this.write_(EXTENDS);
	        this.writeSpace_();
	        this.visitAny(tree.superClass);
	      }
	      this.writeSpace_();
	      this.writeOpenCurly_();
	      this.writelnList_(tree.elements);
	      this.writeCloseCurly_();
	    },
	    visitClassDeclaration: function(tree) {
	      this.visitClassShared_(tree);
	    },
	    visitClassExpression: function(tree) {
	      this.visitClassShared_(tree);
	    },
	    visitCommaExpression: function(tree) {
	      this.writeList_(tree.expressions, COMMA, false);
	    },
	    visitComprehensionFor: function(tree) {
	      this.write_(FOR);
	      this.writeSpace_();
	      this.write_(OPEN_PAREN);
	      this.visitAny(tree.left);
	      this.writeSpace_();
	      this.write_(OF);
	      this.writeSpace_();
	      this.visitAny(tree.iterator);
	      this.write_(CLOSE_PAREN);
	      this.writeSpace_();
	    },
	    visitComprehensionIf: function(tree) {
	      this.write_(IF);
	      this.writeSpace_();
	      this.write_(OPEN_PAREN);
	      this.visitAny(tree.expression);
	      this.write_(CLOSE_PAREN);
	      this.writeSpace_();
	    },
	    visitComputedPropertyName: function(tree) {
	      this.write_(OPEN_SQUARE);
	      this.visitAny(tree.expression);
	      this.write_(CLOSE_SQUARE);
	    },
	    visitConstructSignature: function(tree) {
	      this.write_(NEW);
	      this.writeSpace_();
	      this.visitCallSignature(tree);
	    },
	    visitConstructorType: function(tree) {
	      this.write_(NEW);
	      this.writeSpace_();
	      this.visitFunctionType(tree);
	    },
	    visitConditionalExpression: function(tree) {
	      this.visitAny(tree.condition);
	      this.writeSpace_();
	      this.write_(QUESTION);
	      this.writeSpace_();
	      this.visitAny(tree.left);
	      this.writeSpace_();
	      this.write_(COLON);
	      this.writeSpace_();
	      this.visitAny(tree.right);
	    },
	    visitContinueStatement: function(tree) {
	      this.write_(CONTINUE);
	      if (tree.name !== null) {
	        this.writeSpace_();
	        this.write_(tree.name);
	      }
	      this.write_(SEMI_COLON);
	    },
	    visitCoverInitializedName: function(tree) {
	      this.write_(tree.name);
	      this.writeSpace_();
	      this.write_(tree.equalToken);
	      this.writeSpace_();
	      this.visitAny(tree.initializer);
	    },
	    visitDebuggerStatement: function(tree) {
	      this.write_(DEBUGGER);
	      this.write_(SEMI_COLON);
	    },
	    visitDefaultClause: function(tree) {
	      this.write_(DEFAULT);
	      this.write_(COLON);
	      this.indentDepth_++;
	      this.writelnList_(tree.statements);
	      this.indentDepth_--;
	    },
	    visitDoWhileStatement: function(tree) {
	      this.write_(DO);
	      this.visitAnyBlockOrIndent_(tree.body);
	      this.writeSpace_();
	      this.write_(WHILE);
	      this.writeSpace_();
	      this.write_(OPEN_PAREN);
	      this.visitAny(tree.condition);
	      this.write_(CLOSE_PAREN);
	      this.write_(SEMI_COLON);
	    },
	    visitEmptyStatement: function(tree) {
	      this.write_(SEMI_COLON);
	    },
	    visitExportDeclaration: function(tree) {
	      this.writeAnnotations_(tree.annotations);
	      this.write_(EXPORT);
	      this.writeSpace_();
	      this.visitAny(tree.declaration);
	    },
	    visitExportDefault: function(tree) {
	      this.write_(DEFAULT);
	      this.writeSpace_();
	      this.visitAny(tree.expression);
	      switch (tree.expression.type) {
	        case CLASS_DECLARATION:
	        case FUNCTION_DECLARATION:
	          break;
	        default:
	          this.write_(SEMI_COLON);
	      }
	    },
	    visitNamedExport: function(tree) {
	      this.visitAny(tree.specifierSet);
	      if (tree.moduleSpecifier) {
	        this.writeSpace_();
	        this.write_(FROM);
	        this.writeSpace_();
	        this.visitAny(tree.moduleSpecifier);
	      }
	      this.write_(SEMI_COLON);
	    },
	    visitExportSpecifier: function(tree) {
	      this.write_(tree.lhs);
	      if (tree.rhs) {
	        this.writeSpace_();
	        this.write_(AS);
	        this.writeSpace_();
	        this.write_(tree.rhs);
	      }
	    },
	    visitExportSpecifierSet: function(tree) {
	      this.writeOpenCurly_();
	      this.writeList_(tree.specifiers, COMMA, false);
	      this.writeCloseCurly_();
	    },
	    visitExportStar: function(tree) {
	      this.write_(STAR);
	    },
	    visitExpressionStatement: function(tree) {
	      this.visitAny(tree.expression);
	      this.write_(SEMI_COLON);
	    },
	    visitFinally: function(tree) {
	      this.write_(FINALLY);
	      this.writeSpace_();
	      this.visitAny(tree.block);
	    },
	    visitForOfStatement: function(tree) {
	      this.write_(FOR);
	      this.writeSpace_();
	      this.write_(OPEN_PAREN);
	      this.visitAny(tree.initializer);
	      this.writeSpace_();
	      this.write_(OF);
	      this.writeSpace_();
	      this.visitAny(tree.collection);
	      this.write_(CLOSE_PAREN);
	      this.visitAnyBlockOrIndent_(tree.body);
	    },
	    visitForOnStatement: function(tree) {
	      this.write_(FOR);
	      this.writeSpace_();
	      this.write_(OPEN_PAREN);
	      this.visitAny(tree.initializer);
	      this.writeSpace_();
	      this.write_(ON);
	      this.writeSpace_();
	      this.visitAny(tree.observable);
	      this.write_(CLOSE_PAREN);
	      this.visitAnyBlockOrIndent_(tree.body);
	    },
	    visitForInStatement: function(tree) {
	      this.write_(FOR);
	      this.writeSpace_();
	      this.write_(OPEN_PAREN);
	      this.visitAny(tree.initializer);
	      this.writeSpace_();
	      this.write_(IN);
	      this.writeSpace_();
	      this.visitAny(tree.collection);
	      this.write_(CLOSE_PAREN);
	      this.visitAnyBlockOrIndent_(tree.body);
	    },
	    visitForStatement: function(tree) {
	      this.write_(FOR);
	      this.writeSpace_();
	      this.write_(OPEN_PAREN);
	      this.visitAny(tree.initializer);
	      this.write_(SEMI_COLON);
	      this.writeSpace_();
	      this.visitAny(tree.condition);
	      this.write_(SEMI_COLON);
	      this.writeSpace_();
	      this.visitAny(tree.increment);
	      this.write_(CLOSE_PAREN);
	      this.visitAnyBlockOrIndent_(tree.body);
	    },
	    visitFormalParameterList: function(tree) {
	      var first = true;
	      for (var i = 0; i < tree.parameters.length; i++) {
	        var parameter = tree.parameters[i];
	        if (first) {
	          first = false;
	        } else {
	          this.write_(COMMA);
	          this.writeSpace_();
	        }
	        this.visitAny(parameter);
	      }
	    },
	    visitFormalParameter: function(tree) {
	      this.writeAnnotations_(tree.annotations, false);
	      this.currentParameterTypeAnnotation_ = tree.typeAnnotation;
	      this.visitAny(tree.parameter);
	      this.currentParameterTypeAnnotation_ = null;
	    },
	    visitFunctionBody: function(tree) {
	      this.writeOpenCurly_();
	      this.writelnList_(tree.statements);
	      this.writeCloseCurly_();
	    },
	    visitFunctionDeclaration: function(tree) {
	      this.visitFunction_(tree);
	    },
	    visitFunctionExpression: function(tree) {
	      this.visitFunction_(tree);
	    },
	    visitFunction_: function(tree) {
	      this.writeAnnotations_(tree.annotations);
	      if (tree.isAsyncGenerator()) {
	        this.write_(ASYNC);
	      }
	      if (tree.isAsyncFunction())
	        this.write_(tree.functionKind);
	      this.write_(FUNCTION);
	      if (tree.isAsyncGenerator()) {
	        this.write_(STAR);
	      }
	      if (tree.isGenerator())
	        this.write_(tree.functionKind);
	      if (tree.name) {
	        this.writeSpace_();
	        this.visitAny(tree.name);
	      }
	      this.write_(OPEN_PAREN);
	      this.visitAny(tree.parameterList);
	      this.write_(CLOSE_PAREN);
	      this.writeTypeAnnotation_(tree.typeAnnotation);
	      this.writeSpace_();
	      this.visitAny(tree.body);
	    },
	    visitFunctionType: function(tree) {
	      if (tree.typeParameters !== null) {
	        this.visitAny(tree.typeParameters);
	      }
	      this.write_(OPEN_PAREN);
	      this.visitAny(tree.parameterList);
	      this.write_(CLOSE_PAREN);
	      this.writeSpace_();
	      this.write_(ARROW);
	      this.writeSpace_();
	      this.visitAny(tree.returnType);
	    },
	    visitGeneratorComprehension: function(tree) {
	      this.write_(OPEN_PAREN);
	      this.visitList(tree.comprehensionList);
	      this.visitAny(tree.expression);
	      this.write_(CLOSE_PAREN);
	    },
	    visitGetAccessor: function(tree) {
	      this.writeAnnotations_(tree.annotations);
	      if (tree.isStatic) {
	        this.write_(STATIC);
	        this.writeSpace_();
	      }
	      this.write_(GET);
	      this.writeSpace_();
	      this.visitAny(tree.name);
	      this.write_(OPEN_PAREN);
	      this.write_(CLOSE_PAREN);
	      this.writeSpace_();
	      this.writeTypeAnnotation_(tree.typeAnnotation);
	      this.visitAny(tree.body);
	    },
	    visitIdentifierExpression: function(tree) {
	      this.write_(tree.identifierToken);
	    },
	    visitIfStatement: function(tree) {
	      this.write_(IF);
	      this.writeSpace_();
	      this.write_(OPEN_PAREN);
	      this.visitAny(tree.condition);
	      this.write_(CLOSE_PAREN);
	      this.visitAnyBlockOrIndent_(tree.ifClause);
	      if (tree.elseClause) {
	        if (tree.ifClause.type === BLOCK)
	          this.writeSpace_();
	        this.write_(ELSE);
	        if (tree.elseClause.type === IF_STATEMENT) {
	          this.writeSpace_();
	          this.visitAny(tree.elseClause);
	        } else {
	          this.visitAnyBlockOrIndent_(tree.elseClause);
	        }
	      }
	    },
	    visitIndexSignature: function(tree) {
	      this.write_(OPEN_SQUARE);
	      this.write_(tree.name);
	      this.write_(COLON);
	      this.writeSpace_();
	      this.visitAny(tree.indexType);
	      this.write_(CLOSE_SQUARE);
	      this.writeTypeAnnotation_(tree.typeAnnotation);
	      this.write_(SEMI_COLON);
	    },
	    visitInterfaceDeclaration: function(tree) {
	      this.write_(INTERFACE);
	      this.writeSpace_();
	      this.write_(tree.name);
	      if (tree.typeParameters) {
	        this.visitAny(tree.typeParameters);
	      }
	      if (tree.extendsClause.length > 0) {
	        this.writeSpace_();
	        this.write_(EXTENDS);
	        this.writeSpace_();
	        this.writeList_(tree.extendsClause, COMMA, false);
	      }
	      this.writeSpace_();
	      this.visitAny(tree.objectType);
	    },
	    visitAnyBlockOrIndent_: function(tree) {
	      if (tree.type === BLOCK) {
	        this.writeSpace_();
	        this.visitAny(tree);
	      } else {
	        this.visitAnyIndented_(tree);
	      }
	    },
	    visitAnyIndented_: function(tree) {
	      var indent = arguments[1] !== (void 0) ? arguments[1] : 1;
	      if (this.prettyPrint_) {
	        this.indentDepth_ += indent;
	        this.writeln_();
	      }
	      this.visitAny(tree);
	      if (this.prettyPrint_) {
	        this.indentDepth_ -= indent;
	        this.writeln_();
	      }
	    },
	    visitImportDeclaration: function(tree) {
	      this.write_(IMPORT);
	      this.writeSpace_();
	      if (tree.importClause) {
	        this.visitAny(tree.importClause);
	        this.writeSpace_();
	        this.write_(FROM);
	        this.writeSpace_();
	      }
	      this.visitAny(tree.moduleSpecifier);
	      this.write_(SEMI_COLON);
	    },
	    visitImportSpecifier: function(tree) {
	      if (tree.name) {
	        this.write_(tree.name);
	        this.writeSpace_();
	        this.write_(AS);
	        this.writeSpace_();
	      }
	      this.visitAny(tree.binding);
	    },
	    visitImportSpecifierSet: function(tree) {
	      if (tree.specifiers.type === STAR) {
	        this.write_(STAR);
	      } else {
	        this.writeOpenCurly_();
	        this.writelnList_(tree.specifiers, COMMA);
	        this.writeCloseCurly_();
	      }
	    },
	    visitLabelledStatement: function(tree) {
	      this.write_(tree.name);
	      this.write_(COLON);
	      this.writeSpace_();
	      this.visitAny(tree.statement);
	    },
	    visitLiteralExpression: function(tree) {
	      this.write_(tree.literalToken);
	    },
	    visitLiteralPropertyName: function(tree) {
	      this.write_(tree.literalToken);
	    },
	    visitMemberExpression: function(tree) {
	      this.visitAny(tree.operand);
	      if (tree.operand.type === LITERAL_EXPRESSION && tree.operand.literalToken.type === NUMBER) {
	        if (!/\.|e|E/.test(tree.operand.literalToken.value))
	          this.writeRequiredSpace_();
	      }
	      this.write_(PERIOD);
	      this.write_(tree.memberName);
	    },
	    visitMemberLookupExpression: function(tree) {
	      this.visitAny(tree.operand);
	      this.write_(OPEN_SQUARE);
	      this.visitAny(tree.memberExpression);
	      this.write_(CLOSE_SQUARE);
	    },
	    visitMethodSignature: function(tree) {
	      this.visitAny(tree.name);
	      if (tree.optional) {
	        this.write_(QUESTION);
	      }
	      this.visitAny(tree.callSignature);
	      this.write_(SEMI_COLON);
	    },
	    visitSyntaxErrorTree: function(tree) {
	      this.write_('(function() {' + ("throw SyntaxError(" + JSON.stringify(tree.message) + ");") + '})()');
	    },
	    visitModule: function(tree) {
	      this.writelnList_(tree.scriptItemList, null);
	    },
	    visitModuleSpecifier: function(tree) {
	      this.write_(tree.token);
	    },
	    visitModuleDeclaration: function(tree) {
	      this.write_(IMPORT);
	      this.writeSpace_();
	      this.write_(STAR);
	      this.writeSpace_();
	      this.write_(AS);
	      this.visitAny(tree.binding);
	      this.writeSpace_();
	      this.write_(FROM);
	      this.writeSpace_();
	      this.visitAny(tree.expression);
	      this.write_(SEMI_COLON);
	    },
	    visitNewExpression: function(tree) {
	      this.write_(NEW);
	      this.writeSpace_();
	      this.visitAny(tree.operand);
	      this.visitAny(tree.args);
	    },
	    visitObjectLiteralExpression: function(tree) {
	      this.writeOpenCurly_();
	      if (tree.propertyNameAndValues.length > 1)
	        this.writeln_();
	      this.writelnList_(tree.propertyNameAndValues, COMMA);
	      if (tree.propertyNameAndValues.length > 1)
	        this.writeln_();
	      this.writeCloseCurly_();
	    },
	    visitObjectPattern: function(tree) {
	      this.writeOpenCurly_();
	      this.writelnList_(tree.fields, COMMA);
	      this.writeCloseCurly_();
	    },
	    visitObjectPatternField: function(tree) {
	      this.visitAny(tree.name);
	      if (tree.element !== null) {
	        this.write_(COLON);
	        this.writeSpace_();
	        this.visitAny(tree.element);
	      }
	    },
	    visitObjectType: function(tree) {
	      this.writeOpenCurly_();
	      this.writelnList_(tree.typeMembers);
	      this.writeCloseCurly_();
	    },
	    visitParenExpression: function(tree) {
	      this.write_(OPEN_PAREN);
	      $traceurRuntime.superGet(this, $ParseTreeWriter.prototype, "visitParenExpression").call(this, tree);
	      this.write_(CLOSE_PAREN);
	    },
	    visitPostfixExpression: function(tree) {
	      this.visitAny(tree.operand);
	      if (tree.operand.type === POSTFIX_EXPRESSION && tree.operand.operator.type === tree.operator.type) {
	        this.writeRequiredSpace_();
	      }
	      this.write_(tree.operator);
	    },
	    visitPredefinedType: function(tree) {
	      this.write_(tree.typeToken);
	    },
	    visitScript: function(tree) {
	      this.writelnList_(tree.scriptItemList, null);
	    },
	    visitPropertyMethodAssignment: function(tree) {
	      this.writeAnnotations_(tree.annotations);
	      if (tree.isStatic) {
	        this.write_(STATIC);
	        this.writeSpace_();
	      }
	      if (tree.isGenerator())
	        this.write_(STAR);
	      if (tree.isAsyncFunction())
	        this.write_(ASYNC);
	      this.visitAny(tree.name);
	      this.write_(OPEN_PAREN);
	      this.visitAny(tree.parameterList);
	      this.write_(CLOSE_PAREN);
	      this.writeSpace_();
	      this.writeTypeAnnotation_(tree.typeAnnotation);
	      this.visitAny(tree.body);
	    },
	    visitPropertyNameAssignment: function(tree) {
	      this.visitAny(tree.name);
	      this.write_(COLON);
	      this.writeSpace_();
	      this.visitAny(tree.value);
	    },
	    visitPropertyNameShorthand: function(tree) {
	      this.write_(tree.name);
	    },
	    visitPropertyVariableDeclaration: function(tree) {
	      this.writeAnnotations_(tree.annotations);
	      if (tree.isStatic) {
	        this.write_(STATIC);
	        this.writeSpace_();
	      }
	      this.visitAny(tree.name);
	      this.writeTypeAnnotation_(tree.typeAnnotation);
	      if (tree.initalizer) {
	        this.writeSpace_();
	        this.write_(EQUAL);
	        this.writeSpace_();
	        this.visitAny(tree.initializer);
	      }
	      this.write_(SEMI_COLON);
	    },
	    visitPropertySignature: function(tree) {
	      this.visitAny(tree.name);
	      if (tree.optional) {
	        this.write_(QUESTION);
	      }
	      this.writeTypeAnnotation_(tree.typeAnnotation);
	      this.write_(SEMI_COLON);
	    },
	    visitTemplateLiteralExpression: function(tree) {
	      if (tree.operand) {
	        this.visitAny(tree.operand);
	        this.writeSpace_();
	      }
	      this.writeRaw_(BACK_QUOTE);
	      this.visitList(tree.elements);
	      this.writeRaw_(BACK_QUOTE);
	    },
	    visitTemplateLiteralPortion: function(tree) {
	      this.writeRaw_('' + tree.value);
	    },
	    visitTemplateSubstitution: function(tree) {
	      this.writeRaw_('$');
	      this.writeRaw_(OPEN_CURLY);
	      this.visitAny(tree.expression);
	      this.writeRaw_(CLOSE_CURLY);
	    },
	    visitReturnStatement: function(tree) {
	      this.write_(RETURN);
	      this.writeSpace_(tree.expression);
	      this.visitAny(tree.expression);
	      this.write_(SEMI_COLON);
	    },
	    visitRestParameter: function(tree) {
	      this.write_(DOT_DOT_DOT);
	      this.write_(tree.identifier.identifierToken);
	      this.writeTypeAnnotation_(tree.typeAnnotation);
	    },
	    visitSetAccessor: function(tree) {
	      this.writeAnnotations_(tree.annotations);
	      if (tree.isStatic) {
	        this.write_(STATIC);
	        this.writeSpace_();
	      }
	      this.write_(SET);
	      this.writeSpace_();
	      this.visitAny(tree.name);
	      this.write_(OPEN_PAREN);
	      this.visitAny(tree.parameterList);
	      this.write_(CLOSE_PAREN);
	      this.writeSpace_();
	      this.visitAny(tree.body);
	    },
	    visitSpreadExpression: function(tree) {
	      this.write_(DOT_DOT_DOT);
	      this.visitAny(tree.expression);
	    },
	    visitSpreadPatternElement: function(tree) {
	      this.write_(DOT_DOT_DOT);
	      this.visitAny(tree.lvalue);
	    },
	    visitStateMachine: function(tree) {
	      throw new Error('State machines cannot be converted to source');
	    },
	    visitSuperExpression: function(tree) {
	      this.write_(SUPER);
	    },
	    visitSwitchStatement: function(tree) {
	      this.write_(SWITCH);
	      this.writeSpace_();
	      this.write_(OPEN_PAREN);
	      this.visitAny(tree.expression);
	      this.write_(CLOSE_PAREN);
	      this.writeSpace_();
	      this.writeOpenCurly_();
	      this.writelnList_(tree.caseClauses);
	      this.writeCloseCurly_();
	    },
	    visitThisExpression: function(tree) {
	      this.write_(THIS);
	    },
	    visitThrowStatement: function(tree) {
	      this.write_(THROW);
	      this.writeSpace_();
	      this.visitAny(tree.value);
	      this.write_(SEMI_COLON);
	    },
	    visitTryStatement: function(tree) {
	      this.write_(TRY);
	      this.writeSpace_();
	      this.visitAny(tree.body);
	      if (tree.catchBlock) {
	        this.writeSpace_();
	        this.visitAny(tree.catchBlock);
	      }
	      if (tree.finallyBlock) {
	        this.writeSpace_();
	        this.visitAny(tree.finallyBlock);
	      }
	    },
	    visitTypeArguments: function(tree) {
	      this.write_(OPEN_ANGLE);
	      var args = tree.args;
	      this.visitAny(args[0]);
	      for (var i = 1; i < args.length; i++) {
	        this.write_(COMMA);
	        this.writeSpace_();
	        this.visitAny(args[i]);
	      }
	      this.write_(CLOSE_ANGLE);
	    },
	    visitTypeName: function(tree) {
	      if (tree.moduleName) {
	        this.visitAny(tree.moduleName);
	        this.write_(PERIOD);
	      }
	      this.write_(tree.name);
	    },
	    visitTypeParameter: function(tree) {
	      this.write_(tree.identifierToken);
	      if (tree.extendsType) {
	        this.writeSpace_();
	        this.write_(EXTENDS);
	        this.writeSpace_();
	        this.visitAny(tree.extendsType);
	      }
	    },
	    visitTypeParameters: function(tree) {
	      this.write_(OPEN_ANGLE);
	      this.writeList_(tree.parameters, COMMA, false);
	      this.write_(CLOSE_ANGLE);
	    },
	    visitUnaryExpression: function(tree) {
	      var op = tree.operator;
	      this.write_(op);
	      var operand = tree.operand;
	      if (operand.type === UNARY_EXPRESSION && requiresSpaceBetween(op.type, operand.operator.type)) {
	        this.writeRequiredSpace_();
	      }
	      this.visitAny(operand);
	    },
	    visitUnionType: function(tree) {
	      this.visitAny(tree.types[0]);
	      for (var i = 1; i < tree.types.length; i++) {
	        this.writeSpace_();
	        this.write_(BAR);
	        this.writeSpace_();
	        this.visitAny(tree.types[i]);
	      }
	    },
	    visitVariableDeclarationList: function(tree) {
	      this.write_(tree.declarationType);
	      this.writeSpace_();
	      this.writeList_(tree.declarations, COMMA, true, 2);
	    },
	    visitVariableDeclaration: function(tree) {
	      this.visitAny(tree.lvalue);
	      this.writeTypeAnnotation_(tree.typeAnnotation);
	      if (tree.initializer !== null) {
	        this.writeSpace_();
	        this.write_(EQUAL);
	        this.writeSpace_();
	        this.visitAny(tree.initializer);
	      }
	    },
	    visitVariableStatement: function(tree) {
	      $traceurRuntime.superGet(this, $ParseTreeWriter.prototype, "visitVariableStatement").call(this, tree);
	      this.write_(SEMI_COLON);
	    },
	    visitWhileStatement: function(tree) {
	      this.write_(WHILE);
	      this.writeSpace_();
	      this.write_(OPEN_PAREN);
	      this.visitAny(tree.condition);
	      this.write_(CLOSE_PAREN);
	      this.visitAnyBlockOrIndent_(tree.body);
	    },
	    visitWithStatement: function(tree) {
	      this.write_(WITH);
	      this.writeSpace_();
	      this.write_(OPEN_PAREN);
	      this.visitAny(tree.expression);
	      this.write_(CLOSE_PAREN);
	      this.writeSpace_();
	      this.visitAny(tree.body);
	    },
	    visitYieldExpression: function(tree) {
	      this.write_(YIELD);
	      if (tree.isYieldFor)
	        this.write_(STAR);
	      if (tree.expression) {
	        this.writeSpace_();
	        this.visitAny(tree.expression);
	      }
	    },
	    writeCurrentln_: function() {
	      this.result_ += this.currentLine_ + NEW_LINE;
	    },
	    writeln_: function() {
	      if (this.currentLine_)
	        this.writeCurrentln_();
	      this.currentLine_ = '';
	      this.lastCode_ = -1;
	    },
	    writelnList_: function(list, delimiter) {
	      if (delimiter) {
	        this.writeList_(list, delimiter, true);
	      } else {
	        if (list.length > 0)
	          this.writeln_();
	        this.writeList_(list, null, true);
	        if (list.length > 0)
	          this.writeln_();
	      }
	    },
	    writeList_: function(list, delimiter, writeNewLine) {
	      var indent = arguments[3] !== (void 0) ? arguments[3] : 0;
	      var first = true;
	      for (var i = 0; i < list.length; i++) {
	        if (first) {
	          first = false;
	        } else {
	          if (delimiter !== null) {
	            this.write_(delimiter);
	            if (!writeNewLine)
	              this.writeSpace_();
	          }
	          if (writeNewLine) {
	            if (i === 1)
	              this.indentDepth_ += indent;
	            this.writeln_();
	          }
	        }
	        this.visitAny(list[i]);
	      }
	      if (writeNewLine && list.length > 1)
	        this.indentDepth_ -= indent;
	    },
	    writeRaw_: function(value) {
	      this.currentLine_ += value;
	      this.lastCode_ = value.charCodeAt(value.length - 1);
	    },
	    write_: function(value) {
	      if (value === null)
	        return ;
	      if (this.prettyPrint_ && this.currentLine_.length === 0) {
	        for (var i = 0,
	            indent = this.indentDepth_; i < indent; i++) {
	          this.writeRaw_('  ');
	        }
	      }
	      if (this.needsSpace_(value)) {
	        this.writeRaw_(' ');
	      }
	      this.writeRaw_('' + value);
	    },
	    writeCloseCurly_: function() {
	      this.indentDepth_--;
	      this.write_(CLOSE_CURLY);
	    },
	    writeOpenCurly_: function() {
	      this.write_(OPEN_CURLY);
	      this.indentDepth_++;
	    },
	    writeSpace_: function() {
	      if (this.prettyPrint_ && !isWhitespace(this.lastCode_)) {
	        this.writeRaw_(' ');
	      }
	    },
	    writeRequiredSpace_: function() {
	      if (!isWhitespace(this.lastCode_)) {
	        this.writeRaw_(' ');
	      }
	    },
	    writeTypeAnnotation_: function(typeAnnotation) {
	      if (typeAnnotation !== null) {
	        this.write_(COLON);
	        this.writeSpace_();
	        this.visitAny(typeAnnotation);
	      }
	    },
	    writeAnnotations_: function(annotations) {
	      var writeNewLine = arguments[1] !== (void 0) ? arguments[1] : this.prettyPrint_;
	      if (annotations.length > 0) {
	        this.writeList_(annotations, null, writeNewLine);
	        if (writeNewLine)
	          this.writeln_();
	      }
	    },
	    needsSpace_: function(token) {
	      var lastCode = this.lastCode_;
	      if (isWhitespace(lastCode))
	        return false;
	      var firstCode = token.toString().charCodeAt(0);
	      return isIdentifierPart(firstCode) && (isIdentifierPart(lastCode) || lastCode === 47);
	    }
	  }, {}, ParseTreeVisitor);
	  function requiresSpaceBetween(first, second) {
	    return (first === MINUS || first === MINUS_MINUS) && (second === MINUS || second === MINUS_MINUS) || (first === PLUS || first === PLUS_PLUS) && (second === PLUS || second === PLUS_PLUS);
	  }
	  return {get ParseTreeWriter() {
	      return ParseTreeWriter;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/outputgeneration/ParseTreeMapWriter.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/outputgeneration/ParseTreeMapWriter.js";
	  var ParseTreeWriter = System.get("traceur@0.0.87/src/outputgeneration/ParseTreeWriter.js").ParseTreeWriter;
	  var StringSet = System.get("traceur@0.0.87/src/util/StringSet.js").StringSet;
	  var ParseTreeMapWriter = function ParseTreeMapWriter(sourceMapConfiguration) {
	    var options = arguments[1];
	    $traceurRuntime.superConstructor($ParseTreeMapWriter).call(this, options);
	    this.sourceMapGenerator_ = sourceMapConfiguration.sourceMapGenerator;
	    this.lowResolution_ = sourceMapConfiguration.lowResolution;
	    this.basepath_ = sourceMapConfiguration.basepath;
	    this.outputLineCount_ = 1;
	    this.isFirstMapping_ = true;
	    this.sourcesInMap_ = new StringSet();
	  };
	  var $ParseTreeMapWriter = ParseTreeMapWriter;
	  ($traceurRuntime.createClass)(ParseTreeMapWriter, {
	    visitAny: function(tree) {
	      if (!tree) {
	        return ;
	      }
	      if (tree.location)
	        this.enterBranch(tree.location);
	      $traceurRuntime.superGet(this, $ParseTreeMapWriter.prototype, "visitAny").call(this, tree);
	      if (tree.location)
	        this.exitBranch(tree.location);
	    },
	    writeCurrentln_: function() {
	      $traceurRuntime.superGet(this, $ParseTreeMapWriter.prototype, "writeCurrentln_").call(this);
	      this.flushMappings();
	      this.outputLineCount_++;
	      this.generated_ = {
	        line: this.outputLineCount_,
	        column: 0
	      };
	      this.flushMappings();
	    },
	    write_: function(value) {
	      this.generate();
	      $traceurRuntime.superGet(this, $ParseTreeMapWriter.prototype, "write_").call(this, value);
	      this.generate();
	    },
	    generate: function() {
	      var column = this.currentLine_.length ? this.currentLine_.length - 1 : 0;
	      this.generated_ = {
	        line: this.outputLineCount_,
	        column: column
	      };
	      this.flushMappings();
	    },
	    enterBranch: function(location) {
	      this.originate(location.start);
	    },
	    exitBranch: function(location) {
	      var position = location.end;
	      var endOfPreviousToken = {
	        line: position.line,
	        column: position.column ? position.column - 1 : 0,
	        source: position.source
	      };
	      this.originate(endOfPreviousToken);
	    },
	    originate: function(position) {
	      var line = position.line + 1;
	      if (this.original_ && this.original_.line !== line)
	        this.flushMappings();
	      this.original_ = {
	        line: line,
	        column: position.column || 0
	      };
	      if (position.source.name && !this.sourcesInMap_.has(position.source.name)) {
	        this.sourcesInMap_.add(position.source.name);
	        this.relativeSourceName_ = relativePath(position.source.name, this.basepath_);
	        this.sourceMapGenerator_.setSourceContent(this.relativeSourceName_, position.source.contents);
	      }
	      this.flushMappings();
	    },
	    flushMappings: function() {
	      if (this.original_ && this.generated_) {
	        this.addMapping();
	        this.original_ = null;
	        this.generated_ = null;
	      }
	    },
	    isSame: function(lhs, rhs) {
	      return lhs.line === rhs.line && lhs.column === rhs.column;
	    },
	    skipMapping: function() {
	      if (!this.previousMapping_)
	        return false;
	      if (this.lowResolution_ && this.previousMapping_.generated.line === this.generated_.line)
	        return true;
	      if (this.isSame(this.previousMapping_.generated, this.generated_) && this.isSame(this.previousMapping_.original, this.original_))
	        return true;
	    },
	    addMapping: function() {
	      if (this.skipMapping())
	        return ;
	      var mapping = {
	        generated: this.generated_,
	        original: this.original_,
	        source: this.relativeSourceName_
	      };
	      this.sourceMapGenerator_.addMapping(mapping);
	      this.previousMapping_ = mapping;
	    }
	  }, {}, ParseTreeWriter);
	  function relativePath(name, sourceRoot) {
	    var $__3;
	    if (!name || name[0] === '@')
	      return name;
	    if (!sourceRoot)
	      return name;
	    var nameSegments = name.split('/');
	    var rootSegments = sourceRoot.split('/');
	    if (rootSegments[rootSegments.length - 1]) {
	      throw new Error('rootPath must end in /');
	    }
	    var commonSegmentsLength = 0;
	    var uniqueSegments = [];
	    var foundUnique = false;
	    nameSegments.forEach((function(segment, index) {
	      if (!foundUnique && segment === rootSegments[index]) {
	        commonSegmentsLength++;
	        return ;
	      }
	      foundUnique = true;
	      uniqueSegments.push(segment);
	    }));
	    if (commonSegmentsLength < 1 || commonSegmentsLength === rootSegments.length)
	      return name;
	    var dotDotSegments = rootSegments.length - commonSegmentsLength - 1;
	    var segments = [];
	    while (dotDotSegments--) {
	      segments.push('..');
	    }
	    ($__3 = segments).push.apply($__3, $traceurRuntime.spread(uniqueSegments));
	    return segments.join('/');
	  }
	  return {
	    get ParseTreeMapWriter() {
	      return ParseTreeMapWriter;
	    },
	    get relativePath() {
	      return relativePath;
	    }
	  };
	});
	System.registerModule("traceur@0.0.87/src/outputgeneration/SourceMapIntegration.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/outputgeneration/SourceMapIntegration.js";
	  function makeDefine(mapping, id) {
	    var require = function(id) {
	      return mapping[id];
	    };
	    var exports = mapping[id] = {};
	    var module = null;
	    return function(factory) {
	      factory(require, exports, module);
	    };
	  }
	  var define,
	      m = {};
	  define = makeDefine(m, './util');
	  if (typeof define !== 'function') {
	    var define = __webpack_require__(56)(module, __webpack_require__(53));
	  }
	  define(function(require, exports, module) {
	    function getArg(aArgs, aName, aDefaultValue) {
	      if (aName in aArgs) {
	        return aArgs[aName];
	      } else if (arguments.length === 3) {
	        return aDefaultValue;
	      } else {
	        throw new Error('"' + aName + '" is a required argument.');
	      }
	    }
	    exports.getArg = getArg;
	    var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/;
	    var dataUrlRegexp = /^data:.+\,.+$/;
	    function urlParse(aUrl) {
	      var match = aUrl.match(urlRegexp);
	      if (!match) {
	        return null;
	      }
	      return {
	        scheme: match[1],
	        auth: match[2],
	        host: match[3],
	        port: match[4],
	        path: match[5]
	      };
	    }
	    exports.urlParse = urlParse;
	    function urlGenerate(aParsedUrl) {
	      var url = '';
	      if (aParsedUrl.scheme) {
	        url += aParsedUrl.scheme + ':';
	      }
	      url += '//';
	      if (aParsedUrl.auth) {
	        url += aParsedUrl.auth + '@';
	      }
	      if (aParsedUrl.host) {
	        url += aParsedUrl.host;
	      }
	      if (aParsedUrl.port) {
	        url += ":" + aParsedUrl.port;
	      }
	      if (aParsedUrl.path) {
	        url += aParsedUrl.path;
	      }
	      return url;
	    }
	    exports.urlGenerate = urlGenerate;
	    function normalize(aPath) {
	      var path = aPath;
	      var url = urlParse(aPath);
	      if (url) {
	        if (!url.path) {
	          return aPath;
	        }
	        path = url.path;
	      }
	      var isAbsolute = (path.charAt(0) === '/');
	      var parts = path.split(/\/+/);
	      for (var part = void 0,
	          up = 0,
	          i = parts.length - 1; i >= 0; i--) {
	        part = parts[i];
	        if (part === '.') {
	          parts.splice(i, 1);
	        } else if (part === '..') {
	          up++;
	        } else if (up > 0) {
	          if (part === '') {
	            parts.splice(i + 1, up);
	            up = 0;
	          } else {
	            parts.splice(i, 2);
	            up--;
	          }
	        }
	      }
	      path = parts.join('/');
	      if (path === '') {
	        path = isAbsolute ? '/' : '.';
	      }
	      if (url) {
	        url.path = path;
	        return urlGenerate(url);
	      }
	      return path;
	    }
	    exports.normalize = normalize;
	    function join(aRoot, aPath) {
	      if (aRoot === "") {
	        aRoot = ".";
	      }
	      if (aPath === "") {
	        aPath = ".";
	      }
	      var aPathUrl = urlParse(aPath);
	      var aRootUrl = urlParse(aRoot);
	      if (aRootUrl) {
	        aRoot = aRootUrl.path || '/';
	      }
	      if (aPathUrl && !aPathUrl.scheme) {
	        if (aRootUrl) {
	          aPathUrl.scheme = aRootUrl.scheme;
	        }
	        return urlGenerate(aPathUrl);
	      }
	      if (aPathUrl || aPath.match(dataUrlRegexp)) {
	        return aPath;
	      }
	      if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
	        aRootUrl.host = aPath;
	        return urlGenerate(aRootUrl);
	      }
	      var joined = aPath.charAt(0) === '/' ? aPath : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);
	      if (aRootUrl) {
	        aRootUrl.path = joined;
	        return urlGenerate(aRootUrl);
	      }
	      return joined;
	    }
	    exports.join = join;
	    function relative(aRoot, aPath) {
	      if (aRoot === "") {
	        aRoot = ".";
	      }
	      aRoot = aRoot.replace(/\/$/, '');
	      var url = urlParse(aRoot);
	      if (aPath.charAt(0) == "/" && url && url.path == "/") {
	        return aPath.slice(1);
	      }
	      return aPath.indexOf(aRoot + '/') === 0 ? aPath.substr(aRoot.length + 1) : aPath;
	    }
	    exports.relative = relative;
	    function toSetString(aStr) {
	      return '$' + aStr;
	    }
	    exports.toSetString = toSetString;
	    function fromSetString(aStr) {
	      return aStr.substr(1);
	    }
	    exports.fromSetString = fromSetString;
	    function strcmp(aStr1, aStr2) {
	      var s1 = aStr1 || "";
	      var s2 = aStr2 || "";
	      return (s1 > s2) - (s1 < s2);
	    }
	    function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
	      var cmp;
	      cmp = strcmp(mappingA.source, mappingB.source);
	      if (cmp) {
	        return cmp;
	      }
	      cmp = mappingA.originalLine - mappingB.originalLine;
	      if (cmp) {
	        return cmp;
	      }
	      cmp = mappingA.originalColumn - mappingB.originalColumn;
	      if (cmp || onlyCompareOriginal) {
	        return cmp;
	      }
	      cmp = strcmp(mappingA.name, mappingB.name);
	      if (cmp) {
	        return cmp;
	      }
	      cmp = mappingA.generatedLine - mappingB.generatedLine;
	      if (cmp) {
	        return cmp;
	      }
	      return mappingA.generatedColumn - mappingB.generatedColumn;
	    }
	    ;
	    exports.compareByOriginalPositions = compareByOriginalPositions;
	    function compareByGeneratedPositions(mappingA, mappingB, onlyCompareGenerated) {
	      var cmp;
	      cmp = mappingA.generatedLine - mappingB.generatedLine;
	      if (cmp) {
	        return cmp;
	      }
	      cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	      if (cmp || onlyCompareGenerated) {
	        return cmp;
	      }
	      cmp = strcmp(mappingA.source, mappingB.source);
	      if (cmp) {
	        return cmp;
	      }
	      cmp = mappingA.originalLine - mappingB.originalLine;
	      if (cmp) {
	        return cmp;
	      }
	      cmp = mappingA.originalColumn - mappingB.originalColumn;
	      if (cmp) {
	        return cmp;
	      }
	      return strcmp(mappingA.name, mappingB.name);
	    }
	    ;
	    exports.compareByGeneratedPositions = compareByGeneratedPositions;
	  });
	  define = makeDefine(m, './array-set');
	  if (typeof define !== 'function') {
	    var define = __webpack_require__(56)(module, __webpack_require__(53));
	  }
	  define(function(require, exports, module) {
	    var util = require('./util');
	    function ArraySet() {
	      this._array = [];
	      this._set = {};
	    }
	    ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
	      var set = new ArraySet();
	      for (var i = 0,
	          len = aArray.length; i < len; i++) {
	        set.add(aArray[i], aAllowDuplicates);
	      }
	      return set;
	    };
	    ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
	      var isDuplicate = this.has(aStr);
	      var idx = this._array.length;
	      if (!isDuplicate || aAllowDuplicates) {
	        this._array.push(aStr);
	      }
	      if (!isDuplicate) {
	        this._set[util.toSetString(aStr)] = idx;
	      }
	    };
	    ArraySet.prototype.has = function ArraySet_has(aStr) {
	      return Object.prototype.hasOwnProperty.call(this._set, util.toSetString(aStr));
	    };
	    ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
	      if (this.has(aStr)) {
	        return this._set[util.toSetString(aStr)];
	      }
	      throw new Error('"' + aStr + '" is not in the set.');
	    };
	    ArraySet.prototype.at = function ArraySet_at(aIdx) {
	      if (aIdx >= 0 && aIdx < this._array.length) {
	        return this._array[aIdx];
	      }
	      throw new Error('No element indexed by ' + aIdx);
	    };
	    ArraySet.prototype.toArray = function ArraySet_toArray() {
	      return this._array.slice();
	    };
	    exports.ArraySet = ArraySet;
	  });
	  define = makeDefine(m, './base64');
	  if (typeof define !== 'function') {
	    var define = __webpack_require__(56)(module, __webpack_require__(53));
	  }
	  define(function(require, exports, module) {
	    var charToIntMap = {};
	    var intToCharMap = {};
	    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('').forEach(function(ch, index) {
	      charToIntMap[ch] = index;
	      intToCharMap[index] = ch;
	    });
	    exports.encode = function base64_encode(aNumber) {
	      if (aNumber in intToCharMap) {
	        return intToCharMap[aNumber];
	      }
	      throw new TypeError("Must be between 0 and 63: " + aNumber);
	    };
	    exports.decode = function base64_decode(aChar) {
	      if (aChar in charToIntMap) {
	        return charToIntMap[aChar];
	      }
	      throw new TypeError("Not a valid base 64 digit: " + aChar);
	    };
	  });
	  define = makeDefine(m, './base64-vlq');
	  if (typeof define !== 'function') {
	    var define = __webpack_require__(56)(module, __webpack_require__(53));
	  }
	  define(function(require, exports, module) {
	    var base64 = require('./base64');
	    var VLQ_BASE_SHIFT = 5;
	    var VLQ_BASE = 1 << VLQ_BASE_SHIFT;
	    var VLQ_BASE_MASK = VLQ_BASE - 1;
	    var VLQ_CONTINUATION_BIT = VLQ_BASE;
	    function toVLQSigned(aValue) {
	      return aValue < 0 ? ((-aValue) << 1) + 1 : (aValue << 1) + 0;
	    }
	    function fromVLQSigned(aValue) {
	      var isNegative = (aValue & 1) === 1;
	      var shifted = aValue >> 1;
	      return isNegative ? -shifted : shifted;
	    }
	    exports.encode = function base64VLQ_encode(aValue) {
	      var encoded = "";
	      var digit;
	      var vlq = toVLQSigned(aValue);
	      do {
	        digit = vlq & VLQ_BASE_MASK;
	        vlq >>>= VLQ_BASE_SHIFT;
	        if (vlq > 0) {
	          digit |= VLQ_CONTINUATION_BIT;
	        }
	        encoded += base64.encode(digit);
	      } while (vlq > 0);
	      return encoded;
	    };
	    exports.decode = function base64VLQ_decode(aStr, aOutParam) {
	      var i = 0;
	      var strLen = aStr.length;
	      var result = 0;
	      var shift = 0;
	      var continuation,
	          digit;
	      do {
	        if (i >= strLen) {
	          throw new Error("Expected more digits in base 64 VLQ value.");
	        }
	        digit = base64.decode(aStr.charAt(i++));
	        continuation = !!(digit & VLQ_CONTINUATION_BIT);
	        digit &= VLQ_BASE_MASK;
	        result = result + (digit << shift);
	        shift += VLQ_BASE_SHIFT;
	      } while (continuation);
	      aOutParam.value = fromVLQSigned(result);
	      aOutParam.rest = aStr.slice(i);
	    };
	  });
	  define = makeDefine(m, './binary-search');
	  if (typeof define !== 'function') {
	    var define = __webpack_require__(56)(module, __webpack_require__(53));
	  }
	  define(function(require, exports, module) {
	    function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare) {
	      var mid = Math.floor((aHigh - aLow) / 2) + aLow;
	      var cmp = aCompare(aNeedle, aHaystack[mid], true);
	      if (cmp === 0) {
	        return mid;
	      } else if (cmp > 0) {
	        if (aHigh - mid > 1) {
	          return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare);
	        }
	        return mid;
	      } else {
	        if (mid - aLow > 1) {
	          return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare);
	        }
	        return aLow < 0 ? -1 : aLow;
	      }
	    }
	    exports.search = function search(aNeedle, aHaystack, aCompare) {
	      if (aHaystack.length === 0) {
	        return -1;
	      }
	      return recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack, aCompare);
	    };
	  });
	  define = makeDefine(m, './mapping-list');
	  if (typeof define !== 'function') {
	    var define = __webpack_require__(56)(module, __webpack_require__(53));
	  }
	  define(function(require, exports, module) {
	    var util = require('./util');
	    function generatedPositionAfter(mappingA, mappingB) {
	      var lineA = mappingA.generatedLine;
	      var lineB = mappingB.generatedLine;
	      var columnA = mappingA.generatedColumn;
	      var columnB = mappingB.generatedColumn;
	      return lineB > lineA || lineB == lineA && columnB >= columnA || util.compareByGeneratedPositions(mappingA, mappingB) <= 0;
	    }
	    function MappingList() {
	      this._array = [];
	      this._sorted = true;
	      this._last = {
	        generatedLine: -1,
	        generatedColumn: 0
	      };
	    }
	    MappingList.prototype.unsortedForEach = function MappingList_forEach(aCallback, aThisArg) {
	      this._array.forEach(aCallback, aThisArg);
	    };
	    MappingList.prototype.add = function MappingList_add(aMapping) {
	      var mapping;
	      if (generatedPositionAfter(this._last, aMapping)) {
	        this._last = aMapping;
	        this._array.push(aMapping);
	      } else {
	        this._sorted = false;
	        this._array.push(aMapping);
	      }
	    };
	    MappingList.prototype.toArray = function MappingList_toArray() {
	      if (!this._sorted) {
	        this._array.sort(util.compareByGeneratedPositions);
	        this._sorted = true;
	      }
	      return this._array;
	    };
	    exports.MappingList = MappingList;
	  });
	  define = makeDefine(m, './source-map-generator');
	  if (typeof define !== 'function') {
	    var define = __webpack_require__(56)(module, __webpack_require__(53));
	  }
	  define(function(require, exports, module) {
	    var base64VLQ = require('./base64-vlq');
	    var util = require('./util');
	    var ArraySet = require('./array-set').ArraySet;
	    var MappingList = require('./mapping-list').MappingList;
	    function SourceMapGenerator(aArgs) {
	      if (!aArgs) {
	        aArgs = {};
	      }
	      this._file = util.getArg(aArgs, 'file', null);
	      this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
	      this._skipValidation = util.getArg(aArgs, 'skipValidation', false);
	      this._sources = new ArraySet();
	      this._names = new ArraySet();
	      this._mappings = new MappingList();
	      this._sourcesContents = null;
	    }
	    SourceMapGenerator.prototype._version = 3;
	    SourceMapGenerator.fromSourceMap = function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
	      var sourceRoot = aSourceMapConsumer.sourceRoot;
	      var generator = new SourceMapGenerator({
	        file: aSourceMapConsumer.file,
	        sourceRoot: sourceRoot
	      });
	      aSourceMapConsumer.eachMapping(function(mapping) {
	        var newMapping = {generated: {
	            line: mapping.generatedLine,
	            column: mapping.generatedColumn
	          }};
	        if (mapping.source != null) {
	          newMapping.source = mapping.source;
	          if (sourceRoot != null) {
	            newMapping.source = util.relative(sourceRoot, newMapping.source);
	          }
	          newMapping.original = {
	            line: mapping.originalLine,
	            column: mapping.originalColumn
	          };
	          if (mapping.name != null) {
	            newMapping.name = mapping.name;
	          }
	        }
	        generator.addMapping(newMapping);
	      });
	      aSourceMapConsumer.sources.forEach(function(sourceFile) {
	        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	        if (content != null) {
	          generator.setSourceContent(sourceFile, content);
	        }
	      });
	      return generator;
	    };
	    SourceMapGenerator.prototype.addMapping = function SourceMapGenerator_addMapping(aArgs) {
	      var generated = util.getArg(aArgs, 'generated');
	      var original = util.getArg(aArgs, 'original', null);
	      var source = util.getArg(aArgs, 'source', null);
	      var name = util.getArg(aArgs, 'name', null);
	      if (!this._skipValidation) {
	        this._validateMapping(generated, original, source, name);
	      }
	      if (source != null && !this._sources.has(source)) {
	        this._sources.add(source);
	      }
	      if (name != null && !this._names.has(name)) {
	        this._names.add(name);
	      }
	      this._mappings.add({
	        generatedLine: generated.line,
	        generatedColumn: generated.column,
	        originalLine: original != null && original.line,
	        originalColumn: original != null && original.column,
	        source: source,
	        name: name
	      });
	    };
	    SourceMapGenerator.prototype.setSourceContent = function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
	      var source = aSourceFile;
	      if (this._sourceRoot != null) {
	        source = util.relative(this._sourceRoot, source);
	      }
	      if (aSourceContent != null) {
	        if (!this._sourcesContents) {
	          this._sourcesContents = {};
	        }
	        this._sourcesContents[util.toSetString(source)] = aSourceContent;
	      } else if (this._sourcesContents) {
	        delete this._sourcesContents[util.toSetString(source)];
	        if (Object.keys(this._sourcesContents).length === 0) {
	          this._sourcesContents = null;
	        }
	      }
	    };
	    SourceMapGenerator.prototype.applySourceMap = function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
	      var sourceFile = aSourceFile;
	      if (aSourceFile == null) {
	        if (aSourceMapConsumer.file == null) {
	          throw new Error('SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' + 'or the source map\'s "file" property. Both were omitted.');
	        }
	        sourceFile = aSourceMapConsumer.file;
	      }
	      var sourceRoot = this._sourceRoot;
	      if (sourceRoot != null) {
	        sourceFile = util.relative(sourceRoot, sourceFile);
	      }
	      var newSources = new ArraySet();
	      var newNames = new ArraySet();
	      this._mappings.unsortedForEach(function(mapping) {
	        if (mapping.source === sourceFile && mapping.originalLine != null) {
	          var original = aSourceMapConsumer.originalPositionFor({
	            line: mapping.originalLine,
	            column: mapping.originalColumn
	          });
	          if (original.source != null) {
	            mapping.source = original.source;
	            if (aSourceMapPath != null) {
	              mapping.source = util.join(aSourceMapPath, mapping.source);
	            }
	            if (sourceRoot != null) {
	              mapping.source = util.relative(sourceRoot, mapping.source);
	            }
	            mapping.originalLine = original.line;
	            mapping.originalColumn = original.column;
	            if (original.name != null) {
	              mapping.name = original.name;
	            }
	          }
	        }
	        var source = mapping.source;
	        if (source != null && !newSources.has(source)) {
	          newSources.add(source);
	        }
	        var name = mapping.name;
	        if (name != null && !newNames.has(name)) {
	          newNames.add(name);
	        }
	      }, this);
	      this._sources = newSources;
	      this._names = newNames;
	      aSourceMapConsumer.sources.forEach(function(sourceFile) {
	        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	        if (content != null) {
	          if (aSourceMapPath != null) {
	            sourceFile = util.join(aSourceMapPath, sourceFile);
	          }
	          if (sourceRoot != null) {
	            sourceFile = util.relative(sourceRoot, sourceFile);
	          }
	          this.setSourceContent(sourceFile, content);
	        }
	      }, this);
	    };
	    SourceMapGenerator.prototype._validateMapping = function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource, aName) {
	      if (aGenerated && 'line' in aGenerated && 'column' in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) {
	        return ;
	      } else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated && aOriginal && 'line' in aOriginal && 'column' in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) {
	        return ;
	      } else {
	        throw new Error('Invalid mapping: ' + JSON.stringify({
	          generated: aGenerated,
	          source: aSource,
	          original: aOriginal,
	          name: aName
	        }));
	      }
	    };
	    SourceMapGenerator.prototype._serializeMappings = function SourceMapGenerator_serializeMappings() {
	      var previousGeneratedColumn = 0;
	      var previousGeneratedLine = 1;
	      var previousOriginalColumn = 0;
	      var previousOriginalLine = 0;
	      var previousName = 0;
	      var previousSource = 0;
	      var result = '';
	      var mapping;
	      var mappings = this._mappings.toArray();
	      for (var i = 0,
	          len = mappings.length; i < len; i++) {
	        mapping = mappings[i];
	        if (mapping.generatedLine !== previousGeneratedLine) {
	          previousGeneratedColumn = 0;
	          while (mapping.generatedLine !== previousGeneratedLine) {
	            result += ';';
	            previousGeneratedLine++;
	          }
	        } else {
	          if (i > 0) {
	            if (!util.compareByGeneratedPositions(mapping, mappings[i - 1])) {
	              continue;
	            }
	            result += ',';
	          }
	        }
	        result += base64VLQ.encode(mapping.generatedColumn - previousGeneratedColumn);
	        previousGeneratedColumn = mapping.generatedColumn;
	        if (mapping.source != null) {
	          result += base64VLQ.encode(this._sources.indexOf(mapping.source) - previousSource);
	          previousSource = this._sources.indexOf(mapping.source);
	          result += base64VLQ.encode(mapping.originalLine - 1 - previousOriginalLine);
	          previousOriginalLine = mapping.originalLine - 1;
	          result += base64VLQ.encode(mapping.originalColumn - previousOriginalColumn);
	          previousOriginalColumn = mapping.originalColumn;
	          if (mapping.name != null) {
	            result += base64VLQ.encode(this._names.indexOf(mapping.name) - previousName);
	            previousName = this._names.indexOf(mapping.name);
	          }
	        }
	      }
	      return result;
	    };
	    SourceMapGenerator.prototype._generateSourcesContent = function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
	      return aSources.map(function(source) {
	        if (!this._sourcesContents) {
	          return null;
	        }
	        if (aSourceRoot != null) {
	          source = util.relative(aSourceRoot, source);
	        }
	        var key = util.toSetString(source);
	        return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ? this._sourcesContents[key] : null;
	      }, this);
	    };
	    SourceMapGenerator.prototype.toJSON = function SourceMapGenerator_toJSON() {
	      var map = {
	        version: this._version,
	        sources: this._sources.toArray(),
	        names: this._names.toArray(),
	        mappings: this._serializeMappings()
	      };
	      if (this._file != null) {
	        map.file = this._file;
	      }
	      if (this._sourceRoot != null) {
	        map.sourceRoot = this._sourceRoot;
	      }
	      if (this._sourcesContents) {
	        map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
	      }
	      return map;
	    };
	    SourceMapGenerator.prototype.toString = function SourceMapGenerator_toString() {
	      return JSON.stringify(this);
	    };
	    exports.SourceMapGenerator = SourceMapGenerator;
	  });
	  define = makeDefine(m, './source-map-consumer');
	  if (typeof define !== 'function') {
	    var define = __webpack_require__(56)(module, __webpack_require__(53));
	  }
	  define(function(require, exports, module) {
	    var util = require('./util');
	    var binarySearch = require('./binary-search');
	    var ArraySet = require('./array-set').ArraySet;
	    var base64VLQ = require('./base64-vlq');
	    function SourceMapConsumer(aSourceMap) {
	      var sourceMap = aSourceMap;
	      if (typeof aSourceMap === 'string') {
	        sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
	      }
	      var version = util.getArg(sourceMap, 'version');
	      var sources = util.getArg(sourceMap, 'sources');
	      var names = util.getArg(sourceMap, 'names', []);
	      var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
	      var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
	      var mappings = util.getArg(sourceMap, 'mappings');
	      var file = util.getArg(sourceMap, 'file', null);
	      if (version != this._version) {
	        throw new Error('Unsupported version: ' + version);
	      }
	      sources = sources.map(util.normalize);
	      this._names = ArraySet.fromArray(names, true);
	      this._sources = ArraySet.fromArray(sources, true);
	      this.sourceRoot = sourceRoot;
	      this.sourcesContent = sourcesContent;
	      this._mappings = mappings;
	      this.file = file;
	    }
	    SourceMapConsumer.fromSourceMap = function SourceMapConsumer_fromSourceMap(aSourceMap) {
	      var smc = Object.create(SourceMapConsumer.prototype);
	      smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
	      smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
	      smc.sourceRoot = aSourceMap._sourceRoot;
	      smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(), smc.sourceRoot);
	      smc.file = aSourceMap._file;
	      smc.__generatedMappings = aSourceMap._mappings.toArray().slice();
	      smc.__originalMappings = aSourceMap._mappings.toArray().slice().sort(util.compareByOriginalPositions);
	      return smc;
	    };
	    SourceMapConsumer.prototype._version = 3;
	    Object.defineProperty(SourceMapConsumer.prototype, 'sources', {get: function() {
	        return this._sources.toArray().map(function(s) {
	          return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;
	        }, this);
	      }});
	    SourceMapConsumer.prototype.__generatedMappings = null;
	    Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {get: function() {
	        if (!this.__generatedMappings) {
	          this.__generatedMappings = [];
	          this.__originalMappings = [];
	          this._parseMappings(this._mappings, this.sourceRoot);
	        }
	        return this.__generatedMappings;
	      }});
	    SourceMapConsumer.prototype.__originalMappings = null;
	    Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {get: function() {
	        if (!this.__originalMappings) {
	          this.__generatedMappings = [];
	          this.__originalMappings = [];
	          this._parseMappings(this._mappings, this.sourceRoot);
	        }
	        return this.__originalMappings;
	      }});
	    SourceMapConsumer.prototype._nextCharIsMappingSeparator = function SourceMapConsumer_nextCharIsMappingSeparator(aStr) {
	      var c = aStr.charAt(0);
	      return c === ";" || c === ",";
	    };
	    SourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	      var generatedLine = 1;
	      var previousGeneratedColumn = 0;
	      var previousOriginalLine = 0;
	      var previousOriginalColumn = 0;
	      var previousSource = 0;
	      var previousName = 0;
	      var str = aStr;
	      var temp = {};
	      var mapping;
	      while (str.length > 0) {
	        if (str.charAt(0) === ';') {
	          generatedLine++;
	          str = str.slice(1);
	          previousGeneratedColumn = 0;
	        } else if (str.charAt(0) === ',') {
	          str = str.slice(1);
	        } else {
	          mapping = {};
	          mapping.generatedLine = generatedLine;
	          base64VLQ.decode(str, temp);
	          mapping.generatedColumn = previousGeneratedColumn + temp.value;
	          previousGeneratedColumn = mapping.generatedColumn;
	          str = temp.rest;
	          if (str.length > 0 && !this._nextCharIsMappingSeparator(str)) {
	            base64VLQ.decode(str, temp);
	            mapping.source = this._sources.at(previousSource + temp.value);
	            previousSource += temp.value;
	            str = temp.rest;
	            if (str.length === 0 || this._nextCharIsMappingSeparator(str)) {
	              throw new Error('Found a source, but no line and column');
	            }
	            base64VLQ.decode(str, temp);
	            mapping.originalLine = previousOriginalLine + temp.value;
	            previousOriginalLine = mapping.originalLine;
	            mapping.originalLine += 1;
	            str = temp.rest;
	            if (str.length === 0 || this._nextCharIsMappingSeparator(str)) {
	              throw new Error('Found a source and line, but no column');
	            }
	            base64VLQ.decode(str, temp);
	            mapping.originalColumn = previousOriginalColumn + temp.value;
	            previousOriginalColumn = mapping.originalColumn;
	            str = temp.rest;
	            if (str.length > 0 && !this._nextCharIsMappingSeparator(str)) {
	              base64VLQ.decode(str, temp);
	              mapping.name = this._names.at(previousName + temp.value);
	              previousName += temp.value;
	              str = temp.rest;
	            }
	          }
	          this.__generatedMappings.push(mapping);
	          if (typeof mapping.originalLine === 'number') {
	            this.__originalMappings.push(mapping);
	          }
	        }
	      }
	      this.__generatedMappings.sort(util.compareByGeneratedPositions);
	      this.__originalMappings.sort(util.compareByOriginalPositions);
	    };
	    SourceMapConsumer.prototype._findMapping = function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator) {
	      if (aNeedle[aLineName] <= 0) {
	        throw new TypeError('Line must be greater than or equal to 1, got ' + aNeedle[aLineName]);
	      }
	      if (aNeedle[aColumnName] < 0) {
	        throw new TypeError('Column must be greater than or equal to 0, got ' + aNeedle[aColumnName]);
	      }
	      return binarySearch.search(aNeedle, aMappings, aComparator);
	    };
	    SourceMapConsumer.prototype.computeColumnSpans = function SourceMapConsumer_computeColumnSpans() {
	      for (var index = 0; index < this._generatedMappings.length; ++index) {
	        var mapping = this._generatedMappings[index];
	        if (index + 1 < this._generatedMappings.length) {
	          var nextMapping = this._generatedMappings[index + 1];
	          if (mapping.generatedLine === nextMapping.generatedLine) {
	            mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
	            continue;
	          }
	        }
	        mapping.lastGeneratedColumn = Infinity;
	      }
	    };
	    SourceMapConsumer.prototype.originalPositionFor = function SourceMapConsumer_originalPositionFor(aArgs) {
	      var needle = {
	        generatedLine: util.getArg(aArgs, 'line'),
	        generatedColumn: util.getArg(aArgs, 'column')
	      };
	      var index = this._findMapping(needle, this._generatedMappings, "generatedLine", "generatedColumn", util.compareByGeneratedPositions);
	      if (index >= 0) {
	        var mapping = this._generatedMappings[index];
	        if (mapping.generatedLine === needle.generatedLine) {
	          var source = util.getArg(mapping, 'source', null);
	          if (source != null && this.sourceRoot != null) {
	            source = util.join(this.sourceRoot, source);
	          }
	          return {
	            source: source,
	            line: util.getArg(mapping, 'originalLine', null),
	            column: util.getArg(mapping, 'originalColumn', null),
	            name: util.getArg(mapping, 'name', null)
	          };
	        }
	      }
	      return {
	        source: null,
	        line: null,
	        column: null,
	        name: null
	      };
	    };
	    SourceMapConsumer.prototype.sourceContentFor = function SourceMapConsumer_sourceContentFor(aSource) {
	      if (!this.sourcesContent) {
	        return null;
	      }
	      if (this.sourceRoot != null) {
	        aSource = util.relative(this.sourceRoot, aSource);
	      }
	      if (this._sources.has(aSource)) {
	        return this.sourcesContent[this._sources.indexOf(aSource)];
	      }
	      var url;
	      if (this.sourceRoot != null && (url = util.urlParse(this.sourceRoot))) {
	        var fileUriAbsPath = aSource.replace(/^file:\/\//, "");
	        if (url.scheme == "file" && this._sources.has(fileUriAbsPath)) {
	          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];
	        }
	        if ((!url.path || url.path == "/") && this._sources.has("/" + aSource)) {
	          return this.sourcesContent[this._sources.indexOf("/" + aSource)];
	        }
	      }
	      throw new Error('"' + aSource + '" is not in the SourceMap.');
	    };
	    SourceMapConsumer.prototype.generatedPositionFor = function SourceMapConsumer_generatedPositionFor(aArgs) {
	      var needle = {
	        source: util.getArg(aArgs, 'source'),
	        originalLine: util.getArg(aArgs, 'line'),
	        originalColumn: util.getArg(aArgs, 'column')
	      };
	      if (this.sourceRoot != null) {
	        needle.source = util.relative(this.sourceRoot, needle.source);
	      }
	      var index = this._findMapping(needle, this._originalMappings, "originalLine", "originalColumn", util.compareByOriginalPositions);
	      if (index >= 0) {
	        var mapping = this._originalMappings[index];
	        return {
	          line: util.getArg(mapping, 'generatedLine', null),
	          column: util.getArg(mapping, 'generatedColumn', null),
	          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
	        };
	      }
	      return {
	        line: null,
	        column: null,
	        lastColumn: null
	      };
	    };
	    SourceMapConsumer.prototype.allGeneratedPositionsFor = function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
	      var needle = {
	        source: util.getArg(aArgs, 'source'),
	        originalLine: util.getArg(aArgs, 'line'),
	        originalColumn: Infinity
	      };
	      if (this.sourceRoot != null) {
	        needle.source = util.relative(this.sourceRoot, needle.source);
	      }
	      var mappings = [];
	      var index = this._findMapping(needle, this._originalMappings, "originalLine", "originalColumn", util.compareByOriginalPositions);
	      if (index >= 0) {
	        var mapping = this._originalMappings[index];
	        while (mapping && mapping.originalLine === needle.originalLine) {
	          mappings.push({
	            line: util.getArg(mapping, 'generatedLine', null),
	            column: util.getArg(mapping, 'generatedColumn', null),
	            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
	          });
	          mapping = this._originalMappings[--index];
	        }
	      }
	      return mappings.reverse();
	    };
	    SourceMapConsumer.GENERATED_ORDER = 1;
	    SourceMapConsumer.ORIGINAL_ORDER = 2;
	    SourceMapConsumer.prototype.eachMapping = function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
	      var context = aContext || null;
	      var order = aOrder || SourceMapConsumer.GENERATED_ORDER;
	      var mappings;
	      switch (order) {
	        case SourceMapConsumer.GENERATED_ORDER:
	          mappings = this._generatedMappings;
	          break;
	        case SourceMapConsumer.ORIGINAL_ORDER:
	          mappings = this._originalMappings;
	          break;
	        default:
	          throw new Error("Unknown order of iteration.");
	      }
	      var sourceRoot = this.sourceRoot;
	      mappings.map(function(mapping) {
	        var source = mapping.source;
	        if (source != null && sourceRoot != null) {
	          source = util.join(sourceRoot, source);
	        }
	        return {
	          source: source,
	          generatedLine: mapping.generatedLine,
	          generatedColumn: mapping.generatedColumn,
	          originalLine: mapping.originalLine,
	          originalColumn: mapping.originalColumn,
	          name: mapping.name
	        };
	      }).forEach(aCallback, context);
	    };
	    exports.SourceMapConsumer = SourceMapConsumer;
	  });
	  define = makeDefine(m, './source-node');
	  if (typeof define !== 'function') {
	    var define = __webpack_require__(56)(module, __webpack_require__(53));
	  }
	  define(function(require, exports, module) {
	    var SourceMapGenerator = require('./source-map-generator').SourceMapGenerator;
	    var util = require('./util');
	    var REGEX_NEWLINE = /(\r?\n)/;
	    var NEWLINE_CODE = 10;
	    var isSourceNode = "$$$isSourceNode$$$";
	    function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
	      this.children = [];
	      this.sourceContents = {};
	      this.line = aLine == null ? null : aLine;
	      this.column = aColumn == null ? null : aColumn;
	      this.source = aSource == null ? null : aSource;
	      this.name = aName == null ? null : aName;
	      this[isSourceNode] = true;
	      if (aChunks != null)
	        this.add(aChunks);
	    }
	    SourceNode.fromStringWithSourceMap = function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
	      var node = new SourceNode();
	      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
	      var shiftNextLine = function() {
	        var lineContents = remainingLines.shift();
	        var newLine = remainingLines.shift() || "";
	        return lineContents + newLine;
	      };
	      var lastGeneratedLine = 1,
	          lastGeneratedColumn = 0;
	      var lastMapping = null;
	      aSourceMapConsumer.eachMapping(function(mapping) {
	        if (lastMapping !== null) {
	          if (lastGeneratedLine < mapping.generatedLine) {
	            var code = "";
	            addMappingWithCode(lastMapping, shiftNextLine());
	            lastGeneratedLine++;
	            lastGeneratedColumn = 0;
	          } else {
	            var nextLine = remainingLines[0];
	            var code = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);
	            remainingLines[0] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn);
	            lastGeneratedColumn = mapping.generatedColumn;
	            addMappingWithCode(lastMapping, code);
	            lastMapping = mapping;
	            return ;
	          }
	        }
	        while (lastGeneratedLine < mapping.generatedLine) {
	          node.add(shiftNextLine());
	          lastGeneratedLine++;
	        }
	        if (lastGeneratedColumn < mapping.generatedColumn) {
	          var nextLine = remainingLines[0];
	          node.add(nextLine.substr(0, mapping.generatedColumn));
	          remainingLines[0] = nextLine.substr(mapping.generatedColumn);
	          lastGeneratedColumn = mapping.generatedColumn;
	        }
	        lastMapping = mapping;
	      }, this);
	      if (remainingLines.length > 0) {
	        if (lastMapping) {
	          addMappingWithCode(lastMapping, shiftNextLine());
	        }
	        node.add(remainingLines.join(""));
	      }
	      aSourceMapConsumer.sources.forEach(function(sourceFile) {
	        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	        if (content != null) {
	          if (aRelativePath != null) {
	            sourceFile = util.join(aRelativePath, sourceFile);
	          }
	          node.setSourceContent(sourceFile, content);
	        }
	      });
	      return node;
	      function addMappingWithCode(mapping, code) {
	        if (mapping === null || mapping.source === undefined) {
	          node.add(code);
	        } else {
	          var source = aRelativePath ? util.join(aRelativePath, mapping.source) : mapping.source;
	          node.add(new SourceNode(mapping.originalLine, mapping.originalColumn, source, code, mapping.name));
	        }
	      }
	    };
	    SourceNode.prototype.add = function SourceNode_add(aChunk) {
	      if (Array.isArray(aChunk)) {
	        aChunk.forEach(function(chunk) {
	          this.add(chunk);
	        }, this);
	      } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
	        if (aChunk) {
	          this.children.push(aChunk);
	        }
	      } else {
	        throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk);
	      }
	      return this;
	    };
	    SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
	      if (Array.isArray(aChunk)) {
	        for (var i = aChunk.length - 1; i >= 0; i--) {
	          this.prepend(aChunk[i]);
	        }
	      } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
	        this.children.unshift(aChunk);
	      } else {
	        throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk);
	      }
	      return this;
	    };
	    SourceNode.prototype.walk = function SourceNode_walk(aFn) {
	      var chunk;
	      for (var i = 0,
	          len = this.children.length; i < len; i++) {
	        chunk = this.children[i];
	        if (chunk[isSourceNode]) {
	          chunk.walk(aFn);
	        } else {
	          if (chunk !== '') {
	            aFn(chunk, {
	              source: this.source,
	              line: this.line,
	              column: this.column,
	              name: this.name
	            });
	          }
	        }
	      }
	    };
	    SourceNode.prototype.join = function SourceNode_join(aSep) {
	      var newChildren;
	      var i;
	      var len = this.children.length;
	      if (len > 0) {
	        newChildren = [];
	        for (i = 0; i < len - 1; i++) {
	          newChildren.push(this.children[i]);
	          newChildren.push(aSep);
	        }
	        newChildren.push(this.children[i]);
	        this.children = newChildren;
	      }
	      return this;
	    };
	    SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
	      var lastChild = this.children[this.children.length - 1];
	      if (lastChild[isSourceNode]) {
	        lastChild.replaceRight(aPattern, aReplacement);
	      } else if (typeof lastChild === 'string') {
	        this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
	      } else {
	        this.children.push(''.replace(aPattern, aReplacement));
	      }
	      return this;
	    };
	    SourceNode.prototype.setSourceContent = function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
	      this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
	    };
	    SourceNode.prototype.walkSourceContents = function SourceNode_walkSourceContents(aFn) {
	      for (var i = 0,
	          len = this.children.length; i < len; i++) {
	        if (this.children[i][isSourceNode]) {
	          this.children[i].walkSourceContents(aFn);
	        }
	      }
	      var sources = Object.keys(this.sourceContents);
	      for (var i = 0,
	          len = sources.length; i < len; i++) {
	        aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
	      }
	    };
	    SourceNode.prototype.toString = function SourceNode_toString() {
	      var str = "";
	      this.walk(function(chunk) {
	        str += chunk;
	      });
	      return str;
	    };
	    SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
	      var generated = {
	        code: "",
	        line: 1,
	        column: 0
	      };
	      var map = new SourceMapGenerator(aArgs);
	      var sourceMappingActive = false;
	      var lastOriginalSource = null;
	      var lastOriginalLine = null;
	      var lastOriginalColumn = null;
	      var lastOriginalName = null;
	      this.walk(function(chunk, original) {
	        generated.code += chunk;
	        if (original.source !== null && original.line !== null && original.column !== null) {
	          if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) {
	            map.addMapping({
	              source: original.source,
	              original: {
	                line: original.line,
	                column: original.column
	              },
	              generated: {
	                line: generated.line,
	                column: generated.column
	              },
	              name: original.name
	            });
	          }
	          lastOriginalSource = original.source;
	          lastOriginalLine = original.line;
	          lastOriginalColumn = original.column;
	          lastOriginalName = original.name;
	          sourceMappingActive = true;
	        } else if (sourceMappingActive) {
	          map.addMapping({generated: {
	              line: generated.line,
	              column: generated.column
	            }});
	          lastOriginalSource = null;
	          sourceMappingActive = false;
	        }
	        for (var idx = 0,
	            length = chunk.length; idx < length; idx++) {
	          if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
	            generated.line++;
	            generated.column = 0;
	            if (idx + 1 === length) {
	              lastOriginalSource = null;
	              sourceMappingActive = false;
	            } else if (sourceMappingActive) {
	              map.addMapping({
	                source: original.source,
	                original: {
	                  line: original.line,
	                  column: original.column
	                },
	                generated: {
	                  line: generated.line,
	                  column: generated.column
	                },
	                name: original.name
	              });
	            }
	          } else {
	            generated.column++;
	          }
	        }
	      });
	      this.walkSourceContents(function(sourceFile, sourceContent) {
	        map.setSourceContent(sourceFile, sourceContent);
	      });
	      return {
	        code: generated.code,
	        map: map
	      };
	    };
	    exports.SourceNode = SourceNode;
	  });
	  var SourceMapGenerator = m['./source-map-generator'].SourceMapGenerator;
	  var SourceMapConsumer = m['./source-map-consumer'].SourceMapConsumer;
	  var SourceNode = m['./source-node'].SourceNode;
	  var join = m['./util'].join;
	  return {
	    get SourceMapGenerator() {
	      return SourceMapGenerator;
	    },
	    get SourceMapConsumer() {
	      return SourceMapConsumer;
	    },
	    get SourceNode() {
	      return SourceNode;
	    },
	    get join() {
	      return join;
	    }
	  };
	});
	System.registerModule("traceur@0.0.87/src/outputgeneration/toSource.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/outputgeneration/toSource.js";
	  var ParseTreeMapWriter = System.get("traceur@0.0.87/src/outputgeneration/ParseTreeMapWriter.js").ParseTreeMapWriter;
	  var ParseTreeWriter = System.get("traceur@0.0.87/src/outputgeneration/ParseTreeWriter.js").ParseTreeWriter;
	  var SourceMapGenerator = System.get("traceur@0.0.87/src/outputgeneration/SourceMapIntegration.js").SourceMapGenerator;
	  function toSource(tree) {
	    var options = arguments[1];
	    var outputName = arguments[2] !== (void 0) ? arguments[2] : '<toSourceOutput>';
	    var sourceRoot = arguments[3];
	    var sourceMapGenerator = options && options.sourceMapGenerator;
	    var sourcemaps = options && options.sourceMaps;
	    if (!sourceMapGenerator && sourcemaps) {
	      sourceMapGenerator = new SourceMapGenerator({
	        file: outputName,
	        sourceRoot: sourceRoot,
	        skipValidation: true
	      });
	    }
	    var sourceMapConfiguration = {
	      sourceMapGenerator: sourceMapGenerator,
	      sourceRoot: sourceRoot,
	      lowResolution: options && options.lowResolutionSourceMap
	    };
	    var writer;
	    if (sourceMapGenerator)
	      writer = new ParseTreeMapWriter(sourceMapConfiguration, options);
	    else
	      writer = new ParseTreeWriter(options);
	    writer.visitAny(tree);
	    return [writer.toString(), sourceMapGenerator && sourceMapGenerator.toString()];
	  }
	  return {get toSource() {
	      return toSource;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/outputgeneration/TreeWriter.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/outputgeneration/TreeWriter.js";
	  var toSource = System.get("traceur@0.0.87/src/outputgeneration/toSource.js").toSource;
	  function write(tree) {
	    var $__2,
	        $__3;
	    var options = arguments[1];
	    var outputName = arguments[2] !== (void 0) ? arguments[2] : '<TreeWriter-output>';
	    var sourceRoot = arguments[3];
	    var $__1 = toSource(tree, options, outputName, sourceRoot),
	        result = ($__2 = $__1[$traceurRuntime.toProperty(Symbol.iterator)](), ($__3 = $__2.next()).done ? void 0 : $__3.value),
	        sourceMap = ($__3 = $__2.next()).done ? void 0 : $__3.value;
	    if (sourceMap)
	      options.generatedSourceMap = sourceMap;
	    return result;
	  }
	  var TreeWriter = function TreeWriter() {
	    ;
	  };
	  ($traceurRuntime.createClass)(TreeWriter, {}, {});
	  TreeWriter.write = write;
	  return {
	    get write() {
	      return write;
	    },
	    get TreeWriter() {
	      return TreeWriter;
	    }
	  };
	});
	System.registerModule("traceur@0.0.87/src/syntax/ParseTreeValidator.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/syntax/ParseTreeValidator.js";
	  var NewExpression = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js").NewExpression;
	  var ParseTreeVisitor = System.get("traceur@0.0.87/src/syntax/ParseTreeVisitor.js").ParseTreeVisitor;
	  var TreeWriter = System.get("traceur@0.0.87/src/outputgeneration/TreeWriter.js").TreeWriter;
	  var $__3 = System.get("traceur@0.0.87/src/syntax/TokenType.js"),
	      AMPERSAND = $__3.AMPERSAND,
	      AMPERSAND_EQUAL = $__3.AMPERSAND_EQUAL,
	      AND = $__3.AND,
	      BAR = $__3.BAR,
	      BAR_EQUAL = $__3.BAR_EQUAL,
	      CARET = $__3.CARET,
	      CARET_EQUAL = $__3.CARET_EQUAL,
	      CLOSE_ANGLE = $__3.CLOSE_ANGLE,
	      EQUAL = $__3.EQUAL,
	      EQUAL_EQUAL = $__3.EQUAL_EQUAL,
	      EQUAL_EQUAL_EQUAL = $__3.EQUAL_EQUAL_EQUAL,
	      GREATER_EQUAL = $__3.GREATER_EQUAL,
	      IDENTIFIER = $__3.IDENTIFIER,
	      IN = $__3.IN,
	      INSTANCEOF = $__3.INSTANCEOF,
	      LEFT_SHIFT = $__3.LEFT_SHIFT,
	      LEFT_SHIFT_EQUAL = $__3.LEFT_SHIFT_EQUAL,
	      LESS_EQUAL = $__3.LESS_EQUAL,
	      MINUS = $__3.MINUS,
	      MINUS_EQUAL = $__3.MINUS_EQUAL,
	      NOT_EQUAL = $__3.NOT_EQUAL,
	      NOT_EQUAL_EQUAL = $__3.NOT_EQUAL_EQUAL,
	      NUMBER = $__3.NUMBER,
	      OPEN_ANGLE = $__3.OPEN_ANGLE,
	      OR = $__3.OR,
	      PERCENT = $__3.PERCENT,
	      PERCENT_EQUAL = $__3.PERCENT_EQUAL,
	      PLUS = $__3.PLUS,
	      PLUS_EQUAL = $__3.PLUS_EQUAL,
	      RIGHT_SHIFT = $__3.RIGHT_SHIFT,
	      RIGHT_SHIFT_EQUAL = $__3.RIGHT_SHIFT_EQUAL,
	      SLASH = $__3.SLASH,
	      SLASH_EQUAL = $__3.SLASH_EQUAL,
	      STAR = $__3.STAR,
	      STAR_EQUAL = $__3.STAR_EQUAL,
	      STAR_STAR = $__3.STAR_STAR,
	      STAR_STAR_EQUAL = $__3.STAR_STAR_EQUAL,
	      STRING = $__3.STRING,
	      UNSIGNED_RIGHT_SHIFT = $__3.UNSIGNED_RIGHT_SHIFT,
	      UNSIGNED_RIGHT_SHIFT_EQUAL = $__3.UNSIGNED_RIGHT_SHIFT_EQUAL;
	  var $__4 = System.get("traceur@0.0.87/src/syntax/trees/ParseTreeType.js"),
	      ARRAY_PATTERN = $__4.ARRAY_PATTERN,
	      ASSIGNMENT_ELEMENT = $__4.ASSIGNMENT_ELEMENT,
	      BINDING_ELEMENT = $__4.BINDING_ELEMENT,
	      BINDING_IDENTIFIER = $__4.BINDING_IDENTIFIER,
	      BLOCK = $__4.BLOCK,
	      CASE_CLAUSE = $__4.CASE_CLAUSE,
	      CATCH = $__4.CATCH,
	      CLASS_DECLARATION = $__4.CLASS_DECLARATION,
	      COMPUTED_PROPERTY_NAME = $__4.COMPUTED_PROPERTY_NAME,
	      DEFAULT_CLAUSE = $__4.DEFAULT_CLAUSE,
	      EXPORT_DEFAULT = $__4.EXPORT_DEFAULT,
	      EXPORT_SPECIFIER = $__4.EXPORT_SPECIFIER,
	      EXPORT_SPECIFIER_SET = $__4.EXPORT_SPECIFIER_SET,
	      EXPORT_STAR = $__4.EXPORT_STAR,
	      FINALLY = $__4.FINALLY,
	      FORMAL_PARAMETER = $__4.FORMAL_PARAMETER,
	      FORMAL_PARAMETER_LIST = $__4.FORMAL_PARAMETER_LIST,
	      FUNCTION_BODY = $__4.FUNCTION_BODY,
	      FUNCTION_DECLARATION = $__4.FUNCTION_DECLARATION,
	      GET_ACCESSOR = $__4.GET_ACCESSOR,
	      IDENTIFIER_EXPRESSION = $__4.IDENTIFIER_EXPRESSION,
	      IMPORTED_BINDING = $__4.IMPORTED_BINDING,
	      LITERAL_PROPERTY_NAME = $__4.LITERAL_PROPERTY_NAME,
	      MODULE_DECLARATION = $__4.MODULE_DECLARATION,
	      MODULE_SPECIFIER = $__4.MODULE_SPECIFIER,
	      NAMED_EXPORT = $__4.NAMED_EXPORT,
	      OBJECT_PATTERN = $__4.OBJECT_PATTERN,
	      OBJECT_PATTERN_FIELD = $__4.OBJECT_PATTERN_FIELD,
	      PROPERTY_METHOD_ASSIGNMENT = $__4.PROPERTY_METHOD_ASSIGNMENT,
	      PROPERTY_NAME_ASSIGNMENT = $__4.PROPERTY_NAME_ASSIGNMENT,
	      PROPERTY_NAME_SHORTHAND = $__4.PROPERTY_NAME_SHORTHAND,
	      PROPERTY_VARIABLE_DECLARATION = $__4.PROPERTY_VARIABLE_DECLARATION,
	      REST_PARAMETER = $__4.REST_PARAMETER,
	      SET_ACCESSOR = $__4.SET_ACCESSOR,
	      TEMPLATE_LITERAL_PORTION = $__4.TEMPLATE_LITERAL_PORTION,
	      TEMPLATE_SUBSTITUTION = $__4.TEMPLATE_SUBSTITUTION,
	      TYPE_ARGUMENTS = $__4.TYPE_ARGUMENTS,
	      TYPE_NAME = $__4.TYPE_NAME,
	      TYPE_PARAMETER = $__4.TYPE_PARAMETER,
	      TYPE_PARAMETERS = $__4.TYPE_PARAMETERS,
	      VARIABLE_DECLARATION_LIST = $__4.VARIABLE_DECLARATION_LIST,
	      VARIABLE_STATEMENT = $__4.VARIABLE_STATEMENT;
	  var assert = System.get("traceur@0.0.87/src/util/assert.js").assert;
	  var ValidationError = function ValidationError(tree, message) {
	    $traceurRuntime.superConstructor($ValidationError).call(this);
	    this.tree = tree;
	    this.message = message;
	  };
	  var $ValidationError = ValidationError;
	  ($traceurRuntime.createClass)(ValidationError, {}, {}, Error);
	  var ParseTreeValidator = function ParseTreeValidator() {
	    $traceurRuntime.superConstructor($ParseTreeValidator).apply(this, arguments);
	    ;
	  };
	  var $ParseTreeValidator = ParseTreeValidator;
	  ($traceurRuntime.createClass)(ParseTreeValidator, {
	    fail_: function(tree, message) {
	      throw new ValidationError(tree, message);
	    },
	    check_: function(condition, tree, message) {
	      if (!condition) {
	        this.fail_(tree, message);
	      }
	    },
	    checkVisit_: function(condition, tree, message) {
	      this.check_(condition, tree, message);
	      this.visitAny(tree);
	    },
	    checkType_: function(type, tree, message) {
	      this.checkVisit_(tree.type === type, tree, message);
	    },
	    visitArgumentList: function(tree) {
	      for (var i = 0; i < tree.args.length; i++) {
	        var argument = tree.args[i];
	        this.checkVisit_(argument.isAssignmentOrSpread(), argument, 'assignment or spread expected');
	      }
	    },
	    visitArrayLiteralExpression: function(tree) {
	      for (var i = 0; i < tree.elements.length; i++) {
	        var element = tree.elements[i];
	        this.checkVisit_(element === null || element.isAssignmentOrSpread(), element, 'assignment or spread expected');
	      }
	    },
	    visitArrayPattern: function(tree) {
	      for (var i = 0; i < tree.elements.length; i++) {
	        var element = tree.elements[i];
	        this.checkVisit_(element === null || element.type === BINDING_ELEMENT || element.type === ASSIGNMENT_ELEMENT || element.isLeftHandSideExpression() || element.isPattern() || element.isSpreadPatternElement(), element, 'null, sub pattern, left hand side expression or spread expected');
	        if (element && element.isSpreadPatternElement()) {
	          this.check_(i === (tree.elements.length - 1), element, 'spread in array patterns must be the last element');
	        }
	      }
	    },
	    visitBinaryExpression: function(tree) {
	      switch (tree.operator.type) {
	        case EQUAL:
	        case STAR_EQUAL:
	        case STAR_STAR_EQUAL:
	        case SLASH_EQUAL:
	        case PERCENT_EQUAL:
	        case PLUS_EQUAL:
	        case MINUS_EQUAL:
	        case LEFT_SHIFT_EQUAL:
	        case RIGHT_SHIFT_EQUAL:
	        case UNSIGNED_RIGHT_SHIFT_EQUAL:
	        case AMPERSAND_EQUAL:
	        case CARET_EQUAL:
	        case BAR_EQUAL:
	          this.check_(tree.left.isLeftHandSideExpression() || tree.left.isPattern(), tree.left, 'left hand side expression or pattern expected');
	          this.check_(tree.right.isAssignmentExpression(), tree.right, 'assignment expression expected');
	          break;
	        case AND:
	        case OR:
	        case BAR:
	        case CARET:
	        case AMPERSAND:
	        case EQUAL_EQUAL:
	        case NOT_EQUAL:
	        case EQUAL_EQUAL_EQUAL:
	        case NOT_EQUAL_EQUAL:
	        case OPEN_ANGLE:
	        case CLOSE_ANGLE:
	        case GREATER_EQUAL:
	        case LESS_EQUAL:
	        case INSTANCEOF:
	        case IN:
	        case LEFT_SHIFT:
	        case RIGHT_SHIFT:
	        case UNSIGNED_RIGHT_SHIFT:
	        case PLUS:
	        case MINUS:
	        case STAR:
	        case SLASH:
	        case PERCENT:
	        case STAR_STAR:
	          this.check_(tree.left.isAssignmentExpression(), tree.left, 'assignment expression expected');
	          this.check_(tree.right.isAssignmentExpression(), tree.right, 'assignment expression expected');
	          break;
	        default:
	          this.fail_(tree, 'unexpected binary operator');
	      }
	      this.visitAny(tree.left);
	      this.visitAny(tree.right);
	    },
	    visitBindingElement: function(tree) {
	      var binding = tree.binding;
	      this.checkVisit_(binding.type === BINDING_IDENTIFIER || binding.type === OBJECT_PATTERN || binding.type === ARRAY_PATTERN, binding, 'expected valid binding element');
	      this.visitAny(tree.initializer);
	    },
	    visitAssignmentElement: function(tree) {
	      var assignment = tree.assignment;
	      this.checkVisit_(assignment.type === OBJECT_PATTERN || assignment.type === ARRAY_PATTERN || assignment.isLeftHandSideExpression(), assignment, 'expected valid assignment element');
	      this.visitAny(tree.initializer);
	    },
	    visitBlock: function(tree) {
	      for (var i = 0; i < tree.statements.length; i++) {
	        var statement = tree.statements[i];
	        this.checkVisit_(statement.isStatementListItem(), statement, 'statement or function declaration expected');
	      }
	    },
	    visitCallExpression: function(tree) {
	      this.check_(tree.operand.isMemberExpression(), tree.operand, 'member expression expected');
	      if (tree.operand instanceof NewExpression) {
	        this.check_(tree.operand.args !== null, tree.operand, 'new args expected');
	      }
	      this.visitAny(tree.operand);
	      this.visitAny(tree.args);
	    },
	    visitCaseClause: function(tree) {
	      this.checkVisit_(tree.expression.isExpression(), tree.expression, 'expression expected');
	      for (var i = 0; i < tree.statements.length; i++) {
	        var statement = tree.statements[i];
	        this.checkVisit_(statement.isStatement(), statement, 'statement expected');
	      }
	    },
	    visitCatch: function(tree) {
	      this.checkVisit_(tree.binding.isPattern() || tree.binding.type === BINDING_IDENTIFIER, tree.binding, 'binding identifier expected');
	      this.checkVisit_(tree.catchBody.type === BLOCK, tree.catchBody, 'block expected');
	    },
	    visitClassDeclaration: function(tree) {
	      this.visitClassShared_(tree);
	    },
	    visitClassExpression: function(tree) {
	      this.visitClassShared_(tree);
	    },
	    visitClassShared_: function(tree) {
	      if (tree.typeParameters) {
	        this.checkVisit_(tree.typeParameters.type === TYPE_PARAMETERS, tree.typeParameters, 'type parameters expected');
	      }
	      for (var i = 0; i < tree.elements.length; i++) {
	        var element = tree.elements[i];
	        switch (element.type) {
	          case GET_ACCESSOR:
	          case SET_ACCESSOR:
	          case PROPERTY_METHOD_ASSIGNMENT:
	          case PROPERTY_VARIABLE_DECLARATION:
	            break;
	          default:
	            this.fail_(element, 'class element expected');
	        }
	        this.visitAny(element);
	      }
	    },
	    visitCommaExpression: function(tree) {
	      for (var i = 0; i < tree.expressions.length; i++) {
	        var expression = tree.expressions[i];
	        this.checkVisit_(expression.isExpression(), expression, 'expression expected');
	      }
	    },
	    visitConditionalExpression: function(tree) {
	      this.checkVisit_(tree.condition.isAssignmentExpression(), tree.condition, 'expression expected');
	      this.checkVisit_(tree.left.isAssignmentExpression(), tree.left, 'expression expected');
	      this.checkVisit_(tree.right.isAssignmentExpression(), tree.right, 'expression expected');
	    },
	    visitCoverFormals: function(tree) {
	      this.fail_(tree, 'CoverFormals should have been removed');
	    },
	    visitCoverInitializedName: function(tree) {
	      this.fail_(tree, 'CoverInitializedName should have been removed');
	    },
	    visitDefaultClause: function(tree) {
	      for (var i = 0; i < tree.statements.length; i++) {
	        var statement = tree.statements[i];
	        this.checkVisit_(statement.isStatement(), statement, 'statement expected');
	      }
	    },
	    visitDoWhileStatement: function(tree) {
	      this.checkVisit_(tree.body.isStatement(), tree.body, 'statement expected');
	      this.checkVisit_(tree.condition.isExpression(), tree.condition, 'expression expected');
	    },
	    visitExportDeclaration: function(tree) {
	      var declType = tree.declaration.type;
	      this.checkVisit_(declType === VARIABLE_STATEMENT || declType === FUNCTION_DECLARATION || declType === MODULE_DECLARATION || declType === CLASS_DECLARATION || declType === NAMED_EXPORT || declType === EXPORT_DEFAULT, tree.declaration, 'expected valid export tree');
	    },
	    visitNamedExport: function(tree) {
	      if (tree.moduleSpecifier) {
	        this.checkVisit_(tree.moduleSpecifier.type === MODULE_SPECIFIER, tree.moduleSpecifier, 'module expression expected');
	      }
	      var specifierType = tree.specifierSet.type;
	      this.checkVisit_(specifierType === EXPORT_SPECIFIER_SET || specifierType === EXPORT_STAR, tree.specifierSet, 'specifier set or identifier expected');
	    },
	    visitExportSpecifierSet: function(tree) {
	      this.check_(tree.specifiers.length > 0, tree, 'expected at least one identifier');
	      for (var i = 0; i < tree.specifiers.length; i++) {
	        var specifier = tree.specifiers[i];
	        this.checkVisit_(specifier.type === EXPORT_SPECIFIER || specifier.type === IDENTIFIER_EXPRESSION, specifier, 'expected valid export specifier');
	      }
	    },
	    visitExpressionStatement: function(tree) {
	      this.checkVisit_(tree.expression.isExpression(), tree.expression, 'expression expected');
	    },
	    visitFinally: function(tree) {
	      this.checkVisit_(tree.block.type === BLOCK, tree.block, 'block expected');
	    },
	    visitForOfStatement: function(tree) {
	      this.checkVisit_(tree.initializer.isPattern() || tree.initializer.type === IDENTIFIER_EXPRESSION || tree.initializer.type === VARIABLE_DECLARATION_LIST && tree.initializer.declarations.length === 1, tree.initializer, 'for-each statement may not have more than one variable declaration');
	      this.checkVisit_(tree.collection.isExpression(), tree.collection, 'expression expected');
	      this.checkVisit_(tree.body.isStatement(), tree.body, 'statement expected');
	    },
	    visitForInStatement: function(tree) {
	      if (tree.initializer.type === VARIABLE_DECLARATION_LIST) {
	        this.checkVisit_(tree.initializer.declarations.length <= 1, tree.initializer, 'for-in statement may not have more than one variable declaration');
	      } else {
	        this.checkVisit_(tree.initializer.isPattern() || tree.initializer.isExpression(), tree.initializer, 'variable declaration, expression or ' + 'pattern expected');
	      }
	      this.checkVisit_(tree.collection.isExpression(), tree.collection, 'expression expected');
	      this.checkVisit_(tree.body.isStatement(), tree.body, 'statement expected');
	    },
	    visitFormalParameterList: function(tree) {
	      for (var i = 0; i < tree.parameters.length; i++) {
	        var parameter = tree.parameters[i];
	        assert(parameter.type === FORMAL_PARAMETER);
	        parameter = parameter.parameter;
	        switch (parameter.type) {
	          case BINDING_ELEMENT:
	            break;
	          case REST_PARAMETER:
	            this.checkVisit_(i === tree.parameters.length - 1, parameter, 'rest parameters must be the last parameter in a parameter list');
	            this.checkType_(BINDING_IDENTIFIER, parameter.identifier, 'binding identifier expected');
	            break;
	          default:
	            this.fail_(parameter, 'parameters must be identifiers or rest' + (" parameters. Found: " + parameter.type));
	            break;
	        }
	        this.visitAny(parameter);
	      }
	    },
	    visitForStatement: function(tree) {
	      if (tree.initializer !== null) {
	        this.checkVisit_(tree.initializer.isExpression() || tree.initializer.type === VARIABLE_DECLARATION_LIST, tree.initializer, 'variable declaration list or expression expected');
	      }
	      if (tree.condition !== null) {
	        this.checkVisit_(tree.condition.isExpression(), tree.condition, 'expression expected');
	      }
	      if (tree.increment !== null) {
	        this.checkVisit_(tree.increment.isExpression(), tree.increment, 'expression expected');
	      }
	      this.checkVisit_(tree.body.isStatement(), tree.body, 'statement expected');
	    },
	    visitFunctionBody: function(tree) {
	      for (var i = 0; i < tree.statements.length; i++) {
	        var statement = tree.statements[i];
	        this.checkVisit_(statement.isStatementListItem(), statement, 'statement expected');
	      }
	    },
	    visitFunctionDeclaration: function(tree) {
	      this.checkType_(BINDING_IDENTIFIER, tree.name, 'binding identifier expected');
	      this.visitFunction_(tree);
	    },
	    visitFunctionExpression: function(tree) {
	      if (tree.name !== null) {
	        this.checkType_(BINDING_IDENTIFIER, tree.name, 'binding identifier expected');
	      }
	      this.visitFunction_(tree);
	    },
	    visitFunction_: function(tree) {
	      this.checkType_(FORMAL_PARAMETER_LIST, tree.parameterList, 'formal parameters expected');
	      this.checkType_(FUNCTION_BODY, tree.body, 'function body expected');
	    },
	    visitGetAccessor: function(tree) {
	      this.checkPropertyName_(tree.name);
	      this.checkType_(FUNCTION_BODY, tree.body, 'function body expected');
	    },
	    visitIfStatement: function(tree) {
	      this.checkVisit_(tree.condition.isExpression(), tree.condition, 'expression expected');
	      this.checkVisit_(tree.ifClause.isStatement(), tree.ifClause, 'statement expected');
	      if (tree.elseClause !== null) {
	        this.checkVisit_(tree.elseClause.isStatement(), tree.elseClause, 'statement expected');
	      }
	    },
	    visitImportSpecifier: function(tree) {
	      this.checkType_(IMPORTED_BINDING, tree.binding, 'ImportedBinding expected');
	    },
	    visitImportedBinding: function(tree) {
	      this.checkType_(BINDING_IDENTIFIER, tree.binding, 'binding identifier expected');
	    },
	    visitLabelledStatement: function(tree) {
	      this.checkVisit_(tree.statement.isStatement(), tree.statement, 'statement expected');
	    },
	    visitMemberExpression: function(tree) {
	      this.check_(tree.operand.isMemberExpression(), tree.operand, 'member expression expected');
	      if (tree.operand instanceof NewExpression) {
	        this.check_(tree.operand.args !== null, tree.operand, 'new args expected');
	      }
	      this.visitAny(tree.operand);
	    },
	    visitMemberLookupExpression: function(tree) {
	      this.check_(tree.operand.isMemberExpression(), tree.operand, 'member expression expected');
	      if (tree.operand instanceof NewExpression) {
	        this.check_(tree.operand.args !== null, tree.operand, 'new args expected');
	      }
	      this.visitAny(tree.operand);
	    },
	    visitSyntaxErrorTree: function(tree) {
	      this.fail_(tree, ("parse tree contains SyntaxError: " + tree.message));
	    },
	    visitModuleSpecifier: function(tree) {
	      this.check_(tree.token.type === STRING || tree.moduleName, 'string or identifier expected');
	    },
	    visitModuleDeclaration: function(tree) {
	      this.checkType_(IMPORTED_BINDING, tree.binding, 'ImportedBinding expected');
	      this.checkType_(MODULE_SPECIFIER, tree.expression, 'module expression expected');
	    },
	    visitNewExpression: function(tree) {
	      this.checkVisit_(tree.operand.isMemberExpression(), tree.operand, 'member expression expected');
	      this.visitAny(tree.args);
	    },
	    visitObjectLiteralExpression: function(tree) {
	      for (var i = 0; i < tree.propertyNameAndValues.length; i++) {
	        var propertyNameAndValue = tree.propertyNameAndValues[i];
	        switch (propertyNameAndValue.type) {
	          case GET_ACCESSOR:
	          case SET_ACCESSOR:
	          case PROPERTY_METHOD_ASSIGNMENT:
	            this.check_(!propertyNameAndValue.isStatic, propertyNameAndValue, 'static is not allowed in object literal expression');
	          case PROPERTY_NAME_ASSIGNMENT:
	          case PROPERTY_NAME_SHORTHAND:
	            break;
	          default:
	            this.fail_(propertyNameAndValue, 'accessor, property name ' + 'assignment or property method assigment expected');
	        }
	        this.visitAny(propertyNameAndValue);
	      }
	    },
	    visitObjectPattern: function(tree) {
	      for (var i = 0; i < tree.fields.length; i++) {
	        var field = tree.fields[i];
	        this.checkVisit_(field.type === OBJECT_PATTERN_FIELD || field.type === ASSIGNMENT_ELEMENT || field.type === BINDING_ELEMENT, field, 'object pattern field expected');
	      }
	    },
	    visitObjectPatternField: function(tree) {
	      this.checkPropertyName_(tree.name);
	      this.checkVisit_(tree.element.type === ASSIGNMENT_ELEMENT || tree.element.type === BINDING_ELEMENT || tree.element.isPattern() || tree.element.isLeftHandSideExpression(), tree.element, 'binding element expected');
	    },
	    visitParenExpression: function(tree) {
	      if (tree.expression.isPattern()) {
	        this.visitAny(tree.expression);
	      } else {
	        this.checkVisit_(tree.expression.isExpression(), tree.expression, 'expression expected');
	      }
	    },
	    visitPostfixExpression: function(tree) {
	      this.checkVisit_(tree.operand.isAssignmentExpression(), tree.operand, 'assignment expression expected');
	    },
	    visitPredefinedType: function(tree) {},
	    visitScript: function(tree) {
	      for (var i = 0; i < tree.scriptItemList.length; i++) {
	        var scriptItemList = tree.scriptItemList[i];
	        this.checkVisit_(scriptItemList.isScriptElement(), scriptItemList, 'global script item expected');
	      }
	    },
	    checkPropertyName_: function(tree) {
	      this.checkVisit_(tree.type === LITERAL_PROPERTY_NAME || tree.type === COMPUTED_PROPERTY_NAME, tree, 'property name expected');
	    },
	    visitPropertyNameAssignment: function(tree) {
	      this.checkPropertyName_(tree.name);
	      this.checkVisit_(tree.value.isAssignmentExpression(), tree.value, 'assignment expression expected');
	    },
	    visitPropertyNameShorthand: function(tree) {
	      this.check_(tree.name.type === IDENTIFIER, tree, 'identifier token expected');
	    },
	    visitLiteralPropertyName: function(tree) {
	      var type = tree.literalToken.type;
	      this.check_(tree.literalToken.isKeyword() || type === IDENTIFIER || type === NUMBER || type === STRING, tree, 'Unexpected token in literal property name');
	    },
	    visitTemplateLiteralExpression: function(tree) {
	      if (tree.operand) {
	        this.checkVisit_(tree.operand.isMemberExpression(), tree.operand, 'member or call expression expected');
	      }
	      for (var i = 0; i < tree.elements.length; i++) {
	        var element = tree.elements[i];
	        if (i % 2) {
	          this.checkType_(TEMPLATE_SUBSTITUTION, element, 'Template literal substitution expected');
	        } else {
	          this.checkType_(TEMPLATE_LITERAL_PORTION, element, 'Template literal portion expected');
	        }
	      }
	    },
	    visitReturnStatement: function(tree) {
	      if (tree.expression !== null) {
	        this.checkVisit_(tree.expression.isExpression(), tree.expression, 'expression expected');
	      }
	    },
	    visitSetAccessor: function(tree) {
	      this.checkPropertyName_(tree.name);
	      this.checkType_(FUNCTION_BODY, tree.body, 'function body expected');
	    },
	    visitSpreadExpression: function(tree) {
	      this.checkVisit_(tree.expression.isAssignmentExpression(), tree.expression, 'assignment expression expected');
	    },
	    visitStateMachine: function(tree) {
	      this.fail_(tree, 'State machines are never valid outside of the ' + 'GeneratorTransformer pass.');
	    },
	    visitSwitchStatement: function(tree) {
	      this.checkVisit_(tree.expression.isExpression(), tree.expression, 'expression expected');
	      var defaultCount = 0;
	      for (var i = 0; i < tree.caseClauses.length; i++) {
	        var caseClause = tree.caseClauses[i];
	        if (caseClause.type === DEFAULT_CLAUSE) {
	          ++defaultCount;
	          this.checkVisit_(defaultCount <= 1, caseClause, 'no more than one default clause allowed');
	        } else {
	          this.checkType_(CASE_CLAUSE, caseClause, 'case or default clause expected');
	        }
	      }
	    },
	    visitThrowStatement: function(tree) {
	      if (tree.value === null) {
	        return ;
	      }
	      this.checkVisit_(tree.value.isExpression(), tree.value, 'expression expected');
	    },
	    visitTryStatement: function(tree) {
	      this.checkType_(BLOCK, tree.body, 'block expected');
	      if (tree.catchBlock !== null) {
	        this.checkType_(CATCH, tree.catchBlock, 'catch block expected');
	      }
	      if (tree.finallyBlock !== null) {
	        this.checkType_(FINALLY, tree.finallyBlock, 'finally block expected');
	      }
	      if (tree.catchBlock === null && tree.finallyBlock === null) {
	        this.fail_(tree, 'either catch or finally must be present');
	      }
	    },
	    visitTypeArguments: function(tree) {
	      var args = tree.args;
	      for (var i = 0; i < args.length; i++) {
	        this.checkVisit_(args[i].isType(), args[i], 'Type arguments must be type expressions');
	      }
	    },
	    visitTypeName: function(tree) {
	      this.checkVisit_(tree.moduleName === null || tree.moduleName.type === TYPE_NAME, tree.moduleName, 'moduleName must be null or a TypeName');
	      this.check_(tree.name.type === IDENTIFIER, tree, 'name must be an identifier');
	    },
	    visitTypeReference: function(tree) {
	      this.checkType_(TYPE_NAME, tree.typeName, 'typeName must be a TypeName');
	      this.checkType_(TYPE_ARGUMENTS, tree.args, 'args must be a TypeArguments');
	    },
	    visitTypeParameters: function(tree) {
	      var parameters = tree.parameters;
	      for (var i = 0; i < parameters.length; i++) {
	        this.checkType_(TYPE_PARAMETER, parameters[i], 'Type parameters must all be type parameters');
	      }
	    },
	    visitTypeParameter: function(tree) {
	      this.check_(tree.identifierToken.type === IDENTIFIER, tree, 'Type parameter must be an identifier token');
	      if (tree.extendsType) {
	        this.checkVisit_(tree.extendsType.isType(), tree.extendsType, 'extends type must be a type expression');
	      }
	    },
	    visitUnaryExpression: function(tree) {
	      this.checkVisit_(tree.operand.isAssignmentExpression(), tree.operand, 'assignment expression expected');
	    },
	    visitVariableDeclaration: function(tree) {
	      this.checkVisit_(tree.lvalue.isPattern() || tree.lvalue.type === BINDING_IDENTIFIER, tree.lvalue, 'binding identifier expected, found: ' + tree.lvalue.type);
	      if (tree.initializer !== null) {
	        this.checkVisit_(tree.initializer.isAssignmentExpression(), tree.initializer, 'assignment expression expected');
	      }
	    },
	    visitWhileStatement: function(tree) {
	      this.checkVisit_(tree.condition.isExpression(), tree.condition, 'expression expected');
	      this.checkVisit_(tree.body.isStatement(), tree.body, 'statement expected');
	    },
	    visitWithStatement: function(tree) {
	      this.checkVisit_(tree.expression.isExpression(), tree.expression, 'expression expected');
	      this.checkVisit_(tree.body.isStatement(), tree.body, 'statement expected');
	    },
	    visitYieldExpression: function(tree) {
	      if (tree.expression !== null) {
	        this.checkVisit_(tree.expression.isExpression(), tree.expression, 'expression expected');
	      }
	    }
	  }, {}, ParseTreeVisitor);
	  ParseTreeValidator.validate = function(tree) {
	    var validator = new ParseTreeValidator();
	    try {
	      validator.visitAny(tree);
	    } catch (e) {
	      if (!(e instanceof ValidationError)) {
	        throw e;
	      }
	      var location = null;
	      if (e.tree !== null) {
	        location = e.tree.location;
	      }
	      if (location === null) {
	        location = tree.location;
	      }
	      var locationString = location !== null ? location.start.toString() : '(unknown)';
	      throw new Error(("Parse tree validation failure '" + e.message + "' at " + locationString + ":") + ("\n\n" + TreeWriter.write(tree) + "\n"));
	    }
	  };
	  return {get ParseTreeValidator() {
	      return ParseTreeValidator;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/MultiTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/MultiTransformer.js";
	  var ParseTreeValidator = System.get("traceur@0.0.87/src/syntax/ParseTreeValidator.js").ParseTreeValidator;
	  var MultiTransformer = function MultiTransformer(reporter, validate) {
	    this.reporter_ = reporter;
	    this.validate_ = validate;
	    this.treeTransformers_ = [];
	  };
	  ($traceurRuntime.createClass)(MultiTransformer, {
	    append: function(treeTransformer) {
	      this.treeTransformers_.push(treeTransformer);
	    },
	    transform: function(tree) {
	      var reporter = this.reporter_;
	      var validate = this.validate_;
	      this.treeTransformers_.every((function(transformTree) {
	        tree = transformTree(tree);
	        if (reporter.hadError())
	          return false;
	        if (validate)
	          ParseTreeValidator.validate(tree);
	        return true;
	      }));
	      return tree;
	    }
	  }, {});
	  return {get MultiTransformer() {
	      return MultiTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/NumericLiteralTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/NumericLiteralTransformer.js";
	  var ParseTreeTransformer = System.get("traceur@0.0.87/src/codegeneration/ParseTreeTransformer.js").ParseTreeTransformer;
	  var $__1 = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js"),
	      LiteralExpression = $__1.LiteralExpression,
	      LiteralPropertyName = $__1.LiteralPropertyName;
	  var LiteralToken = System.get("traceur@0.0.87/src/syntax/LiteralToken.js").LiteralToken;
	  var NUMBER = System.get("traceur@0.0.87/src/syntax/TokenType.js").NUMBER;
	  function needsTransform(token) {
	    return token.type === NUMBER && /^0[bBoO]/.test(token.value);
	  }
	  function transformToken(token) {
	    return new LiteralToken(NUMBER, String(token.processedValue), token.location);
	  }
	  var NumericLiteralTransformer = function NumericLiteralTransformer() {
	    $traceurRuntime.superConstructor($NumericLiteralTransformer).apply(this, arguments);
	    ;
	  };
	  var $NumericLiteralTransformer = NumericLiteralTransformer;
	  ($traceurRuntime.createClass)(NumericLiteralTransformer, {
	    transformLiteralExpression: function(tree) {
	      var token = tree.literalToken;
	      if (needsTransform(token))
	        return new LiteralExpression(tree.location, transformToken(token));
	      return tree;
	    },
	    transformLiteralPropertyName: function(tree) {
	      var token = tree.literalToken;
	      if (needsTransform(token))
	        return new LiteralPropertyName(tree.location, transformToken(token));
	      return tree;
	    }
	  }, {}, ParseTreeTransformer);
	  return {get NumericLiteralTransformer() {
	      return NumericLiteralTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/ObjectLiteralTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/ObjectLiteralTransformer.js";
	  var FindVisitor = System.get("traceur@0.0.87/src/codegeneration/FindVisitor.js").FindVisitor;
	  var $__1 = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js"),
	      FunctionExpression = $__1.FunctionExpression,
	      IdentifierExpression = $__1.IdentifierExpression,
	      LiteralExpression = $__1.LiteralExpression;
	  var TempVarTransformer = System.get("traceur@0.0.87/src/codegeneration/TempVarTransformer.js").TempVarTransformer;
	  var IDENTIFIER = System.get("traceur@0.0.87/src/syntax/TokenType.js").IDENTIFIER;
	  var $__4 = System.get("traceur@0.0.87/src/syntax/trees/ParseTreeType.js"),
	      COMPUTED_PROPERTY_NAME = $__4.COMPUTED_PROPERTY_NAME,
	      LITERAL_PROPERTY_NAME = $__4.LITERAL_PROPERTY_NAME;
	  var StringMap = System.get("traceur@0.0.87/src/util/StringMap.js").StringMap;
	  var $__6 = System.get("traceur@0.0.87/src/codegeneration/ParseTreeFactory.js"),
	      createAssignmentExpression = $__6.createAssignmentExpression,
	      createCommaExpression = $__6.createCommaExpression,
	      createDefineProperty = $__6.createDefineProperty,
	      createEmptyParameterList = $__6.createEmptyParameterList,
	      createFunctionExpression = $__6.createFunctionExpression,
	      createIdentifierExpression = $__6.createIdentifierExpression,
	      createObjectCreate = $__6.createObjectCreate,
	      createObjectLiteralExpression = $__6.createObjectLiteralExpression,
	      createParenExpression = $__6.createParenExpression,
	      createPropertyNameAssignment = $__6.createPropertyNameAssignment,
	      createStringLiteral = $__6.createStringLiteral;
	  var propName = System.get("traceur@0.0.87/src/staticsemantics/PropName.js").propName;
	  var FindAdvancedProperty = function FindAdvancedProperty(transformOptions) {
	    $traceurRuntime.superConstructor($FindAdvancedProperty).call(this, true);
	    this.transformOptions_ = transformOptions;
	    this.protoExpression = null;
	  };
	  var $FindAdvancedProperty = FindAdvancedProperty;
	  ($traceurRuntime.createClass)(FindAdvancedProperty, {
	    visitPropertyNameAssignment: function(tree) {
	      if (isProtoName(tree.name))
	        this.protoExpression = tree.value;
	      else
	        this.visitAny(tree.name);
	    },
	    visitPropertyMethodAssignment: function(tree) {
	      this.visitAny(tree.name);
	    },
	    visitGetAccessor: function(tree) {
	      if (this.transformOptions_.properTailCalls) {
	        this.found = true;
	      } else {
	        this.visitAny(tree.name);
	      }
	    },
	    visitSetAccessor: function(tree) {
	      if (this.transformOptions_.properTailCalls) {
	        this.found = true;
	      } else {
	        this.visitAny(tree.name);
	      }
	    },
	    visitComputedPropertyName: function(tree) {
	      if (this.transformOptions_.computedPropertyNames)
	        this.found = true;
	    }
	  }, {}, FindVisitor);
	  function isProtoName(tree) {
	    return propName(tree) === '__proto__';
	  }
	  var ObjectLiteralTransformer = function ObjectLiteralTransformer(identifierGenerator, reporter, options) {
	    $traceurRuntime.superConstructor($ObjectLiteralTransformer).call(this, identifierGenerator);
	    this.transformOptions_ = options.transformOptions;
	    this.protoExpression = null;
	    this.needsAdvancedTransform = false;
	    this.seenAccessors = null;
	  };
	  var $ObjectLiteralTransformer = ObjectLiteralTransformer;
	  ($traceurRuntime.createClass)(ObjectLiteralTransformer, {
	    findSeenAccessor_: function(name) {
	      if (name.type === COMPUTED_PROPERTY_NAME)
	        return null;
	      var s = propName(name);
	      return this.seenAccessors.get(s);
	    },
	    removeSeenAccessor_: function(name) {
	      if (name.type === COMPUTED_PROPERTY_NAME)
	        return ;
	      var s = propName(name);
	      this.seenAccessors.delete(s);
	    },
	    addSeenAccessor_: function(name, descr) {
	      if (name.type === COMPUTED_PROPERTY_NAME)
	        return ;
	      var s = propName(name);
	      this.seenAccessors.set(s, descr);
	    },
	    createProperty_: function(name, descr) {
	      var expression;
	      if (name.type === LITERAL_PROPERTY_NAME) {
	        if (this.needsAdvancedTransform)
	          expression = this.getPropertyName_(name);
	        else
	          expression = name;
	      } else {
	        expression = name.expression;
	      }
	      if (descr.get || descr.set) {
	        var oldAccessor = this.findSeenAccessor_(name);
	        if (oldAccessor) {
	          oldAccessor.get = descr.get || oldAccessor.get;
	          oldAccessor.set = descr.set || oldAccessor.set;
	          this.removeSeenAccessor_(name);
	          return null;
	        } else {
	          this.addSeenAccessor_(name, descr);
	        }
	      }
	      return [expression, descr];
	    },
	    getPropertyName_: function(nameTree) {
	      var token = nameTree.literalToken;
	      switch (token.type) {
	        case IDENTIFIER:
	          return createStringLiteral(token.value);
	        default:
	          if (token.isKeyword())
	            return createStringLiteral(token.type);
	          return new LiteralExpression(token.location, token);
	      }
	    },
	    transformClassDeclaration: function(tree) {
	      return tree;
	    },
	    transformClassExpression: function(tree) {
	      return tree;
	    },
	    transformObjectLiteralExpression: function(tree) {
	      var oldNeedsTransform = this.needsAdvancedTransform;
	      var oldSeenAccessors = this.seenAccessors;
	      var transformed = this.transformObjectLiteralExpressionInner_(tree);
	      this.needsAdvancedTransform = oldNeedsTransform;
	      this.seenAccessors = oldSeenAccessors;
	      return transformed;
	    },
	    transformObjectLiteralExpressionInner_: function(tree) {
	      var finder = new FindAdvancedProperty(this.transformOptions_);
	      finder.visitAny(tree);
	      if (!finder.found) {
	        this.needsAdvancedTransform = false;
	        return $traceurRuntime.superGet(this, $ObjectLiteralTransformer.prototype, "transformObjectLiteralExpression").call(this, tree);
	      }
	      this.needsAdvancedTransform = true;
	      this.seenAccessors = new StringMap();
	      var properties = this.transformList(tree.propertyNameAndValues);
	      properties = properties.filter((function(tree) {
	        return tree;
	      }));
	      var tempVar = this.addTempVar();
	      var tempVarIdentifierExpression = createIdentifierExpression(tempVar);
	      var expressions = properties.map((function(property) {
	        var expression = property[0];
	        var descr = property[1];
	        return createDefineProperty(tempVarIdentifierExpression, expression, descr);
	      }));
	      var protoExpression = this.transformAny(finder.protoExpression);
	      var objectExpression;
	      if (protoExpression)
	        objectExpression = createObjectCreate(protoExpression);
	      else
	        objectExpression = createObjectLiteralExpression([]);
	      expressions.unshift(createAssignmentExpression(tempVarIdentifierExpression, objectExpression));
	      expressions.push(tempVarIdentifierExpression);
	      return createParenExpression(createCommaExpression(expressions));
	    },
	    transformPropertyNameAssignment: function(tree) {
	      if (!this.needsAdvancedTransform)
	        return $traceurRuntime.superGet(this, $ObjectLiteralTransformer.prototype, "transformPropertyNameAssignment").call(this, tree);
	      if (isProtoName(tree.name))
	        return null;
	      return this.createProperty_(tree.name, {
	        value: this.transformAny(tree.value),
	        configurable: true,
	        enumerable: true,
	        writable: true
	      });
	    },
	    transformGetAccessor: function(tree) {
	      if (!this.needsAdvancedTransform)
	        return $traceurRuntime.superGet(this, $ObjectLiteralTransformer.prototype, "transformGetAccessor").call(this, tree);
	      var body = this.transformAny(tree.body);
	      var func = createFunctionExpression(createEmptyParameterList(), body);
	      return this.createProperty_(tree.name, {
	        get: func,
	        configurable: true,
	        enumerable: true
	      });
	    },
	    transformSetAccessor: function(tree) {
	      if (!this.needsAdvancedTransform)
	        return $traceurRuntime.superGet(this, $ObjectLiteralTransformer.prototype, "transformSetAccessor").call(this, tree);
	      var body = this.transformAny(tree.body);
	      var parameterList = this.transformAny(tree.parameterList);
	      var func = createFunctionExpression(parameterList, body);
	      return this.createProperty_(tree.name, {
	        set: func,
	        configurable: true,
	        enumerable: true
	      });
	    },
	    transformPropertyMethodAssignment: function(tree) {
	      var func = new FunctionExpression(tree.location, tree.debugName, tree.functionKind, this.transformAny(tree.parameterList), tree.typeAnnotation, [], this.transformAny(tree.body));
	      if (!this.needsAdvancedTransform) {
	        return createPropertyNameAssignment(tree.name, func);
	      }
	      var expression = this.transformAny(tree.name);
	      return this.createProperty_(tree.name, {
	        value: func,
	        configurable: true,
	        enumerable: true,
	        writable: true
	      });
	    },
	    transformPropertyNameShorthand: function(tree) {
	      if (!this.needsAdvancedTransform)
	        return $traceurRuntime.superGet(this, $ObjectLiteralTransformer.prototype, "transformPropertyNameShorthand").call(this, tree);
	      var expression = this.transformAny(tree.name);
	      return this.createProperty_(tree.name, {
	        value: new IdentifierExpression(tree.location, tree.name.identifierToken),
	        configurable: true,
	        enumerable: false,
	        writable: true
	      });
	    }
	  }, {}, TempVarTransformer);
	  return {get ObjectLiteralTransformer() {
	      return ObjectLiteralTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/RewriteTailExpressionsTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/RewriteTailExpressionsTransformer.js";
	  var ParseTreeTransformer = System.get("traceur@0.0.87/src/codegeneration/ParseTreeTransformer.js").ParseTreeTransformer;
	  var $__1 = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js"),
	      ArgumentList = $__1.ArgumentList,
	      BinaryExpression = $__1.BinaryExpression,
	      CallExpression = $__1.CallExpression,
	      ConditionalExpression = $__1.ConditionalExpression,
	      MemberExpression = $__1.MemberExpression,
	      MemberLookupExpression = $__1.MemberLookupExpression;
	  var $__2 = System.get("traceur@0.0.87/src/codegeneration/ParseTreeFactory.js"),
	      createArrayLiteralExpression = $__2.createArrayLiteralExpression,
	      createAssignmentExpression = $__2.createAssignmentExpression,
	      createCommaExpression = $__2.createCommaExpression,
	      createMemberExpression = $__2.createMemberExpression,
	      id = $__2.createIdentifierExpression,
	      createNullLiteral = $__2.createNullLiteral,
	      createParenExpression = $__2.createParenExpression;
	  var $__3 = System.get("traceur@0.0.87/src/syntax/trees/ParseTreeType.js"),
	      COMMA_EXPRESSION = $__3.COMMA_EXPRESSION,
	      MEMBER_EXPRESSION = $__3.MEMBER_EXPRESSION,
	      MEMBER_LOOKUP_EXPRESSION = $__3.MEMBER_LOOKUP_EXPRESSION,
	      IDENTIFIER_EXPRESSION = $__3.IDENTIFIER_EXPRESSION,
	      PAREN_EXPRESSION = $__3.PAREN_EXPRESSION,
	      THIS_EXPRESSION = $__3.THIS_EXPRESSION;
	  var $__4 = System.get("traceur@0.0.87/src/syntax/TokenType.js"),
	      AND = $__4.AND,
	      OR = $__4.OR;
	  function createCall(tree, operand, thisArg) {
	    var argList = tree.args;
	    var argArray = argList ? argList.args : [];
	    argArray = argArray.map((function(arg) {
	      if (arg.type === COMMA_EXPRESSION) {
	        return createParenExpression(arg.type);
	      }
	      return arg;
	    }));
	    return new CallExpression(tree.location, createMemberExpression('$traceurRuntime', 'continuation'), new ArgumentList(argList ? argList.location : null, [operand, thisArg, createArrayLiteralExpression(argArray)]));
	  }
	  var RewriteTailExpressionsTransformer = function RewriteTailExpressionsTransformer(bodyTransformer) {
	    $traceurRuntime.superConstructor($RewriteTailExpressionsTransformer).call(this);
	    this.bodyTransformer_ = bodyTransformer;
	  };
	  var $RewriteTailExpressionsTransformer = RewriteTailExpressionsTransformer;
	  ($traceurRuntime.createClass)(RewriteTailExpressionsTransformer, {
	    transformBinaryExpression: function(tree) {
	      var operator = tree.operator;
	      if (operator.type !== AND && operator.type !== OR) {
	        return tree;
	      }
	      var right = this.transformAny(tree.right);
	      if (right !== tree.right) {
	        return new BinaryExpression(tree.location, tree.left, operator, right);
	      }
	      return tree;
	    },
	    transformCallExpression: function(tree) {
	      var operand = tree.operand;
	      while (operand.type === PAREN_EXPRESSION) {
	        operand = operand.expression;
	      }
	      switch (operand.type) {
	        case IDENTIFIER_EXPRESSION:
	          return createCall(tree, operand, createNullLiteral());
	        case MEMBER_EXPRESSION:
	        case MEMBER_LOOKUP_EXPRESSION:
	          return this.transformMemberExpressionCall_(tree, operand);
	      }
	      return tree;
	    },
	    transformMemberExpressionCall_: function(tree, operand) {
	      var object = operand.operand;
	      var thisArg;
	      var assignment;
	      if (object.type === IDENTIFIER_EXPRESSION || object.type === THIS_EXPRESSION) {
	        thisArg = object;
	      } else {
	        thisArg = id(this.bodyTransformer_.addTempVar());
	        assignment = createAssignmentExpression(thisArg, operand.operand);
	      }
	      if (operand.type === MEMBER_EXPRESSION) {
	        operand = new MemberExpression(operand.location, thisArg, operand.memberName);
	      } else {
	        operand = new MemberLookupExpression(operand.location, thisArg, operand.memberExpression);
	      }
	      if (assignment) {
	        return createParenExpression(createCommaExpression([assignment, createCall(tree, operand, thisArg)]));
	      } else {
	        return createCall(tree, operand, thisArg);
	      }
	    },
	    transformCommaExpression: function(tree) {
	      var expressions = tree.expressions;
	      var expression = expressions[expressions.length - 1];
	      var transformedExpression = this.transformAny(expression);
	      if (expression !== transformedExpression) {
	        expressions = expressions.slice(0, -1);
	        expressions.push(transformedExpression);
	        return new CommaExpression(tree.location, expressions);
	      }
	      return tree;
	    },
	    transformConditionalExpression: function(tree) {
	      var left = this.transformAny(tree.left);
	      var right = this.transformAny(tree.right);
	      if (left !== tree.left || right !== tree.right) {
	        return new ConditionalExpression(tree.location, tree.condition, left, right);
	      }
	      return tree;
	    },
	    transformNewExpression: function(tree) {
	      return createCall(tree, createMemberExpression('$traceurRuntime', 'construct'), tree.operand);
	    },
	    transformArrayLiteralExpression: function(tree) {
	      return tree;
	    },
	    transformArrowFunctionExpression: function(tree) {
	      return tree;
	    },
	    transformFunctionExpression: function(tree) {
	      return tree;
	    },
	    transformIdentifierExpression: function(tree) {
	      return tree;
	    },
	    transformLiteralExpression: function(tree) {
	      return tree;
	    },
	    transformMemberExpression: function(tree) {
	      return tree;
	    },
	    transformMemberLookupExpression: function(tree) {
	      return tree;
	    },
	    transformPostfixExpression: function(tree) {
	      return tree;
	    },
	    transformObjectLiteralExpression: function(tree) {
	      return tree;
	    },
	    transformUnaryExpression: function(tree) {
	      return tree;
	    }
	  }, {transform: function(bodyTransformer, tree) {
	      return new $RewriteTailExpressionsTransformer(bodyTransformer).transformAny(tree);
	    }}, ParseTreeTransformer);
	  return {get RewriteTailExpressionsTransformer() {
	      return RewriteTailExpressionsTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/RewriteTailCallsTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/RewriteTailCallsTransformer.js";
	  var ParseTreeTransformer = System.get("traceur@0.0.87/src/codegeneration/ParseTreeTransformer.js").ParseTreeTransformer;
	  var RewriteTailExpressionsTransformer = System.get("traceur@0.0.87/src/codegeneration/RewriteTailExpressionsTransformer.js").RewriteTailExpressionsTransformer;
	  var $__2 = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js"),
	      ReturnStatement = $__2.ReturnStatement,
	      TryStatement = $__2.TryStatement;
	  var RewriteTailCallsTransformer = function RewriteTailCallsTransformer(bodyTransformer) {
	    $traceurRuntime.superConstructor($RewriteTailCallsTransformer).call(this);
	    this.bodyTransformer_ = bodyTransformer;
	  };
	  var $RewriteTailCallsTransformer = RewriteTailCallsTransformer;
	  ($traceurRuntime.createClass)(RewriteTailCallsTransformer, {
	    transformReturnStatement: function(tree) {
	      var expression = tree.expression;
	      if (expression !== null) {
	        expression = RewriteTailExpressionsTransformer.transform(this.bodyTransformer_, expression);
	        if (expression !== tree.expression) {
	          return new ReturnStatement(tree.location, expression);
	        }
	      }
	      return tree;
	    },
	    transformTryStatement: function(tree) {
	      var block;
	      if (tree.finallyBlock !== null) {
	        block = this.transformAny(tree.finallyBlock);
	        if (block !== tree.finallyBlock) {
	          return new TryStatement(tree.location, tree.body, tree.catchBlock, block);
	        }
	      } else {
	        block = this.transformAny(tree.catchBlock);
	        if (block !== tree.catchBlock) {
	          return new TryStatement(tree.location, tree.body, block, tree.finallyBlock);
	        }
	      }
	      return tree;
	    },
	    transformForInStatement: function(tree) {
	      return tree;
	    },
	    transformForOfStatement: function(tree) {
	      return tree;
	    },
	    transformForOnStatement: function(tree) {
	      return tree;
	    },
	    transformClassDeclaration: function(tree) {
	      return tree;
	    },
	    transformClassExpression: function(tree) {
	      return tree;
	    },
	    transformExpressionStatement: function(tree) {
	      return tree;
	    },
	    transformFunctionDeclaration: function(tree) {
	      return tree;
	    },
	    transformFunctionExpression: function(tree) {
	      return tree;
	    },
	    transformGetAccessor: function(tree) {
	      return tree;
	    },
	    transformSetAccessor: function(tree) {
	      return tree;
	    },
	    transformPropertyMethodAssignment: function(tree) {
	      return tree;
	    },
	    transformArrowFunctionExpression: function(tree) {
	      return tree;
	    },
	    transformComprehensionFor: function(tree) {
	      return tree;
	    },
	    transformVariableStatement: function(tree) {
	      return tree;
	    }
	  }, {transform: function(bodyTransformer, tree) {
	      return new $RewriteTailCallsTransformer(bodyTransformer).transformAny(tree);
	    }}, ParseTreeTransformer);
	  return {get RewriteTailCallsTransformer() {
	      return RewriteTailCallsTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/ProperTailCallTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/ProperTailCallTransformer.js";
	  var $__0 = Object.freeze(Object.defineProperties(["$traceurRuntime.initTailRecursiveFunction(", ")"], {raw: {value: Object.freeze(["$traceurRuntime.initTailRecursiveFunction(", ")"])}})),
	      $__1 = Object.freeze(Object.defineProperties(["var ", " = ", ";"], {raw: {value: Object.freeze(["var ", " = ", ";"])}})),
	      $__2 = Object.freeze(Object.defineProperties(["\n        $traceurRuntime.initTailRecursiveFunction(", ")"], {raw: {value: Object.freeze(["\n        $traceurRuntime.initTailRecursiveFunction(", ")"])}})),
	      $__3 = Object.freeze(Object.defineProperties(["\n        return $traceurRuntime.call(", ", this, arguments);"], {raw: {value: Object.freeze(["\n        return $traceurRuntime.call(", ", this, arguments);"])}}));
	  var TempVarTransformer = System.get("traceur@0.0.87/src/codegeneration/TempVarTransformer.js").TempVarTransformer;
	  var RewriteTailCallsTransformer = System.get("traceur@0.0.87/src/codegeneration/RewriteTailCallsTransformer.js").RewriteTailCallsTransformer;
	  var $__6 = System.get("traceur@0.0.87/src/codegeneration/ParseTreeFactory.js"),
	      createFunctionBody = $__6.createFunctionBody,
	      createFunctionExpression = $__6.createFunctionExpression,
	      id = $__6.createIdentifierExpression;
	  var $__7 = System.get("traceur@0.0.87/src/codegeneration/PlaceholderParser.js"),
	      parseExpression = $__7.parseExpression,
	      parseStatement = $__7.parseStatement,
	      parseStatements = $__7.parseStatements;
	  var $__8 = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js"),
	      AnonBlock = $__8.AnonBlock,
	      FunctionDeclaration = $__8.FunctionDeclaration,
	      FunctionExpression = $__8.FunctionExpression;
	  var ProperTailCallTransformer = function ProperTailCallTransformer(identifierGenerator) {
	    $traceurRuntime.superConstructor($ProperTailCallTransformer).call(this, identifierGenerator);
	    this.inBlock_ = false;
	  };
	  var $ProperTailCallTransformer = ProperTailCallTransformer;
	  ($traceurRuntime.createClass)(ProperTailCallTransformer, {
	    transformFunctionDeclaration: function(tree) {
	      tree = $traceurRuntime.superGet(this, $ProperTailCallTransformer.prototype, "transformFunctionDeclaration").call(this, tree);
	      if (tree.functionKind !== null) {
	        return tree;
	      }
	      var nameIdExpression = id(tree.name.identifierToken);
	      var setupFlagExpression = parseExpression($__0, nameIdExpression);
	      var funcDecl = this.transformFunction_(tree, FunctionDeclaration);
	      if (funcDecl === tree) {
	        return tree;
	      }
	      var tmpVar = id(this.inBlock_ ? this.getTempIdentifier() : this.addTempVar(setupFlagExpression));
	      if (!this.inBlock_) {
	        return funcDecl;
	      }
	      return new AnonBlock(null, [funcDecl, parseStatement($__1, tmpVar, setupFlagExpression)]);
	    },
	    transformFunctionExpression: function(tree) {
	      tree = $traceurRuntime.superGet(this, $ProperTailCallTransformer.prototype, "transformFunctionExpression").call(this, tree);
	      if (tree.functionKind) {
	        return tree;
	      }
	      var functionExpression = this.transformFunction_(tree, FunctionExpression);
	      if (functionExpression === tree) {
	        return tree;
	      }
	      return parseExpression($__2, functionExpression);
	    },
	    transformFunction_: function(tree, constructor) {
	      var body = RewriteTailCallsTransformer.transform(this, tree.body);
	      if (body === tree.body) {
	        return tree;
	      }
	      var func = id(this.getTempIdentifier());
	      var innerFunction = createFunctionExpression(tree.parameterList, body);
	      var outerBody = createFunctionBody(parseStatements($__3, innerFunction));
	      return new constructor(tree.location, tree.name, tree.functionKind, tree.parameterList, tree.typeAnnotation, tree.annotations, outerBody);
	    },
	    transformBlock: function(tree) {
	      var inBlock = this.inBlock_;
	      this.inBlock_ = true;
	      var rv = $traceurRuntime.superGet(this, $ProperTailCallTransformer.prototype, "transformBlock").call(this, tree);
	      this.inBlock_ = inBlock;
	      return rv;
	    }
	  }, {}, TempVarTransformer);
	  return {get ProperTailCallTransformer() {
	      return ProperTailCallTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/PropertyNameShorthandTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/PropertyNameShorthandTransformer.js";
	  var $__0 = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js"),
	      IdentifierExpression = $__0.IdentifierExpression,
	      LiteralPropertyName = $__0.LiteralPropertyName,
	      PropertyNameAssignment = $__0.PropertyNameAssignment;
	  var ParseTreeTransformer = System.get("traceur@0.0.87/src/codegeneration/ParseTreeTransformer.js").ParseTreeTransformer;
	  var PropertyNameShorthandTransformer = function PropertyNameShorthandTransformer() {
	    $traceurRuntime.superConstructor($PropertyNameShorthandTransformer).apply(this, arguments);
	    ;
	  };
	  var $PropertyNameShorthandTransformer = PropertyNameShorthandTransformer;
	  ($traceurRuntime.createClass)(PropertyNameShorthandTransformer, {transformPropertyNameShorthand: function(tree) {
	      return new PropertyNameAssignment(tree.location, new LiteralPropertyName(tree.location, tree.name), new IdentifierExpression(tree.location, tree.name));
	    }}, {}, ParseTreeTransformer);
	  return {get PropertyNameShorthandTransformer() {
	      return PropertyNameShorthandTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/outputgeneration/regexpuRewritePattern.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/outputgeneration/regexpuRewritePattern.js";
	  var modules = {};
	  var module = {};
	  var exports = module.exports = {};
	  var require = function(id) {
	    return modules[id];
	  };
	  ;
	  (function(root) {
	    var freeExports = typeof exports == 'object' && exports;
	    var freeModule = typeof module == 'object' && module && module.exports == freeExports && module;
	    var freeGlobal = typeof global == 'object' && global;
	    if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
	      root = freeGlobal;
	    }
	    var ERRORS = {
	      'rangeOrder': 'A range\u2019s `stop` value must be greater than or equal ' + 'to the `start` value.',
	      'codePointRange': 'Invalid code point value. Code points range from ' + 'U+000000 to U+10FFFF.'
	    };
	    var HIGH_SURROGATE_MIN = 0xD800;
	    var HIGH_SURROGATE_MAX = 0xDBFF;
	    var LOW_SURROGATE_MIN = 0xDC00;
	    var LOW_SURROGATE_MAX = 0xDFFF;
	    var regexNull = /\\x00([^0123456789]|$)/g;
	    var object = {};
	    var hasOwnProperty = object.hasOwnProperty;
	    var extend = function(destination, source) {
	      var key;
	      for (key in source) {
	        if (hasOwnProperty.call(source, key)) {
	          destination[key] = source[key];
	        }
	      }
	      return destination;
	    };
	    var forEach = function(array, callback) {
	      var index = -1;
	      var length = array.length;
	      while (++index < length) {
	        callback(array[index], index);
	      }
	    };
	    var toString = object.toString;
	    var isArray = function(value) {
	      return toString.call(value) == '[object Array]';
	    };
	    var isNumber = function(value) {
	      return typeof value == 'number' || toString.call(value) == '[object Number]';
	    };
	    var zeroes = '0000';
	    var pad = function(number, totalCharacters) {
	      var string = String(number);
	      return string.length < totalCharacters ? (zeroes + string).slice(-totalCharacters) : string;
	    };
	    var hex = function(number) {
	      return Number(number).toString(16).toUpperCase();
	    };
	    var slice = [].slice;
	    var dataFromCodePoints = function(codePoints) {
	      var index = -1;
	      var length = codePoints.length;
	      var max = length - 1;
	      var result = [];
	      var isStart = true;
	      var tmp;
	      var previous = 0;
	      while (++index < length) {
	        tmp = codePoints[index];
	        if (isStart) {
	          result.push(tmp);
	          previous = tmp;
	          isStart = false;
	        } else {
	          if (tmp == previous + 1) {
	            if (index != max) {
	              previous = tmp;
	              continue;
	            } else {
	              isStart = true;
	              result.push(tmp + 1);
	            }
	          } else {
	            result.push(previous + 1, tmp);
	            previous = tmp;
	          }
	        }
	      }
	      if (!isStart) {
	        result.push(tmp + 1);
	      }
	      return result;
	    };
	    var dataRemove = function(data, codePoint) {
	      var index = 0;
	      var start;
	      var end;
	      var length = data.length;
	      while (index < length) {
	        start = data[index];
	        end = data[index + 1];
	        if (codePoint >= start && codePoint < end) {
	          if (codePoint == start) {
	            if (end == start + 1) {
	              data.splice(index, 2);
	              return data;
	            } else {
	              data[index] = codePoint + 1;
	              return data;
	            }
	          } else if (codePoint == end - 1) {
	            data[index + 1] = codePoint;
	            return data;
	          } else {
	            data.splice(index, 2, start, codePoint, codePoint + 1, end);
	            return data;
	          }
	        }
	        index += 2;
	      }
	      return data;
	    };
	    var dataRemoveRange = function(data, rangeStart, rangeEnd) {
	      if (rangeEnd < rangeStart) {
	        throw Error(ERRORS.rangeOrder);
	      }
	      var index = 0;
	      var start;
	      var end;
	      while (index < data.length) {
	        start = data[index];
	        end = data[index + 1] - 1;
	        if (start > rangeEnd) {
	          return data;
	        }
	        if (rangeStart <= start && rangeEnd >= end) {
	          data.splice(index, 2);
	          continue;
	        }
	        if (rangeStart >= start && rangeEnd < end) {
	          if (rangeStart == start) {
	            data[index] = rangeEnd + 1;
	            data[index + 1] = end + 1;
	            return data;
	          }
	          data.splice(index, 2, start, rangeStart, rangeEnd + 1, end + 1);
	          return data;
	        }
	        if (rangeStart >= start && rangeStart <= end) {
	          data[index + 1] = rangeStart;
	        } else if (rangeEnd >= start && rangeEnd <= end) {
	          data[index] = rangeEnd + 1;
	          return data;
	        }
	        index += 2;
	      }
	      return data;
	    };
	    var dataAdd = function(data, codePoint) {
	      var index = 0;
	      var start;
	      var end;
	      var lastIndex = null;
	      var length = data.length;
	      if (codePoint < 0x0 || codePoint > 0x10FFFF) {
	        throw RangeError(ERRORS.codePointRange);
	      }
	      while (index < length) {
	        start = data[index];
	        end = data[index + 1];
	        if (codePoint >= start && codePoint < end) {
	          return data;
	        }
	        if (codePoint == start - 1) {
	          data[index] = codePoint;
	          return data;
	        }
	        if (start > codePoint) {
	          data.splice(lastIndex != null ? lastIndex + 2 : 0, 0, codePoint, codePoint + 1);
	          return data;
	        }
	        if (codePoint == end) {
	          if (codePoint + 1 == data[index + 2]) {
	            data.splice(index, 4, start, data[index + 3]);
	            return data;
	          }
	          data[index + 1] = codePoint + 1;
	          return data;
	        }
	        lastIndex = index;
	        index += 2;
	      }
	      data.push(codePoint, codePoint + 1);
	      return data;
	    };
	    var dataAddData = function(dataA, dataB) {
	      var index = 0;
	      var start;
	      var end;
	      var data = dataA.slice();
	      var length = dataB.length;
	      while (index < length) {
	        start = dataB[index];
	        end = dataB[index + 1] - 1;
	        if (start == end) {
	          data = dataAdd(data, start);
	        } else {
	          data = dataAddRange(data, start, end);
	        }
	        index += 2;
	      }
	      return data;
	    };
	    var dataRemoveData = function(dataA, dataB) {
	      var index = 0;
	      var start;
	      var end;
	      var data = dataA.slice();
	      var length = dataB.length;
	      while (index < length) {
	        start = dataB[index];
	        end = dataB[index + 1] - 1;
	        if (start == end) {
	          data = dataRemove(data, start);
	        } else {
	          data = dataRemoveRange(data, start, end);
	        }
	        index += 2;
	      }
	      return data;
	    };
	    var dataAddRange = function(data, rangeStart, rangeEnd) {
	      if (rangeEnd < rangeStart) {
	        throw Error(ERRORS.rangeOrder);
	      }
	      if (rangeStart < 0x0 || rangeStart > 0x10FFFF || rangeEnd < 0x0 || rangeEnd > 0x10FFFF) {
	        throw RangeError(ERRORS.codePointRange);
	      }
	      var index = 0;
	      var start;
	      var end;
	      var added = false;
	      var length = data.length;
	      while (index < length) {
	        start = data[index];
	        end = data[index + 1];
	        if (added) {
	          if (start == rangeEnd + 1) {
	            data.splice(index - 1, 2);
	            return data;
	          }
	          if (start > rangeEnd) {
	            return data;
	          }
	          if (start >= rangeStart && start <= rangeEnd) {
	            if (end > rangeStart && end - 1 <= rangeEnd) {
	              data.splice(index, 2);
	              index -= 2;
	            } else {
	              data.splice(index - 1, 2);
	              index -= 2;
	            }
	          }
	        } else if (start == rangeEnd + 1) {
	          data[index] = rangeStart;
	          return data;
	        } else if (start > rangeEnd) {
	          data.splice(index, 0, rangeStart, rangeEnd + 1);
	          return data;
	        } else if (rangeStart >= start && rangeStart < end && rangeEnd + 1 <= end) {
	          return data;
	        } else if ((rangeStart >= start && rangeStart < end) || end == rangeStart) {
	          data[index + 1] = rangeEnd + 1;
	          added = true;
	        } else if (rangeStart <= start && rangeEnd + 1 >= end) {
	          data[index] = rangeStart;
	          data[index + 1] = rangeEnd + 1;
	          added = true;
	        }
	        index += 2;
	      }
	      if (!added) {
	        data.push(rangeStart, rangeEnd + 1);
	      }
	      return data;
	    };
	    var dataContains = function(data, codePoint) {
	      var index = 0;
	      var length = data.length;
	      var start = data[index];
	      var end = data[length - 1];
	      if (length >= 2) {
	        if (codePoint < start || codePoint > end) {
	          return false;
	        }
	      }
	      while (index < length) {
	        start = data[index];
	        end = data[index + 1];
	        if (codePoint >= start && codePoint < end) {
	          return true;
	        }
	        index += 2;
	      }
	      return false;
	    };
	    var dataIntersection = function(data, codePoints) {
	      var index = 0;
	      var length = codePoints.length;
	      var codePoint;
	      var result = [];
	      while (index < length) {
	        codePoint = codePoints[index];
	        if (dataContains(data, codePoint)) {
	          result.push(codePoint);
	        }
	        ++index;
	      }
	      return dataFromCodePoints(result);
	    };
	    var dataIsEmpty = function(data) {
	      return !data.length;
	    };
	    var dataIsSingleton = function(data) {
	      return data.length == 2 && data[0] + 1 == data[1];
	    };
	    var dataToArray = function(data) {
	      var index = 0;
	      var start;
	      var end;
	      var result = [];
	      var length = data.length;
	      while (index < length) {
	        start = data[index];
	        end = data[index + 1];
	        while (start < end) {
	          result.push(start);
	          ++start;
	        }
	        index += 2;
	      }
	      return result;
	    };
	    var floor = Math.floor;
	    var highSurrogate = function(codePoint) {
	      return parseInt(floor((codePoint - 0x10000) / 0x400) + HIGH_SURROGATE_MIN, 10);
	    };
	    var lowSurrogate = function(codePoint) {
	      return parseInt((codePoint - 0x10000) % 0x400 + LOW_SURROGATE_MIN, 10);
	    };
	    var stringFromCharCode = String.fromCharCode;
	    var codePointToString = function(codePoint) {
	      var string;
	      if (codePoint == 0x09) {
	        string = '\\t';
	      } else if (codePoint == 0x0A) {
	        string = '\\n';
	      } else if (codePoint == 0x0C) {
	        string = '\\f';
	      } else if (codePoint == 0x0D) {
	        string = '\\r';
	      } else if (codePoint == 0x5C) {
	        string = '\\\\';
	      } else if (codePoint == 0x24 || (codePoint >= 0x28 && codePoint <= 0x2B) || codePoint == 0x2D || codePoint == 0x2E || codePoint == 0x3F || (codePoint >= 0x5B && codePoint <= 0x5E) || (codePoint >= 0x7B && codePoint <= 0x7D)) {
	        string = '\\' + stringFromCharCode(codePoint);
	      } else if (codePoint >= 0x20 && codePoint <= 0x7E) {
	        string = stringFromCharCode(codePoint);
	      } else if (codePoint <= 0xFF) {
	        string = '\\x' + pad(hex(codePoint), 2);
	      } else {
	        string = '\\u' + pad(hex(codePoint), 4);
	      }
	      return string;
	    };
	    var symbolToCodePoint = function(symbol) {
	      var length = symbol.length;
	      var first = symbol.charCodeAt(0);
	      var second;
	      if (first >= HIGH_SURROGATE_MIN && first <= HIGH_SURROGATE_MAX && length > 1) {
	        second = symbol.charCodeAt(1);
	        return (first - HIGH_SURROGATE_MIN) * 0x400 + second - LOW_SURROGATE_MIN + 0x10000;
	      }
	      return first;
	    };
	    var createBMPCharacterClasses = function(data) {
	      var result = '';
	      var index = 0;
	      var start;
	      var end;
	      var length = data.length;
	      if (dataIsSingleton(data)) {
	        return codePointToString(data[0]);
	      }
	      while (index < length) {
	        start = data[index];
	        end = data[index + 1] - 1;
	        if (start == end) {
	          result += codePointToString(start);
	        } else if (start + 1 == end) {
	          result += codePointToString(start) + codePointToString(end);
	        } else {
	          result += codePointToString(start) + '-' + codePointToString(end);
	        }
	        index += 2;
	      }
	      return '[' + result + ']';
	    };
	    var splitAtBMP = function(data) {
	      var loneHighSurrogates = [];
	      var loneLowSurrogates = [];
	      var bmp = [];
	      var astral = [];
	      var index = 0;
	      var start;
	      var end;
	      var length = data.length;
	      while (index < length) {
	        start = data[index];
	        end = data[index + 1] - 1;
	        if (start < HIGH_SURROGATE_MIN) {
	          if (end < HIGH_SURROGATE_MIN) {
	            bmp.push(start, end + 1);
	          }
	          if (end >= HIGH_SURROGATE_MIN && end <= HIGH_SURROGATE_MAX) {
	            bmp.push(start, HIGH_SURROGATE_MIN);
	            loneHighSurrogates.push(HIGH_SURROGATE_MIN, end + 1);
	          }
	          if (end >= LOW_SURROGATE_MIN && end <= LOW_SURROGATE_MAX) {
	            bmp.push(start, HIGH_SURROGATE_MIN);
	            loneHighSurrogates.push(HIGH_SURROGATE_MIN, HIGH_SURROGATE_MAX + 1);
	            loneLowSurrogates.push(LOW_SURROGATE_MIN, end + 1);
	          }
	          if (end > LOW_SURROGATE_MAX) {
	            bmp.push(start, HIGH_SURROGATE_MIN);
	            loneHighSurrogates.push(HIGH_SURROGATE_MIN, HIGH_SURROGATE_MAX + 1);
	            loneLowSurrogates.push(LOW_SURROGATE_MIN, LOW_SURROGATE_MAX + 1);
	            if (end <= 0xFFFF) {
	              bmp.push(LOW_SURROGATE_MAX + 1, end + 1);
	            } else {
	              bmp.push(LOW_SURROGATE_MAX + 1, 0xFFFF + 1);
	              astral.push(0xFFFF + 1, end + 1);
	            }
	          }
	        } else if (start >= HIGH_SURROGATE_MIN && start <= HIGH_SURROGATE_MAX) {
	          if (end >= HIGH_SURROGATE_MIN && end <= HIGH_SURROGATE_MAX) {
	            loneHighSurrogates.push(start, end + 1);
	          }
	          if (end >= LOW_SURROGATE_MIN && end <= LOW_SURROGATE_MAX) {
	            loneHighSurrogates.push(start, HIGH_SURROGATE_MAX + 1);
	            loneLowSurrogates.push(LOW_SURROGATE_MIN, end + 1);
	          }
	          if (end > LOW_SURROGATE_MAX) {
	            loneHighSurrogates.push(start, HIGH_SURROGATE_MAX + 1);
	            loneLowSurrogates.push(LOW_SURROGATE_MIN, LOW_SURROGATE_MAX + 1);
	            if (end <= 0xFFFF) {
	              bmp.push(LOW_SURROGATE_MAX + 1, end + 1);
	            } else {
	              bmp.push(LOW_SURROGATE_MAX + 1, 0xFFFF + 1);
	              astral.push(0xFFFF + 1, end + 1);
	            }
	          }
	        } else if (start >= LOW_SURROGATE_MIN && start <= LOW_SURROGATE_MAX) {
	          if (end >= LOW_SURROGATE_MIN && end <= LOW_SURROGATE_MAX) {
	            loneLowSurrogates.push(start, end + 1);
	          }
	          if (end > LOW_SURROGATE_MAX) {
	            loneLowSurrogates.push(start, LOW_SURROGATE_MAX + 1);
	            if (end <= 0xFFFF) {
	              bmp.push(LOW_SURROGATE_MAX + 1, end + 1);
	            } else {
	              bmp.push(LOW_SURROGATE_MAX + 1, 0xFFFF + 1);
	              astral.push(0xFFFF + 1, end + 1);
	            }
	          }
	        } else if (start > LOW_SURROGATE_MAX && start <= 0xFFFF) {
	          if (end <= 0xFFFF) {
	            bmp.push(start, end + 1);
	          } else {
	            bmp.push(start, 0xFFFF + 1);
	            astral.push(0xFFFF + 1, end + 1);
	          }
	        } else {
	          astral.push(start, end + 1);
	        }
	        index += 2;
	      }
	      return {
	        'loneHighSurrogates': loneHighSurrogates,
	        'loneLowSurrogates': loneLowSurrogates,
	        'bmp': bmp,
	        'astral': astral
	      };
	    };
	    var optimizeSurrogateMappings = function(surrogateMappings) {
	      var result = [];
	      var tmpLow = [];
	      var addLow = false;
	      var mapping;
	      var nextMapping;
	      var highSurrogates;
	      var lowSurrogates;
	      var nextHighSurrogates;
	      var nextLowSurrogates;
	      var index = -1;
	      var length = surrogateMappings.length;
	      while (++index < length) {
	        mapping = surrogateMappings[index];
	        nextMapping = surrogateMappings[index + 1];
	        if (!nextMapping) {
	          result.push(mapping);
	          continue;
	        }
	        highSurrogates = mapping[0];
	        lowSurrogates = mapping[1];
	        nextHighSurrogates = nextMapping[0];
	        nextLowSurrogates = nextMapping[1];
	        tmpLow = lowSurrogates;
	        while (nextHighSurrogates && highSurrogates[0] == nextHighSurrogates[0] && highSurrogates[1] == nextHighSurrogates[1]) {
	          if (dataIsSingleton(nextLowSurrogates)) {
	            tmpLow = dataAdd(tmpLow, nextLowSurrogates[0]);
	          } else {
	            tmpLow = dataAddRange(tmpLow, nextLowSurrogates[0], nextLowSurrogates[1] - 1);
	          }
	          ++index;
	          mapping = surrogateMappings[index];
	          highSurrogates = mapping[0];
	          lowSurrogates = mapping[1];
	          nextMapping = surrogateMappings[index + 1];
	          nextHighSurrogates = nextMapping && nextMapping[0];
	          nextLowSurrogates = nextMapping && nextMapping[1];
	          addLow = true;
	        }
	        result.push([highSurrogates, addLow ? tmpLow : lowSurrogates]);
	        addLow = false;
	      }
	      return optimizeByLowSurrogates(result);
	    };
	    var optimizeByLowSurrogates = function(surrogateMappings) {
	      if (surrogateMappings.length == 1) {
	        return surrogateMappings;
	      }
	      var index = -1;
	      var innerIndex = -1;
	      while (++index < surrogateMappings.length) {
	        var mapping = surrogateMappings[index];
	        var lowSurrogates = mapping[1];
	        var lowSurrogateStart = lowSurrogates[0];
	        var lowSurrogateEnd = lowSurrogates[1];
	        innerIndex = index;
	        while (++innerIndex < surrogateMappings.length) {
	          var otherMapping = surrogateMappings[innerIndex];
	          var otherLowSurrogates = otherMapping[1];
	          var otherLowSurrogateStart = otherLowSurrogates[0];
	          var otherLowSurrogateEnd = otherLowSurrogates[1];
	          if (lowSurrogateStart == otherLowSurrogateStart && lowSurrogateEnd == otherLowSurrogateEnd) {
	            if (dataIsSingleton(otherMapping[0])) {
	              mapping[0] = dataAdd(mapping[0], otherMapping[0][0]);
	            } else {
	              mapping[0] = dataAddRange(mapping[0], otherMapping[0][0], otherMapping[0][1] - 1);
	            }
	            surrogateMappings.splice(innerIndex, 1);
	            --innerIndex;
	          }
	        }
	      }
	      return surrogateMappings;
	    };
	    var surrogateSet = function(data) {
	      if (!data.length) {
	        return [];
	      }
	      var index = 0;
	      var start;
	      var end;
	      var startHigh;
	      var startLow;
	      var prevStartHigh = 0;
	      var prevEndHigh = 0;
	      var tmpLow = [];
	      var endHigh;
	      var endLow;
	      var surrogateMappings = [];
	      var length = data.length;
	      var dataHigh = [];
	      while (index < length) {
	        start = data[index];
	        end = data[index + 1] - 1;
	        startHigh = highSurrogate(start);
	        startLow = lowSurrogate(start);
	        endHigh = highSurrogate(end);
	        endLow = lowSurrogate(end);
	        var startsWithLowestLowSurrogate = startLow == LOW_SURROGATE_MIN;
	        var endsWithHighestLowSurrogate = endLow == LOW_SURROGATE_MAX;
	        var complete = false;
	        if (startHigh == endHigh || startsWithLowestLowSurrogate && endsWithHighestLowSurrogate) {
	          surrogateMappings.push([[startHigh, endHigh + 1], [startLow, endLow + 1]]);
	          complete = true;
	        } else {
	          surrogateMappings.push([[startHigh, startHigh + 1], [startLow, LOW_SURROGATE_MAX + 1]]);
	        }
	        if (!complete && startHigh + 1 < endHigh) {
	          if (endsWithHighestLowSurrogate) {
	            surrogateMappings.push([[startHigh + 1, endHigh + 1], [LOW_SURROGATE_MIN, endLow + 1]]);
	            complete = true;
	          } else {
	            surrogateMappings.push([[startHigh + 1, endHigh], [LOW_SURROGATE_MIN, LOW_SURROGATE_MAX + 1]]);
	          }
	        }
	        if (!complete) {
	          surrogateMappings.push([[endHigh, endHigh + 1], [LOW_SURROGATE_MIN, endLow + 1]]);
	        }
	        prevStartHigh = startHigh;
	        prevEndHigh = endHigh;
	        index += 2;
	      }
	      return optimizeSurrogateMappings(surrogateMappings);
	    };
	    var createSurrogateCharacterClasses = function(surrogateMappings) {
	      var result = [];
	      forEach(surrogateMappings, function(surrogateMapping) {
	        var highSurrogates = surrogateMapping[0];
	        var lowSurrogates = surrogateMapping[1];
	        result.push(createBMPCharacterClasses(highSurrogates) + createBMPCharacterClasses(lowSurrogates));
	      });
	      return result.join('|');
	    };
	    var createCharacterClassesFromData = function(data) {
	      var result = [];
	      var parts = splitAtBMP(data);
	      var loneHighSurrogates = parts.loneHighSurrogates;
	      var loneLowSurrogates = parts.loneLowSurrogates;
	      var bmp = parts.bmp;
	      var astral = parts.astral;
	      var hasAstral = !dataIsEmpty(parts.astral);
	      var hasLoneHighSurrogates = !dataIsEmpty(loneHighSurrogates);
	      var hasLoneLowSurrogates = !dataIsEmpty(loneLowSurrogates);
	      var surrogateMappings = surrogateSet(astral);
	      if (!dataIsEmpty(bmp)) {
	        result.push(createBMPCharacterClasses(bmp));
	      }
	      if (surrogateMappings.length) {
	        result.push(createSurrogateCharacterClasses(surrogateMappings));
	      }
	      if (hasLoneHighSurrogates) {
	        result.push(createBMPCharacterClasses(loneHighSurrogates) + '(?![\\uDC00-\\uDFFF])');
	      }
	      if (hasLoneLowSurrogates) {
	        result.push('(?:[^\\uD800-\\uDBFF]|^)' + createBMPCharacterClasses(loneLowSurrogates));
	      }
	      return result.join('|');
	    };
	    var regenerate = function(value) {
	      if (arguments.length > 1) {
	        value = slice.call(arguments);
	      }
	      if (this instanceof regenerate) {
	        this.data = [];
	        return value ? this.add(value) : this;
	      }
	      return (new regenerate).add(value);
	    };
	    regenerate.version = '1.1.0';
	    var proto = regenerate.prototype;
	    extend(proto, {
	      'add': function(value) {
	        var $this = this;
	        if (value == null) {
	          return $this;
	        }
	        if (value instanceof regenerate) {
	          $this.data = dataAddData($this.data, value.data);
	          return $this;
	        }
	        if (arguments.length > 1) {
	          value = slice.call(arguments);
	        }
	        if (isArray(value)) {
	          forEach(value, function(item) {
	            $this.add(item);
	          });
	          return $this;
	        }
	        $this.data = dataAdd($this.data, isNumber(value) ? value : symbolToCodePoint(value));
	        return $this;
	      },
	      'remove': function(value) {
	        var $this = this;
	        if (value == null) {
	          return $this;
	        }
	        if (value instanceof regenerate) {
	          $this.data = dataRemoveData($this.data, value.data);
	          return $this;
	        }
	        if (arguments.length > 1) {
	          value = slice.call(arguments);
	        }
	        if (isArray(value)) {
	          forEach(value, function(item) {
	            $this.remove(item);
	          });
	          return $this;
	        }
	        $this.data = dataRemove($this.data, isNumber(value) ? value : symbolToCodePoint(value));
	        return $this;
	      },
	      'addRange': function(start, end) {
	        var $this = this;
	        $this.data = dataAddRange($this.data, isNumber(start) ? start : symbolToCodePoint(start), isNumber(end) ? end : symbolToCodePoint(end));
	        return $this;
	      },
	      'removeRange': function(start, end) {
	        var $this = this;
	        var startCodePoint = isNumber(start) ? start : symbolToCodePoint(start);
	        var endCodePoint = isNumber(end) ? end : symbolToCodePoint(end);
	        $this.data = dataRemoveRange($this.data, startCodePoint, endCodePoint);
	        return $this;
	      },
	      'intersection': function(argument) {
	        var $this = this;
	        var array = argument instanceof regenerate ? dataToArray(argument.data) : argument;
	        $this.data = dataIntersection($this.data, array);
	        return $this;
	      },
	      'contains': function(codePoint) {
	        return dataContains(this.data, isNumber(codePoint) ? codePoint : symbolToCodePoint(codePoint));
	      },
	      'clone': function() {
	        var set = new regenerate;
	        set.data = this.data.slice(0);
	        return set;
	      },
	      'toString': function() {
	        var result = createCharacterClassesFromData(this.data);
	        return result.replace(regexNull, '\\0$1');
	      },
	      'toRegExp': function(flags) {
	        return RegExp(this.toString(), flags || '');
	      },
	      'valueOf': function() {
	        return dataToArray(this.data);
	      }
	    });
	    proto.toArray = proto.valueOf;
	    if (true) {
	      !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	        return regenerate;
	      }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (freeExports && !freeExports.nodeType) {
	      if (freeModule) {
	        freeModule.exports = regenerate;
	      } else {
	        freeExports.regenerate = regenerate;
	      }
	    } else {
	      root.regenerate = regenerate;
	    }
	  }(this));
	  modules['regenerate'] = module.exports || window.regenerate;
	  ;
	  (function() {
	    'use strict';
	    var objectTypes = {
	      'function': true,
	      'object': true
	    };
	    var root = (objectTypes[typeof window] && window) || this;
	    var oldRoot = root;
	    var freeExports = objectTypes[typeof exports] && exports;
	    var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;
	    var freeGlobal = freeExports && freeModule && typeof global == 'object' && global;
	    if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {
	      root = freeGlobal;
	    }
	    var stringFromCharCode = String.fromCharCode;
	    var floor = Math.floor;
	    function fromCodePoint() {
	      var MAX_SIZE = 0x4000;
	      var codeUnits = [];
	      var highSurrogate;
	      var lowSurrogate;
	      var index = -1;
	      var length = arguments.length;
	      if (!length) {
	        return '';
	      }
	      var result = '';
	      while (++index < length) {
	        var codePoint = Number(arguments[index]);
	        if (!isFinite(codePoint) || codePoint < 0 || codePoint > 0x10FFFF || floor(codePoint) != codePoint) {
	          throw RangeError('Invalid code point: ' + codePoint);
	        }
	        if (codePoint <= 0xFFFF) {
	          codeUnits.push(codePoint);
	        } else {
	          codePoint -= 0x10000;
	          highSurrogate = (codePoint >> 10) + 0xD800;
	          lowSurrogate = (codePoint % 0x400) + 0xDC00;
	          codeUnits.push(highSurrogate, lowSurrogate);
	        }
	        if (index + 1 == length || codeUnits.length > MAX_SIZE) {
	          result += stringFromCharCode.apply(null, codeUnits);
	          codeUnits.length = 0;
	        }
	      }
	      return result;
	    }
	    function assertType(type, expected) {
	      if (expected.indexOf('|') == -1) {
	        if (type == expected) {
	          return ;
	        }
	        throw Error('Invalid node type: ' + type);
	      }
	      expected = assertType.hasOwnProperty(expected) ? assertType[expected] : (assertType[expected] = RegExp('^(?:' + expected + ')$'));
	      if (expected.test(type)) {
	        return ;
	      }
	      throw Error('Invalid node type: ' + type);
	    }
	    function generate(node) {
	      var type = node.type;
	      if (generate.hasOwnProperty(type) && typeof generate[type] == 'function') {
	        return generate[type](node);
	      }
	      throw Error('Invalid node type: ' + type);
	    }
	    function generateAlternative(node) {
	      assertType(node.type, 'alternative');
	      var terms = node.body,
	          length = terms ? terms.length : 0;
	      if (length == 1) {
	        return generateTerm(terms[0]);
	      } else {
	        var i = -1,
	            result = '';
	        while (++i < length) {
	          result += generateTerm(terms[i]);
	        }
	        return result;
	      }
	    }
	    function generateAnchor(node) {
	      assertType(node.type, 'anchor');
	      switch (node.kind) {
	        case 'start':
	          return '^';
	        case 'end':
	          return '$';
	        case 'boundary':
	          return '\\b';
	        case 'not-boundary':
	          return '\\B';
	        default:
	          throw Error('Invalid assertion');
	      }
	    }
	    function generateAtom(node) {
	      assertType(node.type, 'anchor|characterClass|characterClassEscape|dot|group|reference|value');
	      return generate(node);
	    }
	    function generateCharacterClass(node) {
	      assertType(node.type, 'characterClass');
	      var classRanges = node.body,
	          length = classRanges ? classRanges.length : 0;
	      var i = -1,
	          result = '[';
	      if (node.negative) {
	        result += '^';
	      }
	      while (++i < length) {
	        result += generateClassAtom(classRanges[i]);
	      }
	      result += ']';
	      return result;
	    }
	    function generateCharacterClassEscape(node) {
	      assertType(node.type, 'characterClassEscape');
	      return '\\' + node.value;
	    }
	    function generateCharacterClassRange(node) {
	      assertType(node.type, 'characterClassRange');
	      var min = node.min,
	          max = node.max;
	      if (min.type == 'characterClassRange' || max.type == 'characterClassRange') {
	        throw Error('Invalid character class range');
	      }
	      return generateClassAtom(min) + '-' + generateClassAtom(max);
	    }
	    function generateClassAtom(node) {
	      assertType(node.type, 'anchor|characterClassEscape|characterClassRange|dot|value');
	      return generate(node);
	    }
	    function generateDisjunction(node) {
	      assertType(node.type, 'disjunction');
	      var body = node.body,
	          length = body ? body.length : 0;
	      if (length == 0) {
	        throw Error('No body');
	      } else if (length == 1) {
	        return generate(body[0]);
	      } else {
	        var i = -1,
	            result = '';
	        while (++i < length) {
	          if (i != 0) {
	            result += '|';
	          }
	          result += generate(body[i]);
	        }
	        return result;
	      }
	    }
	    function generateDot(node) {
	      assertType(node.type, 'dot');
	      return '.';
	    }
	    function generateGroup(node) {
	      assertType(node.type, 'group');
	      var result = '(';
	      switch (node.behavior) {
	        case 'normal':
	          break;
	        case 'ignore':
	          result += '?:';
	          break;
	        case 'lookahead':
	          result += '?=';
	          break;
	        case 'negativeLookahead':
	          result += '?!';
	          break;
	        default:
	          throw Error('Invalid behaviour: ' + node.behaviour);
	      }
	      var body = node.body,
	          length = body ? body.length : 0;
	      if (length == 1) {
	        result += generate(body[0]);
	      } else {
	        var i = -1;
	        while (++i < length) {
	          result += generate(body[i]);
	        }
	      }
	      result += ')';
	      return result;
	    }
	    function generateQuantifier(node) {
	      assertType(node.type, 'quantifier');
	      var quantifier = '',
	          min = node.min,
	          max = node.max;
	      switch (max) {
	        case undefined:
	        case null:
	          switch (min) {
	            case 0:
	              quantifier = '*';
	              break;
	            case 1:
	              quantifier = '+';
	              break;
	            default:
	              quantifier = '{' + min + ',}';
	              break;
	          }
	          break;
	        default:
	          if (min == max) {
	            quantifier = '{' + min + '}';
	          } else if (min == 0 && max == 1) {
	            quantifier = '?';
	          } else {
	            quantifier = '{' + min + ',' + max + '}';
	          }
	          break;
	      }
	      if (!node.greedy) {
	        quantifier += '?';
	      }
	      return generateAtom(node.body[0]) + quantifier;
	    }
	    function generateReference(node) {
	      assertType(node.type, 'reference');
	      return '\\' + node.matchIndex;
	    }
	    function generateTerm(node) {
	      assertType(node.type, 'anchor|characterClass|characterClassEscape|empty|group|quantifier|reference|value');
	      return generate(node);
	    }
	    function generateValue(node) {
	      assertType(node.type, 'value');
	      var kind = node.kind,
	          codePoint = node.codePoint;
	      switch (kind) {
	        case 'controlLetter':
	          return '\\c' + fromCodePoint(codePoint + 64);
	        case 'hexadecimalEscape':
	          return '\\x' + ('00' + codePoint.toString(16).toUpperCase()).slice(-2);
	        case 'identifier':
	          return '\\' + fromCodePoint(codePoint);
	        case 'null':
	          return '\\' + codePoint;
	        case 'octal':
	          return '\\' + codePoint.toString(8);
	        case 'singleEscape':
	          switch (codePoint) {
	            case 0x0008:
	              return '\\b';
	            case 0x009:
	              return '\\t';
	            case 0x00A:
	              return '\\n';
	            case 0x00B:
	              return '\\v';
	            case 0x00C:
	              return '\\f';
	            case 0x00D:
	              return '\\r';
	            default:
	              throw Error('Invalid codepoint: ' + codePoint);
	          }
	        case 'symbol':
	          return fromCodePoint(codePoint);
	        case 'unicodeEscape':
	          return '\\u' + ('0000' + codePoint.toString(16).toUpperCase()).slice(-4);
	        case 'unicodeCodePointEscape':
	          return '\\u{' + codePoint.toString(16).toUpperCase() + '}';
	        default:
	          throw Error('Unsupported node kind: ' + kind);
	      }
	    }
	    generate.alternative = generateAlternative;
	    generate.anchor = generateAnchor;
	    generate.characterClass = generateCharacterClass;
	    generate.characterClassEscape = generateCharacterClassEscape;
	    generate.characterClassRange = generateCharacterClassRange;
	    generate.disjunction = generateDisjunction;
	    generate.dot = generateDot;
	    generate.group = generateGroup;
	    generate.quantifier = generateQuantifier;
	    generate.reference = generateReference;
	    generate.value = generateValue;
	    if (true) {
	      !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	        return {'generate': generate};
	      }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (freeExports && freeModule) {
	      freeExports.generate = generate;
	    } else {
	      root.regjsgen = {'generate': generate};
	    }
	  }.call(this));
	  modules['regjsgen'] = {generate: exports.generate || window.regjsgen};
	  (function() {
	    function parse(str, flags) {
	      var hasUnicodeFlag = (flags || "").indexOf("u") !== -1;
	      var pos = 0;
	      var closedCaptureCounter = 0;
	      function addRaw(node) {
	        node.raw = str.substring(node.range[0], node.range[1]);
	        return node;
	      }
	      function updateRawStart(node, start) {
	        node.range[0] = start;
	        return addRaw(node);
	      }
	      function createAnchor(kind, rawLength) {
	        return addRaw({
	          type: 'anchor',
	          kind: kind,
	          range: [pos - rawLength, pos]
	        });
	      }
	      function createValue(kind, codePoint, from, to) {
	        return addRaw({
	          type: 'value',
	          kind: kind,
	          codePoint: codePoint,
	          range: [from, to]
	        });
	      }
	      function createEscaped(kind, codePoint, value, fromOffset) {
	        fromOffset = fromOffset || 0;
	        return createValue(kind, codePoint, pos - (value.length + fromOffset), pos);
	      }
	      function createCharacter(matches) {
	        var _char = matches[0];
	        var first = _char.charCodeAt(0);
	        if (hasUnicodeFlag) {
	          var second;
	          if (_char.length === 1 && first >= 0xD800 && first <= 0xDBFF) {
	            second = lookahead().charCodeAt(0);
	            if (second >= 0xDC00 && second <= 0xDFFF) {
	              pos++;
	              return createValue('symbol', (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000, pos - 2, pos);
	            }
	          }
	        }
	        return createValue('symbol', first, pos - 1, pos);
	      }
	      function createDisjunction(alternatives, from, to) {
	        return addRaw({
	          type: 'disjunction',
	          body: alternatives,
	          range: [from, to]
	        });
	      }
	      function createDot() {
	        return addRaw({
	          type: 'dot',
	          range: [pos - 1, pos]
	        });
	      }
	      function createCharacterClassEscape(value) {
	        return addRaw({
	          type: 'characterClassEscape',
	          value: value,
	          range: [pos - 2, pos]
	        });
	      }
	      function createReference(matchIndex) {
	        return addRaw({
	          type: 'reference',
	          matchIndex: parseInt(matchIndex, 10),
	          range: [pos - 1 - matchIndex.length, pos]
	        });
	      }
	      function createGroup(behavior, disjunction, from, to) {
	        return addRaw({
	          type: 'group',
	          behavior: behavior,
	          body: disjunction,
	          range: [from, to]
	        });
	      }
	      function createQuantifier(min, max, from, to) {
	        if (to == null) {
	          from = pos - 1;
	          to = pos;
	        }
	        return addRaw({
	          type: 'quantifier',
	          min: min,
	          max: max,
	          greedy: true,
	          body: null,
	          range: [from, to]
	        });
	      }
	      function createAlternative(terms, from, to) {
	        return addRaw({
	          type: 'alternative',
	          body: terms,
	          range: [from, to]
	        });
	      }
	      function createCharacterClass(classRanges, negative, from, to) {
	        return addRaw({
	          type: 'characterClass',
	          body: classRanges,
	          negative: negative,
	          range: [from, to]
	        });
	      }
	      function createClassRange(min, max, from, to) {
	        if (min.codePoint > max.codePoint) {
	          throw SyntaxError('invalid range in character class');
	        }
	        return addRaw({
	          type: 'characterClassRange',
	          min: min,
	          max: max,
	          range: [from, to]
	        });
	      }
	      function flattenBody(body) {
	        if (body.type === 'alternative') {
	          return body.body;
	        } else {
	          return [body];
	        }
	      }
	      function isEmpty(obj) {
	        return obj.type === 'empty';
	      }
	      function incr(amount) {
	        amount = (amount || 1);
	        var res = str.substring(pos, pos + amount);
	        pos += (amount || 1);
	        return res;
	      }
	      function skip(value) {
	        if (!match(value)) {
	          throw SyntaxError('character: ' + value);
	        }
	      }
	      function match(value) {
	        if (str.indexOf(value, pos) === pos) {
	          return incr(value.length);
	        }
	      }
	      function lookahead() {
	        return str[pos];
	      }
	      function current(value) {
	        return str.indexOf(value, pos) === pos;
	      }
	      function next(value) {
	        return str[pos + 1] === value;
	      }
	      function matchReg(regExp) {
	        var subStr = str.substring(pos);
	        var res = subStr.match(regExp);
	        if (res) {
	          res.range = [];
	          res.range[0] = pos;
	          incr(res[0].length);
	          res.range[1] = pos;
	        }
	        return res;
	      }
	      function parseDisjunction() {
	        var res = [],
	            from = pos;
	        res.push(parseAlternative());
	        while (match('|')) {
	          res.push(parseAlternative());
	        }
	        if (res.length === 1) {
	          return res[0];
	        }
	        return createDisjunction(res, from, pos);
	      }
	      function parseAlternative() {
	        var res = [],
	            from = pos;
	        var term;
	        while (term = parseTerm()) {
	          res.push(term);
	        }
	        if (res.length === 1) {
	          return res[0];
	        }
	        return createAlternative(res, from, pos);
	      }
	      function parseTerm() {
	        if (pos >= str.length || current('|') || current(')')) {
	          return null;
	        }
	        var anchor = parseAnchor();
	        if (anchor) {
	          return anchor;
	        }
	        var atom = parseAtom();
	        if (!atom) {
	          throw SyntaxError('Expected atom');
	        }
	        var quantifier = parseQuantifier() || false;
	        if (quantifier) {
	          quantifier.body = flattenBody(atom);
	          updateRawStart(quantifier, atom.range[0]);
	          return quantifier;
	        }
	        return atom;
	      }
	      function parseGroup(matchA, typeA, matchB, typeB) {
	        var type = null,
	            from = pos;
	        if (match(matchA)) {
	          type = typeA;
	        } else if (match(matchB)) {
	          type = typeB;
	        } else {
	          return false;
	        }
	        var body = parseDisjunction();
	        if (!body) {
	          throw SyntaxError('Expected disjunction');
	        }
	        skip(')');
	        var group = createGroup(type, flattenBody(body), from, pos);
	        if (type == 'normal') {
	          closedCaptureCounter++;
	        }
	        return group;
	      }
	      function parseAnchor() {
	        var res,
	            from = pos;
	        if (match('^')) {
	          return createAnchor('start', 1);
	        } else if (match('$')) {
	          return createAnchor('end', 1);
	        } else if (match('\\b')) {
	          return createAnchor('boundary', 2);
	        } else if (match('\\B')) {
	          return createAnchor('not-boundary', 2);
	        } else {
	          return parseGroup('(?=', 'lookahead', '(?!', 'negativeLookahead');
	        }
	      }
	      function parseQuantifier() {
	        var res;
	        var quantifier;
	        var min,
	            max;
	        if (match('*')) {
	          quantifier = createQuantifier(0);
	        } else if (match('+')) {
	          quantifier = createQuantifier(1);
	        } else if (match('?')) {
	          quantifier = createQuantifier(0, 1);
	        } else if (res = matchReg(/^\{([0-9]+)\}/)) {
	          min = parseInt(res[1], 10);
	          quantifier = createQuantifier(min, min, res.range[0], res.range[1]);
	        } else if (res = matchReg(/^\{([0-9]+),\}/)) {
	          min = parseInt(res[1], 10);
	          quantifier = createQuantifier(min, undefined, res.range[0], res.range[1]);
	        } else if (res = matchReg(/^\{([0-9]+),([0-9]+)\}/)) {
	          min = parseInt(res[1], 10);
	          max = parseInt(res[2], 10);
	          if (min > max) {
	            throw SyntaxError('numbers out of order in {} quantifier');
	          }
	          quantifier = createQuantifier(min, max, res.range[0], res.range[1]);
	        }
	        if (quantifier) {
	          if (match('?')) {
	            quantifier.greedy = false;
	            quantifier.range[1] += 1;
	          }
	        }
	        return quantifier;
	      }
	      function parseAtom() {
	        var res;
	        if (res = matchReg(/^[^^$\\.*+?(){[|]/)) {
	          return createCharacter(res);
	        } else if (match('.')) {
	          return createDot();
	        } else if (match('\\')) {
	          res = parseAtomEscape();
	          if (!res) {
	            throw SyntaxError('atomEscape');
	          }
	          return res;
	        } else if (res = parseCharacterClass()) {
	          return res;
	        } else {
	          return parseGroup('(?:', 'ignore', '(', 'normal');
	        }
	      }
	      function parseUnicodeSurrogatePairEscape(firstEscape) {
	        if (hasUnicodeFlag) {
	          var first,
	              second;
	          if (firstEscape.kind == 'unicodeEscape' && (first = firstEscape.codePoint) >= 0xD800 && first <= 0xDBFF && current('\\') && next('u')) {
	            var prevPos = pos;
	            pos++;
	            var secondEscape = parseClassEscape();
	            if (secondEscape.kind == 'unicodeEscape' && (second = secondEscape.codePoint) >= 0xDC00 && second <= 0xDFFF) {
	              firstEscape.range[1] = secondEscape.range[1];
	              firstEscape.codePoint = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
	              firstEscape.type = 'value';
	              firstEscape.kind = 'unicodeCodePointEscape';
	              addRaw(firstEscape);
	            } else {
	              pos = prevPos;
	            }
	          }
	        }
	        return firstEscape;
	      }
	      function parseClassEscape() {
	        return parseAtomEscape(true);
	      }
	      function parseAtomEscape(insideCharacterClass) {
	        var res;
	        res = parseDecimalEscape();
	        if (res) {
	          return res;
	        }
	        if (insideCharacterClass) {
	          if (match('b')) {
	            return createEscaped('singleEscape', 0x0008, '\\b');
	          } else if (match('B')) {
	            throw SyntaxError('\\B not possible inside of CharacterClass');
	          }
	        }
	        res = parseCharacterEscape();
	        return res;
	      }
	      function parseDecimalEscape() {
	        var res,
	            match;
	        if (res = matchReg(/^(?!0)\d+/)) {
	          match = res[0];
	          var refIdx = parseInt(res[0], 10);
	          if (refIdx <= closedCaptureCounter) {
	            return createReference(res[0]);
	          } else {
	            incr(-res[0].length);
	            if (res = matchReg(/^[0-7]{1,3}/)) {
	              return createEscaped('octal', parseInt(res[0], 8), res[0], 1);
	            } else {
	              res = createCharacter(matchReg(/^[89]/));
	              return updateRawStart(res, res.range[0] - 1);
	            }
	          }
	        } else if (res = matchReg(/^[0-7]{1,3}/)) {
	          match = res[0];
	          if (/^0{1,3}$/.test(match)) {
	            return createEscaped('null', 0x0000, '0', match.length + 1);
	          } else {
	            return createEscaped('octal', parseInt(match, 8), match, 1);
	          }
	        } else if (res = matchReg(/^[dDsSwW]/)) {
	          return createCharacterClassEscape(res[0]);
	        }
	        return false;
	      }
	      function parseCharacterEscape() {
	        var res;
	        if (res = matchReg(/^[fnrtv]/)) {
	          var codePoint = 0;
	          switch (res[0]) {
	            case 't':
	              codePoint = 0x009;
	              break;
	            case 'n':
	              codePoint = 0x00A;
	              break;
	            case 'v':
	              codePoint = 0x00B;
	              break;
	            case 'f':
	              codePoint = 0x00C;
	              break;
	            case 'r':
	              codePoint = 0x00D;
	              break;
	          }
	          return createEscaped('singleEscape', codePoint, '\\' + res[0]);
	        } else if (res = matchReg(/^c([a-zA-Z])/)) {
	          return createEscaped('controlLetter', res[1].charCodeAt(0) % 32, res[1], 2);
	        } else if (res = matchReg(/^x([0-9a-fA-F]{2})/)) {
	          return createEscaped('hexadecimalEscape', parseInt(res[1], 16), res[1], 2);
	        } else if (res = matchReg(/^u([0-9a-fA-F]{4})/)) {
	          return parseUnicodeSurrogatePairEscape(createEscaped('unicodeEscape', parseInt(res[1], 16), res[1], 2));
	        } else if (hasUnicodeFlag && (res = matchReg(/^u\{([0-9a-fA-F]{1,})\}/))) {
	          return createEscaped('unicodeCodePointEscape', parseInt(res[1], 16), res[1], 4);
	        } else {
	          return parseIdentityEscape();
	        }
	      }
	      function isIdentifierPart(ch) {
	        var NonAsciiIdentifierPart = new RegExp('[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B2\u08E4-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA69D\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2D\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]');
	        return (ch === 36) || (ch === 95) || (ch >= 65 && ch <= 90) || (ch >= 97 && ch <= 122) || (ch >= 48 && ch <= 57) || (ch === 92) || ((ch >= 0x80) && NonAsciiIdentifierPart.test(String.fromCharCode(ch)));
	      }
	      function parseIdentityEscape() {
	        var ZWJ = '\u200C';
	        var ZWNJ = '\u200D';
	        var res;
	        var tmp;
	        if (!isIdentifierPart(lookahead())) {
	          tmp = incr();
	          return createEscaped('identifier', tmp.charCodeAt(0), tmp, 1);
	        }
	        if (match(ZWJ)) {
	          return createEscaped('identifier', 0x200C, ZWJ);
	        } else if (match(ZWNJ)) {
	          return createEscaped('identifier', 0x200D, ZWNJ);
	        }
	        return null;
	      }
	      function parseCharacterClass() {
	        var res,
	            from = pos;
	        if (res = matchReg(/^\[\^/)) {
	          res = parseClassRanges();
	          skip(']');
	          return createCharacterClass(res, true, from, pos);
	        } else if (match('[')) {
	          res = parseClassRanges();
	          skip(']');
	          return createCharacterClass(res, false, from, pos);
	        }
	        return null;
	      }
	      function parseClassRanges() {
	        var res;
	        if (current(']')) {
	          return [];
	        } else {
	          res = parseNonemptyClassRanges();
	          if (!res) {
	            throw SyntaxError('nonEmptyClassRanges');
	          }
	          return res;
	        }
	      }
	      function parseHelperClassRanges(atom) {
	        var from,
	            to,
	            res;
	        if (current('-') && !next(']')) {
	          skip('-');
	          res = parseClassAtom();
	          if (!res) {
	            throw SyntaxError('classAtom');
	          }
	          to = pos;
	          var classRanges = parseClassRanges();
	          if (!classRanges) {
	            throw SyntaxError('classRanges');
	          }
	          from = atom.range[0];
	          if (classRanges.type === 'empty') {
	            return [createClassRange(atom, res, from, to)];
	          }
	          return [createClassRange(atom, res, from, to)].concat(classRanges);
	        }
	        res = parseNonemptyClassRangesNoDash();
	        if (!res) {
	          throw SyntaxError('nonEmptyClassRangesNoDash');
	        }
	        return [atom].concat(res);
	      }
	      function parseNonemptyClassRanges() {
	        var atom = parseClassAtom();
	        if (!atom) {
	          throw SyntaxError('classAtom');
	        }
	        if (current(']')) {
	          return [atom];
	        }
	        return parseHelperClassRanges(atom);
	      }
	      function parseNonemptyClassRangesNoDash() {
	        var res = parseClassAtom();
	        if (!res) {
	          throw SyntaxError('classAtom');
	        }
	        if (current(']')) {
	          return res;
	        }
	        return parseHelperClassRanges(res);
	      }
	      function parseClassAtom() {
	        if (match('-')) {
	          return createCharacter('-');
	        } else {
	          return parseClassAtomNoDash();
	        }
	      }
	      function parseClassAtomNoDash() {
	        var res;
	        if (res = matchReg(/^[^\\\]-]/)) {
	          return createCharacter(res[0]);
	        } else if (match('\\')) {
	          res = parseClassEscape();
	          if (!res) {
	            throw SyntaxError('classEscape');
	          }
	          return parseUnicodeSurrogatePairEscape(res);
	        }
	      }
	      str = String(str);
	      if (str === '') {
	        str = '(?:)';
	      }
	      var result = parseDisjunction();
	      if (result.range[1] !== str.length) {
	        throw SyntaxError('Could not parse entire input - got stuck: ' + str);
	      }
	      return result;
	    }
	    ;
	    var regjsparser = {parse: parse};
	    if (typeof module !== 'undefined' && module.exports) {
	      module.exports = regjsparser;
	    } else {
	      window.regjsparser = regjsparser;
	    }
	  }());
	  modules['regjsparser'] = module.exports || window.regjsparser;
	  modules['./data/iu-mappings.json'] = ({
	    "75": 8490,
	    "83": 383,
	    "107": 8490,
	    "115": 383,
	    "181": 924,
	    "197": 8491,
	    "383": 83,
	    "452": 453,
	    "453": 452,
	    "455": 456,
	    "456": 455,
	    "458": 459,
	    "459": 458,
	    "497": 498,
	    "498": 497,
	    "837": 8126,
	    "914": 976,
	    "917": 1013,
	    "920": 1012,
	    "921": 8126,
	    "922": 1008,
	    "924": 181,
	    "928": 982,
	    "929": 1009,
	    "931": 962,
	    "934": 981,
	    "937": 8486,
	    "962": 931,
	    "976": 914,
	    "977": 1012,
	    "981": 934,
	    "982": 928,
	    "1008": 922,
	    "1009": 929,
	    "1012": [920, 977],
	    "1013": 917,
	    "7776": 7835,
	    "7835": 7776,
	    "8126": [837, 921],
	    "8486": 937,
	    "8490": 75,
	    "8491": 197,
	    "66560": 66600,
	    "66561": 66601,
	    "66562": 66602,
	    "66563": 66603,
	    "66564": 66604,
	    "66565": 66605,
	    "66566": 66606,
	    "66567": 66607,
	    "66568": 66608,
	    "66569": 66609,
	    "66570": 66610,
	    "66571": 66611,
	    "66572": 66612,
	    "66573": 66613,
	    "66574": 66614,
	    "66575": 66615,
	    "66576": 66616,
	    "66577": 66617,
	    "66578": 66618,
	    "66579": 66619,
	    "66580": 66620,
	    "66581": 66621,
	    "66582": 66622,
	    "66583": 66623,
	    "66584": 66624,
	    "66585": 66625,
	    "66586": 66626,
	    "66587": 66627,
	    "66588": 66628,
	    "66589": 66629,
	    "66590": 66630,
	    "66591": 66631,
	    "66592": 66632,
	    "66593": 66633,
	    "66594": 66634,
	    "66595": 66635,
	    "66596": 66636,
	    "66597": 66637,
	    "66598": 66638,
	    "66599": 66639,
	    "66600": 66560,
	    "66601": 66561,
	    "66602": 66562,
	    "66603": 66563,
	    "66604": 66564,
	    "66605": 66565,
	    "66606": 66566,
	    "66607": 66567,
	    "66608": 66568,
	    "66609": 66569,
	    "66610": 66570,
	    "66611": 66571,
	    "66612": 66572,
	    "66613": 66573,
	    "66614": 66574,
	    "66615": 66575,
	    "66616": 66576,
	    "66617": 66577,
	    "66618": 66578,
	    "66619": 66579,
	    "66620": 66580,
	    "66621": 66581,
	    "66622": 66582,
	    "66623": 66583,
	    "66624": 66584,
	    "66625": 66585,
	    "66626": 66586,
	    "66627": 66587,
	    "66628": 66588,
	    "66629": 66589,
	    "66630": 66590,
	    "66631": 66591,
	    "66632": 66592,
	    "66633": 66593,
	    "66634": 66594,
	    "66635": 66595,
	    "66636": 66596,
	    "66637": 66597,
	    "66638": 66598,
	    "66639": 66599,
	    "71840": 71872,
	    "71841": 71873,
	    "71842": 71874,
	    "71843": 71875,
	    "71844": 71876,
	    "71845": 71877,
	    "71846": 71878,
	    "71847": 71879,
	    "71848": 71880,
	    "71849": 71881,
	    "71850": 71882,
	    "71851": 71883,
	    "71852": 71884,
	    "71853": 71885,
	    "71854": 71886,
	    "71855": 71887,
	    "71856": 71888,
	    "71857": 71889,
	    "71858": 71890,
	    "71859": 71891,
	    "71860": 71892,
	    "71861": 71893,
	    "71862": 71894,
	    "71863": 71895,
	    "71864": 71896,
	    "71865": 71897,
	    "71866": 71898,
	    "71867": 71899,
	    "71868": 71900,
	    "71869": 71901,
	    "71870": 71902,
	    "71871": 71903,
	    "71872": 71840,
	    "71873": 71841,
	    "71874": 71842,
	    "71875": 71843,
	    "71876": 71844,
	    "71877": 71845,
	    "71878": 71846,
	    "71879": 71847,
	    "71880": 71848,
	    "71881": 71849,
	    "71882": 71850,
	    "71883": 71851,
	    "71884": 71852,
	    "71885": 71853,
	    "71886": 71854,
	    "71887": 71855,
	    "71888": 71856,
	    "71889": 71857,
	    "71890": 71858,
	    "71891": 71859,
	    "71892": 71860,
	    "71893": 71861,
	    "71894": 71862,
	    "71895": 71863,
	    "71896": 71864,
	    "71897": 71865,
	    "71898": 71866,
	    "71899": 71867,
	    "71900": 71868,
	    "71901": 71869,
	    "71902": 71870,
	    "71903": 71871
	  });
	  var regenerate = require('regenerate');
	  exports.REGULAR = {
	    'd': regenerate().addRange(0x30, 0x39),
	    'D': regenerate().addRange(0x0, 0x2F).addRange(0x3A, 0xFFFF),
	    's': regenerate(0x20, 0xA0, 0x1680, 0x180E, 0x202F, 0x205F, 0x3000, 0xFEFF).addRange(0x9, 0xD).addRange(0x2000, 0x200A).addRange(0x2028, 0x2029),
	    'S': regenerate().addRange(0x0, 0x8).addRange(0xE, 0x1F).addRange(0x21, 0x9F).addRange(0xA1, 0x167F).addRange(0x1681, 0x180D).addRange(0x180F, 0x1FFF).addRange(0x200B, 0x2027).addRange(0x202A, 0x202E).addRange(0x2030, 0x205E).addRange(0x2060, 0x2FFF).addRange(0x3001, 0xFEFE).addRange(0xFF00, 0xFFFF),
	    'w': regenerate(0x5F).addRange(0x30, 0x39).addRange(0x41, 0x5A).addRange(0x61, 0x7A),
	    'W': regenerate(0x60).addRange(0x0, 0x2F).addRange(0x3A, 0x40).addRange(0x5B, 0x5E).addRange(0x7B, 0xFFFF)
	  };
	  exports.UNICODE = {
	    'd': regenerate().addRange(0x30, 0x39),
	    'D': regenerate().addRange(0x0, 0x2F).addRange(0x3A, 0x10FFFF),
	    's': regenerate(0x20, 0xA0, 0x1680, 0x180E, 0x202F, 0x205F, 0x3000, 0xFEFF).addRange(0x9, 0xD).addRange(0x2000, 0x200A).addRange(0x2028, 0x2029),
	    'S': regenerate().addRange(0x0, 0x8).addRange(0xE, 0x1F).addRange(0x21, 0x9F).addRange(0xA1, 0x167F).addRange(0x1681, 0x180D).addRange(0x180F, 0x1FFF).addRange(0x200B, 0x2027).addRange(0x202A, 0x202E).addRange(0x2030, 0x205E).addRange(0x2060, 0x2FFF).addRange(0x3001, 0xFEFE).addRange(0xFF00, 0x10FFFF),
	    'w': regenerate(0x5F).addRange(0x30, 0x39).addRange(0x41, 0x5A).addRange(0x61, 0x7A),
	    'W': regenerate(0x60).addRange(0x0, 0x2F).addRange(0x3A, 0x40).addRange(0x5B, 0x5E).addRange(0x7B, 0x10FFFF)
	  };
	  exports.UNICODE_IGNORE_CASE = {
	    'd': regenerate().addRange(0x30, 0x39),
	    'D': regenerate().addRange(0x0, 0x2F).addRange(0x3A, 0x10FFFF),
	    's': regenerate(0x20, 0xA0, 0x1680, 0x180E, 0x202F, 0x205F, 0x3000, 0xFEFF).addRange(0x9, 0xD).addRange(0x2000, 0x200A).addRange(0x2028, 0x2029),
	    'S': regenerate().addRange(0x0, 0x8).addRange(0xE, 0x1F).addRange(0x21, 0x9F).addRange(0xA1, 0x167F).addRange(0x1681, 0x180D).addRange(0x180F, 0x1FFF).addRange(0x200B, 0x2027).addRange(0x202A, 0x202E).addRange(0x2030, 0x205E).addRange(0x2060, 0x2FFF).addRange(0x3001, 0xFEFE).addRange(0xFF00, 0x10FFFF),
	    'w': regenerate(0x5F, 0x17F, 0x212A).addRange(0x30, 0x39).addRange(0x41, 0x5A).addRange(0x61, 0x7A),
	    'W': regenerate(0x4B, 0x53, 0x60).addRange(0x0, 0x2F).addRange(0x3A, 0x40).addRange(0x5B, 0x5E).addRange(0x7B, 0x10FFFF)
	  };
	  modules['./data/character-class-escape-sets.js'] = {
	    REGULAR: exports.REGULAR,
	    UNICODE: exports.UNICODE,
	    UNICODE_IGNORE_CASE: exports.UNICODE_IGNORE_CASE
	  };
	  var generate = require('regjsgen').generate;
	  var parse = require('regjsparser').parse;
	  var regenerate = require('regenerate');
	  var iuMappings = require('./data/iu-mappings.json');
	  var ESCAPE_SETS = require('./data/character-class-escape-sets.js');
	  function getCharacterClassEscapeSet(character) {
	    if (unicode) {
	      if (ignoreCase) {
	        return ESCAPE_SETS.UNICODE_IGNORE_CASE[character];
	      }
	      return ESCAPE_SETS.UNICODE[character];
	    }
	    return ESCAPE_SETS.REGULAR[character];
	  }
	  var object = {};
	  var hasOwnProperty = object.hasOwnProperty;
	  function has(object, property) {
	    return hasOwnProperty.call(object, property);
	  }
	  var UNICODE_SET = regenerate().addRange(0x0, 0x10FFFF);
	  var BMP_SET = regenerate().addRange(0x0, 0xFFFF);
	  var DOT_SET_UNICODE = UNICODE_SET.clone().remove(0x000A, 0x000D, 0x2028, 0x2029);
	  var DOT_SET = DOT_SET_UNICODE.clone().intersection(BMP_SET);
	  regenerate.prototype.iuAddRange = function(min, max) {
	    var $this = this;
	    do {
	      var folded = caseFold(min);
	      if (folded) {
	        $this.add(folded);
	      }
	    } while (++min <= max);
	    return $this;
	  };
	  function assign(target, source) {
	    for (var key in source) {
	      target[key] = source[key];
	    }
	  }
	  function update(item, pattern) {
	    var tree = parse(pattern, '');
	    switch (tree.type) {
	      case 'characterClass':
	      case 'group':
	      case 'value':
	        break;
	      default:
	        tree = wrap(tree, pattern);
	    }
	    assign(item, tree);
	  }
	  function wrap(tree, pattern) {
	    return {
	      'type': 'group',
	      'behavior': 'ignore',
	      'body': [tree],
	      'raw': '(?:' + pattern + ')'
	    };
	  }
	  function caseFold(codePoint) {
	    return has(iuMappings, codePoint) ? iuMappings[codePoint] : false;
	  }
	  var ignoreCase = false;
	  var unicode = false;
	  function processCharacterClass(characterClassItem) {
	    var set = regenerate();
	    var body = characterClassItem.body.forEach(function(item) {
	      switch (item.type) {
	        case 'value':
	          set.add(item.codePoint);
	          if (ignoreCase && unicode) {
	            var folded = caseFold(item.codePoint);
	            if (folded) {
	              set.add(folded);
	            }
	          }
	          break;
	        case 'characterClassRange':
	          var min = item.min.codePoint;
	          var max = item.max.codePoint;
	          set.addRange(min, max);
	          if (ignoreCase && unicode) {
	            set.iuAddRange(min, max);
	          }
	          break;
	        case 'characterClassEscape':
	          set.add(getCharacterClassEscapeSet(item.value));
	          break;
	        default:
	          throw Error('Unknown term type: ' + item.type);
	      }
	    });
	    if (characterClassItem.negative) {
	      set = (unicode ? UNICODE_SET : BMP_SET).clone().remove(set);
	    }
	    update(characterClassItem, set.toString());
	    return characterClassItem;
	  }
	  function processTerm(item) {
	    switch (item.type) {
	      case 'dot':
	        update(item, (unicode ? DOT_SET_UNICODE : DOT_SET).toString());
	        break;
	      case 'characterClass':
	        item = processCharacterClass(item);
	        break;
	      case 'characterClassEscape':
	        update(item, getCharacterClassEscapeSet(item.value).toString());
	        break;
	      case 'alternative':
	      case 'disjunction':
	      case 'group':
	      case 'quantifier':
	        item.body = item.body.map(processTerm);
	        break;
	      case 'value':
	        var codePoint = item.codePoint;
	        var set = regenerate(codePoint);
	        if (ignoreCase && unicode) {
	          var folded = caseFold(codePoint);
	          if (folded) {
	            set.add(folded);
	          }
	        }
	        update(item, set.toString());
	        break;
	      case 'anchor':
	      case 'empty':
	      case 'group':
	      case 'reference':
	        break;
	      default:
	        throw Error('Unknown term type: ' + item.type);
	    }
	    return item;
	  }
	  ;
	  module.exports = function(pattern, flags) {
	    var tree = parse(pattern, flags);
	    ignoreCase = flags ? flags.indexOf('i') > -1 : false;
	    unicode = flags ? flags.indexOf('u') > -1 : false;
	    assign(tree, processTerm(tree));
	    return generate(tree);
	  };
	  var regexpuRewritePattern = module.exports;
	  return {get regexpuRewritePattern() {
	      return regexpuRewritePattern;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/RegularExpressionTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/RegularExpressionTransformer.js";
	  var ParseTreeTransformer = System.get("traceur@0.0.87/src/codegeneration/ParseTreeTransformer.js").ParseTreeTransformer;
	  var LiteralExpression = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js").LiteralExpression;
	  var LiteralToken = System.get("traceur@0.0.87/src/syntax/LiteralToken.js").LiteralToken;
	  var REGULAR_EXPRESSION = System.get("traceur@0.0.87/src/syntax/TokenType.js").REGULAR_EXPRESSION;
	  var regexpuRewritePattern = System.get("traceur@0.0.87/src/outputgeneration/regexpuRewritePattern.js").regexpuRewritePattern;
	  var RegularExpressionTransformer = function RegularExpressionTransformer() {
	    $traceurRuntime.superConstructor($RegularExpressionTransformer).apply(this, arguments);
	    ;
	  };
	  var $RegularExpressionTransformer = RegularExpressionTransformer;
	  ($traceurRuntime.createClass)(RegularExpressionTransformer, {transformLiteralExpression: function(tree) {
	      var token = tree.literalToken;
	      if (token.type === REGULAR_EXPRESSION) {
	        var value = token.value;
	        var lastIndex = value.lastIndexOf('/');
	        var pattern = value.slice(1, lastIndex);
	        var flags = value.slice(lastIndex + 1);
	        if (flags.indexOf('u') !== -1) {
	          var result = '/' + regexpuRewritePattern(pattern, flags) + '/' + flags.replace('u', '');
	          return new LiteralExpression(tree.location, new LiteralToken(REGULAR_EXPRESSION, result, token.location));
	        }
	      }
	      return tree;
	    }}, {}, ParseTreeTransformer);
	  return {get RegularExpressionTransformer() {
	      return RegularExpressionTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/RestParameterTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/RestParameterTransformer.js";
	  var $__0 = Object.freeze(Object.defineProperties(["\n            for (var ", " = [], ", " = ", ";\n                 ", " < arguments.length; ", "++)\n              ", "[", " - ", "] = arguments[", "];"], {raw: {value: Object.freeze(["\n            for (var ", " = [], ", " = ", ";\n                 ", " < arguments.length; ", "++)\n              ", "[", " - ", "] = arguments[", "];"])}})),
	      $__1 = Object.freeze(Object.defineProperties(["\n            for (var ", " = [], ", " = 0;\n                 ", " < arguments.length; ", "++)\n              ", "[", "] = arguments[", "];"], {raw: {value: Object.freeze(["\n            for (var ", " = [], ", " = 0;\n                 ", " < arguments.length; ", "++)\n              ", "[", "] = arguments[", "];"])}}));
	  var FormalParameterList = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js").FormalParameterList;
	  var ParameterTransformer = System.get("traceur@0.0.87/src/codegeneration/ParameterTransformer.js").ParameterTransformer;
	  var createIdentifierToken = System.get("traceur@0.0.87/src/codegeneration/ParseTreeFactory.js").createIdentifierToken;
	  var parseStatement = System.get("traceur@0.0.87/src/codegeneration/PlaceholderParser.js").parseStatement;
	  function hasRestParameter(parameterList) {
	    var parameters = parameterList.parameters;
	    return parameters.length > 0 && parameters[parameters.length - 1].isRestParameter();
	  }
	  function getRestParameterLiteralToken(parameterList) {
	    var parameters = parameterList.parameters;
	    return parameters[parameters.length - 1].parameter.identifier.identifierToken;
	  }
	  var RestParameterTransformer = function RestParameterTransformer() {
	    $traceurRuntime.superConstructor($RestParameterTransformer).apply(this, arguments);
	    ;
	  };
	  var $RestParameterTransformer = RestParameterTransformer;
	  ($traceurRuntime.createClass)(RestParameterTransformer, {
	    transformFormalParameterList: function(tree) {
	      var transformed = $traceurRuntime.superGet(this, $RestParameterTransformer.prototype, "transformFormalParameterList").call(this, tree);
	      if (hasRestParameter(transformed)) {
	        var parametersWithoutRestParam = new FormalParameterList(transformed.location, transformed.parameters.slice(0, -1));
	        var startIndex = transformed.parameters.length - 1;
	        var i = createIdentifierToken(this.getTempIdentifier());
	        var name = getRestParameterLiteralToken(transformed);
	        var loop;
	        if (startIndex) {
	          loop = parseStatement($__0, name, i, startIndex, i, i, name, i, startIndex, i);
	        } else {
	          loop = parseStatement($__1, name, i, i, i, name, i, i);
	        }
	        this.parameterStatements.push(loop);
	        return parametersWithoutRestParam;
	      }
	      return transformed;
	    },
	    transformConstructorType: function(tree) {
	      return tree;
	    },
	    transformFunctionType: function(tree) {
	      return tree;
	    }
	  }, {}, ParameterTransformer);
	  return {get RestParameterTransformer() {
	      return RestParameterTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/SpreadTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/SpreadTransformer.js";
	  var $__0 = Object.freeze(Object.defineProperties(["$traceurRuntime.spread(", ")"], {raw: {value: Object.freeze(["$traceurRuntime.spread(", ")"])}}));
	  var $__1 = System.get("traceur@0.0.87/src/syntax/PredefinedName.js"),
	      APPLY = $__1.APPLY,
	      BIND = $__1.BIND,
	      FUNCTION = $__1.FUNCTION,
	      PROTOTYPE = $__1.PROTOTYPE;
	  var $__2 = System.get("traceur@0.0.87/src/syntax/trees/ParseTreeType.js"),
	      MEMBER_EXPRESSION = $__2.MEMBER_EXPRESSION,
	      MEMBER_LOOKUP_EXPRESSION = $__2.MEMBER_LOOKUP_EXPRESSION,
	      SPREAD_EXPRESSION = $__2.SPREAD_EXPRESSION;
	  var TempVarTransformer = System.get("traceur@0.0.87/src/codegeneration/TempVarTransformer.js").TempVarTransformer;
	  var $__4 = System.get("traceur@0.0.87/src/codegeneration/ParseTreeFactory.js"),
	      createArgumentList = $__4.createArgumentList,
	      createArrayLiteralExpression = $__4.createArrayLiteralExpression,
	      createAssignmentExpression = $__4.createAssignmentExpression,
	      createCallExpression = $__4.createCallExpression,
	      createEmptyArgumentList = $__4.createEmptyArgumentList,
	      createIdentifierExpression = $__4.createIdentifierExpression,
	      createMemberExpression = $__4.createMemberExpression,
	      createMemberLookupExpression = $__4.createMemberLookupExpression,
	      createNewExpression = $__4.createNewExpression,
	      createNullLiteral = $__4.createNullLiteral,
	      createParenExpression = $__4.createParenExpression,
	      createVoid0 = $__4.createVoid0;
	  var parseExpression = System.get("traceur@0.0.87/src/codegeneration/PlaceholderParser.js").parseExpression;
	  function hasSpreadMember(trees) {
	    return trees.some((function(tree) {
	      return tree && tree.type === SPREAD_EXPRESSION;
	    }));
	  }
	  var SpreadTransformer = function SpreadTransformer() {
	    $traceurRuntime.superConstructor($SpreadTransformer).apply(this, arguments);
	    ;
	  };
	  var $SpreadTransformer = SpreadTransformer;
	  ($traceurRuntime.createClass)(SpreadTransformer, {
	    createArrayFromElements_: function(elements) {
	      var length = elements.length;
	      var args = [];
	      var lastArray;
	      for (var i = 0; i < length; i++) {
	        if (elements[i] && elements[i].type === SPREAD_EXPRESSION) {
	          if (lastArray) {
	            args.push(createArrayLiteralExpression(lastArray));
	            lastArray = null;
	          }
	          args.push(this.transformAny(elements[i].expression));
	        } else {
	          if (!lastArray)
	            lastArray = [];
	          lastArray.push(this.transformAny(elements[i]));
	        }
	      }
	      if (lastArray)
	        args.push(createArrayLiteralExpression(lastArray));
	      return parseExpression($__0, createArgumentList(args));
	    },
	    desugarCallSpread_: function(tree) {
	      var operand = this.transformAny(tree.operand);
	      var functionObject,
	          contextObject;
	      this.pushTempScope();
	      if (operand.type === MEMBER_EXPRESSION) {
	        var tempIdent = createIdentifierExpression(this.addTempVar());
	        var parenExpression = createParenExpression(createAssignmentExpression(tempIdent, operand.operand));
	        var memberName = operand.memberName;
	        contextObject = tempIdent;
	        functionObject = createMemberExpression(parenExpression, memberName);
	      } else if (tree.operand.type === MEMBER_LOOKUP_EXPRESSION) {
	        var tempIdent$__7 = createIdentifierExpression(this.addTempVar());
	        var parenExpression$__8 = createParenExpression(createAssignmentExpression(tempIdent$__7, operand.operand));
	        var memberExpression = this.transformAny(operand.memberExpression);
	        contextObject = tempIdent$__7;
	        functionObject = createMemberLookupExpression(parenExpression$__8, memberExpression);
	      } else {
	        contextObject = createVoid0();
	        functionObject = operand;
	      }
	      this.popTempScope();
	      var arrayExpression = this.createArrayFromElements_(tree.args.args);
	      return createCallExpression(createMemberExpression(functionObject, APPLY), createArgumentList([contextObject, arrayExpression]));
	    },
	    desugarNewSpread_: function(tree) {
	      var arrayExpression = $traceurRuntime.spread([createNullLiteral()], tree.args.args);
	      arrayExpression = this.createArrayFromElements_(arrayExpression);
	      return createNewExpression(createParenExpression(createCallExpression(createMemberExpression(FUNCTION, PROTOTYPE, BIND, APPLY), createArgumentList([this.transformAny(tree.operand), arrayExpression]))), createEmptyArgumentList());
	    },
	    transformArrayLiteralExpression: function(tree) {
	      if (hasSpreadMember(tree.elements)) {
	        return this.createArrayFromElements_(tree.elements);
	      }
	      return $traceurRuntime.superGet(this, $SpreadTransformer.prototype, "transformArrayLiteralExpression").call(this, tree);
	    },
	    transformCallExpression: function(tree) {
	      if (hasSpreadMember(tree.args.args)) {
	        return this.desugarCallSpread_(tree);
	      }
	      return $traceurRuntime.superGet(this, $SpreadTransformer.prototype, "transformCallExpression").call(this, tree);
	    },
	    transformNewExpression: function(tree) {
	      if (tree.args !== null && hasSpreadMember(tree.args.args)) {
	        return this.desugarNewSpread_(tree);
	      }
	      return $traceurRuntime.superGet(this, $SpreadTransformer.prototype, "transformNewExpression").call(this, tree);
	    }
	  }, {}, TempVarTransformer);
	  return {get SpreadTransformer() {
	      return SpreadTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/SymbolTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/SymbolTransformer.js";
	  var $__0 = Object.freeze(Object.defineProperties(["$traceurRuntime.options.symbols = true"], {raw: {value: Object.freeze(["$traceurRuntime.options.symbols = true"])}})),
	      $__1 = Object.freeze(Object.defineProperties(["$traceurRuntime.toProperty(", ") in ", ""], {raw: {value: Object.freeze(["$traceurRuntime.toProperty(", ") in ", ""])}})),
	      $__2 = Object.freeze(Object.defineProperties(["", "[$traceurRuntime.toProperty(", ")]"], {raw: {value: Object.freeze(["", "[$traceurRuntime.toProperty(", ")]"])}})),
	      $__3 = Object.freeze(Object.defineProperties(["(typeof ", " === 'undefined' ?\n          'undefined' : ", ")"], {raw: {value: Object.freeze(["(typeof ", " === 'undefined' ?\n          'undefined' : ", ")"])}})),
	      $__4 = Object.freeze(Object.defineProperties(["$traceurRuntime.typeof(", ")"], {raw: {value: Object.freeze(["$traceurRuntime.typeof(", ")"])}})),
	      $__5 = Object.freeze(Object.defineProperties(["if (!$traceurRuntime.isSymbolString(", ")) ", ""], {raw: {value: Object.freeze(["if (!$traceurRuntime.isSymbolString(", ")) ", ""])}}));
	  var $__6 = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js"),
	      BinaryExpression = $__6.BinaryExpression,
	      MemberLookupExpression = $__6.MemberLookupExpression,
	      Module = $__6.Module,
	      ForInStatement = $__6.ForInStatement,
	      Script = $__6.Script,
	      UnaryExpression = $__6.UnaryExpression;
	  var ExplodeExpressionTransformer = System.get("traceur@0.0.87/src/codegeneration/ExplodeExpressionTransformer.js").ExplodeExpressionTransformer;
	  var $__8 = System.get("traceur@0.0.87/src/syntax/trees/ParseTreeType.js"),
	      IDENTIFIER_EXPRESSION = $__8.IDENTIFIER_EXPRESSION,
	      LITERAL_EXPRESSION = $__8.LITERAL_EXPRESSION,
	      UNARY_EXPRESSION = $__8.UNARY_EXPRESSION,
	      VARIABLE_DECLARATION_LIST = $__8.VARIABLE_DECLARATION_LIST;
	  var TempVarTransformer = System.get("traceur@0.0.87/src/codegeneration/TempVarTransformer.js").TempVarTransformer;
	  var $__10 = System.get("traceur@0.0.87/src/syntax/TokenType.js"),
	      EQUAL_EQUAL = $__10.EQUAL_EQUAL,
	      EQUAL_EQUAL_EQUAL = $__10.EQUAL_EQUAL_EQUAL,
	      IN = $__10.IN,
	      NOT_EQUAL = $__10.NOT_EQUAL,
	      NOT_EQUAL_EQUAL = $__10.NOT_EQUAL_EQUAL,
	      STRING = $__10.STRING,
	      TYPEOF = $__10.TYPEOF;
	  var $__11 = System.get("traceur@0.0.87/src/codegeneration/PlaceholderParser.js"),
	      parseExpression = $__11.parseExpression,
	      parseStatement = $__11.parseStatement;
	  var prependStatements = System.get("traceur@0.0.87/src/codegeneration/PrependStatements.js").prependStatements;
	  var ExplodeSymbolExpression = function ExplodeSymbolExpression() {
	    $traceurRuntime.superConstructor($ExplodeSymbolExpression).apply(this, arguments);
	    ;
	  };
	  var $ExplodeSymbolExpression = ExplodeSymbolExpression;
	  ($traceurRuntime.createClass)(ExplodeSymbolExpression, {
	    transformArrowFunctionExpression: function(tree) {
	      return tree;
	    },
	    transformClassExpression: function(tree) {
	      return tree;
	    },
	    transformFunctionBody: function(tree) {
	      return tree;
	    }
	  }, {}, ExplodeExpressionTransformer);
	  function isEqualityExpression(tree) {
	    switch (tree.operator.type) {
	      case EQUAL_EQUAL:
	      case EQUAL_EQUAL_EQUAL:
	      case NOT_EQUAL:
	      case NOT_EQUAL_EQUAL:
	        return true;
	    }
	    return false;
	  }
	  function isTypeof(tree) {
	    return tree.type === UNARY_EXPRESSION && tree.operator.type === TYPEOF;
	  }
	  function isSafeTypeofString(tree) {
	    if (tree.type !== LITERAL_EXPRESSION)
	      return false;
	    var value = tree.literalToken.processedValue;
	    switch (value) {
	      case 'symbol':
	      case 'object':
	        return false;
	    }
	    return true;
	  }
	  var runtimeOption = parseStatement($__0);
	  var SymbolTransformer = function SymbolTransformer() {
	    $traceurRuntime.superConstructor($SymbolTransformer).apply(this, arguments);
	    ;
	  };
	  var $SymbolTransformer = SymbolTransformer;
	  ($traceurRuntime.createClass)(SymbolTransformer, {
	    transformModule: function(tree) {
	      return new Module(tree.location, prependStatements(this.transformList(tree.scriptItemList), runtimeOption), this.moduleName_);
	    },
	    transformScript: function(tree) {
	      return new Script(tree.location, prependStatements(this.transformList(tree.scriptItemList), runtimeOption), this.moduleName_);
	    },
	    transformTypeofOperand_: function(tree) {
	      var operand = this.transformAny(tree.operand);
	      return new UnaryExpression(tree.location, tree.operator, operand);
	    },
	    transformBinaryExpression: function(tree) {
	      if (tree.operator.type === IN) {
	        var name = this.transformAny(tree.left);
	        var object = this.transformAny(tree.right);
	        if (name.type === LITERAL_EXPRESSION)
	          return new BinaryExpression(tree.location, name, tree.operator, object);
	        return parseExpression($__1, name, object);
	      }
	      if (isEqualityExpression(tree)) {
	        if (isTypeof(tree.left) && isSafeTypeofString(tree.right)) {
	          var left = this.transformTypeofOperand_(tree.left);
	          var right = tree.right;
	          return new BinaryExpression(tree.location, left, tree.operator, right);
	        }
	        if (isTypeof(tree.right) && isSafeTypeofString(tree.left)) {
	          var left$__14 = tree.left;
	          var right$__15 = this.transformTypeofOperand_(tree.right);
	          return new BinaryExpression(tree.location, left$__14, tree.operator, right$__15);
	        }
	      }
	      return $traceurRuntime.superGet(this, $SymbolTransformer.prototype, "transformBinaryExpression").call(this, tree);
	    },
	    transformMemberLookupExpression: function(tree) {
	      var operand = this.transformAny(tree.operand);
	      var memberExpression = this.transformAny(tree.memberExpression);
	      if (memberExpression.type === LITERAL_EXPRESSION && memberExpression.literalToken.type !== STRING) {
	        return new MemberLookupExpression(tree.location, operand, memberExpression);
	      }
	      return parseExpression($__2, operand, memberExpression);
	    },
	    transformUnaryExpression: function(tree) {
	      if (tree.operator.type !== TYPEOF)
	        return $traceurRuntime.superGet(this, $SymbolTransformer.prototype, "transformUnaryExpression").call(this, tree);
	      var operand = this.transformAny(tree.operand);
	      var expression = this.getRuntimeTypeof(operand);
	      if (operand.type === IDENTIFIER_EXPRESSION) {
	        return parseExpression($__3, operand, expression);
	      }
	      return expression;
	    },
	    getRuntimeTypeof: function(operand) {
	      return parseExpression($__4, operand);
	    },
	    transformForInStatement: function(tree) {
	      var initializer = this.transformAny(tree.initializer);
	      var collection = this.transformAny(tree.collection);
	      var body = this.transformAny(tree.body);
	      var initIdentToken;
	      if (initializer.type === VARIABLE_DECLARATION_LIST) {
	        initIdentToken = initializer.declarations[0].lvalue.identifierToken;
	      } else {
	        initIdentToken = initializer.identifierToken;
	      }
	      if (!initIdentToken) {
	        throw new Error('Not implemented');
	      }
	      body = parseStatement($__5, initIdentToken, body);
	      return new ForInStatement(tree.location, initializer, collection, body);
	    }
	  }, {}, TempVarTransformer);
	  return {get SymbolTransformer() {
	      return SymbolTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/TemplateLiteralTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/TemplateLiteralTransformer.js";
	  var $__0 = Object.freeze(Object.defineProperties(["Object.freeze(Object.defineProperties(", ", {\n    raw: {\n      value: Object.freeze(", ")\n    }\n  }))"], {raw: {value: Object.freeze(["Object.freeze(Object.defineProperties(", ", {\n    raw: {\n      value: Object.freeze(", ")\n    }\n  }))"])}}));
	  var $__1 = System.get("traceur@0.0.87/src/syntax/trees/ParseTreeType.js"),
	      BINARY_EXPRESSION = $__1.BINARY_EXPRESSION,
	      COMMA_EXPRESSION = $__1.COMMA_EXPRESSION,
	      CONDITIONAL_EXPRESSION = $__1.CONDITIONAL_EXPRESSION,
	      TEMPLATE_LITERAL_PORTION = $__1.TEMPLATE_LITERAL_PORTION;
	  var $__2 = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js"),
	      LiteralExpression = $__2.LiteralExpression,
	      ParenExpression = $__2.ParenExpression;
	  var LiteralToken = System.get("traceur@0.0.87/src/syntax/LiteralToken.js").LiteralToken;
	  var ParseTreeTransformer = System.get("traceur@0.0.87/src/codegeneration/ParseTreeTransformer.js").ParseTreeTransformer;
	  var TempVarTransformer = System.get("traceur@0.0.87/src/codegeneration/TempVarTransformer.js").TempVarTransformer;
	  var $__6 = System.get("traceur@0.0.87/src/syntax/TokenType.js"),
	      PERCENT = $__6.PERCENT,
	      PLUS = $__6.PLUS,
	      SLASH = $__6.SLASH,
	      STAR = $__6.STAR,
	      STRING = $__6.STRING;
	  var $__7 = System.get("traceur@0.0.87/src/codegeneration/ParseTreeFactory.js"),
	      createArgumentList = $__7.createArgumentList,
	      createArrayLiteralExpression = $__7.createArrayLiteralExpression,
	      createBinaryExpression = $__7.createBinaryExpression,
	      createCallExpression = $__7.createCallExpression,
	      createIdentifierExpression = $__7.createIdentifierExpression,
	      createOperatorToken = $__7.createOperatorToken,
	      createStringLiteral = $__7.createStringLiteral;
	  var parseExpression = System.get("traceur@0.0.87/src/codegeneration/PlaceholderParser.js").parseExpression;
	  function createCallSiteIdObject(tree) {
	    var elements = tree.elements;
	    var cooked = createCookedStringArray(elements);
	    var raw = createRawStringArray(elements);
	    return parseExpression($__0, cooked, raw);
	  }
	  function maybeAddEmptyStringAtEnd(elements, items) {
	    var length = elements.length;
	    if (!length || elements[length - 1].type !== TEMPLATE_LITERAL_PORTION)
	      items.push(createStringLiteral(''));
	  }
	  function createRawStringArray(elements) {
	    var items = [];
	    for (var i = 0; i < elements.length; i += 2) {
	      var str = elements[i].value.value;
	      str = str.replace(/\r\n?/g, '\n');
	      str = JSON.stringify(str);
	      str = replaceRaw(str);
	      var loc = elements[i].location;
	      var expr = new LiteralExpression(loc, new LiteralToken(STRING, str, loc));
	      items.push(expr);
	    }
	    maybeAddEmptyStringAtEnd(elements, items);
	    return createArrayLiteralExpression(items);
	  }
	  function createCookedStringLiteralExpression(tree) {
	    var str = cookString(tree.value.value);
	    var loc = tree.location;
	    return new LiteralExpression(loc, new LiteralToken(STRING, str, loc));
	  }
	  function createCookedStringArray(elements) {
	    var items = [];
	    for (var i = 0; i < elements.length; i += 2) {
	      items.push(createCookedStringLiteralExpression(elements[i]));
	    }
	    maybeAddEmptyStringAtEnd(elements, items);
	    return createArrayLiteralExpression(items);
	  }
	  function replaceRaw(s) {
	    return s.replace(/\u2028|\u2029/g, function(c) {
	      switch (c) {
	        case '\u2028':
	          return '\\u2028';
	        case '\u2029':
	          return '\\u2029';
	        default:
	          throw Error('Not reachable');
	      }
	    });
	  }
	  function cookString(s) {
	    var sb = ['"'];
	    var i = 0,
	        k = 1,
	        c,
	        c2;
	    while (i < s.length) {
	      c = s[i++];
	      switch (c) {
	        case '\\':
	          c2 = s[i++];
	          switch (c2) {
	            case '\n':
	            case '\u2028':
	            case '\u2029':
	              break;
	            case '\r':
	              if (s[i + 1] === '\n') {
	                i++;
	              }
	              break;
	            default:
	              sb[k++] = c;
	              sb[k++] = c2;
	          }
	          break;
	        case '"':
	          sb[k++] = '\\"';
	          break;
	        case '\n':
	          sb[k++] = '\\n';
	          break;
	        case '\r':
	          if (s[i] === '\n')
	            i++;
	          sb[k++] = '\\n';
	          break;
	        case '\t':
	          sb[k++] = '\\t';
	          break;
	        case '\f':
	          sb[k++] = '\\f';
	          break;
	        case '\b':
	          sb[k++] = '\\b';
	          break;
	        case '\u2028':
	          sb[k++] = '\\u2028';
	          break;
	        case '\u2029':
	          sb[k++] = '\\u2029';
	          break;
	        default:
	          sb[k++] = c;
	      }
	    }
	    sb[k++] = '"';
	    return sb.join('');
	  }
	  var TemplateLiteralTransformer = function TemplateLiteralTransformer() {
	    $traceurRuntime.superConstructor($TemplateLiteralTransformer).apply(this, arguments);
	    ;
	  };
	  var $TemplateLiteralTransformer = TemplateLiteralTransformer;
	  ($traceurRuntime.createClass)(TemplateLiteralTransformer, {
	    transformFunctionBody: function(tree) {
	      return ParseTreeTransformer.prototype.transformFunctionBody.call(this, tree);
	    },
	    transformTemplateLiteralExpression: function(tree) {
	      if (!tree.operand)
	        return this.createDefaultTemplateLiteral(tree);
	      var operand = this.transformAny(tree.operand);
	      var elements = tree.elements;
	      var callsiteIdObject = createCallSiteIdObject(tree);
	      var idName = this.addTempVar(callsiteIdObject);
	      var args = [createIdentifierExpression(idName)];
	      for (var i = 1; i < elements.length; i += 2) {
	        args.push(this.transformAny(elements[i]));
	      }
	      return createCallExpression(operand, createArgumentList(args));
	    },
	    transformTemplateSubstitution: function(tree) {
	      var transformedTree = this.transformAny(tree.expression);
	      switch (transformedTree.type) {
	        case BINARY_EXPRESSION:
	          switch (transformedTree.operator.type) {
	            case STAR:
	            case PERCENT:
	            case SLASH:
	              return transformedTree;
	          }
	        case COMMA_EXPRESSION:
	        case CONDITIONAL_EXPRESSION:
	          return new ParenExpression(null, transformedTree);
	      }
	      return transformedTree;
	    },
	    transformTemplateLiteralPortion: function(tree) {
	      return createCookedStringLiteralExpression(tree);
	    },
	    createDefaultTemplateLiteral: function(tree) {
	      var length = tree.elements.length;
	      if (length === 0) {
	        var loc = tree.location;
	        return new LiteralExpression(loc, new LiteralToken(STRING, '""', loc));
	      }
	      var firstNonEmpty = tree.elements[0].value.value === '' ? -1 : 0;
	      var binaryExpression = this.transformAny(tree.elements[0]);
	      if (length === 1)
	        return binaryExpression;
	      var plusToken = createOperatorToken(PLUS);
	      for (var i = 1; i < length; i++) {
	        var element = tree.elements[i];
	        if (element.type === TEMPLATE_LITERAL_PORTION) {
	          if (element.value.value === '')
	            continue;
	          else if (firstNonEmpty < 0 && i === 2)
	            binaryExpression = binaryExpression.right;
	        }
	        var transformedTree = this.transformAny(tree.elements[i]);
	        binaryExpression = createBinaryExpression(binaryExpression, plusToken, transformedTree);
	      }
	      return new ParenExpression(null, binaryExpression);
	    }
	  }, {}, TempVarTransformer);
	  return {get TemplateLiteralTransformer() {
	      return TemplateLiteralTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/TypeAssertionTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/TypeAssertionTransformer.js";
	  var $__0 = Object.freeze(Object.defineProperties(["assert.type(", ", ", ")"], {raw: {value: Object.freeze(["assert.type(", ", ", ")"])}})),
	      $__1 = Object.freeze(Object.defineProperties(["assert.argumentTypes(", ")"], {raw: {value: Object.freeze(["assert.argumentTypes(", ")"])}})),
	      $__2 = Object.freeze(Object.defineProperties(["return assert.returnType((", "), ", ")"], {raw: {value: Object.freeze(["return assert.returnType((", "), ", ")"])}})),
	      $__3 = Object.freeze(Object.defineProperties(["$traceurRuntime.type.any"], {raw: {value: Object.freeze(["$traceurRuntime.type.any"])}}));
	  var $__4 = System.get("traceur@0.0.87/src/syntax/trees/ParseTreeType.js"),
	      BINDING_ELEMENT = $__4.BINDING_ELEMENT,
	      REST_PARAMETER = $__4.REST_PARAMETER;
	  var $__5 = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js"),
	      ImportDeclaration = $__5.ImportDeclaration,
	      ImportSpecifier = $__5.ImportSpecifier,
	      ImportSpecifierSet = $__5.ImportSpecifierSet,
	      Module = $__5.Module,
	      ModuleSpecifier = $__5.ModuleSpecifier,
	      Script = $__5.Script,
	      VariableDeclaration = $__5.VariableDeclaration;
	  var $__6 = System.get("traceur@0.0.87/src/codegeneration/ParseTreeFactory.js"),
	      createArgumentList = $__6.createArgumentList,
	      createIdentifierExpression = $__6.createIdentifierExpression,
	      createImportedBinding = $__6.createImportedBinding,
	      createStringLiteralToken = $__6.createStringLiteralToken;
	  var $__7 = System.get("traceur@0.0.87/src/codegeneration/PlaceholderParser.js"),
	      parseExpression = $__7.parseExpression,
	      parseStatement = $__7.parseStatement;
	  var ParameterTransformer = System.get("traceur@0.0.87/src/codegeneration/ParameterTransformer.js").ParameterTransformer;
	  var TypeAssertionTransformer = function TypeAssertionTransformer(identifierGenerator, reporter, options) {
	    $traceurRuntime.superConstructor($TypeAssertionTransformer).call(this, identifierGenerator);
	    this.options_ = options;
	    this.returnTypeStack_ = [];
	    this.parametersStack_ = [];
	    this.assertionAdded_ = false;
	  };
	  var $TypeAssertionTransformer = TypeAssertionTransformer;
	  ($traceurRuntime.createClass)(TypeAssertionTransformer, {
	    transformScript: function(tree) {
	      return this.prependAssertionImport_($traceurRuntime.superGet(this, $TypeAssertionTransformer.prototype, "transformScript").call(this, tree), Script);
	    },
	    transformModule: function(tree) {
	      return this.prependAssertionImport_($traceurRuntime.superGet(this, $TypeAssertionTransformer.prototype, "transformModule").call(this, tree), Module);
	    },
	    transformVariableDeclaration: function(tree) {
	      if (tree.typeAnnotation && tree.initializer) {
	        var assert = parseExpression($__0, tree.initializer, tree.typeAnnotation);
	        tree = new VariableDeclaration(tree.location, tree.lvalue, tree.typeAnnotation, assert);
	        this.assertionAdded_ = true;
	      }
	      return $traceurRuntime.superGet(this, $TypeAssertionTransformer.prototype, "transformVariableDeclaration").call(this, tree);
	    },
	    transformFormalParameterList: function(tree) {
	      this.parametersStack_.push({
	        atLeastOneParameterTyped: false,
	        arguments: []
	      });
	      var transformed = $traceurRuntime.superGet(this, $TypeAssertionTransformer.prototype, "transformFormalParameterList").call(this, tree);
	      var params = this.parametersStack_.pop();
	      if (params.atLeastOneParameterTyped) {
	        var argumentList = createArgumentList(params.arguments);
	        var assertStatement = parseStatement($__1, argumentList);
	        this.parameterStatements.push(assertStatement);
	        this.assertionAdded_ = true;
	      }
	      return transformed;
	    },
	    transformFormalParameter: function(tree) {
	      var transformed = $traceurRuntime.superGet(this, $TypeAssertionTransformer.prototype, "transformFormalParameter").call(this, tree);
	      switch (transformed.parameter.type) {
	        case BINDING_ELEMENT:
	          this.transformBindingElementParameter_(transformed.parameter, transformed.typeAnnotation);
	          break;
	        case REST_PARAMETER:
	          break;
	      }
	      return transformed;
	    },
	    transformGetAccessor: function(tree) {
	      this.pushReturnType_(tree.typeAnnotation);
	      tree = $traceurRuntime.superGet(this, $TypeAssertionTransformer.prototype, "transformGetAccessor").call(this, tree);
	      this.popReturnType_();
	      return tree;
	    },
	    transformPropertyMethodAssignment: function(tree) {
	      this.pushReturnType_(tree.typeAnnotation);
	      tree = $traceurRuntime.superGet(this, $TypeAssertionTransformer.prototype, "transformPropertyMethodAssignment").call(this, tree);
	      this.popReturnType_();
	      return tree;
	    },
	    transformFunctionDeclaration: function(tree) {
	      this.pushReturnType_(tree.typeAnnotation);
	      tree = $traceurRuntime.superGet(this, $TypeAssertionTransformer.prototype, "transformFunctionDeclaration").call(this, tree);
	      this.popReturnType_();
	      return tree;
	    },
	    transformFunctionExpression: function(tree) {
	      this.pushReturnType_(tree.typeAnnotation);
	      tree = $traceurRuntime.superGet(this, $TypeAssertionTransformer.prototype, "transformFunctionExpression").call(this, tree);
	      this.popReturnType_();
	      return tree;
	    },
	    transformArrowFunctionExpression: function(tree) {
	      this.pushReturnType_(null);
	      tree = $traceurRuntime.superGet(this, $TypeAssertionTransformer.prototype, "transformArrowFunctionExpression").call(this, tree);
	      this.popReturnType_();
	      return tree;
	    },
	    transformReturnStatement: function(tree) {
	      tree = $traceurRuntime.superGet(this, $TypeAssertionTransformer.prototype, "transformReturnStatement").call(this, tree);
	      if (this.returnType_ && tree.expression) {
	        this.assertionAdded_ = true;
	        return parseStatement($__2, tree.expression, this.returnType_);
	      }
	      return tree;
	    },
	    transformBindingElementParameter_: function(element, typeAnnotation) {
	      if (!element.binding.isPattern()) {
	        if (typeAnnotation) {
	          this.paramTypes_.atLeastOneParameterTyped = true;
	        } else {
	          typeAnnotation = parseExpression($__3);
	        }
	        this.paramTypes_.arguments.push(createIdentifierExpression(element.binding.identifierToken), typeAnnotation);
	        return ;
	      }
	    },
	    pushReturnType_: function(typeAnnotation) {
	      this.returnTypeStack_.push(this.transformAny(typeAnnotation));
	    },
	    prependAssertionImport_: function(tree, Ctor) {
	      if (!this.assertionAdded_ || this.options_.typeAssertionModule === null)
	        return tree;
	      var binding = createImportedBinding('assert');
	      var importStatement = new ImportDeclaration(null, new ImportSpecifierSet(null, [new ImportSpecifier(null, binding, null)]), new ModuleSpecifier(null, createStringLiteralToken(this.options_.typeAssertionModule)));
	      tree = new Ctor(tree.location, $traceurRuntime.spread([importStatement], tree.scriptItemList), tree.moduleName);
	      return tree;
	    },
	    popReturnType_: function() {
	      return this.returnTypeStack_.pop();
	    },
	    get returnType_() {
	      return this.returnTypeStack_.length > 0 ? this.returnTypeStack_[this.returnTypeStack_.length - 1] : null;
	    },
	    get paramTypes_() {
	      return this.parametersStack_[this.parametersStack_.length - 1];
	    }
	  }, {}, ParameterTransformer);
	  return {get TypeAssertionTransformer() {
	      return TypeAssertionTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/TypeToExpressionTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/TypeToExpressionTransformer.js";
	  var $__0 = Object.freeze(Object.defineProperties(["$traceurRuntime.type.", ")"], {raw: {value: Object.freeze(["$traceurRuntime.type.", ")"])}})),
	      $__1 = Object.freeze(Object.defineProperties(["$traceurRuntime.genericType(", ")"], {raw: {value: Object.freeze(["$traceurRuntime.genericType(", ")"])}}));
	  var ParseTreeTransformer = System.get("traceur@0.0.87/src/codegeneration/ParseTreeTransformer.js").ParseTreeTransformer;
	  var $__3 = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js"),
	      ArgumentList = $__3.ArgumentList,
	      IdentifierExpression = $__3.IdentifierExpression,
	      MemberExpression = $__3.MemberExpression;
	  var parseExpression = System.get("traceur@0.0.87/src/codegeneration/PlaceholderParser.js").parseExpression;
	  var TypeToExpressionTransformer = function TypeToExpressionTransformer() {
	    $traceurRuntime.superConstructor($TypeToExpressionTransformer).apply(this, arguments);
	    ;
	  };
	  var $TypeToExpressionTransformer = TypeToExpressionTransformer;
	  ($traceurRuntime.createClass)(TypeToExpressionTransformer, {
	    transformTypeName: function(tree) {
	      if (tree.moduleName) {
	        var operand = this.transformAny(tree.moduleName);
	        return new MemberExpression(tree.location, operand, tree.name);
	      }
	      return new IdentifierExpression(tree.location, tree.name);
	    },
	    transformPredefinedType: function(tree) {
	      return parseExpression($__0, tree.typeToken);
	    },
	    transformTypeReference: function(tree) {
	      var typeName = this.transformAny(tree.typeName);
	      var args = this.transformAny(tree.args);
	      var argumentList = new ArgumentList(tree.location, $traceurRuntime.spread([typeName], args));
	      return parseExpression($__1, argumentList);
	    },
	    transformTypeArguments: function(tree) {
	      return this.transformList(tree.args);
	    }
	  }, {}, ParseTreeTransformer);
	  return {get TypeToExpressionTransformer() {
	      return TypeToExpressionTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/TypeTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/TypeTransformer.js";
	  var $__0 = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js"),
	      AnonBlock = $__0.AnonBlock,
	      FormalParameter = $__0.FormalParameter,
	      FunctionDeclaration = $__0.FunctionDeclaration,
	      FunctionExpression = $__0.FunctionExpression,
	      GetAccessor = $__0.GetAccessor,
	      PropertyMethodAssignment = $__0.PropertyMethodAssignment,
	      VariableDeclaration = $__0.VariableDeclaration;
	  var ParseTreeTransformer = System.get("traceur@0.0.87/src/codegeneration/ParseTreeTransformer.js").ParseTreeTransformer;
	  var TypeTransformer = function TypeTransformer() {
	    $traceurRuntime.superConstructor($TypeTransformer).apply(this, arguments);
	    ;
	  };
	  var $TypeTransformer = TypeTransformer;
	  ($traceurRuntime.createClass)(TypeTransformer, {
	    transformVariableDeclaration: function(tree) {
	      if (tree.typeAnnotation) {
	        tree = new VariableDeclaration(tree.location, tree.lvalue, null, tree.initializer);
	      }
	      return $traceurRuntime.superGet(this, $TypeTransformer.prototype, "transformVariableDeclaration").call(this, tree);
	    },
	    transformFormalParameter: function(tree) {
	      if (tree.typeAnnotation !== null)
	        return new FormalParameter(tree.location, tree.parameter, null, []);
	      return tree;
	    },
	    transformFunctionDeclaration: function(tree) {
	      if (tree.typeAnnotation) {
	        tree = new FunctionDeclaration(tree.location, tree.name, tree.functionKind, tree.parameterList, null, tree.annotations, tree.body);
	      }
	      return $traceurRuntime.superGet(this, $TypeTransformer.prototype, "transformFunctionDeclaration").call(this, tree);
	    },
	    transformFunctionExpression: function(tree) {
	      if (tree.typeAnnotation) {
	        tree = new FunctionExpression(tree.location, tree.name, tree.functionKind, tree.parameterList, null, tree.annotations, tree.body);
	      }
	      return $traceurRuntime.superGet(this, $TypeTransformer.prototype, "transformFunctionExpression").call(this, tree);
	    },
	    transformPropertyMethodAssignment: function(tree) {
	      if (tree.typeAnnotation) {
	        tree = new PropertyMethodAssignment(tree.location, tree.isStatic, tree.functionKind, tree.name, tree.parameterList, null, tree.annotations, tree.body, tree.debugName);
	      }
	      return $traceurRuntime.superGet(this, $TypeTransformer.prototype, "transformPropertyMethodAssignment").call(this, tree);
	    },
	    transformGetAccessor: function(tree) {
	      if (tree.typeAnnotation) {
	        tree = new GetAccessor(tree.location, tree.isStatic, tree.name, null, tree.annotations, tree.body);
	      }
	      return $traceurRuntime.superGet(this, $TypeTransformer.prototype, "transformGetAccessor").call(this, tree);
	    },
	    transformInterfaceDeclaration: function(tree) {
	      return new AnonBlock(null, []);
	    }
	  }, {}, ParseTreeTransformer);
	  return {get TypeTransformer() {
	      return TypeTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/UnicodeEscapeSequenceTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/UnicodeEscapeSequenceTransformer.js";
	  var ParseTreeTransformer = System.get("traceur@0.0.87/src/codegeneration/ParseTreeTransformer.js").ParseTreeTransformer;
	  var LiteralExpression = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js").LiteralExpression;
	  var STRING = System.get("traceur@0.0.87/src/syntax/TokenType.js").STRING;
	  var re = /(\\*)\\u{([0-9a-fA-F]+)}/g;
	  function zeroPad(value) {
	    return '0000'.slice(value.length) + value;
	  }
	  function needsTransform(token) {
	    return token.type === STRING && re.test(token.value);
	  }
	  function transformToken(token) {
	    return token.value.replace(re, (function(match, backslashes, hexDigits) {
	      var backslashIsEscaped = backslashes.length % 2 === 1;
	      if (backslashIsEscaped) {
	        return match;
	      }
	      var codePoint = parseInt(hexDigits, 16);
	      var value;
	      if (codePoint <= 0xFFFF) {
	        value = '\\u' + zeroPad(codePoint.toString(16).toUpperCase());
	      } else {
	        var high = Math.floor((codePoint - 0x10000) / 0x400) + 0xD800;
	        var low = (codePoint - 0x10000) % 0x400 + 0xDC00;
	        value = '\\u' + high.toString(16).toUpperCase() + '\\u' + low.toString(16).toUpperCase();
	      }
	      return backslashes + value;
	    }));
	  }
	  var UnicodeEscapeSequenceTransformer = function UnicodeEscapeSequenceTransformer() {
	    $traceurRuntime.superConstructor($UnicodeEscapeSequenceTransformer).apply(this, arguments);
	    ;
	  };
	  var $UnicodeEscapeSequenceTransformer = UnicodeEscapeSequenceTransformer;
	  ($traceurRuntime.createClass)(UnicodeEscapeSequenceTransformer, {transformLiteralExpression: function(tree) {
	      var token = tree.literalToken;
	      if (needsTransform(token))
	        return new LiteralExpression(tree.location, transformToken(token));
	      return tree;
	    }}, {}, ParseTreeTransformer);
	  return {get UnicodeEscapeSequenceTransformer() {
	      return UnicodeEscapeSequenceTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/UniqueIdentifierGenerator.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/UniqueIdentifierGenerator.js";
	  var UniqueIdentifierGenerator = function UniqueIdentifierGenerator() {
	    this.identifierIndex = 0;
	  };
	  ($traceurRuntime.createClass)(UniqueIdentifierGenerator, {generateUniqueIdentifier: function() {
	      return ("$__" + this.identifierIndex++);
	    }}, {});
	  return {get UniqueIdentifierGenerator() {
	      return UniqueIdentifierGenerator;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/FromOptionsTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/FromOptionsTransformer.js";
	  var AmdTransformer = System.get("traceur@0.0.87/src/codegeneration/AmdTransformer.js").AmdTransformer;
	  var AnnotationsTransformer = System.get("traceur@0.0.87/src/codegeneration/AnnotationsTransformer.js").AnnotationsTransformer;
	  var ArrayComprehensionTransformer = System.get("traceur@0.0.87/src/codegeneration/ArrayComprehensionTransformer.js").ArrayComprehensionTransformer;
	  var ArrowFunctionTransformer = System.get("traceur@0.0.87/src/codegeneration/ArrowFunctionTransformer.js").ArrowFunctionTransformer;
	  var AsyncGeneratorTransformPass = System.get("traceur@0.0.87/src/codegeneration/AsyncGeneratorTransformPass.js").AsyncGeneratorTransformPass;
	  var BlockBindingTransformer = System.get("traceur@0.0.87/src/codegeneration/BlockBindingTransformer.js").BlockBindingTransformer;
	  var ClassTransformer = System.get("traceur@0.0.87/src/codegeneration/ClassTransformer.js").ClassTransformer;
	  var CommonJsModuleTransformer = System.get("traceur@0.0.87/src/codegeneration/CommonJsModuleTransformer.js").CommonJsModuleTransformer;
	  var ClosureModuleTransformer = System.get("traceur@0.0.87/src/codegeneration/ClosureModuleTransformer.js").ClosureModuleTransformer;
	  var ExponentiationTransformer = System.get("traceur@0.0.87/src/codegeneration/ExponentiationTransformer.js").ExponentiationTransformer;
	  var validateConst = System.get("traceur@0.0.87/src/semantics/ConstChecker.js").validate;
	  var DefaultParametersTransformer = System.get("traceur@0.0.87/src/codegeneration/DefaultParametersTransformer.js").DefaultParametersTransformer;
	  var DestructuringTransformer = System.get("traceur@0.0.87/src/codegeneration/DestructuringTransformer.js").DestructuringTransformer;
	  var ForOfTransformer = System.get("traceur@0.0.87/src/codegeneration/ForOfTransformer.js").ForOfTransformer;
	  var ForOnTransformer = System.get("traceur@0.0.87/src/codegeneration/ForOnTransformer.js").ForOnTransformer;
	  var validateFreeVariables = System.get("traceur@0.0.87/src/semantics/FreeVariableChecker.js").validate;
	  var GeneratorComprehensionTransformer = System.get("traceur@0.0.87/src/codegeneration/GeneratorComprehensionTransformer.js").GeneratorComprehensionTransformer;
	  var GeneratorTransformPass = System.get("traceur@0.0.87/src/codegeneration/GeneratorTransformPass.js").GeneratorTransformPass;
	  var InlineModuleTransformer = System.get("traceur@0.0.87/src/codegeneration/InlineModuleTransformer.js").InlineModuleTransformer;
	  var MemberVariableTransformer = System.get("traceur@0.0.87/src/codegeneration/MemberVariableTransformer.js").MemberVariableTransformer;
	  var ModuleTransformer = System.get("traceur@0.0.87/src/codegeneration/ModuleTransformer.js").ModuleTransformer;
	  var MultiTransformer = System.get("traceur@0.0.87/src/codegeneration/MultiTransformer.js").MultiTransformer;
	  var NumericLiteralTransformer = System.get("traceur@0.0.87/src/codegeneration/NumericLiteralTransformer.js").NumericLiteralTransformer;
	  var ObjectLiteralTransformer = System.get("traceur@0.0.87/src/codegeneration/ObjectLiteralTransformer.js").ObjectLiteralTransformer;
	  var PropertyNameShorthandTransformer = System.get("traceur@0.0.87/src/codegeneration/PropertyNameShorthandTransformer.js").PropertyNameShorthandTransformer;
	  var InstantiateModuleTransformer = System.get("traceur@0.0.87/src/codegeneration/InstantiateModuleTransformer.js").InstantiateModuleTransformer;
	  var ProperTailCallTransformer = System.get("traceur@0.0.87/src/codegeneration/ProperTailCallTransformer.js").ProperTailCallTransformer;
	  var RegularExpressionTransformer = System.get("traceur@0.0.87/src/codegeneration/RegularExpressionTransformer.js").RegularExpressionTransformer;
	  var RestParameterTransformer = System.get("traceur@0.0.87/src/codegeneration/RestParameterTransformer.js").RestParameterTransformer;
	  var SpreadTransformer = System.get("traceur@0.0.87/src/codegeneration/SpreadTransformer.js").SpreadTransformer;
	  var SymbolTransformer = System.get("traceur@0.0.87/src/codegeneration/SymbolTransformer.js").SymbolTransformer;
	  var TemplateLiteralTransformer = System.get("traceur@0.0.87/src/codegeneration/TemplateLiteralTransformer.js").TemplateLiteralTransformer;
	  var TypeTransformer = System.get("traceur@0.0.87/src/codegeneration/TypeTransformer.js").TypeTransformer;
	  var TypeAssertionTransformer = System.get("traceur@0.0.87/src/codegeneration/TypeAssertionTransformer.js").TypeAssertionTransformer;
	  var TypeToExpressionTransformer = System.get("traceur@0.0.87/src/codegeneration/TypeToExpressionTransformer.js").TypeToExpressionTransformer;
	  var UnicodeEscapeSequenceTransformer = System.get("traceur@0.0.87/src/codegeneration/UnicodeEscapeSequenceTransformer.js").UnicodeEscapeSequenceTransformer;
	  var UniqueIdentifierGenerator = System.get("traceur@0.0.87/src/codegeneration/UniqueIdentifierGenerator.js").UniqueIdentifierGenerator;
	  var FromOptionsTransformer = function FromOptionsTransformer(reporter, options) {
	    var $__37;
	    $traceurRuntime.superConstructor($FromOptionsTransformer).call(this, reporter, options.validate);
	    var transformOptions = options.transformOptions;
	    var idGenerator = new UniqueIdentifierGenerator();
	    var append = ($__37 = this, function(transformer) {
	      $__37.append((function(tree) {
	        return new transformer(idGenerator, reporter, options).transformAny(tree);
	      }));
	    });
	    if (transformOptions.blockBinding) {
	      this.append((function(tree) {
	        validateConst(tree, reporter);
	        return tree;
	      }));
	    }
	    if (options.freeVariableChecker) {
	      this.append((function(tree) {
	        validateFreeVariables(tree, reporter);
	        return tree;
	      }));
	    }
	    if (transformOptions.exponentiation)
	      append(ExponentiationTransformer);
	    if (transformOptions.numericLiterals)
	      append(NumericLiteralTransformer);
	    if (transformOptions.unicodeExpressions)
	      append(RegularExpressionTransformer);
	    if (transformOptions.templateLiterals)
	      append(TemplateLiteralTransformer);
	    if (transformOptions.types)
	      append(TypeToExpressionTransformer);
	    if (transformOptions.unicodeEscapeSequences)
	      append(UnicodeEscapeSequenceTransformer);
	    if (transformOptions.annotations)
	      append(AnnotationsTransformer);
	    if (options.typeAssertions) {
	      if (transformOptions.memberVariables)
	        append(MemberVariableTransformer);
	      append(TypeAssertionTransformer);
	    }
	    if (transformOptions.propertyNameShorthand)
	      append(PropertyNameShorthandTransformer);
	    if (transformOptions.modules) {
	      switch (transformOptions.modules) {
	        case 'commonjs':
	          append(CommonJsModuleTransformer);
	          break;
	        case 'amd':
	          append(AmdTransformer);
	          break;
	        case 'closure':
	          append(ClosureModuleTransformer);
	          break;
	        case 'inline':
	          append(InlineModuleTransformer);
	          break;
	        case 'instantiate':
	          append(InstantiateModuleTransformer);
	          break;
	        case 'register':
	          append(ModuleTransformer);
	          break;
	        default:
	          throw new Error('Invalid modules transform option');
	      }
	    }
	    if (transformOptions.arrowFunctions)
	      append(ArrowFunctionTransformer);
	    if (transformOptions.classes)
	      append(ClassTransformer);
	    if (transformOptions.propertyMethods || transformOptions.computedPropertyNames || transformOptions.properTailCalls) {
	      append(ObjectLiteralTransformer);
	    }
	    if (transformOptions.generatorComprehension)
	      append(GeneratorComprehensionTransformer);
	    if (transformOptions.arrayComprehension)
	      append(ArrayComprehensionTransformer);
	    if (transformOptions.forOf)
	      append(ForOfTransformer);
	    if (transformOptions.asyncGenerators) {
	      append(AsyncGeneratorTransformPass);
	    }
	    if (transformOptions.forOn)
	      append(ForOnTransformer);
	    if (transformOptions.restParameters)
	      append(RestParameterTransformer);
	    if (transformOptions.defaultParameters)
	      append(DefaultParametersTransformer);
	    if (transformOptions.destructuring)
	      append(DestructuringTransformer);
	    if (transformOptions.types)
	      append(TypeTransformer);
	    if (transformOptions.spread)
	      append(SpreadTransformer);
	    if (transformOptions.blockBinding) {
	      this.append((function(tree) {
	        var transformer = new BlockBindingTransformer(idGenerator, reporter, tree);
	        return transformer.transformAny(tree);
	      }));
	    }
	    if (transformOptions.generators || transformOptions.asyncFunctions)
	      append(GeneratorTransformPass);
	    if (transformOptions.symbols)
	      append(SymbolTransformer);
	    if (transformOptions.properTailCalls) {
	      append(ProperTailCallTransformer);
	    }
	  };
	  var $FromOptionsTransformer = FromOptionsTransformer;
	  ($traceurRuntime.createClass)(FromOptionsTransformer, {}, {}, MultiTransformer);
	  return {get FromOptionsTransformer() {
	      return FromOptionsTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/ES6ClassTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/ES6ClassTransformer.js";
	  var $__0 = Object.freeze(Object.defineProperties(["let ", " = ", ""], {raw: {value: Object.freeze(["let ", " = ", ""])}})),
	      $__1 = Object.freeze(Object.defineProperties(["return ", ""], {raw: {value: Object.freeze(["return ", ""])}})),
	      $__2 = Object.freeze(Object.defineProperties(["super(...args)"], {raw: {value: Object.freeze(["super(...args)"])}})),
	      $__3 = Object.freeze(Object.defineProperties(["constructor() {}"], {raw: {value: Object.freeze(["constructor() {}"])}})),
	      $__4 = Object.freeze(Object.defineProperties(["Object.defineProperty(", ", ", ", {enumerable: true,\n        configurable: true, value: ", ", writable: true})"], {raw: {value: Object.freeze(["Object.defineProperty(", ", ", ", {enumerable: true,\n        configurable: true, value: ", ", writable: true})"])}}));
	  var CONSTRUCTOR = System.get("traceur@0.0.87/src/syntax/PredefinedName.js").CONSTRUCTOR;
	  var $__6 = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js"),
	      AnonBlock = $__6.AnonBlock,
	      ClassExpression = $__6.ClassExpression,
	      ClassDeclaration = $__6.ClassDeclaration,
	      FormalParameterList = $__6.FormalParameterList,
	      PropertyMethodAssignment = $__6.PropertyMethodAssignment;
	  var $__7 = System.get("traceur@0.0.87/src/syntax/trees/ParseTreeType.js"),
	      GET_ACCESSOR = $__7.GET_ACCESSOR,
	      PROPERTY_METHOD_ASSIGNMENT = $__7.PROPERTY_METHOD_ASSIGNMENT,
	      PROPERTY_VARIABLE_DECLARATION = $__7.PROPERTY_VARIABLE_DECLARATION,
	      SET_ACCESSOR = $__7.SET_ACCESSOR;
	  var TempVarTransformer = System.get("traceur@0.0.87/src/codegeneration/TempVarTransformer.js").TempVarTransformer;
	  var $__9 = System.get("traceur@0.0.87/src/codegeneration/ParseTreeFactory.js"),
	      createBindingIdentifier = $__9.createBindingIdentifier,
	      createFunctionBody = $__9.createFunctionBody,
	      createIdentifierToken = $__9.createIdentifierToken,
	      createImmediatelyInvokedFunctionExpression = $__9.createImmediatelyInvokedFunctionExpression,
	      createLiteralPropertyName = $__9.createLiteralPropertyName,
	      createRestParameter = $__9.createRestParameter;
	  var $__10 = System.get("traceur@0.0.87/src/codegeneration/PlaceholderParser.js"),
	      parsePropertyDefinition = $__10.parsePropertyDefinition,
	      parseStatement = $__10.parseStatement;
	  var propName = System.get("traceur@0.0.87/src/staticsemantics/PropName.js").propName;
	  var prependStatements = System.get("traceur@0.0.87/src/codegeneration/PrependStatements.js").prependStatements;
	  var $__13 = System.get("traceur@0.0.87/src/codegeneration/MemberVariableConstructorTransformer.js"),
	      transformConstructor = $__13.transformConstructor,
	      getInstanceInitExpression = $__13.getInstanceInitExpression;
	  var ES6ClassTransformer = function ES6ClassTransformer() {
	    $traceurRuntime.superConstructor($ES6ClassTransformer).apply(this, arguments);
	    ;
	  };
	  var $ES6ClassTransformer = ES6ClassTransformer;
	  ($traceurRuntime.createClass)(ES6ClassTransformer, {
	    transformClassElements_: function(tree) {
	      var $__14 = this;
	      var elements = [];
	      var initInstanceVars = [],
	          initStaticVars = [];
	      var constructor;
	      var constructorIndex = 0;
	      tree.elements.forEach((function(tree) {
	        var initVars;
	        if (tree.isStatic) {
	          initVars = initStaticVars;
	        } else {
	          initVars = initInstanceVars;
	        }
	        switch (tree.type) {
	          case GET_ACCESSOR:
	          case SET_ACCESSOR:
	            elements.push($__14.transformAny(tree));
	            break;
	          case PROPERTY_METHOD_ASSIGNMENT:
	            if (!tree.isStatic && propName(tree) === CONSTRUCTOR) {
	              constructor = tree;
	              constructorIndex = elements.length;
	            } else {
	              elements.push($__14.transformAny(tree));
	            }
	            break;
	          case PROPERTY_VARIABLE_DECLARATION:
	            tree = $__14.transformAny(tree);
	            if (tree.initializer !== null) {
	              initVars.push(tree);
	            }
	            break;
	          default:
	            throw new Error(("Unexpected class element: " + tree.type));
	        }
	      }));
	      if (initInstanceVars.length > 0) {
	        var initExpression = getInstanceInitExpression(initInstanceVars);
	        if (!constructor) {
	          constructor = this.getDefaultConstructor_(tree);
	        }
	        constructor = transformConstructor(constructor, initExpression, tree.superClass);
	      }
	      if (constructor) {
	        elements.splice(constructorIndex, 0, constructor);
	      }
	      return {
	        elements: elements,
	        initStaticVars: initStaticVars
	      };
	    },
	    transformClassDeclaration: function(tree) {
	      var $__16 = this.transformClassElements_(tree),
	          elements = $__16.elements,
	          initStaticVars = $__16.initStaticVars;
	      var superClass = this.transformAny(tree.superClass);
	      var classDecl = new ClassDeclaration(tree.location, tree.name, superClass, elements, tree.annotations, tree.typeParameters);
	      if (initStaticVars.length === 0) {
	        return classDecl;
	      }
	      var statements = createStaticInitializerStatements(tree.name, initStaticVars);
	      statements = prependStatements(statements, classDecl);
	      return new AnonBlock(null, statements);
	    },
	    transformClassExpression: function(tree) {
	      var $__16 = this.transformClassElements_(tree),
	          elements = $__16.elements,
	          initStaticVars = $__16.initStaticVars;
	      var superClass = this.transformAny(tree.superClass);
	      var classExpression = new ClassExpression(tree.location, tree.name, superClass, elements, tree.annotations, tree.typeParameters);
	      if (initStaticVars.length === 0) {
	        return classExpression;
	      }
	      this.pushTempScope();
	      var id = this.getTempIdentifier();
	      var className = createBindingIdentifier(id);
	      var statements = $traceurRuntime.spread([parseStatement($__0, id, classExpression)], createStaticInitializerStatements(className, initStaticVars), [parseStatement($__1, className)]);
	      var body = createFunctionBody(statements);
	      this.popTempScope();
	      return createImmediatelyInvokedFunctionExpression(body);
	    },
	    getDefaultConstructor_: function(tree) {
	      if (tree.superClass) {
	        var param = createRestParameter(createIdentifierToken('args'));
	        var paramList = new FormalParameterList(null, [param]);
	        var body = createFunctionBody([parseStatement($__2)]);
	        var name = createLiteralPropertyName(CONSTRUCTOR);
	        return new PropertyMethodAssignment(tree.location, false, null, name, paramList, null, [], body);
	      }
	      return parsePropertyDefinition($__3);
	    }
	  }, {}, TempVarTransformer);
	  function createStaticInitializerStatements(className, initStaticMemberVars) {
	    return initStaticMemberVars.map((function(mv) {
	      var propName = mv.name.literalToken.value;
	      return parseStatement($__4, className, propName, mv.initializer);
	    }));
	  }
	  return {get ES6ClassTransformer() {
	      return ES6ClassTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/PureES6Transformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/PureES6Transformer.js";
	  var AnnotationsTransformer = System.get("traceur@0.0.87/src/codegeneration/AnnotationsTransformer.js").AnnotationsTransformer;
	  var MemberVariableTransformer = System.get("traceur@0.0.87/src/codegeneration/MemberVariableTransformer.js").MemberVariableTransformer;
	  var MultiTransformer = System.get("traceur@0.0.87/src/codegeneration/MultiTransformer.js").MultiTransformer;
	  var TypeAssertionTransformer = System.get("traceur@0.0.87/src/codegeneration/TypeAssertionTransformer.js").TypeAssertionTransformer;
	  var TypeTransformer = System.get("traceur@0.0.87/src/codegeneration/TypeTransformer.js").TypeTransformer;
	  var ES6ClassTransformer = System.get("traceur@0.0.87/src/codegeneration/ES6ClassTransformer.js").ES6ClassTransformer;
	  var UniqueIdentifierGenerator = System.get("traceur@0.0.87/src/codegeneration/UniqueIdentifierGenerator.js").UniqueIdentifierGenerator;
	  var validateFreeVariables = System.get("traceur@0.0.87/src/semantics/FreeVariableChecker.js").validate;
	  var PureES6Transformer = function PureES6Transformer(reporter, options) {
	    var $__8;
	    $traceurRuntime.superConstructor($PureES6Transformer).call(this, reporter, options.validate);
	    var idGenerator = new UniqueIdentifierGenerator();
	    var append = ($__8 = this, function(transformer) {
	      $__8.append((function(tree) {
	        return new transformer(idGenerator, reporter, options).transformAny(tree);
	      }));
	    });
	    if (options.freeVariableChecker) {
	      this.append((function(tree) {
	        validateFreeVariables(tree, reporter);
	        return tree;
	      }));
	    }
	    if (options.typeAssertions) {
	      if (options.memberVariables)
	        append(MemberVariableTransformer);
	      append(TypeAssertionTransformer);
	    }
	    if (options.memberVariables) {
	      append(ES6ClassTransformer);
	    }
	    append(AnnotationsTransformer);
	    append(TypeTransformer);
	  };
	  var $PureES6Transformer = PureES6Transformer;
	  ($traceurRuntime.createClass)(PureES6Transformer, {}, {}, MultiTransformer);
	  return {get PureES6Transformer() {
	      return PureES6Transformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/module/AttachModuleNameTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/module/AttachModuleNameTransformer.js";
	  var ParseTreeTransformer = System.get("traceur@0.0.87/src/codegeneration/ParseTreeTransformer.js").ParseTreeTransformer;
	  var $__1 = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js"),
	      Module = $__1.Module,
	      Script = $__1.Script;
	  var AttachModuleNameTransformer = function AttachModuleNameTransformer(moduleName) {
	    $traceurRuntime.superConstructor($AttachModuleNameTransformer).call(this);
	    this.moduleName_ = moduleName;
	  };
	  var $AttachModuleNameTransformer = AttachModuleNameTransformer;
	  ($traceurRuntime.createClass)(AttachModuleNameTransformer, {
	    transformModule: function(tree) {
	      return new Module(tree.location, tree.scriptItemList, this.moduleName_);
	    },
	    transformScript: function(tree) {
	      return new Script(tree.location, tree.scriptItemList, this.moduleName_);
	    }
	  }, {}, ParseTreeTransformer);
	  return {get AttachModuleNameTransformer() {
	      return AttachModuleNameTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/Compiler.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/Compiler.js";
	  var AttachModuleNameTransformer = System.get("traceur@0.0.87/src/codegeneration/module/AttachModuleNameTransformer.js").AttachModuleNameTransformer;
	  var FromOptionsTransformer = System.get("traceur@0.0.87/src/codegeneration/FromOptionsTransformer.js").FromOptionsTransformer;
	  var Parser = System.get("traceur@0.0.87/src/syntax/Parser.js").Parser;
	  var PureES6Transformer = System.get("traceur@0.0.87/src/codegeneration/PureES6Transformer.js").PureES6Transformer;
	  var SourceFile = System.get("traceur@0.0.87/src/syntax/SourceFile.js").SourceFile;
	  var CollectingErrorReporter = System.get("traceur@0.0.87/src/util/CollectingErrorReporter.js").CollectingErrorReporter;
	  var $__6 = System.get("traceur@0.0.87/src/Options.js"),
	      Options = $__6.Options,
	      versionLockedOptions = $__6.versionLockedOptions;
	  var ParseTreeMapWriter = System.get("traceur@0.0.87/src/outputgeneration/ParseTreeMapWriter.js").ParseTreeMapWriter;
	  var ParseTreeWriter = System.get("traceur@0.0.87/src/outputgeneration/ParseTreeWriter.js").ParseTreeWriter;
	  var $__9 = System.get("traceur@0.0.87/src/outputgeneration/SourceMapIntegration.js"),
	      SourceMapConsumer = $__9.SourceMapConsumer,
	      SourceMapGenerator = $__9.SourceMapGenerator;
	  function merge() {
	    for (var srcs = [],
	        $__11 = 0; $__11 < arguments.length; $__11++)
	      srcs[$__11] = arguments[$__11];
	    var dest = Object.create(null);
	    srcs.forEach((function(src) {
	      Object.keys(src).forEach((function(key) {
	        dest[key] = src[key];
	      }));
	      var srcModules = src.modules;
	      if (typeof srcModules !== 'undefined') {
	        dest.modules = srcModules;
	      }
	    }));
	    return dest;
	  }
	  function basePath(name) {
	    if (!name)
	      return null;
	    var lastSlash = name.lastIndexOf('/');
	    if (lastSlash < 0)
	      return null;
	    return name.substring(0, lastSlash + 1);
	  }
	  var Compiler = function Compiler() {
	    var overridingOptions = arguments[0] !== (void 0) ? arguments[0] : {};
	    this.options_ = new Options(this.defaultOptions());
	    this.options_.setFromObject(overridingOptions);
	    this.sourceMapConfiguration_ = null;
	    this.sourceMapInfo_ = null;
	    this.sourceMapCache_ = null;
	  };
	  var $Compiler = Compiler;
	  ($traceurRuntime.createClass)(Compiler, {
	    compile: function(content) {
	      var sourceName = arguments[1] !== (void 0) ? arguments[1] : '<compileSource>';
	      var outputName = arguments[2] !== (void 0) ? arguments[2] : '<compileOutput>';
	      var sourceRoot = arguments[3];
	      sourceName = this.normalize(sourceName);
	      outputName = this.normalize(outputName);
	      var tree = this.parse(content, sourceName);
	      tree = this.transform(tree, sourceName);
	      var sourceURL = sourceName !== outputName ? sourceName : undefined;
	      if (sourceRoot === undefined)
	        sourceRoot = this.options_.sourceRoot;
	      return this.write(tree, outputName, sourceRoot, sourceURL);
	    },
	    throwIfErrors: function(errorReporter) {
	      if (errorReporter.hadError())
	        throw errorReporter.errors;
	    },
	    parse: function(content) {
	      var sourceName = arguments[1] !== (void 0) ? arguments[1] : '<compiler-parse-input>';
	      sourceName = this.normalize(sourceName);
	      this.sourceMapCache_ = null;
	      this.sourceMapConfiguration_ = null;
	      var errorReporter = new CollectingErrorReporter();
	      var sourceFile = new SourceFile(sourceName, content);
	      var parser = new Parser(sourceFile, errorReporter, this.options_);
	      var tree = this.options_.script ? parser.parseScript() : parser.parseModule();
	      this.throwIfErrors(errorReporter);
	      return tree;
	    },
	    transform: function(tree) {
	      var candidateModuleName = arguments[1];
	      var transformer;
	      if (candidateModuleName) {
	        var transformer$__12 = new AttachModuleNameTransformer(candidateModuleName);
	        tree = transformer$__12.transformAny(tree);
	      }
	      var errorReporter = new CollectingErrorReporter();
	      if (this.options_.outputLanguage.toLowerCase() === 'es6') {
	        transformer = new PureES6Transformer(errorReporter, this.options_);
	      } else {
	        transformer = new FromOptionsTransformer(errorReporter, this.options_);
	      }
	      var transformedTree = transformer.transform(tree);
	      this.throwIfErrors(errorReporter);
	      return transformedTree;
	    },
	    createSourceMapConfiguration_: function(outputName) {
	      var sourceRoot = arguments[1];
	      var sourceURL = arguments[2];
	      if (this.options_.sourceMaps) {
	        return {
	          sourceMapGenerator: new SourceMapGenerator({
	            file: outputName,
	            sourceRoot: sourceRoot,
	            skipValidation: true
	          }),
	          basepath: basePath(outputName),
	          inputSourceMap: this.options_.inputSourceMap,
	          sourceURL: sourceURL,
	          outputName: outputName
	        };
	      }
	    },
	    getSourceMap: function() {
	      if (this.sourceMapCache_) {
	        return this.sourceMapCache_;
	      }
	      if (this.sourceMapConfiguration_) {
	        var sourceMap = this.sourceMapConfiguration_.sourceMapGenerator.toString();
	        var inputSourceMap = this.sourceMapConfiguration_.inputSourceMap;
	        if (inputSourceMap) {
	          var generator = SourceMapGenerator.fromSourceMap(new SourceMapConsumer(sourceMap));
	          generator.applySourceMap(new SourceMapConsumer(inputSourceMap));
	          sourceMap = generator.toJSON();
	        }
	        this.sourceMapCache_ = sourceMap;
	        return sourceMap;
	      }
	    },
	    get sourceMapInfo() {
	      if (!this.sourceMapInfo_ && this.sourceMapConfiguration_) {
	        var sourceMap = this.getSourceMap();
	        this.sourceMapInfo_ = {
	          url: this.sourceMapConfiguration_.sourceURL,
	          outputName: this.sourceMapConfiguration_.outputName,
	          map: sourceMap
	        };
	      }
	      return this.sourceMapInfo_;
	    },
	    write: function(tree) {
	      var outputName = arguments[1];
	      var sourceRoot = arguments[2];
	      var sourceURL = arguments[3];
	      outputName = this.normalize(outputName);
	      if (sourceRoot === undefined)
	        sourceRoot = this.options_.sourceRoot;
	      if (sourceRoot === true)
	        sourceRoot = basePath(outputName);
	      else if (!sourceRoot)
	        sourceRoot = undefined;
	      else
	        sourceRoot = this.normalize(sourceRoot);
	      var writer;
	      this.sourceMapCache_ = null;
	      this.sourceMapConfiguration_ = this.createSourceMapConfiguration_(outputName, sourceRoot, sourceURL);
	      if (this.sourceMapConfiguration_) {
	        this.sourceMapConfiguration_.lowResolution = this.options_.lowResolutionSourceMap;
	        writer = new ParseTreeMapWriter(this.sourceMapConfiguration_, this.options_);
	      } else {
	        writer = new ParseTreeWriter(this.options_);
	      }
	      writer.visitAny(tree);
	      var compiledCode = writer.toString();
	      var link = this.debuggerLink(sourceURL, outputName);
	      if (link) {
	        compiledCode += link;
	      }
	      return compiledCode;
	    },
	    debuggerLink: function(sourceURL, outputName) {
	      if (this.sourceMapConfiguration_) {
	        if (this.options_.sourceMaps === 'memory') {
	          return ;
	        }
	        var sourceMappingURL = this.sourceMappingURL(sourceURL || outputName || 'unnamed.js');
	        return '//# sourceMappingURL=' + sourceMappingURL + '\n';
	      } else {
	        if (sourceURL) {
	          return '//# sourceURL=' + sourceURL + '\n';
	        }
	      }
	    },
	    sourceName: function(filename) {
	      return filename;
	    },
	    sourceMappingURL: function(path) {
	      if (this.options_.sourceMaps === 'inline') {
	        if (Reflect.global.btoa) {
	          return 'data:application/json;base64,' + btoa(unescape(encodeURIComponent(this.getSourceMap())));
	        }
	      }
	      path = path || 'unamed.js';
	      path = path.split('/').pop();
	      return path + '.map';
	    },
	    sourceNameFromTree: function(tree) {
	      return tree.location.start.source.name;
	    },
	    defaultOptions: function() {
	      return versionLockedOptions;
	    },
	    normalize: function(name) {
	      return name && name.replace(/\\/g, '/');
	    }
	  }, {
	    script: function(content) {
	      var options = arguments[1] !== (void 0) ? arguments[1] : {};
	      options = new Options(options);
	      options.script = true;
	      return new $Compiler(options).compile(content);
	    },
	    module: function(content) {
	      var options = arguments[1] !== (void 0) ? arguments[1] : {};
	      options = new Options(options);
	      options.modules = 'register';
	      return new $Compiler(options).compile(content);
	    },
	    amdOptions: function() {
	      var options = arguments[0] !== (void 0) ? arguments[0] : {};
	      var amdOptions = {
	        modules: 'amd',
	        sourceMaps: false,
	        moduleName: false
	      };
	      return merge(amdOptions, options);
	    },
	    closureOptions: function() {
	      var options = arguments[0] !== (void 0) ? arguments[0] : {};
	      var closureOptions = {
	        modules: 'closure',
	        sourceMaps: false,
	        moduleName: true
	      };
	      return merge(closureOptions, options);
	    },
	    commonJSOptions: function() {
	      var options = arguments[0] !== (void 0) ? arguments[0] : {};
	      var commonjsOptions = {
	        modules: 'commonjs',
	        sourceMaps: false,
	        moduleName: false
	      };
	      return merge(commonjsOptions, options);
	    }
	  });
	  return {get Compiler() {
	      return Compiler;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/module/ValidationVisitor.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/module/ValidationVisitor.js";
	  var ModuleVisitor = System.get("traceur@0.0.87/src/codegeneration/module/ModuleVisitor.js").ModuleVisitor;
	  var ValidationVisitor = function ValidationVisitor() {
	    $traceurRuntime.superConstructor($ValidationVisitor).apply(this, arguments);
	    ;
	  };
	  var $ValidationVisitor = ValidationVisitor;
	  ($traceurRuntime.createClass)(ValidationVisitor, {
	    checkExport_: function(tree, name) {
	      var description = this.validatingModuleDescription_;
	      if (description && !description.getExport(name)) {
	        var moduleName = description.normalizedName;
	        this.reportError(tree, ("'" + name + "' is not exported by '" + moduleName + "'"));
	      }
	    },
	    checkImport_: function(tree, name) {
	      var existingImport = this.moduleSymbol.getImport(name);
	      if (existingImport) {
	        this.reportError(tree, ("'" + name + "' was previously imported at " + existingImport.location.start));
	      } else {
	        this.moduleSymbol.addImport(name, tree);
	      }
	    },
	    visitAndValidate_: function(moduleDescription, tree) {
	      var validatingModuleDescription = this.validatingModuleDescription_;
	      this.validatingModuleDescription_ = moduleDescription;
	      this.visitAny(tree);
	      this.validatingModuleDescription_ = validatingModuleDescription;
	    },
	    visitNamedExport: function(tree) {
	      if (tree.moduleSpecifier) {
	        var name = tree.moduleSpecifier.token.processedValue;
	        var moduleDescription = this.getExportsListForModuleSpecifier(name);
	        this.visitAndValidate_(moduleDescription, tree.specifierSet);
	      }
	    },
	    visitExportSpecifier: function(tree) {
	      this.checkExport_(tree, tree.lhs.value);
	    },
	    visitImportDeclaration: function(tree) {
	      var name = tree.moduleSpecifier.token.processedValue;
	      var moduleDescription = this.getExportsListForModuleSpecifier(name);
	      this.visitAndValidate_(moduleDescription, tree.importClause);
	    },
	    visitImportSpecifier: function(tree) {
	      var importName = tree.binding.getStringValue();
	      var exportName = tree.name ? tree.name.value : importName;
	      this.checkImport_(tree, importName);
	      this.checkExport_(tree, exportName);
	    },
	    visitImportedBinding: function(tree) {
	      var importName = tree.binding.getStringValue();
	      this.checkImport_(tree, importName);
	      this.checkExport_(tree, 'default');
	    }
	  }, {}, ModuleVisitor);
	  return {get ValidationVisitor() {
	      return ValidationVisitor;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/module/ExportListBuilder.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/module/ExportListBuilder.js";
	  var ExportVisitor = System.get("traceur@0.0.87/src/codegeneration/module/ExportVisitor.js").ExportVisitor;
	  var ValidationVisitor = System.get("traceur@0.0.87/src/codegeneration/module/ValidationVisitor.js").ValidationVisitor;
	  function buildExportList(deps, loader, reporter) {
	    function doVisit(ctor) {
	      for (var i = 0; i < deps.length; i++) {
	        var visitor = new ctor(reporter, loader, deps[i]);
	        visitor.visitAny(deps[i].tree);
	      }
	    }
	    function reverseVisit(ctor) {
	      for (var i = deps.length - 1; i >= 0; i--) {
	        var visitor = new ctor(reporter, loader, deps[i]);
	        visitor.visitAny(deps[i].tree);
	      }
	    }
	    reverseVisit(ExportVisitor);
	    doVisit(ValidationVisitor);
	  }
	  return {get buildExportList() {
	      return buildExportList;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/module/ModuleSpecifierVisitor.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/module/ModuleSpecifierVisitor.js";
	  var ParseTreeVisitor = System.get("traceur@0.0.87/src/syntax/ParseTreeVisitor.js").ParseTreeVisitor;
	  var StringSet = System.get("traceur@0.0.87/src/util/StringSet.js").StringSet;
	  var ModuleSpecifierVisitor = function ModuleSpecifierVisitor(options) {
	    $traceurRuntime.superConstructor($ModuleSpecifierVisitor).call(this);
	    this.options_ = options;
	    this.moduleSpecifiers_ = new StringSet();
	  };
	  var $ModuleSpecifierVisitor = ModuleSpecifierVisitor;
	  ($traceurRuntime.createClass)(ModuleSpecifierVisitor, {
	    get moduleSpecifiers() {
	      return this.moduleSpecifiers_.valuesAsArray();
	    },
	    visitModuleSpecifier: function(tree) {
	      this.moduleSpecifiers_.add(tree.token.processedValue);
	    },
	    visitVariableDeclaration: function(tree) {
	      this.addTypeAssertionDependency_(tree.typeAnnotation);
	      return $traceurRuntime.superGet(this, $ModuleSpecifierVisitor.prototype, "visitVariableDeclaration").call(this, tree);
	    },
	    visitFormalParameter: function(tree) {
	      this.addTypeAssertionDependency_(tree.typeAnnotation);
	      return $traceurRuntime.superGet(this, $ModuleSpecifierVisitor.prototype, "visitFormalParameter").call(this, tree);
	    },
	    visitGetAccessor: function(tree) {
	      this.addTypeAssertionDependency_(tree.typeAnnotation);
	      return $traceurRuntime.superGet(this, $ModuleSpecifierVisitor.prototype, "visitGetAccessor").call(this, tree);
	    },
	    visitPropertyMethodAssignment: function(tree) {
	      this.addTypeAssertionDependency_(tree.typeAnnotation);
	      return $traceurRuntime.superGet(this, $ModuleSpecifierVisitor.prototype, "visitPropertyMethodAssignment").call(this, tree);
	    },
	    visitFunctionDeclaration: function(tree) {
	      this.addTypeAssertionDependency_(tree.typeAnnotation);
	      return $traceurRuntime.superGet(this, $ModuleSpecifierVisitor.prototype, "visitFunctionDeclaration").call(this, tree);
	    },
	    visitFunctionExpression: function(tree) {
	      this.addTypeAssertionDependency_(tree.typeAnnotation);
	      return $traceurRuntime.superGet(this, $ModuleSpecifierVisitor.prototype, "visitFunctionExpression").call(this, tree);
	    },
	    addTypeAssertionDependency_: function(typeAnnotation) {
	      if (typeAnnotation !== null && this.options_.typeAssertionModule !== null)
	        this.moduleSpecifiers_.add(this.options_.typeAssertionModule);
	    }
	  }, {}, ParseTreeVisitor);
	  return {get ModuleSpecifierVisitor() {
	      return ModuleSpecifierVisitor;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/runtime/system-map.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/runtime/system-map.js";
	  function prefixMatchLength(name, prefix) {
	    var prefixParts = prefix.split('/');
	    var nameParts = name.split('/');
	    if (prefixParts.length > nameParts.length)
	      return 0;
	    for (var i = 0; i < prefixParts.length; i++) {
	      if (nameParts[i] != prefixParts[i])
	        return 0;
	    }
	    return prefixParts.length;
	  }
	  function applyMap(map, name, parentName) {
	    var curMatch,
	        curMatchLength = 0;
	    var curParent,
	        curParentMatchLength = 0;
	    if (parentName) {
	      var mappedName;
	      Object.getOwnPropertyNames(map).some(function(p) {
	        var curMap = map[p];
	        if (curMap && typeof curMap === 'object') {
	          if (prefixMatchLength(parentName, p) <= curParentMatchLength)
	            return ;
	          Object.getOwnPropertyNames(curMap).forEach(function(q) {
	            if (prefixMatchLength(name, q) > curMatchLength) {
	              curMatch = q;
	              curMatchLength = q.split('/').length;
	              curParent = p;
	              curParentMatchLength = p.split('/').length;
	            }
	          });
	        }
	        if (curMatch) {
	          var subPath = name.split('/').splice(curMatchLength).join('/');
	          mappedName = map[curParent][curMatch] + (subPath ? '/' + subPath : '');
	          return mappedName;
	        }
	      });
	    }
	    if (mappedName)
	      return mappedName;
	    Object.getOwnPropertyNames(map).forEach(function(p) {
	      var curMap = map[p];
	      if (curMap && typeof curMap === 'string') {
	        if (prefixMatchLength(name, p) > curMatchLength) {
	          curMatch = p;
	          curMatchLength = p.split('/').length;
	        }
	      }
	    });
	    if (!curMatch)
	      return name;
	    var subPath = name.split('/').splice(curMatchLength).join('/');
	    return map[curMatch] + (subPath ? '/' + subPath : '');
	  }
	  var systemjs = {applyMap: applyMap};
	  return {get systemjs() {
	      return systemjs;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/util/url.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/util/url.js";
	  var canonicalizeUrl = $traceurRuntime.canonicalizeUrl;
	  var isAbsolute = $traceurRuntime.isAbsolute;
	  var removeDotSegments = $traceurRuntime.removeDotSegments;
	  var resolveUrl = $traceurRuntime.resolveUrl;
	  return {
	    get canonicalizeUrl() {
	      return canonicalizeUrl;
	    },
	    get isAbsolute() {
	      return isAbsolute;
	    },
	    get removeDotSegments() {
	      return removeDotSegments;
	    },
	    get resolveUrl() {
	      return resolveUrl;
	    }
	  };
	});
	System.registerModule("traceur@0.0.87/src/runtime/LoaderCompiler.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/runtime/LoaderCompiler.js";
	  var buildExportList = System.get("traceur@0.0.87/src/codegeneration/module/ExportListBuilder.js").buildExportList;
	  var CollectingErrorReporter = System.get("traceur@0.0.87/src/util/CollectingErrorReporter.js").CollectingErrorReporter;
	  var Compiler = System.get("traceur@0.0.87/src/Compiler.js").Compiler;
	  var ModuleSpecifierVisitor = System.get("traceur@0.0.87/src/codegeneration/module/ModuleSpecifierVisitor.js").ModuleSpecifierVisitor;
	  var ModuleSymbol = System.get("traceur@0.0.87/src/codegeneration/module/ModuleSymbol.js").ModuleSymbol;
	  var Parser = System.get("traceur@0.0.87/src/syntax/Parser.js").Parser;
	  var SourceFile = System.get("traceur@0.0.87/src/syntax/SourceFile.js").SourceFile;
	  var systemjs = System.get("traceur@0.0.87/src/runtime/system-map.js").systemjs;
	  var UniqueIdentifierGenerator = System.get("traceur@0.0.87/src/codegeneration/UniqueIdentifierGenerator.js").UniqueIdentifierGenerator;
	  var $__9 = System.get("traceur@0.0.87/src/util/url.js"),
	      isAbsolute = $__9.isAbsolute,
	      resolveUrl = $__9.resolveUrl;
	  var assert = System.get("traceur@0.0.87/src/util/assert.js").assert;
	  var NOT_STARTED = 0;
	  var LOADING = 1;
	  var LOADED = 2;
	  var PARSED = 3;
	  var TRANSFORMING = 4;
	  var TRANSFORMED = 5;
	  var COMPLETE = 6;
	  var ERROR = 7;
	  var identifierGenerator = new UniqueIdentifierGenerator();
	  var anonymousSourcesSeen = 0;
	  var LoaderCompiler = function LoaderCompiler() {
	    ;
	  };
	  ($traceurRuntime.createClass)(LoaderCompiler, {
	    getModuleSpecifiers: function(codeUnit) {
	      this.parse(codeUnit);
	      codeUnit.state = PARSED;
	      var moduleSpecifierVisitor = new ModuleSpecifierVisitor(codeUnit.metadata.traceurOptions);
	      moduleSpecifierVisitor.visit(codeUnit.metadata.tree);
	      return moduleSpecifierVisitor.moduleSpecifiers;
	    },
	    parse: function(codeUnit) {
	      assert(!codeUnit.metadata.tree);
	      var metadata = codeUnit.metadata;
	      var options = metadata.traceurOptions;
	      if (codeUnit.type === 'script')
	        options.script = true;
	      metadata.compiler = new Compiler(options);
	      var sourceName = codeUnit.metadata.sourceName = codeUnit.address || codeUnit.normalizedName || String(++anonymousSourcesSeen);
	      metadata.tree = metadata.compiler.parse(codeUnit.source, sourceName);
	    },
	    transform: function(codeUnit) {
	      var metadata = codeUnit.metadata;
	      metadata.transformedTree = metadata.compiler.transform(metadata.tree, codeUnit.normalizedName);
	    },
	    write: function(codeUnit) {
	      var metadata = codeUnit.metadata;
	      var outputName = metadata.outputName || metadata.sourceName || '<loaderOutput>';
	      var sourceRoot = metadata.sourceRoot;
	      var sourceURL = metadata.sourceName || codeUnit.normalizedName || codeUnit.address;
	      metadata.transcoded = metadata.compiler.write(metadata.transformedTree, outputName, undefined, sourceURL);
	    },
	    evaluateCodeUnit: function(codeUnit) {
	      var result = ('global', eval)(codeUnit.metadata.transcoded);
	      codeUnit.metadata.transformedTree = null;
	      return result;
	    },
	    analyzeDependencies: function(dependencies, loader) {
	      var deps = [];
	      for (var i = 0; i < dependencies.length; i++) {
	        var codeUnit = dependencies[i];
	        assert(codeUnit.state >= PARSED);
	        if (codeUnit.state == PARSED) {
	          var symbol = codeUnit.metadata.moduleSymbol = new ModuleSymbol(codeUnit.metadata.tree, codeUnit.normalizedName);
	          deps.push(symbol);
	        }
	      }
	      this.checkForErrors((function(reporter) {
	        return buildExportList(deps, loader, reporter);
	      }));
	    },
	    checkForErrors: function(fncOfReporter) {
	      var reporter = new CollectingErrorReporter();
	      var result = fncOfReporter(reporter);
	      if (reporter.hadError())
	        throw reporter.toError();
	      return result;
	    }
	  }, {});
	  return {get LoaderCompiler() {
	      return LoaderCompiler;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/runtime/InternalLoader.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/runtime/InternalLoader.js";
	  var assert = System.get("traceur@0.0.87/src/util/assert.js").assert;
	  var LoaderCompiler = System.get("traceur@0.0.87/src/runtime/LoaderCompiler.js").LoaderCompiler;
	  var ExportsList = System.get("traceur@0.0.87/src/codegeneration/module/ModuleSymbol.js").ExportsList;
	  var Map = System.get("traceur@0.0.87/src/runtime/polyfills/Map.js").Map;
	  var $__4 = System.get("traceur@0.0.87/src/util/url.js"),
	      isAbsolute = $__4.isAbsolute,
	      resolveUrl = $__4.resolveUrl;
	  var Options = System.get("traceur@0.0.87/src/Options.js").Options;
	  var NOT_STARTED = 0;
	  var LOADING = 1;
	  var LOADED = 2;
	  var PARSED = 3;
	  var TRANSFORMING = 4;
	  var TRANSFORMED = 5;
	  var COMPLETE = 6;
	  var ERROR = 7;
	  function mapToValues(map) {
	    var array = [];
	    map.forEach((function(v) {
	      array.push(v);
	    }));
	    return array;
	  }
	  var LoaderError = function LoaderError(msg, tree) {
	    $traceurRuntime.superConstructor($LoaderError).call(this);
	    this.message = msg;
	    this.tree = tree;
	    this.name = 'LoaderError';
	  };
	  var $LoaderError = LoaderError;
	  ($traceurRuntime.createClass)(LoaderError, {}, {}, Error);
	  var CodeUnit = function CodeUnit(loaderCompiler, normalizedName, type, state, name, referrerName, address) {
	    var $__6 = this;
	    this.promise = new Promise((function(res, rej) {
	      $__6.loaderCompiler = loaderCompiler;
	      $__6.normalizedName = normalizedName;
	      $__6.type = type;
	      $__6.name_ = name;
	      $__6.referrerName_ = referrerName;
	      $__6.address = address;
	      $__6.state_ = state || NOT_STARTED;
	      $__6.error = null;
	      $__6.result = null;
	      $__6.metadata_ = {};
	      $__6.dependencies = [];
	      $__6.resolve = res;
	      $__6.reject = rej;
	    }));
	  };
	  ($traceurRuntime.createClass)(CodeUnit, {
	    get state() {
	      return this.state_;
	    },
	    set state(value) {
	      if (value < this.state_) {
	        throw new Error('Invalid state change');
	      }
	      this.state_ = value;
	    },
	    get metadata() {
	      return this.metadata_;
	    },
	    set metadata(value) {
	      assert(value);
	      this.metadata_ = value;
	    },
	    nameTrace: function() {
	      var trace = this.specifiedAs();
	      if (isAbsolute(this.name_)) {
	        return trace + 'An absolute name.\n';
	      }
	      if (this.referrerName_) {
	        return trace + this.importedBy() + this.normalizesTo();
	      }
	      return trace + this.normalizesTo();
	    },
	    specifiedAs: function() {
	      return ("Specified as " + this.name_ + ".\n");
	    },
	    importedBy: function() {
	      return ("Imported by " + this.referrerName_ + ".\n");
	    },
	    normalizesTo: function() {
	      return 'Normalizes to ' + this.normalizedName + '\n';
	    }
	  }, {});
	  var PreCompiledCodeUnit = function PreCompiledCodeUnit(loaderCompiler, normalizedName, name, referrerName, address, module) {
	    $traceurRuntime.superConstructor($PreCompiledCodeUnit).call(this, loaderCompiler, normalizedName, 'module', COMPLETE, name, referrerName, address);
	    this.result = module;
	    this.resolve(this.result);
	  };
	  var $PreCompiledCodeUnit = PreCompiledCodeUnit;
	  ($traceurRuntime.createClass)(PreCompiledCodeUnit, {}, {}, CodeUnit);
	  var BundledCodeUnit = function BundledCodeUnit(loaderCompiler, normalizedName, name, referrerName, address, deps, execute) {
	    $traceurRuntime.superConstructor($BundledCodeUnit).call(this, loaderCompiler, normalizedName, 'module', TRANSFORMED, name, referrerName, address);
	    this.deps = deps;
	    this.execute = execute;
	  };
	  var $BundledCodeUnit = BundledCodeUnit;
	  ($traceurRuntime.createClass)(BundledCodeUnit, {
	    getModuleSpecifiers: function() {
	      return this.deps;
	    },
	    evaluate: function() {
	      var $__6 = this;
	      var normalizedNames = this.deps.map((function(name) {
	        return $__6.loader_.normalize(name);
	      }));
	      var module = this.execute.apply(Reflect.global, normalizedNames);
	      System.set(this.normalizedName, module);
	      return module;
	    }
	  }, {}, CodeUnit);
	  var HookedCodeUnit = function HookedCodeUnit() {
	    $traceurRuntime.superConstructor($HookedCodeUnit).apply(this, arguments);
	    ;
	  };
	  var $HookedCodeUnit = HookedCodeUnit;
	  ($traceurRuntime.createClass)(HookedCodeUnit, {
	    getModuleSpecifiers: function() {
	      return this.loaderCompiler.getModuleSpecifiers(this);
	    },
	    evaluate: function() {
	      return this.loaderCompiler.evaluateCodeUnit(this);
	    }
	  }, {}, CodeUnit);
	  var LoadCodeUnit = function LoadCodeUnit(loaderCompiler, normalizedName, name, referrerName, address) {
	    $traceurRuntime.superConstructor($LoadCodeUnit).call(this, loaderCompiler, normalizedName, 'module', NOT_STARTED, name, referrerName, address);
	  };
	  var $LoadCodeUnit = LoadCodeUnit;
	  ($traceurRuntime.createClass)(LoadCodeUnit, {}, {}, HookedCodeUnit);
	  var EvalCodeUnit = function EvalCodeUnit(loaderCompiler, code) {
	    var type = arguments[2] !== (void 0) ? arguments[2] : 'script';
	    var normalizedName = arguments[3];
	    var referrerName = arguments[4];
	    var address = arguments[5];
	    $traceurRuntime.superConstructor($EvalCodeUnit).call(this, loaderCompiler, normalizedName, type, LOADED, null, referrerName, address);
	    this.source = code;
	  };
	  var $EvalCodeUnit = EvalCodeUnit;
	  ($traceurRuntime.createClass)(EvalCodeUnit, {}, {}, HookedCodeUnit);
	  var uniqueNameCount = 0;
	  var InternalLoader = function InternalLoader(loader, loaderCompiler) {
	    assert(loaderCompiler);
	    this.loader_ = loader;
	    this.loaderCompiler = loaderCompiler;
	    this.cache = new Map();
	    this.urlToKey = Object.create(null);
	    this.sync_ = false;
	    this.sourceMapsByURL_ = Object.create(null);
	    this.sourceMapsByOutputName_ = Object.create(null);
	  };
	  ($traceurRuntime.createClass)(InternalLoader, {
	    defaultMetadata_: function() {
	      var metadata = arguments[0] !== (void 0) ? arguments[0] : {};
	      var incoming = metadata.traceurOptions;
	      if (incoming && !(incoming instanceof Options)) {
	        var unknown = Options.listUnknownOptions(incoming);
	        if (unknown.length) {
	          console.warn('Unknown metadata.traceurOptions ignored: ' + unknown.join(','));
	        }
	      }
	      metadata.traceurOptions = incoming || new Options();
	      return metadata;
	    },
	    defaultModuleMetadata_: function() {
	      var metadata = arguments[0] !== (void 0) ? arguments[0] : {};
	      var metadata = this.defaultMetadata_(metadata);
	      metadata.traceurOptions.script = false;
	      return metadata;
	    },
	    getSourceMap: function(url) {
	      return this.sourceMapsByURL_[url] || this.sourceMapsByOutputName_[url];
	    },
	    load: function(name) {
	      var referrerName = arguments[1] !== (void 0) ? arguments[1] : this.loader_.baseURL;
	      var address = arguments[2];
	      var metadata = arguments[3] !== (void 0) ? arguments[3] : {};
	      metadata = this.defaultMetadata_(metadata);
	      var codeUnit = this.getOrCreateCodeUnit_(name, referrerName, address, metadata);
	      this.load_(codeUnit);
	      return codeUnit.promise.then((function() {
	        return codeUnit;
	      }));
	    },
	    load_: function(codeUnit) {
	      var $__6 = this;
	      if (codeUnit.state === ERROR) {
	        return codeUnit;
	      }
	      if (codeUnit.state === TRANSFORMED) {
	        this.handleCodeUnitLoaded(codeUnit);
	      } else {
	        if (codeUnit.state !== NOT_STARTED)
	          return codeUnit;
	        codeUnit.state = LOADING;
	        codeUnit.address = this.loader_.locate(codeUnit);
	        this.loader_.fetch(codeUnit).then((function(text) {
	          codeUnit.source = text;
	          return codeUnit;
	        })).then((function(load) {
	          return $__6.loader_.translate(load);
	        })).then((function(source) {
	          codeUnit.source = source;
	          codeUnit.state = LOADED;
	          $__6.handleCodeUnitLoaded(codeUnit);
	          return codeUnit;
	        })).catch((function(err) {
	          try {
	            codeUnit.state = ERROR;
	            codeUnit.error = err;
	            $__6.handleCodeUnitLoadError(codeUnit);
	          } catch (ex) {
	            console.error('Internal Error ' + (ex.stack || ex));
	          }
	        }));
	      }
	      return codeUnit;
	    },
	    module: function(code, referrerName, address, metadata) {
	      var codeUnit = new EvalCodeUnit(this.loaderCompiler, code, 'module', null, referrerName, address);
	      codeUnit.metadata = this.defaultMetadata_(metadata);
	      this.cache.set({}, codeUnit);
	      this.handleCodeUnitLoaded(codeUnit);
	      return codeUnit.promise;
	    },
	    define: function(normalizedName, code, address, metadata) {
	      var codeUnit = new EvalCodeUnit(this.loaderCompiler, code, 'module', normalizedName, null, address);
	      var key = this.getKey(normalizedName, 'module');
	      codeUnit.metadata = this.defaultMetadata_(metadata);
	      this.cache.set(key, codeUnit);
	      this.handleCodeUnitLoaded(codeUnit);
	      return codeUnit.promise;
	    },
	    script: function(code, name, referrerName, address, metadata) {
	      var normalizedName = System.normalize(name || '', referrerName, address);
	      var codeUnit = new EvalCodeUnit(this.loaderCompiler, code, 'script', normalizedName, referrerName, address);
	      var key = {};
	      if (name)
	        key = this.getKey(normalizedName, 'script');
	      codeUnit.metadata = this.defaultMetadata_(metadata);
	      this.cache.set(key, codeUnit);
	      this.handleCodeUnitLoaded(codeUnit);
	      return codeUnit.promise;
	    },
	    getKey: function(url, type) {
	      var combined = type + ':' + url;
	      if (combined in this.urlToKey) {
	        return this.urlToKey[combined];
	      }
	      return this.urlToKey[combined] = {};
	    },
	    getCodeUnit_: function(normalizedName, type) {
	      var key = this.getKey(normalizedName, type);
	      var codeUnit = this.cache.get(key);
	      return {
	        key: key,
	        codeUnit: codeUnit
	      };
	    },
	    getOrCreateCodeUnit_: function(name, referrerName, address, metadata) {
	      var normalizedName = System.normalize(name, referrerName, address);
	      var type = 'module';
	      if (metadata && metadata.traceurOptions && metadata.traceurOptions.script)
	        type = 'script';
	      var $__8 = this.getCodeUnit_(normalizedName, type),
	          key = $__8.key,
	          codeUnit = $__8.codeUnit;
	      if (!codeUnit) {
	        assert(metadata && metadata.traceurOptions);
	        var module = this.loader_.get(normalizedName);
	        if (module) {
	          codeUnit = new PreCompiledCodeUnit(this.loaderCompiler, normalizedName, name, referrerName, address, module);
	          codeUnit.type = 'module';
	        } else {
	          var bundledModule = this.loader_.bundledModule(name);
	          if (bundledModule) {
	            codeUnit = new BundledCodeUnit(this.loaderCompiler, normalizedName, name, referrerName, address, bundledModule.deps, bundledModule.execute);
	          } else {
	            codeUnit = new LoadCodeUnit(this.loaderCompiler, normalizedName, name, referrerName, address);
	            codeUnit.type = type;
	          }
	        }
	        codeUnit.metadata = {
	          traceurOptions: metadata.traceurOptions,
	          outputName: metadata.outputName
	        };
	        this.cache.set(key, codeUnit);
	      }
	      return codeUnit;
	    },
	    areAll: function(state) {
	      return mapToValues(this.cache).every((function(codeUnit) {
	        return codeUnit.state >= state;
	      }));
	    },
	    getCodeUnitForModuleSpecifier: function(name, referrerName) {
	      var normalizedName = this.loader_.normalize(name, referrerName);
	      return this.getCodeUnit_(normalizedName, 'module').codeUnit;
	    },
	    getExportsListForModuleSpecifier: function(name, referrer) {
	      var codeUnit = this.getCodeUnitForModuleSpecifier(name, referrer);
	      var exportsList = codeUnit.metadata.moduleSymbol;
	      if (!exportsList) {
	        if (codeUnit.result) {
	          exportsList = new ExportsList(codeUnit.normalizedName);
	          exportsList.addExportsFromModule(codeUnit.result);
	        } else {
	          throw new Error(("InternalError: " + name + " is not a module, required by " + referrer));
	        }
	      }
	      return exportsList;
	    },
	    handleCodeUnitLoaded: function(codeUnit) {
	      var $__6 = this;
	      var referrerName = codeUnit.normalizedName;
	      try {
	        var moduleSpecifiers = codeUnit.getModuleSpecifiers();
	        if (!moduleSpecifiers) {
	          this.abortAll(("No module specifiers in " + referrerName));
	          return ;
	        }
	        codeUnit.dependencies = moduleSpecifiers.sort().map((function(name) {
	          return $__6.getOrCreateCodeUnit_(name, referrerName, null, $__6.defaultModuleMetadata_(codeUnit.metadata));
	        }));
	      } catch (error) {
	        this.rejectOneAndAll(codeUnit, error);
	        return ;
	      }
	      codeUnit.dependencies.forEach((function(dependency) {
	        $__6.load_(dependency);
	      }));
	      if (this.areAll(PARSED)) {
	        try {
	          if (codeUnit.type === 'module')
	            this.analyze();
	          this.transform();
	          this.evaluate();
	        } catch (error) {
	          this.rejectOneAndAll(codeUnit, error);
	        }
	      }
	    },
	    rejectOneAndAll: function(codeUnit, error) {
	      codeUnit.state.ERROR;
	      codeUnit.error = error;
	      codeUnit.reject(error);
	      this.abortAll(error);
	    },
	    handleCodeUnitLoadError: function(codeUnit) {
	      var message = codeUnit.error ? String(codeUnit.error) + '\n' : ("Failed to load '" + codeUnit.address + "'.\n");
	      message += codeUnit.nameTrace() + this.loader_.nameTrace(codeUnit);
	      this.rejectOneAndAll(codeUnit, new Error(message));
	    },
	    abortAll: function(errorMessage) {
	      this.cache.forEach((function(codeUnit) {
	        if (codeUnit.state !== ERROR)
	          codeUnit.reject(errorMessage);
	      }));
	    },
	    analyze: function() {
	      this.loaderCompiler.analyzeDependencies(mapToValues(this.cache), this);
	    },
	    transform: function() {
	      this.transformDependencies_(mapToValues(this.cache));
	    },
	    transformDependencies_: function(dependencies, dependentName) {
	      for (var i = 0; i < dependencies.length; i++) {
	        var codeUnit = dependencies[i];
	        if (codeUnit.state >= TRANSFORMED) {
	          continue;
	        }
	        if (codeUnit.state === TRANSFORMING) {
	          var cir = codeUnit.normalizedName;
	          var cle = dependentName;
	          this.rejectOneAndAll(codeUnit, new Error(("Unsupported circular dependency between " + cir + " and " + cle)));
	          return ;
	        }
	        codeUnit.state = TRANSFORMING;
	        try {
	          this.transformCodeUnit_(codeUnit);
	        } catch (error) {
	          this.rejectOneAndAll(codeUnit, error);
	          return ;
	        }
	      }
	    },
	    transformCodeUnit_: function(codeUnit) {
	      this.transformDependencies_(codeUnit.dependencies, codeUnit.normalizedName);
	      if (codeUnit.state === ERROR)
	        return ;
	      this.loaderCompiler.transform(codeUnit);
	      codeUnit.state = TRANSFORMED;
	      this.loaderCompiler.write(codeUnit);
	      var info = codeUnit.metadata.compiler.sourceMapInfo;
	      if (info) {
	        this.sourceMapsByURL_[info.url] = info.map;
	        this.sourceMapsByOutputName_[info.outputName] = info.map;
	      }
	      this.loader_.instantiate(codeUnit);
	    },
	    orderDependencies: function() {
	      var visited = new Map();
	      var ordered = [];
	      function orderCodeUnits(codeUnit) {
	        if (visited.has(codeUnit)) {
	          return ;
	        }
	        visited.set(codeUnit, true);
	        codeUnit.dependencies.forEach(orderCodeUnits);
	        ordered.push(codeUnit);
	      }
	      this.cache.forEach(orderCodeUnits);
	      return ordered;
	    },
	    evaluate: function() {
	      var dependencies = this.orderDependencies();
	      for (var i = 0; i < dependencies.length; i++) {
	        var codeUnit = dependencies[i];
	        if (codeUnit.state >= COMPLETE) {
	          continue;
	        }
	        var result = void 0;
	        try {
	          result = codeUnit.evaluate();
	        } catch (ex) {
	          this.rejectOneAndAll(codeUnit, ex);
	          return ;
	        }
	        codeUnit.result = result;
	        codeUnit.source = null;
	      }
	      for (var i = 0; i < dependencies.length; i++) {
	        var codeUnit = dependencies[i];
	        if (codeUnit.state >= COMPLETE) {
	          continue;
	        }
	        codeUnit.state = COMPLETE;
	        codeUnit.resolve(codeUnit.result);
	      }
	    }
	  }, {});
	  var internals = {
	    CodeUnit: CodeUnit,
	    EvalCodeUnit: EvalCodeUnit,
	    LoadCodeUnit: LoadCodeUnit,
	    LoaderCompiler: LoaderCompiler
	  };
	  return {
	    get InternalLoader() {
	      return InternalLoader;
	    },
	    get internals() {
	      return internals;
	    }
	  };
	});
	System.registerModule("traceur@0.0.87/src/runtime/Loader.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/runtime/Loader.js";
	  var InternalLoader = System.get("traceur@0.0.87/src/runtime/InternalLoader.js").InternalLoader;
	  function throwAbstractMethod() {
	    throw new Error('Unimplemented Loader function, see extended class');
	  }
	  var Loader = function Loader(loaderCompiler) {
	    this.internalLoader_ = new InternalLoader(this, loaderCompiler);
	    this.loaderCompiler_ = loaderCompiler;
	  };
	  ($traceurRuntime.createClass)(Loader, {
	    import: function(name) {
	      var $__3 = arguments[1] !== (void 0) ? arguments[1] : {},
	          referrerName = $__3.referrerName,
	          address = $__3.address,
	          metadata = $__3.metadata;
	      var $__1 = this;
	      return this.internalLoader_.load(name, referrerName, address, metadata).then((function(codeUnit) {
	        return $__1.get(codeUnit.normalizedName);
	      }));
	    },
	    module: function(source) {
	      var $__3 = arguments[1] !== (void 0) ? arguments[1] : {},
	          referrerName = $__3.referrerName,
	          address = $__3.address,
	          metadata = $__3.metadata;
	      return this.internalLoader_.module(source, referrerName, address, metadata);
	    },
	    define: function(normalizedName, source) {
	      var $__3 = arguments[2] !== (void 0) ? arguments[2] : {},
	          address = $__3.address,
	          metadata = $__3.metadata,
	          metadata = $__3.metadata;
	      return this.internalLoader_.define(normalizedName, source, address, metadata);
	    },
	    get: function(normalizedName) {
	      throwAbstractMethod();
	    },
	    set: function(normalizedName, module) {
	      throwAbstractMethod();
	    },
	    normalize: function(name, referrerName, referrerAddress) {
	      throwAbstractMethod();
	    },
	    locate: function(load) {
	      throwAbstractMethod();
	    },
	    fetch: function(load) {
	      throwAbstractMethod();
	    },
	    translate: function(load) {
	      throwAbstractMethod();
	    },
	    instantiate: function(load) {
	      throwAbstractMethod();
	    }
	  }, {});
	  ;
	  return {
	    get Loader() {
	      return Loader;
	    },
	    get LoaderCompiler() {
	      return LoaderCompiler;
	    }
	  };
	});
	System.registerModule("traceur@0.0.87/src/runtime/TraceurLoader.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/runtime/TraceurLoader.js";
	  var $__0 = System.get("traceur@0.0.87/src/util/url.js"),
	      isAbsolute = $__0.isAbsolute,
	      resolveUrl = $__0.resolveUrl;
	  var Loader = System.get("traceur@0.0.87/src/runtime/Loader.js").Loader;
	  var LoaderCompiler = System.get("traceur@0.0.87/src/runtime/LoaderCompiler.js").LoaderCompiler;
	  var systemjs = System.get("traceur@0.0.87/src/runtime/system-map.js").systemjs;
	  var version = __moduleName.slice(0, __moduleName.indexOf('/'));
	  var uniqueNameCount = 0;
	  var TraceurLoader = function TraceurLoader(fileLoader, baseURL) {
	    var loaderCompiler = arguments[2] !== (void 0) ? arguments[2] : new LoaderCompiler();
	    $traceurRuntime.superConstructor($TraceurLoader).call(this, loaderCompiler);
	    this.fileLoader_ = fileLoader;
	    this.baseURL_ = baseURL && String(baseURL);
	    this.moduleStore_ = $traceurRuntime.ModuleStore;
	  };
	  var $TraceurLoader = TraceurLoader;
	  ($traceurRuntime.createClass)(TraceurLoader, {
	    get baseURL() {
	      return this.baseURL_;
	    },
	    set baseURL(value) {
	      this.baseURL_ = String(value);
	    },
	    get: function(normalizedName) {
	      return this.moduleStore_.get(normalizedName);
	    },
	    set: function(normalizedName, module) {
	      this.moduleStore_.set(normalizedName, module);
	    },
	    normalize: function(name, referrerName, referrerAddress) {
	      var normalizedName = this.moduleStore_.normalize(name, referrerName, referrerAddress);
	      if (typeof systemjs !== 'undefined' && System.map)
	        return systemjs.applyMap(System.map, normalizedName, referrerName);
	      return normalizedName;
	    },
	    locate: function(load) {
	      load.metadata.traceurOptions = load.metadata.traceurOptions || {};
	      var url = load.normalizedName;
	      var options = load.metadata.traceurOptions;
	      var baseURL = load.metadata && load.metadata.baseURL;
	      baseURL = baseURL || this.baseURL;
	      var referrer = options && options.referrer;
	      if (referrer) {
	        var minChars = Math.min(referrer.length, baseURL.length);
	        var commonChars = 0;
	        for (var i = 0; i < minChars; i++) {
	          var aChar = referrer[referrer.length - 1 - i];
	          if (aChar === baseURL[baseURL.length - 1 - i])
	            commonChars++;
	          else
	            break;
	        }
	        if (commonChars) {
	          var packageName = referrer.slice(0, -commonChars);
	          var rootDirectory = baseURL.slice(0, -commonChars);
	          if (url.indexOf(packageName) === 0) {
	            url = url.replace(packageName, rootDirectory);
	          }
	        }
	      }
	      if (!isAbsolute(url)) {
	        if (baseURL) {
	          load.metadata.baseURL = baseURL;
	          url = resolveUrl(baseURL, url);
	        }
	      }
	      return url;
	    },
	    sourceName: function(load) {
	      var options = load.metadata.traceurOptions;
	      var sourceName = load.address;
	      if (options.sourceMaps) {
	        var sourceRoot = this.baseURL;
	        if (sourceName) {
	          if (sourceRoot && sourceName.indexOf(sourceRoot) === 0) {
	            sourceName = sourceName.substring(sourceRoot.length);
	          }
	        } else {
	          sourceName = this.baseURL + String(uniqueNameCount++);
	        }
	      }
	      return sourceName;
	    },
	    nameTrace: function(load) {
	      var trace = '';
	      if (load.metadata.locateMap) {
	        trace += this.locateMapTrace(load);
	      }
	      var base = load.metadata.baseURL || this.baseURL;
	      if (base) {
	        trace += this.baseURLTrace(base);
	      } else {
	        trace += 'No baseURL\n';
	      }
	      return trace;
	    },
	    locateMapTrace: function(load) {
	      var map = load.metadata.locateMap;
	      return ("locate found \'" + map.pattern + "\' -> \'" + map.replacement + "\'\n");
	    },
	    baseURLTrace: function(base) {
	      return 'locate resolved against base \'' + base + '\'\n';
	    },
	    fetch: function(load) {
	      var $__4 = this;
	      return new Promise((function(resolve, reject) {
	        if (!load)
	          reject(new TypeError('fetch requires argument object'));
	        else if (!load.address || typeof load.address !== 'string')
	          reject(new TypeError('fetch({address}) missing required string.'));
	        else
	          $__4.fileLoader_.load(load.address, resolve, reject);
	      }));
	    },
	    translate: function(load) {
	      return load.source;
	    },
	    instantiate: function($__6) {
	      var $__7 = $__6,
	          name = $__7.name,
	          metadata = $__7.metadata,
	          address = $__7.address,
	          source = $__7.source,
	          sourceMap = $__7.sourceMap;
	      return new Promise((function(resolve, reject) {
	        resolve(undefined);
	      }));
	    },
	    bundledModule: function(name) {
	      return this.moduleStore_.bundleStore[name];
	    },
	    importAll: function(names) {
	      var $__6 = arguments[1] !== (void 0) ? arguments[1] : {},
	          referrerName = $__6.referrerName,
	          address = $__6.address,
	          metadata = $__6.metadata;
	      var $__4 = this;
	      return Promise.all(names.map((function(name) {
	        return $__4.import(name, {
	          referrerName: referrerName,
	          address: address,
	          metadata: metadata
	        });
	      })));
	    },
	    loadAsScript: function(name) {
	      var $__7;
	      var $__6 = arguments[1] !== (void 0) ? arguments[1] : {},
	          referrerName = $__6.referrerName,
	          address = $__6.address,
	          metadata = ($__7 = $__6.metadata) === void 0 ? {} : $__7;
	      metadata.traceurOptions = metadata.traceurOptions || {};
	      metadata.traceurOptions.script = true;
	      return this.internalLoader_.load(name, referrerName, address, metadata).then((function(load) {
	        return load.result;
	      }));
	    },
	    loadAsScriptAll: function(names) {
	      var $__6 = arguments[1] !== (void 0) ? arguments[1] : {},
	          referrerName = $__6.referrerName,
	          address = $__6.address,
	          metadata = $__6.metadata;
	      var $__4 = this;
	      return Promise.all(names.map((function(name) {
	        return $__4.loadAsScript(name, {
	          referrerName: referrerName,
	          address: address,
	          metadata: metadata
	        });
	      })));
	    },
	    script: function(source) {
	      var $__6 = arguments[1] !== (void 0) ? arguments[1] : {},
	          name = $__6.name,
	          referrerName = $__6.referrerName,
	          address = $__6.address,
	          metadata = $__6.metadata;
	      return this.internalLoader_.script(source, name, referrerName, address, metadata);
	    },
	    semVerRegExp_: function() {
	      return /^(\d+)\.(\d+)\.(\d+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/;
	    },
	    semverMap: function(normalizedName) {
	      var slash = normalizedName.indexOf('/');
	      var version = normalizedName.slice(0, slash);
	      var at = version.indexOf('@');
	      if (at !== -1) {
	        var semver = version.slice(at + 1);
	        var m = this.semVerRegExp_().exec(semver);
	        if (m) {
	          var major = m[1];
	          var minor = m[2];
	          var packageName = version.slice(0, at);
	          var map = Object.create(null);
	          map[packageName] = version;
	          map[packageName + '@' + major] = version;
	          map[packageName + '@' + major + '.' + minor] = version;
	        }
	      }
	      return map;
	    },
	    get version() {
	      return version;
	    },
	    getSourceMap: function(filename) {
	      return this.internalLoader_.getSourceMap(filename);
	    },
	    register: function(normalizedName, deps, factoryFunction) {
	      $traceurRuntime.ModuleStore.register(normalizedName, deps, factoryFunction);
	    },
	    registerModule: function(normalizedName, deps, factoryFunction) {
	      $traceurRuntime.ModuleStore.registerModule(normalizedName, deps, factoryFunction);
	    }
	  }, {}, Loader);
	  return {get TraceurLoader() {
	      return TraceurLoader;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/runtime/webLoader.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/runtime/webLoader.js";
	  var webLoader = {load: function(url, callback, errback) {
	      var xhr = new XMLHttpRequest();
	      xhr.onload = (function() {
	        if (xhr.status == 200 || xhr.status == 0) {
	          callback(xhr.responseText);
	        } else {
	          var err;
	          if (xhr.status === 404)
	            err = 'File not found \'' + url + '\'';
	          else
	            err = xhr.status + xhr.statusText;
	          errback(err);
	        }
	        xhr = null;
	      });
	      xhr.onerror = (function(err) {
	        errback(err);
	      });
	      xhr.open('GET', url, true);
	      xhr.send();
	      return (function() {
	        xhr && xhr.abort();
	      });
	    }};
	  return {get webLoader() {
	      return webLoader;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/WebPageTranscoder.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/WebPageTranscoder.js";
	  var Loader = System.get("traceur@0.0.87/src/runtime/Loader.js").Loader;
	  var TraceurLoader = System.get("traceur@0.0.87/src/runtime/TraceurLoader.js").TraceurLoader;
	  var ErrorReporter = System.get("traceur@0.0.87/src/util/ErrorReporter.js").ErrorReporter;
	  var webLoader = System.get("traceur@0.0.87/src/runtime/webLoader.js").webLoader;
	  var scriptSelector = 'script[type="module"],script[type="text/traceur"]';
	  var WebPageTranscoder = function WebPageTranscoder(url) {
	    this.url = url;
	    this.numPending_ = 0;
	    this.numberInlined_ = 0;
	  };
	  ($traceurRuntime.createClass)(WebPageTranscoder, {
	    asyncLoad_: function(url, fncOfContent, onScriptsReady) {
	      var $__4 = this;
	      this.numPending_++;
	      webLoader.load(url, (function(content) {
	        if (content)
	          fncOfContent(content);
	        else
	          console.warn('Failed to load', url);
	        if (--$__4.numPending_ <= 0)
	          onScriptsReady();
	      }), (function(error) {
	        console.error('WebPageTranscoder FAILED to load ' + url, error.stack || error);
	      }));
	    },
	    addFileFromScriptElement: function(scriptElement, name, content) {
	      var options = $traceurRuntime.options;
	      var nameInfo = {
	        address: name,
	        referrerName: window.location.href,
	        name: name,
	        metadata: {traceurOptions: options}
	      };
	      var loadingResult;
	      if (scriptElement.type === 'module')
	        loadingResult = this.loader.module(content, nameInfo);
	      else
	        loadingResult = this.loader.script(content, nameInfo);
	      loadingResult.catch(function(error) {
	        console.error(error.stack || error);
	      });
	    },
	    nextInlineScriptName_: function() {
	      this.numberInlined_ += 1;
	      if (!this.inlineScriptNameBase_) {
	        var segments = this.url.split('.');
	        segments.pop();
	        this.inlineScriptNameBase_ = segments.join('.');
	      }
	      return this.inlineScriptNameBase_ + '_' + this.numberInlined_ + '.js';
	    },
	    addFilesFromScriptElements: function(scriptElements, onScriptsReady) {
	      for (var i = 0,
	          length = scriptElements.length; i < length; i++) {
	        var scriptElement = scriptElements[i];
	        if (!scriptElement.src) {
	          var name = this.nextInlineScriptName_();
	          var content = scriptElement.textContent;
	          this.addFileFromScriptElement(scriptElement, name, content);
	        } else {
	          var name$__6 = scriptElement.src;
	          this.asyncLoad_(name$__6, this.addFileFromScriptElement.bind(this, scriptElement, name$__6), onScriptsReady);
	        }
	      }
	      if (this.numPending_ <= 0)
	        onScriptsReady();
	    },
	    get reporter() {
	      if (!this.reporter_) {
	        this.reporter_ = new ErrorReporter();
	      }
	      return this.reporter_;
	    },
	    get loader() {
	      if (!this.loader_) {
	        this.loader_ = new TraceurLoader(webLoader, this.url);
	      }
	      return this.loader_;
	    },
	    putFile: function(file) {
	      var scriptElement = document.createElement('script');
	      scriptElement.setAttribute('data-traceur-src-url', file.name);
	      scriptElement.textContent = file.generatedSource;
	      var parent = file.scriptElement.parentNode;
	      parent.insertBefore(scriptElement, file.scriptElement || null);
	    },
	    selectAndProcessScripts: function(done) {
	      var selector = scriptSelector;
	      var scripts = document.querySelectorAll(selector);
	      if (!scripts.length) {
	        done();
	        return ;
	      }
	      this.addFilesFromScriptElements(scripts, (function() {
	        done();
	      }));
	    },
	    run: function() {
	      var done = arguments[0] !== (void 0) ? arguments[0] : (function() {});
	      var $__4 = this;
	      var ready = document.readyState;
	      if (ready === 'complete' || ready === 'loaded') {
	        this.selectAndProcessScripts(done);
	      } else {
	        document.addEventListener('DOMContentLoaded', (function() {
	          return $__4.selectAndProcessScripts(done);
	        }), false);
	      }
	    }
	  }, {});
	  return {
	    get scriptSelector() {
	      return scriptSelector;
	    },
	    get WebPageTranscoder() {
	      return WebPageTranscoder;
	    }
	  };
	});
	System.registerModule("traceur@0.0.87/src/HTMLImportTranscoder.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/HTMLImportTranscoder.js";
	  var StringMap = System.get("traceur@0.0.87/src/util/StringMap.js").StringMap;
	  var $__1 = System.get("traceur@0.0.87/src/WebPageTranscoder.js"),
	      WebPageTranscoder = $__1.WebPageTranscoder,
	      scriptSelector = $__1.scriptSelector;
	  var importSelector = 'link[rel=import][href]';
	  var HTMLImportTranscoder = function HTMLImportTranscoder() {
	    this.importsToProcess_ = [];
	  };
	  ($traceurRuntime.createClass)(HTMLImportTranscoder, {
	    findAllChildrenHTMLImports_: function(parentImportNodes) {
	      var foundImportNodes = [];
	      for (var parentIndex = 0; parentIndex < parentImportNodes.length; parentIndex++) {
	        var parentLink = parentImportNodes[parentIndex];
	        var childImportNodes = parentLink.import.querySelectorAll(importSelector);
	        if (childImportNodes.length > 0)
	          this.findAllChildrenHTMLImports_(childImportNodes);
	        this.importsToProcess_.push(parentLink);
	      }
	    },
	    filterHTMLImports_: function(importNodes) {
	      this.findAllChildrenHTMLImports_(importNodes);
	      var importsToParse = [];
	      var dupFilterMap = new StringMap();
	      for (var index = 0; index < this.importsToProcess_.length; index++) {
	        var processLink = this.importsToProcess_[index];
	        if (!dupFilterMap.has(processLink.href)) {
	          dupFilterMap.set(processLink.href, 0);
	          var scripts = processLink.import.querySelectorAll(scriptSelector);
	          if (scripts.length > 0)
	            importsToParse.push({
	              href: processLink.href,
	              scripts: scripts
	            });
	        }
	      }
	      this.importsToProcess_ = [];
	      return importsToParse;
	    },
	    selectAndProcessHTMLImports: function(importNodes, done) {
	      var importInfoList = this.filterHTMLImports_(importNodes);
	      if (importInfoList.length === 0)
	        done();
	      var processCount = importInfoList.length;
	      importInfoList.forEach((function(importInfo) {
	        var transcoder = new WebPageTranscoder(importInfo.href);
	        transcoder.addFilesFromScriptElements(importInfo.scripts, (function() {
	          processCount--;
	          if (processCount === 0 && done)
	            done();
	        }));
	      }));
	    },
	    run: function() {
	      var done = arguments[0] !== (void 0) ? arguments[0] : (function() {});
	      var $__2 = this;
	      var ready = document.readyState;
	      if (ready === 'complete' || ready === 'loaded') {
	        var importNodes = document.querySelectorAll(importSelector);
	        if (importNodes.length > 0)
	          this.selectAndProcessHTMLImports(importNodes, done);
	      } else {
	        document.addEventListener('HTMLImportsLoaded', (function(event) {
	          var importNodes = event.detail && event.detail.allImports ? event.detail.allImports : document.querySelectorAll(importSelector);
	          if (importNodes.length > 0)
	            $__2.selectAndProcessHTMLImports(importNodes, done);
	        }));
	      }
	    }
	  }, {});
	  return {get HTMLImportTranscoder() {
	      return HTMLImportTranscoder;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/CloneTreeTransformer.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/CloneTreeTransformer.js";
	  var ParseTreeTransformer = System.get("traceur@0.0.87/src/codegeneration/ParseTreeTransformer.js").ParseTreeTransformer;
	  var $__1 = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js"),
	      BindingIdentifier = $__1.BindingIdentifier,
	      BreakStatement = $__1.BreakStatement,
	      ContinueStatement = $__1.ContinueStatement,
	      DebuggerStatement = $__1.DebuggerStatement,
	      EmptyStatement = $__1.EmptyStatement,
	      ExportSpecifier = $__1.ExportSpecifier,
	      ExportStar = $__1.ExportStar,
	      IdentifierExpression = $__1.IdentifierExpression,
	      LiteralExpression = $__1.LiteralExpression,
	      ModuleSpecifier = $__1.ModuleSpecifier,
	      PredefinedType = $__1.PredefinedType,
	      PropertyNameShorthand = $__1.PropertyNameShorthand,
	      TemplateLiteralPortion = $__1.TemplateLiteralPortion,
	      SuperExpression = $__1.SuperExpression,
	      ThisExpression = $__1.ThisExpression;
	  var CloneTreeTransformer = function CloneTreeTransformer() {
	    $traceurRuntime.superConstructor($CloneTreeTransformer).apply(this, arguments);
	    ;
	  };
	  var $CloneTreeTransformer = CloneTreeTransformer;
	  ($traceurRuntime.createClass)(CloneTreeTransformer, {
	    transformBindingIdentifier: function(tree) {
	      return new BindingIdentifier(tree.location, tree.identifierToken);
	    },
	    transformBreakStatement: function(tree) {
	      return new BreakStatement(tree.location, tree.name);
	    },
	    transformContinueStatement: function(tree) {
	      return new ContinueStatement(tree.location, tree.name);
	    },
	    transformDebuggerStatement: function(tree) {
	      return new DebuggerStatement(tree.location);
	    },
	    transformEmptyStatement: function(tree) {
	      return new EmptyStatement(tree.location);
	    },
	    transformExportSpecifier: function(tree) {
	      return new ExportSpecifier(tree.location, tree.lhs, tree.rhs);
	    },
	    transformExportStar: function(tree) {
	      return new ExportStar(tree.location);
	    },
	    transformIdentifierExpression: function(tree) {
	      return new IdentifierExpression(tree.location, tree.identifierToken);
	    },
	    transformList: function(list) {
	      if (!list) {
	        return null;
	      } else if (list.length === 0) {
	        return [];
	      } else {
	        return $traceurRuntime.superGet(this, $CloneTreeTransformer.prototype, "transformList").call(this, list);
	      }
	    },
	    transformLiteralExpression: function(tree) {
	      return new LiteralExpression(tree.location, tree.literalToken);
	    },
	    transformModuleSpecifier: function(tree) {
	      return new ModuleSpecifier(tree.location, tree.token);
	    },
	    transformPredefinedType: function(tree) {
	      return new PredefinedType(tree.location, tree.typeToken);
	    },
	    transformPropertyNameShorthand: function(tree) {
	      return new PropertyNameShorthand(tree.location, tree.name);
	    },
	    transformTemplateLiteralPortion: function(tree) {
	      return new TemplateLiteralPortion(tree.location, tree.value);
	    },
	    transformSuperExpression: function(tree) {
	      return new SuperExpression(tree.location);
	    },
	    transformThisExpression: function(tree) {
	      return new ThisExpression(tree.location);
	    }
	  }, {}, ParseTreeTransformer);
	  CloneTreeTransformer.cloneTree = function(tree) {
	    return new CloneTreeTransformer().transformAny(tree);
	  };
	  return {get CloneTreeTransformer() {
	      return CloneTreeTransformer;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/codegeneration/module/createModuleEvaluationStatement.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/codegeneration/module/createModuleEvaluationStatement.js";
	  var $__0 = Object.freeze(Object.defineProperties(["System.get(", " +'')"], {raw: {value: Object.freeze(["System.get(", " +'')"])}}));
	  var parseStatement = System.get("traceur@0.0.87/src/codegeneration/PlaceholderParser.js").parseStatement;
	  function createModuleEvaluationStatement(normalizedName) {
	    return parseStatement($__0, normalizedName);
	  }
	  return {get createModuleEvaluationStatement() {
	      return createModuleEvaluationStatement;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/runtime/InlineLoaderCompiler.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/runtime/InlineLoaderCompiler.js";
	  var LoaderCompiler = System.get("traceur@0.0.87/src/runtime/LoaderCompiler.js").LoaderCompiler;
	  var Script = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js").Script;
	  var InlineLoaderCompiler = function InlineLoaderCompiler(elements) {
	    $traceurRuntime.superConstructor($InlineLoaderCompiler).call(this);
	    this.elements = elements;
	  };
	  var $InlineLoaderCompiler = InlineLoaderCompiler;
	  ($traceurRuntime.createClass)(InlineLoaderCompiler, {
	    write: function() {},
	    evaluateCodeUnit: function(codeUnit) {
	      var $__3;
	      var tree = codeUnit.metadata.transformedTree;
	      ($__3 = this.elements).push.apply($__3, $traceurRuntime.spread(tree.scriptItemList));
	    },
	    toTree: function() {
	      return new Script(null, this.elements);
	    }
	  }, {}, LoaderCompiler);
	  return {get InlineLoaderCompiler() {
	      return InlineLoaderCompiler;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/runtime/System.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/runtime/System.js";
	  var ErrorReporter = System.get("traceur@0.0.87/src/util/ErrorReporter.js").ErrorReporter;
	  var TraceurLoader = System.get("traceur@0.0.87/src/runtime/TraceurLoader.js").TraceurLoader;
	  var LoaderCompiler = System.get("traceur@0.0.87/src/runtime/LoaderCompiler.js").LoaderCompiler;
	  var webLoader = System.get("traceur@0.0.87/src/runtime/webLoader.js").webLoader;
	  var url;
	  var fileLoader;
	  if (typeof window !== 'undefined' && window.location) {
	    url = window.location.href;
	    fileLoader = webLoader;
	  }
	  var traceurLoader = new TraceurLoader(fileLoader, url);
	  Reflect.global.System = traceurLoader;
	  ;
	  traceurLoader.map = traceurLoader.semverMap(__moduleName);
	  return {get System() {
	      return traceurLoader;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/util/MutedErrorReporter.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/util/MutedErrorReporter.js";
	  var ErrorReporter = System.get("traceur@0.0.87/src/util/ErrorReporter.js").ErrorReporter;
	  var MutedErrorReporter = function MutedErrorReporter() {
	    $traceurRuntime.superConstructor($MutedErrorReporter).apply(this, arguments);
	    ;
	  };
	  var $MutedErrorReporter = MutedErrorReporter;
	  ($traceurRuntime.createClass)(MutedErrorReporter, {reportMessageInternal: function(location, format, args) {}}, {}, ErrorReporter);
	  return {get MutedErrorReporter() {
	      return MutedErrorReporter;
	    }};
	});
	System.registerModule("traceur@0.0.87/src/traceur.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/traceur.js";
	  var $__traceur_64_0_46_0_46_87_47_src_47_runtime_47_System_46_js__ = System.get("traceur@0.0.87/src/runtime/System.js");
	  System.get("traceur@0.0.87/src/util/MutedErrorReporter.js");
	  var $___64_traceur_47_src_47_runtime_47_ModuleStore_46_js__ = System.get("@traceur/src/runtime/ModuleStore.js");
	  var $__traceur_64_0_46_0_46_87_47_src_47_WebPageTranscoder_46_js__ = System.get("traceur@0.0.87/src/WebPageTranscoder.js");
	  var $__traceur_64_0_46_0_46_87_47_src_47_HTMLImportTranscoder_46_js__ = System.get("traceur@0.0.87/src/HTMLImportTranscoder.js");
	  var $__0 = System.get("traceur@0.0.87/src/Options.js"),
	      addOptions = $__0.addOptions,
	      CommandOptions = $__0.CommandOptions,
	      Options = $__0.Options;
	  var ModuleStore = System.get("@traceur/src/runtime/ModuleStore.js").ModuleStore;
	  function get(name) {
	    return ModuleStore.get(ModuleStore.normalize('./' + name, __moduleName));
	  }
	  var $__traceur_64_0_46_0_46_87_47_src_47_Compiler_46_js__ = System.get("traceur@0.0.87/src/Compiler.js");
	  var ErrorReporter = System.get("traceur@0.0.87/src/util/ErrorReporter.js").ErrorReporter;
	  var CollectingErrorReporter = System.get("traceur@0.0.87/src/util/CollectingErrorReporter.js").CollectingErrorReporter;
	  var util = {
	    addOptions: addOptions,
	    CommandOptions: CommandOptions,
	    CollectingErrorReporter: CollectingErrorReporter,
	    ErrorReporter: ErrorReporter,
	    Options: Options
	  };
	  var Parser = System.get("traceur@0.0.87/src/syntax/Parser.js").Parser;
	  var Scanner = System.get("traceur@0.0.87/src/syntax/Scanner.js").Scanner;
	  var Script = System.get("traceur@0.0.87/src/syntax/trees/ParseTrees.js").Script;
	  var SourceFile = System.get("traceur@0.0.87/src/syntax/SourceFile.js").SourceFile;
	  var syntax = {
	    Parser: Parser,
	    Scanner: Scanner,
	    SourceFile: SourceFile,
	    trees: {Script: Script}
	  };
	  var ParseTreeMapWriter = System.get("traceur@0.0.87/src/outputgeneration/ParseTreeMapWriter.js").ParseTreeMapWriter;
	  var ParseTreeWriter = System.get("traceur@0.0.87/src/outputgeneration/ParseTreeWriter.js").ParseTreeWriter;
	  var regexpuRewritePattern = System.get("traceur@0.0.87/src/outputgeneration/regexpuRewritePattern.js").regexpuRewritePattern;
	  var SourceMapConsumer = System.get("traceur@0.0.87/src/outputgeneration/SourceMapIntegration.js").SourceMapConsumer;
	  var SourceMapGenerator = System.get("traceur@0.0.87/src/outputgeneration/SourceMapIntegration.js").SourceMapGenerator;
	  var TreeWriter = System.get("traceur@0.0.87/src/outputgeneration/TreeWriter.js").TreeWriter;
	  var outputgeneration = {
	    ParseTreeMapWriter: ParseTreeMapWriter,
	    ParseTreeWriter: ParseTreeWriter,
	    regexpuRewritePattern: regexpuRewritePattern,
	    SourceMapConsumer: SourceMapConsumer,
	    SourceMapGenerator: SourceMapGenerator,
	    TreeWriter: TreeWriter
	  };
	  var AttachModuleNameTransformer = System.get("traceur@0.0.87/src/codegeneration/module/AttachModuleNameTransformer.js").AttachModuleNameTransformer;
	  var CloneTreeTransformer = System.get("traceur@0.0.87/src/codegeneration/CloneTreeTransformer.js").CloneTreeTransformer;
	  var FromOptionsTransformer = System.get("traceur@0.0.87/src/codegeneration/FromOptionsTransformer.js").FromOptionsTransformer;
	  var PureES6Transformer = System.get("traceur@0.0.87/src/codegeneration/PureES6Transformer.js").PureES6Transformer;
	  var createModuleEvaluationStatement = System.get("traceur@0.0.87/src/codegeneration/module/createModuleEvaluationStatement.js").createModuleEvaluationStatement;
	  var $__19 = System.get("traceur@0.0.87/src/codegeneration/PlaceholderParser.js"),
	      parseExpression = $__19.parseExpression,
	      parseModule = $__19.parseModule,
	      parseScript = $__19.parseScript,
	      parseStatement = $__19.parseStatement;
	  var codegeneration = {
	    CloneTreeTransformer: CloneTreeTransformer,
	    FromOptionsTransformer: FromOptionsTransformer,
	    PureES6Transformer: PureES6Transformer,
	    parseExpression: parseExpression,
	    parseModule: parseModule,
	    parseScript: parseScript,
	    parseStatement: parseStatement,
	    module: {
	      AttachModuleNameTransformer: AttachModuleNameTransformer,
	      createModuleEvaluationStatement: createModuleEvaluationStatement
	    }
	  };
	  var Loader = System.get("traceur@0.0.87/src/runtime/Loader.js").Loader;
	  var LoaderCompiler = System.get("traceur@0.0.87/src/runtime/LoaderCompiler.js").LoaderCompiler;
	  var InlineLoaderCompiler = System.get("traceur@0.0.87/src/runtime/InlineLoaderCompiler.js").InlineLoaderCompiler;
	  var TraceurLoader = System.get("traceur@0.0.87/src/runtime/TraceurLoader.js").TraceurLoader;
	  var runtime = {
	    InlineLoaderCompiler: InlineLoaderCompiler,
	    Loader: Loader,
	    LoaderCompiler: LoaderCompiler,
	    TraceurLoader: TraceurLoader
	  };
	  return {
	    get System() {
	      return $__traceur_64_0_46_0_46_87_47_src_47_runtime_47_System_46_js__.System;
	    },
	    get ModuleStore() {
	      return $___64_traceur_47_src_47_runtime_47_ModuleStore_46_js__.ModuleStore;
	    },
	    get WebPageTranscoder() {
	      return $__traceur_64_0_46_0_46_87_47_src_47_WebPageTranscoder_46_js__.WebPageTranscoder;
	    },
	    get HTMLImportTranscoder() {
	      return $__traceur_64_0_46_0_46_87_47_src_47_HTMLImportTranscoder_46_js__.HTMLImportTranscoder;
	    },
	    get get() {
	      return get;
	    },
	    get Compiler() {
	      return $__traceur_64_0_46_0_46_87_47_src_47_Compiler_46_js__.Compiler;
	    },
	    get util() {
	      return util;
	    },
	    get syntax() {
	      return syntax;
	    },
	    get outputgeneration() {
	      return outputgeneration;
	    },
	    get codegeneration() {
	      return codegeneration;
	    },
	    get runtime() {
	      return runtime;
	    }
	  };
	});
	System.registerModule("traceur@0.0.87/src/traceur-import.js", [], function() {
	  "use strict";
	  var __moduleName = "traceur@0.0.87/src/traceur-import.js";
	  var traceur = System.get("traceur@0.0.87/src/traceur.js");
	  Reflect.global.traceur = traceur;
	  $traceurRuntime.ModuleStore.set('traceur@', traceur);
	  return {};
	});
	System.get("traceur@0.0.87/src/traceur-import.js" + '');

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(24), __webpack_require__(55)(module)))

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(58));
	__export(__webpack_require__(99));
	__export(__webpack_require__(180));
	__export(__webpack_require__(183));
	__export(__webpack_require__(189));
	__export(__webpack_require__(108));
	var async_1 = __webpack_require__(94);
	exports.Observable = async_1.Observable;
	exports.EventEmitter = async_1.EventEmitter;
	__export(__webpack_require__(122));
	var dom_renderer_1 = __webpack_require__(157);
	exports.DomRenderer = dom_renderer_1.DomRenderer;
	exports.DOCUMENT_TOKEN = dom_renderer_1.DOCUMENT_TOKEN;
	exports.__esModule = true;
	//# sourceMappingURL=angular2.js.map

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module
	 * @public
	 * @description
	 * Change detection enables data binding in Angular.
	 */
	var ast_1 = __webpack_require__(59);
	exports.ASTWithSource = ast_1.ASTWithSource;
	exports.AST = ast_1.AST;
	exports.AstTransformer = ast_1.AstTransformer;
	exports.AccessMember = ast_1.AccessMember;
	exports.LiteralArray = ast_1.LiteralArray;
	exports.ImplicitReceiver = ast_1.ImplicitReceiver;
	var lexer_1 = __webpack_require__(62);
	exports.Lexer = lexer_1.Lexer;
	var parser_1 = __webpack_require__(67);
	exports.Parser = parser_1.Parser;
	var locals_1 = __webpack_require__(72);
	exports.Locals = locals_1.Locals;
	var exceptions_1 = __webpack_require__(73);
	exports.ExpressionChangedAfterItHasBeenChecked = exceptions_1.ExpressionChangedAfterItHasBeenChecked;
	exports.ChangeDetectionError = exceptions_1.ChangeDetectionError;
	var interfaces_1 = __webpack_require__(74);
	exports.ProtoChangeDetector = interfaces_1.ProtoChangeDetector;
	exports.ChangeDispatcher = interfaces_1.ChangeDispatcher;
	exports.ChangeDetector = interfaces_1.ChangeDetector;
	exports.ChangeDetection = interfaces_1.ChangeDetection;
	exports.ChangeDetectorDefinition = interfaces_1.ChangeDetectorDefinition;
	var constants_1 = __webpack_require__(75);
	exports.CHECK_ONCE = constants_1.CHECK_ONCE;
	exports.CHECK_ALWAYS = constants_1.CHECK_ALWAYS;
	exports.DETACHED = constants_1.DETACHED;
	exports.CHECKED = constants_1.CHECKED;
	exports.ON_PUSH = constants_1.ON_PUSH;
	exports.DEFAULT = constants_1.DEFAULT;
	var proto_change_detector_1 = __webpack_require__(76);
	exports.DynamicProtoChangeDetector = proto_change_detector_1.DynamicProtoChangeDetector;
	exports.JitProtoChangeDetector = proto_change_detector_1.JitProtoChangeDetector;
	var binding_record_1 = __webpack_require__(86);
	exports.BindingRecord = binding_record_1.BindingRecord;
	var directive_record_1 = __webpack_require__(84);
	exports.DirectiveIndex = directive_record_1.DirectiveIndex;
	exports.DirectiveRecord = directive_record_1.DirectiveRecord;
	var dynamic_change_detector_1 = __webpack_require__(77);
	exports.DynamicChangeDetector = dynamic_change_detector_1.DynamicChangeDetector;
	var change_detector_ref_1 = __webpack_require__(81);
	exports.ChangeDetectorRef = change_detector_ref_1.ChangeDetectorRef;
	var pipe_registry_1 = __webpack_require__(87);
	exports.PipeRegistry = pipe_registry_1.PipeRegistry;
	var change_detection_util_1 = __webpack_require__(78);
	exports.uninitialized = change_detection_util_1.uninitialized;
	var pipe_1 = __webpack_require__(79);
	exports.WrappedValue = pipe_1.WrappedValue;
	exports.Pipe = pipe_1.Pipe;
	var null_pipe_1 = __webpack_require__(88);
	exports.NullPipe = null_pipe_1.NullPipe;
	exports.NullPipeFactory = null_pipe_1.NullPipeFactory;
	var change_detection_1 = __webpack_require__(89);
	exports.defaultPipes = change_detection_1.defaultPipes;
	exports.DynamicChangeDetection = change_detection_1.DynamicChangeDetection;
	exports.JitChangeDetection = change_detection_1.JitChangeDetection;
	exports.PreGeneratedChangeDetection = change_detection_1.PreGeneratedChangeDetection;
	exports.preGeneratedProtoDetectors = change_detection_1.preGeneratedProtoDetectors;
	exports.defaultPipeRegistry = change_detection_1.defaultPipeRegistry;
	exports.__esModule = true;
	//# sourceMappingURL=change_detection.js.map

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var lang_1 = __webpack_require__(60);
	var collection_1 = __webpack_require__(61);
	var AST = (function () {
	    function AST() {
	    }
	    AST.prototype.eval = function (context, locals) { throw new lang_1.BaseException("Not supported"); };
	    Object.defineProperty(AST.prototype, "isAssignable", {
	        get: function () { return false; },
	        enumerable: true,
	        configurable: true
	    });
	    AST.prototype.assign = function (context, locals, value) { throw new lang_1.BaseException("Not supported"); };
	    AST.prototype.visit = function (visitor) { return null; };
	    AST.prototype.toString = function () { return "AST"; };
	    return AST;
	})();
	exports.AST = AST;
	var EmptyExpr = (function (_super) {
	    __extends(EmptyExpr, _super);
	    function EmptyExpr() {
	        _super.apply(this, arguments);
	    }
	    EmptyExpr.prototype.eval = function (context, locals) { return null; };
	    EmptyExpr.prototype.visit = function (visitor) {
	        // do nothing
	    };
	    return EmptyExpr;
	})(AST);
	exports.EmptyExpr = EmptyExpr;
	var ImplicitReceiver = (function (_super) {
	    __extends(ImplicitReceiver, _super);
	    function ImplicitReceiver() {
	        _super.apply(this, arguments);
	    }
	    ImplicitReceiver.prototype.eval = function (context, locals) { return context; };
	    ImplicitReceiver.prototype.visit = function (visitor) { return visitor.visitImplicitReceiver(this); };
	    return ImplicitReceiver;
	})(AST);
	exports.ImplicitReceiver = ImplicitReceiver;
	/**
	 * Multiple expressions separated by a semicolon.
	 */
	var Chain = (function (_super) {
	    __extends(Chain, _super);
	    function Chain(expressions) {
	        _super.call(this);
	        this.expressions = expressions;
	    }
	    Chain.prototype.eval = function (context, locals) {
	        var result;
	        for (var i = 0; i < this.expressions.length; i++) {
	            var last = this.expressions[i].eval(context, locals);
	            if (lang_1.isPresent(last))
	                result = last;
	        }
	        return result;
	    };
	    Chain.prototype.visit = function (visitor) { return visitor.visitChain(this); };
	    return Chain;
	})(AST);
	exports.Chain = Chain;
	var Conditional = (function (_super) {
	    __extends(Conditional, _super);
	    function Conditional(condition, trueExp, falseExp) {
	        _super.call(this);
	        this.condition = condition;
	        this.trueExp = trueExp;
	        this.falseExp = falseExp;
	    }
	    Conditional.prototype.eval = function (context, locals) {
	        if (this.condition.eval(context, locals)) {
	            return this.trueExp.eval(context, locals);
	        }
	        else {
	            return this.falseExp.eval(context, locals);
	        }
	    };
	    Conditional.prototype.visit = function (visitor) { return visitor.visitConditional(this); };
	    return Conditional;
	})(AST);
	exports.Conditional = Conditional;
	var AccessMember = (function (_super) {
	    __extends(AccessMember, _super);
	    function AccessMember(receiver, name, getter, setter) {
	        _super.call(this);
	        this.receiver = receiver;
	        this.name = name;
	        this.getter = getter;
	        this.setter = setter;
	    }
	    AccessMember.prototype.eval = function (context, locals) {
	        if (this.receiver instanceof ImplicitReceiver && lang_1.isPresent(locals) &&
	            locals.contains(this.name)) {
	            return locals.get(this.name);
	        }
	        else {
	            var evaluatedReceiver = this.receiver.eval(context, locals);
	            return this.getter(evaluatedReceiver);
	        }
	    };
	    Object.defineProperty(AccessMember.prototype, "isAssignable", {
	        get: function () { return true; },
	        enumerable: true,
	        configurable: true
	    });
	    AccessMember.prototype.assign = function (context, locals, value) {
	        var evaluatedContext = this.receiver.eval(context, locals);
	        if (this.receiver instanceof ImplicitReceiver && lang_1.isPresent(locals) &&
	            locals.contains(this.name)) {
	            throw new lang_1.BaseException("Cannot reassign a variable binding " + this.name);
	        }
	        else {
	            return this.setter(evaluatedContext, value);
	        }
	    };
	    AccessMember.prototype.visit = function (visitor) { return visitor.visitAccessMember(this); };
	    return AccessMember;
	})(AST);
	exports.AccessMember = AccessMember;
	var KeyedAccess = (function (_super) {
	    __extends(KeyedAccess, _super);
	    function KeyedAccess(obj, key) {
	        _super.call(this);
	        this.obj = obj;
	        this.key = key;
	    }
	    KeyedAccess.prototype.eval = function (context, locals) {
	        var obj = this.obj.eval(context, locals);
	        var key = this.key.eval(context, locals);
	        return obj[key];
	    };
	    Object.defineProperty(KeyedAccess.prototype, "isAssignable", {
	        get: function () { return true; },
	        enumerable: true,
	        configurable: true
	    });
	    KeyedAccess.prototype.assign = function (context, locals, value) {
	        var obj = this.obj.eval(context, locals);
	        var key = this.key.eval(context, locals);
	        obj[key] = value;
	        return value;
	    };
	    KeyedAccess.prototype.visit = function (visitor) { return visitor.visitKeyedAccess(this); };
	    return KeyedAccess;
	})(AST);
	exports.KeyedAccess = KeyedAccess;
	var Pipe = (function (_super) {
	    __extends(Pipe, _super);
	    function Pipe(exp, name, args, inBinding) {
	        _super.call(this);
	        this.exp = exp;
	        this.name = name;
	        this.args = args;
	        this.inBinding = inBinding;
	    }
	    Pipe.prototype.visit = function (visitor) { return visitor.visitPipe(this); };
	    return Pipe;
	})(AST);
	exports.Pipe = Pipe;
	var LiteralPrimitive = (function (_super) {
	    __extends(LiteralPrimitive, _super);
	    function LiteralPrimitive(value) {
	        _super.call(this);
	        this.value = value;
	    }
	    LiteralPrimitive.prototype.eval = function (context, locals) { return this.value; };
	    LiteralPrimitive.prototype.visit = function (visitor) { return visitor.visitLiteralPrimitive(this); };
	    return LiteralPrimitive;
	})(AST);
	exports.LiteralPrimitive = LiteralPrimitive;
	var LiteralArray = (function (_super) {
	    __extends(LiteralArray, _super);
	    function LiteralArray(expressions) {
	        _super.call(this);
	        this.expressions = expressions;
	    }
	    LiteralArray.prototype.eval = function (context, locals) {
	        return collection_1.ListWrapper.map(this.expressions, function (e) { return e.eval(context, locals); });
	    };
	    LiteralArray.prototype.visit = function (visitor) { return visitor.visitLiteralArray(this); };
	    return LiteralArray;
	})(AST);
	exports.LiteralArray = LiteralArray;
	var LiteralMap = (function (_super) {
	    __extends(LiteralMap, _super);
	    function LiteralMap(keys, values) {
	        _super.call(this);
	        this.keys = keys;
	        this.values = values;
	    }
	    LiteralMap.prototype.eval = function (context, locals) {
	        var res = collection_1.StringMapWrapper.create();
	        for (var i = 0; i < this.keys.length; ++i) {
	            collection_1.StringMapWrapper.set(res, this.keys[i], this.values[i].eval(context, locals));
	        }
	        return res;
	    };
	    LiteralMap.prototype.visit = function (visitor) { return visitor.visitLiteralMap(this); };
	    return LiteralMap;
	})(AST);
	exports.LiteralMap = LiteralMap;
	var Interpolation = (function (_super) {
	    __extends(Interpolation, _super);
	    function Interpolation(strings, expressions) {
	        _super.call(this);
	        this.strings = strings;
	        this.expressions = expressions;
	    }
	    Interpolation.prototype.eval = function (context, locals) { throw new lang_1.BaseException("evaluating an Interpolation is not supported"); };
	    Interpolation.prototype.visit = function (visitor) { visitor.visitInterpolation(this); };
	    return Interpolation;
	})(AST);
	exports.Interpolation = Interpolation;
	var Binary = (function (_super) {
	    __extends(Binary, _super);
	    function Binary(operation, left, right) {
	        _super.call(this);
	        this.operation = operation;
	        this.left = left;
	        this.right = right;
	    }
	    Binary.prototype.eval = function (context, locals) {
	        var left = this.left.eval(context, locals);
	        switch (this.operation) {
	            case '&&':
	                return left && this.right.eval(context, locals);
	            case '||':
	                return left || this.right.eval(context, locals);
	        }
	        var right = this.right.eval(context, locals);
	        switch (this.operation) {
	            case '+':
	                return left + right;
	            case '-':
	                return left - right;
	            case '*':
	                return left * right;
	            case '/':
	                return left / right;
	            case '%':
	                return left % right;
	            case '==':
	                return left == right;
	            case '!=':
	                return left != right;
	            case '===':
	                return left === right;
	            case '!==':
	                return left !== right;
	            case '<':
	                return left < right;
	            case '>':
	                return left > right;
	            case '<=':
	                return left <= right;
	            case '>=':
	                return left >= right;
	            case '^':
	                return left ^ right;
	            case '&':
	                return left & right;
	        }
	        throw 'Internal error [$operation] not handled';
	    };
	    Binary.prototype.visit = function (visitor) { return visitor.visitBinary(this); };
	    return Binary;
	})(AST);
	exports.Binary = Binary;
	var PrefixNot = (function (_super) {
	    __extends(PrefixNot, _super);
	    function PrefixNot(expression) {
	        _super.call(this);
	        this.expression = expression;
	    }
	    PrefixNot.prototype.eval = function (context, locals) { return !this.expression.eval(context, locals); };
	    PrefixNot.prototype.visit = function (visitor) { return visitor.visitPrefixNot(this); };
	    return PrefixNot;
	})(AST);
	exports.PrefixNot = PrefixNot;
	var Assignment = (function (_super) {
	    __extends(Assignment, _super);
	    function Assignment(target, value) {
	        _super.call(this);
	        this.target = target;
	        this.value = value;
	    }
	    Assignment.prototype.eval = function (context, locals) {
	        return this.target.assign(context, locals, this.value.eval(context, locals));
	    };
	    Assignment.prototype.visit = function (visitor) { return visitor.visitAssignment(this); };
	    return Assignment;
	})(AST);
	exports.Assignment = Assignment;
	var MethodCall = (function (_super) {
	    __extends(MethodCall, _super);
	    function MethodCall(receiver, name, fn, args) {
	        _super.call(this);
	        this.receiver = receiver;
	        this.name = name;
	        this.fn = fn;
	        this.args = args;
	    }
	    MethodCall.prototype.eval = function (context, locals) {
	        var evaluatedArgs = evalList(context, locals, this.args);
	        if (this.receiver instanceof ImplicitReceiver && lang_1.isPresent(locals) &&
	            locals.contains(this.name)) {
	            var fn = locals.get(this.name);
	            return lang_1.FunctionWrapper.apply(fn, evaluatedArgs);
	        }
	        else {
	            var evaluatedReceiver = this.receiver.eval(context, locals);
	            return this.fn(evaluatedReceiver, evaluatedArgs);
	        }
	    };
	    MethodCall.prototype.visit = function (visitor) { return visitor.visitMethodCall(this); };
	    return MethodCall;
	})(AST);
	exports.MethodCall = MethodCall;
	var FunctionCall = (function (_super) {
	    __extends(FunctionCall, _super);
	    function FunctionCall(target, args) {
	        _super.call(this);
	        this.target = target;
	        this.args = args;
	    }
	    FunctionCall.prototype.eval = function (context, locals) {
	        var obj = this.target.eval(context, locals);
	        if (!(obj instanceof Function)) {
	            throw new lang_1.BaseException(obj + " is not a function");
	        }
	        return lang_1.FunctionWrapper.apply(obj, evalList(context, locals, this.args));
	    };
	    FunctionCall.prototype.visit = function (visitor) { return visitor.visitFunctionCall(this); };
	    return FunctionCall;
	})(AST);
	exports.FunctionCall = FunctionCall;
	var ASTWithSource = (function (_super) {
	    __extends(ASTWithSource, _super);
	    function ASTWithSource(ast, source, location) {
	        _super.call(this);
	        this.ast = ast;
	        this.source = source;
	        this.location = location;
	    }
	    ASTWithSource.prototype.eval = function (context, locals) { return this.ast.eval(context, locals); };
	    Object.defineProperty(ASTWithSource.prototype, "isAssignable", {
	        get: function () { return this.ast.isAssignable; },
	        enumerable: true,
	        configurable: true
	    });
	    ASTWithSource.prototype.assign = function (context, locals, value) { return this.ast.assign(context, locals, value); };
	    ASTWithSource.prototype.visit = function (visitor) { return this.ast.visit(visitor); };
	    ASTWithSource.prototype.toString = function () { return this.source + " in " + this.location; };
	    return ASTWithSource;
	})(AST);
	exports.ASTWithSource = ASTWithSource;
	var TemplateBinding = (function () {
	    function TemplateBinding(key, keyIsVar, name, expression) {
	        this.key = key;
	        this.keyIsVar = keyIsVar;
	        this.name = name;
	        this.expression = expression;
	    }
	    return TemplateBinding;
	})();
	exports.TemplateBinding = TemplateBinding;
	// INTERFACE
	var AstVisitor = (function () {
	    function AstVisitor() {
	    }
	    AstVisitor.prototype.visitAccessMember = function (ast) { };
	    AstVisitor.prototype.visitAssignment = function (ast) { };
	    AstVisitor.prototype.visitBinary = function (ast) { };
	    AstVisitor.prototype.visitChain = function (ast) { };
	    AstVisitor.prototype.visitConditional = function (ast) { };
	    AstVisitor.prototype.visitPipe = function (ast) { };
	    AstVisitor.prototype.visitFunctionCall = function (ast) { };
	    AstVisitor.prototype.visitImplicitReceiver = function (ast) { };
	    AstVisitor.prototype.visitKeyedAccess = function (ast) { };
	    AstVisitor.prototype.visitLiteralArray = function (ast) { };
	    AstVisitor.prototype.visitLiteralMap = function (ast) { };
	    AstVisitor.prototype.visitLiteralPrimitive = function (ast) { };
	    AstVisitor.prototype.visitMethodCall = function (ast) { };
	    AstVisitor.prototype.visitPrefixNot = function (ast) { };
	    return AstVisitor;
	})();
	exports.AstVisitor = AstVisitor;
	var AstTransformer = (function () {
	    function AstTransformer() {
	    }
	    AstTransformer.prototype.visitImplicitReceiver = function (ast) { return ast; };
	    AstTransformer.prototype.visitInterpolation = function (ast) {
	        return new Interpolation(ast.strings, this.visitAll(ast.expressions));
	    };
	    AstTransformer.prototype.visitLiteralPrimitive = function (ast) { return new LiteralPrimitive(ast.value); };
	    AstTransformer.prototype.visitAccessMember = function (ast) {
	        return new AccessMember(ast.receiver.visit(this), ast.name, ast.getter, ast.setter);
	    };
	    AstTransformer.prototype.visitMethodCall = function (ast) {
	        return new MethodCall(ast.receiver.visit(this), ast.name, ast.fn, this.visitAll(ast.args));
	    };
	    AstTransformer.prototype.visitFunctionCall = function (ast) {
	        return new FunctionCall(ast.target.visit(this), this.visitAll(ast.args));
	    };
	    AstTransformer.prototype.visitLiteralArray = function (ast) { return new LiteralArray(this.visitAll(ast.expressions)); };
	    AstTransformer.prototype.visitLiteralMap = function (ast) { return new LiteralMap(ast.keys, this.visitAll(ast.values)); };
	    AstTransformer.prototype.visitBinary = function (ast) {
	        return new Binary(ast.operation, ast.left.visit(this), ast.right.visit(this));
	    };
	    AstTransformer.prototype.visitPrefixNot = function (ast) { return new PrefixNot(ast.expression.visit(this)); };
	    AstTransformer.prototype.visitConditional = function (ast) {
	        return new Conditional(ast.condition.visit(this), ast.trueExp.visit(this), ast.falseExp.visit(this));
	    };
	    AstTransformer.prototype.visitPipe = function (ast) {
	        return new Pipe(ast.exp.visit(this), ast.name, this.visitAll(ast.args), ast.inBinding);
	    };
	    AstTransformer.prototype.visitKeyedAccess = function (ast) {
	        return new KeyedAccess(ast.obj.visit(this), ast.key.visit(this));
	    };
	    AstTransformer.prototype.visitAll = function (asts) {
	        var res = collection_1.ListWrapper.createFixedSize(asts.length);
	        for (var i = 0; i < asts.length; ++i) {
	            res[i] = asts[i].visit(this);
	        }
	        return res;
	    };
	    return AstTransformer;
	})();
	exports.AstTransformer = AstTransformer;
	var _evalListCache = [
	    [],
	    [0],
	    [0, 0],
	    [0, 0, 0],
	    [0, 0, 0, 0],
	    [0, 0, 0, 0, 0],
	    [0, 0, 0, 0, 0, 0],
	    [0, 0, 0, 0, 0, 0, 0],
	    [0, 0, 0, 0, 0, 0, 0, 0],
	    [0, 0, 0, 0, 0, 0, 0, 0, 0],
	    [0, 0, 0, 0, 0, 0, 0, 0, 0]
	];
	function evalList(context, locals, exps) {
	    var length = exps.length;
	    if (length > 10) {
	        throw new lang_1.BaseException("Cannot have more than 10 argument");
	    }
	    var result = _evalListCache[length];
	    for (var i = 0; i < length; i++) {
	        result[i] = exps[i].eval(context, locals);
	    }
	    return result;
	}
	exports.__esModule = true;
	//# sourceMappingURL=ast.js.map

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var _global = (typeof window === 'undefined' ? global : window);
	exports.global = _global;
	exports.Type = Function;
	var BaseException = (function (_super) {
	    __extends(BaseException, _super);
	    function BaseException(message) {
	        _super.call(this, message);
	        this.message = message;
	        this.stack = (new Error()).stack;
	    }
	    BaseException.prototype.toString = function () { return this.message; };
	    return BaseException;
	})(Error);
	exports.BaseException = BaseException;
	exports.Math = _global.Math;
	exports.Date = _global.Date;
	var assertionsEnabled_ = typeof _global['assert'] !== 'undefined';
	function assertionsEnabled() {
	    return assertionsEnabled_;
	}
	exports.assertionsEnabled = assertionsEnabled;
	// TODO: remove calls to assert in production environment
	// Note: Can't just export this and import in in other files
	// as `assert` is a reserved keyword in Dart
	_global.assert =
	    function assert(condition) {
	        if (assertionsEnabled_) {
	            _global['assert'].call(condition);
	        }
	    };
	// This function is needed only to properly support Dart's const expressions
	// see https://github.com/angular/ts2dart/pull/151 for more info
	function CONST_EXPR(expr) {
	    return expr;
	}
	exports.CONST_EXPR = CONST_EXPR;
	function CONST() {
	    return function (target) { return target; };
	}
	exports.CONST = CONST;
	var ABSTRACT = (function () {
	    function ABSTRACT() {
	    }
	    return ABSTRACT;
	})();
	exports.ABSTRACT = ABSTRACT;
	var IMPLEMENTS = (function () {
	    function IMPLEMENTS() {
	    }
	    return IMPLEMENTS;
	})();
	exports.IMPLEMENTS = IMPLEMENTS;
	function isPresent(obj) {
	    return obj !== undefined && obj !== null;
	}
	exports.isPresent = isPresent;
	function isBlank(obj) {
	    return obj === undefined || obj === null;
	}
	exports.isBlank = isBlank;
	function isString(obj) {
	    return typeof obj === "string";
	}
	exports.isString = isString;
	function isFunction(obj) {
	    return typeof obj === "function";
	}
	exports.isFunction = isFunction;
	function isType(obj) {
	    return isFunction(obj);
	}
	exports.isType = isType;
	function stringify(token) {
	    if (typeof token === 'string') {
	        return token;
	    }
	    if (token === undefined || token === null) {
	        return '' + token;
	    }
	    if (token.name) {
	        return token.name;
	    }
	    return token.toString();
	}
	exports.stringify = stringify;
	var StringWrapper = (function () {
	    function StringWrapper() {
	    }
	    StringWrapper.fromCharCode = function (code) { return String.fromCharCode(code); };
	    StringWrapper.charCodeAt = function (s, index) { return s.charCodeAt(index); };
	    StringWrapper.split = function (s, regExp) { return s.split(regExp); };
	    StringWrapper.equals = function (s, s2) { return s === s2; };
	    StringWrapper.replace = function (s, from, replace) {
	        return s.replace(from, replace);
	    };
	    StringWrapper.replaceAll = function (s, from, replace) {
	        return s.replace(from, replace);
	    };
	    StringWrapper.toUpperCase = function (s) { return s.toUpperCase(); };
	    StringWrapper.toLowerCase = function (s) { return s.toLowerCase(); };
	    StringWrapper.startsWith = function (s, start) { return s.startsWith(start); };
	    StringWrapper.substring = function (s, start, end) {
	        if (end === void 0) { end = null; }
	        return s.substring(start, end === null ? undefined : end);
	    };
	    StringWrapper.replaceAllMapped = function (s, from, cb) {
	        return s.replace(from, function () {
	            var matches = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                matches[_i - 0] = arguments[_i];
	            }
	            // Remove offset & string from the result array
	            matches.splice(-2, 2);
	            // The callback receives match, p1, ..., pn
	            return cb(matches);
	        });
	    };
	    StringWrapper.contains = function (s, substr) { return s.indexOf(substr) != -1; };
	    return StringWrapper;
	})();
	exports.StringWrapper = StringWrapper;
	var StringJoiner = (function () {
	    function StringJoiner(parts) {
	        if (parts === void 0) { parts = []; }
	        this.parts = parts;
	    }
	    StringJoiner.prototype.add = function (part) { this.parts.push(part); };
	    StringJoiner.prototype.toString = function () { return this.parts.join(""); };
	    return StringJoiner;
	})();
	exports.StringJoiner = StringJoiner;
	var NumberParseError = (function (_super) {
	    __extends(NumberParseError, _super);
	    function NumberParseError(message) {
	        _super.call(this);
	        this.message = message;
	    }
	    NumberParseError.prototype.toString = function () { return this.message; };
	    return NumberParseError;
	})(BaseException);
	exports.NumberParseError = NumberParseError;
	var NumberWrapper = (function () {
	    function NumberWrapper() {
	    }
	    NumberWrapper.toFixed = function (n, fractionDigits) { return n.toFixed(fractionDigits); };
	    NumberWrapper.equal = function (a, b) { return a === b; };
	    NumberWrapper.parseIntAutoRadix = function (text) {
	        var result = parseInt(text);
	        if (isNaN(result)) {
	            throw new NumberParseError("Invalid integer literal when parsing " + text);
	        }
	        return result;
	    };
	    NumberWrapper.parseInt = function (text, radix) {
	        if (radix == 10) {
	            if (/^(\-|\+)?[0-9]+$/.test(text)) {
	                return parseInt(text, radix);
	            }
	        }
	        else if (radix == 16) {
	            if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text)) {
	                return parseInt(text, radix);
	            }
	        }
	        else {
	            var result = parseInt(text, radix);
	            if (!isNaN(result)) {
	                return result;
	            }
	        }
	        throw new NumberParseError("Invalid integer literal when parsing " + text + " in base " +
	            radix);
	    };
	    // TODO: NaN is a valid literal but is returned by parseFloat to indicate an error.
	    NumberWrapper.parseFloat = function (text) { return parseFloat(text); };
	    Object.defineProperty(NumberWrapper, "NaN", {
	        get: function () { return NaN; },
	        enumerable: true,
	        configurable: true
	    });
	    NumberWrapper.isNaN = function (value) { return isNaN(value); };
	    NumberWrapper.isInteger = function (value) { return Number.isInteger(value); };
	    return NumberWrapper;
	})();
	exports.NumberWrapper = NumberWrapper;
	exports.RegExp = _global.RegExp;
	var RegExpWrapper = (function () {
	    function RegExpWrapper() {
	    }
	    RegExpWrapper.create = function (regExpStr, flags) {
	        if (flags === void 0) { flags = ''; }
	        flags = flags.replace(/g/g, '');
	        return new _global.RegExp(regExpStr, flags + 'g');
	    };
	    RegExpWrapper.firstMatch = function (regExp, input) {
	        // Reset multimatch regex state
	        regExp.lastIndex = 0;
	        return regExp.exec(input);
	    };
	    RegExpWrapper.matcher = function (regExp, input) {
	        // Reset regex state for the case
	        // someone did not loop over all matches
	        // last time.
	        regExp.lastIndex = 0;
	        return { re: regExp, input: input };
	    };
	    return RegExpWrapper;
	})();
	exports.RegExpWrapper = RegExpWrapper;
	var RegExpMatcherWrapper = (function () {
	    function RegExpMatcherWrapper() {
	    }
	    RegExpMatcherWrapper.next = function (matcher) { return matcher.re.exec(matcher.input); };
	    return RegExpMatcherWrapper;
	})();
	exports.RegExpMatcherWrapper = RegExpMatcherWrapper;
	var FunctionWrapper = (function () {
	    function FunctionWrapper() {
	    }
	    FunctionWrapper.apply = function (fn, posArgs) { return fn.apply(null, posArgs); };
	    return FunctionWrapper;
	})();
	exports.FunctionWrapper = FunctionWrapper;
	// JS has NaN !== NaN
	function looseIdentical(a, b) {
	    return a === b || typeof a === "number" && typeof b === "number" && isNaN(a) && isNaN(b);
	}
	exports.looseIdentical = looseIdentical;
	// JS considers NaN is the same as NaN for map Key (while NaN !== NaN otherwise)
	// see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map
	function getMapKey(value) {
	    return value;
	}
	exports.getMapKey = getMapKey;
	function normalizeBlank(obj) {
	    return isBlank(obj) ? null : obj;
	}
	exports.normalizeBlank = normalizeBlank;
	function isJsObject(o) {
	    return o !== null && (typeof o === "function" || typeof o === "object");
	}
	exports.isJsObject = isJsObject;
	function print(obj) {
	    if (obj instanceof Error) {
	        console.log(obj.stack);
	    }
	    else {
	        console.log(obj);
	    }
	}
	exports.print = print;
	// Can't be all uppercase as our transpiler would think it is a special directive...
	var Json = (function () {
	    function Json() {
	    }
	    Json.parse = function (s) { return _global.JSON.parse(s); };
	    Json.stringify = function (data) {
	        // Dart doesn't take 3 arguments
	        return _global.JSON.stringify(data, null, 2);
	    };
	    return Json;
	})();
	exports.Json = Json;
	var DateWrapper = (function () {
	    function DateWrapper() {
	    }
	    DateWrapper.fromMillis = function (ms) { return new exports.Date(ms); };
	    DateWrapper.toMillis = function (date) { return date.getTime(); };
	    DateWrapper.now = function () { return new exports.Date(); };
	    DateWrapper.toJson = function (date) { return date.toJSON(); };
	    return DateWrapper;
	})();
	exports.DateWrapper = DateWrapper;
	exports.__esModule = true;
	//# sourceMappingURL=lang.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	var lang_1 = __webpack_require__(60);
	exports.List = lang_1.global.Array;
	exports.Map = lang_1.global.Map;
	exports.Set = lang_1.global.Set;
	exports.StringMap = lang_1.global.Object;
	// Safari and Internet Explorer do not support the iterable parameter to the
	// Map constructor.  We work around that by manually adding the items.
	var createMapFromPairs = (function () {
	    try {
	        if (new exports.Map([1, 2]).size === 2) {
	            return function createMapFromPairs(pairs) {
	                return new exports.Map(pairs);
	            };
	        }
	    }
	    catch (e) {
	    }
	    return function createMapAndPopulateFromPairs(pairs) {
	        var map = new exports.Map();
	        for (var i = 0; i < pairs.length; i++) {
	            var pair = pairs[i];
	            map.set(pair[0], pair[1]);
	        }
	        return map;
	    };
	})();
	var MapWrapper = (function () {
	    function MapWrapper() {
	    }
	    MapWrapper.create = function () { return new exports.Map(); };
	    MapWrapper.clone = function (m) { return new exports.Map(m); };
	    MapWrapper.createFromStringMap = function (stringMap) {
	        var result = MapWrapper.create();
	        for (var prop in stringMap) {
	            MapWrapper.set(result, prop, stringMap[prop]);
	        }
	        return result;
	    };
	    MapWrapper.createFromPairs = function (pairs) { return createMapFromPairs(pairs); };
	    MapWrapper.get = function (m, k) { return m.get(k); };
	    MapWrapper.set = function (m, k, v) { m.set(k, v); };
	    MapWrapper.contains = function (m, k) { return m.has(k); };
	    MapWrapper.forEach = function (m, fn) { m.forEach(fn); };
	    MapWrapper.size = function (m) { return m.size; };
	    MapWrapper.delete = function (m, k) { m.delete(k); };
	    MapWrapper.clear = function (m) { m.clear(); };
	    MapWrapper.clearValues = function (m) {
	        var keyIterator = m.keys();
	        var k;
	        while (!((k = keyIterator.next()).done)) {
	            m.set(k.value, null);
	        }
	    };
	    MapWrapper.iterable = function (m) { return m; };
	    MapWrapper.keys = function (m) { return m.keys(); };
	    MapWrapper.values = function (m) { return m.values(); };
	    return MapWrapper;
	})();
	exports.MapWrapper = MapWrapper;
	/**
	 * Wraps Javascript Objects
	 */
	var StringMapWrapper = (function () {
	    function StringMapWrapper() {
	    }
	    StringMapWrapper.create = function () {
	        // Note: We are not using Object.create(null) here due to
	        // performance!
	        // http://jsperf.com/ng2-object-create-null
	        return {};
	    };
	    StringMapWrapper.contains = function (map, key) { return map.hasOwnProperty(key); };
	    StringMapWrapper.get = function (map, key) {
	        return map.hasOwnProperty(key) ? map[key] : undefined;
	    };
	    StringMapWrapper.set = function (map, key, value) { map[key] = value; };
	    StringMapWrapper.keys = function (map) { return Object.keys(map); };
	    StringMapWrapper.isEmpty = function (map) {
	        for (var prop in map) {
	            return false;
	        }
	        return true;
	    };
	    StringMapWrapper.delete = function (map, key) { delete map[key]; };
	    StringMapWrapper.forEach = function (map, callback) {
	        for (var prop in map) {
	            if (map.hasOwnProperty(prop)) {
	                callback(map[prop], prop);
	            }
	        }
	    };
	    StringMapWrapper.merge = function (m1, m2) {
	        var m = {};
	        for (var attr in m1) {
	            if (m1.hasOwnProperty(attr)) {
	                m[attr] = m1[attr];
	            }
	        }
	        for (var attr in m2) {
	            if (m2.hasOwnProperty(attr)) {
	                m[attr] = m2[attr];
	            }
	        }
	        return m;
	    };
	    StringMapWrapper.equals = function (m1, m2) {
	        var k1 = Object.keys(m1);
	        var k2 = Object.keys(m2);
	        if (k1.length != k2.length) {
	            return false;
	        }
	        var key;
	        for (var i = 0; i < k1.length; i++) {
	            key = k1[i];
	            if (m1[key] !== m2[key]) {
	                return false;
	            }
	        }
	        return true;
	    };
	    return StringMapWrapper;
	})();
	exports.StringMapWrapper = StringMapWrapper;
	var ListWrapper = (function () {
	    function ListWrapper() {
	    }
	    ListWrapper.create = function () { return new exports.List(); };
	    ListWrapper.createFixedSize = function (size) { return new exports.List(size); };
	    ListWrapper.get = function (m, k) { return m[k]; };
	    ListWrapper.set = function (m, k, v) { m[k] = v; };
	    ListWrapper.clone = function (array) { return array.slice(0); };
	    ListWrapper.map = function (array, fn) { return array.map(fn); };
	    ListWrapper.forEach = function (array, fn) {
	        for (var i = 0; i < array.length; i++) {
	            fn(array[i]);
	        }
	    };
	    ListWrapper.push = function (array, el) { array.push(el); };
	    ListWrapper.first = function (array) {
	        if (!array)
	            return null;
	        return array[0];
	    };
	    ListWrapper.last = function (array) {
	        if (!array || array.length == 0)
	            return null;
	        return array[array.length - 1];
	    };
	    ListWrapper.find = function (list, pred) {
	        for (var i = 0; i < list.length; ++i) {
	            if (pred(list[i]))
	                return list[i];
	        }
	        return null;
	    };
	    ListWrapper.indexOf = function (array, value, startIndex) {
	        if (startIndex === void 0) { startIndex = -1; }
	        return array.indexOf(value, startIndex);
	    };
	    ListWrapper.reduce = function (list, fn, init) {
	        return list.reduce(fn, init);
	    };
	    ListWrapper.filter = function (array, pred) { return array.filter(pred); };
	    ListWrapper.any = function (list, pred) {
	        for (var i = 0; i < list.length; ++i) {
	            if (pred(list[i]))
	                return true;
	        }
	        return false;
	    };
	    ListWrapper.contains = function (list, el) { return list.indexOf(el) !== -1; };
	    ListWrapper.reversed = function (array) {
	        var a = ListWrapper.clone(array);
	        return a.reverse();
	    };
	    ListWrapper.concat = function (a, b) { return a.concat(b); };
	    ListWrapper.isList = function (list) { return Array.isArray(list); };
	    ListWrapper.insert = function (list, index, value) { list.splice(index, 0, value); };
	    ListWrapper.removeAt = function (list, index) {
	        var res = list[index];
	        list.splice(index, 1);
	        return res;
	    };
	    ListWrapper.removeAll = function (list, items) {
	        for (var i = 0; i < items.length; ++i) {
	            var index = list.indexOf(items[i]);
	            list.splice(index, 1);
	        }
	    };
	    ListWrapper.removeLast = function (list) { return list.pop(); };
	    ListWrapper.remove = function (list, el) {
	        var index = list.indexOf(el);
	        if (index > -1) {
	            list.splice(index, 1);
	            return true;
	        }
	        return false;
	    };
	    ListWrapper.clear = function (list) { list.splice(0, list.length); };
	    ListWrapper.join = function (list, s) { return list.join(s); };
	    ListWrapper.isEmpty = function (list) { return list.length == 0; };
	    ListWrapper.fill = function (list, value, start, end) {
	        if (start === void 0) { start = 0; }
	        if (end === void 0) { end = null; }
	        list.fill(value, start, end === null ? undefined : end);
	    };
	    ListWrapper.equals = function (a, b) {
	        if (a.length != b.length)
	            return false;
	        for (var i = 0; i < a.length; ++i) {
	            if (a[i] !== b[i])
	                return false;
	        }
	        return true;
	    };
	    ListWrapper.slice = function (l, from, to) {
	        if (from === void 0) { from = 0; }
	        if (to === void 0) { to = null; }
	        return l.slice(from, to === null ? undefined : to);
	    };
	    ListWrapper.splice = function (l, from, length) { return l.splice(from, length); };
	    ListWrapper.sort = function (l, compareFn) { l.sort(compareFn); };
	    return ListWrapper;
	})();
	exports.ListWrapper = ListWrapper;
	function isListLikeIterable(obj) {
	    if (!lang_1.isJsObject(obj))
	        return false;
	    return ListWrapper.isList(obj) ||
	        (!(obj instanceof exports.Map) &&
	            Symbol.iterator in obj); // JS Iterable have a Symbol.iterator prop
	}
	exports.isListLikeIterable = isListLikeIterable;
	function iterateListLike(obj, fn) {
	    if (ListWrapper.isList(obj)) {
	        for (var i = 0; i < obj.length; i++) {
	            fn(obj[i]);
	        }
	    }
	    else {
	        var iterator = obj[Symbol.iterator]();
	        var item;
	        while (!((item = iterator.next()).done)) {
	            fn(item.value);
	        }
	    }
	}
	exports.iterateListLike = iterateListLike;
	var SetWrapper = (function () {
	    function SetWrapper() {
	    }
	    SetWrapper.createFromList = function (lst) { return new exports.Set(lst); };
	    SetWrapper.has = function (s, key) { return s.has(key); };
	    return SetWrapper;
	})();
	exports.SetWrapper = SetWrapper;
	exports.__esModule = true;
	//# sourceMappingURL=collection.js.map

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var decorators_1 = __webpack_require__(63);
	var collection_1 = __webpack_require__(61);
	var lang_1 = __webpack_require__(60);
	exports.TOKEN_TYPE_CHARACTER = 1;
	exports.TOKEN_TYPE_IDENTIFIER = 2;
	exports.TOKEN_TYPE_KEYWORD = 3;
	exports.TOKEN_TYPE_STRING = 4;
	exports.TOKEN_TYPE_OPERATOR = 5;
	exports.TOKEN_TYPE_NUMBER = 6;
	var Lexer = (function () {
	    function Lexer() {
	    }
	    Lexer.prototype.tokenize = function (text) {
	        var scanner = new _Scanner(text);
	        var tokens = [];
	        var token = scanner.scanToken();
	        while (token != null) {
	            collection_1.ListWrapper.push(tokens, token);
	            token = scanner.scanToken();
	        }
	        return tokens;
	    };
	    Lexer = __decorate([
	        decorators_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], Lexer);
	    return Lexer;
	})();
	exports.Lexer = Lexer;
	var Token = (function () {
	    function Token(index, type, numValue, strValue) {
	        this.index = index;
	        this.type = type;
	        this.numValue = numValue;
	        this.strValue = strValue;
	    }
	    Token.prototype.isCharacter = function (code) {
	        return (this.type == exports.TOKEN_TYPE_CHARACTER && this.numValue == code);
	    };
	    Token.prototype.isNumber = function () { return (this.type == exports.TOKEN_TYPE_NUMBER); };
	    Token.prototype.isString = function () { return (this.type == exports.TOKEN_TYPE_STRING); };
	    Token.prototype.isOperator = function (operater) {
	        return (this.type == exports.TOKEN_TYPE_OPERATOR && this.strValue == operater);
	    };
	    Token.prototype.isIdentifier = function () { return (this.type == exports.TOKEN_TYPE_IDENTIFIER); };
	    Token.prototype.isKeyword = function () { return (this.type == exports.TOKEN_TYPE_KEYWORD); };
	    Token.prototype.isKeywordVar = function () { return (this.type == exports.TOKEN_TYPE_KEYWORD && this.strValue == "var"); };
	    Token.prototype.isKeywordNull = function () { return (this.type == exports.TOKEN_TYPE_KEYWORD && this.strValue == "null"); };
	    Token.prototype.isKeywordUndefined = function () {
	        return (this.type == exports.TOKEN_TYPE_KEYWORD && this.strValue == "undefined");
	    };
	    Token.prototype.isKeywordTrue = function () { return (this.type == exports.TOKEN_TYPE_KEYWORD && this.strValue == "true"); };
	    Token.prototype.isKeywordFalse = function () {
	        return (this.type == exports.TOKEN_TYPE_KEYWORD && this.strValue == "false");
	    };
	    Token.prototype.toNumber = function () {
	        // -1 instead of NULL ok?
	        return (this.type == exports.TOKEN_TYPE_NUMBER) ? this.numValue : -1;
	    };
	    Token.prototype.toString = function () {
	        var t = this.type;
	        if (t >= exports.TOKEN_TYPE_CHARACTER && t <= exports.TOKEN_TYPE_STRING) {
	            return this.strValue;
	        }
	        else if (t == exports.TOKEN_TYPE_NUMBER) {
	            return this.numValue.toString();
	        }
	        else {
	            return null;
	        }
	    };
	    return Token;
	})();
	exports.Token = Token;
	function newCharacterToken(index, code) {
	    return new Token(index, exports.TOKEN_TYPE_CHARACTER, code, lang_1.StringWrapper.fromCharCode(code));
	}
	function newIdentifierToken(index, text) {
	    return new Token(index, exports.TOKEN_TYPE_IDENTIFIER, 0, text);
	}
	function newKeywordToken(index, text) {
	    return new Token(index, exports.TOKEN_TYPE_KEYWORD, 0, text);
	}
	function newOperatorToken(index, text) {
	    return new Token(index, exports.TOKEN_TYPE_OPERATOR, 0, text);
	}
	function newStringToken(index, text) {
	    return new Token(index, exports.TOKEN_TYPE_STRING, 0, text);
	}
	function newNumberToken(index, n) {
	    return new Token(index, exports.TOKEN_TYPE_NUMBER, n, "");
	}
	exports.EOF = new Token(-1, 0, 0, "");
	exports.$EOF = 0;
	exports.$TAB = 9;
	exports.$LF = 10;
	exports.$VTAB = 11;
	exports.$FF = 12;
	exports.$CR = 13;
	exports.$SPACE = 32;
	exports.$BANG = 33;
	exports.$DQ = 34;
	exports.$HASH = 35;
	exports.$$ = 36;
	exports.$PERCENT = 37;
	exports.$AMPERSAND = 38;
	exports.$SQ = 39;
	exports.$LPAREN = 40;
	exports.$RPAREN = 41;
	exports.$STAR = 42;
	exports.$PLUS = 43;
	exports.$COMMA = 44;
	exports.$MINUS = 45;
	exports.$PERIOD = 46;
	exports.$SLASH = 47;
	exports.$COLON = 58;
	exports.$SEMICOLON = 59;
	exports.$LT = 60;
	exports.$EQ = 61;
	exports.$GT = 62;
	exports.$QUESTION = 63;
	var $0 = 48;
	var $9 = 57;
	var $A = 65, $E = 69, $Z = 90;
	exports.$LBRACKET = 91;
	exports.$BACKSLASH = 92;
	exports.$RBRACKET = 93;
	var $CARET = 94;
	var $_ = 95;
	var $a = 97, $e = 101, $f = 102, $n = 110, $r = 114, $t = 116, $u = 117, $v = 118, $z = 122;
	exports.$LBRACE = 123;
	exports.$BAR = 124;
	exports.$RBRACE = 125;
	var $NBSP = 160;
	var ScannerError = (function (_super) {
	    __extends(ScannerError, _super);
	    function ScannerError(message) {
	        _super.call(this);
	        this.message = message;
	    }
	    ScannerError.prototype.toString = function () { return this.message; };
	    return ScannerError;
	})(lang_1.BaseException);
	exports.ScannerError = ScannerError;
	var _Scanner = (function () {
	    function _Scanner(input) {
	        this.input = input;
	        this.length = input.length;
	        this.peek = 0;
	        this.index = -1;
	        this.advance();
	    }
	    _Scanner.prototype.advance = function () {
	        this.peek =
	            ++this.index >= this.length ? exports.$EOF : lang_1.StringWrapper.charCodeAt(this.input, this.index);
	    };
	    _Scanner.prototype.scanToken = function () {
	        var input = this.input, length = this.length, peek = this.peek, index = this.index;
	        // Skip whitespace.
	        while (peek <= exports.$SPACE) {
	            if (++index >= length) {
	                peek = exports.$EOF;
	                break;
	            }
	            else {
	                peek = lang_1.StringWrapper.charCodeAt(input, index);
	            }
	        }
	        this.peek = peek;
	        this.index = index;
	        if (index >= length) {
	            return null;
	        }
	        // Handle identifiers and numbers.
	        if (isIdentifierStart(peek))
	            return this.scanIdentifier();
	        if (isDigit(peek))
	            return this.scanNumber(index);
	        var start = index;
	        switch (peek) {
	            case exports.$PERIOD:
	                this.advance();
	                return isDigit(this.peek) ? this.scanNumber(start) : newCharacterToken(start, exports.$PERIOD);
	            case exports.$LPAREN:
	            case exports.$RPAREN:
	            case exports.$LBRACE:
	            case exports.$RBRACE:
	            case exports.$LBRACKET:
	            case exports.$RBRACKET:
	            case exports.$COMMA:
	            case exports.$COLON:
	            case exports.$SEMICOLON:
	                return this.scanCharacter(start, peek);
	            case exports.$SQ:
	            case exports.$DQ:
	                return this.scanString();
	            case exports.$HASH:
	                return this.scanOperator(start, lang_1.StringWrapper.fromCharCode(peek));
	            case exports.$PLUS:
	            case exports.$MINUS:
	            case exports.$STAR:
	            case exports.$SLASH:
	            case exports.$PERCENT:
	            case $CARET:
	            case exports.$QUESTION:
	                return this.scanOperator(start, lang_1.StringWrapper.fromCharCode(peek));
	            case exports.$LT:
	            case exports.$GT:
	            case exports.$BANG:
	            case exports.$EQ:
	                return this.scanComplexOperator(start, exports.$EQ, lang_1.StringWrapper.fromCharCode(peek), '=');
	            case exports.$AMPERSAND:
	                return this.scanComplexOperator(start, exports.$AMPERSAND, '&', '&');
	            case exports.$BAR:
	                return this.scanComplexOperator(start, exports.$BAR, '|', '|');
	            case $NBSP:
	                while (isWhitespace(this.peek))
	                    this.advance();
	                return this.scanToken();
	        }
	        this.error("Unexpected character [" + lang_1.StringWrapper.fromCharCode(peek) + "]", 0);
	        return null;
	    };
	    _Scanner.prototype.scanCharacter = function (start, code) {
	        assert(this.peek == code);
	        this.advance();
	        return newCharacterToken(start, code);
	    };
	    _Scanner.prototype.scanOperator = function (start, str) {
	        assert(this.peek == lang_1.StringWrapper.charCodeAt(str, 0));
	        assert(collection_1.SetWrapper.has(OPERATORS, str));
	        this.advance();
	        return newOperatorToken(start, str);
	    };
	    _Scanner.prototype.scanComplexOperator = function (start, code, one, two) {
	        assert(this.peek == lang_1.StringWrapper.charCodeAt(one, 0));
	        this.advance();
	        var str = one;
	        while (this.peek == code) {
	            this.advance();
	            str += two;
	        }
	        assert(collection_1.SetWrapper.has(OPERATORS, str));
	        return newOperatorToken(start, str);
	    };
	    _Scanner.prototype.scanIdentifier = function () {
	        assert(isIdentifierStart(this.peek));
	        var start = this.index;
	        this.advance();
	        while (isIdentifierPart(this.peek))
	            this.advance();
	        var str = this.input.substring(start, this.index);
	        if (collection_1.SetWrapper.has(KEYWORDS, str)) {
	            return newKeywordToken(start, str);
	        }
	        else {
	            return newIdentifierToken(start, str);
	        }
	    };
	    _Scanner.prototype.scanNumber = function (start) {
	        assert(isDigit(this.peek));
	        var simple = (this.index === start);
	        this.advance(); // Skip initial digit.
	        while (true) {
	            if (isDigit(this.peek)) {
	            }
	            else if (this.peek == exports.$PERIOD) {
	                simple = false;
	            }
	            else if (isExponentStart(this.peek)) {
	                this.advance();
	                if (isExponentSign(this.peek))
	                    this.advance();
	                if (!isDigit(this.peek))
	                    this.error('Invalid exponent', -1);
	                simple = false;
	            }
	            else {
	                break;
	            }
	            this.advance();
	        }
	        var str = this.input.substring(start, this.index);
	        // TODO
	        var value = simple ? lang_1.NumberWrapper.parseIntAutoRadix(str) : lang_1.NumberWrapper.parseFloat(str);
	        return newNumberToken(start, value);
	    };
	    _Scanner.prototype.scanString = function () {
	        assert(this.peek == exports.$SQ || this.peek == exports.$DQ);
	        var start = this.index;
	        var quote = this.peek;
	        this.advance(); // Skip initial quote.
	        var buffer;
	        var marker = this.index;
	        var input = this.input;
	        while (this.peek != quote) {
	            if (this.peek == exports.$BACKSLASH) {
	                if (buffer == null)
	                    buffer = new lang_1.StringJoiner();
	                buffer.add(input.substring(marker, this.index));
	                this.advance();
	                var unescapedCode;
	                if (this.peek == $u) {
	                    // 4 character hex code for unicode character.
	                    var hex = input.substring(this.index + 1, this.index + 5);
	                    try {
	                        unescapedCode = lang_1.NumberWrapper.parseInt(hex, 16);
	                    }
	                    catch (e) {
	                        this.error("Invalid unicode escape [\\u" + hex + "]", 0);
	                    }
	                    for (var i = 0; i < 5; i++) {
	                        this.advance();
	                    }
	                }
	                else {
	                    unescapedCode = unescape(this.peek);
	                    this.advance();
	                }
	                buffer.add(lang_1.StringWrapper.fromCharCode(unescapedCode));
	                marker = this.index;
	            }
	            else if (this.peek == exports.$EOF) {
	                this.error('Unterminated quote', 0);
	            }
	            else {
	                this.advance();
	            }
	        }
	        var last = input.substring(marker, this.index);
	        this.advance(); // Skip terminating quote.
	        // Compute the unescaped string value.
	        var unescaped = last;
	        if (buffer != null) {
	            buffer.add(last);
	            unescaped = buffer.toString();
	        }
	        return newStringToken(start, unescaped);
	    };
	    _Scanner.prototype.error = function (message, offset) {
	        var position = this.index + offset;
	        throw new ScannerError("Lexer Error: " + message + " at column " + position + " in expression [" + this.input + "]");
	    };
	    return _Scanner;
	})();
	function isWhitespace(code) {
	    return (code >= exports.$TAB && code <= exports.$SPACE) || (code == $NBSP);
	}
	function isIdentifierStart(code) {
	    return ($a <= code && code <= $z) || ($A <= code && code <= $Z) || (code == $_) || (code == exports.$$);
	}
	function isIdentifierPart(code) {
	    return ($a <= code && code <= $z) || ($A <= code && code <= $Z) || ($0 <= code && code <= $9) ||
	        (code == $_) || (code == exports.$$);
	}
	function isDigit(code) {
	    return $0 <= code && code <= $9;
	}
	function isExponentStart(code) {
	    return code == $e || code == $E;
	}
	function isExponentSign(code) {
	    return code == exports.$MINUS || code == exports.$PLUS;
	}
	function unescape(code) {
	    switch (code) {
	        case $n:
	            return exports.$LF;
	        case $f:
	            return exports.$FF;
	        case $r:
	            return exports.$CR;
	        case $t:
	            return exports.$TAB;
	        case $v:
	            return exports.$VTAB;
	        default:
	            return code;
	    }
	}
	var OPERATORS = collection_1.SetWrapper.createFromList([
	    '+',
	    '-',
	    '*',
	    '/',
	    '%',
	    '^',
	    '=',
	    '==',
	    '!=',
	    '===',
	    '!==',
	    '<',
	    '>',
	    '<=',
	    '>=',
	    '&&',
	    '||',
	    '&',
	    '|',
	    '!',
	    '?',
	    '#'
	]);
	var KEYWORDS = collection_1.SetWrapper.createFromList(['var', 'null', 'undefined', 'true', 'false']);
	exports.__esModule = true;
	//# sourceMappingURL=lexer.js.map

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	var annotations_1 = __webpack_require__(64);
	var decorators_1 = __webpack_require__(66);
	exports.Inject = decorators_1.makeParamDecorator(annotations_1.InjectAnnotation);
	exports.InjectPromise = decorators_1.makeParamDecorator(annotations_1.InjectPromiseAnnotation);
	exports.InjectLazy = decorators_1.makeParamDecorator(annotations_1.InjectLazyAnnotation);
	exports.Optional = decorators_1.makeParamDecorator(annotations_1.OptionalAnnotation);
	exports.Injectable = decorators_1.makeDecorator(annotations_1.InjectableAnnotation);
	exports.__esModule = true;
	//# sourceMappingURL=decorators.js.map

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * This indirection is needed to free up Component, etc symbols in the public API
	 * to be used by the decorator versions of these annotations.
	 */
	var annotations_impl_1 = __webpack_require__(65);
	exports.InjectAnnotation = annotations_impl_1.Inject;
	exports.InjectPromiseAnnotation = annotations_impl_1.InjectPromise;
	exports.InjectLazyAnnotation = annotations_impl_1.InjectLazy;
	exports.OptionalAnnotation = annotations_impl_1.Optional;
	exports.InjectableAnnotation = annotations_impl_1.Injectable;
	exports.DependencyAnnotation = annotations_impl_1.DependencyAnnotation;
	exports.__esModule = true;
	//# sourceMappingURL=annotations.js.map

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(60);
	/**
	 * A parameter annotation that specifies a dependency.
	 *
	 * ```
	 * class AComponent {
	 *   constructor(@Inject(MyService) aService:MyService) {}
	 * }
	 * ```
	 *
	 * @exportedAs angular2/di_annotations
	 */
	var Inject = (function () {
	    function Inject(token) {
	        this.token = token;
	    }
	    Inject = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object])
	    ], Inject);
	    return Inject;
	})();
	exports.Inject = Inject;
	/**
	 * A parameter annotation that specifies a `Promise` of a dependency.
	 *
	 * ```
	 * class AComponent {
	 *   constructor(@InjectPromise(MyService) aServicePromise:Promise<MyService>) {
	 *     aServicePromise.then(aService:MyService => ...);
	 *   }
	 * }
	 * ```
	 *
	 * @exportedAs angular2/di_annotations
	 */
	var InjectPromise = (function () {
	    function InjectPromise(token) {
	        this.token = token;
	    }
	    InjectPromise = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object])
	    ], InjectPromise);
	    return InjectPromise;
	})();
	exports.InjectPromise = InjectPromise;
	/**
	 * A parameter annotation that creates a synchronous lazy dependency.
	 *
	 * ```
	 * class AComponent {
	 *   constructor(@InjectLazy(MyService) aServiceFn:Function) {
	 *     var aService:MyService = aServiceFn();
	 *   }
	 * }
	 * ```
	 *
	 * @exportedAs angular2/di_annotations
	 */
	var InjectLazy = (function () {
	    function InjectLazy(token) {
	        this.token = token;
	    }
	    InjectLazy = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object])
	    ], InjectLazy);
	    return InjectLazy;
	})();
	exports.InjectLazy = InjectLazy;
	/**
	 * A parameter annotation that marks a dependency as optional. {@link Injector} provides `null` if
	 * the dependency is not found.
	 *
	 * ```
	 * class AComponent {
	 *   constructor(@Optional() aService:MyService) {
	 *     this.aService = aService;
	 *   }
	 * }
	 * ```
	 *
	 * @exportedAs angular2/di_annotations
	 */
	var Optional = (function () {
	    function Optional() {
	    }
	    Optional = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], Optional);
	    return Optional;
	})();
	exports.Optional = Optional;
	/**
	 * `DependencyAnnotation` is used by the framework to extend DI.
	 *
	 * Only annotations implementing `DependencyAnnotation` are added to the list of dependency
	 * properties.
	 *
	 * For example:
	 *
	 * ```
	 * class Parent extends DependencyAnnotation {}
	 * class NotDependencyProperty {}
	 *
	 * class AComponent {
	 *   constructor(@Parent @NotDependencyProperty aService:AService) {}
	 * }
	 * ```
	 *
	 * will create the following dependency:
	 *
	 * ```
	 * new Dependency(Key.get(AService), [new Parent()])
	 * ```
	 *
	 * The framework can use `new Parent()` to handle the `aService` dependency
	 * in a specific way.
	 *
	 * @exportedAs angular2/di_annotations
	 */
	var DependencyAnnotation = (function () {
	    function DependencyAnnotation() {
	    }
	    Object.defineProperty(DependencyAnnotation.prototype, "token", {
	        get: function () { return null; },
	        enumerable: true,
	        configurable: true
	    });
	    DependencyAnnotation = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], DependencyAnnotation);
	    return DependencyAnnotation;
	})();
	exports.DependencyAnnotation = DependencyAnnotation;
	/**
	 * A marker annotation that marks a class as available to `Injector` for creation. Used by tooling
	 * for generating constructor stubs.
	 *
	 * ```
	 * class NeedsService {
	 *   constructor(svc:UsefulService) {}
	 * }
	 *
	 * @Injectable
	 * class UsefulService {}
	 * ```
	 * @exportedAs angular2/di_annotations
	 */
	var Injectable = (function () {
	    function Injectable() {
	    }
	    Injectable = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], Injectable);
	    return Injectable;
	})();
	exports.Injectable = Injectable;
	exports.__esModule = true;
	//# sourceMappingURL=annotations_impl.js.map

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	var lang_1 = __webpack_require__(60);
	function makeDecorator(annotationCls) {
	    return function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i - 0] = arguments[_i];
	        }
	        var Reflect = lang_1.global.Reflect;
	        if (!(Reflect && Reflect.getMetadata)) {
	            throw 'reflect-metadata shim is required when using class decorators';
	        }
	        var annotationInstance = Object.create(annotationCls.prototype);
	        annotationCls.apply(annotationInstance, args);
	        return function (cls) {
	            var annotations = Reflect.getMetadata('annotations', cls);
	            annotations = annotations || [];
	            annotations.push(annotationInstance);
	            Reflect.defineMetadata('annotations', annotations, cls);
	            return cls;
	        };
	    };
	}
	exports.makeDecorator = makeDecorator;
	function makeParamDecorator(annotationCls) {
	    return function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i - 0] = arguments[_i];
	        }
	        var Reflect = lang_1.global.Reflect;
	        if (!(Reflect && Reflect.getMetadata)) {
	            throw 'reflect-metadata shim is required when using parameter decorators';
	        }
	        var annotationInstance = Object.create(annotationCls.prototype);
	        annotationCls.apply(annotationInstance, args);
	        return function (cls, unusedKey, index) {
	            var parameters = Reflect.getMetadata('parameters', cls);
	            parameters = parameters || [];
	            // there might be gaps if some in between parameters do not have annotations.
	            // we pad with nulls.
	            while (parameters.length <= index) {
	                parameters.push(null);
	            }
	            parameters[index] = parameters[index] || [];
	            var annotationsForParam = parameters[index];
	            annotationsForParam.push(annotationInstance);
	            Reflect.defineMetadata('parameters', parameters, cls);
	            return cls;
	        };
	    };
	}
	exports.makeParamDecorator = makeParamDecorator;
	exports.__esModule = true;
	//# sourceMappingURL=decorators.js.map

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var decorators_1 = __webpack_require__(63);
	var lang_1 = __webpack_require__(60);
	var collection_1 = __webpack_require__(61);
	var lexer_1 = __webpack_require__(62);
	var reflection_1 = __webpack_require__(68);
	var ast_1 = __webpack_require__(59);
	var _implicitReceiver = new ast_1.ImplicitReceiver();
	// TODO(tbosch): Cannot make this const/final right now because of the transpiler...
	var INTERPOLATION_REGEXP = lang_1.RegExpWrapper.create('\\{\\{(.*?)\\}\\}');
	var Parser = (function () {
	    function Parser(lexer, providedReflector) {
	        if (providedReflector === void 0) { providedReflector = null; }
	        this._lexer = lexer;
	        this._reflector = lang_1.isPresent(providedReflector) ? providedReflector : reflection_1.reflector;
	    }
	    Parser.prototype.parseAction = function (input, location) {
	        var tokens = this._lexer.tokenize(input);
	        var ast = new _ParseAST(input, location, tokens, this._reflector, true).parseChain();
	        return new ast_1.ASTWithSource(ast, input, location);
	    };
	    Parser.prototype.parseBinding = function (input, location) {
	        var tokens = this._lexer.tokenize(input);
	        var ast = new _ParseAST(input, location, tokens, this._reflector, false).parseChain();
	        return new ast_1.ASTWithSource(ast, input, location);
	    };
	    Parser.prototype.addPipes = function (bindingAst, pipes) {
	        if (collection_1.ListWrapper.isEmpty(pipes))
	            return bindingAst;
	        var res = collection_1.ListWrapper.reduce(pipes, function (result, currentPipeName) { return new ast_1.Pipe(result, currentPipeName, [], false); }, bindingAst.ast);
	        return new ast_1.ASTWithSource(res, bindingAst.source, bindingAst.location);
	    };
	    Parser.prototype.parseTemplateBindings = function (input, location) {
	        var tokens = this._lexer.tokenize(input);
	        return new _ParseAST(input, location, tokens, this._reflector, false).parseTemplateBindings();
	    };
	    Parser.prototype.parseInterpolation = function (input, location) {
	        var parts = lang_1.StringWrapper.split(input, INTERPOLATION_REGEXP);
	        if (parts.length <= 1) {
	            return null;
	        }
	        var strings = [];
	        var expressions = [];
	        for (var i = 0; i < parts.length; i++) {
	            var part = parts[i];
	            if (i % 2 === 0) {
	                // fixed string
	                collection_1.ListWrapper.push(strings, part);
	            }
	            else {
	                var tokens = this._lexer.tokenize(part);
	                var ast = new _ParseAST(input, location, tokens, this._reflector, false).parseChain();
	                collection_1.ListWrapper.push(expressions, ast);
	            }
	        }
	        return new ast_1.ASTWithSource(new ast_1.Interpolation(strings, expressions), input, location);
	    };
	    Parser.prototype.wrapLiteralPrimitive = function (input, location) {
	        return new ast_1.ASTWithSource(new ast_1.LiteralPrimitive(input), input, location);
	    };
	    Parser = __decorate([
	        decorators_1.Injectable(), 
	        __metadata('design:paramtypes', [lexer_1.Lexer, reflection_1.Reflector])
	    ], Parser);
	    return Parser;
	})();
	exports.Parser = Parser;
	var _ParseAST = (function () {
	    function _ParseAST(input, location, tokens, reflector, parseAction) {
	        this.input = input;
	        this.location = location;
	        this.tokens = tokens;
	        this.reflector = reflector;
	        this.parseAction = parseAction;
	        this.index = 0;
	    }
	    _ParseAST.prototype.peek = function (offset) {
	        var i = this.index + offset;
	        return i < this.tokens.length ? this.tokens[i] : lexer_1.EOF;
	    };
	    Object.defineProperty(_ParseAST.prototype, "next", {
	        get: function () { return this.peek(0); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(_ParseAST.prototype, "inputIndex", {
	        get: function () {
	            return (this.index < this.tokens.length) ? this.next.index : this.input.length;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    _ParseAST.prototype.advance = function () { this.index++; };
	    _ParseAST.prototype.optionalCharacter = function (code) {
	        if (this.next.isCharacter(code)) {
	            this.advance();
	            return true;
	        }
	        else {
	            return false;
	        }
	    };
	    _ParseAST.prototype.optionalKeywordVar = function () {
	        if (this.peekKeywordVar()) {
	            this.advance();
	            return true;
	        }
	        else {
	            return false;
	        }
	    };
	    _ParseAST.prototype.peekKeywordVar = function () { return this.next.isKeywordVar() || this.next.isOperator('#'); };
	    _ParseAST.prototype.expectCharacter = function (code) {
	        if (this.optionalCharacter(code))
	            return;
	        this.error("Missing expected " + lang_1.StringWrapper.fromCharCode(code));
	    };
	    _ParseAST.prototype.optionalOperator = function (op) {
	        if (this.next.isOperator(op)) {
	            this.advance();
	            return true;
	        }
	        else {
	            return false;
	        }
	    };
	    _ParseAST.prototype.expectOperator = function (operator) {
	        if (this.optionalOperator(operator))
	            return;
	        this.error("Missing expected operator " + operator);
	    };
	    _ParseAST.prototype.expectIdentifierOrKeyword = function () {
	        var n = this.next;
	        if (!n.isIdentifier() && !n.isKeyword()) {
	            this.error("Unexpected token " + n + ", expected identifier or keyword");
	        }
	        this.advance();
	        return n.toString();
	    };
	    _ParseAST.prototype.expectIdentifierOrKeywordOrString = function () {
	        var n = this.next;
	        if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {
	            this.error("Unexpected token " + n + ", expected identifier, keyword, or string");
	        }
	        this.advance();
	        return n.toString();
	    };
	    _ParseAST.prototype.parseChain = function () {
	        var exprs = [];
	        while (this.index < this.tokens.length) {
	            var expr = this.parsePipe();
	            collection_1.ListWrapper.push(exprs, expr);
	            if (this.optionalCharacter(lexer_1.$SEMICOLON)) {
	                if (!this.parseAction) {
	                    this.error("Binding expression cannot contain chained expression");
	                }
	                while (this.optionalCharacter(lexer_1.$SEMICOLON)) {
	                } // read all semicolons
	            }
	            else if (this.index < this.tokens.length) {
	                this.error("Unexpected token '" + this.next + "'");
	            }
	        }
	        if (exprs.length == 0)
	            return new ast_1.EmptyExpr();
	        if (exprs.length == 1)
	            return exprs[0];
	        return new ast_1.Chain(exprs);
	    };
	    _ParseAST.prototype.parsePipe = function () {
	        var result = this.parseExpression();
	        if (this.optionalOperator("|")) {
	            return this.parseInlinedPipe(result);
	        }
	        else {
	            return result;
	        }
	    };
	    _ParseAST.prototype.parseExpression = function () {
	        var start = this.inputIndex;
	        var result = this.parseConditional();
	        while (this.next.isOperator('=')) {
	            if (!result.isAssignable) {
	                var end = this.inputIndex;
	                var expression = this.input.substring(start, end);
	                this.error("Expression " + expression + " is not assignable");
	            }
	            if (!this.parseAction) {
	                this.error("Binding expression cannot contain assignments");
	            }
	            this.expectOperator('=');
	            result = new ast_1.Assignment(result, this.parseConditional());
	        }
	        return result;
	    };
	    _ParseAST.prototype.parseConditional = function () {
	        var start = this.inputIndex;
	        var result = this.parseLogicalOr();
	        if (this.optionalOperator('?')) {
	            var yes = this.parseExpression();
	            if (!this.optionalCharacter(lexer_1.$COLON)) {
	                var end = this.inputIndex;
	                var expression = this.input.substring(start, end);
	                this.error("Conditional expression " + expression + " requires all 3 expressions");
	            }
	            var no = this.parseExpression();
	            return new ast_1.Conditional(result, yes, no);
	        }
	        else {
	            return result;
	        }
	    };
	    _ParseAST.prototype.parseLogicalOr = function () {
	        // '||'
	        var result = this.parseLogicalAnd();
	        while (this.optionalOperator('||')) {
	            result = new ast_1.Binary('||', result, this.parseLogicalAnd());
	        }
	        return result;
	    };
	    _ParseAST.prototype.parseLogicalAnd = function () {
	        // '&&'
	        var result = this.parseEquality();
	        while (this.optionalOperator('&&')) {
	            result = new ast_1.Binary('&&', result, this.parseEquality());
	        }
	        return result;
	    };
	    _ParseAST.prototype.parseEquality = function () {
	        // '==','!=','===','!=='
	        var result = this.parseRelational();
	        while (true) {
	            if (this.optionalOperator('==')) {
	                result = new ast_1.Binary('==', result, this.parseRelational());
	            }
	            else if (this.optionalOperator('===')) {
	                result = new ast_1.Binary('===', result, this.parseRelational());
	            }
	            else if (this.optionalOperator('!=')) {
	                result = new ast_1.Binary('!=', result, this.parseRelational());
	            }
	            else if (this.optionalOperator('!==')) {
	                result = new ast_1.Binary('!==', result, this.parseRelational());
	            }
	            else {
	                return result;
	            }
	        }
	    };
	    _ParseAST.prototype.parseRelational = function () {
	        // '<', '>', '<=', '>='
	        var result = this.parseAdditive();
	        while (true) {
	            if (this.optionalOperator('<')) {
	                result = new ast_1.Binary('<', result, this.parseAdditive());
	            }
	            else if (this.optionalOperator('>')) {
	                result = new ast_1.Binary('>', result, this.parseAdditive());
	            }
	            else if (this.optionalOperator('<=')) {
	                result = new ast_1.Binary('<=', result, this.parseAdditive());
	            }
	            else if (this.optionalOperator('>=')) {
	                result = new ast_1.Binary('>=', result, this.parseAdditive());
	            }
	            else {
	                return result;
	            }
	        }
	    };
	    _ParseAST.prototype.parseAdditive = function () {
	        // '+', '-'
	        var result = this.parseMultiplicative();
	        while (true) {
	            if (this.optionalOperator('+')) {
	                result = new ast_1.Binary('+', result, this.parseMultiplicative());
	            }
	            else if (this.optionalOperator('-')) {
	                result = new ast_1.Binary('-', result, this.parseMultiplicative());
	            }
	            else {
	                return result;
	            }
	        }
	    };
	    _ParseAST.prototype.parseMultiplicative = function () {
	        // '*', '%', '/'
	        var result = this.parsePrefix();
	        while (true) {
	            if (this.optionalOperator('*')) {
	                result = new ast_1.Binary('*', result, this.parsePrefix());
	            }
	            else if (this.optionalOperator('%')) {
	                result = new ast_1.Binary('%', result, this.parsePrefix());
	            }
	            else if (this.optionalOperator('/')) {
	                result = new ast_1.Binary('/', result, this.parsePrefix());
	            }
	            else {
	                return result;
	            }
	        }
	    };
	    _ParseAST.prototype.parsePrefix = function () {
	        if (this.optionalOperator('+')) {
	            return this.parsePrefix();
	        }
	        else if (this.optionalOperator('-')) {
	            return new ast_1.Binary('-', new ast_1.LiteralPrimitive(0), this.parsePrefix());
	        }
	        else if (this.optionalOperator('!')) {
	            return new ast_1.PrefixNot(this.parsePrefix());
	        }
	        else {
	            return this.parseCallChain();
	        }
	    };
	    _ParseAST.prototype.parseCallChain = function () {
	        var result = this.parsePrimary();
	        while (true) {
	            if (this.optionalCharacter(lexer_1.$PERIOD)) {
	                result = this.parseAccessMemberOrMethodCall(result);
	            }
	            else if (this.optionalCharacter(lexer_1.$LBRACKET)) {
	                var key = this.parseExpression();
	                this.expectCharacter(lexer_1.$RBRACKET);
	                result = new ast_1.KeyedAccess(result, key);
	            }
	            else if (this.optionalCharacter(lexer_1.$LPAREN)) {
	                var args = this.parseCallArguments();
	                this.expectCharacter(lexer_1.$RPAREN);
	                result = new ast_1.FunctionCall(result, args);
	            }
	            else {
	                return result;
	            }
	        }
	    };
	    _ParseAST.prototype.parsePrimary = function () {
	        if (this.optionalCharacter(lexer_1.$LPAREN)) {
	            var result = this.parsePipe();
	            this.expectCharacter(lexer_1.$RPAREN);
	            return result;
	        }
	        else if (this.next.isKeywordNull() || this.next.isKeywordUndefined()) {
	            this.advance();
	            return new ast_1.LiteralPrimitive(null);
	        }
	        else if (this.next.isKeywordTrue()) {
	            this.advance();
	            return new ast_1.LiteralPrimitive(true);
	        }
	        else if (this.next.isKeywordFalse()) {
	            this.advance();
	            return new ast_1.LiteralPrimitive(false);
	        }
	        else if (this.optionalCharacter(lexer_1.$LBRACKET)) {
	            var elements = this.parseExpressionList(lexer_1.$RBRACKET);
	            this.expectCharacter(lexer_1.$RBRACKET);
	            return new ast_1.LiteralArray(elements);
	        }
	        else if (this.next.isCharacter(lexer_1.$LBRACE)) {
	            return this.parseLiteralMap();
	        }
	        else if (this.next.isIdentifier()) {
	            return this.parseAccessMemberOrMethodCall(_implicitReceiver);
	        }
	        else if (this.next.isNumber()) {
	            var value = this.next.toNumber();
	            this.advance();
	            return new ast_1.LiteralPrimitive(value);
	        }
	        else if (this.next.isString()) {
	            var literalValue = this.next.toString();
	            this.advance();
	            return new ast_1.LiteralPrimitive(literalValue);
	        }
	        else if (this.index >= this.tokens.length) {
	            this.error("Unexpected end of expression: " + this.input);
	        }
	        else {
	            this.error("Unexpected token " + this.next);
	        }
	    };
	    _ParseAST.prototype.parseExpressionList = function (terminator) {
	        var result = [];
	        if (!this.next.isCharacter(terminator)) {
	            do {
	                collection_1.ListWrapper.push(result, this.parseExpression());
	            } while (this.optionalCharacter(lexer_1.$COMMA));
	        }
	        return result;
	    };
	    _ParseAST.prototype.parseLiteralMap = function () {
	        var keys = [];
	        var values = [];
	        this.expectCharacter(lexer_1.$LBRACE);
	        if (!this.optionalCharacter(lexer_1.$RBRACE)) {
	            do {
	                var key = this.expectIdentifierOrKeywordOrString();
	                collection_1.ListWrapper.push(keys, key);
	                this.expectCharacter(lexer_1.$COLON);
	                collection_1.ListWrapper.push(values, this.parseExpression());
	            } while (this.optionalCharacter(lexer_1.$COMMA));
	            this.expectCharacter(lexer_1.$RBRACE);
	        }
	        return new ast_1.LiteralMap(keys, values);
	    };
	    _ParseAST.prototype.parseAccessMemberOrMethodCall = function (receiver) {
	        var id = this.expectIdentifierOrKeyword();
	        if (this.optionalCharacter(lexer_1.$LPAREN)) {
	            var args = this.parseCallArguments();
	            this.expectCharacter(lexer_1.$RPAREN);
	            var fn = this.reflector.method(id);
	            return new ast_1.MethodCall(receiver, id, fn, args);
	        }
	        else {
	            var getter = this.reflector.getter(id);
	            var setter = this.reflector.setter(id);
	            var am = new ast_1.AccessMember(receiver, id, getter, setter);
	            if (this.optionalOperator("|")) {
	                return this.parseInlinedPipe(am);
	            }
	            else {
	                return am;
	            }
	        }
	    };
	    _ParseAST.prototype.parseInlinedPipe = function (result) {
	        do {
	            if (this.parseAction) {
	                this.error("Cannot have a pipe in an action expression");
	            }
	            var name = this.expectIdentifierOrKeyword();
	            var args = collection_1.ListWrapper.create();
	            while (this.optionalCharacter(lexer_1.$COLON)) {
	                collection_1.ListWrapper.push(args, this.parseExpression());
	            }
	            result = new ast_1.Pipe(result, name, args, true);
	        } while (this.optionalOperator("|"));
	        return result;
	    };
	    _ParseAST.prototype.parseCallArguments = function () {
	        if (this.next.isCharacter(lexer_1.$RPAREN))
	            return [];
	        var positionals = [];
	        do {
	            collection_1.ListWrapper.push(positionals, this.parseExpression());
	        } while (this.optionalCharacter(lexer_1.$COMMA));
	        return positionals;
	    };
	    /**
	     * An identifier, a keyword, a string with an optional `-` inbetween.
	     */
	    _ParseAST.prototype.expectTemplateBindingKey = function () {
	        var result = '';
	        var operatorFound = false;
	        do {
	            result += this.expectIdentifierOrKeywordOrString();
	            operatorFound = this.optionalOperator('-');
	            if (operatorFound) {
	                result += '-';
	            }
	        } while (operatorFound);
	        return result.toString();
	    };
	    _ParseAST.prototype.parseTemplateBindings = function () {
	        var bindings = [];
	        var prefix = null;
	        while (this.index < this.tokens.length) {
	            var keyIsVar = this.optionalKeywordVar();
	            var key = this.expectTemplateBindingKey();
	            if (!keyIsVar) {
	                if (prefix == null) {
	                    prefix = key;
	                }
	                else {
	                    key = prefix + '-' + key;
	                }
	            }
	            this.optionalCharacter(lexer_1.$COLON);
	            var name = null;
	            var expression = null;
	            if (this.next !== lexer_1.EOF) {
	                if (keyIsVar) {
	                    if (this.optionalOperator("=")) {
	                        name = this.expectTemplateBindingKey();
	                    }
	                    else {
	                        name = '\$implicit';
	                    }
	                }
	                else if (!this.peekKeywordVar()) {
	                    var start = this.inputIndex;
	                    var ast = this.parsePipe();
	                    var source = this.input.substring(start, this.inputIndex);
	                    expression = new ast_1.ASTWithSource(ast, source, this.location);
	                }
	            }
	            collection_1.ListWrapper.push(bindings, new ast_1.TemplateBinding(key, keyIsVar, name, expression));
	            if (!this.optionalCharacter(lexer_1.$SEMICOLON)) {
	                this.optionalCharacter(lexer_1.$COMMA);
	            }
	        }
	        return bindings;
	    };
	    _ParseAST.prototype.error = function (message, index) {
	        if (index === void 0) { index = null; }
	        if (lang_1.isBlank(index))
	            index = this.index;
	        var location = (index < this.tokens.length) ? "at column " + (this.tokens[index].index + 1) + " in" :
	            "at the end of the expression";
	        throw new lang_1.BaseException("Parser Error: " + message + " " + location + " [" + this.input + "] in " + this.location);
	    };
	    return _ParseAST;
	})();
	exports.__esModule = true;
	//# sourceMappingURL=parser.js.map

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	var reflector_1 = __webpack_require__(69);
	var reflector_2 = __webpack_require__(69);
	exports.Reflector = reflector_2.Reflector;
	var reflection_capabilities_1 = __webpack_require__(71);
	exports.reflector = new reflector_1.Reflector(new reflection_capabilities_1.ReflectionCapabilities());
	exports.__esModule = true;
	//# sourceMappingURL=reflection.js.map

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	var collection_1 = __webpack_require__(61);
	var types_1 = __webpack_require__(70);
	exports.SetterFn = types_1.SetterFn;
	exports.GetterFn = types_1.GetterFn;
	exports.MethodFn = types_1.MethodFn;
	var Reflector = (function () {
	    function Reflector(reflectionCapabilities) {
	        this._typeInfo = collection_1.MapWrapper.create();
	        this._getters = collection_1.MapWrapper.create();
	        this._setters = collection_1.MapWrapper.create();
	        this._methods = collection_1.MapWrapper.create();
	        this.reflectionCapabilities = reflectionCapabilities;
	    }
	    Reflector.prototype.registerType = function (type, typeInfo) {
	        collection_1.MapWrapper.set(this._typeInfo, type, typeInfo);
	    };
	    Reflector.prototype.registerGetters = function (getters) { _mergeMaps(this._getters, getters); };
	    Reflector.prototype.registerSetters = function (setters) { _mergeMaps(this._setters, setters); };
	    Reflector.prototype.registerMethods = function (methods) { _mergeMaps(this._methods, methods); };
	    Reflector.prototype.factory = function (type) {
	        if (collection_1.MapWrapper.contains(this._typeInfo, type)) {
	            return collection_1.MapWrapper.get(this._typeInfo, type)["factory"];
	        }
	        else {
	            return this.reflectionCapabilities.factory(type);
	        }
	    };
	    Reflector.prototype.parameters = function (typeOfFunc) {
	        if (collection_1.MapWrapper.contains(this._typeInfo, typeOfFunc)) {
	            return collection_1.MapWrapper.get(this._typeInfo, typeOfFunc)["parameters"];
	        }
	        else {
	            return this.reflectionCapabilities.parameters(typeOfFunc);
	        }
	    };
	    Reflector.prototype.annotations = function (typeOfFunc) {
	        if (collection_1.MapWrapper.contains(this._typeInfo, typeOfFunc)) {
	            return collection_1.MapWrapper.get(this._typeInfo, typeOfFunc)["annotations"];
	        }
	        else {
	            return this.reflectionCapabilities.annotations(typeOfFunc);
	        }
	    };
	    Reflector.prototype.getter = function (name) {
	        if (collection_1.MapWrapper.contains(this._getters, name)) {
	            return collection_1.MapWrapper.get(this._getters, name);
	        }
	        else {
	            return this.reflectionCapabilities.getter(name);
	        }
	    };
	    Reflector.prototype.setter = function (name) {
	        if (collection_1.MapWrapper.contains(this._setters, name)) {
	            return collection_1.MapWrapper.get(this._setters, name);
	        }
	        else {
	            return this.reflectionCapabilities.setter(name);
	        }
	    };
	    Reflector.prototype.method = function (name) {
	        if (collection_1.MapWrapper.contains(this._methods, name)) {
	            return collection_1.MapWrapper.get(this._methods, name);
	        }
	        else {
	            return this.reflectionCapabilities.method(name);
	        }
	    };
	    return Reflector;
	})();
	exports.Reflector = Reflector;
	function _mergeMaps(target, config) {
	    collection_1.StringMapWrapper.forEach(config, function (v, k) { return collection_1.MapWrapper.set(target, k, v); });
	}
	exports.__esModule = true;
	//# sourceMappingURL=reflector.js.map

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	exports.__esModule = true;
	//# sourceMappingURL=types.js.map

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	var lang_1 = __webpack_require__(60);
	var collection_1 = __webpack_require__(61);
	var ReflectionCapabilities = (function () {
	    function ReflectionCapabilities(reflect) {
	        this._reflect = lang_1.isPresent(reflect) ? reflect : lang_1.global.Reflect;
	    }
	    ReflectionCapabilities.prototype.factory = function (t) {
	        switch (t.length) {
	            case 0:
	                return function () { return new t(); };
	            case 1:
	                return function (a1) { return new t(a1); };
	            case 2:
	                return function (a1, a2) { return new t(a1, a2); };
	            case 3:
	                return function (a1, a2, a3) { return new t(a1, a2, a3); };
	            case 4:
	                return function (a1, a2, a3, a4) { return new t(a1, a2, a3, a4); };
	            case 5:
	                return function (a1, a2, a3, a4, a5) { return new t(a1, a2, a3, a4, a5); };
	            case 6:
	                return function (a1, a2, a3, a4, a5, a6) { return new t(a1, a2, a3, a4, a5, a6); };
	            case 7:
	                return function (a1, a2, a3, a4, a5, a6, a7) { return new t(a1, a2, a3, a4, a5, a6, a7); };
	            case 8:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8) {
	                    return new t(a1, a2, a3, a4, a5, a6, a7, a8);
	                };
	            case 9:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9) {
	                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9);
	                };
	            case 10:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) {
	                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
	                };
	        }
	        ;
	        throw new Error("Cannot create a factory for '" + lang_1.stringify(t) + "' because its constructor has more than 10 arguments");
	    };
	    ReflectionCapabilities.prototype._zipTypesAndAnnotaions = function (paramTypes, paramAnnotations) {
	        var result;
	        if (typeof paramTypes === 'undefined') {
	            result = collection_1.ListWrapper.createFixedSize(paramAnnotations.length);
	        }
	        else {
	            result = collection_1.ListWrapper.createFixedSize(paramTypes.length);
	        }
	        for (var i = 0; i < result.length; i++) {
	            // TS outputs Object for parameters without types, while Traceur omits
	            // the annotations. For now we preserve the Traceur behavior to aid
	            // migration, but this can be revisited.
	            if (typeof paramTypes === 'undefined') {
	                result[i] = [];
	            }
	            else if (paramTypes[i] != Object) {
	                result[i] = [paramTypes[i]];
	            }
	            else {
	                result[i] = [];
	            }
	            if (lang_1.isPresent(paramAnnotations) && lang_1.isPresent(paramAnnotations[i])) {
	                result[i] = result[i].concat(paramAnnotations[i]);
	            }
	        }
	        return result;
	    };
	    ReflectionCapabilities.prototype.parameters = function (typeOfFunc) {
	        // Prefer the direct API.
	        if (lang_1.isPresent(typeOfFunc.parameters)) {
	            return typeOfFunc.parameters;
	        }
	        if (lang_1.isPresent(this._reflect) && lang_1.isPresent(this._reflect.getMetadata)) {
	            var paramAnnotations = this._reflect.getMetadata('parameters', typeOfFunc);
	            var paramTypes = this._reflect.getMetadata('design:paramtypes', typeOfFunc);
	            if (lang_1.isPresent(paramTypes) || lang_1.isPresent(paramAnnotations)) {
	                return this._zipTypesAndAnnotaions(paramTypes, paramAnnotations);
	            }
	        }
	        return collection_1.ListWrapper.createFixedSize(typeOfFunc.length);
	    };
	    ReflectionCapabilities.prototype.annotations = function (typeOfFunc) {
	        // Prefer the direct API.
	        if (lang_1.isPresent(typeOfFunc.annotations)) {
	            return typeOfFunc.annotations;
	        }
	        if (lang_1.isPresent(this._reflect) && lang_1.isPresent(this._reflect.getMetadata)) {
	            var annotations = this._reflect.getMetadata('annotations', typeOfFunc);
	            if (lang_1.isPresent(annotations))
	                return annotations;
	        }
	        return [];
	    };
	    ReflectionCapabilities.prototype.getter = function (name) { return new Function('o', 'return o.' + name + ';'); };
	    ReflectionCapabilities.prototype.setter = function (name) { return new Function('o', 'v', 'return o.' + name + ' = v;'); };
	    ReflectionCapabilities.prototype.method = function (name) {
	        var functionBody = "if (!o." + name + ") throw new Error('\"" + name + "\" is undefined');\n        return o." + name + ".apply(o, args);";
	        return new Function('o', 'args', functionBody);
	    };
	    return ReflectionCapabilities;
	})();
	exports.ReflectionCapabilities = ReflectionCapabilities;
	exports.__esModule = true;
	//# sourceMappingURL=reflection_capabilities.js.map

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	var lang_1 = __webpack_require__(60);
	var collection_1 = __webpack_require__(61);
	var Locals = (function () {
	    function Locals(parent, current) {
	        this.parent = parent;
	        this.current = current;
	    }
	    Locals.prototype.contains = function (name) {
	        if (collection_1.MapWrapper.contains(this.current, name)) {
	            return true;
	        }
	        if (lang_1.isPresent(this.parent)) {
	            return this.parent.contains(name);
	        }
	        return false;
	    };
	    Locals.prototype.get = function (name) {
	        if (collection_1.MapWrapper.contains(this.current, name)) {
	            return collection_1.MapWrapper.get(this.current, name);
	        }
	        if (lang_1.isPresent(this.parent)) {
	            return this.parent.get(name);
	        }
	        throw new lang_1.BaseException("Cannot find '" + name + "'");
	    };
	    Locals.prototype.set = function (name, value) {
	        // TODO(rado): consider removing this check if we can guarantee this is not
	        // exposed to the public API.
	        // TODO: vsavkin maybe it should check only the local map
	        if (collection_1.MapWrapper.contains(this.current, name)) {
	            collection_1.MapWrapper.set(this.current, name, value);
	        }
	        else {
	            throw new lang_1.BaseException('Setting of new keys post-construction is not supported.');
	        }
	    };
	    Locals.prototype.clearValues = function () { collection_1.MapWrapper.clearValues(this.current); };
	    return Locals;
	})();
	exports.Locals = Locals;
	exports.__esModule = true;
	//# sourceMappingURL=locals.js.map

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var lang_1 = __webpack_require__(60);
	var ExpressionChangedAfterItHasBeenChecked = (function (_super) {
	    __extends(ExpressionChangedAfterItHasBeenChecked, _super);
	    function ExpressionChangedAfterItHasBeenChecked(proto, change) {
	        _super.call(this);
	        this.message =
	            ("Expression '" + proto.expressionAsString + "' has changed after it was checked. ") +
	                ("Previous value: '" + change.previousValue + "'. Current value: '" + change.currentValue + "'");
	    }
	    ExpressionChangedAfterItHasBeenChecked.prototype.toString = function () { return this.message; };
	    return ExpressionChangedAfterItHasBeenChecked;
	})(lang_1.BaseException);
	exports.ExpressionChangedAfterItHasBeenChecked = ExpressionChangedAfterItHasBeenChecked;
	var ChangeDetectionError = (function (_super) {
	    __extends(ChangeDetectionError, _super);
	    function ChangeDetectionError(proto, originalException) {
	        _super.call(this);
	        this.originalException = originalException;
	        this.location = proto.expressionAsString;
	        this.message = this.originalException + " in [" + this.location + "]";
	    }
	    ChangeDetectionError.prototype.toString = function () { return this.message; };
	    return ChangeDetectionError;
	})(lang_1.BaseException);
	exports.ChangeDetectionError = ChangeDetectionError;
	exports.__esModule = true;
	//# sourceMappingURL=exceptions.js.map

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	var ProtoChangeDetector = (function () {
	    function ProtoChangeDetector() {
	    }
	    ProtoChangeDetector.prototype.instantiate = function (dispatcher) { return null; };
	    return ProtoChangeDetector;
	})();
	exports.ProtoChangeDetector = ProtoChangeDetector;
	/**
	 * Interface used by Angular to control the change detection strategy for an application.
	 *
	 * Angular implements the following change detection strategies by default:
	 *
	 * - {@link DynamicChangeDetection}: slower, but does not require `eval()`.
	 * - {@link JitChangeDetection}: faster, but requires `eval()`.
	 *
	 * In JavaScript, you should always use `JitChangeDetection`, unless you are in an environment that
	 *has
	 * [CSP](https://developer.mozilla.org/en-US/docs/Web/Security/CSP), such as a Chrome Extension.
	 *
	 * In Dart, use `DynamicChangeDetection` during development. The Angular transformer generates an
	 *analog to the
	 * `JitChangeDetection` strategy at compile time.
	 *
	 *
	 * See: {@link DynamicChangeDetection}, {@link JitChangeDetection}
	 *
	 * # Example
	 * ```javascript
	 * bootstrap(MyApp, [bind(ChangeDetection).toClass(DynamicChangeDetection)]);
	 * ```
	 * @exportedAs angular2/change_detection
	 */
	var ChangeDetection = (function () {
	    function ChangeDetection() {
	    }
	    ChangeDetection.prototype.createProtoChangeDetector = function (definition) {
	        return null;
	    };
	    return ChangeDetection;
	})();
	exports.ChangeDetection = ChangeDetection;
	var ChangeDispatcher = (function () {
	    function ChangeDispatcher() {
	    }
	    ChangeDispatcher.prototype.notifyOnBinding = function (bindingRecord, value) { };
	    return ChangeDispatcher;
	})();
	exports.ChangeDispatcher = ChangeDispatcher;
	var ChangeDetector = (function () {
	    function ChangeDetector() {
	    }
	    ChangeDetector.prototype.addChild = function (cd) { };
	    ChangeDetector.prototype.addShadowDomChild = function (cd) { };
	    ChangeDetector.prototype.removeChild = function (cd) { };
	    ChangeDetector.prototype.removeShadowDomChild = function (cd) { };
	    ChangeDetector.prototype.remove = function () { };
	    ChangeDetector.prototype.hydrate = function (context, locals, directives) { };
	    ChangeDetector.prototype.dehydrate = function () { };
	    ChangeDetector.prototype.markPathToRootAsCheckOnce = function () { };
	    ChangeDetector.prototype.detectChanges = function () { };
	    ChangeDetector.prototype.checkNoChanges = function () { };
	    return ChangeDetector;
	})();
	exports.ChangeDetector = ChangeDetector;
	var ChangeDetectorDefinition = (function () {
	    function ChangeDetectorDefinition(id, strategy, variableNames, bindingRecords, directiveRecords) {
	        this.id = id;
	        this.strategy = strategy;
	        this.variableNames = variableNames;
	        this.bindingRecords = bindingRecords;
	        this.directiveRecords = directiveRecords;
	    }
	    return ChangeDetectorDefinition;
	})();
	exports.ChangeDetectorDefinition = ChangeDetectorDefinition;
	exports.__esModule = true;
	//# sourceMappingURL=interfaces.js.map

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	// TODO:vsavkin Use enums after switching to TypeScript
	/**
	 * CHECK_ONCE means that after calling detectChanges the mode of the change detector
	 * will become CHECKED.
	 */
	exports.CHECK_ONCE = "CHECK_ONCE";
	/**
	 * CHECKED means that the change detector should be skipped until its mode changes to
	 * CHECK_ONCE or CHECK_ALWAYS.
	 */
	exports.CHECKED = "CHECKED";
	/**
	 * CHECK_ALWAYS means that after calling detectChanges the mode of the change detector
	 * will remain CHECK_ALWAYS.
	 */
	exports.CHECK_ALWAYS = "ALWAYS_CHECK";
	/**
	 * DETACHED means that the change detector sub tree is not a part of the main tree and
	 * should be skipped.
	 */
	exports.DETACHED = "DETACHED";
	/**
	 * ON_PUSH means that the change detector's mode will be set to CHECK_ONCE during hydration.
	 */
	exports.ON_PUSH = "ON_PUSH";
	/**
	 * DEFAULT means that the change detector's mode will be set to CHECK_ALWAYS during hydration.
	 */
	exports.DEFAULT = "DEFAULT";
	exports.__esModule = true;
	//# sourceMappingURL=constants.js.map

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var lang_1 = __webpack_require__(60);
	var collection_1 = __webpack_require__(61);
	var ast_1 = __webpack_require__(59);
	var interfaces_1 = __webpack_require__(74);
	var change_detection_util_1 = __webpack_require__(78);
	var dynamic_change_detector_1 = __webpack_require__(77);
	var change_detection_jit_generator_1 = __webpack_require__(83);
	var directive_record_1 = __webpack_require__(84);
	var coalesce_1 = __webpack_require__(85);
	var proto_record_1 = __webpack_require__(82);
	var DynamicProtoChangeDetector = (function (_super) {
	    __extends(DynamicProtoChangeDetector, _super);
	    function DynamicProtoChangeDetector(_pipeRegistry, definition) {
	        _super.call(this);
	        this._pipeRegistry = _pipeRegistry;
	        this.definition = definition;
	        this._records = this._createRecords(definition);
	    }
	    DynamicProtoChangeDetector.prototype.instantiate = function (dispatcher) {
	        return new dynamic_change_detector_1.DynamicChangeDetector(this.definition.strategy, dispatcher, this._pipeRegistry, this._records, this.definition.directiveRecords);
	    };
	    DynamicProtoChangeDetector.prototype._createRecords = function (definition) {
	        var recordBuilder = new ProtoRecordBuilder();
	        collection_1.ListWrapper.forEach(definition.bindingRecords, function (b) { recordBuilder.addAst(b, definition.variableNames); });
	        return coalesce_1.coalesce(recordBuilder.records);
	    };
	    return DynamicProtoChangeDetector;
	})(interfaces_1.ProtoChangeDetector);
	exports.DynamicProtoChangeDetector = DynamicProtoChangeDetector;
	var _jitProtoChangeDetectorClassCounter = 0;
	var JitProtoChangeDetector = (function (_super) {
	    __extends(JitProtoChangeDetector, _super);
	    function JitProtoChangeDetector(_pipeRegistry, definition) {
	        _super.call(this);
	        this._pipeRegistry = _pipeRegistry;
	        this.definition = definition;
	        this._factory = this._createFactory(definition);
	    }
	    JitProtoChangeDetector.prototype.instantiate = function (dispatcher) { return this._factory(dispatcher, this._pipeRegistry); };
	    JitProtoChangeDetector.prototype._createFactory = function (definition) {
	        var recordBuilder = new ProtoRecordBuilder();
	        collection_1.ListWrapper.forEach(definition.bindingRecords, function (b) { recordBuilder.addAst(b, definition.variableNames); });
	        var c = _jitProtoChangeDetectorClassCounter++;
	        var records = coalesce_1.coalesce(recordBuilder.records);
	        var typeName = "ChangeDetector" + c;
	        return new change_detection_jit_generator_1.ChangeDetectorJITGenerator(typeName, definition.strategy, records, this.definition.directiveRecords)
	            .generate();
	    };
	    return JitProtoChangeDetector;
	})(interfaces_1.ProtoChangeDetector);
	exports.JitProtoChangeDetector = JitProtoChangeDetector;
	var ProtoRecordBuilder = (function () {
	    function ProtoRecordBuilder() {
	        this.records = [];
	    }
	    ProtoRecordBuilder.prototype.addAst = function (b, variableNames) {
	        if (variableNames === void 0) { variableNames = null; }
	        var oldLast = collection_1.ListWrapper.last(this.records);
	        if (lang_1.isPresent(oldLast) && oldLast.bindingRecord.directiveRecord == b.directiveRecord) {
	            oldLast.lastInDirective = false;
	        }
	        _ConvertAstIntoProtoRecords.append(this.records, b, variableNames);
	        var newLast = collection_1.ListWrapper.last(this.records);
	        if (lang_1.isPresent(newLast) && newLast !== oldLast) {
	            newLast.lastInBinding = true;
	            newLast.lastInDirective = true;
	        }
	    };
	    return ProtoRecordBuilder;
	})();
	var _ConvertAstIntoProtoRecords = (function () {
	    function _ConvertAstIntoProtoRecords(_records, _bindingRecord, _expressionAsString, _variableNames) {
	        this._records = _records;
	        this._bindingRecord = _bindingRecord;
	        this._expressionAsString = _expressionAsString;
	        this._variableNames = _variableNames;
	    }
	    _ConvertAstIntoProtoRecords.append = function (records, b, variableNames) {
	        var c = new _ConvertAstIntoProtoRecords(records, b, b.ast.toString(), variableNames);
	        b.ast.visit(c);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitImplicitReceiver = function (ast) { return this._bindingRecord.implicitReceiver; };
	    _ConvertAstIntoProtoRecords.prototype.visitInterpolation = function (ast) {
	        var args = this._visitAll(ast.expressions);
	        return this._addRecord(proto_record_1.RECORD_TYPE_INTERPOLATE, "interpolate", _interpolationFn(ast.strings), args, ast.strings, 0);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitLiteralPrimitive = function (ast) {
	        return this._addRecord(proto_record_1.RECORD_TYPE_CONST, "literal", ast.value, [], null, 0);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitAccessMember = function (ast) {
	        var receiver = ast.receiver.visit(this);
	        if (lang_1.isPresent(this._variableNames) && collection_1.ListWrapper.contains(this._variableNames, ast.name) &&
	            ast.receiver instanceof
	                ast_1.ImplicitReceiver) {
	            return this._addRecord(proto_record_1.RECORD_TYPE_LOCAL, ast.name, ast.name, [], null, receiver);
	        }
	        else {
	            return this._addRecord(proto_record_1.RECORD_TYPE_PROPERTY, ast.name, ast.getter, [], null, receiver);
	        }
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitMethodCall = function (ast) {
	        var receiver = ast.receiver.visit(this);
	        var args = this._visitAll(ast.args);
	        if (lang_1.isPresent(this._variableNames) && collection_1.ListWrapper.contains(this._variableNames, ast.name)) {
	            var target = this._addRecord(proto_record_1.RECORD_TYPE_LOCAL, ast.name, ast.name, [], null, receiver);
	            return this._addRecord(proto_record_1.RECORD_TYPE_INVOKE_CLOSURE, "closure", null, args, null, target);
	        }
	        else {
	            return this._addRecord(proto_record_1.RECORD_TYPE_INVOKE_METHOD, ast.name, ast.fn, args, null, receiver);
	        }
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitFunctionCall = function (ast) {
	        var target = ast.target.visit(this);
	        var args = this._visitAll(ast.args);
	        return this._addRecord(proto_record_1.RECORD_TYPE_INVOKE_CLOSURE, "closure", null, args, null, target);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitLiteralArray = function (ast) {
	        var primitiveName = "arrayFn" + ast.expressions.length;
	        return this._addRecord(proto_record_1.RECORD_TYPE_PRIMITIVE_OP, primitiveName, _arrayFn(ast.expressions.length), this._visitAll(ast.expressions), null, 0);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitLiteralMap = function (ast) {
	        return this._addRecord(proto_record_1.RECORD_TYPE_PRIMITIVE_OP, _mapPrimitiveName(ast.keys), change_detection_util_1.ChangeDetectionUtil.mapFn(ast.keys), this._visitAll(ast.values), null, 0);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitBinary = function (ast) {
	        var left = ast.left.visit(this);
	        var right = ast.right.visit(this);
	        return this._addRecord(proto_record_1.RECORD_TYPE_PRIMITIVE_OP, _operationToPrimitiveName(ast.operation), _operationToFunction(ast.operation), [left, right], null, 0);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitPrefixNot = function (ast) {
	        var exp = ast.expression.visit(this);
	        return this._addRecord(proto_record_1.RECORD_TYPE_PRIMITIVE_OP, "operation_negate", change_detection_util_1.ChangeDetectionUtil.operation_negate, [exp], null, 0);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitConditional = function (ast) {
	        var c = ast.condition.visit(this);
	        var t = ast.trueExp.visit(this);
	        var f = ast.falseExp.visit(this);
	        return this._addRecord(proto_record_1.RECORD_TYPE_PRIMITIVE_OP, "cond", change_detection_util_1.ChangeDetectionUtil.cond, [c, t, f], null, 0);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitPipe = function (ast) {
	        var value = ast.exp.visit(this);
	        var type = ast.inBinding ? proto_record_1.RECORD_TYPE_BINDING_PIPE : proto_record_1.RECORD_TYPE_PIPE;
	        return this._addRecord(type, ast.name, ast.name, [], null, value);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitKeyedAccess = function (ast) {
	        var obj = ast.obj.visit(this);
	        var key = ast.key.visit(this);
	        return this._addRecord(proto_record_1.RECORD_TYPE_KEYED_ACCESS, "keyedAccess", change_detection_util_1.ChangeDetectionUtil.keyedAccess, [key], null, obj);
	    };
	    _ConvertAstIntoProtoRecords.prototype._visitAll = function (asts) {
	        var res = collection_1.ListWrapper.createFixedSize(asts.length);
	        for (var i = 0; i < asts.length; ++i) {
	            res[i] = asts[i].visit(this);
	        }
	        return res;
	    };
	    _ConvertAstIntoProtoRecords.prototype._addRecord = function (type, name, funcOrValue, args, fixedArgs, context) {
	        var selfIndex = this._records.length + 1;
	        if (context instanceof directive_record_1.DirectiveIndex) {
	            collection_1.ListWrapper.push(this._records, new proto_record_1.ProtoRecord(type, name, funcOrValue, args, fixedArgs, -1, context, selfIndex, this._bindingRecord, this._expressionAsString, false, false));
	        }
	        else {
	            collection_1.ListWrapper.push(this._records, new proto_record_1.ProtoRecord(type, name, funcOrValue, args, fixedArgs, context, null, selfIndex, this._bindingRecord, this._expressionAsString, false, false));
	        }
	        return selfIndex;
	    };
	    return _ConvertAstIntoProtoRecords;
	})();
	function _arrayFn(length) {
	    switch (length) {
	        case 0:
	            return change_detection_util_1.ChangeDetectionUtil.arrayFn0;
	        case 1:
	            return change_detection_util_1.ChangeDetectionUtil.arrayFn1;
	        case 2:
	            return change_detection_util_1.ChangeDetectionUtil.arrayFn2;
	        case 3:
	            return change_detection_util_1.ChangeDetectionUtil.arrayFn3;
	        case 4:
	            return change_detection_util_1.ChangeDetectionUtil.arrayFn4;
	        case 5:
	            return change_detection_util_1.ChangeDetectionUtil.arrayFn5;
	        case 6:
	            return change_detection_util_1.ChangeDetectionUtil.arrayFn6;
	        case 7:
	            return change_detection_util_1.ChangeDetectionUtil.arrayFn7;
	        case 8:
	            return change_detection_util_1.ChangeDetectionUtil.arrayFn8;
	        case 9:
	            return change_detection_util_1.ChangeDetectionUtil.arrayFn9;
	        default:
	            throw new lang_1.BaseException("Does not support literal maps with more than 9 elements");
	    }
	}
	function _mapPrimitiveName(keys) {
	    var stringifiedKeys = collection_1.ListWrapper.join(collection_1.ListWrapper.map(keys, function (k) { return lang_1.isString(k) ? "\"" + k + "\"" : "" + k; }), ", ");
	    return "mapFn([" + stringifiedKeys + "])";
	}
	function _operationToPrimitiveName(operation) {
	    switch (operation) {
	        case '+':
	            return "operation_add";
	        case '-':
	            return "operation_subtract";
	        case '*':
	            return "operation_multiply";
	        case '/':
	            return "operation_divide";
	        case '%':
	            return "operation_remainder";
	        case '==':
	            return "operation_equals";
	        case '!=':
	            return "operation_not_equals";
	        case '===':
	            return "operation_identical";
	        case '!==':
	            return "operation_not_identical";
	        case '<':
	            return "operation_less_then";
	        case '>':
	            return "operation_greater_then";
	        case '<=':
	            return "operation_less_or_equals_then";
	        case '>=':
	            return "operation_greater_or_equals_then";
	        case '&&':
	            return "operation_logical_and";
	        case '||':
	            return "operation_logical_or";
	        default:
	            throw new lang_1.BaseException("Unsupported operation " + operation);
	    }
	}
	function _operationToFunction(operation) {
	    switch (operation) {
	        case '+':
	            return change_detection_util_1.ChangeDetectionUtil.operation_add;
	        case '-':
	            return change_detection_util_1.ChangeDetectionUtil.operation_subtract;
	        case '*':
	            return change_detection_util_1.ChangeDetectionUtil.operation_multiply;
	        case '/':
	            return change_detection_util_1.ChangeDetectionUtil.operation_divide;
	        case '%':
	            return change_detection_util_1.ChangeDetectionUtil.operation_remainder;
	        case '==':
	            return change_detection_util_1.ChangeDetectionUtil.operation_equals;
	        case '!=':
	            return change_detection_util_1.ChangeDetectionUtil.operation_not_equals;
	        case '===':
	            return change_detection_util_1.ChangeDetectionUtil.operation_identical;
	        case '!==':
	            return change_detection_util_1.ChangeDetectionUtil.operation_not_identical;
	        case '<':
	            return change_detection_util_1.ChangeDetectionUtil.operation_less_then;
	        case '>':
	            return change_detection_util_1.ChangeDetectionUtil.operation_greater_then;
	        case '<=':
	            return change_detection_util_1.ChangeDetectionUtil.operation_less_or_equals_then;
	        case '>=':
	            return change_detection_util_1.ChangeDetectionUtil.operation_greater_or_equals_then;
	        case '&&':
	            return change_detection_util_1.ChangeDetectionUtil.operation_logical_and;
	        case '||':
	            return change_detection_util_1.ChangeDetectionUtil.operation_logical_or;
	        default:
	            throw new lang_1.BaseException("Unsupported operation " + operation);
	    }
	}
	function s(v) {
	    return lang_1.isPresent(v) ? "" + v : '';
	}
	function _interpolationFn(strings) {
	    var length = strings.length;
	    var c0 = length > 0 ? strings[0] : null;
	    var c1 = length > 1 ? strings[1] : null;
	    var c2 = length > 2 ? strings[2] : null;
	    var c3 = length > 3 ? strings[3] : null;
	    var c4 = length > 4 ? strings[4] : null;
	    var c5 = length > 5 ? strings[5] : null;
	    var c6 = length > 6 ? strings[6] : null;
	    var c7 = length > 7 ? strings[7] : null;
	    var c8 = length > 8 ? strings[8] : null;
	    var c9 = length > 9 ? strings[9] : null;
	    switch (length - 1) {
	        case 1:
	            return function (a1) { return c0 + s(a1) + c1; };
	        case 2:
	            return function (a1, a2) { return c0 + s(a1) + c1 + s(a2) + c2; };
	        case 3:
	            return function (a1, a2, a3) { return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3; };
	        case 4:
	            return function (a1, a2, a3, a4) { return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4; };
	        case 5:
	            return function (a1, a2, a3, a4, a5) {
	                return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5;
	            };
	        case 6:
	            return function (a1, a2, a3, a4, a5, a6) {
	                return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5 + s(a6) + c6;
	            };
	        case 7:
	            return function (a1, a2, a3, a4, a5, a6, a7) { return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) +
	                c4 + s(a5) + c5 + s(a6) + c6 + s(a7) + c7; };
	        case 8:
	            return function (a1, a2, a3, a4, a5, a6, a7, a8) { return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) +
	                c4 + s(a5) + c5 + s(a6) + c6 + s(a7) + c7 + s(a8) +
	                c8; };
	        case 9:
	            return function (a1, a2, a3, a4, a5, a6, a7, a8, a9) { return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 +
	                s(a4) + c4 + s(a5) + c5 + s(a6) + c6 + s(a7) +
	                c7 + s(a8) + c8 + s(a9) + c9; };
	        default:
	            throw new lang_1.BaseException("Does not support more than 9 expressions");
	    }
	}
	exports.__esModule = true;
	//# sourceMappingURL=proto_change_detector.js.map

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var lang_1 = __webpack_require__(60);
	var collection_1 = __webpack_require__(61);
	var abstract_change_detector_1 = __webpack_require__(80);
	var change_detection_util_1 = __webpack_require__(78);
	var proto_record_1 = __webpack_require__(82);
	var exceptions_1 = __webpack_require__(73);
	var DynamicChangeDetector = (function (_super) {
	    __extends(DynamicChangeDetector, _super);
	    function DynamicChangeDetector(changeControlStrategy, dispatcher, pipeRegistry, protos, directiveRecords) {
	        _super.call(this);
	        this.changeControlStrategy = changeControlStrategy;
	        this.dispatcher = dispatcher;
	        this.pipeRegistry = pipeRegistry;
	        this.protos = protos;
	        this.directiveRecords = directiveRecords;
	        this.values = collection_1.ListWrapper.createFixedSize(protos.length + 1);
	        this.pipes = collection_1.ListWrapper.createFixedSize(protos.length + 1);
	        this.prevContexts = collection_1.ListWrapper.createFixedSize(protos.length + 1);
	        this.changes = collection_1.ListWrapper.createFixedSize(protos.length + 1);
	        collection_1.ListWrapper.fill(this.values, change_detection_util_1.uninitialized);
	        collection_1.ListWrapper.fill(this.pipes, null);
	        collection_1.ListWrapper.fill(this.prevContexts, change_detection_util_1.uninitialized);
	        collection_1.ListWrapper.fill(this.changes, false);
	        this.locals = null;
	        this.directives = null;
	    }
	    DynamicChangeDetector.prototype.hydrate = function (context, locals, directives) {
	        this.mode = change_detection_util_1.ChangeDetectionUtil.changeDetectionMode(this.changeControlStrategy);
	        this.values[0] = context;
	        this.locals = locals;
	        this.directives = directives;
	    };
	    DynamicChangeDetector.prototype.dehydrate = function () {
	        this._destroyPipes();
	        collection_1.ListWrapper.fill(this.values, change_detection_util_1.uninitialized);
	        collection_1.ListWrapper.fill(this.changes, false);
	        collection_1.ListWrapper.fill(this.pipes, null);
	        collection_1.ListWrapper.fill(this.prevContexts, change_detection_util_1.uninitialized);
	        this.locals = null;
	    };
	    DynamicChangeDetector.prototype._destroyPipes = function () {
	        for (var i = 0; i < this.pipes.length; ++i) {
	            if (lang_1.isPresent(this.pipes[i])) {
	                this.pipes[i].onDestroy();
	            }
	        }
	    };
	    DynamicChangeDetector.prototype.hydrated = function () { return this.values[0] !== change_detection_util_1.uninitialized; };
	    DynamicChangeDetector.prototype.detectChangesInRecords = function (throwOnChange) {
	        var protos = this.protos;
	        var changes = null;
	        var isChanged = false;
	        for (var i = 0; i < protos.length; ++i) {
	            var proto = protos[i];
	            var bindingRecord = proto.bindingRecord;
	            var directiveRecord = bindingRecord.directiveRecord;
	            var change = this._check(proto, throwOnChange);
	            if (lang_1.isPresent(change)) {
	                this._updateDirectiveOrElement(change, bindingRecord);
	                isChanged = true;
	                changes = this._addChange(bindingRecord, change, changes);
	            }
	            if (proto.lastInDirective) {
	                if (lang_1.isPresent(changes)) {
	                    this._getDirectiveFor(directiveRecord.directiveIndex).onChange(changes);
	                    changes = null;
	                }
	                if (isChanged && bindingRecord.isOnPushChangeDetection()) {
	                    this._getDetectorFor(directiveRecord.directiveIndex).markAsCheckOnce();
	                }
	                isChanged = false;
	            }
	        }
	    };
	    DynamicChangeDetector.prototype.callOnAllChangesDone = function () {
	        var dirs = this.directiveRecords;
	        for (var i = dirs.length - 1; i >= 0; --i) {
	            var dir = dirs[i];
	            if (dir.callOnAllChangesDone) {
	                this._getDirectiveFor(dir.directiveIndex).onAllChangesDone();
	            }
	        }
	    };
	    DynamicChangeDetector.prototype._updateDirectiveOrElement = function (change, bindingRecord) {
	        if (lang_1.isBlank(bindingRecord.directiveRecord)) {
	            this.dispatcher.notifyOnBinding(bindingRecord, change.currentValue);
	        }
	        else {
	            var directiveIndex = bindingRecord.directiveRecord.directiveIndex;
	            bindingRecord.setter(this._getDirectiveFor(directiveIndex), change.currentValue);
	        }
	    };
	    DynamicChangeDetector.prototype._addChange = function (bindingRecord, change, changes) {
	        if (bindingRecord.callOnChange()) {
	            return change_detection_util_1.ChangeDetectionUtil.addChange(changes, bindingRecord.propertyName, change);
	        }
	        else {
	            return changes;
	        }
	    };
	    DynamicChangeDetector.prototype._getDirectiveFor = function (directiveIndex) { return this.directives.getDirectiveFor(directiveIndex); };
	    DynamicChangeDetector.prototype._getDetectorFor = function (directiveIndex) { return this.directives.getDetectorFor(directiveIndex); };
	    DynamicChangeDetector.prototype._check = function (proto, throwOnChange) {
	        try {
	            if (proto.mode === proto_record_1.RECORD_TYPE_PIPE || proto.mode === proto_record_1.RECORD_TYPE_BINDING_PIPE) {
	                return this._pipeCheck(proto, throwOnChange);
	            }
	            else {
	                return this._referenceCheck(proto, throwOnChange);
	            }
	        }
	        catch (e) {
	            throw new exceptions_1.ChangeDetectionError(proto, e);
	        }
	    };
	    DynamicChangeDetector.prototype._referenceCheck = function (proto, throwOnChange) {
	        if (this._pureFuncAndArgsDidNotChange(proto)) {
	            this._setChanged(proto, false);
	            return null;
	        }
	        var prevValue = this._readSelf(proto);
	        var currValue = this._calculateCurrValue(proto);
	        if (!isSame(prevValue, currValue)) {
	            if (proto.lastInBinding) {
	                var change = change_detection_util_1.ChangeDetectionUtil.simpleChange(prevValue, currValue);
	                if (throwOnChange)
	                    change_detection_util_1.ChangeDetectionUtil.throwOnChange(proto, change);
	                this._writeSelf(proto, currValue);
	                this._setChanged(proto, true);
	                return change;
	            }
	            else {
	                this._writeSelf(proto, currValue);
	                this._setChanged(proto, true);
	                return null;
	            }
	        }
	        else {
	            this._setChanged(proto, false);
	            return null;
	        }
	    };
	    DynamicChangeDetector.prototype._calculateCurrValue = function (proto) {
	        switch (proto.mode) {
	            case proto_record_1.RECORD_TYPE_SELF:
	                return this._readContext(proto);
	            case proto_record_1.RECORD_TYPE_CONST:
	                return proto.funcOrValue;
	            case proto_record_1.RECORD_TYPE_PROPERTY:
	                var context = this._readContext(proto);
	                return proto.funcOrValue(context);
	            case proto_record_1.RECORD_TYPE_LOCAL:
	                return this.locals.get(proto.name);
	            case proto_record_1.RECORD_TYPE_INVOKE_METHOD:
	                var context = this._readContext(proto);
	                var args = this._readArgs(proto);
	                return proto.funcOrValue(context, args);
	            case proto_record_1.RECORD_TYPE_KEYED_ACCESS:
	                var arg = this._readArgs(proto)[0];
	                return this._readContext(proto)[arg];
	            case proto_record_1.RECORD_TYPE_INVOKE_CLOSURE:
	                return lang_1.FunctionWrapper.apply(this._readContext(proto), this._readArgs(proto));
	            case proto_record_1.RECORD_TYPE_INTERPOLATE:
	            case proto_record_1.RECORD_TYPE_PRIMITIVE_OP:
	                return lang_1.FunctionWrapper.apply(proto.funcOrValue, this._readArgs(proto));
	            default:
	                throw new lang_1.BaseException("Unknown operation " + proto.mode);
	        }
	    };
	    DynamicChangeDetector.prototype._pipeCheck = function (proto, throwOnChange) {
	        var context = this._readContext(proto);
	        var pipe = this._pipeFor(proto, context);
	        var prevValue = this._readSelf(proto);
	        var currValue = pipe.transform(context);
	        if (!isSame(prevValue, currValue)) {
	            currValue = change_detection_util_1.ChangeDetectionUtil.unwrapValue(currValue);
	            if (proto.lastInBinding) {
	                var change = change_detection_util_1.ChangeDetectionUtil.simpleChange(prevValue, currValue);
	                if (throwOnChange)
	                    change_detection_util_1.ChangeDetectionUtil.throwOnChange(proto, change);
	                this._writeSelf(proto, currValue);
	                this._setChanged(proto, true);
	                return change;
	            }
	            else {
	                this._writeSelf(proto, currValue);
	                this._setChanged(proto, true);
	                return null;
	            }
	        }
	        else {
	            this._setChanged(proto, false);
	            return null;
	        }
	    };
	    DynamicChangeDetector.prototype._pipeFor = function (proto, context) {
	        var storedPipe = this._readPipe(proto);
	        if (lang_1.isPresent(storedPipe) && storedPipe.supports(context)) {
	            return storedPipe;
	        }
	        if (lang_1.isPresent(storedPipe)) {
	            storedPipe.onDestroy();
	        }
	        // Currently, only pipes that used in bindings in the template get
	        // the changeDetectorRef of the encompassing component.
	        //
	        // In the future, pipes declared in the bind configuration should
	        // be able to access the changeDetectorRef of that component.
	        var cdr = proto.mode === proto_record_1.RECORD_TYPE_BINDING_PIPE ? this.ref : null;
	        var pipe = this.pipeRegistry.get(proto.name, context, cdr);
	        this._writePipe(proto, pipe);
	        return pipe;
	    };
	    DynamicChangeDetector.prototype._readContext = function (proto) {
	        if (proto.contextIndex == -1) {
	            return this._getDirectiveFor(proto.directiveIndex);
	        }
	        else {
	            return this.values[proto.contextIndex];
	        }
	        return this.values[proto.contextIndex];
	    };
	    DynamicChangeDetector.prototype._readSelf = function (proto) { return this.values[proto.selfIndex]; };
	    DynamicChangeDetector.prototype._writeSelf = function (proto, value) { this.values[proto.selfIndex] = value; };
	    DynamicChangeDetector.prototype._readPipe = function (proto) { return this.pipes[proto.selfIndex]; };
	    DynamicChangeDetector.prototype._writePipe = function (proto, value) { this.pipes[proto.selfIndex] = value; };
	    DynamicChangeDetector.prototype._setChanged = function (proto, value) { this.changes[proto.selfIndex] = value; };
	    DynamicChangeDetector.prototype._pureFuncAndArgsDidNotChange = function (proto) {
	        return proto.isPureFunction() && !this._argsChanged(proto);
	    };
	    DynamicChangeDetector.prototype._argsChanged = function (proto) {
	        var args = proto.args;
	        for (var i = 0; i < args.length; ++i) {
	            if (this.changes[args[i]]) {
	                return true;
	            }
	        }
	        return false;
	    };
	    DynamicChangeDetector.prototype._readArgs = function (proto) {
	        var res = collection_1.ListWrapper.createFixedSize(proto.args.length);
	        var args = proto.args;
	        for (var i = 0; i < args.length; ++i) {
	            res[i] = this.values[args[i]];
	        }
	        return res;
	    };
	    return DynamicChangeDetector;
	})(abstract_change_detector_1.AbstractChangeDetector);
	exports.DynamicChangeDetector = DynamicChangeDetector;
	function isSame(a, b) {
	    if (a === b)
	        return true;
	    if (a instanceof String && b instanceof String && a == b)
	        return true;
	    if ((a !== a) && (b !== b))
	        return true;
	    return false;
	}
	exports.__esModule = true;
	//# sourceMappingURL=dynamic_change_detector.js.map

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	var lang_1 = __webpack_require__(60);
	var collection_1 = __webpack_require__(61);
	var exceptions_1 = __webpack_require__(73);
	var pipe_1 = __webpack_require__(79);
	var constants_1 = __webpack_require__(75);
	exports.uninitialized = new Object();
	var SimpleChange = (function () {
	    function SimpleChange(previousValue, currentValue) {
	        this.previousValue = previousValue;
	        this.currentValue = currentValue;
	    }
	    return SimpleChange;
	})();
	exports.SimpleChange = SimpleChange;
	var _simpleChangesIndex = 0;
	var _simpleChanges = [
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null)
	];
	function _simpleChange(previousValue, currentValue) {
	    var index = _simpleChangesIndex++ % 20;
	    var s = _simpleChanges[index];
	    s.previousValue = previousValue;
	    s.currentValue = currentValue;
	    return s;
	}
	var ChangeDetectionUtil = (function () {
	    function ChangeDetectionUtil() {
	    }
	    ChangeDetectionUtil.uninitialized = function () { return exports.uninitialized; };
	    ChangeDetectionUtil.arrayFn0 = function () { return []; };
	    ChangeDetectionUtil.arrayFn1 = function (a1) { return [a1]; };
	    ChangeDetectionUtil.arrayFn2 = function (a1, a2) { return [a1, a2]; };
	    ChangeDetectionUtil.arrayFn3 = function (a1, a2, a3) { return [a1, a2, a3]; };
	    ChangeDetectionUtil.arrayFn4 = function (a1, a2, a3, a4) { return [a1, a2, a3, a4]; };
	    ChangeDetectionUtil.arrayFn5 = function (a1, a2, a3, a4, a5) { return [a1, a2, a3, a4, a5]; };
	    ChangeDetectionUtil.arrayFn6 = function (a1, a2, a3, a4, a5, a6) { return [a1, a2, a3, a4, a5, a6]; };
	    ChangeDetectionUtil.arrayFn7 = function (a1, a2, a3, a4, a5, a6, a7) { return [a1, a2, a3, a4, a5, a6, a7]; };
	    ChangeDetectionUtil.arrayFn8 = function (a1, a2, a3, a4, a5, a6, a7, a8) { return [a1, a2, a3, a4, a5, a6, a7, a8]; };
	    ChangeDetectionUtil.arrayFn9 = function (a1, a2, a3, a4, a5, a6, a7, a8, a9) {
	        return [a1, a2, a3, a4, a5, a6, a7, a8, a9];
	    };
	    ChangeDetectionUtil.operation_negate = function (value) { return !value; };
	    ChangeDetectionUtil.operation_add = function (left, right) { return left + right; };
	    ChangeDetectionUtil.operation_subtract = function (left, right) { return left - right; };
	    ChangeDetectionUtil.operation_multiply = function (left, right) { return left * right; };
	    ChangeDetectionUtil.operation_divide = function (left, right) { return left / right; };
	    ChangeDetectionUtil.operation_remainder = function (left, right) { return left % right; };
	    ChangeDetectionUtil.operation_equals = function (left, right) { return left == right; };
	    ChangeDetectionUtil.operation_not_equals = function (left, right) { return left != right; };
	    ChangeDetectionUtil.operation_identical = function (left, right) { return left === right; };
	    ChangeDetectionUtil.operation_not_identical = function (left, right) { return left !== right; };
	    ChangeDetectionUtil.operation_less_then = function (left, right) { return left < right; };
	    ChangeDetectionUtil.operation_greater_then = function (left, right) { return left > right; };
	    ChangeDetectionUtil.operation_less_or_equals_then = function (left, right) { return left <= right; };
	    ChangeDetectionUtil.operation_greater_or_equals_then = function (left, right) { return left >= right; };
	    ChangeDetectionUtil.operation_logical_and = function (left, right) { return left && right; };
	    ChangeDetectionUtil.operation_logical_or = function (left, right) { return left || right; };
	    ChangeDetectionUtil.cond = function (cond, trueVal, falseVal) { return cond ? trueVal : falseVal; };
	    ChangeDetectionUtil.mapFn = function (keys) {
	        function buildMap(values) {
	            var res = collection_1.StringMapWrapper.create();
	            for (var i = 0; i < keys.length; ++i) {
	                collection_1.StringMapWrapper.set(res, keys[i], values[i]);
	            }
	            return res;
	        }
	        switch (keys.length) {
	            case 0:
	                return function () { return []; };
	            case 1:
	                return function (a1) { return buildMap([a1]); };
	            case 2:
	                return function (a1, a2) { return buildMap([a1, a2]); };
	            case 3:
	                return function (a1, a2, a3) { return buildMap([a1, a2, a3]); };
	            case 4:
	                return function (a1, a2, a3, a4) { return buildMap([a1, a2, a3, a4]); };
	            case 5:
	                return function (a1, a2, a3, a4, a5) { return buildMap([a1, a2, a3, a4, a5]); };
	            case 6:
	                return function (a1, a2, a3, a4, a5, a6) { return buildMap([a1, a2, a3, a4, a5, a6]); };
	            case 7:
	                return function (a1, a2, a3, a4, a5, a6, a7) { return buildMap([a1, a2, a3, a4, a5, a6, a7]); };
	            case 8:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8) { return buildMap([a1, a2, a3, a4, a5, a6, a7, a8]); };
	            case 9:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9) {
	                    return buildMap([a1, a2, a3, a4, a5, a6, a7, a8, a9]);
	                };
	            default:
	                throw new lang_1.BaseException("Does not support literal maps with more than 9 elements");
	        }
	    };
	    ChangeDetectionUtil.keyedAccess = function (obj, args) { return obj[args[0]]; };
	    ChangeDetectionUtil.unwrapValue = function (value) {
	        if (value instanceof pipe_1.WrappedValue) {
	            return value.wrapped;
	        }
	        else {
	            return value;
	        }
	    };
	    ChangeDetectionUtil.throwOnChange = function (proto, change) {
	        throw new exceptions_1.ExpressionChangedAfterItHasBeenChecked(proto, change);
	    };
	    ChangeDetectionUtil.changeDetectionMode = function (strategy) {
	        return strategy == constants_1.ON_PUSH ? constants_1.CHECK_ONCE : constants_1.CHECK_ALWAYS;
	    };
	    ChangeDetectionUtil.simpleChange = function (previousValue, currentValue) {
	        return _simpleChange(previousValue, currentValue);
	    };
	    ChangeDetectionUtil.addChange = function (changes, propertyName, change) {
	        if (lang_1.isBlank(changes)) {
	            changes = {};
	        }
	        changes[propertyName] = change;
	        return changes;
	    };
	    return ChangeDetectionUtil;
	})();
	exports.ChangeDetectionUtil = ChangeDetectionUtil;
	exports.__esModule = true;
	//# sourceMappingURL=change_detection_util.js.map

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(60);
	/**
	 * Indicates that the result of a {@link Pipe} transformation has changed even though the reference
	 *has not changed.
	 *
	 * The wrapped value will be unwrapped by change detection, and the unwrapped value will be stored.
	 *
	 * @exportedAs angular2/pipes
	 */
	var WrappedValue = (function () {
	    function WrappedValue(wrapped) {
	        this.wrapped = wrapped;
	    }
	    WrappedValue.wrap = function (value) {
	        var w = _wrappedValues[_wrappedIndex++ % 5];
	        w.wrapped = value;
	        return w;
	    };
	    return WrappedValue;
	})();
	exports.WrappedValue = WrappedValue;
	var _wrappedValues = [
	    new WrappedValue(null),
	    new WrappedValue(null),
	    new WrappedValue(null),
	    new WrappedValue(null),
	    new WrappedValue(null)
	];
	var _wrappedIndex = 0;
	/**
	 * An interface for extending the list of pipes known to Angular.
	 *
	 * If you are writing a custom {@link Pipe}, you must extend this interface.
	 *
	 * #Example
	 *
	 * ```
	 * class DoublePipe extends Pipe {
	 *  supports(obj) {
	 *    return true;
	 *  }
	 *
	 *  transform(value) {
	 *    return `${value}${value}`;
	 *  }
	 * }
	 * ```
	 *
	 * @exportedAs angular2/pipes
	 */
	var Pipe = (function () {
	    function Pipe() {
	    }
	    Pipe.prototype.supports = function (obj) { return false; };
	    Pipe.prototype.onDestroy = function () { };
	    Pipe.prototype.transform = function (value) { return null; };
	    return Pipe;
	})();
	exports.Pipe = Pipe;
	// TODO: vsavkin: make it an interface
	var PipeFactory = (function () {
	    function PipeFactory() {
	    }
	    PipeFactory.prototype.supports = function (obs) {
	        _abstract();
	        return false;
	    };
	    PipeFactory.prototype.create = function (cdRef) {
	        _abstract();
	        return null;
	    };
	    PipeFactory = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], PipeFactory);
	    return PipeFactory;
	})();
	exports.PipeFactory = PipeFactory;
	function _abstract() {
	    throw new lang_1.BaseException('This method is abstract');
	}
	exports.__esModule = true;
	//# sourceMappingURL=pipe.js.map

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var lang_1 = __webpack_require__(60);
	var collection_1 = __webpack_require__(61);
	var change_detector_ref_1 = __webpack_require__(81);
	var interfaces_1 = __webpack_require__(74);
	var constants_1 = __webpack_require__(75);
	var AbstractChangeDetector = (function (_super) {
	    __extends(AbstractChangeDetector, _super);
	    function AbstractChangeDetector() {
	        _super.call(this);
	        this.lightDomChildren = [];
	        this.shadowDomChildren = [];
	        this.ref = new change_detector_ref_1.ChangeDetectorRef(this);
	        this.mode = null;
	    }
	    AbstractChangeDetector.prototype.addChild = function (cd) {
	        collection_1.ListWrapper.push(this.lightDomChildren, cd);
	        cd.parent = this;
	    };
	    AbstractChangeDetector.prototype.removeChild = function (cd) { collection_1.ListWrapper.remove(this.lightDomChildren, cd); };
	    AbstractChangeDetector.prototype.addShadowDomChild = function (cd) {
	        collection_1.ListWrapper.push(this.shadowDomChildren, cd);
	        cd.parent = this;
	    };
	    AbstractChangeDetector.prototype.removeShadowDomChild = function (cd) { collection_1.ListWrapper.remove(this.shadowDomChildren, cd); };
	    AbstractChangeDetector.prototype.remove = function () { this.parent.removeChild(this); };
	    AbstractChangeDetector.prototype.detectChanges = function () { this._detectChanges(false); };
	    AbstractChangeDetector.prototype.checkNoChanges = function () { this._detectChanges(true); };
	    AbstractChangeDetector.prototype._detectChanges = function (throwOnChange) {
	        if (this.mode === constants_1.DETACHED || this.mode === constants_1.CHECKED)
	            return;
	        this.detectChangesInRecords(throwOnChange);
	        this._detectChangesInLightDomChildren(throwOnChange);
	        if (throwOnChange === false)
	            this.callOnAllChangesDone();
	        this._detectChangesInShadowDomChildren(throwOnChange);
	        if (this.mode === constants_1.CHECK_ONCE)
	            this.mode = constants_1.CHECKED;
	    };
	    AbstractChangeDetector.prototype.detectChangesInRecords = function (throwOnChange) { };
	    AbstractChangeDetector.prototype.callOnAllChangesDone = function () { };
	    AbstractChangeDetector.prototype._detectChangesInLightDomChildren = function (throwOnChange) {
	        var c = this.lightDomChildren;
	        for (var i = 0; i < c.length; ++i) {
	            c[i]._detectChanges(throwOnChange);
	        }
	    };
	    AbstractChangeDetector.prototype._detectChangesInShadowDomChildren = function (throwOnChange) {
	        var c = this.shadowDomChildren;
	        for (var i = 0; i < c.length; ++i) {
	            c[i]._detectChanges(throwOnChange);
	        }
	    };
	    AbstractChangeDetector.prototype.markAsCheckOnce = function () { this.mode = constants_1.CHECK_ONCE; };
	    AbstractChangeDetector.prototype.markPathToRootAsCheckOnce = function () {
	        var c = this;
	        while (lang_1.isPresent(c) && c.mode != constants_1.DETACHED) {
	            if (c.mode === constants_1.CHECKED)
	                c.mode = constants_1.CHECK_ONCE;
	            c = c.parent;
	        }
	    };
	    return AbstractChangeDetector;
	})(interfaces_1.ChangeDetector);
	exports.AbstractChangeDetector = AbstractChangeDetector;
	exports.__esModule = true;
	//# sourceMappingURL=abstract_change_detector.js.map

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	var constants_1 = __webpack_require__(75);
	/**
	 * Controls change detection.
	 *
	 * {@link ChangeDetectorRef} allows requesting checks for detectors that rely on observables. It
	 *also allows detaching and
	 * attaching change detector subtrees.
	 *
	 * @exportedAs angular2/change_detection
	 */
	var ChangeDetectorRef = (function () {
	    function ChangeDetectorRef(_cd) {
	        this._cd = _cd;
	    }
	    /**
	     * Request to check all ON_PUSH ancestors.
	     */
	    ChangeDetectorRef.prototype.requestCheck = function () { this._cd.markPathToRootAsCheckOnce(); };
	    /**
	     * Detaches the change detector from the change detector tree.
	     *
	     * The detached change detector will not be checked until it is reattached.
	     */
	    ChangeDetectorRef.prototype.detach = function () { this._cd.mode = constants_1.DETACHED; };
	    /**
	     * Reattach the change detector to the change detector tree.
	     *
	     * This also requests a check of this change detector. This reattached change detector will be
	     *checked during the
	     * next change detection run.
	     */
	    ChangeDetectorRef.prototype.reattach = function () {
	        this._cd.mode = constants_1.CHECK_ALWAYS;
	        this.requestCheck();
	    };
	    return ChangeDetectorRef;
	})();
	exports.ChangeDetectorRef = ChangeDetectorRef;
	exports.__esModule = true;
	//# sourceMappingURL=change_detector_ref.js.map

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	exports.RECORD_TYPE_SELF = 0;
	exports.RECORD_TYPE_CONST = 1;
	exports.RECORD_TYPE_PRIMITIVE_OP = 2;
	exports.RECORD_TYPE_PROPERTY = 3;
	exports.RECORD_TYPE_LOCAL = 4;
	exports.RECORD_TYPE_INVOKE_METHOD = 5;
	exports.RECORD_TYPE_INVOKE_CLOSURE = 6;
	exports.RECORD_TYPE_KEYED_ACCESS = 7;
	exports.RECORD_TYPE_PIPE = 8;
	exports.RECORD_TYPE_BINDING_PIPE = 9;
	exports.RECORD_TYPE_INTERPOLATE = 10;
	var ProtoRecord = (function () {
	    function ProtoRecord(mode, name, funcOrValue, args, fixedArgs, contextIndex, directiveIndex, selfIndex, bindingRecord, expressionAsString, lastInBinding, lastInDirective) {
	        this.mode = mode;
	        this.name = name;
	        this.funcOrValue = funcOrValue;
	        this.args = args;
	        this.fixedArgs = fixedArgs;
	        this.contextIndex = contextIndex;
	        this.directiveIndex = directiveIndex;
	        this.selfIndex = selfIndex;
	        this.bindingRecord = bindingRecord;
	        this.expressionAsString = expressionAsString;
	        this.lastInBinding = lastInBinding;
	        this.lastInDirective = lastInDirective;
	    }
	    ProtoRecord.prototype.isPureFunction = function () {
	        return this.mode === exports.RECORD_TYPE_INTERPOLATE || this.mode === exports.RECORD_TYPE_PRIMITIVE_OP;
	    };
	    return ProtoRecord;
	})();
	exports.ProtoRecord = ProtoRecord;
	exports.__esModule = true;
	//# sourceMappingURL=proto_record.js.map

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	var lang_1 = __webpack_require__(60);
	var abstract_change_detector_1 = __webpack_require__(80);
	var change_detection_util_1 = __webpack_require__(78);
	var proto_record_1 = __webpack_require__(82);
	/**
	 * The code generator takes a list of proto records and creates a function/class
	 * that "emulates" what the developer would write by hand to implement the same
	 * kind of behaviour.
	 *
	 * The implementation comprises two parts:
	 * * ChangeDetectorJITGenerator has the logic of how everything fits together.
	 * * template functions (e.g., constructorTemplate) define what code is generated.
	*/
	var ABSTRACT_CHANGE_DETECTOR = "AbstractChangeDetector";
	var UTIL = "ChangeDetectionUtil";
	var DISPATCHER_ACCESSOR = "this.dispatcher";
	var PIPE_REGISTRY_ACCESSOR = "this.pipeRegistry";
	var PROTOS_ACCESSOR = "this.protos";
	var DIRECTIVES_ACCESSOR = "this.directiveRecords";
	var CONTEXT_ACCESSOR = "this.context";
	var IS_CHANGED_LOCAL = "isChanged";
	var CHANGES_LOCAL = "changes";
	var LOCALS_ACCESSOR = "this.locals";
	var MODE_ACCESSOR = "this.mode";
	var TEMP_LOCAL = "temp";
	var CURRENT_PROTO = "currentProto";
	function typeTemplate(type, cons, detectChanges, notifyOnAllChangesDone, setContext) {
	    return "\n" + cons + "\n" + detectChanges + "\n" + notifyOnAllChangesDone + "\n" + setContext + ";\n\nreturn function(dispatcher, pipeRegistry) {\n  return new " + type + "(dispatcher, pipeRegistry, protos, directiveRecords);\n}\n";
	}
	function constructorTemplate(type, fieldsDefinitions) {
	    return "\nvar " + type + " = function " + type + "(dispatcher, pipeRegistry, protos, directiveRecords) {\n" + ABSTRACT_CHANGE_DETECTOR + ".call(this);\n" + DISPATCHER_ACCESSOR + " = dispatcher;\n" + PIPE_REGISTRY_ACCESSOR + " = pipeRegistry;\n" + PROTOS_ACCESSOR + " = protos;\n" + DIRECTIVES_ACCESSOR + " = directiveRecords;\n" + LOCALS_ACCESSOR + " = null;\n" + fieldsDefinitions + "\n}\n\n" + type + ".prototype = Object.create(" + ABSTRACT_CHANGE_DETECTOR + ".prototype);\n";
	}
	function pipeOnDestroyTemplate(pipeNames) {
	    return pipeNames.map(function (p) { return (p + ".onDestroy()"); }).join("\n");
	}
	function hydrateTemplate(type, mode, fieldDefinitions, pipeOnDestroy, directiveFieldNames, detectorFieldNames) {
	    var directiveInit = "";
	    for (var i = 0; i < directiveFieldNames.length; ++i) {
	        directiveInit +=
	            directiveFieldNames[i] + " = directives.getDirectiveFor(this.directiveRecords[" + i + "].directiveIndex);\n";
	    }
	    var detectorInit = "";
	    for (var i = 0; i < detectorFieldNames.length; ++i) {
	        detectorInit +=
	            detectorFieldNames[i] + " = directives.getDetectorFor(this.directiveRecords[" + i + "].directiveIndex);\n";
	    }
	    return "\n" + type + ".prototype.hydrate = function(context, locals, directives) {\n  " + MODE_ACCESSOR + " = \"" + mode + "\";\n  " + CONTEXT_ACCESSOR + " = context;\n  " + LOCALS_ACCESSOR + " = locals;\n  " + directiveInit + "\n  " + detectorInit + "\n}\n" + type + ".prototype.dehydrate = function() {\n  " + pipeOnDestroy + "\n  " + fieldDefinitions + "\n  " + LOCALS_ACCESSOR + " = null;\n}\n" + type + ".prototype.hydrated = function() {\n  return " + CONTEXT_ACCESSOR + " !== " + UTIL + ".uninitialized();\n}\n";
	}
	function detectChangesTemplate(type, body) {
	    return "\n" + type + ".prototype.detectChangesInRecords = function(throwOnChange) {\n  " + body + "\n}\n";
	}
	function callOnAllChangesDoneTemplate(type, body) {
	    return "\n" + type + ".prototype.callOnAllChangesDone = function() {\n  " + body + "\n}\n";
	}
	function onAllChangesDoneTemplate(directive) {
	    return directive + ".onAllChangesDone();";
	}
	function detectChangesBodyTemplate(localDefinitions, changeDefinitions, records) {
	    return "\n" + localDefinitions + "\n" + changeDefinitions + "\nvar " + TEMP_LOCAL + ";\nvar " + IS_CHANGED_LOCAL + " = false;\nvar " + CURRENT_PROTO + ";\nvar " + CHANGES_LOCAL + " = null;\n\ncontext = " + CONTEXT_ACCESSOR + ";\n" + records + "\n";
	}
	function pipeCheckTemplate(protoIndex, context, bindingPropagationConfig, pipe, pipeType, oldValue, newValue, change, update, addToChanges, lastInDirective) {
	    return "\n" + CURRENT_PROTO + " = " + PROTOS_ACCESSOR + "[" + protoIndex + "];\nif (" + pipe + " === " + UTIL + ".uninitialized()) {\n  " + pipe + " = " + PIPE_REGISTRY_ACCESSOR + ".get('" + pipeType + "', " + context + ", " + bindingPropagationConfig + ");\n} else if (!" + pipe + ".supports(" + context + ")) {\n  " + pipe + ".onDestroy();\n  " + pipe + " = " + PIPE_REGISTRY_ACCESSOR + ".get('" + pipeType + "', " + context + ", " + bindingPropagationConfig + ");\n}\n\n" + newValue + " = " + pipe + ".transform(" + context + ");\nif (" + oldValue + " !== " + newValue + ") {\n  " + newValue + " = " + UTIL + ".unwrapValue(" + newValue + ");\n  " + change + " = true;\n  " + update + "\n  " + addToChanges + "\n  " + oldValue + " = " + newValue + ";\n}\n" + lastInDirective + "\n";
	}
	function referenceCheckTemplate(protoIndex, assignment, oldValue, newValue, change, update, addToChanges, lastInDirective) {
	    return "\n" + CURRENT_PROTO + " = " + PROTOS_ACCESSOR + "[" + protoIndex + "];\n" + assignment + "\nif (" + newValue + " !== " + oldValue + " || (" + newValue + " !== " + newValue + ") && (" + oldValue + " !== " + oldValue + ")) {\n  " + change + " = true;\n  " + update + "\n  " + addToChanges + "\n  " + oldValue + " = " + newValue + ";\n}\n" + lastInDirective + "\n";
	}
	function assignmentTemplate(field, value) {
	    return field + " = " + value + ";";
	}
	function localDefinitionsTemplate(names) {
	    return names.map(function (n) { return ("var " + n + ";"); }).join("\n");
	}
	function changeDefinitionsTemplate(names) {
	    return names.map(function (n) { return ("var " + n + " = false;"); }).join("\n");
	}
	function fieldDefinitionsTemplate(names) {
	    return names.map(function (n) { return (n + " = " + UTIL + ".uninitialized();"); }).join("\n");
	}
	function ifChangedGuardTemplate(changeNames, body) {
	    var cond = changeNames.join(" || ");
	    return "\nif (" + cond + ") {\n  " + body + "\n}\n";
	}
	function addToChangesTemplate(oldValue, newValue) {
	    return CHANGES_LOCAL + " = " + UTIL + ".addChange(" + CHANGES_LOCAL + ", " + CURRENT_PROTO + ".bindingRecord.propertyName, " + UTIL + ".simpleChange(" + oldValue + ", " + newValue + "));";
	}
	function updateDirectiveTemplate(oldValue, newValue, directiveProperty) {
	    return "\nif(throwOnChange) " + UTIL + ".throwOnChange(" + CURRENT_PROTO + ", " + UTIL + ".simpleChange(" + oldValue + ", " + newValue + "));\n" + directiveProperty + " = " + newValue + ";\n" + IS_CHANGED_LOCAL + " = true;\n  ";
	}
	function updateElementTemplate(oldValue, newValue) {
	    return "\nif(throwOnChange) " + UTIL + ".throwOnChange(" + CURRENT_PROTO + ", " + UTIL + ".simpleChange(" + oldValue + ", " + newValue + "));\n" + DISPATCHER_ACCESSOR + ".notifyOnBinding(" + CURRENT_PROTO + ".bindingRecord, " + newValue + ");\n  ";
	}
	function notifyOnChangesTemplate(directive) {
	    return "\nif(" + CHANGES_LOCAL + ") {\n  " + directive + ".onChange(" + CHANGES_LOCAL + ");\n  " + CHANGES_LOCAL + " = null;\n}\n";
	}
	function notifyOnPushDetectorsTemplate(detector) {
	    return "\nif(" + IS_CHANGED_LOCAL + ") {\n  " + detector + ".markAsCheckOnce();\n}\n";
	}
	function lastInDirectiveTemplate(notifyOnChanges, notifyOnPush) {
	    return "\n" + notifyOnChanges + "\n" + notifyOnPush + "\n" + IS_CHANGED_LOCAL + " = false;\n";
	}
	var ChangeDetectorJITGenerator = (function () {
	    function ChangeDetectorJITGenerator(typeName, changeDetectionStrategy, records, directiveRecords) {
	        this.typeName = typeName;
	        this.changeDetectionStrategy = changeDetectionStrategy;
	        this.records = records;
	        this.directiveRecords = directiveRecords;
	        this.localNames = this.getLocalNames(records);
	        this.changeNames = this.getChangeNames(this.localNames);
	        this.fieldNames = this.getFieldNames(this.localNames);
	        this.pipeNames = this.getPipeNames(this.localNames);
	    }
	    ChangeDetectorJITGenerator.prototype.getLocalNames = function (records) {
	        var index = 0;
	        var names = records.map(function (r) {
	            var sanitizedName = r.name.replace(new RegExp("\\W", "g"), '');
	            return "" + sanitizedName + index++;
	        });
	        return ["context"].concat(names);
	    };
	    ChangeDetectorJITGenerator.prototype.getChangeNames = function (localNames) {
	        return localNames.map(function (n) { return ("change_" + n); });
	    };
	    ChangeDetectorJITGenerator.prototype.getFieldNames = function (localNames) {
	        return localNames.map(function (n) { return ("this." + n); });
	    };
	    ChangeDetectorJITGenerator.prototype.getPipeNames = function (localNames) {
	        return localNames.map(function (n) { return ("this." + n + "_pipe"); });
	    };
	    ChangeDetectorJITGenerator.prototype.generate = function () {
	        var text = typeTemplate(this.typeName, this.genConstructor(), this.genDetectChanges(), this.genCallOnAllChangesDone(), this.genHydrate());
	        return new Function('AbstractChangeDetector', 'ChangeDetectionUtil', 'protos', 'directiveRecords', text)(abstract_change_detector_1.AbstractChangeDetector, change_detection_util_1.ChangeDetectionUtil, this.records, this.directiveRecords);
	    };
	    ChangeDetectorJITGenerator.prototype.genConstructor = function () {
	        return constructorTemplate(this.typeName, this.genFieldDefinitions());
	    };
	    ChangeDetectorJITGenerator.prototype.genHydrate = function () {
	        var mode = change_detection_util_1.ChangeDetectionUtil.changeDetectionMode(this.changeDetectionStrategy);
	        return hydrateTemplate(this.typeName, mode, this.genFieldDefinitions(), pipeOnDestroyTemplate(this.getNonNullPipeNames()), this.getDirectiveFieldNames(), this.getDetectorFieldNames());
	    };
	    ChangeDetectorJITGenerator.prototype.getDirectiveFieldNames = function () {
	        var _this = this;
	        return this.directiveRecords.map(function (d) { return _this.getDirective(d.directiveIndex); });
	    };
	    ChangeDetectorJITGenerator.prototype.getDetectorFieldNames = function () {
	        var _this = this;
	        return this.directiveRecords.filter(function (r) { return r.isOnPushChangeDetection(); })
	            .map(function (d) { return _this.getDetector(d.directiveIndex); });
	    };
	    ChangeDetectorJITGenerator.prototype.getDirective = function (d) { return "this.directive_" + d.name; };
	    ChangeDetectorJITGenerator.prototype.getDetector = function (d) { return "this.detector_" + d.name; };
	    ChangeDetectorJITGenerator.prototype.genFieldDefinitions = function () {
	        var fields = [];
	        fields = fields.concat(this.fieldNames);
	        fields = fields.concat(this.getNonNullPipeNames());
	        fields = fields.concat(this.getDirectiveFieldNames());
	        fields = fields.concat(this.getDetectorFieldNames());
	        return fieldDefinitionsTemplate(fields);
	    };
	    ChangeDetectorJITGenerator.prototype.getNonNullPipeNames = function () {
	        var _this = this;
	        var pipes = [];
	        this.records.forEach(function (r) {
	            if (r.mode === proto_record_1.RECORD_TYPE_PIPE || r.mode === proto_record_1.RECORD_TYPE_BINDING_PIPE) {
	                pipes.push(_this.pipeNames[r.selfIndex]);
	            }
	        });
	        return pipes;
	    };
	    ChangeDetectorJITGenerator.prototype.genDetectChanges = function () {
	        var body = this.genDetectChangesBody();
	        return detectChangesTemplate(this.typeName, body);
	    };
	    ChangeDetectorJITGenerator.prototype.genCallOnAllChangesDone = function () {
	        var notifications = [];
	        var dirs = this.directiveRecords;
	        for (var i = dirs.length - 1; i >= 0; --i) {
	            var dir = dirs[i];
	            if (dir.callOnAllChangesDone) {
	                var directive = "this.directive_" + dir.directiveIndex.name;
	                notifications.push(onAllChangesDoneTemplate(directive));
	            }
	        }
	        return callOnAllChangesDoneTemplate(this.typeName, notifications.join(";\n"));
	    };
	    ChangeDetectorJITGenerator.prototype.genDetectChangesBody = function () {
	        var _this = this;
	        var rec = this.records.map(function (r) { return _this.genRecord(r); }).join("\n");
	        return detectChangesBodyTemplate(this.genLocalDefinitions(), this.genChangeDefinitions(), rec);
	    };
	    ChangeDetectorJITGenerator.prototype.genLocalDefinitions = function () { return localDefinitionsTemplate(this.localNames); };
	    ChangeDetectorJITGenerator.prototype.genChangeDefinitions = function () { return changeDefinitionsTemplate(this.changeNames); };
	    ChangeDetectorJITGenerator.prototype.genRecord = function (r) {
	        if (r.mode === proto_record_1.RECORD_TYPE_PIPE || r.mode === proto_record_1.RECORD_TYPE_BINDING_PIPE) {
	            return this.genPipeCheck(r);
	        }
	        else {
	            return this.genReferenceCheck(r);
	        }
	    };
	    ChangeDetectorJITGenerator.prototype.genPipeCheck = function (r) {
	        var context = this.localNames[r.contextIndex];
	        var oldValue = this.fieldNames[r.selfIndex];
	        var newValue = this.localNames[r.selfIndex];
	        var change = this.changeNames[r.selfIndex];
	        var pipe = this.pipeNames[r.selfIndex];
	        var cdRef = r.mode === proto_record_1.RECORD_TYPE_BINDING_PIPE ? "this.ref" : "null";
	        var update = this.genUpdateDirectiveOrElement(r);
	        var addToChanges = this.genAddToChanges(r);
	        var lastInDirective = this.genLastInDirective(r);
	        return pipeCheckTemplate(r.selfIndex - 1, context, cdRef, pipe, r.name, oldValue, newValue, change, update, addToChanges, lastInDirective);
	    };
	    ChangeDetectorJITGenerator.prototype.genReferenceCheck = function (r) {
	        var oldValue = this.fieldNames[r.selfIndex];
	        var newValue = this.localNames[r.selfIndex];
	        var change = this.changeNames[r.selfIndex];
	        var assignment = this.genUpdateCurrentValue(r);
	        var update = this.genUpdateDirectiveOrElement(r);
	        var addToChanges = this.genAddToChanges(r);
	        var lastInDirective = this.genLastInDirective(r);
	        var check = referenceCheckTemplate(r.selfIndex - 1, assignment, oldValue, newValue, change, update, addToChanges, lastInDirective);
	        if (r.isPureFunction()) {
	            return this.ifChangedGuard(r, check);
	        }
	        else {
	            return check;
	        }
	    };
	    ChangeDetectorJITGenerator.prototype.genUpdateCurrentValue = function (r) {
	        var context = this.getContext(r);
	        var newValue = this.localNames[r.selfIndex];
	        var args = this.genArgs(r);
	        switch (r.mode) {
	            case proto_record_1.RECORD_TYPE_SELF:
	                return assignmentTemplate(newValue, context);
	            case proto_record_1.RECORD_TYPE_CONST:
	                return newValue + " = " + this.genLiteral(r.funcOrValue);
	            case proto_record_1.RECORD_TYPE_PROPERTY:
	                return assignmentTemplate(newValue, context + "." + r.name);
	            case proto_record_1.RECORD_TYPE_LOCAL:
	                return assignmentTemplate(newValue, LOCALS_ACCESSOR + ".get('" + r.name + "')");
	            case proto_record_1.RECORD_TYPE_INVOKE_METHOD:
	                return assignmentTemplate(newValue, context + "." + r.name + "(" + args + ")");
	            case proto_record_1.RECORD_TYPE_INVOKE_CLOSURE:
	                return assignmentTemplate(newValue, context + "(" + args + ")");
	            case proto_record_1.RECORD_TYPE_PRIMITIVE_OP:
	                return assignmentTemplate(newValue, UTIL + "." + r.name + "(" + args + ")");
	            case proto_record_1.RECORD_TYPE_INTERPOLATE:
	                return assignmentTemplate(newValue, this.genInterpolation(r));
	            case proto_record_1.RECORD_TYPE_KEYED_ACCESS:
	                var key = this.localNames[r.args[0]];
	                return assignmentTemplate(newValue, context + "[" + key + "]");
	            default:
	                throw new lang_1.BaseException("Unknown operation " + r.mode);
	        }
	    };
	    ChangeDetectorJITGenerator.prototype.getContext = function (r) {
	        if (r.contextIndex == -1) {
	            return this.getDirective(r.directiveIndex);
	        }
	        else {
	            return this.localNames[r.contextIndex];
	        }
	    };
	    ChangeDetectorJITGenerator.prototype.ifChangedGuard = function (r, body) {
	        var _this = this;
	        return ifChangedGuardTemplate(r.args.map(function (a) { return _this.changeNames[a]; }), body);
	    };
	    ChangeDetectorJITGenerator.prototype.genInterpolation = function (r) {
	        var res = "";
	        for (var i = 0; i < r.args.length; ++i) {
	            res += this.genLiteral(r.fixedArgs[i]);
	            res += " + ";
	            res += this.localNames[r.args[i]];
	            res += " + ";
	        }
	        res += this.genLiteral(r.fixedArgs[r.args.length]);
	        return res;
	    };
	    ChangeDetectorJITGenerator.prototype.genLiteral = function (value) { return JSON.stringify(value); };
	    ChangeDetectorJITGenerator.prototype.genUpdateDirectiveOrElement = function (r) {
	        if (!r.lastInBinding)
	            return "";
	        var newValue = this.localNames[r.selfIndex];
	        var oldValue = this.fieldNames[r.selfIndex];
	        var br = r.bindingRecord;
	        if (br.isDirective()) {
	            var directiveProperty = this.getDirective(br.directiveRecord.directiveIndex) + "." + br.propertyName;
	            return updateDirectiveTemplate(oldValue, newValue, directiveProperty);
	        }
	        else {
	            return updateElementTemplate(oldValue, newValue);
	        }
	    };
	    ChangeDetectorJITGenerator.prototype.genAddToChanges = function (r) {
	        var newValue = this.localNames[r.selfIndex];
	        var oldValue = this.fieldNames[r.selfIndex];
	        return r.bindingRecord.callOnChange() ? addToChangesTemplate(oldValue, newValue) : "";
	    };
	    ChangeDetectorJITGenerator.prototype.genLastInDirective = function (r) {
	        var onChanges = this.genNotifyOnChanges(r);
	        var onPush = this.genNotifyOnPushDetectors(r);
	        return lastInDirectiveTemplate(onChanges, onPush);
	    };
	    ChangeDetectorJITGenerator.prototype.genNotifyOnChanges = function (r) {
	        var br = r.bindingRecord;
	        if (r.lastInDirective && br.callOnChange()) {
	            return notifyOnChangesTemplate(this.getDirective(br.directiveRecord.directiveIndex));
	        }
	        else {
	            return "";
	        }
	    };
	    ChangeDetectorJITGenerator.prototype.genNotifyOnPushDetectors = function (r) {
	        var br = r.bindingRecord;
	        if (r.lastInDirective && br.isOnPushChangeDetection()) {
	            return notifyOnPushDetectorsTemplate(this.getDetector(br.directiveRecord.directiveIndex));
	        }
	        else {
	            return "";
	        }
	    };
	    ChangeDetectorJITGenerator.prototype.genArgs = function (r) {
	        var _this = this;
	        return r.args.map(function (arg) { return _this.localNames[arg]; }).join(", ");
	    };
	    return ChangeDetectorJITGenerator;
	})();
	exports.ChangeDetectorJITGenerator = ChangeDetectorJITGenerator;
	exports.__esModule = true;
	//# sourceMappingURL=change_detection_jit_generator.js.map

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	var constants_1 = __webpack_require__(75);
	var lang_1 = __webpack_require__(60);
	var DirectiveIndex = (function () {
	    function DirectiveIndex(elementIndex, directiveIndex) {
	        this.elementIndex = elementIndex;
	        this.directiveIndex = directiveIndex;
	    }
	    Object.defineProperty(DirectiveIndex.prototype, "name", {
	        get: function () { return this.elementIndex + "_" + this.directiveIndex; },
	        enumerable: true,
	        configurable: true
	    });
	    return DirectiveIndex;
	})();
	exports.DirectiveIndex = DirectiveIndex;
	var DirectiveRecord = (function () {
	    function DirectiveRecord(directiveIndex, callOnAllChangesDone, callOnChange, changeDetection) {
	        this.directiveIndex = directiveIndex;
	        this.callOnAllChangesDone = callOnAllChangesDone;
	        this.callOnChange = callOnChange;
	        this.changeDetection = changeDetection;
	    }
	    DirectiveRecord.prototype.isOnPushChangeDetection = function () { return lang_1.StringWrapper.equals(this.changeDetection, constants_1.ON_PUSH); };
	    return DirectiveRecord;
	})();
	exports.DirectiveRecord = DirectiveRecord;
	exports.__esModule = true;
	//# sourceMappingURL=directive_record.js.map

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	var lang_1 = __webpack_require__(60);
	var collection_1 = __webpack_require__(61);
	var proto_record_1 = __webpack_require__(82);
	/**
	 * Removes "duplicate" records. It assuming that record evaluation does not
	 * have side-effects.
	 *
	 * Records that are not last in bindings are removed and all the indices
	 * of the records that depend on them are updated.
	 *
	 * Records that are last in bindings CANNOT be removed, and instead are
	 * replaced with very cheap SELF records.
	 */
	function coalesce(records) {
	    var res = collection_1.ListWrapper.create();
	    var indexMap = collection_1.MapWrapper.create();
	    for (var i = 0; i < records.length; ++i) {
	        var r = records[i];
	        var record = _replaceIndices(r, res.length + 1, indexMap);
	        var matchingRecord = _findMatching(record, res);
	        if (lang_1.isPresent(matchingRecord) && record.lastInBinding) {
	            collection_1.ListWrapper.push(res, _selfRecord(record, matchingRecord.selfIndex, res.length + 1));
	            collection_1.MapWrapper.set(indexMap, r.selfIndex, matchingRecord.selfIndex);
	        }
	        else if (lang_1.isPresent(matchingRecord) && !record.lastInBinding) {
	            collection_1.MapWrapper.set(indexMap, r.selfIndex, matchingRecord.selfIndex);
	        }
	        else {
	            collection_1.ListWrapper.push(res, record);
	            collection_1.MapWrapper.set(indexMap, r.selfIndex, record.selfIndex);
	        }
	    }
	    return res;
	}
	exports.coalesce = coalesce;
	function _selfRecord(r, contextIndex, selfIndex) {
	    return new proto_record_1.ProtoRecord(proto_record_1.RECORD_TYPE_SELF, "self", null, [], r.fixedArgs, contextIndex, r.directiveIndex, selfIndex, r.bindingRecord, r.expressionAsString, r.lastInBinding, r.lastInDirective);
	}
	function _findMatching(r, rs) {
	    return collection_1.ListWrapper.find(rs, function (rr) { return rr.mode === r.mode && rr.funcOrValue === r.funcOrValue &&
	        rr.contextIndex === r.contextIndex &&
	        collection_1.ListWrapper.equals(rr.args, r.args); });
	}
	function _replaceIndices(r, selfIndex, indexMap) {
	    var args = collection_1.ListWrapper.map(r.args, function (a) { return _map(indexMap, a); });
	    var contextIndex = _map(indexMap, r.contextIndex);
	    return new proto_record_1.ProtoRecord(r.mode, r.name, r.funcOrValue, args, r.fixedArgs, contextIndex, r.directiveIndex, selfIndex, r.bindingRecord, r.expressionAsString, r.lastInBinding, r.lastInDirective);
	}
	function _map(indexMap, value) {
	    var r = collection_1.MapWrapper.get(indexMap, value);
	    return lang_1.isPresent(r) ? r : value;
	}
	exports.__esModule = true;
	//# sourceMappingURL=coalesce.js.map

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	var lang_1 = __webpack_require__(60);
	var DIRECTIVE = "directive";
	var ELEMENT = "element";
	var TEXT_NODE = "textNode";
	var BindingRecord = (function () {
	    function BindingRecord(mode, implicitReceiver, ast, elementIndex, propertyName, setter, directiveRecord) {
	        this.mode = mode;
	        this.implicitReceiver = implicitReceiver;
	        this.ast = ast;
	        this.elementIndex = elementIndex;
	        this.propertyName = propertyName;
	        this.setter = setter;
	        this.directiveRecord = directiveRecord;
	    }
	    BindingRecord.prototype.callOnChange = function () { return lang_1.isPresent(this.directiveRecord) && this.directiveRecord.callOnChange; };
	    BindingRecord.prototype.isOnPushChangeDetection = function () {
	        return lang_1.isPresent(this.directiveRecord) && this.directiveRecord.isOnPushChangeDetection();
	    };
	    BindingRecord.prototype.isDirective = function () { return this.mode === DIRECTIVE; };
	    BindingRecord.prototype.isElement = function () { return this.mode === ELEMENT; };
	    BindingRecord.prototype.isTextNode = function () { return this.mode === TEXT_NODE; };
	    BindingRecord.createForDirective = function (ast, propertyName, setter, directiveRecord) {
	        return new BindingRecord(DIRECTIVE, 0, ast, 0, propertyName, setter, directiveRecord);
	    };
	    BindingRecord.createForElement = function (ast, elementIndex, propertyName) {
	        return new BindingRecord(ELEMENT, 0, ast, elementIndex, propertyName, null, null);
	    };
	    BindingRecord.createForHostProperty = function (directiveIndex, ast, propertyName) {
	        return new BindingRecord(ELEMENT, directiveIndex, ast, directiveIndex.elementIndex, propertyName, null, null);
	    };
	    BindingRecord.createForTextNode = function (ast, elementIndex) {
	        return new BindingRecord(TEXT_NODE, 0, ast, elementIndex, null, null, null);
	    };
	    return BindingRecord;
	})();
	exports.BindingRecord = BindingRecord;
	exports.__esModule = true;
	//# sourceMappingURL=binding_record.js.map

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var collection_1 = __webpack_require__(61);
	var lang_1 = __webpack_require__(60);
	var decorators_1 = __webpack_require__(63);
	var PipeRegistry = (function () {
	    function PipeRegistry(config) {
	        this.config = config;
	    }
	    PipeRegistry.prototype.get = function (type, obj, cdRef) {
	        var listOfConfigs = this.config[type];
	        if (lang_1.isBlank(listOfConfigs)) {
	            throw new lang_1.BaseException("Cannot find '" + type + "' pipe supporting object '" + obj + "'");
	        }
	        var matchingConfig = collection_1.ListWrapper.find(listOfConfigs, function (pipeConfig) { return pipeConfig.supports(obj); });
	        if (lang_1.isBlank(matchingConfig)) {
	            throw new lang_1.BaseException("Cannot find '" + type + "' pipe supporting object '" + obj + "'");
	        }
	        return matchingConfig.create(cdRef);
	    };
	    PipeRegistry = __decorate([
	        decorators_1.Injectable(), 
	        __metadata('design:paramtypes', [Object])
	    ], PipeRegistry);
	    return PipeRegistry;
	})();
	exports.PipeRegistry = PipeRegistry;
	exports.__esModule = true;
	//# sourceMappingURL=pipe_registry.js.map

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(60);
	var pipe_1 = __webpack_require__(79);
	/**
	 * @exportedAs angular2/pipes
	 */
	var NullPipeFactory = (function (_super) {
	    __extends(NullPipeFactory, _super);
	    function NullPipeFactory() {
	        _super.call(this);
	    }
	    NullPipeFactory.prototype.supports = function (obj) { return NullPipe.supportsObj(obj); };
	    NullPipeFactory.prototype.create = function (cdRef) { return new NullPipe(); };
	    NullPipeFactory = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], NullPipeFactory);
	    return NullPipeFactory;
	})(pipe_1.PipeFactory);
	exports.NullPipeFactory = NullPipeFactory;
	/**
	 * @exportedAs angular2/pipes
	 */
	var NullPipe = (function (_super) {
	    __extends(NullPipe, _super);
	    function NullPipe() {
	        _super.call(this);
	        this.called = false;
	    }
	    NullPipe.supportsObj = function (obj) { return lang_1.isBlank(obj); };
	    NullPipe.prototype.supports = function (obj) { return NullPipe.supportsObj(obj); };
	    NullPipe.prototype.transform = function (value) {
	        if (!this.called) {
	            this.called = true;
	            return pipe_1.WrappedValue.wrap(null);
	        }
	        else {
	            return null;
	        }
	    };
	    return NullPipe;
	})(pipe_1.Pipe);
	exports.NullPipe = NullPipe;
	exports.__esModule = true;
	//# sourceMappingURL=null_pipe.js.map

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var proto_change_detector_1 = __webpack_require__(76);
	var pipe_registry_1 = __webpack_require__(87);
	var iterable_changes_1 = __webpack_require__(91);
	var keyvalue_changes_1 = __webpack_require__(92);
	var observable_pipe_1 = __webpack_require__(93);
	var promise_pipe_1 = __webpack_require__(96);
	var uppercase_pipe_1 = __webpack_require__(97);
	var lowercase_pipe_1 = __webpack_require__(90);
	var json_pipe_1 = __webpack_require__(98);
	var null_pipe_1 = __webpack_require__(88);
	var interfaces_1 = __webpack_require__(74);
	var decorators_1 = __webpack_require__(63);
	var collection_1 = __webpack_require__(61);
	var lang_1 = __webpack_require__(60);
	/**
	 * Structural diffing for `Object`s and `Map`s.
	 *
	 * @exportedAs angular2/pipes
	 */
	exports.keyValDiff = [new keyvalue_changes_1.KeyValueChangesFactory(), new null_pipe_1.NullPipeFactory()];
	/**
	 * Structural diffing for `Iterable` types such as `Array`s.
	 *
	 * @exportedAs angular2/pipes
	 */
	exports.iterableDiff = [new iterable_changes_1.IterableChangesFactory(), new null_pipe_1.NullPipeFactory()];
	/**
	 * Async binding to such types as Observable.
	 *
	 * @exportedAs angular2/pipes
	 */
	exports.async = [new observable_pipe_1.ObservablePipeFactory(), new promise_pipe_1.PromisePipeFactory(), new null_pipe_1.NullPipeFactory()];
	/**
	 * Uppercase text transform.
	 *
	 * @exportedAs angular2/pipes
	 */
	exports.uppercase = [new uppercase_pipe_1.UpperCaseFactory(), new null_pipe_1.NullPipeFactory()];
	/**
	 * Lowercase text transform.
	 *
	 * @exportedAs angular2/pipes
	 */
	exports.lowercase = [new lowercase_pipe_1.LowerCaseFactory(), new null_pipe_1.NullPipeFactory()];
	/**
	 * Json stringify transform.
	 *
	 * @exportedAs angular2/pipes
	 */
	exports.json = [new json_pipe_1.JsonPipeFactory(), new null_pipe_1.NullPipeFactory()];
	exports.defaultPipes = {
	    "iterableDiff": exports.iterableDiff,
	    "keyValDiff": exports.keyValDiff,
	    "async": exports.async,
	    "uppercase": exports.uppercase,
	    "lowercase": exports.lowercase,
	    "json": exports.json
	};
	exports.preGeneratedProtoDetectors = {};
	/**
	 * Implements change detection using a map of pregenerated proto detectors.
	 *
	 * @exportedAs angular2/change_detection
	 */
	var PreGeneratedChangeDetection = (function (_super) {
	    __extends(PreGeneratedChangeDetection, _super);
	    function PreGeneratedChangeDetection(registry, protoChangeDetectors) {
	        _super.call(this);
	        this.registry = registry;
	        this._dynamicChangeDetection = new DynamicChangeDetection(registry);
	        this._protoChangeDetectorFactories =
	            lang_1.isPresent(protoChangeDetectors) ? protoChangeDetectors : exports.preGeneratedProtoDetectors;
	    }
	    PreGeneratedChangeDetection.prototype.createProtoChangeDetector = function (definition) {
	        var id = definition.id;
	        if (collection_1.StringMapWrapper.contains(this._protoChangeDetectorFactories, id)) {
	            return collection_1.StringMapWrapper.get(this._protoChangeDetectorFactories, id)(this.registry);
	        }
	        return this._dynamicChangeDetection.createProtoChangeDetector(definition);
	    };
	    return PreGeneratedChangeDetection;
	})(interfaces_1.ChangeDetection);
	exports.PreGeneratedChangeDetection = PreGeneratedChangeDetection;
	/**
	 * Implements change detection that does not require `eval()`.
	 *
	 * This is slower than {@link JitChangeDetection}.
	 *
	 * @exportedAs angular2/change_detection
	 */
	var DynamicChangeDetection = (function (_super) {
	    __extends(DynamicChangeDetection, _super);
	    function DynamicChangeDetection(registry) {
	        _super.call(this);
	        this.registry = registry;
	    }
	    DynamicChangeDetection.prototype.createProtoChangeDetector = function (definition) {
	        return new proto_change_detector_1.DynamicProtoChangeDetector(this.registry, definition);
	    };
	    DynamicChangeDetection = __decorate([
	        decorators_1.Injectable(), 
	        __metadata('design:paramtypes', [pipe_registry_1.PipeRegistry])
	    ], DynamicChangeDetection);
	    return DynamicChangeDetection;
	})(interfaces_1.ChangeDetection);
	exports.DynamicChangeDetection = DynamicChangeDetection;
	/**
	 * Implements faster change detection, by generating source code.
	 *
	 * This requires `eval()`. For change detection that does not require `eval()`, see {@link
	 *DynamicChangeDetection}.
	 *
	 * @exportedAs angular2/change_detection
	 */
	var JitChangeDetection = (function (_super) {
	    __extends(JitChangeDetection, _super);
	    function JitChangeDetection(registry) {
	        _super.call(this);
	        this.registry = registry;
	    }
	    JitChangeDetection.prototype.createProtoChangeDetector = function (definition) {
	        return new proto_change_detector_1.JitProtoChangeDetector(this.registry, definition);
	    };
	    JitChangeDetection = __decorate([
	        decorators_1.Injectable(), 
	        __metadata('design:paramtypes', [pipe_registry_1.PipeRegistry])
	    ], JitChangeDetection);
	    return JitChangeDetection;
	})(interfaces_1.ChangeDetection);
	exports.JitChangeDetection = JitChangeDetection;
	exports.defaultPipeRegistry = new pipe_registry_1.PipeRegistry(exports.defaultPipes);
	exports.__esModule = true;
	//# sourceMappingURL=change_detection.js.map

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var lang_1 = __webpack_require__(60);
	var pipe_1 = __webpack_require__(79);
	/**
	 * Implements lowercase transforms to text.
	 *
	 * # Example
	 *
	 * In this example we transform the user text lowercase.
	 *
	 *  ```
	 * @Component({
	 *   selector: "username-cmp"
	 * })
	 * @View({
	 *   template: "Username: {{ user | lowercase }}"
	 * })
	 * class Username {
	 *   user:string;
	 * }
	 *
	 * ```
	 *
	 * @exportedAs angular2/pipes
	 */
	var LowerCasePipe = (function (_super) {
	    __extends(LowerCasePipe, _super);
	    function LowerCasePipe() {
	        _super.call(this);
	        this._latestValue = null;
	    }
	    LowerCasePipe.prototype.supports = function (str) { return lang_1.isString(str); };
	    LowerCasePipe.prototype.onDestroy = function () { this._latestValue = null; };
	    LowerCasePipe.prototype.transform = function (value) {
	        if (this._latestValue !== value) {
	            this._latestValue = value;
	            return lang_1.StringWrapper.toLowerCase(value);
	        }
	        else {
	            return this._latestValue;
	        }
	    };
	    return LowerCasePipe;
	})(pipe_1.Pipe);
	exports.LowerCasePipe = LowerCasePipe;
	/**
	 * @exportedAs angular2/pipes
	 */
	var LowerCaseFactory = (function () {
	    function LowerCaseFactory() {
	    }
	    LowerCaseFactory.prototype.supports = function (str) { return lang_1.isString(str); };
	    LowerCaseFactory.prototype.create = function () { return new LowerCasePipe(); };
	    return LowerCaseFactory;
	})();
	exports.LowerCaseFactory = LowerCaseFactory;
	exports.__esModule = true;
	//# sourceMappingURL=lowercase_pipe.js.map

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(60);
	var collection_1 = __webpack_require__(61);
	var lang_2 = __webpack_require__(60);
	var pipe_1 = __webpack_require__(79);
	var IterableChangesFactory = (function (_super) {
	    __extends(IterableChangesFactory, _super);
	    function IterableChangesFactory() {
	        _super.call(this);
	    }
	    IterableChangesFactory.prototype.supports = function (obj) { return IterableChanges.supportsObj(obj); };
	    IterableChangesFactory.prototype.create = function (cdRef) { return new IterableChanges(); };
	    IterableChangesFactory = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], IterableChangesFactory);
	    return IterableChangesFactory;
	})(pipe_1.PipeFactory);
	exports.IterableChangesFactory = IterableChangesFactory;
	/**
	 * @exportedAs angular2/pipes
	 */
	var IterableChanges = (function (_super) {
	    __extends(IterableChanges, _super);
	    function IterableChanges() {
	        _super.call(this);
	        this._collection = null;
	        this._length = null;
	        /// Keeps track of the used records at any point in time (during & across `_check()` calls)
	        this._linkedRecords = null;
	        /// Keeps track of the removed records at any point in time during `_check()` calls.
	        this._unlinkedRecords = null;
	        this._previousItHead = null;
	        this._itHead = null;
	        this._itTail = null;
	        this._additionsHead = null;
	        this._additionsTail = null;
	        this._movesHead = null;
	        this._movesTail = null;
	        this._removalsHead = null;
	        this._removalsTail = null;
	    }
	    IterableChanges.supportsObj = function (obj) { return collection_1.isListLikeIterable(obj); };
	    IterableChanges.prototype.supports = function (obj) { return IterableChanges.supportsObj(obj); };
	    Object.defineProperty(IterableChanges.prototype, "collection", {
	        get: function () { return this._collection; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(IterableChanges.prototype, "length", {
	        get: function () { return this._length; },
	        enumerable: true,
	        configurable: true
	    });
	    IterableChanges.prototype.forEachItem = function (fn) {
	        var record;
	        for (record = this._itHead; record !== null; record = record._next) {
	            fn(record);
	        }
	    };
	    IterableChanges.prototype.forEachPreviousItem = function (fn) {
	        var record;
	        for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
	            fn(record);
	        }
	    };
	    IterableChanges.prototype.forEachAddedItem = function (fn) {
	        var record;
	        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	            fn(record);
	        }
	    };
	    IterableChanges.prototype.forEachMovedItem = function (fn) {
	        var record;
	        for (record = this._movesHead; record !== null; record = record._nextMoved) {
	            fn(record);
	        }
	    };
	    IterableChanges.prototype.forEachRemovedItem = function (fn) {
	        var record;
	        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	            fn(record);
	        }
	    };
	    IterableChanges.prototype.transform = function (collection) {
	        if (this.check(collection)) {
	            return pipe_1.WrappedValue.wrap(this);
	        }
	        else {
	            return this;
	        }
	    };
	    // todo(vicb): optim for UnmodifiableListView (frozen arrays)
	    IterableChanges.prototype.check = function (collection) {
	        var _this = this;
	        this._reset();
	        var record = this._itHead;
	        var mayBeDirty = false;
	        var index;
	        var item;
	        if (collection_1.ListWrapper.isList(collection)) {
	            var list = collection;
	            this._length = collection.length;
	            for (index = 0; index < this._length; index++) {
	                item = list[index];
	                if (record === null || !lang_2.looseIdentical(record.item, item)) {
	                    record = this._mismatch(record, item, index);
	                    mayBeDirty = true;
	                }
	                else if (mayBeDirty) {
	                    // TODO(misko): can we limit this to duplicates only?
	                    record = this._verifyReinsertion(record, item, index);
	                }
	                record = record._next;
	            }
	        }
	        else {
	            index = 0;
	            collection_1.iterateListLike(collection, function (item) {
	                if (record === null || !lang_2.looseIdentical(record.item, item)) {
	                    record = _this._mismatch(record, item, index);
	                    mayBeDirty = true;
	                }
	                else if (mayBeDirty) {
	                    // TODO(misko): can we limit this to duplicates only?
	                    record = _this._verifyReinsertion(record, item, index);
	                }
	                record = record._next;
	                index++;
	            });
	            this._length = index;
	        }
	        this._truncate(record);
	        this._collection = collection;
	        return this.isDirty;
	    };
	    Object.defineProperty(IterableChanges.prototype, "isDirty", {
	        // CollectionChanges is considered dirty if it has any additions, moves or removals.
	        get: function () {
	            return this._additionsHead !== null || this._movesHead !== null || this._removalsHead !== null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Reset the state of the change objects to show no changes. This means set previousKey to
	     * currentKey, and clear all of the queues (additions, moves, removals).
	     * Set the previousIndexes of moved and added items to their currentIndexes
	     * Reset the list of additions, moves and removals
	     */
	    IterableChanges.prototype._reset = function () {
	        if (this.isDirty) {
	            var record;
	            var nextRecord;
	            for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
	                record._nextPrevious = record._next;
	            }
	            for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	                record.previousIndex = record.currentIndex;
	            }
	            this._additionsHead = this._additionsTail = null;
	            for (record = this._movesHead; record !== null; record = nextRecord) {
	                record.previousIndex = record.currentIndex;
	                nextRecord = record._nextMoved;
	            }
	            this._movesHead = this._movesTail = null;
	            this._removalsHead = this._removalsTail = null;
	        }
	    };
	    /**
	     * This is the core function which handles differences between collections.
	     *
	     * - `record` is the record which we saw at this position last time. If null then it is a new
	     *   item.
	     * - `item` is the current item in the collection
	     * - `index` is the position of the item in the collection
	     */
	    IterableChanges.prototype._mismatch = function (record, item, index) {
	        // The previous record after which we will append the current one.
	        var previousRecord;
	        if (record === null) {
	            previousRecord = this._itTail;
	        }
	        else {
	            previousRecord = record._prev;
	            // Remove the record from the collection since we know it does not match the item.
	            this._remove(record);
	        }
	        // Attempt to see if we have seen the item before.
	        record = this._linkedRecords === null ? null : this._linkedRecords.get(item, index);
	        if (record !== null) {
	            // We have seen this before, we need to move it forward in the collection.
	            this._moveAfter(record, previousRecord, index);
	        }
	        else {
	            // Never seen it, check evicted list.
	            record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(item);
	            if (record !== null) {
	                // It is an item which we have evicted earlier: reinsert it back into the list.
	                this._reinsertAfter(record, previousRecord, index);
	            }
	            else {
	                // It is a new item: add it.
	                record = this._addAfter(new CollectionChangeRecord(item), previousRecord, index);
	            }
	        }
	        return record;
	    };
	    /**
	     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)
	     *
	     * Use case: `[a, a]` => `[b, a, a]`
	     *
	     * If we did not have this check then the insertion of `b` would:
	     *   1) evict first `a`
	     *   2) insert `b` at `0` index.
	     *   3) leave `a` at index `1` as is. <-- this is wrong!
	     *   3) reinsert `a` at index 2. <-- this is wrong!
	     *
	     * The correct behavior is:
	     *   1) evict first `a`
	     *   2) insert `b` at `0` index.
	     *   3) reinsert `a` at index 1.
	     *   3) move `a` at from `1` to `2`.
	     *
	     *
	     * Double check that we have not evicted a duplicate item. We need to check if the item type may
	     * have already been removed:
	     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted
	     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a
	     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'
	     * at the end.
	     */
	    IterableChanges.prototype._verifyReinsertion = function (record, item, index) {
	        var reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(item);
	        if (reinsertRecord !== null) {
	            record = this._reinsertAfter(reinsertRecord, record._prev, index);
	        }
	        else if (record.currentIndex != index) {
	            record.currentIndex = index;
	            this._addToMoves(record, index);
	        }
	        return record;
	    };
	    /**
	     * Get rid of any excess {@link CollectionChangeRecord}s from the previous collection
	     *
	     * - `record` The first excess {@link CollectionChangeRecord}.
	     */
	    IterableChanges.prototype._truncate = function (record) {
	        // Anything after that needs to be removed;
	        while (record !== null) {
	            var nextRecord = record._next;
	            this._addToRemovals(this._unlink(record));
	            record = nextRecord;
	        }
	        if (this._unlinkedRecords !== null) {
	            this._unlinkedRecords.clear();
	        }
	        if (this._additionsTail !== null) {
	            this._additionsTail._nextAdded = null;
	        }
	        if (this._movesTail !== null) {
	            this._movesTail._nextMoved = null;
	        }
	        if (this._itTail !== null) {
	            this._itTail._next = null;
	        }
	        if (this._removalsTail !== null) {
	            this._removalsTail._nextRemoved = null;
	        }
	    };
	    IterableChanges.prototype._reinsertAfter = function (record, prevRecord, index) {
	        if (this._unlinkedRecords !== null) {
	            this._unlinkedRecords.remove(record);
	        }
	        var prev = record._prevRemoved;
	        var next = record._nextRemoved;
	        if (prev === null) {
	            this._removalsHead = next;
	        }
	        else {
	            prev._nextRemoved = next;
	        }
	        if (next === null) {
	            this._removalsTail = prev;
	        }
	        else {
	            next._prevRemoved = prev;
	        }
	        this._insertAfter(record, prevRecord, index);
	        this._addToMoves(record, index);
	        return record;
	    };
	    IterableChanges.prototype._moveAfter = function (record, prevRecord, index) {
	        this._unlink(record);
	        this._insertAfter(record, prevRecord, index);
	        this._addToMoves(record, index);
	        return record;
	    };
	    IterableChanges.prototype._addAfter = function (record, prevRecord, index) {
	        this._insertAfter(record, prevRecord, index);
	        if (this._additionsTail === null) {
	            // todo(vicb)
	            // assert(this._additionsHead === null);
	            this._additionsTail = this._additionsHead = record;
	        }
	        else {
	            // todo(vicb)
	            // assert(_additionsTail._nextAdded === null);
	            // assert(record._nextAdded === null);
	            this._additionsTail = this._additionsTail._nextAdded = record;
	        }
	        return record;
	    };
	    IterableChanges.prototype._insertAfter = function (record, prevRecord, index) {
	        // todo(vicb)
	        // assert(record != prevRecord);
	        // assert(record._next === null);
	        // assert(record._prev === null);
	        var next = prevRecord === null ? this._itHead : prevRecord._next;
	        // todo(vicb)
	        // assert(next != record);
	        // assert(prevRecord != record);
	        record._next = next;
	        record._prev = prevRecord;
	        if (next === null) {
	            this._itTail = record;
	        }
	        else {
	            next._prev = record;
	        }
	        if (prevRecord === null) {
	            this._itHead = record;
	        }
	        else {
	            prevRecord._next = record;
	        }
	        if (this._linkedRecords === null) {
	            this._linkedRecords = new _DuplicateMap();
	        }
	        this._linkedRecords.put(record);
	        record.currentIndex = index;
	        return record;
	    };
	    IterableChanges.prototype._remove = function (record) {
	        return this._addToRemovals(this._unlink(record));
	    };
	    IterableChanges.prototype._unlink = function (record) {
	        if (this._linkedRecords !== null) {
	            this._linkedRecords.remove(record);
	        }
	        var prev = record._prev;
	        var next = record._next;
	        // todo(vicb)
	        // assert((record._prev = null) === null);
	        // assert((record._next = null) === null);
	        if (prev === null) {
	            this._itHead = next;
	        }
	        else {
	            prev._next = next;
	        }
	        if (next === null) {
	            this._itTail = prev;
	        }
	        else {
	            next._prev = prev;
	        }
	        return record;
	    };
	    IterableChanges.prototype._addToMoves = function (record, toIndex) {
	        // todo(vicb)
	        // assert(record._nextMoved === null);
	        if (record.previousIndex === toIndex) {
	            return record;
	        }
	        if (this._movesTail === null) {
	            // todo(vicb)
	            // assert(_movesHead === null);
	            this._movesTail = this._movesHead = record;
	        }
	        else {
	            // todo(vicb)
	            // assert(_movesTail._nextMoved === null);
	            this._movesTail = this._movesTail._nextMoved = record;
	        }
	        return record;
	    };
	    IterableChanges.prototype._addToRemovals = function (record) {
	        if (this._unlinkedRecords === null) {
	            this._unlinkedRecords = new _DuplicateMap();
	        }
	        this._unlinkedRecords.put(record);
	        record.currentIndex = null;
	        record._nextRemoved = null;
	        if (this._removalsTail === null) {
	            // todo(vicb)
	            // assert(_removalsHead === null);
	            this._removalsTail = this._removalsHead = record;
	            record._prevRemoved = null;
	        }
	        else {
	            // todo(vicb)
	            // assert(_removalsTail._nextRemoved === null);
	            // assert(record._nextRemoved === null);
	            record._prevRemoved = this._removalsTail;
	            this._removalsTail = this._removalsTail._nextRemoved = record;
	        }
	        return record;
	    };
	    IterableChanges.prototype.toString = function () {
	        var record;
	        var list = [];
	        for (record = this._itHead; record !== null; record = record._next) {
	            collection_1.ListWrapper.push(list, record);
	        }
	        var previous = [];
	        for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
	            collection_1.ListWrapper.push(previous, record);
	        }
	        var additions = [];
	        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	            collection_1.ListWrapper.push(additions, record);
	        }
	        var moves = [];
	        for (record = this._movesHead; record !== null; record = record._nextMoved) {
	            collection_1.ListWrapper.push(moves, record);
	        }
	        var removals = [];
	        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	            collection_1.ListWrapper.push(removals, record);
	        }
	        return "collection: " + list.join(', ') + "\n" + "previous: " + previous.join(', ') + "\n" +
	            "additions: " + additions.join(', ') + "\n" + "moves: " + moves.join(', ') + "\n" +
	            "removals: " + removals.join(', ') + "\n";
	    };
	    return IterableChanges;
	})(pipe_1.Pipe);
	exports.IterableChanges = IterableChanges;
	/**
	 * @exportedAs angular2/pipes
	 */
	var CollectionChangeRecord = (function () {
	    function CollectionChangeRecord(item) {
	        this.currentIndex = null;
	        this.previousIndex = null;
	        this.item = item;
	        this._nextPrevious = null;
	        this._prev = null;
	        this._next = null;
	        this._prevDup = null;
	        this._nextDup = null;
	        this._prevRemoved = null;
	        this._nextRemoved = null;
	        this._nextAdded = null;
	        this._nextMoved = null;
	    }
	    CollectionChangeRecord.prototype.toString = function () {
	        return this.previousIndex === this.currentIndex ?
	            lang_2.stringify(this.item) :
	            lang_2.stringify(this.item) + '[' + lang_2.stringify(this.previousIndex) + '->' +
	                lang_2.stringify(this.currentIndex) + ']';
	    };
	    return CollectionChangeRecord;
	})();
	exports.CollectionChangeRecord = CollectionChangeRecord;
	// A linked list of CollectionChangeRecords with the same CollectionChangeRecord.item
	var _DuplicateItemRecordList = (function () {
	    function _DuplicateItemRecordList() {
	        this._head = null;
	        this._tail = null;
	    }
	    /**
	     * Append the record to the list of duplicates.
	     *
	     * Note: by design all records in the list of duplicates hold the same value in record.item.
	     */
	    _DuplicateItemRecordList.prototype.add = function (record) {
	        if (this._head === null) {
	            this._head = this._tail = record;
	            record._nextDup = null;
	            record._prevDup = null;
	        }
	        else {
	            // todo(vicb)
	            // assert(record.item ==  _head.item ||
	            //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);
	            this._tail._nextDup = record;
	            record._prevDup = this._tail;
	            record._nextDup = null;
	            this._tail = record;
	        }
	    };
	    // Returns a CollectionChangeRecord having CollectionChangeRecord.item == item and
	    // CollectionChangeRecord.currentIndex >= afterIndex
	    _DuplicateItemRecordList.prototype.get = function (item, afterIndex) {
	        var record;
	        for (record = this._head; record !== null; record = record._nextDup) {
	            if ((afterIndex === null || afterIndex < record.currentIndex) &&
	                lang_2.looseIdentical(record.item, item)) {
	                return record;
	            }
	        }
	        return null;
	    };
	    /**
	     * Remove one {@link CollectionChangeRecord} from the list of duplicates.
	     *
	     * Returns whether the list of duplicates is empty.
	     */
	    _DuplicateItemRecordList.prototype.remove = function (record) {
	        // todo(vicb)
	        // assert(() {
	        //  // verify that the record being removed is in the list.
	        //  for (CollectionChangeRecord cursor = _head; cursor != null; cursor = cursor._nextDup) {
	        //    if (identical(cursor, record)) return true;
	        //  }
	        //  return false;
	        //});
	        var prev = record._prevDup;
	        var next = record._nextDup;
	        if (prev === null) {
	            this._head = next;
	        }
	        else {
	            prev._nextDup = next;
	        }
	        if (next === null) {
	            this._tail = prev;
	        }
	        else {
	            next._prevDup = prev;
	        }
	        return this._head === null;
	    };
	    return _DuplicateItemRecordList;
	})();
	var _DuplicateMap = (function () {
	    function _DuplicateMap() {
	        this.map = collection_1.MapWrapper.create();
	    }
	    _DuplicateMap.prototype.put = function (record) {
	        // todo(vicb) handle corner cases
	        var key = lang_2.getMapKey(record.item);
	        var duplicates = collection_1.MapWrapper.get(this.map, key);
	        if (!lang_2.isPresent(duplicates)) {
	            duplicates = new _DuplicateItemRecordList();
	            collection_1.MapWrapper.set(this.map, key, duplicates);
	        }
	        duplicates.add(record);
	    };
	    /**
	     * Retrieve the `value` using key. Because the CollectionChangeRecord value maybe one which we
	     * have already iterated over, we use the afterIndex to pretend it is not there.
	     *
	     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we
	     * have any more `a`s needs to return the last `a` not the first or second.
	     */
	    _DuplicateMap.prototype.get = function (value, afterIndex) {
	        if (afterIndex === void 0) { afterIndex = null; }
	        var key = lang_2.getMapKey(value);
	        var recordList = collection_1.MapWrapper.get(this.map, key);
	        return lang_2.isBlank(recordList) ? null : recordList.get(value, afterIndex);
	    };
	    /**
	     * Removes a {@link CollectionChangeRecord} from the list of duplicates.
	     *
	     * The list of duplicates also is removed from the map if it gets empty.
	     */
	    _DuplicateMap.prototype.remove = function (record) {
	        var key = lang_2.getMapKey(record.item);
	        // todo(vicb)
	        // assert(this.map.containsKey(key));
	        var recordList = collection_1.MapWrapper.get(this.map, key);
	        // Remove the list of duplicates when it gets empty
	        if (recordList.remove(record)) {
	            collection_1.MapWrapper.delete(this.map, key);
	        }
	        return record;
	    };
	    Object.defineProperty(_DuplicateMap.prototype, "isEmpty", {
	        get: function () { return collection_1.MapWrapper.size(this.map) === 0; },
	        enumerable: true,
	        configurable: true
	    });
	    _DuplicateMap.prototype.clear = function () { collection_1.MapWrapper.clear(this.map); };
	    _DuplicateMap.prototype.toString = function () { return '_DuplicateMap(' + lang_2.stringify(this.map) + ')'; };
	    return _DuplicateMap;
	})();
	exports.__esModule = true;
	//# sourceMappingURL=iterable_changes.js.map

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var collection_1 = __webpack_require__(61);
	var lang_1 = __webpack_require__(60);
	var pipe_1 = __webpack_require__(79);
	/**
	 * @exportedAs angular2/pipes
	 */
	var KeyValueChangesFactory = (function (_super) {
	    __extends(KeyValueChangesFactory, _super);
	    function KeyValueChangesFactory() {
	        _super.call(this);
	    }
	    KeyValueChangesFactory.prototype.supports = function (obj) { return KeyValueChanges.supportsObj(obj); };
	    KeyValueChangesFactory.prototype.create = function (cdRef) { return new KeyValueChanges(); };
	    KeyValueChangesFactory = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], KeyValueChangesFactory);
	    return KeyValueChangesFactory;
	})(pipe_1.PipeFactory);
	exports.KeyValueChangesFactory = KeyValueChangesFactory;
	/**
	 * @exportedAs angular2/pipes
	 */
	var KeyValueChanges = (function (_super) {
	    __extends(KeyValueChanges, _super);
	    function KeyValueChanges() {
	        _super.call(this);
	        this._records = collection_1.MapWrapper.create();
	        this._mapHead = null;
	        this._previousMapHead = null;
	        this._changesHead = null;
	        this._changesTail = null;
	        this._additionsHead = null;
	        this._additionsTail = null;
	        this._removalsHead = null;
	        this._removalsTail = null;
	    }
	    KeyValueChanges.supportsObj = function (obj) { return obj instanceof Map || lang_1.isJsObject(obj); };
	    KeyValueChanges.prototype.supports = function (obj) { return KeyValueChanges.supportsObj(obj); };
	    KeyValueChanges.prototype.transform = function (map) {
	        if (this.check(map)) {
	            return pipe_1.WrappedValue.wrap(this);
	        }
	        else {
	            return this;
	        }
	    };
	    Object.defineProperty(KeyValueChanges.prototype, "isDirty", {
	        get: function () {
	            return this._additionsHead !== null || this._changesHead !== null ||
	                this._removalsHead !== null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    KeyValueChanges.prototype.forEachItem = function (fn) {
	        var record;
	        for (record = this._mapHead; record !== null; record = record._next) {
	            fn(record);
	        }
	    };
	    KeyValueChanges.prototype.forEachPreviousItem = function (fn) {
	        var record;
	        for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
	            fn(record);
	        }
	    };
	    KeyValueChanges.prototype.forEachChangedItem = function (fn) {
	        var record;
	        for (record = this._changesHead; record !== null; record = record._nextChanged) {
	            fn(record);
	        }
	    };
	    KeyValueChanges.prototype.forEachAddedItem = function (fn) {
	        var record;
	        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	            fn(record);
	        }
	    };
	    KeyValueChanges.prototype.forEachRemovedItem = function (fn) {
	        var record;
	        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	            fn(record);
	        }
	    };
	    KeyValueChanges.prototype.check = function (map) {
	        var _this = this;
	        this._reset();
	        var records = this._records;
	        var oldSeqRecord = this._mapHead;
	        var lastOldSeqRecord = null;
	        var lastNewSeqRecord = null;
	        var seqChanged = false;
	        this._forEach(map, function (value, key) {
	            var newSeqRecord;
	            if (oldSeqRecord !== null && key === oldSeqRecord.key) {
	                newSeqRecord = oldSeqRecord;
	                if (!lang_1.looseIdentical(value, oldSeqRecord.currentValue)) {
	                    oldSeqRecord.previousValue = oldSeqRecord.currentValue;
	                    oldSeqRecord.currentValue = value;
	                    _this._addToChanges(oldSeqRecord);
	                }
	            }
	            else {
	                seqChanged = true;
	                if (oldSeqRecord !== null) {
	                    oldSeqRecord._next = null;
	                    _this._removeFromSeq(lastOldSeqRecord, oldSeqRecord);
	                    _this._addToRemovals(oldSeqRecord);
	                }
	                if (collection_1.MapWrapper.contains(records, key)) {
	                    newSeqRecord = collection_1.MapWrapper.get(records, key);
	                }
	                else {
	                    newSeqRecord = new KVChangeRecord(key);
	                    collection_1.MapWrapper.set(records, key, newSeqRecord);
	                    newSeqRecord.currentValue = value;
	                    _this._addToAdditions(newSeqRecord);
	                }
	            }
	            if (seqChanged) {
	                if (_this._isInRemovals(newSeqRecord)) {
	                    _this._removeFromRemovals(newSeqRecord);
	                }
	                if (lastNewSeqRecord == null) {
	                    _this._mapHead = newSeqRecord;
	                }
	                else {
	                    lastNewSeqRecord._next = newSeqRecord;
	                }
	            }
	            lastOldSeqRecord = oldSeqRecord;
	            lastNewSeqRecord = newSeqRecord;
	            oldSeqRecord = oldSeqRecord === null ? null : oldSeqRecord._next;
	        });
	        this._truncate(lastOldSeqRecord, oldSeqRecord);
	        return this.isDirty;
	    };
	    KeyValueChanges.prototype._reset = function () {
	        if (this.isDirty) {
	            var record;
	            // Record the state of the mapping
	            for (record = this._previousMapHead = this._mapHead; record !== null; record = record._next) {
	                record._nextPrevious = record._next;
	            }
	            for (record = this._changesHead; record !== null; record = record._nextChanged) {
	                record.previousValue = record.currentValue;
	            }
	            for (record = this._additionsHead; record != null; record = record._nextAdded) {
	                record.previousValue = record.currentValue;
	            }
	            // todo(vicb) once assert is supported
	            // assert(() {
	            //  var r = _changesHead;
	            //  while (r != null) {
	            //    var nextRecord = r._nextChanged;
	            //    r._nextChanged = null;
	            //    r = nextRecord;
	            //  }
	            //
	            //  r = _additionsHead;
	            //  while (r != null) {
	            //    var nextRecord = r._nextAdded;
	            //    r._nextAdded = null;
	            //    r = nextRecord;
	            //  }
	            //
	            //  r = _removalsHead;
	            //  while (r != null) {
	            //    var nextRecord = r._nextRemoved;
	            //    r._nextRemoved = null;
	            //    r = nextRecord;
	            //  }
	            //
	            //  return true;
	            //});
	            this._changesHead = this._changesTail = null;
	            this._additionsHead = this._additionsTail = null;
	            this._removalsHead = this._removalsTail = null;
	        }
	    };
	    KeyValueChanges.prototype._truncate = function (lastRecord, record) {
	        while (record !== null) {
	            if (lastRecord === null) {
	                this._mapHead = null;
	            }
	            else {
	                lastRecord._next = null;
	            }
	            var nextRecord = record._next;
	            // todo(vicb) assert
	            // assert((() {
	            //  record._next = null;
	            //  return true;
	            //}));
	            this._addToRemovals(record);
	            lastRecord = record;
	            record = nextRecord;
	        }
	        for (var rec = this._removalsHead; rec !== null; rec = rec._nextRemoved) {
	            rec.previousValue = rec.currentValue;
	            rec.currentValue = null;
	            collection_1.MapWrapper.delete(this._records, rec.key);
	        }
	    };
	    KeyValueChanges.prototype._isInRemovals = function (record) {
	        return record === this._removalsHead || record._nextRemoved !== null ||
	            record._prevRemoved !== null;
	    };
	    KeyValueChanges.prototype._addToRemovals = function (record) {
	        // todo(vicb) assert
	        // assert(record._next == null);
	        // assert(record._nextAdded == null);
	        // assert(record._nextChanged == null);
	        // assert(record._nextRemoved == null);
	        // assert(record._prevRemoved == null);
	        if (this._removalsHead === null) {
	            this._removalsHead = this._removalsTail = record;
	        }
	        else {
	            this._removalsTail._nextRemoved = record;
	            record._prevRemoved = this._removalsTail;
	            this._removalsTail = record;
	        }
	    };
	    KeyValueChanges.prototype._removeFromSeq = function (prev, record) {
	        var next = record._next;
	        if (prev === null) {
	            this._mapHead = next;
	        }
	        else {
	            prev._next = next;
	        }
	        // todo(vicb) assert
	        // assert((() {
	        //  record._next = null;
	        //  return true;
	        //})());
	    };
	    KeyValueChanges.prototype._removeFromRemovals = function (record) {
	        // todo(vicb) assert
	        // assert(record._next == null);
	        // assert(record._nextAdded == null);
	        // assert(record._nextChanged == null);
	        var prev = record._prevRemoved;
	        var next = record._nextRemoved;
	        if (prev === null) {
	            this._removalsHead = next;
	        }
	        else {
	            prev._nextRemoved = next;
	        }
	        if (next === null) {
	            this._removalsTail = prev;
	        }
	        else {
	            next._prevRemoved = prev;
	        }
	        record._prevRemoved = record._nextRemoved = null;
	    };
	    KeyValueChanges.prototype._addToAdditions = function (record) {
	        // todo(vicb): assert
	        // assert(record._next == null);
	        // assert(record._nextAdded == null);
	        // assert(record._nextChanged == null);
	        // assert(record._nextRemoved == null);
	        // assert(record._prevRemoved == null);
	        if (this._additionsHead === null) {
	            this._additionsHead = this._additionsTail = record;
	        }
	        else {
	            this._additionsTail._nextAdded = record;
	            this._additionsTail = record;
	        }
	    };
	    KeyValueChanges.prototype._addToChanges = function (record) {
	        // todo(vicb) assert
	        // assert(record._nextAdded == null);
	        // assert(record._nextChanged == null);
	        // assert(record._nextRemoved == null);
	        // assert(record._prevRemoved == null);
	        if (this._changesHead === null) {
	            this._changesHead = this._changesTail = record;
	        }
	        else {
	            this._changesTail._nextChanged = record;
	            this._changesTail = record;
	        }
	    };
	    KeyValueChanges.prototype.toString = function () {
	        var items = [];
	        var previous = [];
	        var changes = [];
	        var additions = [];
	        var removals = [];
	        var record;
	        for (record = this._mapHead; record !== null; record = record._next) {
	            collection_1.ListWrapper.push(items, lang_1.stringify(record));
	        }
	        for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
	            collection_1.ListWrapper.push(previous, lang_1.stringify(record));
	        }
	        for (record = this._changesHead; record !== null; record = record._nextChanged) {
	            collection_1.ListWrapper.push(changes, lang_1.stringify(record));
	        }
	        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	            collection_1.ListWrapper.push(additions, lang_1.stringify(record));
	        }
	        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	            collection_1.ListWrapper.push(removals, lang_1.stringify(record));
	        }
	        return "map: " + items.join(', ') + "\n" + "previous: " + previous.join(', ') + "\n" +
	            "additions: " + additions.join(', ') + "\n" + "changes: " + changes.join(', ') + "\n" +
	            "removals: " + removals.join(', ') + "\n";
	    };
	    KeyValueChanges.prototype._forEach = function (obj, fn) {
	        if (obj instanceof Map) {
	            collection_1.MapWrapper.forEach(obj, fn);
	        }
	        else {
	            collection_1.StringMapWrapper.forEach(obj, fn);
	        }
	    };
	    return KeyValueChanges;
	})(pipe_1.Pipe);
	exports.KeyValueChanges = KeyValueChanges;
	/**
	 * @exportedAs angular2/pipes
	 */
	var KVChangeRecord = (function () {
	    function KVChangeRecord(key) {
	        this.key = key;
	        this.previousValue = null;
	        this.currentValue = null;
	        this._nextPrevious = null;
	        this._next = null;
	        this._nextAdded = null;
	        this._nextRemoved = null;
	        this._prevRemoved = null;
	        this._nextChanged = null;
	    }
	    KVChangeRecord.prototype.toString = function () {
	        return lang_1.looseIdentical(this.previousValue, this.currentValue) ?
	            lang_1.stringify(this.key) :
	            (lang_1.stringify(this.key) + '[' + lang_1.stringify(this.previousValue) + '->' +
	                lang_1.stringify(this.currentValue) + ']');
	    };
	    return KVChangeRecord;
	})();
	exports.KVChangeRecord = KVChangeRecord;
	exports.__esModule = true;
	//# sourceMappingURL=keyvalue_changes.js.map

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var async_1 = __webpack_require__(94);
	var lang_1 = __webpack_require__(60);
	var pipe_1 = __webpack_require__(79);
	/**
	 * Implements async bindings to Observable.
	 *
	 * # Example
	 *
	 * In this example we bind the description observable to the DOM. The async pipe will convert an
	 *observable to the
	 * latest value it emitted. It will also request a change detection check when a new value is
	 *emitted.
	 *
	 *  ```
	 * @Component({
	 *   selector: "task-cmp",
	 *   changeDetection: ON_PUSH
	 * })
	 * @View({
	 *   template: "Task Description {{ description | async }}"
	 * })
	 * class Task {
	 *  description:Observable<string>;
	 * }
	 *
	 * ```
	 *
	 * @exportedAs angular2/pipes
	 */
	var ObservablePipe = (function (_super) {
	    __extends(ObservablePipe, _super);
	    function ObservablePipe(ref) {
	        _super.call(this);
	        this._ref = ref;
	        this._latestValue = null;
	        this._latestReturnedValue = null;
	        this._subscription = null;
	        this._observable = null;
	    }
	    ObservablePipe.prototype.supports = function (obs) { return async_1.ObservableWrapper.isObservable(obs); };
	    ObservablePipe.prototype.onDestroy = function () {
	        if (lang_1.isPresent(this._subscription)) {
	            this._dispose();
	        }
	    };
	    ObservablePipe.prototype.transform = function (obs) {
	        if (lang_1.isBlank(this._subscription)) {
	            this._subscribe(obs);
	            return null;
	        }
	        if (obs !== this._observable) {
	            this._dispose();
	            return this.transform(obs);
	        }
	        if (this._latestValue === this._latestReturnedValue) {
	            return this._latestReturnedValue;
	        }
	        else {
	            this._latestReturnedValue = this._latestValue;
	            return pipe_1.WrappedValue.wrap(this._latestValue);
	        }
	    };
	    ObservablePipe.prototype._subscribe = function (obs) {
	        var _this = this;
	        this._observable = obs;
	        this._subscription = async_1.ObservableWrapper.subscribe(obs, function (value) { _this._updateLatestValue(value); }, function (e) { throw e; });
	    };
	    ObservablePipe.prototype._dispose = function () {
	        async_1.ObservableWrapper.dispose(this._subscription);
	        this._latestValue = null;
	        this._latestReturnedValue = null;
	        this._subscription = null;
	        this._observable = null;
	    };
	    ObservablePipe.prototype._updateLatestValue = function (value) {
	        this._latestValue = value;
	        this._ref.requestCheck();
	    };
	    return ObservablePipe;
	})(pipe_1.Pipe);
	exports.ObservablePipe = ObservablePipe;
	/**
	 * Provides a factory for [ObervablePipe].
	 *
	 * @exportedAs angular2/pipes
	 */
	var ObservablePipeFactory = (function (_super) {
	    __extends(ObservablePipeFactory, _super);
	    function ObservablePipeFactory() {
	        _super.call(this);
	    }
	    ObservablePipeFactory.prototype.supports = function (obs) { return async_1.ObservableWrapper.isObservable(obs); };
	    ObservablePipeFactory.prototype.create = function (cdRef) { return new ObservablePipe(cdRef); };
	    ObservablePipeFactory = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], ObservablePipeFactory);
	    return ObservablePipeFactory;
	})(pipe_1.PipeFactory);
	exports.ObservablePipeFactory = ObservablePipeFactory;
	exports.__esModule = true;
	//# sourceMappingURL=observable_pipe.js.map

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../../typings/es6-promise/es6-promise.d.ts" />
	/// <reference path="../../typings/rx/rx.all.d.ts" />
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var lang_1 = __webpack_require__(60);
	var Rx = __webpack_require__(95);
	exports.Promise = lang_1.global.Promise;
	var PromiseWrapper = (function () {
	    function PromiseWrapper() {
	    }
	    PromiseWrapper.resolve = function (obj) { return exports.Promise.resolve(obj); };
	    PromiseWrapper.reject = function (obj, _) { return exports.Promise.reject(obj); };
	    // Note: We can't rename this method into `catch`, as this is not a valid
	    // method name in Dart.
	    PromiseWrapper.catchError = function (promise, onError) {
	        return promise.catch(onError);
	    };
	    PromiseWrapper.all = function (promises) {
	        if (promises.length == 0)
	            return exports.Promise.resolve([]);
	        return exports.Promise.all(promises);
	    };
	    PromiseWrapper.then = function (promise, success, rejection) {
	        return promise.then(success, rejection);
	    };
	    PromiseWrapper.completer = function () {
	        var resolve;
	        var reject;
	        var p = new exports.Promise(function (res, rej) {
	            resolve = res;
	            reject = rej;
	        });
	        return { promise: p, resolve: resolve, reject: reject };
	    };
	    PromiseWrapper.isPromise = function (maybePromise) { return maybePromise instanceof exports.Promise; };
	    return PromiseWrapper;
	})();
	exports.PromiseWrapper = PromiseWrapper;
	var TimerWrapper = (function () {
	    function TimerWrapper() {
	    }
	    TimerWrapper.setTimeout = function (fn, millis) { return lang_1.global.setTimeout(fn, millis); };
	    TimerWrapper.clearTimeout = function (id) { lang_1.global.clearTimeout(id); };
	    TimerWrapper.setInterval = function (fn, millis) { return lang_1.global.setInterval(fn, millis); };
	    TimerWrapper.clearInterval = function (id) { lang_1.global.clearInterval(id); };
	    return TimerWrapper;
	})();
	exports.TimerWrapper = TimerWrapper;
	var ObservableWrapper = (function () {
	    function ObservableWrapper() {
	    }
	    ObservableWrapper.subscribe = function (emitter, onNext, onThrow, onReturn) {
	        if (onThrow === void 0) { onThrow = null; }
	        if (onReturn === void 0) { onReturn = null; }
	        return emitter.observer({ next: onNext, throw: onThrow, return: onReturn });
	    };
	    ObservableWrapper.isObservable = function (obs) { return obs instanceof Observable; };
	    ObservableWrapper.dispose = function (subscription) { subscription.dispose(); };
	    ObservableWrapper.callNext = function (emitter, value) { emitter.next(value); };
	    ObservableWrapper.callThrow = function (emitter, error) { emitter.throw(error); };
	    ObservableWrapper.callReturn = function (emitter) { emitter.return(null); };
	    return ObservableWrapper;
	})();
	exports.ObservableWrapper = ObservableWrapper;
	// TODO: vsavkin change to interface
	var Observable = (function () {
	    function Observable() {
	    }
	    Observable.prototype.observer = function (generator) { return null; };
	    return Observable;
	})();
	exports.Observable = Observable;
	/**
	 * Use Rx.Observable but provides an adapter to make it work as specified here:
	 * https://github.com/jhusain/observable-spec
	 *
	 * Once a reference implementation of the spec is available, switch to it.
	 */
	var EventEmitter = (function (_super) {
	    __extends(EventEmitter, _super);
	    function EventEmitter() {
	        _super.call(this);
	        // System creates a different object for import * than Typescript es5 emit.
	        if (Rx.hasOwnProperty('default')) {
	            this._subject = new Rx.default.Rx.Subject();
	            this._immediateScheduler = Rx.default.Rx.Scheduler.immediate;
	        }
	        else {
	            this._subject = new Rx.Subject();
	            this._immediateScheduler = Rx.Scheduler.immediate;
	        }
	    }
	    EventEmitter.prototype.observer = function (generator) {
	        return this._subject.observeOn(this._immediateScheduler)
	            .subscribe(function (value) { setTimeout(function () { return generator.next(value); }); }, function (error) { return generator.throw ? generator.throw(error) : null; }, function () { return generator.return ? generator.return() : null; });
	    };
	    EventEmitter.prototype.toRx = function () { return this._subject; };
	    EventEmitter.prototype.next = function (value) { this._subject.onNext(value); };
	    EventEmitter.prototype.throw = function (error) { this._subject.onError(error); };
	    EventEmitter.prototype.return = function (value) { this._subject.onCompleted(); };
	    return EventEmitter;
	})(Observable);
	exports.EventEmitter = EventEmitter;
	exports.__esModule = true;
	//# sourceMappingURL=async.js.map

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global, process) {// Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.txt in the project root for license information.

	;(function (undefined) {

	  var objectTypes = {
	    'boolean': false,
	    'function': true,
	    'object': true,
	    'number': false,
	    'string': false,
	    'undefined': false
	  };

	  var root = (objectTypes[typeof window] && window) || this,
	    freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports,
	    freeModule = objectTypes[typeof module] && module && !module.nodeType && module,
	    moduleExports = freeModule && freeModule.exports === freeExports && freeExports,
	    freeGlobal = objectTypes[typeof global] && global;

	  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
	    root = freeGlobal;
	  }

	  var Rx = {
	      internals: {},
	      config: {
	        Promise: root.Promise
	      },
	      helpers: { }
	  };

	  // Defaults
	  var noop = Rx.helpers.noop = function () { },
	    notDefined = Rx.helpers.notDefined = function (x) { return typeof x === 'undefined'; },
	    isScheduler = Rx.helpers.isScheduler = function (x) { return x instanceof Rx.Scheduler; },
	    identity = Rx.helpers.identity = function (x) { return x; },
	    pluck = Rx.helpers.pluck = function (property) { return function (x) { return x[property]; }; },
	    just = Rx.helpers.just = function (value) { return function () { return value; }; },
	    defaultNow = Rx.helpers.defaultNow = Date.now,
	    defaultComparer = Rx.helpers.defaultComparer = function (x, y) { return isEqual(x, y); },
	    defaultSubComparer = Rx.helpers.defaultSubComparer = function (x, y) { return x > y ? 1 : (x < y ? -1 : 0); },
	    defaultKeySerializer = Rx.helpers.defaultKeySerializer = function (x) { return x.toString(); },
	    defaultError = Rx.helpers.defaultError = function (err) { throw err; },
	    isPromise = Rx.helpers.isPromise = function (p) { return !!p && typeof p.then === 'function'; },
	    asArray = Rx.helpers.asArray = function () { return Array.prototype.slice.call(arguments); },
	    not = Rx.helpers.not = function (a) { return !a; },
	    isFunction = Rx.helpers.isFunction = (function () {

	      var isFn = function (value) {
	        return typeof value == 'function' || false;
	      }

	      // fallback for older versions of Chrome and Safari
	      if (isFn(/x/)) {
	        isFn = function(value) {
	          return typeof value == 'function' && toString.call(value) == '[object Function]';
	        };
	      }

	      return isFn;
	    }());

	  function cloneArray(arr) { for(var a = [], i = 0, len = arr.length; i < len; i++) { a.push(arr[i]); } return a;}

	  Rx.config.longStackSupport = false;
	  var hasStacks = false;
	  try {
	    throw new Error();
	  } catch (e) {
	    hasStacks = !!e.stack;
	  }

	  // All code after this point will be filtered from stack traces reported by RxJS
	  var rStartingLine = captureLine(), rFileName;

	  var STACK_JUMP_SEPARATOR = "From previous event:";

	  function makeStackTraceLong(error, observable) {
	      // If possible, transform the error stack trace by removing Node and RxJS
	      // cruft, then concatenating with the stack trace of `observable`.
	      if (hasStacks &&
	          observable.stack &&
	          typeof error === "object" &&
	          error !== null &&
	          error.stack &&
	          error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1
	      ) {
	        var stacks = [];
	        for (var o = observable; !!o; o = o.source) {
	          if (o.stack) {
	            stacks.unshift(o.stack);
	          }
	        }
	        stacks.unshift(error.stack);

	        var concatedStacks = stacks.join("\n" + STACK_JUMP_SEPARATOR + "\n");
	        error.stack = filterStackString(concatedStacks);
	    }
	  }

	  function filterStackString(stackString) {
	    var lines = stackString.split("\n"),
	        desiredLines = [];
	    for (var i = 0, len = lines.length; i < len; i++) {
	      var line = lines[i];

	      if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
	        desiredLines.push(line);
	      }
	    }
	    return desiredLines.join("\n");
	  }

	  function isInternalFrame(stackLine) {
	    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);
	    if (!fileNameAndLineNumber) {
	      return false;
	    }
	    var fileName = fileNameAndLineNumber[0], lineNumber = fileNameAndLineNumber[1];

	    return fileName === rFileName &&
	      lineNumber >= rStartingLine &&
	      lineNumber <= rEndingLine;
	  }

	  function isNodeFrame(stackLine) {
	    return stackLine.indexOf("(module.js:") !== -1 ||
	      stackLine.indexOf("(node.js:") !== -1;
	  }

	  function captureLine() {
	    if (!hasStacks) { return; }

	    try {
	      throw new Error();
	    } catch (e) {
	      var lines = e.stack.split("\n");
	      var firstLine = lines[0].indexOf("@") > 0 ? lines[1] : lines[2];
	      var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);
	      if (!fileNameAndLineNumber) { return; }

	      rFileName = fileNameAndLineNumber[0];
	      return fileNameAndLineNumber[1];
	    }
	  }

	  function getFileNameAndLineNumber(stackLine) {
	    // Named functions: "at functionName (filename:lineNumber:columnNumber)"
	    var attempt1 = /at .+ \((.+):(\d+):(?:\d+)\)$/.exec(stackLine);
	    if (attempt1) { return [attempt1[1], Number(attempt1[2])]; }

	    // Anonymous functions: "at filename:lineNumber:columnNumber"
	    var attempt2 = /at ([^ ]+):(\d+):(?:\d+)$/.exec(stackLine);
	    if (attempt2) { return [attempt2[1], Number(attempt2[2])]; }

	    // Firefox style: "function@filename:lineNumber or @filename:lineNumber"
	    var attempt3 = /.*@(.+):(\d+)$/.exec(stackLine);
	    if (attempt3) { return [attempt3[1], Number(attempt3[2])]; }
	  }

	  var EmptyError = Rx.EmptyError = function() {
	    this.message = 'Sequence contains no elements.';
	    Error.call(this);
	  };
	  EmptyError.prototype = Error.prototype;

	  var ObjectDisposedError = Rx.ObjectDisposedError = function() {
	    this.message = 'Object has been disposed';
	    Error.call(this);
	  };
	  ObjectDisposedError.prototype = Error.prototype;

	  var ArgumentOutOfRangeError = Rx.ArgumentOutOfRangeError = function () {
	    this.message = 'Argument out of range';
	    Error.call(this);
	  };
	  ArgumentOutOfRangeError.prototype = Error.prototype;

	  var NotSupportedError = Rx.NotSupportedError = function (message) {
	    this.message = message || 'This operation is not supported';
	    Error.call(this);
	  };
	  NotSupportedError.prototype = Error.prototype;

	  var NotImplementedError = Rx.NotImplementedError = function (message) {
	    this.message = message || 'This operation is not implemented';
	    Error.call(this);
	  };
	  NotImplementedError.prototype = Error.prototype;

	  var notImplemented = Rx.helpers.notImplemented = function () {
	    throw new NotImplementedError();
	  };

	  var notSupported = Rx.helpers.notSupported = function () {
	    throw new NotSupportedError();
	  };

	  // Shim in iterator support
	  var $iterator$ = (typeof Symbol === 'function' && Symbol.iterator) ||
	    '_es6shim_iterator_';
	  // Bug for mozilla version
	  if (root.Set && typeof new root.Set()['@@iterator'] === 'function') {
	    $iterator$ = '@@iterator';
	  }

	  var doneEnumerator = Rx.doneEnumerator = { done: true, value: undefined };

	  var isIterable = Rx.helpers.isIterable = function (o) {
	    return o[$iterator$] !== undefined;
	  }

	  var isArrayLike = Rx.helpers.isArrayLike = function (o) {
	    return o && o.length !== undefined;
	  }

	  Rx.helpers.iterator = $iterator$;

	  var bindCallback = Rx.internals.bindCallback = function (func, thisArg, argCount) {
	    if (typeof thisArg === 'undefined') { return func; }
	    switch(argCount) {
	      case 0:
	        return function() {
	          return func.call(thisArg)
	        };
	      case 1:
	        return function(arg) {
	          return func.call(thisArg, arg);
	        }
	      case 2:
	        return function(value, index) {
	          return func.call(thisArg, value, index);
	        };
	      case 3:
	        return function(value, index, collection) {
	          return func.call(thisArg, value, index, collection);
	        };
	    }

	    return function() {
	      return func.apply(thisArg, arguments);
	    };
	  };

	  /** Used to determine if values are of the language type Object */
	  var dontEnums = ['toString',
	    'toLocaleString',
	    'valueOf',
	    'hasOwnProperty',
	    'isPrototypeOf',
	    'propertyIsEnumerable',
	    'constructor'],
	  dontEnumsLength = dontEnums.length;

	  /** `Object#toString` result shortcuts */
	  var argsClass = '[object Arguments]',
	    arrayClass = '[object Array]',
	    boolClass = '[object Boolean]',
	    dateClass = '[object Date]',
	    errorClass = '[object Error]',
	    funcClass = '[object Function]',
	    numberClass = '[object Number]',
	    objectClass = '[object Object]',
	    regexpClass = '[object RegExp]',
	    stringClass = '[object String]';

	  var toString = Object.prototype.toString,
	    hasOwnProperty = Object.prototype.hasOwnProperty,
	    supportsArgsClass = toString.call(arguments) == argsClass, // For less <IE9 && FF<4
	    supportNodeClass,
	    errorProto = Error.prototype,
	    objectProto = Object.prototype,
	    stringProto = String.prototype,
	    propertyIsEnumerable = objectProto.propertyIsEnumerable;

	  try {
	    supportNodeClass = !(toString.call(document) == objectClass && !({ 'toString': 0 } + ''));
	  } catch (e) {
	    supportNodeClass = true;
	  }

	  var nonEnumProps = {};
	  nonEnumProps[arrayClass] = nonEnumProps[dateClass] = nonEnumProps[numberClass] = { 'constructor': true, 'toLocaleString': true, 'toString': true, 'valueOf': true };
	  nonEnumProps[boolClass] = nonEnumProps[stringClass] = { 'constructor': true, 'toString': true, 'valueOf': true };
	  nonEnumProps[errorClass] = nonEnumProps[funcClass] = nonEnumProps[regexpClass] = { 'constructor': true, 'toString': true };
	  nonEnumProps[objectClass] = { 'constructor': true };

	  var support = {};
	  (function () {
	    var ctor = function() { this.x = 1; },
	      props = [];

	    ctor.prototype = { 'valueOf': 1, 'y': 1 };
	    for (var key in new ctor) { props.push(key); }
	    for (key in arguments) { }

	    // Detect if `name` or `message` properties of `Error.prototype` are enumerable by default.
	    support.enumErrorProps = propertyIsEnumerable.call(errorProto, 'message') || propertyIsEnumerable.call(errorProto, 'name');

	    // Detect if `prototype` properties are enumerable by default.
	    support.enumPrototypes = propertyIsEnumerable.call(ctor, 'prototype');

	    // Detect if `arguments` object indexes are non-enumerable
	    support.nonEnumArgs = key != 0;

	    // Detect if properties shadowing those on `Object.prototype` are non-enumerable.
	    support.nonEnumShadows = !/valueOf/.test(props);
	  }(1));

	  var isObject = Rx.internals.isObject = function(value) {
	    var type = typeof value;
	    return value && (type == 'function' || type == 'object') || false;
	  };

	  function keysIn(object) {
	    var result = [];
	    if (!isObject(object)) {
	      return result;
	    }
	    if (support.nonEnumArgs && object.length && isArguments(object)) {
	      object = slice.call(object);
	    }
	    var skipProto = support.enumPrototypes && typeof object == 'function',
	        skipErrorProps = support.enumErrorProps && (object === errorProto || object instanceof Error);

	    for (var key in object) {
	      if (!(skipProto && key == 'prototype') &&
	          !(skipErrorProps && (key == 'message' || key == 'name'))) {
	        result.push(key);
	      }
	    }

	    if (support.nonEnumShadows && object !== objectProto) {
	      var ctor = object.constructor,
	          index = -1,
	          length = dontEnumsLength;

	      if (object === (ctor && ctor.prototype)) {
	        var className = object === stringProto ? stringClass : object === errorProto ? errorClass : toString.call(object),
	            nonEnum = nonEnumProps[className];
	      }
	      while (++index < length) {
	        key = dontEnums[index];
	        if (!(nonEnum && nonEnum[key]) && hasOwnProperty.call(object, key)) {
	          result.push(key);
	        }
	      }
	    }
	    return result;
	  }

	  function internalFor(object, callback, keysFunc) {
	    var index = -1,
	      props = keysFunc(object),
	      length = props.length;

	    while (++index < length) {
	      var key = props[index];
	      if (callback(object[key], key, object) === false) {
	        break;
	      }
	    }
	    return object;
	  }

	  function internalForIn(object, callback) {
	    return internalFor(object, callback, keysIn);
	  }

	  function isNode(value) {
	    // IE < 9 presents DOM nodes as `Object` objects except they have `toString`
	    // methods that are `typeof` "string" and still can coerce nodes to strings
	    return typeof value.toString != 'function' && typeof (value + '') == 'string';
	  }

	  var isArguments = function(value) {
	    return (value && typeof value == 'object') ? toString.call(value) == argsClass : false;
	  }

	  // fallback for browsers that can't detect `arguments` objects by [[Class]]
	  if (!supportsArgsClass) {
	    isArguments = function(value) {
	      return (value && typeof value == 'object') ? hasOwnProperty.call(value, 'callee') : false;
	    };
	  }

	  var isEqual = Rx.internals.isEqual = function (x, y) {
	    return deepEquals(x, y, [], []);
	  };

	  /** @private
	   * Used for deep comparison
	   **/
	  function deepEquals(a, b, stackA, stackB) {
	    // exit early for identical values
	    if (a === b) {
	      // treat `+0` vs. `-0` as not equal
	      return a !== 0 || (1 / a == 1 / b);
	    }

	    var type = typeof a,
	        otherType = typeof b;

	    // exit early for unlike primitive values
	    if (a === a && (a == null || b == null ||
	        (type != 'function' && type != 'object' && otherType != 'function' && otherType != 'object'))) {
	      return false;
	    }

	    // compare [[Class]] names
	    var className = toString.call(a),
	        otherClass = toString.call(b);

	    if (className == argsClass) {
	      className = objectClass;
	    }
	    if (otherClass == argsClass) {
	      otherClass = objectClass;
	    }
	    if (className != otherClass) {
	      return false;
	    }
	    switch (className) {
	      case boolClass:
	      case dateClass:
	        // coerce dates and booleans to numbers, dates to milliseconds and booleans
	        // to `1` or `0` treating invalid dates coerced to `NaN` as not equal
	        return +a == +b;

	      case numberClass:
	        // treat `NaN` vs. `NaN` as equal
	        return (a != +a) ?
	          b != +b :
	          // but treat `-0` vs. `+0` as not equal
	          (a == 0 ? (1 / a == 1 / b) : a == +b);

	      case regexpClass:
	      case stringClass:
	        // coerce regexes to strings (http://es5.github.io/#x15.10.6.4)
	        // treat string primitives and their corresponding object instances as equal
	        return a == String(b);
	    }
	    var isArr = className == arrayClass;
	    if (!isArr) {

	      // exit for functions and DOM nodes
	      if (className != objectClass || (!support.nodeClass && (isNode(a) || isNode(b)))) {
	        return false;
	      }
	      // in older versions of Opera, `arguments` objects have `Array` constructors
	      var ctorA = !support.argsObject && isArguments(a) ? Object : a.constructor,
	          ctorB = !support.argsObject && isArguments(b) ? Object : b.constructor;

	      // non `Object` object instances with different constructors are not equal
	      if (ctorA != ctorB &&
	            !(hasOwnProperty.call(a, 'constructor') && hasOwnProperty.call(b, 'constructor')) &&
	            !(isFunction(ctorA) && ctorA instanceof ctorA && isFunction(ctorB) && ctorB instanceof ctorB) &&
	            ('constructor' in a && 'constructor' in b)
	          ) {
	        return false;
	      }
	    }
	    // assume cyclic structures are equal
	    // the algorithm for detecting cyclic structures is adapted from ES 5.1
	    // section 15.12.3, abstract operation `JO` (http://es5.github.io/#x15.12.3)
	    var initedStack = !stackA;
	    stackA || (stackA = []);
	    stackB || (stackB = []);

	    var length = stackA.length;
	    while (length--) {
	      if (stackA[length] == a) {
	        return stackB[length] == b;
	      }
	    }
	    var size = 0;
	    var result = true;

	    // add `a` and `b` to the stack of traversed objects
	    stackA.push(a);
	    stackB.push(b);

	    // recursively compare objects and arrays (susceptible to call stack limits)
	    if (isArr) {
	      // compare lengths to determine if a deep comparison is necessary
	      length = a.length;
	      size = b.length;
	      result = size == length;

	      if (result) {
	        // deep compare the contents, ignoring non-numeric properties
	        while (size--) {
	          var index = length,
	              value = b[size];

	          if (!(result = deepEquals(a[size], value, stackA, stackB))) {
	            break;
	          }
	        }
	      }
	    }
	    else {
	      // deep compare objects using `forIn`, instead of `forOwn`, to avoid `Object.keys`
	      // which, in this case, is more costly
	      internalForIn(b, function(value, key, b) {
	        if (hasOwnProperty.call(b, key)) {
	          // count the number of properties.
	          size++;
	          // deep compare each property value.
	          return (result = hasOwnProperty.call(a, key) && deepEquals(a[key], value, stackA, stackB));
	        }
	      });

	      if (result) {
	        // ensure both objects have the same number of properties
	        internalForIn(a, function(value, key, a) {
	          if (hasOwnProperty.call(a, key)) {
	            // `size` will be `-1` if `a` has more properties than `b`
	            return (result = --size > -1);
	          }
	        });
	      }
	    }
	    stackA.pop();
	    stackB.pop();

	    return result;
	  }

	  var hasProp = {}.hasOwnProperty,
	      slice = Array.prototype.slice;

	  var inherits = this.inherits = Rx.internals.inherits = function (child, parent) {
	    function __() { this.constructor = child; }
	    __.prototype = parent.prototype;
	    child.prototype = new __();
	  };

	  var addProperties = Rx.internals.addProperties = function (obj) {
	    for(var sources = [], i = 1, len = arguments.length; i < len; i++) { sources.push(arguments[i]); }
	    for (var idx = 0, ln = sources.length; idx < ln; idx++) {
	      var source = sources[idx];
	      for (var prop in source) {
	        obj[prop] = source[prop];
	      }
	    }
	  };

	  // Rx Utils
	  var addRef = Rx.internals.addRef = function (xs, r) {
	    return new AnonymousObservable(function (observer) {
	      return new CompositeDisposable(r.getDisposable(), xs.subscribe(observer));
	    });
	  };

	  function arrayInitialize(count, factory) {
	    var a = new Array(count);
	    for (var i = 0; i < count; i++) {
	      a[i] = factory();
	    }
	    return a;
	  }

	  var errorObj = {e: {}};
	  var tryCatchTarget;
	  function tryCatcher() {
	    try {
	      return tryCatchTarget.apply(this, arguments);
	    } catch (e) {
	      errorObj.e = e;
	      return errorObj;
	    }
	  }
	  function tryCatch(fn) {
	    if (!isFunction(fn)) { throw new TypeError('fn must be a function'); }
	    tryCatchTarget = fn;
	    return tryCatcher;
	  }
	  function thrower(e) {
	    throw e;
	  }

	  // Collections
	  function IndexedItem(id, value) {
	    this.id = id;
	    this.value = value;
	  }

	  IndexedItem.prototype.compareTo = function (other) {
	    var c = this.value.compareTo(other.value);
	    c === 0 && (c = this.id - other.id);
	    return c;
	  };

	  // Priority Queue for Scheduling
	  var PriorityQueue = Rx.internals.PriorityQueue = function (capacity) {
	    this.items = new Array(capacity);
	    this.length = 0;
	  };

	  var priorityProto = PriorityQueue.prototype;
	  priorityProto.isHigherPriority = function (left, right) {
	    return this.items[left].compareTo(this.items[right]) < 0;
	  };

	  priorityProto.percolate = function (index) {
	    if (index >= this.length || index < 0) { return; }
	    var parent = index - 1 >> 1;
	    if (parent < 0 || parent === index) { return; }
	    if (this.isHigherPriority(index, parent)) {
	      var temp = this.items[index];
	      this.items[index] = this.items[parent];
	      this.items[parent] = temp;
	      this.percolate(parent);
	    }
	  };

	  priorityProto.heapify = function (index) {
	    +index || (index = 0);
	    if (index >= this.length || index < 0) { return; }
	    var left = 2 * index + 1,
	        right = 2 * index + 2,
	        first = index;
	    if (left < this.length && this.isHigherPriority(left, first)) {
	      first = left;
	    }
	    if (right < this.length && this.isHigherPriority(right, first)) {
	      first = right;
	    }
	    if (first !== index) {
	      var temp = this.items[index];
	      this.items[index] = this.items[first];
	      this.items[first] = temp;
	      this.heapify(first);
	    }
	  };

	  priorityProto.peek = function () { return this.items[0].value; };

	  priorityProto.removeAt = function (index) {
	    this.items[index] = this.items[--this.length];
	    this.items[this.length] = undefined;
	    this.heapify();
	  };

	  priorityProto.dequeue = function () {
	    var result = this.peek();
	    this.removeAt(0);
	    return result;
	  };

	  priorityProto.enqueue = function (item) {
	    var index = this.length++;
	    this.items[index] = new IndexedItem(PriorityQueue.count++, item);
	    this.percolate(index);
	  };

	  priorityProto.remove = function (item) {
	    for (var i = 0; i < this.length; i++) {
	      if (this.items[i].value === item) {
	        this.removeAt(i);
	        return true;
	      }
	    }
	    return false;
	  };
	  PriorityQueue.count = 0;

	  /**
	   * Represents a group of disposable resources that are disposed together.
	   * @constructor
	   */
	  var CompositeDisposable = Rx.CompositeDisposable = function () {
	    var args = [], i, len;
	    if (Array.isArray(arguments[0])) {
	      args = arguments[0];
	      len = args.length;
	    } else {
	      len = arguments.length;
	      args = new Array(len);
	      for(i = 0; i < len; i++) { args[i] = arguments[i]; }
	    }
	    for(i = 0; i < len; i++) {
	      if (!isDisposable(args[i])) { throw new TypeError('Not a disposable'); }
	    }
	    this.disposables = args;
	    this.isDisposed = false;
	    this.length = args.length;
	  };

	  var CompositeDisposablePrototype = CompositeDisposable.prototype;

	  /**
	   * Adds a disposable to the CompositeDisposable or disposes the disposable if the CompositeDisposable is disposed.
	   * @param {Mixed} item Disposable to add.
	   */
	  CompositeDisposablePrototype.add = function (item) {
	    if (this.isDisposed) {
	      item.dispose();
	    } else {
	      this.disposables.push(item);
	      this.length++;
	    }
	  };

	  /**
	   * Removes and disposes the first occurrence of a disposable from the CompositeDisposable.
	   * @param {Mixed} item Disposable to remove.
	   * @returns {Boolean} true if found; false otherwise.
	   */
	  CompositeDisposablePrototype.remove = function (item) {
	    var shouldDispose = false;
	    if (!this.isDisposed) {
	      var idx = this.disposables.indexOf(item);
	      if (idx !== -1) {
	        shouldDispose = true;
	        this.disposables.splice(idx, 1);
	        this.length--;
	        item.dispose();
	      }
	    }
	    return shouldDispose;
	  };

	  /**
	   *  Disposes all disposables in the group and removes them from the group.
	   */
	  CompositeDisposablePrototype.dispose = function () {
	    if (!this.isDisposed) {
	      this.isDisposed = true;
	      var len = this.disposables.length, currentDisposables = new Array(len);
	      for(var i = 0; i < len; i++) { currentDisposables[i] = this.disposables[i]; }
	      this.disposables = [];
	      this.length = 0;

	      for (i = 0; i < len; i++) {
	        currentDisposables[i].dispose();
	      }
	    }
	  };

	  /**
	   * Provides a set of static methods for creating Disposables.
	   * @param {Function} dispose Action to run during the first call to dispose. The action is guaranteed to be run at most once.
	   */
	  var Disposable = Rx.Disposable = function (action) {
	    this.isDisposed = false;
	    this.action = action || noop;
	  };

	  /** Performs the task of cleaning up resources. */
	  Disposable.prototype.dispose = function () {
	    if (!this.isDisposed) {
	      this.action();
	      this.isDisposed = true;
	    }
	  };

	  /**
	   * Creates a disposable object that invokes the specified action when disposed.
	   * @param {Function} dispose Action to run during the first call to dispose. The action is guaranteed to be run at most once.
	   * @return {Disposable} The disposable object that runs the given action upon disposal.
	   */
	  var disposableCreate = Disposable.create = function (action) { return new Disposable(action); };

	  /**
	   * Gets the disposable that does nothing when disposed.
	   */
	  var disposableEmpty = Disposable.empty = { dispose: noop };

	  /**
	   * Validates whether the given object is a disposable
	   * @param {Object} Object to test whether it has a dispose method
	   * @returns {Boolean} true if a disposable object, else false.
	   */
	  var isDisposable = Disposable.isDisposable = function (d) {
	    return d && isFunction(d.dispose);
	  };

	  var checkDisposed = Disposable.checkDisposed = function (disposable) {
	    if (disposable.isDisposed) { throw new ObjectDisposedError(); }
	  };

	  var SingleAssignmentDisposable = Rx.SingleAssignmentDisposable = (function () {
	    function BooleanDisposable () {
	      this.isDisposed = false;
	      this.current = null;
	    }

	    var booleanDisposablePrototype = BooleanDisposable.prototype;

	    /**
	     * Gets the underlying disposable.
	     * @return The underlying disposable.
	     */
	    booleanDisposablePrototype.getDisposable = function () {
	      return this.current;
	    };

	    /**
	     * Sets the underlying disposable.
	     * @param {Disposable} value The new underlying disposable.
	     */
	    booleanDisposablePrototype.setDisposable = function (value) {
	      var shouldDispose = this.isDisposed;
	      if (!shouldDispose) {
	        var old = this.current;
	        this.current = value;
	      }
	      old && old.dispose();
	      shouldDispose && value && value.dispose();
	    };

	    /**
	     * Disposes the underlying disposable as well as all future replacements.
	     */
	    booleanDisposablePrototype.dispose = function () {
	      if (!this.isDisposed) {
	        this.isDisposed = true;
	        var old = this.current;
	        this.current = null;
	      }
	      old && old.dispose();
	    };

	    return BooleanDisposable;
	  }());
	  var SerialDisposable = Rx.SerialDisposable = SingleAssignmentDisposable;

	  /**
	   * Represents a disposable resource that only disposes its underlying disposable resource when all dependent disposable objects have been disposed.
	   */
	  var RefCountDisposable = Rx.RefCountDisposable = (function () {

	    function InnerDisposable(disposable) {
	      this.disposable = disposable;
	      this.disposable.count++;
	      this.isInnerDisposed = false;
	    }

	    InnerDisposable.prototype.dispose = function () {
	      if (!this.disposable.isDisposed && !this.isInnerDisposed) {
	        this.isInnerDisposed = true;
	        this.disposable.count--;
	        if (this.disposable.count === 0 && this.disposable.isPrimaryDisposed) {
	          this.disposable.isDisposed = true;
	          this.disposable.underlyingDisposable.dispose();
	        }
	      }
	    };

	    /**
	     * Initializes a new instance of the RefCountDisposable with the specified disposable.
	     * @constructor
	     * @param {Disposable} disposable Underlying disposable.
	      */
	    function RefCountDisposable(disposable) {
	      this.underlyingDisposable = disposable;
	      this.isDisposed = false;
	      this.isPrimaryDisposed = false;
	      this.count = 0;
	    }

	    /**
	     * Disposes the underlying disposable only when all dependent disposables have been disposed
	     */
	    RefCountDisposable.prototype.dispose = function () {
	      if (!this.isDisposed && !this.isPrimaryDisposed) {
	        this.isPrimaryDisposed = true;
	        if (this.count === 0) {
	          this.isDisposed = true;
	          this.underlyingDisposable.dispose();
	        }
	      }
	    };

	    /**
	     * Returns a dependent disposable that when disposed decreases the refcount on the underlying disposable.
	     * @returns {Disposable} A dependent disposable contributing to the reference count that manages the underlying disposable's lifetime.
	     */
	    RefCountDisposable.prototype.getDisposable = function () {
	      return this.isDisposed ? disposableEmpty : new InnerDisposable(this);
	    };

	    return RefCountDisposable;
	  })();

	  function ScheduledDisposable(scheduler, disposable) {
	    this.scheduler = scheduler;
	    this.disposable = disposable;
	    this.isDisposed = false;
	  }

	  function scheduleItem(s, self) {
	    if (!self.isDisposed) {
	      self.isDisposed = true;
	      self.disposable.dispose();
	    }
	  }

	  ScheduledDisposable.prototype.dispose = function () {
	    this.scheduler.scheduleWithState(this, scheduleItem);
	  };

	  var ScheduledItem = Rx.internals.ScheduledItem = function (scheduler, state, action, dueTime, comparer) {
	    this.scheduler = scheduler;
	    this.state = state;
	    this.action = action;
	    this.dueTime = dueTime;
	    this.comparer = comparer || defaultSubComparer;
	    this.disposable = new SingleAssignmentDisposable();
	  }

	  ScheduledItem.prototype.invoke = function () {
	    this.disposable.setDisposable(this.invokeCore());
	  };

	  ScheduledItem.prototype.compareTo = function (other) {
	    return this.comparer(this.dueTime, other.dueTime);
	  };

	  ScheduledItem.prototype.isCancelled = function () {
	    return this.disposable.isDisposed;
	  };

	  ScheduledItem.prototype.invokeCore = function () {
	    return this.action(this.scheduler, this.state);
	  };

	  /** Provides a set of static properties to access commonly used schedulers. */
	  var Scheduler = Rx.Scheduler = (function () {

	    function Scheduler(now, schedule, scheduleRelative, scheduleAbsolute) {
	      this.now = now;
	      this._schedule = schedule;
	      this._scheduleRelative = scheduleRelative;
	      this._scheduleAbsolute = scheduleAbsolute;
	    }

	    function invokeAction(scheduler, action) {
	      action();
	      return disposableEmpty;
	    }

	    var schedulerProto = Scheduler.prototype;

	    /**
	     * Schedules an action to be executed.
	     * @param {Function} action Action to execute.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    schedulerProto.schedule = function (action) {
	      return this._schedule(action, invokeAction);
	    };

	    /**
	     * Schedules an action to be executed.
	     * @param state State passed to the action to be executed.
	     * @param {Function} action Action to be executed.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    schedulerProto.scheduleWithState = function (state, action) {
	      return this._schedule(state, action);
	    };

	    /**
	     * Schedules an action to be executed after the specified relative due time.
	     * @param {Function} action Action to execute.
	     * @param {Number} dueTime Relative time after which to execute the action.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    schedulerProto.scheduleWithRelative = function (dueTime, action) {
	      return this._scheduleRelative(action, dueTime, invokeAction);
	    };

	    /**
	     * Schedules an action to be executed after dueTime.
	     * @param state State passed to the action to be executed.
	     * @param {Function} action Action to be executed.
	     * @param {Number} dueTime Relative time after which to execute the action.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    schedulerProto.scheduleWithRelativeAndState = function (state, dueTime, action) {
	      return this._scheduleRelative(state, dueTime, action);
	    };

	    /**
	     * Schedules an action to be executed at the specified absolute due time.
	     * @param {Function} action Action to execute.
	     * @param {Number} dueTime Absolute time at which to execute the action.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	      */
	    schedulerProto.scheduleWithAbsolute = function (dueTime, action) {
	      return this._scheduleAbsolute(action, dueTime, invokeAction);
	    };

	    /**
	     * Schedules an action to be executed at dueTime.
	     * @param {Mixed} state State passed to the action to be executed.
	     * @param {Function} action Action to be executed.
	     * @param {Number}dueTime Absolute time at which to execute the action.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    schedulerProto.scheduleWithAbsoluteAndState = function (state, dueTime, action) {
	      return this._scheduleAbsolute(state, dueTime, action);
	    };

	    /** Gets the current time according to the local machine's system clock. */
	    Scheduler.now = defaultNow;

	    /**
	     * Normalizes the specified TimeSpan value to a positive value.
	     * @param {Number} timeSpan The time span value to normalize.
	     * @returns {Number} The specified TimeSpan value if it is zero or positive; otherwise, 0
	     */
	    Scheduler.normalize = function (timeSpan) {
	      timeSpan < 0 && (timeSpan = 0);
	      return timeSpan;
	    };

	    return Scheduler;
	  }());

	  var normalizeTime = Scheduler.normalize;

	  (function (schedulerProto) {

	    function invokeRecImmediate(scheduler, pair) {
	      var state = pair[0], action = pair[1], group = new CompositeDisposable();

	      function recursiveAction(state1) {
	        action(state1, function (state2) {
	          var isAdded = false, isDone = false,
	          d = scheduler.scheduleWithState(state2, function (scheduler1, state3) {
	            if (isAdded) {
	              group.remove(d);
	            } else {
	              isDone = true;
	            }
	            recursiveAction(state3);
	            return disposableEmpty;
	          });
	          if (!isDone) {
	            group.add(d);
	            isAdded = true;
	          }
	        });
	      }

	      recursiveAction(state);
	      return group;
	    }

	    function invokeRecDate(scheduler, pair, method) {
	      var state = pair[0], action = pair[1], group = new CompositeDisposable();
	      function recursiveAction(state1) {
	        action(state1, function (state2, dueTime1) {
	          var isAdded = false, isDone = false,
	          d = scheduler[method](state2, dueTime1, function (scheduler1, state3) {
	            if (isAdded) {
	              group.remove(d);
	            } else {
	              isDone = true;
	            }
	            recursiveAction(state3);
	            return disposableEmpty;
	          });
	          if (!isDone) {
	            group.add(d);
	            isAdded = true;
	          }
	        });
	      };
	      recursiveAction(state);
	      return group;
	    }

	    function scheduleInnerRecursive(action, self) {
	      action(function(dt) { self(action, dt); });
	    }

	    /**
	     * Schedules an action to be executed recursively.
	     * @param {Function} action Action to execute recursively. The parameter passed to the action is used to trigger recursive scheduling of the action.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    schedulerProto.scheduleRecursive = function (action) {
	      return this.scheduleRecursiveWithState(action, function (_action, self) {
	        _action(function () { self(_action); }); });
	    };

	    /**
	     * Schedules an action to be executed recursively.
	     * @param {Mixed} state State passed to the action to be executed.
	     * @param {Function} action Action to execute recursively. The last parameter passed to the action is used to trigger recursive scheduling of the action, passing in recursive invocation state.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    schedulerProto.scheduleRecursiveWithState = function (state, action) {
	      return this.scheduleWithState([state, action], invokeRecImmediate);
	    };

	    /**
	     * Schedules an action to be executed recursively after a specified relative due time.
	     * @param {Function} action Action to execute recursively. The parameter passed to the action is used to trigger recursive scheduling of the action at the specified relative time.
	     * @param {Number}dueTime Relative time after which to execute the action for the first time.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    schedulerProto.scheduleRecursiveWithRelative = function (dueTime, action) {
	      return this.scheduleRecursiveWithRelativeAndState(action, dueTime, scheduleInnerRecursive);
	    };

	    /**
	     * Schedules an action to be executed recursively after a specified relative due time.
	     * @param {Mixed} state State passed to the action to be executed.
	     * @param {Function} action Action to execute recursively. The last parameter passed to the action is used to trigger recursive scheduling of the action, passing in the recursive due time and invocation state.
	     * @param {Number}dueTime Relative time after which to execute the action for the first time.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    schedulerProto.scheduleRecursiveWithRelativeAndState = function (state, dueTime, action) {
	      return this._scheduleRelative([state, action], dueTime, function (s, p) {
	        return invokeRecDate(s, p, 'scheduleWithRelativeAndState');
	      });
	    };

	    /**
	     * Schedules an action to be executed recursively at a specified absolute due time.
	     * @param {Function} action Action to execute recursively. The parameter passed to the action is used to trigger recursive scheduling of the action at the specified absolute time.
	     * @param {Number}dueTime Absolute time at which to execute the action for the first time.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    schedulerProto.scheduleRecursiveWithAbsolute = function (dueTime, action) {
	      return this.scheduleRecursiveWithAbsoluteAndState(action, dueTime, scheduleInnerRecursive);
	    };

	    /**
	     * Schedules an action to be executed recursively at a specified absolute due time.
	     * @param {Mixed} state State passed to the action to be executed.
	     * @param {Function} action Action to execute recursively. The last parameter passed to the action is used to trigger recursive scheduling of the action, passing in the recursive due time and invocation state.
	     * @param {Number}dueTime Absolute time at which to execute the action for the first time.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    schedulerProto.scheduleRecursiveWithAbsoluteAndState = function (state, dueTime, action) {
	      return this._scheduleAbsolute([state, action], dueTime, function (s, p) {
	        return invokeRecDate(s, p, 'scheduleWithAbsoluteAndState');
	      });
	    };
	  }(Scheduler.prototype));

	  (function (schedulerProto) {

	    /**
	     * Schedules a periodic piece of work by dynamically discovering the scheduler's capabilities. The periodic task will be scheduled using window.setInterval for the base implementation.
	     * @param {Number} period Period for running the work periodically.
	     * @param {Function} action Action to be executed.
	     * @returns {Disposable} The disposable object used to cancel the scheduled recurring action (best effort).
	     */
	    Scheduler.prototype.schedulePeriodic = function (period, action) {
	      return this.schedulePeriodicWithState(null, period, action);
	    };

	    /**
	     * Schedules a periodic piece of work by dynamically discovering the scheduler's capabilities. The periodic task will be scheduled using window.setInterval for the base implementation.
	     * @param {Mixed} state Initial state passed to the action upon the first iteration.
	     * @param {Number} period Period for running the work periodically.
	     * @param {Function} action Action to be executed, potentially updating the state.
	     * @returns {Disposable} The disposable object used to cancel the scheduled recurring action (best effort).
	     */
	    Scheduler.prototype.schedulePeriodicWithState = function(state, period, action) {
	      if (typeof root.setInterval === 'undefined') { throw new NotSupportedError(); }
	      period = normalizeTime(period);
	      var s = state, id = root.setInterval(function () { s = action(s); }, period);
	      return disposableCreate(function () { root.clearInterval(id); });
	    };

	  }(Scheduler.prototype));

	  (function (schedulerProto) {
	    /**
	     * Returns a scheduler that wraps the original scheduler, adding exception handling for scheduled actions.
	     * @param {Function} handler Handler that's run if an exception is caught. The exception will be rethrown if the handler returns false.
	     * @returns {Scheduler} Wrapper around the original scheduler, enforcing exception handling.
	     */
	    schedulerProto.catchError = schedulerProto['catch'] = function (handler) {
	      return new CatchScheduler(this, handler);
	    };
	  }(Scheduler.prototype));

	  var SchedulePeriodicRecursive = Rx.internals.SchedulePeriodicRecursive = (function () {
	    function tick(command, recurse) {
	      recurse(0, this._period);
	      try {
	        this._state = this._action(this._state);
	      } catch (e) {
	        this._cancel.dispose();
	        throw e;
	      }
	    }

	    function SchedulePeriodicRecursive(scheduler, state, period, action) {
	      this._scheduler = scheduler;
	      this._state = state;
	      this._period = period;
	      this._action = action;
	    }

	    SchedulePeriodicRecursive.prototype.start = function () {
	      var d = new SingleAssignmentDisposable();
	      this._cancel = d;
	      d.setDisposable(this._scheduler.scheduleRecursiveWithRelativeAndState(0, this._period, tick.bind(this)));

	      return d;
	    };

	    return SchedulePeriodicRecursive;
	  }());

	  /** Gets a scheduler that schedules work immediately on the current thread. */
	  var immediateScheduler = Scheduler.immediate = (function () {
	    function scheduleNow(state, action) { return action(this, state); }
	    return new Scheduler(defaultNow, scheduleNow, notSupported, notSupported);
	  }());

	  /**
	   * Gets a scheduler that schedules work as soon as possible on the current thread.
	   */
	  var currentThreadScheduler = Scheduler.currentThread = (function () {
	    var queue;

	    function runTrampoline () {
	      while (queue.length > 0) {
	        var item = queue.dequeue();
	        !item.isCancelled() && item.invoke();
	      }
	    }

	    function scheduleNow(state, action) {
	      var si = new ScheduledItem(this, state, action, this.now());

	      if (!queue) {
	        queue = new PriorityQueue(4);
	        queue.enqueue(si);

	        var result = tryCatch(runTrampoline)();
	        queue = null;
	        if (result === errorObj) { return thrower(result.e); }
	      } else {
	        queue.enqueue(si);
	      }
	      return si.disposable;
	    }

	    var currentScheduler = new Scheduler(defaultNow, scheduleNow, notSupported, notSupported);
	    currentScheduler.scheduleRequired = function () { return !queue; };

	    return currentScheduler;
	  }());

	  var scheduleMethod, clearMethod;

	  var localTimer = (function () {
	    var localSetTimeout, localClearTimeout = noop;
	    if (!!root.WScript) {
	      localSetTimeout = function (fn, time) {
	        root.WScript.Sleep(time);
	        fn();
	      };
	    } else if (!!root.setTimeout) {
	      localSetTimeout = root.setTimeout;
	      localClearTimeout = root.clearTimeout;
	    } else {
	      throw new NotSupportedError();
	    }

	    return {
	      setTimeout: localSetTimeout,
	      clearTimeout: localClearTimeout
	    };
	  }());
	  var localSetTimeout = localTimer.setTimeout,
	    localClearTimeout = localTimer.clearTimeout;

	  (function () {

	    var nextHandle = 1, tasksByHandle = {}, currentlyRunning = false;

	    clearMethod = function (handle) {
	      delete tasksByHandle[handle];
	    };

	    function runTask(handle) {
	      if (currentlyRunning) {
	        localSetTimeout(function () { runTask(handle) }, 0);
	      } else {
	        var task = tasksByHandle[handle];
	        if (task) {
	          currentlyRunning = true;
	          var result = tryCatch(task)();
	          clearMethod(handle);
	          currentlyRunning = false;
	          if (result === errorObj) { return thrower(result.e); }
	        }
	      }
	    }

	    var reNative = RegExp('^' +
	      String(toString)
	        .replace(/[.*+?^${}()|[\]\\]/g, '\\$&')
	        .replace(/toString| for [^\]]+/g, '.*?') + '$'
	    );

	    var setImmediate = typeof (setImmediate = freeGlobal && moduleExports && freeGlobal.setImmediate) == 'function' &&
	      !reNative.test(setImmediate) && setImmediate;

	    function postMessageSupported () {
	      // Ensure not in a worker
	      if (!root.postMessage || root.importScripts) { return false; }
	      var isAsync = false, oldHandler = root.onmessage;
	      // Test for async
	      root.onmessage = function () { isAsync = true; };
	      root.postMessage('', '*');
	      root.onmessage = oldHandler;

	      return isAsync;
	    }

	    // Use in order, setImmediate, nextTick, postMessage, MessageChannel, script readystatechanged, setTimeout
	    if (isFunction(setImmediate)) {
	      scheduleMethod = function (action) {
	        var id = nextHandle++;
	        tasksByHandle[id] = action;
	        setImmediate(function () { runTask(id); });

	        return id;
	      };
	    } else if (typeof process !== 'undefined' && {}.toString.call(process) === '[object process]') {
	      scheduleMethod = function (action) {
	        var id = nextHandle++;
	        tasksByHandle[id] = action;
	        process.nextTick(function () { runTask(id); });

	        return id;
	      };
	    } else if (postMessageSupported()) {
	      var MSG_PREFIX = 'ms.rx.schedule' + Math.random();

	      function onGlobalPostMessage(event) {
	        // Only if we're a match to avoid any other global events
	        if (typeof event.data === 'string' && event.data.substring(0, MSG_PREFIX.length) === MSG_PREFIX) {
	          runTask(event.data.substring(MSG_PREFIX.length));
	        }
	      }

	      if (root.addEventListener) {
	        root.addEventListener('message', onGlobalPostMessage, false);
	      } else {
	        root.attachEvent('onmessage', onGlobalPostMessage, false);
	      }

	      scheduleMethod = function (action) {
	        var id = nextHandle++;
	        tasksByHandle[id] = action;
	        root.postMessage(MSG_PREFIX + currentId, '*');
	        return id;
	      };
	    } else if (!!root.MessageChannel) {
	      var channel = new root.MessageChannel();

	      channel.port1.onmessage = function (e) { runTask(e.data); };

	      scheduleMethod = function (action) {
	        var id = nextHandle++;
	        tasksByHandle[id] = action;
	        channel.port2.postMessage(id);
	        return id;
	      };
	    } else if ('document' in root && 'onreadystatechange' in root.document.createElement('script')) {

	      scheduleMethod = function (action) {
	        var scriptElement = root.document.createElement('script');
	        var id = nextHandle++;
	        tasksByHandle[id] = action;

	        scriptElement.onreadystatechange = function () {
	          runTask(id);
	          scriptElement.onreadystatechange = null;
	          scriptElement.parentNode.removeChild(scriptElement);
	          scriptElement = null;
	        };
	        root.document.documentElement.appendChild(scriptElement);
	        return id;
	      };

	    } else {
	      scheduleMethod = function (action) {
	        var id = nextHandle++;
	        tasksByHandle[id] = action;
	        localSetTimeout(function () {
	          runTask(id);
	        }, 0);

	        return id;
	      };
	    }
	  }());

	  /**
	   * Gets a scheduler that schedules work via a timed callback based upon platform.
	   */
	  var timeoutScheduler = Scheduler.timeout = Scheduler.default = (function () {

	    function scheduleNow(state, action) {
	      var scheduler = this,
	        disposable = new SingleAssignmentDisposable();
	      var id = scheduleMethod(function () {
	        if (!disposable.isDisposed) {
	          disposable.setDisposable(action(scheduler, state));
	        }
	      });
	      return new CompositeDisposable(disposable, disposableCreate(function () {
	        clearMethod(id);
	      }));
	    }

	    function scheduleRelative(state, dueTime, action) {
	      var scheduler = this, dt = Scheduler.normalize(dueTime);
	      if (dt === 0) { return scheduler.scheduleWithState(state, action); }
	      var disposable = new SingleAssignmentDisposable();
	      var id = localSetTimeout(function () {
	        if (!disposable.isDisposed) {
	          disposable.setDisposable(action(scheduler, state));
	        }
	      }, dt);
	      return new CompositeDisposable(disposable, disposableCreate(function () {
	        localClearTimeout(id);
	      }));
	    }

	    function scheduleAbsolute(state, dueTime, action) {
	      return this.scheduleWithRelativeAndState(state, dueTime - this.now(), action);
	    }

	    return new Scheduler(defaultNow, scheduleNow, scheduleRelative, scheduleAbsolute);
	  })();

	  var CatchScheduler = (function (__super__) {

	    function scheduleNow(state, action) {
	      return this._scheduler.scheduleWithState(state, this._wrap(action));
	    }

	    function scheduleRelative(state, dueTime, action) {
	      return this._scheduler.scheduleWithRelativeAndState(state, dueTime, this._wrap(action));
	    }

	    function scheduleAbsolute(state, dueTime, action) {
	      return this._scheduler.scheduleWithAbsoluteAndState(state, dueTime, this._wrap(action));
	    }

	    inherits(CatchScheduler, __super__);

	    function CatchScheduler(scheduler, handler) {
	      this._scheduler = scheduler;
	      this._handler = handler;
	      this._recursiveOriginal = null;
	      this._recursiveWrapper = null;
	      __super__.call(this, this._scheduler.now.bind(this._scheduler), scheduleNow, scheduleRelative, scheduleAbsolute);
	    }

	    CatchScheduler.prototype._clone = function (scheduler) {
	        return new CatchScheduler(scheduler, this._handler);
	    };

	    CatchScheduler.prototype._wrap = function (action) {
	      var parent = this;
	      return function (self, state) {
	        try {
	          return action(parent._getRecursiveWrapper(self), state);
	        } catch (e) {
	          if (!parent._handler(e)) { throw e; }
	          return disposableEmpty;
	        }
	      };
	    };

	    CatchScheduler.prototype._getRecursiveWrapper = function (scheduler) {
	      if (this._recursiveOriginal !== scheduler) {
	        this._recursiveOriginal = scheduler;
	        var wrapper = this._clone(scheduler);
	        wrapper._recursiveOriginal = scheduler;
	        wrapper._recursiveWrapper = wrapper;
	        this._recursiveWrapper = wrapper;
	      }
	      return this._recursiveWrapper;
	    };

	    CatchScheduler.prototype.schedulePeriodicWithState = function (state, period, action) {
	      var self = this, failed = false, d = new SingleAssignmentDisposable();

	      d.setDisposable(this._scheduler.schedulePeriodicWithState(state, period, function (state1) {
	        if (failed) { return null; }
	        try {
	          return action(state1);
	        } catch (e) {
	          failed = true;
	          if (!self._handler(e)) { throw e; }
	          d.dispose();
	          return null;
	        }
	      }));

	      return d;
	    };

	    return CatchScheduler;
	  }(Scheduler));

	  /**
	   *  Represents a notification to an observer.
	   */
	  var Notification = Rx.Notification = (function () {
	    function Notification(kind, value, exception, accept, acceptObservable, toString) {
	      this.kind = kind;
	      this.value = value;
	      this.exception = exception;
	      this._accept = accept;
	      this._acceptObservable = acceptObservable;
	      this.toString = toString;
	    }

	    /**
	     * Invokes the delegate corresponding to the notification or the observer's method corresponding to the notification and returns the produced result.
	     *
	     * @memberOf Notification
	     * @param {Any} observerOrOnNext Delegate to invoke for an OnNext notification or Observer to invoke the notification on..
	     * @param {Function} onError Delegate to invoke for an OnError notification.
	     * @param {Function} onCompleted Delegate to invoke for an OnCompleted notification.
	     * @returns {Any} Result produced by the observation.
	     */
	    Notification.prototype.accept = function (observerOrOnNext, onError, onCompleted) {
	      return observerOrOnNext && typeof observerOrOnNext === 'object' ?
	        this._acceptObservable(observerOrOnNext) :
	        this._accept(observerOrOnNext, onError, onCompleted);
	    };

	    /**
	     * Returns an observable sequence with a single notification.
	     *
	     * @memberOf Notifications
	     * @param {Scheduler} [scheduler] Scheduler to send out the notification calls on.
	     * @returns {Observable} The observable sequence that surfaces the behavior of the notification upon subscription.
	     */
	    Notification.prototype.toObservable = function (scheduler) {
	      var self = this;
	      isScheduler(scheduler) || (scheduler = immediateScheduler);
	      return new AnonymousObservable(function (observer) {
	        return scheduler.scheduleWithState(self, function (_, notification) {
	          notification._acceptObservable(observer);
	          notification.kind === 'N' && observer.onCompleted();
	        });
	      });
	    };

	    return Notification;
	  })();

	  /**
	   * Creates an object that represents an OnNext notification to an observer.
	   * @param {Any} value The value contained in the notification.
	   * @returns {Notification} The OnNext notification containing the value.
	   */
	  var notificationCreateOnNext = Notification.createOnNext = (function () {
	      function _accept(onNext) { return onNext(this.value); }
	      function _acceptObservable(observer) { return observer.onNext(this.value); }
	      function toString() { return 'OnNext(' + this.value + ')'; }

	      return function (value) {
	        return new Notification('N', value, null, _accept, _acceptObservable, toString);
	      };
	  }());

	  /**
	   * Creates an object that represents an OnError notification to an observer.
	   * @param {Any} error The exception contained in the notification.
	   * @returns {Notification} The OnError notification containing the exception.
	   */
	  var notificationCreateOnError = Notification.createOnError = (function () {
	    function _accept (onNext, onError) { return onError(this.exception); }
	    function _acceptObservable(observer) { return observer.onError(this.exception); }
	    function toString () { return 'OnError(' + this.exception + ')'; }

	    return function (e) {
	      return new Notification('E', null, e, _accept, _acceptObservable, toString);
	    };
	  }());

	  /**
	   * Creates an object that represents an OnCompleted notification to an observer.
	   * @returns {Notification} The OnCompleted notification.
	   */
	  var notificationCreateOnCompleted = Notification.createOnCompleted = (function () {
	    function _accept (onNext, onError, onCompleted) { return onCompleted(); }
	    function _acceptObservable(observer) { return observer.onCompleted(); }
	    function toString () { return 'OnCompleted()'; }

	    return function () {
	      return new Notification('C', null, null, _accept, _acceptObservable, toString);
	    };
	  }());

	  var Enumerator = Rx.internals.Enumerator = function (next) {
	    this._next = next;
	  };

	  Enumerator.prototype.next = function () {
	    return this._next();
	  };

	  Enumerator.prototype[$iterator$] = function () { return this; }

	  var Enumerable = Rx.internals.Enumerable = function (iterator) {
	    this._iterator = iterator;
	  };

	  Enumerable.prototype[$iterator$] = function () {
	    return this._iterator();
	  };

	  Enumerable.prototype.concat = function () {
	    var sources = this;
	    return new AnonymousObservable(function (o) {
	      var e = sources[$iterator$]();

	      var isDisposed, subscription = new SerialDisposable();
	      var cancelable = immediateScheduler.scheduleRecursive(function (self) {
	        if (isDisposed) { return; }
	        try {
	          var currentItem = e.next();
	        } catch (ex) {
	          return o.onError(ex);
	        }

	        if (currentItem.done) {
	          return o.onCompleted();
	        }

	        // Check if promise
	        var currentValue = currentItem.value;
	        isPromise(currentValue) && (currentValue = observableFromPromise(currentValue));

	        var d = new SingleAssignmentDisposable();
	        subscription.setDisposable(d);
	        d.setDisposable(currentValue.subscribe(
	          function(x) { o.onNext(x); },
	          function(err) { o.onError(err); },
	          self)
	        );
	      });

	      return new CompositeDisposable(subscription, cancelable, disposableCreate(function () {
	        isDisposed = true;
	      }));
	    });
	  };

	  Enumerable.prototype.catchError = function () {
	    var sources = this;
	    return new AnonymousObservable(function (o) {
	      var e = sources[$iterator$]();

	      var isDisposed, subscription = new SerialDisposable();
	      var cancelable = immediateScheduler.scheduleRecursiveWithState(null, function (lastException, self) {
	        if (isDisposed) { return; }

	        try {
	          var currentItem = e.next();
	        } catch (ex) {
	          return observer.onError(ex);
	        }

	        if (currentItem.done) {
	          if (lastException !== null) {
	            o.onError(lastException);
	          } else {
	            o.onCompleted();
	          }
	          return;
	        }

	        // Check if promise
	        var currentValue = currentItem.value;
	        isPromise(currentValue) && (currentValue = observableFromPromise(currentValue));

	        var d = new SingleAssignmentDisposable();
	        subscription.setDisposable(d);
	        d.setDisposable(currentValue.subscribe(
	          function(x) { o.onNext(x); },
	          self,
	          function() { o.onCompleted(); }));
	      });
	      return new CompositeDisposable(subscription, cancelable, disposableCreate(function () {
	        isDisposed = true;
	      }));
	    });
	  };


	  Enumerable.prototype.catchErrorWhen = function (notificationHandler) {
	    var sources = this;
	    return new AnonymousObservable(function (o) {
	      var exceptions = new Subject(),
	        notifier = new Subject(),
	        handled = notificationHandler(exceptions),
	        notificationDisposable = handled.subscribe(notifier);

	      var e = sources[$iterator$]();

	      var isDisposed,
	        lastException,
	        subscription = new SerialDisposable();
	      var cancelable = immediateScheduler.scheduleRecursive(function (self) {
	        if (isDisposed) { return; }

	        try {
	          var currentItem = e.next();
	        } catch (ex) {
	          return o.onError(ex);
	        }

	        if (currentItem.done) {
	          if (lastException) {
	            o.onError(lastException);
	          } else {
	            o.onCompleted();
	          }
	          return;
	        }

	        // Check if promise
	        var currentValue = currentItem.value;
	        isPromise(currentValue) && (currentValue = observableFromPromise(currentValue));

	        var outer = new SingleAssignmentDisposable();
	        var inner = new SingleAssignmentDisposable();
	        subscription.setDisposable(new CompositeDisposable(inner, outer));
	        outer.setDisposable(currentValue.subscribe(
	          function(x) { o.onNext(x); },
	          function (exn) {
	            inner.setDisposable(notifier.subscribe(self, function(ex) {
	              o.onError(ex);
	            }, function() {
	              o.onCompleted();
	            }));

	            exceptions.onNext(exn);
	          },
	          function() { o.onCompleted(); }));
	      });

	      return new CompositeDisposable(notificationDisposable, subscription, cancelable, disposableCreate(function () {
	        isDisposed = true;
	      }));
	    });
	  };

	  var enumerableRepeat = Enumerable.repeat = function (value, repeatCount) {
	    if (repeatCount == null) { repeatCount = -1; }
	    return new Enumerable(function () {
	      var left = repeatCount;
	      return new Enumerator(function () {
	        if (left === 0) { return doneEnumerator; }
	        if (left > 0) { left--; }
	        return { done: false, value: value };
	      });
	    });
	  };

	  var enumerableOf = Enumerable.of = function (source, selector, thisArg) {
	    if (selector) {
	      var selectorFn = bindCallback(selector, thisArg, 3);
	    }
	    return new Enumerable(function () {
	      var index = -1;
	      return new Enumerator(
	        function () {
	          return ++index < source.length ?
	            { done: false, value: !selector ? source[index] : selectorFn(source[index], index, source) } :
	            doneEnumerator;
	        });
	    });
	  };

	  /**
	   * Supports push-style iteration over an observable sequence.
	   */
	  var Observer = Rx.Observer = function () { };

	  /**
	   *  Creates a notification callback from an observer.
	   * @returns The action that forwards its input notification to the underlying observer.
	   */
	  Observer.prototype.toNotifier = function () {
	    var observer = this;
	    return function (n) { return n.accept(observer); };
	  };

	  /**
	   *  Hides the identity of an observer.
	   * @returns An observer that hides the identity of the specified observer.
	   */
	  Observer.prototype.asObserver = function () {
	    return new AnonymousObserver(this.onNext.bind(this), this.onError.bind(this), this.onCompleted.bind(this));
	  };

	  /**
	   *  Checks access to the observer for grammar violations. This includes checking for multiple OnError or OnCompleted calls, as well as reentrancy in any of the observer methods.
	   *  If a violation is detected, an Error is thrown from the offending observer method call.
	   * @returns An observer that checks callbacks invocations against the observer grammar and, if the checks pass, forwards those to the specified observer.
	   */
	  Observer.prototype.checked = function () { return new CheckedObserver(this); };

	  /**
	   *  Creates an observer from the specified OnNext, along with optional OnError, and OnCompleted actions.
	   * @param {Function} [onNext] Observer's OnNext action implementation.
	   * @param {Function} [onError] Observer's OnError action implementation.
	   * @param {Function} [onCompleted] Observer's OnCompleted action implementation.
	   * @returns {Observer} The observer object implemented using the given actions.
	   */
	  var observerCreate = Observer.create = function (onNext, onError, onCompleted) {
	    onNext || (onNext = noop);
	    onError || (onError = defaultError);
	    onCompleted || (onCompleted = noop);
	    return new AnonymousObserver(onNext, onError, onCompleted);
	  };

	  /**
	   *  Creates an observer from a notification callback.
	   *
	   * @static
	   * @memberOf Observer
	   * @param {Function} handler Action that handles a notification.
	   * @returns The observer object that invokes the specified handler using a notification corresponding to each message it receives.
	   */
	  Observer.fromNotifier = function (handler, thisArg) {
	    return new AnonymousObserver(function (x) {
	      return handler.call(thisArg, notificationCreateOnNext(x));
	    }, function (e) {
	      return handler.call(thisArg, notificationCreateOnError(e));
	    }, function () {
	      return handler.call(thisArg, notificationCreateOnCompleted());
	    });
	  };

	  /**
	   * Schedules the invocation of observer methods on the given scheduler.
	   * @param {Scheduler} scheduler Scheduler to schedule observer messages on.
	   * @returns {Observer} Observer whose messages are scheduled on the given scheduler.
	   */
	  Observer.prototype.notifyOn = function (scheduler) {
	    return new ObserveOnObserver(scheduler, this);
	  };

	  Observer.prototype.makeSafe = function(disposable) {
	    return new AnonymousSafeObserver(this._onNext, this._onError, this._onCompleted, disposable);
	  };

	  /**
	   * Abstract base class for implementations of the Observer class.
	   * This base class enforces the grammar of observers where OnError and OnCompleted are terminal messages.
	   */
	  var AbstractObserver = Rx.internals.AbstractObserver = (function (__super__) {
	    inherits(AbstractObserver, __super__);

	    /**
	     * Creates a new observer in a non-stopped state.
	     */
	    function AbstractObserver() {
	      this.isStopped = false;
	      __super__.call(this);
	    }

	    // Must be implemented by other observers
	    AbstractObserver.prototype.next = notImplemented;
	    AbstractObserver.prototype.error = notImplemented;
	    AbstractObserver.prototype.completed = notImplemented;

	    /**
	     * Notifies the observer of a new element in the sequence.
	     * @param {Any} value Next element in the sequence.
	     */
	    AbstractObserver.prototype.onNext = function (value) {
	      if (!this.isStopped) { this.next(value); }
	    };

	    /**
	     * Notifies the observer that an exception has occurred.
	     * @param {Any} error The error that has occurred.
	     */
	    AbstractObserver.prototype.onError = function (error) {
	      if (!this.isStopped) {
	        this.isStopped = true;
	        this.error(error);
	      }
	    };

	    /**
	     * Notifies the observer of the end of the sequence.
	     */
	    AbstractObserver.prototype.onCompleted = function () {
	      if (!this.isStopped) {
	        this.isStopped = true;
	        this.completed();
	      }
	    };

	    /**
	     * Disposes the observer, causing it to transition to the stopped state.
	     */
	    AbstractObserver.prototype.dispose = function () {
	      this.isStopped = true;
	    };

	    AbstractObserver.prototype.fail = function (e) {
	      if (!this.isStopped) {
	        this.isStopped = true;
	        this.error(e);
	        return true;
	      }

	      return false;
	    };

	    return AbstractObserver;
	  }(Observer));

	  /**
	   * Class to create an Observer instance from delegate-based implementations of the on* methods.
	   */
	  var AnonymousObserver = Rx.AnonymousObserver = (function (__super__) {
	    inherits(AnonymousObserver, __super__);

	    /**
	     * Creates an observer from the specified OnNext, OnError, and OnCompleted actions.
	     * @param {Any} onNext Observer's OnNext action implementation.
	     * @param {Any} onError Observer's OnError action implementation.
	     * @param {Any} onCompleted Observer's OnCompleted action implementation.
	     */
	    function AnonymousObserver(onNext, onError, onCompleted) {
	      __super__.call(this);
	      this._onNext = onNext;
	      this._onError = onError;
	      this._onCompleted = onCompleted;
	    }

	    /**
	     * Calls the onNext action.
	     * @param {Any} value Next element in the sequence.
	     */
	    AnonymousObserver.prototype.next = function (value) {
	      this._onNext(value);
	    };

	    /**
	     * Calls the onError action.
	     * @param {Any} error The error that has occurred.
	     */
	    AnonymousObserver.prototype.error = function (error) {
	      this._onError(error);
	    };

	    /**
	     *  Calls the onCompleted action.
	     */
	    AnonymousObserver.prototype.completed = function () {
	      this._onCompleted();
	    };

	    return AnonymousObserver;
	  }(AbstractObserver));

	  var CheckedObserver = (function (__super__) {
	    inherits(CheckedObserver, __super__);

	    function CheckedObserver(observer) {
	      __super__.call(this);
	      this._observer = observer;
	      this._state = 0; // 0 - idle, 1 - busy, 2 - done
	    }

	    var CheckedObserverPrototype = CheckedObserver.prototype;

	    CheckedObserverPrototype.onNext = function (value) {
	      this.checkAccess();
	      var res = tryCatch(this._observer.onNext).call(this._observer, value);
	      this._state = 0;
	      res === errorObj && thrower(res.e);
	    };

	    CheckedObserverPrototype.onError = function (err) {
	      this.checkAccess();
	      var res = tryCatch(this._observer.onError).call(this._observer, err);
	      this._state = 2;
	      res === errorObj && thrower(res.e);
	    };

	    CheckedObserverPrototype.onCompleted = function () {
	      this.checkAccess();
	      var res = tryCatch(this._observer.onCompleted).call(this._observer);
	      this._state = 2;
	      res === errorObj && thrower(res.e);
	    };

	    CheckedObserverPrototype.checkAccess = function () {
	      if (this._state === 1) { throw new Error('Re-entrancy detected'); }
	      if (this._state === 2) { throw new Error('Observer completed'); }
	      if (this._state === 0) { this._state = 1; }
	    };

	    return CheckedObserver;
	  }(Observer));

	  var ScheduledObserver = Rx.internals.ScheduledObserver = (function (__super__) {
	    inherits(ScheduledObserver, __super__);

	    function ScheduledObserver(scheduler, observer) {
	      __super__.call(this);
	      this.scheduler = scheduler;
	      this.observer = observer;
	      this.isAcquired = false;
	      this.hasFaulted = false;
	      this.queue = [];
	      this.disposable = new SerialDisposable();
	    }

	    ScheduledObserver.prototype.next = function (value) {
	      var self = this;
	      this.queue.push(function () { self.observer.onNext(value); });
	    };

	    ScheduledObserver.prototype.error = function (e) {
	      var self = this;
	      this.queue.push(function () { self.observer.onError(e); });
	    };

	    ScheduledObserver.prototype.completed = function () {
	      var self = this;
	      this.queue.push(function () { self.observer.onCompleted(); });
	    };

	    ScheduledObserver.prototype.ensureActive = function () {
	      var isOwner = false, parent = this;
	      if (!this.hasFaulted && this.queue.length > 0) {
	        isOwner = !this.isAcquired;
	        this.isAcquired = true;
	      }
	      if (isOwner) {
	        this.disposable.setDisposable(this.scheduler.scheduleRecursive(function (self) {
	          var work;
	          if (parent.queue.length > 0) {
	            work = parent.queue.shift();
	          } else {
	            parent.isAcquired = false;
	            return;
	          }
	          try {
	            work();
	          } catch (ex) {
	            parent.queue = [];
	            parent.hasFaulted = true;
	            throw ex;
	          }
	          self();
	        }));
	      }
	    };

	    ScheduledObserver.prototype.dispose = function () {
	      __super__.prototype.dispose.call(this);
	      this.disposable.dispose();
	    };

	    return ScheduledObserver;
	  }(AbstractObserver));

	  var ObserveOnObserver = (function (__super__) {
	    inherits(ObserveOnObserver, __super__);

	    function ObserveOnObserver(scheduler, observer, cancel) {
	      __super__.call(this, scheduler, observer);
	      this._cancel = cancel;
	    }

	    ObserveOnObserver.prototype.next = function (value) {
	      __super__.prototype.next.call(this, value);
	      this.ensureActive();
	    };

	    ObserveOnObserver.prototype.error = function (e) {
	      __super__.prototype.error.call(this, e);
	      this.ensureActive();
	    };

	    ObserveOnObserver.prototype.completed = function () {
	      __super__.prototype.completed.call(this);
	      this.ensureActive();
	    };

	    ObserveOnObserver.prototype.dispose = function () {
	      __super__.prototype.dispose.call(this);
	      this._cancel && this._cancel.dispose();
	      this._cancel = null;
	    };

	    return ObserveOnObserver;
	  })(ScheduledObserver);

	  var observableProto;

	  /**
	   * Represents a push-style collection.
	   */
	  var Observable = Rx.Observable = (function () {

	    function Observable(subscribe) {
	      if (Rx.config.longStackSupport && hasStacks) {
	        try {
	          throw new Error();
	        } catch (e) {
	          this.stack = e.stack.substring(e.stack.indexOf("\n") + 1);
	        }

	        var self = this;
	        this._subscribe = function (observer) {
	          var oldOnError = observer.onError.bind(observer);

	          observer.onError = function (err) {
	            makeStackTraceLong(err, self);
	            oldOnError(err);
	          };

	          return subscribe.call(self, observer);
	        };
	      } else {
	        this._subscribe = subscribe;
	      }
	    }

	    observableProto = Observable.prototype;

	    /**
	     *  Subscribes an observer to the observable sequence.
	     *  @param {Mixed} [observerOrOnNext] The object that is to receive notifications or an action to invoke for each element in the observable sequence.
	     *  @param {Function} [onError] Action to invoke upon exceptional termination of the observable sequence.
	     *  @param {Function} [onCompleted] Action to invoke upon graceful termination of the observable sequence.
	     *  @returns {Diposable} A disposable handling the subscriptions and unsubscriptions.
	     */
	    observableProto.subscribe = observableProto.forEach = function (observerOrOnNext, onError, onCompleted) {
	      return this._subscribe(typeof observerOrOnNext === 'object' ?
	        observerOrOnNext :
	        observerCreate(observerOrOnNext, onError, onCompleted));
	    };

	    /**
	     * Subscribes to the next value in the sequence with an optional "this" argument.
	     * @param {Function} onNext The function to invoke on each element in the observable sequence.
	     * @param {Any} [thisArg] Object to use as this when executing callback.
	     * @returns {Disposable} A disposable handling the subscriptions and unsubscriptions.
	     */
	    observableProto.subscribeOnNext = function (onNext, thisArg) {
	      return this._subscribe(observerCreate(typeof thisArg !== 'undefined' ? function(x) { onNext.call(thisArg, x); } : onNext));
	    };

	    /**
	     * Subscribes to an exceptional condition in the sequence with an optional "this" argument.
	     * @param {Function} onError The function to invoke upon exceptional termination of the observable sequence.
	     * @param {Any} [thisArg] Object to use as this when executing callback.
	     * @returns {Disposable} A disposable handling the subscriptions and unsubscriptions.
	     */
	    observableProto.subscribeOnError = function (onError, thisArg) {
	      return this._subscribe(observerCreate(null, typeof thisArg !== 'undefined' ? function(e) { onError.call(thisArg, e); } : onError));
	    };

	    /**
	     * Subscribes to the next value in the sequence with an optional "this" argument.
	     * @param {Function} onCompleted The function to invoke upon graceful termination of the observable sequence.
	     * @param {Any} [thisArg] Object to use as this when executing callback.
	     * @returns {Disposable} A disposable handling the subscriptions and unsubscriptions.
	     */
	    observableProto.subscribeOnCompleted = function (onCompleted, thisArg) {
	      return this._subscribe(observerCreate(null, null, typeof thisArg !== 'undefined' ? function() { onCompleted.call(thisArg); } : onCompleted));
	    };

	    return Observable;
	  })();

	  var ObservableBase = Rx.ObservableBase = (function (__super__) {
	    inherits(ObservableBase, __super__);

	    function fixSubscriber(subscriber) {
	      return subscriber && isFunction(subscriber.dispose) ? subscriber :
	        isFunction(subscriber) ? disposableCreate(subscriber) : disposableEmpty;
	    }

	    function setDisposable(s, state) {
	      var ado = state[0], self = state[1];
	      var sub = tryCatch(self.subscribeCore).call(self, ado);

	      if (sub === errorObj) {
	        if(!ado.fail(errorObj.e)) { return thrower(errorObj.e); }
	      }
	      ado.setDisposable(fixSubscriber(sub));
	    }

	    function subscribe(observer) {
	      var ado = new AutoDetachObserver(observer), state = [ado, this];

	      if (currentThreadScheduler.scheduleRequired()) {
	        currentThreadScheduler.scheduleWithState(state, setDisposable);
	      } else {
	        setDisposable(null, state);
	      }
	      return ado;
	    }

	    function ObservableBase() {
	      __super__.call(this, subscribe);
	    }

	    ObservableBase.prototype.subscribeCore = notImplemented;

	    return ObservableBase;
	  }(Observable));

	   /**
	   *  Wraps the source sequence in order to run its observer callbacks on the specified scheduler.
	   *
	   *  This only invokes observer callbacks on a scheduler. In case the subscription and/or unsubscription actions have side-effects
	   *  that require to be run on a scheduler, use subscribeOn.
	   *
	   *  @param {Scheduler} scheduler Scheduler to notify observers on.
	   *  @returns {Observable} The source sequence whose observations happen on the specified scheduler.
	   */
	  observableProto.observeOn = function (scheduler) {
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      return source.subscribe(new ObserveOnObserver(scheduler, observer));
	    }, source);
	  };

	   /**
	   *  Wraps the source sequence in order to run its subscription and unsubscription logic on the specified scheduler. This operation is not commonly used;
	   *  see the remarks section for more information on the distinction between subscribeOn and observeOn.

	   *  This only performs the side-effects of subscription and unsubscription on the specified scheduler. In order to invoke observer
	   *  callbacks on a scheduler, use observeOn.

	   *  @param {Scheduler} scheduler Scheduler to perform subscription and unsubscription actions on.
	   *  @returns {Observable} The source sequence whose subscriptions and unsubscriptions happen on the specified scheduler.
	   */
	  observableProto.subscribeOn = function (scheduler) {
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      var m = new SingleAssignmentDisposable(), d = new SerialDisposable();
	      d.setDisposable(m);
	      m.setDisposable(scheduler.schedule(function () {
	        d.setDisposable(new ScheduledDisposable(scheduler, source.subscribe(observer)));
	      }));
	      return d;
	    }, source);
	  };

	  /**
	   * Converts a Promise to an Observable sequence
	   * @param {Promise} An ES6 Compliant promise.
	   * @returns {Observable} An Observable sequence which wraps the existing promise success and failure.
	   */
	  var observableFromPromise = Observable.fromPromise = function (promise) {
	    return observableDefer(function () {
	      var subject = new Rx.AsyncSubject();

	      promise.then(
	        function (value) {
	          subject.onNext(value);
	          subject.onCompleted();
	        },
	        subject.onError.bind(subject));

	      return subject;
	    });
	  };

	  /*
	   * Converts an existing observable sequence to an ES6 Compatible Promise
	   * @example
	   * var promise = Rx.Observable.return(42).toPromise(RSVP.Promise);
	   *
	   * // With config
	   * Rx.config.Promise = RSVP.Promise;
	   * var promise = Rx.Observable.return(42).toPromise();
	   * @param {Function} [promiseCtor] The constructor of the promise. If not provided, it looks for it in Rx.config.Promise.
	   * @returns {Promise} An ES6 compatible promise with the last value from the observable sequence.
	   */
	  observableProto.toPromise = function (promiseCtor) {
	    promiseCtor || (promiseCtor = Rx.config.Promise);
	    if (!promiseCtor) { throw new NotSupportedError('Promise type not provided nor in Rx.config.Promise'); }
	    var source = this;
	    return new promiseCtor(function (resolve, reject) {
	      // No cancellation can be done
	      var value, hasValue = false;
	      source.subscribe(function (v) {
	        value = v;
	        hasValue = true;
	      }, reject, function () {
	        hasValue && resolve(value);
	      });
	    });
	  };

	  var ToArrayObservable = (function(__super__) {
	    inherits(ToArrayObservable, __super__);
	    function ToArrayObservable(source) {
	      this.source = source;
	      __super__.call(this);
	    }

	    ToArrayObservable.prototype.subscribeCore = function(observer) {
	      return this.source.subscribe(new ToArrayObserver(observer));
	    };

	    return ToArrayObservable;
	  }(ObservableBase));

	  function ToArrayObserver(observer) {
	    this.observer = observer;
	    this.a = [];
	    this.isStopped = false;
	  }
	  ToArrayObserver.prototype.onNext = function (x) { if(!this.isStopped) { this.a.push(x); } };
	  ToArrayObserver.prototype.onError = function (e) {
	    if (!this.isStopped) {
	      this.isStopped = true;
	      this.observer.onError(e);
	    }
	  };
	  ToArrayObserver.prototype.onCompleted = function () {
	    if (!this.isStopped) {
	      this.isStopped = true;
	      this.observer.onNext(this.a);
	      this.observer.onCompleted();
	    }
	  };
	  ToArrayObserver.prototype.dispose = function () { this.isStopped = true; }
	  ToArrayObserver.prototype.fail = function (e) {
	    if (!this.isStopped) {
	      this.isStopped = true;
	      this.observer.onError(e);
	      return true;
	    }

	    return false;
	  };

	  /**
	  * Creates an array from an observable sequence.
	  * @returns {Observable} An observable sequence containing a single element with a list containing all the elements of the source sequence.
	  */
	  observableProto.toArray = function () {
	    return new ToArrayObservable(this);
	  };

	  /**
	   *  Creates an observable sequence from a specified subscribe method implementation.
	   * @example
	   *  var res = Rx.Observable.create(function (observer) { return function () { } );
	   *  var res = Rx.Observable.create(function (observer) { return Rx.Disposable.empty; } );
	   *  var res = Rx.Observable.create(function (observer) { } );
	   * @param {Function} subscribe Implementation of the resulting observable sequence's subscribe method, returning a function that will be wrapped in a Disposable.
	   * @returns {Observable} The observable sequence with the specified implementation for the Subscribe method.
	   */
	  Observable.create = Observable.createWithDisposable = function (subscribe, parent) {
	    return new AnonymousObservable(subscribe, parent);
	  };

	  /**
	   *  Returns an observable sequence that invokes the specified factory function whenever a new observer subscribes.
	   *
	   * @example
	   *  var res = Rx.Observable.defer(function () { return Rx.Observable.fromArray([1,2,3]); });
	   * @param {Function} observableFactory Observable factory function to invoke for each observer that subscribes to the resulting sequence or Promise.
	   * @returns {Observable} An observable sequence whose observers trigger an invocation of the given observable factory function.
	   */
	  var observableDefer = Observable.defer = function (observableFactory) {
	    return new AnonymousObservable(function (observer) {
	      var result;
	      try {
	        result = observableFactory();
	      } catch (e) {
	        return observableThrow(e).subscribe(observer);
	      }
	      isPromise(result) && (result = observableFromPromise(result));
	      return result.subscribe(observer);
	    });
	  };

	  /**
	   *  Returns an empty observable sequence, using the specified scheduler to send out the single OnCompleted message.
	   *
	   * @example
	   *  var res = Rx.Observable.empty();
	   *  var res = Rx.Observable.empty(Rx.Scheduler.timeout);
	   * @param {Scheduler} [scheduler] Scheduler to send the termination call on.
	   * @returns {Observable} An observable sequence with no elements.
	   */
	  var observableEmpty = Observable.empty = function (scheduler) {
	    isScheduler(scheduler) || (scheduler = immediateScheduler);
	    return new AnonymousObservable(function (observer) {
	      return scheduler.scheduleWithState(null, function () {
	        observer.onCompleted();
	      });
	    });
	  };

	  var FromObservable = (function(__super__) {
	    inherits(FromObservable, __super__);
	    function FromObservable(iterable, mapper, scheduler) {
	      this.iterable = iterable;
	      this.mapper = mapper;
	      this.scheduler = scheduler;
	      __super__.call(this);
	    }

	    FromObservable.prototype.subscribeCore = function (observer) {
	      var sink = new FromSink(observer, this);
	      return sink.run();
	    };

	    return FromObservable;
	  }(ObservableBase));

	  var FromSink = (function () {
	    function FromSink(observer, parent) {
	      this.observer = observer;
	      this.parent = parent;
	    }

	    FromSink.prototype.run = function () {
	      var list = Object(this.parent.iterable),
	          it = getIterable(list),
	          observer = this.observer,
	          mapper = this.parent.mapper;

	      function loopRecursive(i, recurse) {
	        try {
	          var next = it.next();
	        } catch (e) {
	          return observer.onError(e);
	        }
	        if (next.done) {
	          return observer.onCompleted();
	        }

	        var result = next.value;

	        if (mapper) {
	          try {
	            result = mapper(result, i);
	          } catch (e) {
	            return observer.onError(e);
	          }
	        }

	        observer.onNext(result);
	        recurse(i + 1);
	      }

	      return this.parent.scheduler.scheduleRecursiveWithState(0, loopRecursive);
	    };

	    return FromSink;
	  }());

	  var maxSafeInteger = Math.pow(2, 53) - 1;

	  function StringIterable(str) {
	    this._s = s;
	  }

	  StringIterable.prototype[$iterator$] = function () {
	    return new StringIterator(this._s);
	  };

	  function StringIterator(str) {
	    this._s = s;
	    this._l = s.length;
	    this._i = 0;
	  }

	  StringIterator.prototype[$iterator$] = function () {
	    return this;
	  };

	  StringIterator.prototype.next = function () {
	    return this._i < this._l ? { done: false, value: this._s.charAt(this._i++) } : doneEnumerator;
	  };

	  function ArrayIterable(a) {
	    this._a = a;
	  }

	  ArrayIterable.prototype[$iterator$] = function () {
	    return new ArrayIterator(this._a);
	  };

	  function ArrayIterator(a) {
	    this._a = a;
	    this._l = toLength(a);
	    this._i = 0;
	  }

	  ArrayIterator.prototype[$iterator$] = function () {
	    return this;
	  };

	  ArrayIterator.prototype.next = function () {
	    return this._i < this._l ? { done: false, value: this._a[this._i++] } : doneEnumerator;
	  };

	  function numberIsFinite(value) {
	    return typeof value === 'number' && root.isFinite(value);
	  }

	  function isNan(n) {
	    return n !== n;
	  }

	  function getIterable(o) {
	    var i = o[$iterator$], it;
	    if (!i && typeof o === 'string') {
	      it = new StringIterable(o);
	      return it[$iterator$]();
	    }
	    if (!i && o.length !== undefined) {
	      it = new ArrayIterable(o);
	      return it[$iterator$]();
	    }
	    if (!i) { throw new TypeError('Object is not iterable'); }
	    return o[$iterator$]();
	  }

	  function sign(value) {
	    var number = +value;
	    if (number === 0) { return number; }
	    if (isNaN(number)) { return number; }
	    return number < 0 ? -1 : 1;
	  }

	  function toLength(o) {
	    var len = +o.length;
	    if (isNaN(len)) { return 0; }
	    if (len === 0 || !numberIsFinite(len)) { return len; }
	    len = sign(len) * Math.floor(Math.abs(len));
	    if (len <= 0) { return 0; }
	    if (len > maxSafeInteger) { return maxSafeInteger; }
	    return len;
	  }

	  /**
	  * This method creates a new Observable sequence from an array-like or iterable object.
	  * @param {Any} arrayLike An array-like or iterable object to convert to an Observable sequence.
	  * @param {Function} [mapFn] Map function to call on every element of the array.
	  * @param {Any} [thisArg] The context to use calling the mapFn if provided.
	  * @param {Scheduler} [scheduler] Optional scheduler to use for scheduling.  If not provided, defaults to Scheduler.currentThread.
	  */
	  var observableFrom = Observable.from = function (iterable, mapFn, thisArg, scheduler) {
	    if (iterable == null) {
	      throw new Error('iterable cannot be null.')
	    }
	    if (mapFn && !isFunction(mapFn)) {
	      throw new Error('mapFn when provided must be a function');
	    }
	    if (mapFn) {
	      var mapper = bindCallback(mapFn, thisArg, 2);
	    }
	    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
	    return new FromObservable(iterable, mapper, scheduler);
	  }

	  var FromArrayObservable = (function(__super__) {
	    inherits(FromArrayObservable, __super__);
	    function FromArrayObservable(args, scheduler) {
	      this.args = args;
	      this.scheduler = scheduler;
	      __super__.call(this);
	    }

	    FromArrayObservable.prototype.subscribeCore = function (observer) {
	      var sink = new FromArraySink(observer, this);
	      return sink.run();
	    };

	    return FromArrayObservable;
	  }(ObservableBase));

	  function FromArraySink(observer, parent) {
	    this.observer = observer;
	    this.parent = parent;
	  }

	  FromArraySink.prototype.run = function () {
	    var observer = this.observer, args = this.parent.args, len = args.length;
	    function loopRecursive(i, recurse) {
	      if (i < len) {
	        observer.onNext(args[i]);
	        recurse(i + 1);
	      } else {
	        observer.onCompleted();
	      }
	    }

	    return this.parent.scheduler.scheduleRecursiveWithState(0, loopRecursive);
	  };

	  /**
	  *  Converts an array to an observable sequence, using an optional scheduler to enumerate the array.
	  * @deprecated use Observable.from or Observable.of
	  * @param {Scheduler} [scheduler] Scheduler to run the enumeration of the input sequence on.
	  * @returns {Observable} The observable sequence whose elements are pulled from the given enumerable sequence.
	  */
	  var observableFromArray = Observable.fromArray = function (array, scheduler) {
	    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
	    return new FromArrayObservable(array, scheduler)
	  };

	  /**
	   *  Generates an observable sequence by running a state-driven loop producing the sequence's elements, using the specified scheduler to send out observer messages.
	   *
	   * @example
	   *  var res = Rx.Observable.generate(0, function (x) { return x < 10; }, function (x) { return x + 1; }, function (x) { return x; });
	   *  var res = Rx.Observable.generate(0, function (x) { return x < 10; }, function (x) { return x + 1; }, function (x) { return x; }, Rx.Scheduler.timeout);
	   * @param {Mixed} initialState Initial state.
	   * @param {Function} condition Condition to terminate generation (upon returning false).
	   * @param {Function} iterate Iteration step function.
	   * @param {Function} resultSelector Selector function for results produced in the sequence.
	   * @param {Scheduler} [scheduler] Scheduler on which to run the generator loop. If not provided, defaults to Scheduler.currentThread.
	   * @returns {Observable} The generated sequence.
	   */
	  Observable.generate = function (initialState, condition, iterate, resultSelector, scheduler) {
	    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
	    return new AnonymousObservable(function (o) {
	      var first = true;
	      return scheduler.scheduleRecursiveWithState(initialState, function (state, self) {
	        var hasResult, result;
	        try {
	          if (first) {
	            first = false;
	          } else {
	            state = iterate(state);
	          }
	          hasResult = condition(state);
	          hasResult && (result = resultSelector(state));
	        } catch (e) {
	          return o.onError(e);
	        }
	        if (hasResult) {
	          o.onNext(result);
	          self(state);
	        } else {
	          o.onCompleted();
	        }
	      });
	    });
	  };

	  function observableOf (scheduler, array) {
	    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
	    return new FromArrayObservable(array, scheduler);
	  }

	  /**
	  *  This method creates a new Observable instance with a variable number of arguments, regardless of number or type of the arguments.
	  * @returns {Observable} The observable sequence whose elements are pulled from the given arguments.
	  */
	  Observable.of = function () {
	    var len = arguments.length, args = new Array(len);
	    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
	    return new FromArrayObservable(args, currentThreadScheduler);
	  };

	  /**
	  *  This method creates a new Observable instance with a variable number of arguments, regardless of number or type of the arguments.
	  * @param {Scheduler} scheduler A scheduler to use for scheduling the arguments.
	  * @returns {Observable} The observable sequence whose elements are pulled from the given arguments.
	  */
	  Observable.ofWithScheduler = function (scheduler) {
	    var len = arguments.length, args = new Array(len - 1);
	    for(var i = 1; i < len; i++) { args[i - 1] = arguments[i]; }
	    return new FromArrayObservable(args, scheduler);
	  };

	  /**
	   * Creates an Observable sequence from changes to an array using Array.observe.
	   * @param {Array} array An array to observe changes.
	   * @returns {Observable} An observable sequence containing changes to an array from Array.observe.
	   */
	  Observable.ofArrayChanges = function(array) {
	    if (!Array.isArray(array)) { throw new TypeError('Array.observe only accepts arrays.'); }
	    if (typeof Array.observe !== 'function' && typeof Array.unobserve !== 'function') { throw new TypeError('Array.observe is not supported on your platform') }
	    return new AnonymousObservable(function(observer) {
	      function observerFn(changes) {
	        for(var i = 0, len = changes.length; i < len; i++) {
	          observer.onNext(changes[i]);
	        }
	      }
	      
	      Array.observe(array, observerFn);

	      return function () {
	        Array.unobserve(array, observerFn);
	      };
	    });
	  };

	  /**
	   * Creates an Observable sequence from changes to an object using Object.observe.
	   * @param {Object} obj An object to observe changes.
	   * @returns {Observable} An observable sequence containing changes to an object from Object.observe.
	   */
	  Observable.ofObjectChanges = function(obj) {
	    if (obj == null) { throw new TypeError('object must not be null or undefined.'); }
	    if (typeof Object.observe !== 'function' && typeof Object.unobserve !== 'function') { throw new TypeError('Array.observe is not supported on your platform') }
	    return new AnonymousObservable(function(observer) {
	      function observerFn(changes) {
	        for(var i = 0, len = changes.length; i < len; i++) {
	          observer.onNext(changes[i]);
	        }
	      }

	      Object.observe(obj, observerFn);

	      return function () {
	        Object.unobserve(obj, observerFn);
	      };
	    });
	  };

	  /**
	   *  Returns a non-terminating observable sequence, which can be used to denote an infinite duration (e.g. when using reactive joins).
	   * @returns {Observable} An observable sequence whose observers will never get called.
	   */
	  var observableNever = Observable.never = function () {
	    return new AnonymousObservable(function () {
	      return disposableEmpty;
	    });
	  };

	  /**
	   * Convert an object into an observable sequence of [key, value] pairs.
	   * @param {Object} obj The object to inspect.
	   * @param {Scheduler} [scheduler] Scheduler to run the enumeration of the input sequence on.
	   * @returns {Observable} An observable sequence of [key, value] pairs from the object.
	   */
	  Observable.pairs = function (obj, scheduler) {
	    scheduler || (scheduler = Rx.Scheduler.currentThread);
	    return new AnonymousObservable(function (observer) {
	      var keys = Object.keys(obj), len = keys.length;
	      return scheduler.scheduleRecursiveWithState(0, function (idx, self) {
	        if (idx < len) {
	          var key = keys[idx];
	          observer.onNext([key, obj[key]]);
	          self(idx + 1);
	        } else {
	          observer.onCompleted();
	        }
	      });
	    });
	  };

	    var RangeObservable = (function(__super__) {
	    inherits(RangeObservable, __super__);
	    function RangeObservable(start, count, scheduler) {
	      this.start = start;
	      this.count = count;
	      this.scheduler = scheduler;
	      __super__.call(this);
	    }

	    RangeObservable.prototype.subscribeCore = function (observer) {
	      var sink = new RangeSink(observer, this);
	      return sink.run();
	    };

	    return RangeObservable;
	  }(ObservableBase));

	  var RangeSink = (function () {
	    function RangeSink(observer, parent) {
	      this.observer = observer;
	      this.parent = parent;
	    }

	    RangeSink.prototype.run = function () {
	      var start = this.parent.start, count = this.parent.count, observer = this.observer;
	      function loopRecursive(i, recurse) {
	        if (i < count) {
	          observer.onNext(start + i);
	          recurse(i + 1);
	        } else {
	          observer.onCompleted();
	        }
	      }

	      return this.parent.scheduler.scheduleRecursiveWithState(0, loopRecursive);
	    };

	    return RangeSink;
	  }());

	  /**
	  *  Generates an observable sequence of integral numbers within a specified range, using the specified scheduler to send out observer messages.
	  * @param {Number} start The value of the first integer in the sequence.
	  * @param {Number} count The number of sequential integers to generate.
	  * @param {Scheduler} [scheduler] Scheduler to run the generator loop on. If not specified, defaults to Scheduler.currentThread.
	  * @returns {Observable} An observable sequence that contains a range of sequential integral numbers.
	  */
	  Observable.range = function (start, count, scheduler) {
	    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
	    return new RangeObservable(start, count, scheduler);
	  };

	  /**
	   *  Generates an observable sequence that repeats the given element the specified number of times, using the specified scheduler to send out observer messages.
	   *
	   * @example
	   *  var res = Rx.Observable.repeat(42);
	   *  var res = Rx.Observable.repeat(42, 4);
	   *  3 - res = Rx.Observable.repeat(42, 4, Rx.Scheduler.timeout);
	   *  4 - res = Rx.Observable.repeat(42, null, Rx.Scheduler.timeout);
	   * @param {Mixed} value Element to repeat.
	   * @param {Number} repeatCount [Optiona] Number of times to repeat the element. If not specified, repeats indefinitely.
	   * @param {Scheduler} scheduler Scheduler to run the producer loop on. If not specified, defaults to Scheduler.immediate.
	   * @returns {Observable} An observable sequence that repeats the given element the specified number of times.
	   */
	  Observable.repeat = function (value, repeatCount, scheduler) {
	    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
	    return observableReturn(value, scheduler).repeat(repeatCount == null ? -1 : repeatCount);
	  };

	  /**
	   *  Returns an observable sequence that contains a single element, using the specified scheduler to send out observer messages.
	   *  There is an alias called 'just' or browsers <IE9.
	   * @param {Mixed} value Single element in the resulting observable sequence.
	   * @param {Scheduler} scheduler Scheduler to send the single element on. If not specified, defaults to Scheduler.immediate.
	   * @returns {Observable} An observable sequence containing the single specified element.
	   */
	  var observableReturn = Observable['return'] = Observable.just = Observable.returnValue = function (value, scheduler) {
	    isScheduler(scheduler) || (scheduler = immediateScheduler);
	    return new AnonymousObservable(function (o) {
	      return scheduler.scheduleWithState(value, function(_,v) {
	        o.onNext(v);
	        o.onCompleted();
	      });
	    });
	  };

	  /**
	   *  Returns an observable sequence that terminates with an exception, using the specified scheduler to send out the single onError message.
	   *  There is an alias to this method called 'throwError' for browsers <IE9.
	   * @param {Mixed} error An object used for the sequence's termination.
	   * @param {Scheduler} scheduler Scheduler to send the exceptional termination call on. If not specified, defaults to Scheduler.immediate.
	   * @returns {Observable} The observable sequence that terminates exceptionally with the specified exception object.
	   */
	  var observableThrow = Observable['throw'] = Observable.throwError = function (error, scheduler) {
	    isScheduler(scheduler) || (scheduler = immediateScheduler);
	    return new AnonymousObservable(function (observer) {
	      return scheduler.schedule(function () {
	        observer.onError(error);
	      });
	    });
	  };

	  /** @deprecated use #some instead */
	  Observable.throwException = function () {
	    //deprecate('throwException', 'throwError');
	    return Observable.throwError.apply(null, arguments);
	  };

	  /**
	   * Constructs an observable sequence that depends on a resource object, whose lifetime is tied to the resulting observable sequence's lifetime.
	   * @param {Function} resourceFactory Factory function to obtain a resource object.
	   * @param {Function} observableFactory Factory function to obtain an observable sequence that depends on the obtained resource.
	   * @returns {Observable} An observable sequence whose lifetime controls the lifetime of the dependent resource object.
	   */
	  Observable.using = function (resourceFactory, observableFactory) {
	    return new AnonymousObservable(function (observer) {
	      var disposable = disposableEmpty, resource, source;
	      try {
	        resource = resourceFactory();
	        resource && (disposable = resource);
	        source = observableFactory(resource);
	      } catch (exception) {
	        return new CompositeDisposable(observableThrow(exception).subscribe(observer), disposable);
	      }
	      return new CompositeDisposable(source.subscribe(observer), disposable);
	    });
	  };

	  /**
	   * Propagates the observable sequence or Promise that reacts first.
	   * @param {Observable} rightSource Second observable sequence or Promise.
	   * @returns {Observable} {Observable} An observable sequence that surfaces either of the given sequences, whichever reacted first.
	   */
	  observableProto.amb = function (rightSource) {
	    var leftSource = this;
	    return new AnonymousObservable(function (observer) {
	      var choice,
	        leftChoice = 'L', rightChoice = 'R',
	        leftSubscription = new SingleAssignmentDisposable(),
	        rightSubscription = new SingleAssignmentDisposable();

	      isPromise(rightSource) && (rightSource = observableFromPromise(rightSource));

	      function choiceL() {
	        if (!choice) {
	          choice = leftChoice;
	          rightSubscription.dispose();
	        }
	      }

	      function choiceR() {
	        if (!choice) {
	          choice = rightChoice;
	          leftSubscription.dispose();
	        }
	      }

	      leftSubscription.setDisposable(leftSource.subscribe(function (left) {
	        choiceL();
	        if (choice === leftChoice) {
	          observer.onNext(left);
	        }
	      }, function (err) {
	        choiceL();
	        if (choice === leftChoice) {
	          observer.onError(err);
	        }
	      }, function () {
	        choiceL();
	        if (choice === leftChoice) {
	          observer.onCompleted();
	        }
	      }));

	      rightSubscription.setDisposable(rightSource.subscribe(function (right) {
	        choiceR();
	        if (choice === rightChoice) {
	          observer.onNext(right);
	        }
	      }, function (err) {
	        choiceR();
	        if (choice === rightChoice) {
	          observer.onError(err);
	        }
	      }, function () {
	        choiceR();
	        if (choice === rightChoice) {
	          observer.onCompleted();
	        }
	      }));

	      return new CompositeDisposable(leftSubscription, rightSubscription);
	    });
	  };

	  /**
	   * Propagates the observable sequence or Promise that reacts first.
	   *
	   * @example
	   * var = Rx.Observable.amb(xs, ys, zs);
	   * @returns {Observable} An observable sequence that surfaces any of the given sequences, whichever reacted first.
	   */
	  Observable.amb = function () {
	    var acc = observableNever(), items = [];
	    if (Array.isArray(arguments[0])) {
	      items = arguments[0];
	    } else {
	      for(var i = 0, len = arguments.length; i < len; i++) { items.push(arguments[i]); }
	    }

	    function func(previous, current) {
	      return previous.amb(current);
	    }
	    for (var i = 0, len = items.length; i < len; i++) {
	      acc = func(acc, items[i]);
	    }
	    return acc;
	  };

	  function observableCatchHandler(source, handler) {
	    return new AnonymousObservable(function (o) {
	      var d1 = new SingleAssignmentDisposable(), subscription = new SerialDisposable();
	      subscription.setDisposable(d1);
	      d1.setDisposable(source.subscribe(function (x) { o.onNext(x); }, function (e) {
	        try {
	          var result = handler(e);
	        } catch (ex) {
	          return o.onError(ex);
	        }
	        isPromise(result) && (result = observableFromPromise(result));

	        var d = new SingleAssignmentDisposable();
	        subscription.setDisposable(d);
	        d.setDisposable(result.subscribe(o));
	      }, function (x) { o.onCompleted(x); }));

	      return subscription;
	    }, source);
	  }

	  /**
	   * Continues an observable sequence that is terminated by an exception with the next observable sequence.
	   * @example
	   * 1 - xs.catchException(ys)
	   * 2 - xs.catchException(function (ex) { return ys(ex); })
	   * @param {Mixed} handlerOrSecond Exception handler function that returns an observable sequence given the error that occurred in the first sequence, or a second observable sequence used to produce results when an error occurred in the first sequence.
	   * @returns {Observable} An observable sequence containing the first sequence's elements, followed by the elements of the handler sequence in case an exception occurred.
	   */
	  observableProto['catch'] = observableProto.catchError = observableProto.catchException = function (handlerOrSecond) {
	    return typeof handlerOrSecond === 'function' ?
	      observableCatchHandler(this, handlerOrSecond) :
	      observableCatch([this, handlerOrSecond]);
	  };

	  /**
	   * Continues an observable sequence that is terminated by an exception with the next observable sequence.
	   * @param {Array | Arguments} args Arguments or an array to use as the next sequence if an error occurs.
	   * @returns {Observable} An observable sequence containing elements from consecutive source sequences until a source sequence terminates successfully.
	   */
	  var observableCatch = Observable.catchError = Observable['catch'] = Observable.catchException = function () {
	    var items = [];
	    if (Array.isArray(arguments[0])) {
	      items = arguments[0];
	    } else {
	      for(var i = 0, len = arguments.length; i < len; i++) { items.push(arguments[i]); }
	    }
	    return enumerableOf(items).catchError();
	  };

	  /**
	   * Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences or Promises produces an element.
	   * This can be in the form of an argument list of observables or an array.
	   *
	   * @example
	   * 1 - obs = observable.combineLatest(obs1, obs2, obs3, function (o1, o2, o3) { return o1 + o2 + o3; });
	   * 2 - obs = observable.combineLatest([obs1, obs2, obs3], function (o1, o2, o3) { return o1 + o2 + o3; });
	   * @returns {Observable} An observable sequence containing the result of combining elements of the sources using the specified result selector function.
	   */
	  observableProto.combineLatest = function () {
	    var len = arguments.length, args = new Array(len);
	    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
	    if (Array.isArray(args[0])) {
	      args[0].unshift(this);
	    } else {
	      args.unshift(this);
	    }
	    return combineLatest.apply(this, args);
	  };

	  /**
	   * Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences or Promises produces an element.
	   *
	   * @example
	   * 1 - obs = Rx.Observable.combineLatest(obs1, obs2, obs3, function (o1, o2, o3) { return o1 + o2 + o3; });
	   * 2 - obs = Rx.Observable.combineLatest([obs1, obs2, obs3], function (o1, o2, o3) { return o1 + o2 + o3; });
	   * @returns {Observable} An observable sequence containing the result of combining elements of the sources using the specified result selector function.
	   */
	  var combineLatest = Observable.combineLatest = function () {
	    var len = arguments.length, args = new Array(len);
	    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
	    var resultSelector = args.pop();
	    Array.isArray(args[0]) && (args = args[0]);

	    return new AnonymousObservable(function (o) {
	      var n = args.length,
	        falseFactory = function () { return false; },
	        hasValue = arrayInitialize(n, falseFactory),
	        hasValueAll = false,
	        isDone = arrayInitialize(n, falseFactory),
	        values = new Array(n);

	      function next(i) {
	        hasValue[i] = true;
	        if (hasValueAll || (hasValueAll = hasValue.every(identity))) {
	          try {
	            var res = resultSelector.apply(null, values);
	          } catch (e) {
	            return o.onError(e);
	          }
	          o.onNext(res);
	        } else if (isDone.filter(function (x, j) { return j !== i; }).every(identity)) {
	          o.onCompleted();
	        }
	      }

	      function done (i) {
	        isDone[i] = true;
	        isDone.every(identity) && o.onCompleted();
	      }

	      var subscriptions = new Array(n);
	      for (var idx = 0; idx < n; idx++) {
	        (function (i) {
	          var source = args[i], sad = new SingleAssignmentDisposable();
	          isPromise(source) && (source = observableFromPromise(source));
	          sad.setDisposable(source.subscribe(function (x) {
	              values[i] = x;
	              next(i);
	            },
	            function(e) { o.onError(e); },
	            function () { done(i); }
	          ));
	          subscriptions[i] = sad;
	        }(idx));
	      }

	      return new CompositeDisposable(subscriptions);
	    }, this);
	  };

	  /**
	   * Concatenates all the observable sequences.  This takes in either an array or variable arguments to concatenate.
	   * @returns {Observable} An observable sequence that contains the elements of each given sequence, in sequential order.
	   */
	  observableProto.concat = function () {
	    for(var args = [], i = 0, len = arguments.length; i < len; i++) { args.push(arguments[i]); }
	    args.unshift(this);
	    return observableConcat.apply(null, args);
	  };

	  /**
	   * Concatenates all the observable sequences.
	   * @param {Array | Arguments} args Arguments or an array to concat to the observable sequence.
	   * @returns {Observable} An observable sequence that contains the elements of each given sequence, in sequential order.
	   */
	  var observableConcat = Observable.concat = function () {
	    var args;
	    if (Array.isArray(arguments[0])) {
	      args = arguments[0];
	    } else {
	      args = new Array(arguments.length);
	      for(var i = 0, len = arguments.length; i < len; i++) { args[i] = arguments[i]; }
	    }
	    return enumerableOf(args).concat();
	  };

	  /**
	   * Concatenates an observable sequence of observable sequences.
	   * @returns {Observable} An observable sequence that contains the elements of each observed inner sequence, in sequential order.
	   */
	  observableProto.concatAll = observableProto.concatObservable = function () {
	    return this.merge(1);
	  };

	  var MergeObservable = (function (__super__) {
	    inherits(MergeObservable, __super__);

	    function MergeObservable(source, maxConcurrent) {
	      this.source = source;
	      this.maxConcurrent = maxConcurrent;
	      __super__.call(this);
	    }

	    MergeObservable.prototype.subscribeCore = function(observer) {
	      var g = new CompositeDisposable();
	      g.add(this.source.subscribe(new MergeObserver(observer, this.maxConcurrent, g)));
	      return g;
	    };

	    return MergeObservable;

	  }(ObservableBase));

	  var MergeObserver = (function () {
	    function MergeObserver(o, max, g) {
	      this.o = o;
	      this.max = max;
	      this.g = g;
	      this.done = false;
	      this.q = [];
	      this.activeCount = 0;
	      this.isStopped = false;
	    }
	    MergeObserver.prototype.handleSubscribe = function (xs) {
	      var sad = new SingleAssignmentDisposable();
	      this.g.add(sad);
	      isPromise(xs) && (xs = observableFromPromise(xs));
	      sad.setDisposable(xs.subscribe(new InnerObserver(this, sad)));
	    };
	    MergeObserver.prototype.onNext = function (innerSource) {
	      if (this.isStopped) { return; }
	        if(this.activeCount < this.max) {
	          this.activeCount++;
	          this.handleSubscribe(innerSource);
	        } else {
	          this.q.push(innerSource);
	        }
	      };
	      MergeObserver.prototype.onError = function (e) {
	        if (!this.isStopped) {
	          this.isStopped = true;
	          this.o.onError(e);
	        }
	      };
	      MergeObserver.prototype.onCompleted = function () {
	        if (!this.isStopped) {
	          this.isStopped = true;
	          this.done = true;
	          this.activeCount === 0 && this.o.onCompleted();
	        }
	      };
	      MergeObserver.prototype.dispose = function() { this.isStopped = true; };
	      MergeObserver.prototype.fail = function (e) {
	        if (!this.isStopped) {
	          this.isStopped = true;
	          this.o.onError(e);
	          return true;
	        }

	        return false;
	      };

	      function InnerObserver(parent, sad) {
	        this.parent = parent;
	        this.sad = sad;
	        this.isStopped = false;
	      }
	      InnerObserver.prototype.onNext = function (x) { if(!this.isStopped) { this.parent.o.onNext(x); } };
	      InnerObserver.prototype.onError = function (e) {
	        if (!this.isStopped) {
	          this.isStopped = true;
	          this.parent.o.onError(e);
	        }
	      };
	      InnerObserver.prototype.onCompleted = function () {
	        if(!this.isStopped) {
	          this.isStopped = true;
	          var parent = this.parent;
	          parent.g.remove(this.sad);
	          if (parent.q.length > 0) {
	            parent.handleSubscribe(parent.q.shift());
	          } else {
	            parent.activeCount--;
	            parent.done && parent.activeCount === 0 && parent.o.onCompleted();
	          }
	        }
	      };
	      InnerObserver.prototype.dispose = function() { this.isStopped = true; };
	      InnerObserver.prototype.fail = function (e) {
	        if (!this.isStopped) {
	          this.isStopped = true;
	          this.parent.o.onError(e);
	          return true;
	        }

	        return false;
	      };

	      return MergeObserver;
	  }());





	  /**
	  * Merges an observable sequence of observable sequences into an observable sequence, limiting the number of concurrent subscriptions to inner sequences.
	  * Or merges two observable sequences into a single observable sequence.
	  *
	  * @example
	  * 1 - merged = sources.merge(1);
	  * 2 - merged = source.merge(otherSource);
	  * @param {Mixed} [maxConcurrentOrOther] Maximum number of inner observable sequences being subscribed to concurrently or the second observable sequence.
	  * @returns {Observable} The observable sequence that merges the elements of the inner sequences.
	  */
	  observableProto.merge = function (maxConcurrentOrOther) {
	    return typeof maxConcurrentOrOther !== 'number' ?
	      observableMerge(this, maxConcurrentOrOther) :
	      new MergeObservable(this, maxConcurrentOrOther);
	  };

	  /**
	   * Merges all the observable sequences into a single observable sequence.
	   * The scheduler is optional and if not specified, the immediate scheduler is used.
	   * @returns {Observable} The observable sequence that merges the elements of the observable sequences.
	   */
	  var observableMerge = Observable.merge = function () {
	    var scheduler, sources = [], i, len = arguments.length;
	    if (!arguments[0]) {
	      scheduler = immediateScheduler;
	      for(i = 1; i < len; i++) { sources.push(arguments[i]); }
	    } else if (isScheduler(arguments[0])) {
	      scheduler = arguments[0];
	      for(i = 1; i < len; i++) { sources.push(arguments[i]); }
	    } else {
	      scheduler = immediateScheduler;
	      for(i = 0; i < len; i++) { sources.push(arguments[i]); }
	    }
	    if (Array.isArray(sources[0])) {
	      sources = sources[0];
	    }
	    return observableOf(scheduler, sources).mergeAll();
	  };

	  var MergeAllObservable = (function (__super__) {
	    inherits(MergeAllObservable, __super__);

	    function MergeAllObservable(source) {
	      this.source = source;
	      __super__.call(this);
	    }

	    MergeAllObservable.prototype.subscribeCore = function (observer) {
	      var g = new CompositeDisposable(), m = new SingleAssignmentDisposable();
	      g.add(m);
	      m.setDisposable(this.source.subscribe(new MergeAllObserver(observer, g)));
	      return g;
	    };

	    return MergeAllObservable;
	  }(ObservableBase));

	  var MergeAllObserver = (function() {

	    function MergeAllObserver(o, g) {
	      this.o = o;
	      this.g = g;
	      this.isStopped = false;
	      this.done = false;
	    }
	    MergeAllObserver.prototype.onNext = function(innerSource) {
	      if(this.isStopped) { return; }
	      var sad = new SingleAssignmentDisposable();
	      this.g.add(sad);

	      isPromise(innerSource) && (innerSource = observableFromPromise(innerSource));

	      sad.setDisposable(innerSource.subscribe(new InnerObserver(this, this.g, sad)));
	    };
	    MergeAllObserver.prototype.onError = function (e) {
	      if(!this.isStopped) {
	        this.isStopped = true;
	        this.o.onError(e);
	      }
	    };
	    MergeAllObserver.prototype.onCompleted = function () {
	      if(!this.isStopped) {
	        this.isStopped = true;
	        this.done = true;
	        this.g.length === 1 && this.o.onCompleted();
	      }
	    };
	    MergeAllObserver.prototype.dispose = function() { this.isStopped = true; };
	    MergeAllObserver.prototype.fail = function (e) {
	      if (!this.isStopped) {
	        this.isStopped = true;
	        this.o.onError(e);
	        return true;
	      }

	      return false;
	    };

	    function InnerObserver(parent, g, sad) {
	      this.parent = parent;
	      this.g = g;
	      this.sad = sad;
	      this.isStopped = false;
	    }
	    InnerObserver.prototype.onNext = function (x) { if (!this.isStopped) { this.parent.o.onNext(x); } };
	    InnerObserver.prototype.onError = function (e) {
	      if(!this.isStopped) {
	        this.isStopped = true;
	        this.parent.o.onError(e);
	      }
	    };
	    InnerObserver.prototype.onCompleted = function () {
	      if(!this.isStopped) {
	        var parent = this.parent;
	        this.isStopped = true;
	        parent.g.remove(this.sad);
	        parent.done && parent.g.length === 1 && parent.o.onCompleted();
	      }
	    };
	    InnerObserver.prototype.dispose = function() { this.isStopped = true; };
	    InnerObserver.prototype.fail = function (e) {
	      if (!this.isStopped) {
	        this.isStopped = true;
	        this.parent.o.onError(e);
	        return true;
	      }

	      return false;
	    };

	    return MergeAllObserver;

	  }());

	  /**
	  * Merges an observable sequence of observable sequences into an observable sequence.
	  * @returns {Observable} The observable sequence that merges the elements of the inner sequences.
	  */
	  observableProto.mergeAll = observableProto.mergeObservable = function () {
	    return new MergeAllObservable(this);
	  };

	  var CompositeError = Rx.CompositeError = function(errors) {
	    this.name = "NotImplementedError";
	    this.innerErrors = errors;
	    this.message = 'This contains multiple errors. Check the innerErrors';
	    Error.call(this);
	  }
	  CompositeError.prototype = Error.prototype;

	  /**
	  * Flattens an Observable that emits Observables into one Observable, in a way that allows an Observer to
	  * receive all successfully emitted items from all of the source Observables without being interrupted by
	  * an error notification from one of them.
	  *
	  * This behaves like Observable.prototype.mergeAll except that if any of the merged Observables notify of an
	  * error via the Observer's onError, mergeDelayError will refrain from propagating that
	  * error notification until all of the merged Observables have finished emitting items.
	  * @param {Array | Arguments} args Arguments or an array to merge.
	  * @returns {Observable} an Observable that emits all of the items emitted by the Observables emitted by the Observable
	  */
	  Observable.mergeDelayError = function() {
	    var args;
	    if (Array.isArray(arguments[0])) {
	      args = arguments[0];
	    } else {
	      var len = arguments.length;
	      args = new Array(len);
	      for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
	    }
	    var source = observableOf(null, args);

	    return new AnonymousObservable(function (o) {
	      var group = new CompositeDisposable(),
	        m = new SingleAssignmentDisposable(),
	        isStopped = false,
	        errors = [];

	      function setCompletion() {
	        if (errors.length === 0) {
	          o.onCompleted();
	        } else if (errors.length === 1) {
	          o.onError(errors[0]);
	        } else {
	          o.onError(new CompositeError(errors));
	        }
	      }

	      group.add(m);

	      m.setDisposable(source.subscribe(
	        function (innerSource) {
	          var innerSubscription = new SingleAssignmentDisposable();
	          group.add(innerSubscription);

	          // Check for promises support
	          isPromise(innerSource) && (innerSource = observableFromPromise(innerSource));

	          innerSubscription.setDisposable(innerSource.subscribe(
	            function (x) { o.onNext(x); },
	            function (e) {
	              errors.push(e);
	              group.remove(innerSubscription);
	              isStopped && group.length === 1 && setCompletion();
	            },
	            function () {
	              group.remove(innerSubscription);
	              isStopped && group.length === 1 && setCompletion();
	          }));
	        },
	        function (e) {
	          errors.push(e);
	          isStopped = true;
	          group.length === 1 && setCompletion();
	        },
	        function () {
	          isStopped = true;
	          group.length === 1 && setCompletion();
	        }));
	      return group;
	    });
	  };

	  /**
	   * Continues an observable sequence that is terminated normally or by an exception with the next observable sequence.
	   * @param {Observable} second Second observable sequence used to produce results after the first sequence terminates.
	   * @returns {Observable} An observable sequence that concatenates the first and second sequence, even if the first sequence terminates exceptionally.
	   */
	  observableProto.onErrorResumeNext = function (second) {
	    if (!second) { throw new Error('Second observable is required'); }
	    return onErrorResumeNext([this, second]);
	  };

	  /**
	   * Continues an observable sequence that is terminated normally or by an exception with the next observable sequence.
	   *
	   * @example
	   * 1 - res = Rx.Observable.onErrorResumeNext(xs, ys, zs);
	   * 1 - res = Rx.Observable.onErrorResumeNext([xs, ys, zs]);
	   * @returns {Observable} An observable sequence that concatenates the source sequences, even if a sequence terminates exceptionally.
	   */
	  var onErrorResumeNext = Observable.onErrorResumeNext = function () {
	    var sources = [];
	    if (Array.isArray(arguments[0])) {
	      sources = arguments[0];
	    } else {
	      for(var i = 0, len = arguments.length; i < len; i++) { sources.push(arguments[i]); }
	    }
	    return new AnonymousObservable(function (observer) {
	      var pos = 0, subscription = new SerialDisposable(),
	      cancelable = immediateScheduler.scheduleRecursive(function (self) {
	        var current, d;
	        if (pos < sources.length) {
	          current = sources[pos++];
	          isPromise(current) && (current = observableFromPromise(current));
	          d = new SingleAssignmentDisposable();
	          subscription.setDisposable(d);
	          d.setDisposable(current.subscribe(observer.onNext.bind(observer), self, self));
	        } else {
	          observer.onCompleted();
	        }
	      });
	      return new CompositeDisposable(subscription, cancelable);
	    });
	  };

	  /**
	   * Returns the values from the source observable sequence only after the other observable sequence produces a value.
	   * @param {Observable | Promise} other The observable sequence or Promise that triggers propagation of elements of the source sequence.
	   * @returns {Observable} An observable sequence containing the elements of the source sequence starting from the point the other sequence triggered propagation.
	   */
	  observableProto.skipUntil = function (other) {
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      var isOpen = false;
	      var disposables = new CompositeDisposable(source.subscribe(function (left) {
	        isOpen && o.onNext(left);
	      }, function (e) { o.onError(e); }, function () {
	        isOpen && o.onCompleted();
	      }));

	      isPromise(other) && (other = observableFromPromise(other));

	      var rightSubscription = new SingleAssignmentDisposable();
	      disposables.add(rightSubscription);
	      rightSubscription.setDisposable(other.subscribe(function () {
	        isOpen = true;
	        rightSubscription.dispose();
	      }, function (e) { o.onError(e); }, function () {
	        rightSubscription.dispose();
	      }));

	      return disposables;
	    }, source);
	  };

	  /**
	   * Transforms an observable sequence of observable sequences into an observable sequence producing values only from the most recent observable sequence.
	   * @returns {Observable} The observable sequence that at any point in time produces the elements of the most recent inner observable sequence that has been received.
	   */
	  observableProto['switch'] = observableProto.switchLatest = function () {
	    var sources = this;
	    return new AnonymousObservable(function (observer) {
	      var hasLatest = false,
	        innerSubscription = new SerialDisposable(),
	        isStopped = false,
	        latest = 0,
	        subscription = sources.subscribe(
	          function (innerSource) {
	            var d = new SingleAssignmentDisposable(), id = ++latest;
	            hasLatest = true;
	            innerSubscription.setDisposable(d);

	            // Check if Promise or Observable
	            isPromise(innerSource) && (innerSource = observableFromPromise(innerSource));

	            d.setDisposable(innerSource.subscribe(
	              function (x) { latest === id && observer.onNext(x); },
	              function (e) { latest === id && observer.onError(e); },
	              function () {
	                if (latest === id) {
	                  hasLatest = false;
	                  isStopped && observer.onCompleted();
	                }
	              }));
	          },
	          function (e) { observer.onError(e); },
	          function () {
	            isStopped = true;
	            !hasLatest && observer.onCompleted();
	          });
	      return new CompositeDisposable(subscription, innerSubscription);
	    }, sources);
	  };

	  /**
	   * Returns the values from the source observable sequence until the other observable sequence produces a value.
	   * @param {Observable | Promise} other Observable sequence or Promise that terminates propagation of elements of the source sequence.
	   * @returns {Observable} An observable sequence containing the elements of the source sequence up to the point the other sequence interrupted further propagation.
	   */
	  observableProto.takeUntil = function (other) {
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      isPromise(other) && (other = observableFromPromise(other));
	      return new CompositeDisposable(
	        source.subscribe(o),
	        other.subscribe(function () { o.onCompleted(); }, function (e) { o.onError(e); }, noop)
	      );
	    }, source);
	  };

	  /**
	   * Merges the specified observable sequences into one observable sequence by using the selector function only when the (first) source observable sequence produces an element.
	   *
	   * @example
	   * 1 - obs = obs1.withLatestFrom(obs2, obs3, function (o1, o2, o3) { return o1 + o2 + o3; });
	   * 2 - obs = obs1.withLatestFrom([obs2, obs3], function (o1, o2, o3) { return o1 + o2 + o3; });
	   * @returns {Observable} An observable sequence containing the result of combining elements of the sources using the specified result selector function.
	   */
	  observableProto.withLatestFrom = function () {
	    var len = arguments.length, args = new Array(len)
	    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
	    var resultSelector = args.pop(), source = this;

	    if (typeof source === 'undefined') {
	      throw new Error('Source observable not found for withLatestFrom().');
	    }
	    if (typeof resultSelector !== 'function') {
	      throw new Error('withLatestFrom() expects a resultSelector function.');
	    }
	    if (Array.isArray(args[0])) {
	      args = args[0];
	    }

	    return new AnonymousObservable(function (observer) {
	      var falseFactory = function () { return false; },
	        n = args.length,
	        hasValue = arrayInitialize(n, falseFactory),
	        hasValueAll = false,
	        values = new Array(n);

	      var subscriptions = new Array(n + 1);
	      for (var idx = 0; idx < n; idx++) {
	        (function (i) {
	          var other = args[i], sad = new SingleAssignmentDisposable();
	          isPromise(other) && (other = observableFromPromise(other));
	          sad.setDisposable(other.subscribe(function (x) {
	            values[i] = x;
	            hasValue[i] = true;
	            hasValueAll = hasValue.every(identity);
	          }, observer.onError.bind(observer), function () {}));
	          subscriptions[i] = sad;
	        }(idx));
	      }

	      var sad = new SingleAssignmentDisposable();
	      sad.setDisposable(source.subscribe(function (x) {
	        var res;
	        var allValues = [x].concat(values);
	        if (!hasValueAll) return;
	        try {
	          res = resultSelector.apply(null, allValues);
	        } catch (ex) {
	          observer.onError(ex);
	          return;
	        }
	        observer.onNext(res);
	      }, observer.onError.bind(observer), function () {
	        observer.onCompleted();
	      }));
	      subscriptions[n] = sad;

	      return new CompositeDisposable(subscriptions);
	    }, this);
	  };

	  function zipArray(second, resultSelector) {
	    var first = this;
	    return new AnonymousObservable(function (observer) {
	      var index = 0, len = second.length;
	      return first.subscribe(function (left) {
	        if (index < len) {
	          var right = second[index++], result;
	          try {
	            result = resultSelector(left, right);
	          } catch (e) {
	            return observer.onError(e);
	          }
	          observer.onNext(result);
	        } else {
	          observer.onCompleted();
	        }
	      }, function (e) { observer.onError(e); }, function () { observer.onCompleted(); });
	    }, first);
	  }

	  function falseFactory() { return false; }
	  function emptyArrayFactory() { return []; }

	  /**
	   * Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences or an array have produced an element at a corresponding index.
	   * The last element in the arguments must be a function to invoke for each series of elements at corresponding indexes in the args.
	   *
	   * @example
	   * 1 - res = obs1.zip(obs2, fn);
	   * 1 - res = x1.zip([1,2,3], fn);
	   * @returns {Observable} An observable sequence containing the result of combining elements of the args using the specified result selector function.
	   */
	  observableProto.zip = function () {
	    if (Array.isArray(arguments[0])) { return zipArray.apply(this, arguments); }
	    var len = arguments.length, args = new Array(len);
	    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }

	    var parent = this, resultSelector = args.pop();
	    args.unshift(parent);
	    return new AnonymousObservable(function (observer) {
	      var n = args.length,
	        queues = arrayInitialize(n, emptyArrayFactory),
	        isDone = arrayInitialize(n, falseFactory);

	      function next(i) {
	        var res, queuedValues;
	        if (queues.every(function (x) { return x.length > 0; })) {
	          try {
	            queuedValues = queues.map(function (x) { return x.shift(); });
	            res = resultSelector.apply(parent, queuedValues);
	          } catch (ex) {
	            observer.onError(ex);
	            return;
	          }
	          observer.onNext(res);
	        } else if (isDone.filter(function (x, j) { return j !== i; }).every(identity)) {
	          observer.onCompleted();
	        }
	      };

	      function done(i) {
	        isDone[i] = true;
	        if (isDone.every(function (x) { return x; })) {
	          observer.onCompleted();
	        }
	      }

	      var subscriptions = new Array(n);
	      for (var idx = 0; idx < n; idx++) {
	        (function (i) {
	          var source = args[i], sad = new SingleAssignmentDisposable();
	          isPromise(source) && (source = observableFromPromise(source));
	          sad.setDisposable(source.subscribe(function (x) {
	            queues[i].push(x);
	            next(i);
	          }, function (e) { observer.onError(e); }, function () {
	            done(i);
	          }));
	          subscriptions[i] = sad;
	        })(idx);
	      }

	      return new CompositeDisposable(subscriptions);
	    }, parent);
	  };

	  /**
	   * Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
	   * @param arguments Observable sources.
	   * @param {Function} resultSelector Function to invoke for each series of elements at corresponding indexes in the sources.
	   * @returns {Observable} An observable sequence containing the result of combining elements of the sources using the specified result selector function.
	   */
	  Observable.zip = function () {
	    var len = arguments.length, args = new Array(len);
	    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
	    var first = args.shift();
	    return first.zip.apply(first, args);
	  };

	  /**
	   * Merges the specified observable sequences into one observable sequence by emitting a list with the elements of the observable sequences at corresponding indexes.
	   * @param arguments Observable sources.
	   * @returns {Observable} An observable sequence containing lists of elements at corresponding indexes.
	   */
	  Observable.zipArray = function () {
	    var sources;
	    if (Array.isArray(arguments[0])) {
	      sources = arguments[0];
	    } else {
	      var len = arguments.length;
	      sources = new Array(len);
	      for(var i = 0; i < len; i++) { sources[i] = arguments[i]; }
	    }
	    return new AnonymousObservable(function (observer) {
	      var n = sources.length,
	        queues = arrayInitialize(n, function () { return []; }),
	        isDone = arrayInitialize(n, function () { return false; });

	      function next(i) {
	        if (queues.every(function (x) { return x.length > 0; })) {
	          var res = queues.map(function (x) { return x.shift(); });
	          observer.onNext(res);
	        } else if (isDone.filter(function (x, j) { return j !== i; }).every(identity)) {
	          observer.onCompleted();
	          return;
	        }
	      };

	      function done(i) {
	        isDone[i] = true;
	        if (isDone.every(identity)) {
	          observer.onCompleted();
	          return;
	        }
	      }

	      var subscriptions = new Array(n);
	      for (var idx = 0; idx < n; idx++) {
	        (function (i) {
	          subscriptions[i] = new SingleAssignmentDisposable();
	          subscriptions[i].setDisposable(sources[i].subscribe(function (x) {
	            queues[i].push(x);
	            next(i);
	          }, function (e) { observer.onError(e); }, function () {
	            done(i);
	          }));
	        })(idx);
	      }

	      return new CompositeDisposable(subscriptions);
	    });
	  };

	  /**
	   *  Hides the identity of an observable sequence.
	   * @returns {Observable} An observable sequence that hides the identity of the source sequence.
	   */
	  observableProto.asObservable = function () {
	    var source = this;
	    return new AnonymousObservable(function (o) { return source.subscribe(o); }, this);
	  };

	  /**
	   *  Projects each element of an observable sequence into zero or more buffers which are produced based on element count information.
	   *
	   * @example
	   *  var res = xs.bufferWithCount(10);
	   *  var res = xs.bufferWithCount(10, 1);
	   * @param {Number} count Length of each buffer.
	   * @param {Number} [skip] Number of elements to skip between creation of consecutive buffers. If not provided, defaults to the count.
	   * @returns {Observable} An observable sequence of buffers.
	   */
	  observableProto.bufferWithCount = function (count, skip) {
	    if (typeof skip !== 'number') {
	      skip = count;
	    }
	    return this.windowWithCount(count, skip).selectMany(function (x) {
	      return x.toArray();
	    }).where(function (x) {
	      return x.length > 0;
	    });
	  };

	  /**
	   * Dematerializes the explicit notification values of an observable sequence as implicit notifications.
	   * @returns {Observable} An observable sequence exhibiting the behavior corresponding to the source sequence's notification values.
	   */
	  observableProto.dematerialize = function () {
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      return source.subscribe(function (x) { return x.accept(o); }, function(e) { o.onError(e); }, function () { o.onCompleted(); });
	    }, this);
	  };

	  /**
	   *  Returns an observable sequence that contains only distinct contiguous elements according to the keySelector and the comparer.
	   *
	   *  var obs = observable.distinctUntilChanged();
	   *  var obs = observable.distinctUntilChanged(function (x) { return x.id; });
	   *  var obs = observable.distinctUntilChanged(function (x) { return x.id; }, function (x, y) { return x === y; });
	   *
	   * @param {Function} [keySelector] A function to compute the comparison key for each element. If not provided, it projects the value.
	   * @param {Function} [comparer] Equality comparer for computed key values. If not provided, defaults to an equality comparer function.
	   * @returns {Observable} An observable sequence only containing the distinct contiguous elements, based on a computed key value, from the source sequence.
	   */
	  observableProto.distinctUntilChanged = function (keySelector, comparer) {
	    var source = this;
	    comparer || (comparer = defaultComparer);
	    return new AnonymousObservable(function (o) {
	      var hasCurrentKey = false, currentKey;
	      return source.subscribe(function (value) {
	        var key = value;
	        if (keySelector) {
	          try {
	            key = keySelector(value);
	          } catch (e) {
	            o.onError(e);
	            return;
	          }
	        }
	        if (hasCurrentKey) {
	          try {
	            var comparerEquals = comparer(currentKey, key);
	          } catch (e) {
	            o.onError(e);
	            return;
	          }
	        }
	        if (!hasCurrentKey || !comparerEquals) {
	          hasCurrentKey = true;
	          currentKey = key;
	          o.onNext(value);
	        }
	      }, function (e) { o.onError(e); }, function () { o.onCompleted(); });
	    }, this);
	  };

	  /**
	   *  Invokes an action for each element in the observable sequence and invokes an action upon graceful or exceptional termination of the observable sequence.
	   *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.
	   * @param {Function | Observer} observerOrOnNext Action to invoke for each element in the observable sequence or an observer.
	   * @param {Function} [onError]  Action to invoke upon exceptional termination of the observable sequence. Used if only the observerOrOnNext parameter is also a function.
	   * @param {Function} [onCompleted]  Action to invoke upon graceful termination of the observable sequence. Used if only the observerOrOnNext parameter is also a function.
	   * @returns {Observable} The source sequence with the side-effecting behavior applied.
	   */
	  observableProto['do'] = observableProto.tap = observableProto.doAction = function (observerOrOnNext, onError, onCompleted) {
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      var tapObserver = !observerOrOnNext || isFunction(observerOrOnNext) ?
	        observerCreate(observerOrOnNext || noop, onError || noop, onCompleted || noop) :
	        observerOrOnNext;

	      return source.subscribe(function (x) {
	        try {
	          tapObserver.onNext(x);
	        } catch (e) {
	          observer.onError(e);
	        }
	        observer.onNext(x);
	      }, function (err) {
	          try {
	            tapObserver.onError(err);
	          } catch (e) {
	            observer.onError(e);
	          }
	        observer.onError(err);
	      }, function () {
	        try {
	          tapObserver.onCompleted();
	        } catch (e) {
	          observer.onError(e);
	        }
	        observer.onCompleted();
	      });
	    }, this);
	  };

	  /**
	   *  Invokes an action for each element in the observable sequence.
	   *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.
	   * @param {Function} onNext Action to invoke for each element in the observable sequence.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} The source sequence with the side-effecting behavior applied.
	   */
	  observableProto.doOnNext = observableProto.tapOnNext = function (onNext, thisArg) {
	    return this.tap(typeof thisArg !== 'undefined' ? function (x) { onNext.call(thisArg, x); } : onNext);
	  };

	  /**
	   *  Invokes an action upon exceptional termination of the observable sequence.
	   *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.
	   * @param {Function} onError Action to invoke upon exceptional termination of the observable sequence.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} The source sequence with the side-effecting behavior applied.
	   */
	  observableProto.doOnError = observableProto.tapOnError = function (onError, thisArg) {
	    return this.tap(noop, typeof thisArg !== 'undefined' ? function (e) { onError.call(thisArg, e); } : onError);
	  };

	  /**
	   *  Invokes an action upon graceful termination of the observable sequence.
	   *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.
	   * @param {Function} onCompleted Action to invoke upon graceful termination of the observable sequence.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} The source sequence with the side-effecting behavior applied.
	   */
	  observableProto.doOnCompleted = observableProto.tapOnCompleted = function (onCompleted, thisArg) {
	    return this.tap(noop, null, typeof thisArg !== 'undefined' ? function () { onCompleted.call(thisArg); } : onCompleted);
	  };

	  /**
	   *  Invokes a specified action after the source observable sequence terminates gracefully or exceptionally.
	   * @param {Function} finallyAction Action to invoke after the source observable sequence terminates.
	   * @returns {Observable} Source sequence with the action-invoking termination behavior applied.
	   */
	  observableProto['finally'] = observableProto.ensure = function (action) {
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      var subscription;
	      try {
	        subscription = source.subscribe(observer);
	      } catch (e) {
	        action();
	        throw e;
	      }
	      return disposableCreate(function () {
	        try {
	          subscription.dispose();
	        } catch (e) {
	          throw e;
	        } finally {
	          action();
	        }
	      });
	    }, this);
	  };

	  /**
	   * @deprecated use #finally or #ensure instead.
	   */
	  observableProto.finallyAction = function (action) {
	    //deprecate('finallyAction', 'finally or ensure');
	    return this.ensure(action);
	  };

	  /**
	   *  Ignores all elements in an observable sequence leaving only the termination messages.
	   * @returns {Observable} An empty observable sequence that signals termination, successful or exceptional, of the source sequence.
	   */
	  observableProto.ignoreElements = function () {
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      return source.subscribe(noop, function (e) { o.onError(e); }, function () { o.onCompleted(); });
	    }, source);
	  };

	  /**
	   *  Materializes the implicit notifications of an observable sequence as explicit notification values.
	   * @returns {Observable} An observable sequence containing the materialized notification values from the source sequence.
	   */
	  observableProto.materialize = function () {
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      return source.subscribe(function (value) {
	        observer.onNext(notificationCreateOnNext(value));
	      }, function (e) {
	        observer.onNext(notificationCreateOnError(e));
	        observer.onCompleted();
	      }, function () {
	        observer.onNext(notificationCreateOnCompleted());
	        observer.onCompleted();
	      });
	    }, source);
	  };

	  /**
	   *  Repeats the observable sequence a specified number of times. If the repeat count is not specified, the sequence repeats indefinitely.
	   * @param {Number} [repeatCount]  Number of times to repeat the sequence. If not provided, repeats the sequence indefinitely.
	   * @returns {Observable} The observable sequence producing the elements of the given sequence repeatedly.
	   */
	  observableProto.repeat = function (repeatCount) {
	    return enumerableRepeat(this, repeatCount).concat();
	  };

	  /**
	   *  Repeats the source observable sequence the specified number of times or until it successfully terminates. If the retry count is not specified, it retries indefinitely.
	   *  Note if you encounter an error and want it to retry once, then you must use .retry(2);
	   *
	   * @example
	   *  var res = retried = retry.repeat();
	   *  var res = retried = retry.repeat(2);
	   * @param {Number} [retryCount]  Number of times to retry the sequence. If not provided, retry the sequence indefinitely.
	   * @returns {Observable} An observable sequence producing the elements of the given sequence repeatedly until it terminates successfully.
	   */
	  observableProto.retry = function (retryCount) {
	    return enumerableRepeat(this, retryCount).catchError();
	  };

	  /**
	   *  Repeats the source observable sequence upon error each time the notifier emits or until it successfully terminates. 
	   *  if the notifier completes, the observable sequence completes.
	   *
	   * @example
	   *  var timer = Observable.timer(500);
	   *  var source = observable.retryWhen(timer);
	   * @param {Observable} [notifier] An observable that triggers the retries or completes the observable with onNext or onCompleted respectively.
	   * @returns {Observable} An observable sequence producing the elements of the given sequence repeatedly until it terminates successfully.
	   */
	  observableProto.retryWhen = function (notifier) {
	    return enumerableRepeat(this).catchErrorWhen(notifier);
	  };
	  /**
	   *  Applies an accumulator function over an observable sequence and returns each intermediate result. The optional seed value is used as the initial accumulator value.
	   *  For aggregation behavior with no intermediate results, see Observable.aggregate.
	   * @example
	   *  var res = source.scan(function (acc, x) { return acc + x; });
	   *  var res = source.scan(0, function (acc, x) { return acc + x; });
	   * @param {Mixed} [seed] The initial accumulator value.
	   * @param {Function} accumulator An accumulator function to be invoked on each element.
	   * @returns {Observable} An observable sequence containing the accumulated values.
	   */
	  observableProto.scan = function () {
	    var hasSeed = false, seed, accumulator, source = this;
	    if (arguments.length === 2) {
	      hasSeed = true;
	      seed = arguments[0];
	      accumulator = arguments[1];
	    } else {
	      accumulator = arguments[0];
	    }
	    return new AnonymousObservable(function (o) {
	      var hasAccumulation, accumulation, hasValue;
	      return source.subscribe (
	        function (x) {
	          !hasValue && (hasValue = true);
	          try {
	            if (hasAccumulation) {
	              accumulation = accumulator(accumulation, x);
	            } else {
	              accumulation = hasSeed ? accumulator(seed, x) : x;
	              hasAccumulation = true;
	            }
	          } catch (e) {
	            o.onError(e);
	            return;
	          }

	          o.onNext(accumulation);
	        },
	        function (e) { o.onError(e); },
	        function () {
	          !hasValue && hasSeed && o.onNext(seed);
	          o.onCompleted();
	        }
	      );
	    }, source);
	  };

	  /**
	   *  Bypasses a specified number of elements at the end of an observable sequence.
	   * @description
	   *  This operator accumulates a queue with a length enough to store the first `count` elements. As more elements are
	   *  received, elements are taken from the front of the queue and produced on the result sequence. This causes elements to be delayed.
	   * @param count Number of elements to bypass at the end of the source sequence.
	   * @returns {Observable} An observable sequence containing the source sequence elements except for the bypassed ones at the end.
	   */
	  observableProto.skipLast = function (count) {
	    if (count < 0) { throw new ArgumentOutOfRangeError(); }
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      var q = [];
	      return source.subscribe(function (x) {
	        q.push(x);
	        q.length > count && o.onNext(q.shift());
	      }, function (e) { o.onError(e); }, function () { o.onCompleted(); });
	    }, source);
	  };

	  /**
	   *  Prepends a sequence of values to an observable sequence with an optional scheduler and an argument list of values to prepend.
	   *  @example
	   *  var res = source.startWith(1, 2, 3);
	   *  var res = source.startWith(Rx.Scheduler.timeout, 1, 2, 3);
	   * @param {Arguments} args The specified values to prepend to the observable sequence
	   * @returns {Observable} The source sequence prepended with the specified values.
	   */
	  observableProto.startWith = function () {
	    var values, scheduler, start = 0;
	    if (!!arguments.length && isScheduler(arguments[0])) {
	      scheduler = arguments[0];
	      start = 1;
	    } else {
	      scheduler = immediateScheduler;
	    }
	    for(var args = [], i = start, len = arguments.length; i < len; i++) { args.push(arguments[i]); }
	    return enumerableOf([observableFromArray(args, scheduler), this]).concat();
	  };

	  /**
	   *  Returns a specified number of contiguous elements from the end of an observable sequence.
	   * @description
	   *  This operator accumulates a buffer with a length enough to store elements count elements. Upon completion of
	   *  the source sequence, this buffer is drained on the result sequence. This causes the elements to be delayed.
	   * @param {Number} count Number of elements to take from the end of the source sequence.
	   * @returns {Observable} An observable sequence containing the specified number of elements from the end of the source sequence.
	   */
	  observableProto.takeLast = function (count) {
	    if (count < 0) { throw new ArgumentOutOfRangeError(); }
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      var q = [];
	      return source.subscribe(function (x) {
	        q.push(x);
	        q.length > count && q.shift();
	      }, function (e) { o.onError(e); }, function () {
	        while (q.length > 0) { o.onNext(q.shift()); }
	        o.onCompleted();
	      });
	    }, source);
	  };

	  /**
	   *  Returns an array with the specified number of contiguous elements from the end of an observable sequence.
	   *
	   * @description
	   *  This operator accumulates a buffer with a length enough to store count elements. Upon completion of the
	   *  source sequence, this buffer is produced on the result sequence.
	   * @param {Number} count Number of elements to take from the end of the source sequence.
	   * @returns {Observable} An observable sequence containing a single array with the specified number of elements from the end of the source sequence.
	   */
	  observableProto.takeLastBuffer = function (count) {
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      var q = [];
	      return source.subscribe(function (x) {
	        q.push(x);
	        q.length > count && q.shift();
	      }, function (e) { o.onError(e); }, function () {
	        o.onNext(q);
	        o.onCompleted();
	      });
	    }, source);
	  };

	  /**
	   *  Projects each element of an observable sequence into zero or more windows which are produced based on element count information.
	   *
	   *  var res = xs.windowWithCount(10);
	   *  var res = xs.windowWithCount(10, 1);
	   * @param {Number} count Length of each window.
	   * @param {Number} [skip] Number of elements to skip between creation of consecutive windows. If not specified, defaults to the count.
	   * @returns {Observable} An observable sequence of windows.
	   */
	  observableProto.windowWithCount = function (count, skip) {
	    var source = this;
	    +count || (count = 0);
	    Math.abs(count) === Infinity && (count = 0);
	    if (count <= 0) { throw new ArgumentOutOfRangeError(); }
	    skip == null && (skip = count);
	    +skip || (skip = 0);
	    Math.abs(skip) === Infinity && (skip = 0);

	    if (skip <= 0) { throw new ArgumentOutOfRangeError(); }
	    return new AnonymousObservable(function (observer) {
	      var m = new SingleAssignmentDisposable(),
	        refCountDisposable = new RefCountDisposable(m),
	        n = 0,
	        q = [];

	      function createWindow () {
	        var s = new Subject();
	        q.push(s);
	        observer.onNext(addRef(s, refCountDisposable));
	      }

	      createWindow();

	      m.setDisposable(source.subscribe(
	        function (x) {
	          for (var i = 0, len = q.length; i < len; i++) { q[i].onNext(x); }
	          var c = n - count + 1;
	          c >= 0 && c % skip === 0 && q.shift().onCompleted();
	          ++n % skip === 0 && createWindow();
	        },
	        function (e) {
	          while (q.length > 0) { q.shift().onError(e); }
	          observer.onError(e);
	        },
	        function () {
	          while (q.length > 0) { q.shift().onCompleted(); }
	          observer.onCompleted();
	        }
	      ));
	      return refCountDisposable;
	    }, source);
	  };

	  function concatMap(source, selector, thisArg) {
	    var selectorFunc = bindCallback(selector, thisArg, 3);
	    return source.map(function (x, i) {
	      var result = selectorFunc(x, i, source);
	      isPromise(result) && (result = observableFromPromise(result));
	      (isArrayLike(result) || isIterable(result)) && (result = observableFrom(result));
	      return result;
	    }).concatAll();
	  }

	  /**
	   *  One of the Following:
	   *  Projects each element of an observable sequence to an observable sequence and merges the resulting observable sequences into one observable sequence.
	   *
	   * @example
	   *  var res = source.concatMap(function (x) { return Rx.Observable.range(0, x); });
	   *  Or:
	   *  Projects each element of an observable sequence to an observable sequence, invokes the result selector for the source element and each of the corresponding inner sequence's elements, and merges the results into one observable sequence.
	   *
	   *  var res = source.concatMap(function (x) { return Rx.Observable.range(0, x); }, function (x, y) { return x + y; });
	   *  Or:
	   *  Projects each element of the source observable sequence to the other observable sequence and merges the resulting observable sequences into one observable sequence.
	   *
	   *  var res = source.concatMap(Rx.Observable.fromArray([1,2,3]));
	   * @param {Function} selector A transform function to apply to each element or an observable sequence to project each element from the
	   * source sequence onto which could be either an observable or Promise.
	   * @param {Function} [resultSelector]  A transform function to apply to each element of the intermediate sequence.
	   * @returns {Observable} An observable sequence whose elements are the result of invoking the one-to-many transform function collectionSelector on each element of the input sequence and then mapping each of those sequence elements and their corresponding source element to a result element.
	   */
	  observableProto.selectConcat = observableProto.concatMap = function (selector, resultSelector, thisArg) {
	    if (isFunction(selector) && isFunction(resultSelector)) {
	      return this.concatMap(function (x, i) {
	        var selectorResult = selector(x, i);
	        isPromise(selectorResult) && (selectorResult = observableFromPromise(selectorResult));
	        (isArrayLike(selectorResult) || isIterable(selectorResult)) && (selectorResult = observableFrom(selectorResult));

	        return selectorResult.map(function (y, i2) {
	          return resultSelector(x, y, i, i2);
	        });
	      });
	    }
	    return isFunction(selector) ?
	      concatMap(this, selector, thisArg) :
	      concatMap(this, function () { return selector; });
	  };

	  /**
	   * Projects each notification of an observable sequence to an observable sequence and concats the resulting observable sequences into one observable sequence.
	   * @param {Function} onNext A transform function to apply to each element; the second parameter of the function represents the index of the source element.
	   * @param {Function} onError A transform function to apply when an error occurs in the source sequence.
	   * @param {Function} onCompleted A transform function to apply when the end of the source sequence is reached.
	   * @param {Any} [thisArg] An optional "this" to use to invoke each transform.
	   * @returns {Observable} An observable sequence whose elements are the result of invoking the one-to-many transform function corresponding to each notification in the input sequence.
	   */
	  observableProto.concatMapObserver = observableProto.selectConcatObserver = function(onNext, onError, onCompleted, thisArg) {
	    var source = this,
	        onNextFunc = bindCallback(onNext, thisArg, 2),
	        onErrorFunc = bindCallback(onError, thisArg, 1),
	        onCompletedFunc = bindCallback(onCompleted, thisArg, 0);
	    return new AnonymousObservable(function (observer) {
	      var index = 0;
	      return source.subscribe(
	        function (x) {
	          var result;
	          try {
	            result = onNextFunc(x, index++);
	          } catch (e) {
	            observer.onError(e);
	            return;
	          }
	          isPromise(result) && (result = observableFromPromise(result));
	          observer.onNext(result);
	        },
	        function (err) {
	          var result;
	          try {
	            result = onErrorFunc(err);
	          } catch (e) {
	            observer.onError(e);
	            return;
	          }
	          isPromise(result) && (result = observableFromPromise(result));
	          observer.onNext(result);
	          observer.onCompleted();
	        },
	        function () {
	          var result;
	          try {
	            result = onCompletedFunc();
	          } catch (e) {
	            observer.onError(e);
	            return;
	          }
	          isPromise(result) && (result = observableFromPromise(result));
	          observer.onNext(result);
	          observer.onCompleted();
	        });
	    }, this).concatAll();
	  };

	    /**
	     *  Returns the elements of the specified sequence or the specified value in a singleton sequence if the sequence is empty.
	     *
	     *  var res = obs = xs.defaultIfEmpty();
	     *  2 - obs = xs.defaultIfEmpty(false);
	     *
	     * @memberOf Observable#
	     * @param defaultValue The value to return if the sequence is empty. If not provided, this defaults to null.
	     * @returns {Observable} An observable sequence that contains the specified default value if the source is empty; otherwise, the elements of the source itself.
	     */
	    observableProto.defaultIfEmpty = function (defaultValue) {
	      var source = this;
	      defaultValue === undefined && (defaultValue = null);
	      return new AnonymousObservable(function (observer) {
	        var found = false;
	        return source.subscribe(function (x) {
	          found = true;
	          observer.onNext(x);
	        },
	        function (e) { observer.onError(e); }, 
	        function () {
	          !found && observer.onNext(defaultValue);
	          observer.onCompleted();
	        });
	      }, source);
	    };

	  // Swap out for Array.findIndex
	  function arrayIndexOfComparer(array, item, comparer) {
	    for (var i = 0, len = array.length; i < len; i++) {
	      if (comparer(array[i], item)) { return i; }
	    }
	    return -1;
	  }

	  function HashSet(comparer) {
	    this.comparer = comparer;
	    this.set = [];
	  }
	  HashSet.prototype.push = function(value) {
	    var retValue = arrayIndexOfComparer(this.set, value, this.comparer) === -1;
	    retValue && this.set.push(value);
	    return retValue;
	  };

	  /**
	   *  Returns an observable sequence that contains only distinct elements according to the keySelector and the comparer.
	   *  Usage of this operator should be considered carefully due to the maintenance of an internal lookup structure which can grow large.
	   *
	   * @example
	   *  var res = obs = xs.distinct();
	   *  2 - obs = xs.distinct(function (x) { return x.id; });
	   *  2 - obs = xs.distinct(function (x) { return x.id; }, function (a,b) { return a === b; });
	   * @param {Function} [keySelector]  A function to compute the comparison key for each element.
	   * @param {Function} [comparer]  Used to compare items in the collection.
	   * @returns {Observable} An observable sequence only containing the distinct elements, based on a computed key value, from the source sequence.
	   */
	  observableProto.distinct = function (keySelector, comparer) {
	    var source = this;
	    comparer || (comparer = defaultComparer);
	    return new AnonymousObservable(function (o) {
	      var hashSet = new HashSet(comparer);
	      return source.subscribe(function (x) {
	        var key = x;

	        if (keySelector) {
	          try {
	            key = keySelector(x);
	          } catch (e) {
	            o.onError(e);
	            return;
	          }
	        }
	        hashSet.push(key) && o.onNext(x);
	      },
	      function (e) { o.onError(e); }, function () { o.onCompleted(); });
	    }, this);
	  };

	  /**
	   *  Groups the elements of an observable sequence according to a specified key selector function and comparer and selects the resulting elements by using a specified function.
	   *
	   * @example
	   *  var res = observable.groupBy(function (x) { return x.id; });
	   *  2 - observable.groupBy(function (x) { return x.id; }), function (x) { return x.name; });
	   *  3 - observable.groupBy(function (x) { return x.id; }), function (x) { return x.name; }, function (x) { return x.toString(); });
	   * @param {Function} keySelector A function to extract the key for each element.
	   * @param {Function} [elementSelector]  A function to map each source element to an element in an observable group.
	   * @param {Function} [comparer] Used to determine whether the objects are equal.
	   * @returns {Observable} A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.
	   */
	  observableProto.groupBy = function (keySelector, elementSelector, comparer) {
	    return this.groupByUntil(keySelector, elementSelector, observableNever, comparer);
	  };

	    /**
	     *  Groups the elements of an observable sequence according to a specified key selector function.
	     *  A duration selector function is used to control the lifetime of groups. When a group expires, it receives an OnCompleted notification. When a new element with the same
	     *  key value as a reclaimed group occurs, the group will be reborn with a new lifetime request.
	     *
	     * @example
	     *  var res = observable.groupByUntil(function (x) { return x.id; }, null,  function () { return Rx.Observable.never(); });
	     *  2 - observable.groupBy(function (x) { return x.id; }), function (x) { return x.name; },  function () { return Rx.Observable.never(); });
	     *  3 - observable.groupBy(function (x) { return x.id; }), function (x) { return x.name; },  function () { return Rx.Observable.never(); }, function (x) { return x.toString(); });
	     * @param {Function} keySelector A function to extract the key for each element.
	     * @param {Function} durationSelector A function to signal the expiration of a group.
	     * @param {Function} [comparer] Used to compare objects. When not specified, the default comparer is used.
	     * @returns {Observable}
	     *  A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.
	     *  If a group's lifetime expires, a new group with the same key value can be created once an element with such a key value is encoutered.
	     *
	     */
	    observableProto.groupByUntil = function (keySelector, elementSelector, durationSelector, comparer) {
	      var source = this;
	      elementSelector || (elementSelector = identity);
	      comparer || (comparer = defaultComparer);
	      return new AnonymousObservable(function (observer) {
	        function handleError(e) { return function (item) { item.onError(e); }; }
	        var map = new Dictionary(0, comparer),
	          groupDisposable = new CompositeDisposable(),
	          refCountDisposable = new RefCountDisposable(groupDisposable);

	        groupDisposable.add(source.subscribe(function (x) {
	          var key;
	          try {
	            key = keySelector(x);
	          } catch (e) {
	            map.getValues().forEach(handleError(e));
	            observer.onError(e);
	            return;
	          }

	          var fireNewMapEntry = false,
	            writer = map.tryGetValue(key);
	          if (!writer) {
	            writer = new Subject();
	            map.set(key, writer);
	            fireNewMapEntry = true;
	          }

	          if (fireNewMapEntry) {
	            var group = new GroupedObservable(key, writer, refCountDisposable),
	              durationGroup = new GroupedObservable(key, writer);
	            try {
	              duration = durationSelector(durationGroup);
	            } catch (e) {
	              map.getValues().forEach(handleError(e));
	              observer.onError(e);
	              return;
	            }

	            observer.onNext(group);

	            var md = new SingleAssignmentDisposable();
	            groupDisposable.add(md);

	            var expire = function () {
	              map.remove(key) && writer.onCompleted();
	              groupDisposable.remove(md);
	            };

	            md.setDisposable(duration.take(1).subscribe(
	              noop,
	              function (exn) {
	                map.getValues().forEach(handleError(exn));
	                observer.onError(exn);
	              },
	              expire)
	            );
	          }

	          var element;
	          try {
	            element = elementSelector(x);
	          } catch (e) {
	            map.getValues().forEach(handleError(e));
	            observer.onError(e);
	            return;
	          }

	          writer.onNext(element);
	      }, function (ex) {
	        map.getValues().forEach(handleError(ex));
	        observer.onError(ex);
	      }, function () {
	        map.getValues().forEach(function (item) { item.onCompleted(); });
	        observer.onCompleted();
	      }));

	      return refCountDisposable;
	    }, source);
	  };

	  var MapObservable = (function (__super__) {
	    inherits(MapObservable, __super__);

	    function MapObservable(source, selector, thisArg) {
	      this.source = source;
	      this.selector = bindCallback(selector, thisArg, 3);
	      __super__.call(this);
	    }

	    MapObservable.prototype.internalMap = function (selector, thisArg) {
	      var self = this;
	      return new MapObservable(this.source, function (x, i, o) { return selector.call(this, self.selector(x, i, o), i, o); }, thisArg)
	    };

	    MapObservable.prototype.subscribeCore = function (observer) {
	      return this.source.subscribe(new MapObserver(observer, this.selector, this));
	    };

	    return MapObservable;

	  }(ObservableBase));

	  function MapObserver(observer, selector, source) {
	    this.observer = observer;
	    this.selector = selector;
	    this.source = source;
	    this.i = 0;
	    this.isStopped = false;
	  }

	  MapObserver.prototype.onNext = function(x) {
	    if (this.isStopped) { return; }
	    var result = tryCatch(this.selector).call(this, x, this.i++, this.source);
	    if (result === errorObj) {
	      return this.observer.onError(result.e);
	    }
	    this.observer.onNext(result);
	  };
	  MapObserver.prototype.onError = function (e) {
	    if(!this.isStopped) { this.isStopped = true; this.observer.onError(e); }
	  };
	  MapObserver.prototype.onCompleted = function () {
	    if(!this.isStopped) { this.isStopped = true; this.observer.onCompleted(); }
	  };
	  MapObserver.prototype.dispose = function() { this.isStopped = true; };
	  MapObserver.prototype.fail = function (e) {
	    if (!this.isStopped) {
	      this.isStopped = true;
	      this.observer.onError(e);
	      return true;
	    }

	    return false;
	  };

	  /**
	  * Projects each element of an observable sequence into a new form by incorporating the element's index.
	  * @param {Function} selector A transform function to apply to each source element; the second parameter of the function represents the index of the source element.
	  * @param {Any} [thisArg] Object to use as this when executing callback.
	  * @returns {Observable} An observable sequence whose elements are the result of invoking the transform function on each element of source.
	  */
	  observableProto.map = observableProto.select = function (selector, thisArg) {
	    var selectorFn = typeof selector === 'function' ? selector : function () { return selector; };
	    return this instanceof MapObservable ?
	      this.internalMap(selectorFn, thisArg) :
	      new MapObservable(this, selectorFn, thisArg);
	  };

	  /**
	   * Retrieves the value of a specified nested property from all elements in
	   * the Observable sequence.
	   * @param {Arguments} arguments The nested properties to pluck.
	   * @returns {Observable} Returns a new Observable sequence of property values.
	   */
	  observableProto.pluck = function () {
	    var args = arguments, len = arguments.length;
	    if (len === 0) { throw new Error('List of properties cannot be empty.'); }
	    return this.map(function (x) {
	      var currentProp = x;
	      for (var i = 0; i < len; i++) {
	        var p = currentProp[args[i]];
	        if (typeof p !== 'undefined') {
	          currentProp = p;
	        } else {
	          return undefined;
	        }
	      }
	      return currentProp;
	    });
	  };

	  function flatMap(source, selector, thisArg) {
	    var selectorFunc = bindCallback(selector, thisArg, 3);
	    return source.map(function (x, i) {
	      var result = selectorFunc(x, i, source);
	      isPromise(result) && (result = observableFromPromise(result));
	      (isArrayLike(result) || isIterable(result)) && (result = observableFrom(result));
	      return result;
	    }).mergeAll();
	  }

	  /**
	   *  One of the Following:
	   *  Projects each element of an observable sequence to an observable sequence and merges the resulting observable sequences into one observable sequence.
	   *
	   * @example
	   *  var res = source.selectMany(function (x) { return Rx.Observable.range(0, x); });
	   *  Or:
	   *  Projects each element of an observable sequence to an observable sequence, invokes the result selector for the source element and each of the corresponding inner sequence's elements, and merges the results into one observable sequence.
	   *
	   *  var res = source.selectMany(function (x) { return Rx.Observable.range(0, x); }, function (x, y) { return x + y; });
	   *  Or:
	   *  Projects each element of the source observable sequence to the other observable sequence and merges the resulting observable sequences into one observable sequence.
	   *
	   *  var res = source.selectMany(Rx.Observable.fromArray([1,2,3]));
	   * @param {Function} selector A transform function to apply to each element or an observable sequence to project each element from the source sequence onto which could be either an observable or Promise.
	   * @param {Function} [resultSelector]  A transform function to apply to each element of the intermediate sequence.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} An observable sequence whose elements are the result of invoking the one-to-many transform function collectionSelector on each element of the input sequence and then mapping each of those sequence elements and their corresponding source element to a result element.
	   */
	  observableProto.selectMany = observableProto.flatMap = function (selector, resultSelector, thisArg) {
	    if (isFunction(selector) && isFunction(resultSelector)) {
	      return this.flatMap(function (x, i) {
	        var selectorResult = selector(x, i);
	        isPromise(selectorResult) && (selectorResult = observableFromPromise(selectorResult));
	        (isArrayLike(selectorResult) || isIterable(selectorResult)) && (selectorResult = observableFrom(selectorResult));

	        return selectorResult.map(function (y, i2) {
	          return resultSelector(x, y, i, i2);
	        });
	      }, thisArg);
	    }
	    return isFunction(selector) ?
	      flatMap(this, selector, thisArg) :
	      flatMap(this, function () { return selector; });
	  };

	  /**
	   * Projects each notification of an observable sequence to an observable sequence and merges the resulting observable sequences into one observable sequence.
	   * @param {Function} onNext A transform function to apply to each element; the second parameter of the function represents the index of the source element.
	   * @param {Function} onError A transform function to apply when an error occurs in the source sequence.
	   * @param {Function} onCompleted A transform function to apply when the end of the source sequence is reached.
	   * @param {Any} [thisArg] An optional "this" to use to invoke each transform.
	   * @returns {Observable} An observable sequence whose elements are the result of invoking the one-to-many transform function corresponding to each notification in the input sequence.
	   */
	  observableProto.flatMapObserver = observableProto.selectManyObserver = function (onNext, onError, onCompleted, thisArg) {
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      var index = 0;

	      return source.subscribe(
	        function (x) {
	          var result;
	          try {
	            result = onNext.call(thisArg, x, index++);
	          } catch (e) {
	            observer.onError(e);
	            return;
	          }
	          isPromise(result) && (result = observableFromPromise(result));
	          observer.onNext(result);
	        },
	        function (err) {
	          var result;
	          try {
	            result = onError.call(thisArg, err);
	          } catch (e) {
	            observer.onError(e);
	            return;
	          }
	          isPromise(result) && (result = observableFromPromise(result));
	          observer.onNext(result);
	          observer.onCompleted();
	        },
	        function () {
	          var result;
	          try {
	            result = onCompleted.call(thisArg);
	          } catch (e) {
	            observer.onError(e);
	            return;
	          }
	          isPromise(result) && (result = observableFromPromise(result));
	          observer.onNext(result);
	          observer.onCompleted();
	        });
	    }, source).mergeAll();
	  };

	  /**
	   *  Projects each element of an observable sequence into a new sequence of observable sequences by incorporating the element's index and then
	   *  transforms an observable sequence of observable sequences into an observable sequence producing values only from the most recent observable sequence.
	   * @param {Function} selector A transform function to apply to each source element; the second parameter of the function represents the index of the source element.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} An observable sequence whose elements are the result of invoking the transform function on each element of source producing an Observable of Observable sequences
	   *  and that at any point in time produces the elements of the most recent inner observable sequence that has been received.
	   */
	  observableProto.selectSwitch = observableProto.flatMapLatest = observableProto.switchMap = function (selector, thisArg) {
	    return this.select(selector, thisArg).switchLatest();
	  };

	  /**
	   * Bypasses a specified number of elements in an observable sequence and then returns the remaining elements.
	   * @param {Number} count The number of elements to skip before returning the remaining elements.
	   * @returns {Observable} An observable sequence that contains the elements that occur after the specified index in the input sequence.
	   */
	  observableProto.skip = function (count) {
	    if (count < 0) { throw new ArgumentOutOfRangeError(); }
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      var remaining = count;
	      return source.subscribe(function (x) {
	        if (remaining <= 0) {
	          o.onNext(x);
	        } else {
	          remaining--;
	        }
	      }, function (e) { o.onError(e); }, function () { o.onCompleted(); });
	    }, source);
	  };

	  /**
	   *  Bypasses elements in an observable sequence as long as a specified condition is true and then returns the remaining elements.
	   *  The element's index is used in the logic of the predicate function.
	   *
	   *  var res = source.skipWhile(function (value) { return value < 10; });
	   *  var res = source.skipWhile(function (value, index) { return value < 10 || index < 10; });
	   * @param {Function} predicate A function to test each element for a condition; the second parameter of the function represents the index of the source element.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} An observable sequence that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.
	   */
	  observableProto.skipWhile = function (predicate, thisArg) {
	    var source = this,
	        callback = bindCallback(predicate, thisArg, 3);
	    return new AnonymousObservable(function (o) {
	      var i = 0, running = false;
	      return source.subscribe(function (x) {
	        if (!running) {
	          try {
	            running = !callback(x, i++, source);
	          } catch (e) {
	            o.onError(e);
	            return;
	          }
	        }
	        running && o.onNext(x);
	      }, function (e) { o.onError(e); }, function () { o.onCompleted(); });
	    }, source);
	  };

	  /**
	   *  Returns a specified number of contiguous elements from the start of an observable sequence, using the specified scheduler for the edge case of take(0).
	   *
	   *  var res = source.take(5);
	   *  var res = source.take(0, Rx.Scheduler.timeout);
	   * @param {Number} count The number of elements to return.
	   * @param {Scheduler} [scheduler] Scheduler used to produce an OnCompleted message in case <paramref name="count count</paramref> is set to 0.
	   * @returns {Observable} An observable sequence that contains the specified number of elements from the start of the input sequence.
	   */
	  observableProto.take = function (count, scheduler) {
	    if (count < 0) { throw new ArgumentOutOfRangeError(); }
	    if (count === 0) { return observableEmpty(scheduler); }
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      var remaining = count;
	      return source.subscribe(function (x) {
	        if (remaining-- > 0) {
	          o.onNext(x);
	          remaining === 0 && o.onCompleted();
	        }
	      }, function (e) { o.onError(e); }, function () { o.onCompleted(); });
	    }, source);
	  };

	  /**
	   *  Returns elements from an observable sequence as long as a specified condition is true.
	   *  The element's index is used in the logic of the predicate function.
	   * @param {Function} predicate A function to test each element for a condition; the second parameter of the function represents the index of the source element.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} An observable sequence that contains the elements from the input sequence that occur before the element at which the test no longer passes.
	   */
	  observableProto.takeWhile = function (predicate, thisArg) {
	    var source = this,
	        callback = bindCallback(predicate, thisArg, 3);
	    return new AnonymousObservable(function (o) {
	      var i = 0, running = true;
	      return source.subscribe(function (x) {
	        if (running) {
	          try {
	            running = callback(x, i++, source);
	          } catch (e) {
	            o.onError(e);
	            return;
	          }
	          if (running) {
	            o.onNext(x);
	          } else {
	            o.onCompleted();
	          }
	        }
	      }, function (e) { o.onError(e); }, function () { o.onCompleted(); });
	    }, source);
	  };

	  var FilterObservable = (function (__super__) {
	    inherits(FilterObservable, __super__);

	    function FilterObservable(source, predicate, thisArg) {
	      this.source = source;
	      this.predicate = bindCallback(predicate, thisArg, 3);
	      __super__.call(this);
	    }

	    FilterObservable.prototype.subscribeCore = function (observer) {
	      return this.source.subscribe(new FilterObserver(observer, this.predicate, this));
	    };

	    FilterObservable.prototype.internalFilter = function(predicate, thisArg) {
	      var self = this;
	      return new FilterObservable(this.source, function(x, i, o) { return self.predicate(x, i, o) && predicate.call(this, x, i, o); }, thisArg);
	    };

	    return FilterObservable;

	  }(ObservableBase));

	  function FilterObserver(observer, predicate, source) {
	    this.observer = observer;
	    this.predicate = predicate;
	    this.source = source;
	    this.i = 0;
	    this.isStopped = false;
	  }

	  FilterObserver.prototype.onNext = function(x) {
	    if (this.isStopped) { return; }
	    var shouldYield = tryCatch(this.predicate).call(this, x, this.i++, this.source);
	    if (shouldYield === errorObj) {
	      return this.observer.onError(shouldYield.e);
	    }
	    shouldYield && this.observer.onNext(x);
	  };
	  FilterObserver.prototype.onError = function (e) {
	    if(!this.isStopped) { this.isStopped = true; this.observer.onError(e); }
	  };
	  FilterObserver.prototype.onCompleted = function () {
	    if(!this.isStopped) { this.isStopped = true; this.observer.onCompleted(); }
	  };
	  FilterObserver.prototype.dispose = function() { this.isStopped = true; };
	  FilterObserver.prototype.fail = function (e) {
	    if (!this.isStopped) {
	      this.isStopped = true;
	      this.observer.onError(e);
	      return true;
	    }
	    return false;
	  };

	  /**
	  *  Filters the elements of an observable sequence based on a predicate by incorporating the element's index.
	  * @param {Function} predicate A function to test each source element for a condition; the second parameter of the function represents the index of the source element.
	  * @param {Any} [thisArg] Object to use as this when executing callback.
	  * @returns {Observable} An observable sequence that contains elements from the input sequence that satisfy the condition.
	  */
	  observableProto.filter = observableProto.where = function (predicate, thisArg) {
	    return this instanceof FilterObservable ? this.internalFilter(predicate, thisArg) :
	      new FilterObservable(this, predicate, thisArg);
	  };

	  function extremaBy(source, keySelector, comparer) {
	    return new AnonymousObservable(function (o) {
	      var hasValue = false, lastKey = null, list = [];
	      return source.subscribe(function (x) {
	        var comparison, key;
	        try {
	          key = keySelector(x);
	        } catch (ex) {
	          o.onError(ex);
	          return;
	        }
	        comparison = 0;
	        if (!hasValue) {
	          hasValue = true;
	          lastKey = key;
	        } else {
	          try {
	            comparison = comparer(key, lastKey);
	          } catch (ex1) {
	            o.onError(ex1);
	            return;
	          }
	        }
	        if (comparison > 0) {
	          lastKey = key;
	          list = [];
	        }
	        if (comparison >= 0) { list.push(x); }
	      }, function (e) { o.onError(e); }, function () {
	        o.onNext(list);
	        o.onCompleted();
	      });
	    }, source);
	  }

	  function firstOnly(x) {
	    if (x.length === 0) { throw new EmptyError(); }
	    return x[0];
	  }

	  /**
	   * Applies an accumulator function over an observable sequence, returning the result of the aggregation as a single element in the result sequence. The specified seed value is used as the initial accumulator value.
	   * For aggregation behavior with incremental intermediate results, see Observable.scan.
	   * @deprecated Use #reduce instead
	   * @param {Mixed} [seed] The initial accumulator value.
	   * @param {Function} accumulator An accumulator function to be invoked on each element.
	   * @returns {Observable} An observable sequence containing a single element with the final accumulator value.
	   */
	  observableProto.aggregate = function () {
	    var hasSeed = false, accumulator, seed, source = this;
	    if (arguments.length === 2) {
	      hasSeed = true;
	      seed = arguments[0];
	      accumulator = arguments[1];
	    } else {
	      accumulator = arguments[0];
	    }
	    return new AnonymousObservable(function (o) {
	      var hasAccumulation, accumulation, hasValue;
	      return source.subscribe (
	        function (x) {
	          !hasValue && (hasValue = true);
	          try {
	            if (hasAccumulation) {
	              accumulation = accumulator(accumulation, x);
	            } else {
	              accumulation = hasSeed ? accumulator(seed, x) : x;
	              hasAccumulation = true;
	            }
	          } catch (e) {
	            return o.onError(e);
	          }
	        },
	        function (e) { o.onError(e); },
	        function () {
	          hasValue && o.onNext(accumulation);
	          !hasValue && hasSeed && o.onNext(seed);
	          !hasValue && !hasSeed && o.onError(new EmptyError());
	          o.onCompleted();
	        }
	      );
	    }, source);
	  };

	  /**
	   * Applies an accumulator function over an observable sequence, returning the result of the aggregation as a single element in the result sequence. The specified seed value is used as the initial accumulator value.
	   * For aggregation behavior with incremental intermediate results, see Observable.scan.
	   * @param {Function} accumulator An accumulator function to be invoked on each element.
	   * @param {Any} [seed] The initial accumulator value.
	   * @returns {Observable} An observable sequence containing a single element with the final accumulator value.
	   */
	  observableProto.reduce = function (accumulator) {
	    var hasSeed = false, seed, source = this;
	    if (arguments.length === 2) {
	      hasSeed = true;
	      seed = arguments[1];
	    }
	    return new AnonymousObservable(function (o) {
	      var hasAccumulation, accumulation, hasValue;
	      return source.subscribe (
	        function (x) {
	          !hasValue && (hasValue = true);
	          try {
	            if (hasAccumulation) {
	              accumulation = accumulator(accumulation, x);
	            } else {
	              accumulation = hasSeed ? accumulator(seed, x) : x;
	              hasAccumulation = true;
	            }
	          } catch (e) {
	            return o.onError(e);
	          }
	        },
	        function (e) { o.onError(e); },
	        function () {
	          hasValue && o.onNext(accumulation);
	          !hasValue && hasSeed && o.onNext(seed);
	          !hasValue && !hasSeed && o.onError(new EmptyError());
	          o.onCompleted();
	        }
	      );
	    }, source);
	  };

	  /**
	   * Determines whether any element of an observable sequence satisfies a condition if present, else if any items are in the sequence.
	   * @param {Function} [predicate] A function to test each element for a condition.
	   * @returns {Observable} An observable sequence containing a single element determining whether any elements in the source sequence pass the test in the specified predicate if given, else if any items are in the sequence.
	   */
	  observableProto.some = function (predicate, thisArg) {
	    var source = this;
	    return predicate ?
	      source.filter(predicate, thisArg).some() :
	      new AnonymousObservable(function (observer) {
	        return source.subscribe(function () {
	          observer.onNext(true);
	          observer.onCompleted();
	        }, function (e) { observer.onError(e); }, function () {
	          observer.onNext(false);
	          observer.onCompleted();
	        });
	      }, source);
	  };

	  /** @deprecated use #some instead */
	  observableProto.any = function () {
	    //deprecate('any', 'some');
	    return this.some.apply(this, arguments);
	  };

	  /**
	   * Determines whether an observable sequence is empty.
	   * @returns {Observable} An observable sequence containing a single element determining whether the source sequence is empty.
	   */
	  observableProto.isEmpty = function () {
	    return this.any().map(not);
	  };

	  /**
	   * Determines whether all elements of an observable sequence satisfy a condition.
	   * @param {Function} [predicate] A function to test each element for a condition.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} An observable sequence containing a single element determining whether all elements in the source sequence pass the test in the specified predicate.
	   */
	  observableProto.every = function (predicate, thisArg) {
	    return this.filter(function (v) { return !predicate(v); }, thisArg).some().map(not);
	  };

	  /** @deprecated use #every instead */
	  observableProto.all = function () {
	    //deprecate('all', 'every');
	    return this.every.apply(this, arguments);
	  };

	  /**
	   * Determines whether an observable sequence includes a specified element with an optional equality comparer.
	   * @param searchElement The value to locate in the source sequence.
	   * @param {Number} [fromIndex] An equality comparer to compare elements.
	   * @returns {Observable} An observable sequence containing a single element determining whether the source sequence includes an element that has the specified value from the given index.
	   */
	  observableProto.includes = function (searchElement, fromIndex) {
	    var source = this;
	    function comparer(a, b) {
	      return (a === 0 && b === 0) || (a === b || (isNaN(a) && isNaN(b)));
	    }
	    return new AnonymousObservable(function (o) {
	      var i = 0, n = +fromIndex || 0;
	      Math.abs(n) === Infinity && (n = 0);
	      if (n < 0) {
	        o.onNext(false);
	        o.onCompleted();
	        return disposableEmpty;
	      }
	      return source.subscribe(
	        function (x) {
	          if (i++ >= n && comparer(x, searchElement)) {
	            o.onNext(true);
	            o.onCompleted();
	          }
	        },
	        function (e) { o.onError(e); },
	        function () {
	          o.onNext(false);
	          o.onCompleted();
	        });
	    }, this);
	  };

	  /**
	   * @deprecated use #includes instead.
	   */
	  observableProto.contains = function (searchElement, fromIndex) {
	    //deprecate('contains', 'includes');
	    observableProto.includes(searchElement, fromIndex);
	  };
	  /**
	   * Returns an observable sequence containing a value that represents how many elements in the specified observable sequence satisfy a condition if provided, else the count of items.
	   * @example
	   * res = source.count();
	   * res = source.count(function (x) { return x > 3; });
	   * @param {Function} [predicate]A function to test each element for a condition.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} An observable sequence containing a single element with a number that represents how many elements in the input sequence satisfy the condition in the predicate function if provided, else the count of items in the sequence.
	   */
	  observableProto.count = function (predicate, thisArg) {
	    return predicate ?
	      this.filter(predicate, thisArg).count() :
	      this.reduce(function (count) { return count + 1; }, 0);
	  };

	  /**
	   * Returns the first index at which a given element can be found in the observable sequence, or -1 if it is not present.
	   * @param {Any} searchElement Element to locate in the array.
	   * @param {Number} [fromIndex] The index to start the search.  If not specified, defaults to 0.
	   * @returns {Observable} And observable sequence containing the first index at which a given element can be found in the observable sequence, or -1 if it is not present.
	   */
	  observableProto.indexOf = function(searchElement, fromIndex) {
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      var i = 0, n = +fromIndex || 0;
	      Math.abs(n) === Infinity && (n = 0);
	      if (n < 0) {
	        o.onNext(-1);
	        o.onCompleted();
	        return disposableEmpty;
	      }
	      return source.subscribe(
	        function (x) {
	          if (i >= n && x === searchElement) {
	            o.onNext(i);
	            o.onCompleted();
	          }
	          i++;
	        },
	        function (e) { o.onError(e); },
	        function () {
	          o.onNext(-1);
	          o.onCompleted();
	        });
	    }, source);
	  };

	  /**
	   * Computes the sum of a sequence of values that are obtained by invoking an optional transform function on each element of the input sequence, else if not specified computes the sum on each item in the sequence.
	   * @param {Function} [selector] A transform function to apply to each element.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} An observable sequence containing a single element with the sum of the values in the source sequence.
	   */
	  observableProto.sum = function (keySelector, thisArg) {
	    return keySelector && isFunction(keySelector) ?
	      this.map(keySelector, thisArg).sum() :
	      this.reduce(function (prev, curr) { return prev + curr; }, 0);
	  };

	  /**
	   * Returns the elements in an observable sequence with the minimum key value according to the specified comparer.
	   * @example
	   * var res = source.minBy(function (x) { return x.value; });
	   * var res = source.minBy(function (x) { return x.value; }, function (x, y) { return x - y; });
	   * @param {Function} keySelector Key selector function.
	   * @param {Function} [comparer] Comparer used to compare key values.
	   * @returns {Observable} An observable sequence containing a list of zero or more elements that have a minimum key value.
	   */
	  observableProto.minBy = function (keySelector, comparer) {
	    comparer || (comparer = defaultSubComparer);
	    return extremaBy(this, keySelector, function (x, y) { return comparer(x, y) * -1; });
	  };

	  /**
	   * Returns the minimum element in an observable sequence according to the optional comparer else a default greater than less than check.
	   * @example
	   * var res = source.min();
	   * var res = source.min(function (x, y) { return x.value - y.value; });
	   * @param {Function} [comparer] Comparer used to compare elements.
	   * @returns {Observable} An observable sequence containing a single element with the minimum element in the source sequence.
	   */
	  observableProto.min = function (comparer) {
	    return this.minBy(identity, comparer).map(function (x) { return firstOnly(x); });
	  };

	  /**
	   * Returns the elements in an observable sequence with the maximum  key value according to the specified comparer.
	   * @example
	   * var res = source.maxBy(function (x) { return x.value; });
	   * var res = source.maxBy(function (x) { return x.value; }, function (x, y) { return x - y;; });
	   * @param {Function} keySelector Key selector function.
	   * @param {Function} [comparer]  Comparer used to compare key values.
	   * @returns {Observable} An observable sequence containing a list of zero or more elements that have a maximum key value.
	   */
	  observableProto.maxBy = function (keySelector, comparer) {
	    comparer || (comparer = defaultSubComparer);
	    return extremaBy(this, keySelector, comparer);
	  };

	  /**
	   * Returns the maximum value in an observable sequence according to the specified comparer.
	   * @example
	   * var res = source.max();
	   * var res = source.max(function (x, y) { return x.value - y.value; });
	   * @param {Function} [comparer] Comparer used to compare elements.
	   * @returns {Observable} An observable sequence containing a single element with the maximum element in the source sequence.
	   */
	  observableProto.max = function (comparer) {
	    return this.maxBy(identity, comparer).map(function (x) { return firstOnly(x); });
	  };

	  /**
	   * Computes the average of an observable sequence of values that are in the sequence or obtained by invoking a transform function on each element of the input sequence if present.
	   * @param {Function} [selector] A transform function to apply to each element.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} An observable sequence containing a single element with the average of the sequence of values.
	   */
	  observableProto.average = function (keySelector, thisArg) {
	    return keySelector && isFunction(keySelector) ?
	      this.map(keySelector, thisArg).average() :
	      this.reduce(function (prev, cur) {
	        return {
	          sum: prev.sum + cur,
	          count: prev.count + 1
	        };
	      }, {sum: 0, count: 0 }).map(function (s) {
	        if (s.count === 0) { throw new EmptyError(); }
	        return s.sum / s.count;
	      });
	  };

	  /**
	   *  Determines whether two sequences are equal by comparing the elements pairwise using a specified equality comparer.
	   *
	   * @example
	   * var res = res = source.sequenceEqual([1,2,3]);
	   * var res = res = source.sequenceEqual([{ value: 42 }], function (x, y) { return x.value === y.value; });
	   * 3 - res = source.sequenceEqual(Rx.Observable.returnValue(42));
	   * 4 - res = source.sequenceEqual(Rx.Observable.returnValue({ value: 42 }), function (x, y) { return x.value === y.value; });
	   * @param {Observable} second Second observable sequence or array to compare.
	   * @param {Function} [comparer] Comparer used to compare elements of both sequences.
	   * @returns {Observable} An observable sequence that contains a single element which indicates whether both sequences are of equal length and their corresponding elements are equal according to the specified equality comparer.
	   */
	  observableProto.sequenceEqual = function (second, comparer) {
	    var first = this;
	    comparer || (comparer = defaultComparer);
	    return new AnonymousObservable(function (o) {
	      var donel = false, doner = false, ql = [], qr = [];
	      var subscription1 = first.subscribe(function (x) {
	        var equal, v;
	        if (qr.length > 0) {
	          v = qr.shift();
	          try {
	            equal = comparer(v, x);
	          } catch (e) {
	            o.onError(e);
	            return;
	          }
	          if (!equal) {
	            o.onNext(false);
	            o.onCompleted();
	          }
	        } else if (doner) {
	          o.onNext(false);
	          o.onCompleted();
	        } else {
	          ql.push(x);
	        }
	      }, function(e) { o.onError(e); }, function () {
	        donel = true;
	        if (ql.length === 0) {
	          if (qr.length > 0) {
	            o.onNext(false);
	            o.onCompleted();
	          } else if (doner) {
	            o.onNext(true);
	            o.onCompleted();
	          }
	        }
	      });

	      (isArrayLike(second) || isIterable(second)) && (second = observableFrom(second));
	      isPromise(second) && (second = observableFromPromise(second));
	      var subscription2 = second.subscribe(function (x) {
	        var equal;
	        if (ql.length > 0) {
	          var v = ql.shift();
	          try {
	            equal = comparer(v, x);
	          } catch (exception) {
	            o.onError(exception);
	            return;
	          }
	          if (!equal) {
	            o.onNext(false);
	            o.onCompleted();
	          }
	        } else if (donel) {
	          o.onNext(false);
	          o.onCompleted();
	        } else {
	          qr.push(x);
	        }
	      }, function(e) { o.onError(e); }, function () {
	        doner = true;
	        if (qr.length === 0) {
	          if (ql.length > 0) {
	            o.onNext(false);
	            o.onCompleted();
	          } else if (donel) {
	            o.onNext(true);
	            o.onCompleted();
	          }
	        }
	      });
	      return new CompositeDisposable(subscription1, subscription2);
	    }, first);
	  };

	  function elementAtOrDefault(source, index, hasDefault, defaultValue) {
	    if (index < 0) { throw new ArgumentOutOfRangeError(); }
	    return new AnonymousObservable(function (o) {
	      var i = index;
	      return source.subscribe(function (x) {
	        if (i-- === 0) {
	          o.onNext(x);
	          o.onCompleted();
	        }
	      }, function (e) { o.onError(e); }, function () {
	        if (!hasDefault) {
	          o.onError(new ArgumentOutOfRangeError());
	        } else {
	          o.onNext(defaultValue);
	          o.onCompleted();
	        }
	      });
	    }, source);
	  }

	  /**
	   * Returns the element at a specified index in a sequence.
	   * @example
	   * var res = source.elementAt(5);
	   * @param {Number} index The zero-based index of the element to retrieve.
	   * @returns {Observable} An observable sequence that produces the element at the specified position in the source sequence.
	   */
	  observableProto.elementAt =  function (index) {
	    return elementAtOrDefault(this, index, false);
	  };

	  /**
	   * Returns the element at a specified index in a sequence or a default value if the index is out of range.
	   * @example
	   * var res = source.elementAtOrDefault(5);
	   * var res = source.elementAtOrDefault(5, 0);
	   * @param {Number} index The zero-based index of the element to retrieve.
	   * @param [defaultValue] The default value if the index is outside the bounds of the source sequence.
	   * @returns {Observable} An observable sequence that produces the element at the specified position in the source sequence, or a default value if the index is outside the bounds of the source sequence.
	   */
	  observableProto.elementAtOrDefault = function (index, defaultValue) {
	    return elementAtOrDefault(this, index, true, defaultValue);
	  };

	  function singleOrDefaultAsync(source, hasDefault, defaultValue) {
	    return new AnonymousObservable(function (o) {
	      var value = defaultValue, seenValue = false;
	      return source.subscribe(function (x) {
	        if (seenValue) {
	          o.onError(new Error('Sequence contains more than one element'));
	        } else {
	          value = x;
	          seenValue = true;
	        }
	      }, function (e) { o.onError(e); }, function () {
	        if (!seenValue && !hasDefault) {
	          o.onError(new EmptyError());
	        } else {
	          o.onNext(value);
	          o.onCompleted();
	        }
	      });
	    }, source);
	  }

	  /**
	   * Returns the only element of an observable sequence that satisfies the condition in the optional predicate, and reports an exception if there is not exactly one element in the observable sequence.
	   * @param {Function} [predicate] A predicate function to evaluate for elements in the source sequence.
	   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
	   * @returns {Observable} Sequence containing the single element in the observable sequence that satisfies the condition in the predicate.
	   */
	  observableProto.single = function (predicate, thisArg) {
	    return predicate && isFunction(predicate) ?
	      this.where(predicate, thisArg).single() :
	      singleOrDefaultAsync(this, false);
	  };

	  /**
	   * Returns the only element of an observable sequence that matches the predicate, or a default value if no such element exists; this method reports an exception if there is more than one element in the observable sequence.
	   * @example
	   * var res = res = source.singleOrDefault();
	   * var res = res = source.singleOrDefault(function (x) { return x === 42; });
	   * res = source.singleOrDefault(function (x) { return x === 42; }, 0);
	   * res = source.singleOrDefault(null, 0);
	   * @memberOf Observable#
	   * @param {Function} predicate A predicate function to evaluate for elements in the source sequence.
	   * @param [defaultValue] The default value if the index is outside the bounds of the source sequence.
	   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
	   * @returns {Observable} Sequence containing the single element in the observable sequence that satisfies the condition in the predicate, or a default value if no such element exists.
	   */
	  observableProto.singleOrDefault = function (predicate, defaultValue, thisArg) {
	    return predicate && isFunction(predicate) ?
	      this.filter(predicate, thisArg).singleOrDefault(null, defaultValue) :
	      singleOrDefaultAsync(this, true, defaultValue);
	  };

	  function firstOrDefaultAsync(source, hasDefault, defaultValue) {
	    return new AnonymousObservable(function (o) {
	      return source.subscribe(function (x) {
	        o.onNext(x);
	        o.onCompleted();
	      }, function (e) { o.onError(e); }, function () {
	        if (!hasDefault) {
	          o.onError(new EmptyError());
	        } else {
	          o.onNext(defaultValue);
	          o.onCompleted();
	        }
	      });
	    }, source);
	  }

	  /**
	   * Returns the first element of an observable sequence that satisfies the condition in the predicate if present else the first item in the sequence.
	   * @example
	   * var res = res = source.first();
	   * var res = res = source.first(function (x) { return x > 3; });
	   * @param {Function} [predicate] A predicate function to evaluate for elements in the source sequence.
	   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
	   * @returns {Observable} Sequence containing the first element in the observable sequence that satisfies the condition in the predicate if provided, else the first item in the sequence.
	   */
	  observableProto.first = function (predicate, thisArg) {
	    return predicate ?
	      this.where(predicate, thisArg).first() :
	      firstOrDefaultAsync(this, false);
	  };

	  /**
	   * Returns the first element of an observable sequence that satisfies the condition in the predicate, or a default value if no such element exists.
	   * @param {Function} [predicate] A predicate function to evaluate for elements in the source sequence.
	   * @param {Any} [defaultValue] The default value if no such element exists.  If not specified, defaults to null.
	   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
	   * @returns {Observable} Sequence containing the first element in the observable sequence that satisfies the condition in the predicate, or a default value if no such element exists.
	   */
	  observableProto.firstOrDefault = function (predicate, defaultValue, thisArg) {
	    return predicate ?
	      this.where(predicate).firstOrDefault(null, defaultValue) :
	      firstOrDefaultAsync(this, true, defaultValue);
	  };

	  function lastOrDefaultAsync(source, hasDefault, defaultValue) {
	    return new AnonymousObservable(function (o) {
	      var value = defaultValue, seenValue = false;
	      return source.subscribe(function (x) {
	        value = x;
	        seenValue = true;
	      }, function (e) { o.onError(e); }, function () {
	        if (!seenValue && !hasDefault) {
	          o.onError(new EmptyError());
	        } else {
	          o.onNext(value);
	          o.onCompleted();
	        }
	      });
	    }, source);
	  }

	  /**
	   * Returns the last element of an observable sequence that satisfies the condition in the predicate if specified, else the last element.
	   * @param {Function} [predicate] A predicate function to evaluate for elements in the source sequence.
	   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
	   * @returns {Observable} Sequence containing the last element in the observable sequence that satisfies the condition in the predicate.
	   */
	  observableProto.last = function (predicate, thisArg) {
	    return predicate ?
	      this.where(predicate, thisArg).last() :
	      lastOrDefaultAsync(this, false);
	  };

	  /**
	   * Returns the last element of an observable sequence that satisfies the condition in the predicate, or a default value if no such element exists.
	   * @param {Function} [predicate] A predicate function to evaluate for elements in the source sequence.
	   * @param [defaultValue] The default value if no such element exists.  If not specified, defaults to null.
	   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
	   * @returns {Observable} Sequence containing the last element in the observable sequence that satisfies the condition in the predicate, or a default value if no such element exists.
	   */
	  observableProto.lastOrDefault = function (predicate, defaultValue, thisArg) {
	    return predicate ?
	      this.where(predicate, thisArg).lastOrDefault(null, defaultValue) :
	      lastOrDefaultAsync(this, true, defaultValue);
	  };

	  function findValue (source, predicate, thisArg, yieldIndex) {
	    var callback = bindCallback(predicate, thisArg, 3);
	    return new AnonymousObservable(function (o) {
	      var i = 0;
	      return source.subscribe(function (x) {
	        var shouldRun;
	        try {
	          shouldRun = callback(x, i, source);
	        } catch (e) {
	          o.onError(e);
	          return;
	        }
	        if (shouldRun) {
	          o.onNext(yieldIndex ? i : x);
	          o.onCompleted();
	        } else {
	          i++;
	        }
	      }, function (e) { o.onError(e); }, function () {
	        o.onNext(yieldIndex ? -1 : undefined);
	        o.onCompleted();
	      });
	    }, source);
	  }

	  /**
	   * Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire Observable sequence.
	   * @param {Function} predicate The predicate that defines the conditions of the element to search for.
	   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
	   * @returns {Observable} An Observable sequence with the first element that matches the conditions defined by the specified predicate, if found; otherwise, undefined.
	   */
	  observableProto.find = function (predicate, thisArg) {
	    return findValue(this, predicate, thisArg, false);
	  };

	  /**
	   * Searches for an element that matches the conditions defined by the specified predicate, and returns
	   * an Observable sequence with the zero-based index of the first occurrence within the entire Observable sequence.
	   * @param {Function} predicate The predicate that defines the conditions of the element to search for.
	   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
	   * @returns {Observable} An Observable sequence with the zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.
	  */
	  observableProto.findIndex = function (predicate, thisArg) {
	    return findValue(this, predicate, thisArg, true);
	  };

	  /**
	   * Converts the observable sequence to a Set if it exists.
	   * @returns {Observable} An observable sequence with a single value of a Set containing the values from the observable sequence.
	   */
	  observableProto.toSet = function () {
	    if (typeof root.Set === 'undefined') { throw new TypeError(); }
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      var s = new root.Set();
	      return source.subscribe(
	        function (x) { s.add(x); },
	        function (e) { o.onError(e); },
	        function () {
	          o.onNext(s);
	          o.onCompleted();
	        });
	    }, source);
	  };

	  /**
	  * Converts the observable sequence to a Map if it exists.
	  * @param {Function} keySelector A function which produces the key for the Map.
	  * @param {Function} [elementSelector] An optional function which produces the element for the Map. If not present, defaults to the value from the observable sequence.
	  * @returns {Observable} An observable sequence with a single value of a Map containing the values from the observable sequence.
	  */
	  observableProto.toMap = function (keySelector, elementSelector) {
	    if (typeof root.Map === 'undefined') { throw new TypeError(); }
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      var m = new root.Map();
	      return source.subscribe(
	        function (x) {
	          var key;
	          try {
	            key = keySelector(x);
	          } catch (e) {
	            o.onError(e);
	            return;
	          }

	          var element = x;
	          if (elementSelector) {
	            try {
	              element = elementSelector(x);
	            } catch (e) {
	              o.onError(e);
	              return;
	            }
	          }

	          m.set(key, element);
	        },
	        function (e) { o.onError(e); },
	        function () {
	          o.onNext(m);
	          o.onCompleted();
	        });
	    }, source);
	  };

	  var fnString = 'function',
	      throwString = 'throw',
	      isObject = Rx.internals.isObject;

	  function toThunk(obj, ctx) {
	    if (Array.isArray(obj)) {  return objectToThunk.call(ctx, obj); }
	    if (isGeneratorFunction(obj)) { return observableSpawn(obj.call(ctx)); }
	    if (isGenerator(obj)) {  return observableSpawn(obj); }
	    if (isObservable(obj)) { return observableToThunk(obj); }
	    if (isPromise(obj)) { return promiseToThunk(obj); }
	    if (typeof obj === fnString) { return obj; }
	    if (isObject(obj) || Array.isArray(obj)) { return objectToThunk.call(ctx, obj); }

	    return obj;
	  }

	  function objectToThunk(obj) {
	    var ctx = this;

	    return function (done) {
	      var keys = Object.keys(obj),
	          pending = keys.length,
	          results = new obj.constructor(),
	          finished;

	      if (!pending) {
	        timeoutScheduler.schedule(function () { done(null, results); });
	        return;
	      }

	      for (var i = 0, len = keys.length; i < len; i++) {
	        run(obj[keys[i]], keys[i]);
	      }

	      function run(fn, key) {
	        if (finished) { return; }
	        try {
	          fn = toThunk(fn, ctx);

	          if (typeof fn !== fnString) {
	            results[key] = fn;
	            return --pending || done(null, results);
	          }

	          fn.call(ctx, function(err, res) {
	            if (finished) { return; }

	            if (err) {
	              finished = true;
	              return done(err);
	            }

	            results[key] = res;
	            --pending || done(null, results);
	          });
	        } catch (e) {
	          finished = true;
	          done(e);
	        }
	      }
	    }
	  }

	  function observableToThunk(observable) {
	    return function (fn) {
	      var value, hasValue = false;
	      observable.subscribe(
	        function (v) {
	          value = v;
	          hasValue = true;
	        },
	        fn,
	        function () {
	          hasValue && fn(null, value);
	        });
	    }
	  }

	  function promiseToThunk(promise) {
	    return function(fn) {
	      promise.then(function(res) {
	        fn(null, res);
	      }, fn);
	    }
	  }

	  function isObservable(obj) {
	    return obj && typeof obj.subscribe === fnString;
	  }

	  function isGeneratorFunction(obj) {
	    return obj && obj.constructor && obj.constructor.name === 'GeneratorFunction';
	  }

	  function isGenerator(obj) {
	    return obj && typeof obj.next === fnString && typeof obj[throwString] === fnString;
	  }

	  /*
	   * Spawns a generator function which allows for Promises, Observable sequences, Arrays, Objects, Generators and functions.
	   * @param {Function} The spawning function.
	   * @returns {Function} a function which has a done continuation.
	   */
	  var observableSpawn = Rx.spawn = function (fn) {
	    var isGenFun = isGeneratorFunction(fn);

	    return function (done) {
	      var ctx = this,
	        gen = fn;

	      if (isGenFun) {
	        for(var args = [], i = 0, len = arguments.length; i < len; i++) { args.push(arguments[i]); }
	        var len = args.length,
	          hasCallback = len && typeof args[len - 1] === fnString;

	        done = hasCallback ? args.pop() : handleError;
	        gen = fn.apply(this, args);
	      } else {
	        done = done || handleError;
	      }

	      next();

	      function exit(err, res) {
	        timeoutScheduler.schedule(done.bind(ctx, err, res));
	      }

	      function next(err, res) {
	        var ret;

	        // multiple args
	        if (arguments.length > 2) {
	          for(var res = [], i = 1, len = arguments.length; i < len; i++) { res.push(arguments[i]); }
	        }

	        if (err) {
	          try {
	            ret = gen[throwString](err);
	          } catch (e) {
	            return exit(e);
	          }
	        }

	        if (!err) {
	          try {
	            ret = gen.next(res);
	          } catch (e) {
	            return exit(e);
	          }
	        }

	        if (ret.done)  {
	          return exit(null, ret.value);
	        }

	        ret.value = toThunk(ret.value, ctx);

	        if (typeof ret.value === fnString) {
	          var called = false;
	          try {
	            ret.value.call(ctx, function() {
	              if (called) {
	                return;
	              }

	              called = true;
	              next.apply(ctx, arguments);
	            });
	          } catch (e) {
	            timeoutScheduler.schedule(function () {
	              if (called) {
	                return;
	              }

	              called = true;
	              next.call(ctx, e);
	            });
	          }
	          return;
	        }

	        // Not supported
	        next(new TypeError('Rx.spawn only supports a function, Promise, Observable, Object or Array.'));
	      }
	    }
	  };

	  function handleError(err) {
	    if (!err) { return; }
	    timeoutScheduler.schedule(function() {
	      throw err;
	    });
	  }

	  /**
	   * Invokes the specified function asynchronously on the specified scheduler, surfacing the result through an observable sequence.
	   *
	   * @example
	   * var res = Rx.Observable.start(function () { console.log('hello'); });
	   * var res = Rx.Observable.start(function () { console.log('hello'); }, Rx.Scheduler.timeout);
	   * var res = Rx.Observable.start(function () { this.log('hello'); }, Rx.Scheduler.timeout, console);
	   *
	   * @param {Function} func Function to run asynchronously.
	   * @param {Scheduler} [scheduler]  Scheduler to run the function on. If not specified, defaults to Scheduler.timeout.
	   * @param [context]  The context for the func parameter to be executed.  If not specified, defaults to undefined.
	   * @returns {Observable} An observable sequence exposing the function's result value, or an exception.
	   *
	   * Remarks
	   * * The function is called immediately, not during the subscription of the resulting sequence.
	   * * Multiple subscriptions to the resulting sequence can observe the function's result.
	   */
	  Observable.start = function (func, context, scheduler) {
	    return observableToAsync(func, context, scheduler)();
	  };

	  /**
	   * Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function on the specified scheduler.
	   * @param {Function} function Function to convert to an asynchronous function.
	   * @param {Scheduler} [scheduler] Scheduler to run the function on. If not specified, defaults to Scheduler.timeout.
	   * @param {Mixed} [context] The context for the func parameter to be executed.  If not specified, defaults to undefined.
	   * @returns {Function} Asynchronous function.
	   */
	  var observableToAsync = Observable.toAsync = function (func, context, scheduler) {
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    return function () {
	      var args = arguments,
	        subject = new AsyncSubject();

	      scheduler.schedule(function () {
	        var result;
	        try {
	          result = func.apply(context, args);
	        } catch (e) {
	          subject.onError(e);
	          return;
	        }
	        subject.onNext(result);
	        subject.onCompleted();
	      });
	      return subject.asObservable();
	    };
	  };

	  /**
	   * Converts a callback function to an observable sequence.
	   *
	   * @param {Function} function Function with a callback as the last parameter to convert to an Observable sequence.
	   * @param {Mixed} [context] The context for the func parameter to be executed.  If not specified, defaults to undefined.
	   * @param {Function} [selector] A selector which takes the arguments from the callback to produce a single item to yield on next.
	   * @returns {Function} A function, when executed with the required parameters minus the callback, produces an Observable sequence with a single value of the arguments to the callback as an array.
	   */
	  Observable.fromCallback = function (func, context, selector) {
	    return function () {
	      var len = arguments.length, args = new Array(len)
	      for(var i = 0; i < len; i++) { args[i] = arguments[i]; }

	      return new AnonymousObservable(function (observer) {
	        function handler() {
	          var len = arguments.length, results = new Array(len);
	          for(var i = 0; i < len; i++) { results[i] = arguments[i]; }

	          if (selector) {
	            try {
	              results = selector.apply(context, results);
	            } catch (e) {
	              return observer.onError(e);
	            }

	            observer.onNext(results);
	          } else {
	            if (results.length <= 1) {
	              observer.onNext.apply(observer, results);
	            } else {
	              observer.onNext(results);
	            }
	          }

	          observer.onCompleted();
	        }

	        args.push(handler);
	        func.apply(context, args);
	      }).publishLast().refCount();
	    };
	  };

	  /**
	   * Converts a Node.js callback style function to an observable sequence.  This must be in function (err, ...) format.
	   * @param {Function} func The function to call
	   * @param {Mixed} [context] The context for the func parameter to be executed.  If not specified, defaults to undefined.
	   * @param {Function} [selector] A selector which takes the arguments from the callback minus the error to produce a single item to yield on next.
	   * @returns {Function} An async function which when applied, returns an observable sequence with the callback arguments as an array.
	   */
	  Observable.fromNodeCallback = function (func, context, selector) {
	    return function () {
	      var len = arguments.length, args = new Array(len);
	      for(var i = 0; i < len; i++) { args[i] = arguments[i]; }

	      return new AnonymousObservable(function (observer) {
	        function handler(err) {
	          if (err) {
	            observer.onError(err);
	            return;
	          }

	          var len = arguments.length, results = [];
	          for(var i = 1; i < len; i++) { results[i - 1] = arguments[i]; }

	          if (selector) {
	            try {
	              results = selector.apply(context, results);
	            } catch (e) {
	              return observer.onError(e);
	            }
	            observer.onNext(results);
	          } else {
	            if (results.length <= 1) {
	              observer.onNext.apply(observer, results);
	            } else {
	              observer.onNext(results);
	            }
	          }

	          observer.onCompleted();
	        }

	        args.push(handler);
	        func.apply(context, args);
	      }).publishLast().refCount();
	    };
	  };

	  function createListener (element, name, handler) {
	    if (element.addEventListener) {
	      element.addEventListener(name, handler, false);
	      return disposableCreate(function () {
	        element.removeEventListener(name, handler, false);
	      });
	    }
	    throw new Error('No listener found');
	  }

	  function createEventListener (el, eventName, handler) {
	    var disposables = new CompositeDisposable();

	    // Asume NodeList
	    if (Object.prototype.toString.call(el) === '[object NodeList]') {
	      for (var i = 0, len = el.length; i < len; i++) {
	        disposables.add(createEventListener(el.item(i), eventName, handler));
	      }
	    } else if (el) {
	      disposables.add(createListener(el, eventName, handler));
	    }

	    return disposables;
	  }

	  /**
	   * Configuration option to determine whether to use native events only
	   */
	  Rx.config.useNativeEvents = false;

	  /**
	   * Creates an observable sequence by adding an event listener to the matching DOMElement or each item in the NodeList.
	   *
	   * @example
	   *   var source = Rx.Observable.fromEvent(element, 'mouseup');
	   *
	   * @param {Object} element The DOMElement or NodeList to attach a listener.
	   * @param {String} eventName The event name to attach the observable sequence.
	   * @param {Function} [selector] A selector which takes the arguments from the event handler to produce a single item to yield on next.
	   * @returns {Observable} An observable sequence of events from the specified element and the specified event.
	   */
	  Observable.fromEvent = function (element, eventName, selector) {
	    // Node.js specific
	    if (element.addListener) {
	      return fromEventPattern(
	        function (h) { element.addListener(eventName, h); },
	        function (h) { element.removeListener(eventName, h); },
	        selector);
	    }

	    // Use only if non-native events are allowed
	    if (!Rx.config.useNativeEvents) {
	      // Handles jq, Angular.js, Zepto, Marionette, Ember.js
	      if (typeof element.on === 'function' && typeof element.off === 'function') {
	        return fromEventPattern(
	          function (h) { element.on(eventName, h); },
	          function (h) { element.off(eventName, h); },
	          selector);
	      }
	    }
	    return new AnonymousObservable(function (observer) {
	      return createEventListener(
	        element,
	        eventName,
	        function handler (e) {
	          var results = e;

	          if (selector) {
	            try {
	              results = selector(arguments);
	            } catch (err) {
	              return observer.onError(err);
	            }
	          }

	          observer.onNext(results);
	        });
	    }).publish().refCount();
	  };

	  /**
	   * Creates an observable sequence from an event emitter via an addHandler/removeHandler pair.
	   * @param {Function} addHandler The function to add a handler to the emitter.
	   * @param {Function} [removeHandler] The optional function to remove a handler from an emitter.
	   * @param {Function} [selector] A selector which takes the arguments from the event handler to produce a single item to yield on next.
	   * @returns {Observable} An observable sequence which wraps an event from an event emitter
	   */
	  var fromEventPattern = Observable.fromEventPattern = function (addHandler, removeHandler, selector) {
	    return new AnonymousObservable(function (observer) {
	      function innerHandler (e) {
	        var result = e;
	        if (selector) {
	          try {
	            result = selector(arguments);
	          } catch (err) {
	            return observer.onError(err);
	          }
	        }
	        observer.onNext(result);
	      }

	      var returnValue = addHandler(innerHandler);
	      return disposableCreate(function () {
	        if (removeHandler) {
	          removeHandler(innerHandler, returnValue);
	        }
	      });
	    }).publish().refCount();
	  };

	  /**
	   * Invokes the asynchronous function, surfacing the result through an observable sequence.
	   * @param {Function} functionAsync Asynchronous function which returns a Promise to run.
	   * @returns {Observable} An observable sequence exposing the function's result value, or an exception.
	   */
	  Observable.startAsync = function (functionAsync) {
	    var promise;
	    try {
	      promise = functionAsync();
	    } catch (e) {
	      return observableThrow(e);
	    }
	    return observableFromPromise(promise);
	  }

	  var PausableObservable = (function (__super__) {

	    inherits(PausableObservable, __super__);

	    function subscribe(observer) {
	      var conn = this.source.publish(),
	        subscription = conn.subscribe(observer),
	        connection = disposableEmpty;

	      var pausable = this.pauser.distinctUntilChanged().subscribe(function (b) {
	        if (b) {
	          connection = conn.connect();
	        } else {
	          connection.dispose();
	          connection = disposableEmpty;
	        }
	      });

	      return new CompositeDisposable(subscription, connection, pausable);
	    }

	    function PausableObservable(source, pauser) {
	      this.source = source;
	      this.controller = new Subject();

	      if (pauser && pauser.subscribe) {
	        this.pauser = this.controller.merge(pauser);
	      } else {
	        this.pauser = this.controller;
	      }

	      __super__.call(this, subscribe, source);
	    }

	    PausableObservable.prototype.pause = function () {
	      this.controller.onNext(false);
	    };

	    PausableObservable.prototype.resume = function () {
	      this.controller.onNext(true);
	    };

	    return PausableObservable;

	  }(Observable));

	  /**
	   * Pauses the underlying observable sequence based upon the observable sequence which yields true/false.
	   * @example
	   * var pauser = new Rx.Subject();
	   * var source = Rx.Observable.interval(100).pausable(pauser);
	   * @param {Observable} pauser The observable sequence used to pause the underlying sequence.
	   * @returns {Observable} The observable sequence which is paused based upon the pauser.
	   */
	  observableProto.pausable = function (pauser) {
	    return new PausableObservable(this, pauser);
	  };

	  function combineLatestSource(source, subject, resultSelector) {
	    return new AnonymousObservable(function (o) {
	      var hasValue = [false, false],
	        hasValueAll = false,
	        isDone = false,
	        values = new Array(2),
	        err;

	      function next(x, i) {
	        values[i] = x
	        var res;
	        hasValue[i] = true;
	        if (hasValueAll || (hasValueAll = hasValue.every(identity))) {
	          if (err) {
	            o.onError(err);
	            return;
	          }

	          try {
	            res = resultSelector.apply(null, values);
	          } catch (ex) {
	            o.onError(ex);
	            return;
	          }
	          o.onNext(res);
	        }
	        if (isDone && values[1]) {
	          o.onCompleted();
	        }
	      }

	      return new CompositeDisposable(
	        source.subscribe(
	          function (x) {
	            next(x, 0);
	          },
	          function (e) {
	            if (values[1]) {
	              o.onError(e);
	            } else {
	              err = e;
	            }
	          },
	          function () {
	            isDone = true;
	            values[1] && o.onCompleted();
	          }),
	        subject.subscribe(
	          function (x) {
	            next(x, 1);
	          },
	          function (e) { o.onError(e); },
	          function () {
	            isDone = true;
	            next(true, 1);
	          })
	        );
	    }, source);
	  }

	  var PausableBufferedObservable = (function (__super__) {

	    inherits(PausableBufferedObservable, __super__);

	    function subscribe(o) {
	      var q = [], previousShouldFire;

	      var subscription =
	        combineLatestSource(
	          this.source,
	          this.pauser.distinctUntilChanged().startWith(false),
	          function (data, shouldFire) {
	            return { data: data, shouldFire: shouldFire };
	          })
	          .subscribe(
	            function (results) {
	              if (previousShouldFire !== undefined && results.shouldFire != previousShouldFire) {
	                previousShouldFire = results.shouldFire;
	                // change in shouldFire
	                if (results.shouldFire) {
	                  while (q.length > 0) {
	                    o.onNext(q.shift());
	                  }
	                }
	              } else {
	                previousShouldFire = results.shouldFire;
	                // new data
	                if (results.shouldFire) {
	                  o.onNext(results.data);
	                } else {
	                  q.push(results.data);
	                }
	              }
	            },
	            function (err) {
	              // Empty buffer before sending error
	              while (q.length > 0) {
	                o.onNext(q.shift());
	              }
	              o.onError(err);
	            },
	            function () {
	              // Empty buffer before sending completion
	              while (q.length > 0) {
	                o.onNext(q.shift());
	              }
	              o.onCompleted();
	            }
	          );
	      return subscription;
	    }

	    function PausableBufferedObservable(source, pauser) {
	      this.source = source;
	      this.controller = new Subject();

	      if (pauser && pauser.subscribe) {
	        this.pauser = this.controller.merge(pauser);
	      } else {
	        this.pauser = this.controller;
	      }

	      __super__.call(this, subscribe, source);
	    }

	    PausableBufferedObservable.prototype.pause = function () {
	      this.controller.onNext(false);
	    };

	    PausableBufferedObservable.prototype.resume = function () {
	      this.controller.onNext(true);
	    };

	    return PausableBufferedObservable;

	  }(Observable));

	  /**
	   * Pauses the underlying observable sequence based upon the observable sequence which yields true/false,
	   * and yields the values that were buffered while paused.
	   * @example
	   * var pauser = new Rx.Subject();
	   * var source = Rx.Observable.interval(100).pausableBuffered(pauser);
	   * @param {Observable} pauser The observable sequence used to pause the underlying sequence.
	   * @returns {Observable} The observable sequence which is paused based upon the pauser.
	   */
	  observableProto.pausableBuffered = function (subject) {
	    return new PausableBufferedObservable(this, subject);
	  };

	  var ControlledObservable = (function (__super__) {

	    inherits(ControlledObservable, __super__);

	    function subscribe (observer) {
	      return this.source.subscribe(observer);
	    }

	    function ControlledObservable (source, enableQueue) {
	      __super__.call(this, subscribe, source);
	      this.subject = new ControlledSubject(enableQueue);
	      this.source = source.multicast(this.subject).refCount();
	    }

	    ControlledObservable.prototype.request = function (numberOfItems) {
	      if (numberOfItems == null) { numberOfItems = -1; }
	      return this.subject.request(numberOfItems);
	    };

	    return ControlledObservable;

	  }(Observable));

	  var ControlledSubject = (function (__super__) {

	    function subscribe (observer) {
	      return this.subject.subscribe(observer);
	    }

	    inherits(ControlledSubject, __super__);

	    function ControlledSubject(enableQueue) {
	      enableQueue == null && (enableQueue = true);

	      __super__.call(this, subscribe);
	      this.subject = new Subject();
	      this.enableQueue = enableQueue;
	      this.queue = enableQueue ? [] : null;
	      this.requestedCount = 0;
	      this.requestedDisposable = disposableEmpty;
	      this.error = null;
	      this.hasFailed = false;
	      this.hasCompleted = false;
	    }

	    addProperties(ControlledSubject.prototype, Observer, {
	      onCompleted: function () {
	        this.hasCompleted = true;
	        if (!this.enableQueue || this.queue.length === 0)
	          this.subject.onCompleted();
	        else
	          this.queue.push(Rx.Notification.createOnCompleted());
	      },
	      onError: function (error) {
	        this.hasFailed = true;
	        this.error = error;
	        if (!this.enableQueue || this.queue.length === 0)
	          this.subject.onError(error);
	        else
	          this.queue.push(Rx.Notification.createOnError(error));
	      },
	      onNext: function (value) {
	        var hasRequested = false;

	        if (this.requestedCount === 0) {
	          this.enableQueue && this.queue.push(Rx.Notification.createOnNext(value));
	        } else {
	          (this.requestedCount !== -1 && this.requestedCount-- === 0) && this.disposeCurrentRequest();
	          hasRequested = true;
	        }
	        hasRequested && this.subject.onNext(value);
	      },
	      _processRequest: function (numberOfItems) {
	        if (this.enableQueue) {
	          while ((this.queue.length >= numberOfItems && numberOfItems > 0) ||
	          (this.queue.length > 0 && this.queue[0].kind !== 'N')) {
	            var first = this.queue.shift();
	            first.accept(this.subject);
	            if (first.kind === 'N') numberOfItems--;
	            else { this.disposeCurrentRequest(); this.queue = []; }
	          }

	          return { numberOfItems : numberOfItems, returnValue: this.queue.length !== 0};
	        }

	        //TODO I don't think this is ever necessary, since termination of a sequence without a queue occurs in the onCompletion or onError function
	        //if (this.hasFailed) {
	        //  this.subject.onError(this.error);
	        //} else if (this.hasCompleted) {
	        //  this.subject.onCompleted();
	        //}

	        return { numberOfItems: numberOfItems, returnValue: false };
	      },
	      request: function (number) {
	        this.disposeCurrentRequest();
	        var self = this, r = this._processRequest(number);

	        var number = r.numberOfItems;
	        if (!r.returnValue) {
	          this.requestedCount = number;
	          this.requestedDisposable = disposableCreate(function () {
	            self.requestedCount = 0;
	          });

	          return this.requestedDisposable;
	        } else {
	          return disposableEmpty;
	        }
	      },
	      disposeCurrentRequest: function () {
	        this.requestedDisposable.dispose();
	        this.requestedDisposable = disposableEmpty;
	      }
	    });

	    return ControlledSubject;
	  }(Observable));

	  /**
	   * Attaches a controller to the observable sequence with the ability to queue.
	   * @example
	   * var source = Rx.Observable.interval(100).controlled();
	   * source.request(3); // Reads 3 values
	   * @param {Observable} pauser The observable sequence used to pause the underlying sequence.
	   * @returns {Observable} The observable sequence which is paused based upon the pauser.
	   */
	  observableProto.controlled = function (enableQueue) {
	    if (enableQueue == null) {  enableQueue = true; }
	    return new ControlledObservable(this, enableQueue);
	  };

	  var StopAndWaitObservable = (function (__super__) {

	    function subscribe (observer) {
	      this.subscription = this.source.subscribe(new StopAndWaitObserver(observer, this, this.subscription));

	      var self = this;
	      timeoutScheduler.schedule(function () { self.source.request(1); });

	      return this.subscription;
	    }

	    inherits(StopAndWaitObservable, __super__);

	    function StopAndWaitObservable (source) {
	      __super__.call(this, subscribe, source);
	      this.source = source;
	    }

	    var StopAndWaitObserver = (function (__sub__) {

	      inherits(StopAndWaitObserver, __sub__);

	      function StopAndWaitObserver (observer, observable, cancel) {
	        __sub__.call(this);
	        this.observer = observer;
	        this.observable = observable;
	        this.cancel = cancel;
	      }

	      var stopAndWaitObserverProto = StopAndWaitObserver.prototype;

	      stopAndWaitObserverProto.completed = function () {
	        this.observer.onCompleted();
	        this.dispose();
	      };

	      stopAndWaitObserverProto.error = function (error) {
	        this.observer.onError(error);
	        this.dispose();
	      }

	      stopAndWaitObserverProto.next = function (value) {
	        this.observer.onNext(value);

	        var self = this;
	        timeoutScheduler.schedule(function () {
	          self.observable.source.request(1);
	        });
	      };

	      stopAndWaitObserverProto.dispose = function () {
	        this.observer = null;
	        if (this.cancel) {
	          this.cancel.dispose();
	          this.cancel = null;
	        }
	        __sub__.prototype.dispose.call(this);
	      };

	      return StopAndWaitObserver;
	    }(AbstractObserver));

	    return StopAndWaitObservable;
	  }(Observable));


	  /**
	   * Attaches a stop and wait observable to the current observable.
	   * @returns {Observable} A stop and wait observable.
	   */
	  ControlledObservable.prototype.stopAndWait = function () {
	    return new StopAndWaitObservable(this);
	  };

	  var WindowedObservable = (function (__super__) {

	    function subscribe (observer) {
	      this.subscription = this.source.subscribe(new WindowedObserver(observer, this, this.subscription));

	      var self = this;
	      timeoutScheduler.schedule(function () {
	        self.source.request(self.windowSize);
	      });

	      return this.subscription;
	    }

	    inherits(WindowedObservable, __super__);

	    function WindowedObservable(source, windowSize) {
	      __super__.call(this, subscribe, source);
	      this.source = source;
	      this.windowSize = windowSize;
	    }

	    var WindowedObserver = (function (__sub__) {

	      inherits(WindowedObserver, __sub__);

	      function WindowedObserver(observer, observable, cancel) {
	        this.observer = observer;
	        this.observable = observable;
	        this.cancel = cancel;
	        this.received = 0;
	      }

	      var windowedObserverPrototype = WindowedObserver.prototype;

	      windowedObserverPrototype.completed = function () {
	        this.observer.onCompleted();
	        this.dispose();
	      };

	      windowedObserverPrototype.error = function (error) {
	        this.observer.onError(error);
	        this.dispose();
	      };

	      windowedObserverPrototype.next = function (value) {
	        this.observer.onNext(value);

	        this.received = ++this.received % this.observable.windowSize;
	        if (this.received === 0) {
	          var self = this;
	          timeoutScheduler.schedule(function () {
	            self.observable.source.request(self.observable.windowSize);
	          });
	        }
	      };

	      windowedObserverPrototype.dispose = function () {
	        this.observer = null;
	        if (this.cancel) {
	          this.cancel.dispose();
	          this.cancel = null;
	        }
	        __sub__.prototype.dispose.call(this);
	      };

	      return WindowedObserver;
	    }(AbstractObserver));

	    return WindowedObservable;
	  }(Observable));

	  /**
	   * Creates a sliding windowed observable based upon the window size.
	   * @param {Number} windowSize The number of items in the window
	   * @returns {Observable} A windowed observable based upon the window size.
	   */
	  ControlledObservable.prototype.windowed = function (windowSize) {
	    return new WindowedObservable(this, windowSize);
	  };

	  /**
	   * Pipes the existing Observable sequence into a Node.js Stream.
	   * @param {Stream} dest The destination Node.js stream.
	   * @returns {Stream} The destination stream.
	   */
	  observableProto.pipe = function (dest) {
	    var source = this.pausableBuffered();

	    function onDrain() {
	      source.resume();
	    }

	    dest.addListener('drain', onDrain);

	    source.subscribe(
	      function (x) {
	        !dest.write(String(x)) && source.pause();
	      },
	      function (err) {
	        dest.emit('error', err);
	      },
	      function () {
	        // Hack check because STDIO is not closable
	        !dest._isStdio && dest.end();
	        dest.removeListener('drain', onDrain);
	      });

	    source.resume();

	    return dest;
	  };

	  /**
	   * Multicasts the source sequence notifications through an instantiated subject into all uses of the sequence within a selector function. Each
	   * subscription to the resulting sequence causes a separate multicast invocation, exposing the sequence resulting from the selector function's
	   * invocation. For specializations with fixed subject types, see Publish, PublishLast, and Replay.
	   *
	   * @example
	   * 1 - res = source.multicast(observable);
	   * 2 - res = source.multicast(function () { return new Subject(); }, function (x) { return x; });
	   *
	   * @param {Function|Subject} subjectOrSubjectSelector
	   * Factory function to create an intermediate subject through which the source sequence's elements will be multicast to the selector function.
	   * Or:
	   * Subject to push source elements into.
	   *
	   * @param {Function} [selector] Optional selector function which can use the multicasted source sequence subject to the policies enforced by the created subject. Specified only if <paramref name="subjectOrSubjectSelector" is a factory function.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
	   */
	  observableProto.multicast = function (subjectOrSubjectSelector, selector) {
	    var source = this;
	    return typeof subjectOrSubjectSelector === 'function' ?
	      new AnonymousObservable(function (observer) {
	        var connectable = source.multicast(subjectOrSubjectSelector());
	        return new CompositeDisposable(selector(connectable).subscribe(observer), connectable.connect());
	      }, source) :
	      new ConnectableObservable(source, subjectOrSubjectSelector);
	  };

	  /**
	   * Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence.
	   * This operator is a specialization of Multicast using a regular Subject.
	   *
	   * @example
	   * var resres = source.publish();
	   * var res = source.publish(function (x) { return x; });
	   *
	   * @param {Function} [selector] Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive all notifications of the source from the time of the subscription on.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
	   */
	  observableProto.publish = function (selector) {
	    return selector && isFunction(selector) ?
	      this.multicast(function () { return new Subject(); }, selector) :
	      this.multicast(new Subject());
	  };

	  /**
	   * Returns an observable sequence that shares a single subscription to the underlying sequence.
	   * This operator is a specialization of publish which creates a subscription when the number of observers goes from zero to one, then shares that subscription with all subsequent observers until the number of observers returns to zero, at which point the subscription is disposed.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence.
	   */
	  observableProto.share = function () {
	    return this.publish().refCount();
	  };

	  /**
	   * Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence containing only the last notification.
	   * This operator is a specialization of Multicast using a AsyncSubject.
	   *
	   * @example
	   * var res = source.publishLast();
	   * var res = source.publishLast(function (x) { return x; });
	   *
	   * @param selector [Optional] Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will only receive the last notification of the source.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
	   */
	  observableProto.publishLast = function (selector) {
	    return selector && isFunction(selector) ?
	      this.multicast(function () { return new AsyncSubject(); }, selector) :
	      this.multicast(new AsyncSubject());
	  };

	  /**
	   * Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence and starts with initialValue.
	   * This operator is a specialization of Multicast using a BehaviorSubject.
	   *
	   * @example
	   * var res = source.publishValue(42);
	   * var res = source.publishValue(function (x) { return x.select(function (y) { return y * y; }) }, 42);
	   *
	   * @param {Function} [selector] Optional selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive immediately receive the initial value, followed by all notifications of the source from the time of the subscription on.
	   * @param {Mixed} initialValue Initial value received by observers upon subscription.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
	   */
	  observableProto.publishValue = function (initialValueOrSelector, initialValue) {
	    return arguments.length === 2 ?
	      this.multicast(function () {
	        return new BehaviorSubject(initialValue);
	      }, initialValueOrSelector) :
	      this.multicast(new BehaviorSubject(initialValueOrSelector));
	  };

	  /**
	   * Returns an observable sequence that shares a single subscription to the underlying sequence and starts with an initialValue.
	   * This operator is a specialization of publishValue which creates a subscription when the number of observers goes from zero to one, then shares that subscription with all subsequent observers until the number of observers returns to zero, at which point the subscription is disposed.
	   * @param {Mixed} initialValue Initial value received by observers upon subscription.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence.
	   */
	  observableProto.shareValue = function (initialValue) {
	    return this.publishValue(initialValue).refCount();
	  };

	  /**
	   * Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence replaying notifications subject to a maximum time length for the replay buffer.
	   * This operator is a specialization of Multicast using a ReplaySubject.
	   *
	   * @example
	   * var res = source.replay(null, 3);
	   * var res = source.replay(null, 3, 500);
	   * var res = source.replay(null, 3, 500, scheduler);
	   * var res = source.replay(function (x) { return x.take(6).repeat(); }, 3, 500, scheduler);
	   *
	   * @param selector [Optional] Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive all the notifications of the source subject to the specified replay buffer trimming policy.
	   * @param bufferSize [Optional] Maximum element count of the replay buffer.
	   * @param windowSize [Optional] Maximum time length of the replay buffer.
	   * @param scheduler [Optional] Scheduler where connected observers within the selector function will be invoked on.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
	   */
	  observableProto.replay = function (selector, bufferSize, windowSize, scheduler) {
	    return selector && isFunction(selector) ?
	      this.multicast(function () { return new ReplaySubject(bufferSize, windowSize, scheduler); }, selector) :
	      this.multicast(new ReplaySubject(bufferSize, windowSize, scheduler));
	  };

	  /**
	   * Returns an observable sequence that shares a single subscription to the underlying sequence replaying notifications subject to a maximum time length for the replay buffer.
	   * This operator is a specialization of replay which creates a subscription when the number of observers goes from zero to one, then shares that subscription with all subsequent observers until the number of observers returns to zero, at which point the subscription is disposed.
	   *
	   * @example
	   * var res = source.shareReplay(3);
	   * var res = source.shareReplay(3, 500);
	   * var res = source.shareReplay(3, 500, scheduler);
	   *

	   * @param bufferSize [Optional] Maximum element count of the replay buffer.
	   * @param window [Optional] Maximum time length of the replay buffer.
	   * @param scheduler [Optional] Scheduler where connected observers within the selector function will be invoked on.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence.
	   */
	  observableProto.shareReplay = function (bufferSize, windowSize, scheduler) {
	    return this.replay(null, bufferSize, windowSize, scheduler).refCount();
	  };

	  var InnerSubscription = function (subject, observer) {
	    this.subject = subject;
	    this.observer = observer;
	  };

	  InnerSubscription.prototype.dispose = function () {
	    if (!this.subject.isDisposed && this.observer !== null) {
	      var idx = this.subject.observers.indexOf(this.observer);
	      this.subject.observers.splice(idx, 1);
	      this.observer = null;
	    }
	  };

	  /**
	   *  Represents a value that changes over time.
	   *  Observers can subscribe to the subject to receive the last (or initial) value and all subsequent notifications.
	   */
	  var BehaviorSubject = Rx.BehaviorSubject = (function (__super__) {
	    function subscribe(observer) {
	      checkDisposed(this);
	      if (!this.isStopped) {
	        this.observers.push(observer);
	        observer.onNext(this.value);
	        return new InnerSubscription(this, observer);
	      }
	      if (this.hasError) {
	        observer.onError(this.error);
	      } else {
	        observer.onCompleted();
	      }
	      return disposableEmpty;
	    }

	    inherits(BehaviorSubject, __super__);

	    /**
	     *  Initializes a new instance of the BehaviorSubject class which creates a subject that caches its last value and starts with the specified value.
	     *  @param {Mixed} value Initial value sent to observers when no other value has been received by the subject yet.
	     */
	    function BehaviorSubject(value) {
	      __super__.call(this, subscribe);
	      this.value = value,
	      this.observers = [],
	      this.isDisposed = false,
	      this.isStopped = false,
	      this.hasError = false;
	    }

	    addProperties(BehaviorSubject.prototype, Observer, {
	      /**
	       * Gets the current value or throws an exception.
	       * Value is frozen after onCompleted is called.
	       * After onError is called always throws the specified exception.
	       * An exception is always thrown after dispose is called.
	       * @returns {Mixed} The initial value passed to the constructor until onNext is called; after which, the last value passed to onNext.
	       */
	      getValue: function () {
	          checkDisposed(this);
	          if (this.hasError) {
	              throw this.error;
	          }
	          return this.value;
	      },
	      /**
	       * Indicates whether the subject has observers subscribed to it.
	       * @returns {Boolean} Indicates whether the subject has observers subscribed to it.
	       */
	      hasObservers: function () { return this.observers.length > 0; },
	      /**
	       * Notifies all subscribed observers about the end of the sequence.
	       */
	      onCompleted: function () {
	        checkDisposed(this);
	        if (this.isStopped) { return; }
	        this.isStopped = true;
	        for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
	          os[i].onCompleted();
	        }

	        this.observers.length = 0;
	      },
	      /**
	       * Notifies all subscribed observers about the exception.
	       * @param {Mixed} error The exception to send to all observers.
	       */
	      onError: function (error) {
	        checkDisposed(this);
	        if (this.isStopped) { return; }
	        this.isStopped = true;
	        this.hasError = true;
	        this.error = error;

	        for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
	          os[i].onError(error);
	        }

	        this.observers.length = 0;
	      },
	      /**
	       * Notifies all subscribed observers about the arrival of the specified element in the sequence.
	       * @param {Mixed} value The value to send to all observers.
	       */
	      onNext: function (value) {
	        checkDisposed(this);
	        if (this.isStopped) { return; }
	        this.value = value;
	        for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
	          os[i].onNext(value);
	        }
	      },
	      /**
	       * Unsubscribe all observers and release resources.
	       */
	      dispose: function () {
	        this.isDisposed = true;
	        this.observers = null;
	        this.value = null;
	        this.exception = null;
	      }
	    });

	    return BehaviorSubject;
	  }(Observable));

	  /**
	   * Represents an object that is both an observable sequence as well as an observer.
	   * Each notification is broadcasted to all subscribed and future observers, subject to buffer trimming policies.
	   */
	  var ReplaySubject = Rx.ReplaySubject = (function (__super__) {

	    var maxSafeInteger = Math.pow(2, 53) - 1;

	    function createRemovableDisposable(subject, observer) {
	      return disposableCreate(function () {
	        observer.dispose();
	        !subject.isDisposed && subject.observers.splice(subject.observers.indexOf(observer), 1);
	      });
	    }

	    function subscribe(observer) {
	      var so = new ScheduledObserver(this.scheduler, observer),
	        subscription = createRemovableDisposable(this, so);
	      checkDisposed(this);
	      this._trim(this.scheduler.now());
	      this.observers.push(so);

	      for (var i = 0, len = this.q.length; i < len; i++) {
	        so.onNext(this.q[i].value);
	      }

	      if (this.hasError) {
	        so.onError(this.error);
	      } else if (this.isStopped) {
	        so.onCompleted();
	      }

	      so.ensureActive();
	      return subscription;
	    }

	    inherits(ReplaySubject, __super__);

	    /**
	     *  Initializes a new instance of the ReplaySubject class with the specified buffer size, window size and scheduler.
	     *  @param {Number} [bufferSize] Maximum element count of the replay buffer.
	     *  @param {Number} [windowSize] Maximum time length of the replay buffer.
	     *  @param {Scheduler} [scheduler] Scheduler the observers are invoked on.
	     */
	    function ReplaySubject(bufferSize, windowSize, scheduler) {
	      this.bufferSize = bufferSize == null ? maxSafeInteger : bufferSize;
	      this.windowSize = windowSize == null ? maxSafeInteger : windowSize;
	      this.scheduler = scheduler || currentThreadScheduler;
	      this.q = [];
	      this.observers = [];
	      this.isStopped = false;
	      this.isDisposed = false;
	      this.hasError = false;
	      this.error = null;
	      __super__.call(this, subscribe);
	    }

	    addProperties(ReplaySubject.prototype, Observer.prototype, {
	      /**
	       * Indicates whether the subject has observers subscribed to it.
	       * @returns {Boolean} Indicates whether the subject has observers subscribed to it.
	       */
	      hasObservers: function () {
	        return this.observers.length > 0;
	      },
	      _trim: function (now) {
	        while (this.q.length > this.bufferSize) {
	          this.q.shift();
	        }
	        while (this.q.length > 0 && (now - this.q[0].interval) > this.windowSize) {
	          this.q.shift();
	        }
	      },
	      /**
	       * Notifies all subscribed observers about the arrival of the specified element in the sequence.
	       * @param {Mixed} value The value to send to all observers.
	       */
	      onNext: function (value) {
	        checkDisposed(this);
	        if (this.isStopped) { return; }
	        var now = this.scheduler.now();
	        this.q.push({ interval: now, value: value });
	        this._trim(now);

	        for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
	          var observer = os[i];
	          observer.onNext(value);
	          observer.ensureActive();
	        }
	      },
	      /**
	       * Notifies all subscribed observers about the exception.
	       * @param {Mixed} error The exception to send to all observers.
	       */
	      onError: function (error) {
	        checkDisposed(this);
	        if (this.isStopped) { return; }
	        this.isStopped = true;
	        this.error = error;
	        this.hasError = true;
	        var now = this.scheduler.now();
	        this._trim(now);
	        for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
	          var observer = os[i];
	          observer.onError(error);
	          observer.ensureActive();
	        }
	        this.observers.length = 0;
	      },
	      /**
	       * Notifies all subscribed observers about the end of the sequence.
	       */
	      onCompleted: function () {
	        checkDisposed(this);
	        if (this.isStopped) { return; }
	        this.isStopped = true;
	        var now = this.scheduler.now();
	        this._trim(now);
	        for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
	          var observer = os[i];
	          observer.onCompleted();
	          observer.ensureActive();
	        }
	        this.observers.length = 0;
	      },
	      /**
	       * Unsubscribe all observers and release resources.
	       */
	      dispose: function () {
	        this.isDisposed = true;
	        this.observers = null;
	      }
	    });

	    return ReplaySubject;
	  }(Observable));

	  var ConnectableObservable = Rx.ConnectableObservable = (function (__super__) {
	    inherits(ConnectableObservable, __super__);

	    function ConnectableObservable(source, subject) {
	      var hasSubscription = false,
	        subscription,
	        sourceObservable = source.asObservable();

	      this.connect = function () {
	        if (!hasSubscription) {
	          hasSubscription = true;
	          subscription = new CompositeDisposable(sourceObservable.subscribe(subject), disposableCreate(function () {
	            hasSubscription = false;
	          }));
	        }
	        return subscription;
	      };

	      __super__.call(this, function (o) { return subject.subscribe(o); });
	    }

	    ConnectableObservable.prototype.refCount = function () {
	      var connectableSubscription, count = 0, source = this;
	      return new AnonymousObservable(function (observer) {
	          var shouldConnect = ++count === 1,
	            subscription = source.subscribe(observer);
	          shouldConnect && (connectableSubscription = source.connect());
	          return function () {
	            subscription.dispose();
	            --count === 0 && connectableSubscription.dispose();
	          };
	      });
	    };

	    return ConnectableObservable;
	  }(Observable));

	  var Dictionary = (function () {

	    var primes = [1, 3, 7, 13, 31, 61, 127, 251, 509, 1021, 2039, 4093, 8191, 16381, 32749, 65521, 131071, 262139, 524287, 1048573, 2097143, 4194301, 8388593, 16777213, 33554393, 67108859, 134217689, 268435399, 536870909, 1073741789, 2147483647],
	      noSuchkey = "no such key",
	      duplicatekey = "duplicate key";

	    function isPrime(candidate) {
	      if ((candidate & 1) === 0) { return candidate === 2; }
	      var num1 = Math.sqrt(candidate),
	        num2 = 3;
	      while (num2 <= num1) {
	        if (candidate % num2 === 0) { return false; }
	        num2 += 2;
	      }
	      return true;
	    }

	    function getPrime(min) {
	      var index, num, candidate;
	      for (index = 0; index < primes.length; ++index) {
	        num = primes[index];
	        if (num >= min) { return num; }
	      }
	      candidate = min | 1;
	      while (candidate < primes[primes.length - 1]) {
	        if (isPrime(candidate)) { return candidate; }
	        candidate += 2;
	      }
	      return min;
	    }

	    function stringHashFn(str) {
	      var hash = 757602046;
	      if (!str.length) { return hash; }
	      for (var i = 0, len = str.length; i < len; i++) {
	        var character = str.charCodeAt(i);
	        hash = ((hash << 5) - hash) + character;
	        hash = hash & hash;
	      }
	      return hash;
	    }

	    function numberHashFn(key) {
	      var c2 = 0x27d4eb2d;
	      key = (key ^ 61) ^ (key >>> 16);
	      key = key + (key << 3);
	      key = key ^ (key >>> 4);
	      key = key * c2;
	      key = key ^ (key >>> 15);
	      return key;
	    }

	    var getHashCode = (function () {
	      var uniqueIdCounter = 0;

	      return function (obj) {
	        if (obj == null) { throw new Error(noSuchkey); }

	        // Check for built-ins before tacking on our own for any object
	        if (typeof obj === 'string') { return stringHashFn(obj); }
	        if (typeof obj === 'number') { return numberHashFn(obj); }
	        if (typeof obj === 'boolean') { return obj === true ? 1 : 0; }
	        if (obj instanceof Date) { return numberHashFn(obj.valueOf()); }
	        if (obj instanceof RegExp) { return stringHashFn(obj.toString()); }
	        if (typeof obj.valueOf === 'function') {
	          // Hack check for valueOf
	          var valueOf = obj.valueOf();
	          if (typeof valueOf === 'number') { return numberHashFn(valueOf); }
	          if (typeof valueOf === 'string') { return stringHashFn(valueOf); }
	        }
	        if (obj.hashCode) { return obj.hashCode(); }

	        var id = 17 * uniqueIdCounter++;
	        obj.hashCode = function () { return id; };
	        return id;
	      };
	    }());

	    function newEntry() {
	      return { key: null, value: null, next: 0, hashCode: 0 };
	    }

	    function Dictionary(capacity, comparer) {
	      if (capacity < 0) { throw new ArgumentOutOfRangeError(); }
	      if (capacity > 0) { this._initialize(capacity); }

	      this.comparer = comparer || defaultComparer;
	      this.freeCount = 0;
	      this.size = 0;
	      this.freeList = -1;
	    }

	    var dictionaryProto = Dictionary.prototype;

	    dictionaryProto._initialize = function (capacity) {
	      var prime = getPrime(capacity), i;
	      this.buckets = new Array(prime);
	      this.entries = new Array(prime);
	      for (i = 0; i < prime; i++) {
	        this.buckets[i] = -1;
	        this.entries[i] = newEntry();
	      }
	      this.freeList = -1;
	    };

	    dictionaryProto.add = function (key, value) {
	      this._insert(key, value, true);
	    };

	    dictionaryProto._insert = function (key, value, add) {
	      if (!this.buckets) { this._initialize(0); }
	      var index3,
	        num = getHashCode(key) & 2147483647,
	        index1 = num % this.buckets.length;
	      for (var index2 = this.buckets[index1]; index2 >= 0; index2 = this.entries[index2].next) {
	        if (this.entries[index2].hashCode === num && this.comparer(this.entries[index2].key, key)) {
	          if (add) { throw new Error(duplicatekey); }
	          this.entries[index2].value = value;
	          return;
	        }
	      }
	      if (this.freeCount > 0) {
	        index3 = this.freeList;
	        this.freeList = this.entries[index3].next;
	        --this.freeCount;
	      } else {
	        if (this.size === this.entries.length) {
	          this._resize();
	          index1 = num % this.buckets.length;
	        }
	        index3 = this.size;
	        ++this.size;
	      }
	      this.entries[index3].hashCode = num;
	      this.entries[index3].next = this.buckets[index1];
	      this.entries[index3].key = key;
	      this.entries[index3].value = value;
	      this.buckets[index1] = index3;
	    };

	    dictionaryProto._resize = function () {
	      var prime = getPrime(this.size * 2),
	        numArray = new Array(prime);
	      for (index = 0; index < numArray.length; ++index) {  numArray[index] = -1; }
	      var entryArray = new Array(prime);
	      for (index = 0; index < this.size; ++index) { entryArray[index] = this.entries[index]; }
	      for (var index = this.size; index < prime; ++index) { entryArray[index] = newEntry(); }
	      for (var index1 = 0; index1 < this.size; ++index1) {
	        var index2 = entryArray[index1].hashCode % prime;
	        entryArray[index1].next = numArray[index2];
	        numArray[index2] = index1;
	      }
	      this.buckets = numArray;
	      this.entries = entryArray;
	    };

	    dictionaryProto.remove = function (key) {
	      if (this.buckets) {
	        var num = getHashCode(key) & 2147483647,
	          index1 = num % this.buckets.length,
	          index2 = -1;
	        for (var index3 = this.buckets[index1]; index3 >= 0; index3 = this.entries[index3].next) {
	          if (this.entries[index3].hashCode === num && this.comparer(this.entries[index3].key, key)) {
	            if (index2 < 0) {
	              this.buckets[index1] = this.entries[index3].next;
	            } else {
	              this.entries[index2].next = this.entries[index3].next;
	            }
	            this.entries[index3].hashCode = -1;
	            this.entries[index3].next = this.freeList;
	            this.entries[index3].key = null;
	            this.entries[index3].value = null;
	            this.freeList = index3;
	            ++this.freeCount;
	            return true;
	          } else {
	            index2 = index3;
	          }
	        }
	      }
	      return false;
	    };

	    dictionaryProto.clear = function () {
	      var index, len;
	      if (this.size <= 0) { return; }
	      for (index = 0, len = this.buckets.length; index < len; ++index) {
	        this.buckets[index] = -1;
	      }
	      for (index = 0; index < this.size; ++index) {
	        this.entries[index] = newEntry();
	      }
	      this.freeList = -1;
	      this.size = 0;
	    };

	    dictionaryProto._findEntry = function (key) {
	      if (this.buckets) {
	        var num = getHashCode(key) & 2147483647;
	        for (var index = this.buckets[num % this.buckets.length]; index >= 0; index = this.entries[index].next) {
	          if (this.entries[index].hashCode === num && this.comparer(this.entries[index].key, key)) {
	            return index;
	          }
	        }
	      }
	      return -1;
	    };

	    dictionaryProto.count = function () {
	      return this.size - this.freeCount;
	    };

	    dictionaryProto.tryGetValue = function (key) {
	      var entry = this._findEntry(key);
	      return entry >= 0 ?
	        this.entries[entry].value :
	        undefined;
	    };

	    dictionaryProto.getValues = function () {
	      var index = 0, results = [];
	      if (this.entries) {
	        for (var index1 = 0; index1 < this.size; index1++) {
	          if (this.entries[index1].hashCode >= 0) {
	            results[index++] = this.entries[index1].value;
	          }
	        }
	      }
	      return results;
	    };

	    dictionaryProto.get = function (key) {
	      var entry = this._findEntry(key);
	      if (entry >= 0) { return this.entries[entry].value; }
	      throw new Error(noSuchkey);
	    };

	    dictionaryProto.set = function (key, value) {
	      this._insert(key, value, false);
	    };

	    dictionaryProto.containskey = function (key) {
	      return this._findEntry(key) >= 0;
	    };

	    return Dictionary;
	  }());

	  /**
	   *  Correlates the elements of two sequences based on overlapping durations.
	   *
	   *  @param {Observable} right The right observable sequence to join elements for.
	   *  @param {Function} leftDurationSelector A function to select the duration (expressed as an observable sequence) of each element of the left observable sequence, used to determine overlap.
	   *  @param {Function} rightDurationSelector A function to select the duration (expressed as an observable sequence) of each element of the right observable sequence, used to determine overlap.
	   *  @param {Function} resultSelector A function invoked to compute a result element for any two overlapping elements of the left and right observable sequences. The parameters passed to the function correspond with the elements from the left and right source sequences for which overlap occurs.
	   *  @returns {Observable} An observable sequence that contains result elements computed from source elements that have an overlapping duration.
	   */
	  observableProto.join = function (right, leftDurationSelector, rightDurationSelector, resultSelector) {
	    var left = this;
	    return new AnonymousObservable(function (observer) {
	      var group = new CompositeDisposable();
	      var leftDone = false, rightDone = false;
	      var leftId = 0, rightId = 0;
	      var leftMap = new Dictionary(), rightMap = new Dictionary();

	      group.add(left.subscribe(
	        function (value) {
	          var id = leftId++;
	          var md = new SingleAssignmentDisposable();

	          leftMap.add(id, value);
	          group.add(md);

	          var expire = function () {
	            leftMap.remove(id) && leftMap.count() === 0 && leftDone && observer.onCompleted();
	            group.remove(md);
	          };

	          var duration;
	          try {
	            duration = leftDurationSelector(value);
	          } catch (e) {
	            observer.onError(e);
	            return;
	          }

	          md.setDisposable(duration.take(1).subscribe(noop, observer.onError.bind(observer), expire));

	          rightMap.getValues().forEach(function (v) {
	            var result;
	            try {
	              result = resultSelector(value, v);
	            } catch (exn) {
	              observer.onError(exn);
	              return;
	            }

	            observer.onNext(result);
	          });
	        },
	        observer.onError.bind(observer),
	        function () {
	          leftDone = true;
	          (rightDone || leftMap.count() === 0) && observer.onCompleted();
	        })
	      );

	      group.add(right.subscribe(
	        function (value) {
	          var id = rightId++;
	          var md = new SingleAssignmentDisposable();

	          rightMap.add(id, value);
	          group.add(md);

	          var expire = function () {
	            rightMap.remove(id) && rightMap.count() === 0 && rightDone && observer.onCompleted();
	            group.remove(md);
	          };

	          var duration;
	          try {
	            duration = rightDurationSelector(value);
	          } catch (e) {
	            observer.onError(e);
	            return;
	          }

	          md.setDisposable(duration.take(1).subscribe(noop, observer.onError.bind(observer), expire));

	          leftMap.getValues().forEach(function (v) {
	            var result;
	            try {
	              result = resultSelector(v, value);
	            } catch (exn) {
	              observer.onError(exn);
	              return;
	            }

	            observer.onNext(result);
	          });
	        },
	        observer.onError.bind(observer),
	        function () {
	          rightDone = true;
	          (leftDone || rightMap.count() === 0) && observer.onCompleted();
	        })
	      );
	      return group;
	    }, left);
	  };

	  /**
	   *  Correlates the elements of two sequences based on overlapping durations, and groups the results.
	   *
	   *  @param {Observable} right The right observable sequence to join elements for.
	   *  @param {Function} leftDurationSelector A function to select the duration (expressed as an observable sequence) of each element of the left observable sequence, used to determine overlap.
	   *  @param {Function} rightDurationSelector A function to select the duration (expressed as an observable sequence) of each element of the right observable sequence, used to determine overlap.
	   *  @param {Function} resultSelector A function invoked to compute a result element for any element of the left sequence with overlapping elements from the right observable sequence. The first parameter passed to the function is an element of the left sequence. The second parameter passed to the function is an observable sequence with elements from the right sequence that overlap with the left sequence's element.
	   *  @returns {Observable} An observable sequence that contains result elements computed from source elements that have an overlapping duration.
	   */
	  observableProto.groupJoin = function (right, leftDurationSelector, rightDurationSelector, resultSelector) {
	    var left = this;
	    return new AnonymousObservable(function (observer) {
	      var group = new CompositeDisposable();
	      var r = new RefCountDisposable(group);
	      var leftMap = new Dictionary(), rightMap = new Dictionary();
	      var leftId = 0, rightId = 0;

	      function handleError(e) { return function (v) { v.onError(e); }; };

	      group.add(left.subscribe(
	        function (value) {
	          var s = new Subject();
	          var id = leftId++;
	          leftMap.add(id, s);

	          var result;
	          try {
	            result = resultSelector(value, addRef(s, r));
	          } catch (e) {
	            leftMap.getValues().forEach(handleError(e));
	            observer.onError(e);
	            return;
	          }
	          observer.onNext(result);

	          rightMap.getValues().forEach(function (v) { s.onNext(v); });

	          var md = new SingleAssignmentDisposable();
	          group.add(md);

	          var expire = function () {
	            leftMap.remove(id) && s.onCompleted();
	            group.remove(md);
	          };

	          var duration;
	          try {
	            duration = leftDurationSelector(value);
	          } catch (e) {
	            leftMap.getValues().forEach(handleError(e));
	            observer.onError(e);
	            return;
	          }

	          md.setDisposable(duration.take(1).subscribe(
	            noop,
	            function (e) {
	              leftMap.getValues().forEach(handleError(e));
	              observer.onError(e);
	            },
	            expire)
	          );
	        },
	        function (e) {
	          leftMap.getValues().forEach(handleError(e));
	          observer.onError(e);
	        },
	        observer.onCompleted.bind(observer))
	      );

	      group.add(right.subscribe(
	        function (value) {
	          var id = rightId++;
	          rightMap.add(id, value);

	          var md = new SingleAssignmentDisposable();
	          group.add(md);

	          var expire = function () {
	            rightMap.remove(id);
	            group.remove(md);
	          };

	          var duration;
	          try {
	            duration = rightDurationSelector(value);
	          } catch (e) {
	            leftMap.getValues().forEach(handleError(e));
	            observer.onError(e);
	            return;
	          }
	          md.setDisposable(duration.take(1).subscribe(
	            noop,
	            function (e) {
	              leftMap.getValues().forEach(handleError(e));
	              observer.onError(e);
	            },
	            expire)
	          );

	          leftMap.getValues().forEach(function (v) { v.onNext(value); });
	        },
	        function (e) {
	          leftMap.getValues().forEach(handleError(e));
	          observer.onError(e);
	        })
	      );

	      return r;
	    }, left);
	  };

	    /**
	     *  Projects each element of an observable sequence into zero or more buffers.
	     *
	     *  @param {Mixed} bufferOpeningsOrClosingSelector Observable sequence whose elements denote the creation of new windows, or, a function invoked to define the boundaries of the produced windows (a new window is started when the previous one is closed, resulting in non-overlapping windows).
	     *  @param {Function} [bufferClosingSelector] A function invoked to define the closing of each produced window. If a closing selector function is specified for the first parameter, this parameter is ignored.
	     *  @returns {Observable} An observable sequence of windows.
	     */
	    observableProto.buffer = function (bufferOpeningsOrClosingSelector, bufferClosingSelector) {
	        return this.window.apply(this, arguments).selectMany(function (x) { return x.toArray(); });
	    };

	  /**
	   *  Projects each element of an observable sequence into zero or more windows.
	   *
	   *  @param {Mixed} windowOpeningsOrClosingSelector Observable sequence whose elements denote the creation of new windows, or, a function invoked to define the boundaries of the produced windows (a new window is started when the previous one is closed, resulting in non-overlapping windows).
	   *  @param {Function} [windowClosingSelector] A function invoked to define the closing of each produced window. If a closing selector function is specified for the first parameter, this parameter is ignored.
	   *  @returns {Observable} An observable sequence of windows.
	   */
	  observableProto.window = function (windowOpeningsOrClosingSelector, windowClosingSelector) {
	    if (arguments.length === 1 && typeof arguments[0] !== 'function') {
	      return observableWindowWithBoundaries.call(this, windowOpeningsOrClosingSelector);
	    }
	    return typeof windowOpeningsOrClosingSelector === 'function' ?
	      observableWindowWithClosingSelector.call(this, windowOpeningsOrClosingSelector) :
	      observableWindowWithOpenings.call(this, windowOpeningsOrClosingSelector, windowClosingSelector);
	  };

	  function observableWindowWithOpenings(windowOpenings, windowClosingSelector) {
	    return windowOpenings.groupJoin(this, windowClosingSelector, observableEmpty, function (_, win) {
	      return win;
	    });
	  }

	  function observableWindowWithBoundaries(windowBoundaries) {
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      var win = new Subject(),
	        d = new CompositeDisposable(),
	        r = new RefCountDisposable(d);

	      observer.onNext(addRef(win, r));

	      d.add(source.subscribe(function (x) {
	        win.onNext(x);
	      }, function (err) {
	        win.onError(err);
	        observer.onError(err);
	      }, function () {
	        win.onCompleted();
	        observer.onCompleted();
	      }));

	      isPromise(windowBoundaries) && (windowBoundaries = observableFromPromise(windowBoundaries));

	      d.add(windowBoundaries.subscribe(function (w) {
	        win.onCompleted();
	        win = new Subject();
	        observer.onNext(addRef(win, r));
	      }, function (err) {
	        win.onError(err);
	        observer.onError(err);
	      }, function () {
	        win.onCompleted();
	        observer.onCompleted();
	      }));

	      return r;
	    }, source);
	  }

	  function observableWindowWithClosingSelector(windowClosingSelector) {
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      var m = new SerialDisposable(),
	        d = new CompositeDisposable(m),
	        r = new RefCountDisposable(d),
	        win = new Subject();
	      observer.onNext(addRef(win, r));
	      d.add(source.subscribe(function (x) {
	          win.onNext(x);
	      }, function (err) {
	          win.onError(err);
	          observer.onError(err);
	      }, function () {
	          win.onCompleted();
	          observer.onCompleted();
	      }));

	      function createWindowClose () {
	        var windowClose;
	        try {
	          windowClose = windowClosingSelector();
	        } catch (e) {
	          observer.onError(e);
	          return;
	        }

	        isPromise(windowClose) && (windowClose = observableFromPromise(windowClose));

	        var m1 = new SingleAssignmentDisposable();
	        m.setDisposable(m1);
	        m1.setDisposable(windowClose.take(1).subscribe(noop, function (err) {
	          win.onError(err);
	          observer.onError(err);
	        }, function () {
	          win.onCompleted();
	          win = new Subject();
	          observer.onNext(addRef(win, r));
	          createWindowClose();
	        }));
	      }

	      createWindowClose();
	      return r;
	    }, source);
	  }

	  /**
	   * Returns a new observable that triggers on the second and subsequent triggerings of the input observable.
	   * The Nth triggering of the input observable passes the arguments from the N-1th and Nth triggering as a pair.
	   * The argument passed to the N-1th triggering is held in hidden internal state until the Nth triggering occurs.
	   * @returns {Observable} An observable that triggers on successive pairs of observations from the input observable as an array.
	   */
	  observableProto.pairwise = function () {
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      var previous, hasPrevious = false;
	      return source.subscribe(
	        function (x) {
	          if (hasPrevious) {
	            observer.onNext([previous, x]);
	          } else {
	            hasPrevious = true;
	          }
	          previous = x;
	        },
	        observer.onError.bind(observer),
	        observer.onCompleted.bind(observer));
	    }, source);
	  };

	  /**
	   * Returns two observables which partition the observations of the source by the given function.
	   * The first will trigger observations for those values for which the predicate returns true.
	   * The second will trigger observations for those values where the predicate returns false.
	   * The predicate is executed once for each subscribed observer.
	   * Both also propagate all error observations arising from the source and each completes
	   * when the source completes.
	   * @param {Function} predicate
	   *    The function to determine which output Observable will trigger a particular observation.
	   * @returns {Array}
	   *    An array of observables. The first triggers when the predicate returns true,
	   *    and the second triggers when the predicate returns false.
	  */
	  observableProto.partition = function(predicate, thisArg) {
	    return [
	      this.filter(predicate, thisArg),
	      this.filter(function (x, i, o) { return !predicate.call(thisArg, x, i, o); })
	    ];
	  };

	  function enumerableWhile(condition, source) {
	    return new Enumerable(function () {
	      return new Enumerator(function () {
	        return condition() ?
	          { done: false, value: source } :
	          { done: true, value: undefined };
	      });
	    });
	  }

	   /**
	   *  Returns an observable sequence that is the result of invoking the selector on the source sequence, without sharing subscriptions.
	   *  This operator allows for a fluent style of writing queries that use the same sequence multiple times.
	   *
	   * @param {Function} selector Selector function which can use the source sequence as many times as needed, without sharing subscriptions to the source sequence.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
	   */
	  observableProto.letBind = observableProto['let'] = function (func) {
	    return func(this);
	  };

	   /**
	   *  Determines whether an observable collection contains values. There is an alias for this method called 'ifThen' for browsers <IE9
	   *
	   * @example
	   *  1 - res = Rx.Observable.if(condition, obs1);
	   *  2 - res = Rx.Observable.if(condition, obs1, obs2);
	   *  3 - res = Rx.Observable.if(condition, obs1, scheduler);
	   * @param {Function} condition The condition which determines if the thenSource or elseSource will be run.
	   * @param {Observable} thenSource The observable sequence or Promise that will be run if the condition function returns true.
	   * @param {Observable} [elseSource] The observable sequence or Promise that will be run if the condition function returns false. If this is not provided, it defaults to Rx.Observabe.Empty with the specified scheduler.
	   * @returns {Observable} An observable sequence which is either the thenSource or elseSource.
	   */
	  Observable['if'] = Observable.ifThen = function (condition, thenSource, elseSourceOrScheduler) {
	    return observableDefer(function () {
	      elseSourceOrScheduler || (elseSourceOrScheduler = observableEmpty());

	      isPromise(thenSource) && (thenSource = observableFromPromise(thenSource));
	      isPromise(elseSourceOrScheduler) && (elseSourceOrScheduler = observableFromPromise(elseSourceOrScheduler));

	      // Assume a scheduler for empty only
	      typeof elseSourceOrScheduler.now === 'function' && (elseSourceOrScheduler = observableEmpty(elseSourceOrScheduler));
	      return condition() ? thenSource : elseSourceOrScheduler;
	    });
	  };

	   /**
	   *  Concatenates the observable sequences obtained by running the specified result selector for each element in source.
	   * There is an alias for this method called 'forIn' for browsers <IE9
	   * @param {Array} sources An array of values to turn into an observable sequence.
	   * @param {Function} resultSelector A function to apply to each item in the sources array to turn it into an observable sequence.
	   * @returns {Observable} An observable sequence from the concatenated observable sequences.
	   */
	  Observable['for'] = Observable.forIn = function (sources, resultSelector, thisArg) {
	    return enumerableOf(sources, resultSelector, thisArg).concat();
	  };

	   /**
	   *  Repeats source as long as condition holds emulating a while loop.
	   * There is an alias for this method called 'whileDo' for browsers <IE9
	   *
	   * @param {Function} condition The condition which determines if the source will be repeated.
	   * @param {Observable} source The observable sequence that will be run if the condition function returns true.
	   * @returns {Observable} An observable sequence which is repeated as long as the condition holds.
	   */
	  var observableWhileDo = Observable['while'] = Observable.whileDo = function (condition, source) {
	    isPromise(source) && (source = observableFromPromise(source));
	    return enumerableWhile(condition, source).concat();
	  };

	   /**
	   *  Repeats source as long as condition holds emulating a do while loop.
	   *
	   * @param {Function} condition The condition which determines if the source will be repeated.
	   * @param {Observable} source The observable sequence that will be run if the condition function returns true.
	   * @returns {Observable} An observable sequence which is repeated as long as the condition holds.
	   */
	  observableProto.doWhile = function (condition) {
	    return observableConcat([this, observableWhileDo(condition, this)]);
	  };

	   /**
	   *  Uses selector to determine which source in sources to use.
	   *  There is an alias 'switchCase' for browsers <IE9.
	   *
	   * @example
	   *  1 - res = Rx.Observable.case(selector, { '1': obs1, '2': obs2 });
	   *  1 - res = Rx.Observable.case(selector, { '1': obs1, '2': obs2 }, obs0);
	   *  1 - res = Rx.Observable.case(selector, { '1': obs1, '2': obs2 }, scheduler);
	   *
	   * @param {Function} selector The function which extracts the value for to test in a case statement.
	   * @param {Array} sources A object which has keys which correspond to the case statement labels.
	   * @param {Observable} [elseSource] The observable sequence or Promise that will be run if the sources are not matched. If this is not provided, it defaults to Rx.Observabe.empty with the specified scheduler.
	   *
	   * @returns {Observable} An observable sequence which is determined by a case statement.
	   */
	  Observable['case'] = Observable.switchCase = function (selector, sources, defaultSourceOrScheduler) {
	    return observableDefer(function () {
	      isPromise(defaultSourceOrScheduler) && (defaultSourceOrScheduler = observableFromPromise(defaultSourceOrScheduler));
	      defaultSourceOrScheduler || (defaultSourceOrScheduler = observableEmpty());

	      typeof defaultSourceOrScheduler.now === 'function' && (defaultSourceOrScheduler = observableEmpty(defaultSourceOrScheduler));

	      var result = sources[selector()];
	      isPromise(result) && (result = observableFromPromise(result));

	      return result || defaultSourceOrScheduler;
	    });
	  };

	   /**
	   *  Expands an observable sequence by recursively invoking selector.
	   *
	   * @param {Function} selector Selector function to invoke for each produced element, resulting in another sequence to which the selector will be invoked recursively again.
	   * @param {Scheduler} [scheduler] Scheduler on which to perform the expansion. If not provided, this defaults to the current thread scheduler.
	   * @returns {Observable} An observable sequence containing all the elements produced by the recursive expansion.
	   */
	  observableProto.expand = function (selector, scheduler) {
	    isScheduler(scheduler) || (scheduler = immediateScheduler);
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      var q = [],
	        m = new SerialDisposable(),
	        d = new CompositeDisposable(m),
	        activeCount = 0,
	        isAcquired = false;

	      var ensureActive = function () {
	        var isOwner = false;
	        if (q.length > 0) {
	          isOwner = !isAcquired;
	          isAcquired = true;
	        }
	        if (isOwner) {
	          m.setDisposable(scheduler.scheduleRecursive(function (self) {
	            var work;
	            if (q.length > 0) {
	              work = q.shift();
	            } else {
	              isAcquired = false;
	              return;
	            }
	            var m1 = new SingleAssignmentDisposable();
	            d.add(m1);
	            m1.setDisposable(work.subscribe(function (x) {
	              observer.onNext(x);
	              var result = null;
	              try {
	                result = selector(x);
	              } catch (e) {
	                observer.onError(e);
	              }
	              q.push(result);
	              activeCount++;
	              ensureActive();
	            }, observer.onError.bind(observer), function () {
	              d.remove(m1);
	              activeCount--;
	              if (activeCount === 0) {
	                observer.onCompleted();
	              }
	            }));
	            self();
	          }));
	        }
	      };

	      q.push(source);
	      activeCount++;
	      ensureActive();
	      return d;
	    }, this);
	  };

	   /**
	   *  Runs all observable sequences in parallel and collect their last elements.
	   *
	   * @example
	   *  1 - res = Rx.Observable.forkJoin([obs1, obs2]);
	   *  1 - res = Rx.Observable.forkJoin(obs1, obs2, ...);
	   * @returns {Observable} An observable sequence with an array collecting the last elements of all the input sequences.
	   */
	  Observable.forkJoin = function () {
	    var allSources = [];
	    if (Array.isArray(arguments[0])) {
	      allSources = arguments[0];
	    } else {
	      for(var i = 0, len = arguments.length; i < len; i++) { allSources.push(arguments[i]); }
	    }
	    return new AnonymousObservable(function (subscriber) {
	      var count = allSources.length;
	      if (count === 0) {
	        subscriber.onCompleted();
	        return disposableEmpty;
	      }
	      var group = new CompositeDisposable(),
	        finished = false,
	        hasResults = new Array(count),
	        hasCompleted = new Array(count),
	        results = new Array(count);

	      for (var idx = 0; idx < count; idx++) {
	        (function (i) {
	          var source = allSources[i];
	          isPromise(source) && (source = observableFromPromise(source));
	          group.add(
	            source.subscribe(
	              function (value) {
	              if (!finished) {
	                hasResults[i] = true;
	                results[i] = value;
	              }
	            },
	            function (e) {
	              finished = true;
	              subscriber.onError(e);
	              group.dispose();
	            },
	            function () {
	              if (!finished) {
	                if (!hasResults[i]) {
	                    subscriber.onCompleted();
	                    return;
	                }
	                hasCompleted[i] = true;
	                for (var ix = 0; ix < count; ix++) {
	                  if (!hasCompleted[ix]) { return; }
	                }
	                finished = true;
	                subscriber.onNext(results);
	                subscriber.onCompleted();
	              }
	            }));
	        })(idx);
	      }

	      return group;
	    });
	  };

	   /**
	   *  Runs two observable sequences in parallel and combines their last elemenets.
	   *
	   * @param {Observable} second Second observable sequence.
	   * @param {Function} resultSelector Result selector function to invoke with the last elements of both sequences.
	   * @returns {Observable} An observable sequence with the result of calling the selector function with the last elements of both input sequences.
	   */
	  observableProto.forkJoin = function (second, resultSelector) {
	    var first = this;
	    return new AnonymousObservable(function (observer) {
	      var leftStopped = false, rightStopped = false,
	        hasLeft = false, hasRight = false,
	        lastLeft, lastRight,
	        leftSubscription = new SingleAssignmentDisposable(), rightSubscription = new SingleAssignmentDisposable();

	      isPromise(second) && (second = observableFromPromise(second));

	      leftSubscription.setDisposable(
	          first.subscribe(function (left) {
	            hasLeft = true;
	            lastLeft = left;
	          }, function (err) {
	            rightSubscription.dispose();
	            observer.onError(err);
	          }, function () {
	            leftStopped = true;
	            if (rightStopped) {
	              if (!hasLeft) {
	                  observer.onCompleted();
	              } else if (!hasRight) {
	                  observer.onCompleted();
	              } else {
	                var result;
	                try {
	                  result = resultSelector(lastLeft, lastRight);
	                } catch (e) {
	                  observer.onError(e);
	                  return;
	                }
	                observer.onNext(result);
	                observer.onCompleted();
	              }
	            }
	          })
	      );

	      rightSubscription.setDisposable(
	        second.subscribe(function (right) {
	          hasRight = true;
	          lastRight = right;
	        }, function (err) {
	          leftSubscription.dispose();
	          observer.onError(err);
	        }, function () {
	          rightStopped = true;
	          if (leftStopped) {
	            if (!hasLeft) {
	              observer.onCompleted();
	            } else if (!hasRight) {
	              observer.onCompleted();
	            } else {
	              var result;
	              try {
	                result = resultSelector(lastLeft, lastRight);
	              } catch (e) {
	                observer.onError(e);
	                return;
	              }
	              observer.onNext(result);
	              observer.onCompleted();
	            }
	          }
	        })
	      );

	      return new CompositeDisposable(leftSubscription, rightSubscription);
	    }, first);
	  };

	  /**
	   * Comonadic bind operator.
	   * @param {Function} selector A transform function to apply to each element.
	   * @param {Object} scheduler Scheduler used to execute the operation. If not specified, defaults to the ImmediateScheduler.
	   * @returns {Observable} An observable sequence which results from the comonadic bind operation.
	   */
	  observableProto.manySelect = function (selector, scheduler) {
	    isScheduler(scheduler) || (scheduler = immediateScheduler);
	    var source = this;
	    return observableDefer(function () {
	      var chain;

	      return source
	        .map(function (x) {
	          var curr = new ChainObservable(x);

	          chain && chain.onNext(x);
	          chain = curr;

	          return curr;
	        })
	        .tap(
	          noop,
	          function (e) { chain && chain.onError(e); },
	          function () { chain && chain.onCompleted(); }
	        )
	        .observeOn(scheduler)
	        .map(selector);
	    }, source);
	  };

	  var ChainObservable = (function (__super__) {

	    function subscribe (observer) {
	      var self = this, g = new CompositeDisposable();
	      g.add(currentThreadScheduler.schedule(function () {
	        observer.onNext(self.head);
	        g.add(self.tail.mergeAll().subscribe(observer));
	      }));

	      return g;
	    }

	    inherits(ChainObservable, __super__);

	    function ChainObservable(head) {
	      __super__.call(this, subscribe);
	      this.head = head;
	      this.tail = new AsyncSubject();
	    }

	    addProperties(ChainObservable.prototype, Observer, {
	      onCompleted: function () {
	        this.onNext(Observable.empty());
	      },
	      onError: function (e) {
	        this.onNext(Observable.throwError(e));
	      },
	      onNext: function (v) {
	        this.tail.onNext(v);
	        this.tail.onCompleted();
	      }
	    });

	    return ChainObservable;

	  }(Observable));

	  /** @private */
	  var Map = root.Map || (function () {

	    function Map() {
	      this._keys = [];
	      this._values = [];
	    }

	    Map.prototype.get = function (key) {
	      var i = this._keys.indexOf(key);
	      return i !== -1 ? this._values[i] : undefined;
	    };

	    Map.prototype.set = function (key, value) {
	      var i = this._keys.indexOf(key);
	      i !== -1 && (this._values[i] = value);
	      this._values[this._keys.push(key) - 1] = value;
	    };

	    Map.prototype.forEach = function (callback, thisArg) {
	      for (var i = 0, len = this._keys.length; i < len; i++) {
	        callback.call(thisArg, this._values[i], this._keys[i]);
	      }
	    };

	    return Map;
	  }());

	  /**
	   * @constructor
	   * Represents a join pattern over observable sequences.
	   */
	  function Pattern(patterns) {
	    this.patterns = patterns;
	  }

	  /**
	   *  Creates a pattern that matches the current plan matches and when the specified observable sequences has an available value.
	   *  @param other Observable sequence to match in addition to the current pattern.
	   *  @return {Pattern} Pattern object that matches when all observable sequences in the pattern have an available value.
	   */
	  Pattern.prototype.and = function (other) {
	    return new Pattern(this.patterns.concat(other));
	  };

	  /**
	   *  Matches when all observable sequences in the pattern (specified using a chain of and operators) have an available value and projects the values.
	   *  @param {Function} selector Selector that will be invoked with available values from the source sequences, in the same order of the sequences in the pattern.
	   *  @return {Plan} Plan that produces the projected values, to be fed (with other plans) to the when operator.
	   */
	  Pattern.prototype.thenDo = function (selector) {
	    return new Plan(this, selector);
	  };

	  function Plan(expression, selector) {
	      this.expression = expression;
	      this.selector = selector;
	  }

	  Plan.prototype.activate = function (externalSubscriptions, observer, deactivate) {
	    var self = this;
	    var joinObservers = [];
	    for (var i = 0, len = this.expression.patterns.length; i < len; i++) {
	      joinObservers.push(planCreateObserver(externalSubscriptions, this.expression.patterns[i], observer.onError.bind(observer)));
	    }
	    var activePlan = new ActivePlan(joinObservers, function () {
	      var result;
	      try {
	        result = self.selector.apply(self, arguments);
	      } catch (e) {
	        observer.onError(e);
	        return;
	      }
	      observer.onNext(result);
	    }, function () {
	      for (var j = 0, jlen = joinObservers.length; j < jlen; j++) {
	        joinObservers[j].removeActivePlan(activePlan);
	      }
	      deactivate(activePlan);
	    });
	    for (i = 0, len = joinObservers.length; i < len; i++) {
	      joinObservers[i].addActivePlan(activePlan);
	    }
	    return activePlan;
	  };

	  function planCreateObserver(externalSubscriptions, observable, onError) {
	    var entry = externalSubscriptions.get(observable);
	    if (!entry) {
	      var observer = new JoinObserver(observable, onError);
	      externalSubscriptions.set(observable, observer);
	      return observer;
	    }
	    return entry;
	  }

	  function ActivePlan(joinObserverArray, onNext, onCompleted) {
	    this.joinObserverArray = joinObserverArray;
	    this.onNext = onNext;
	    this.onCompleted = onCompleted;
	    this.joinObservers = new Map();
	    for (var i = 0, len = this.joinObserverArray.length; i < len; i++) {
	      var joinObserver = this.joinObserverArray[i];
	      this.joinObservers.set(joinObserver, joinObserver);
	    }
	  }

	  ActivePlan.prototype.dequeue = function () {
	    this.joinObservers.forEach(function (v) { v.queue.shift(); });
	  };

	  ActivePlan.prototype.match = function () {
	    var i, len, hasValues = true;
	    for (i = 0, len = this.joinObserverArray.length; i < len; i++) {
	      if (this.joinObserverArray[i].queue.length === 0) {
	        hasValues = false;
	        break;
	      }
	    }
	    if (hasValues) {
	      var firstValues = [],
	          isCompleted = false;
	      for (i = 0, len = this.joinObserverArray.length; i < len; i++) {
	        firstValues.push(this.joinObserverArray[i].queue[0]);
	        this.joinObserverArray[i].queue[0].kind === 'C' && (isCompleted = true);
	      }
	      if (isCompleted) {
	        this.onCompleted();
	      } else {
	        this.dequeue();
	        var values = [];
	        for (i = 0, len = firstValues.length; i < firstValues.length; i++) {
	          values.push(firstValues[i].value);
	        }
	        this.onNext.apply(this, values);
	      }
	    }
	  };

	  var JoinObserver = (function (__super__) {
	    inherits(JoinObserver, __super__);

	    function JoinObserver(source, onError) {
	      __super__.call(this);
	      this.source = source;
	      this.onError = onError;
	      this.queue = [];
	      this.activePlans = [];
	      this.subscription = new SingleAssignmentDisposable();
	      this.isDisposed = false;
	    }

	    var JoinObserverPrototype = JoinObserver.prototype;

	    JoinObserverPrototype.next = function (notification) {
	      if (!this.isDisposed) {
	        if (notification.kind === 'E') {
	          return this.onError(notification.exception);
	        }
	        this.queue.push(notification);
	        var activePlans = this.activePlans.slice(0);
	        for (var i = 0, len = activePlans.length; i < len; i++) {
	          activePlans[i].match();
	        }
	      }
	    };

	    JoinObserverPrototype.error = noop;
	    JoinObserverPrototype.completed = noop;

	    JoinObserverPrototype.addActivePlan = function (activePlan) {
	      this.activePlans.push(activePlan);
	    };

	    JoinObserverPrototype.subscribe = function () {
	      this.subscription.setDisposable(this.source.materialize().subscribe(this));
	    };

	    JoinObserverPrototype.removeActivePlan = function (activePlan) {
	      this.activePlans.splice(this.activePlans.indexOf(activePlan), 1);
	      this.activePlans.length === 0 && this.dispose();
	    };

	    JoinObserverPrototype.dispose = function () {
	      __super__.prototype.dispose.call(this);
	      if (!this.isDisposed) {
	        this.isDisposed = true;
	        this.subscription.dispose();
	      }
	    };

	    return JoinObserver;
	  } (AbstractObserver));

	  /**
	   *  Creates a pattern that matches when both observable sequences have an available value.
	   *
	   *  @param right Observable sequence to match with the current sequence.
	   *  @return {Pattern} Pattern object that matches when both observable sequences have an available value.
	   */
	  observableProto.and = function (right) {
	    return new Pattern([this, right]);
	  };

	  /**
	   *  Matches when the observable sequence has an available value and projects the value.
	   *
	   *  @param {Function} selector Selector that will be invoked for values in the source sequence.
	   *  @returns {Plan} Plan that produces the projected values, to be fed (with other plans) to the when operator.
	   */
	  observableProto.thenDo = function (selector) {
	    return new Pattern([this]).thenDo(selector);
	  };

	  /**
	   *  Joins together the results from several patterns.
	   *
	   *  @param plans A series of plans (specified as an Array of as a series of arguments) created by use of the Then operator on patterns.
	   *  @returns {Observable} Observable sequence with the results form matching several patterns.
	   */
	  Observable.when = function () {
	    var len = arguments.length, plans;
	    if (Array.isArray(arguments[0])) {
	      plans = arguments[0];
	    } else {
	      plans = new Array(len);
	      for(var i = 0; i < len; i++) { plans[i] = arguments[i]; }
	    }
	    return new AnonymousObservable(function (o) {
	      var activePlans = [],
	          externalSubscriptions = new Map();
	      var outObserver = observerCreate(
	        function (x) { o.onNext(x); },
	        function (err) {
	          externalSubscriptions.forEach(function (v) { v.onError(err); });
	          o.onError(err);
	        },
	        function (x) { o.onCompleted(); }
	      );
	      try {
	        for (var i = 0, len = plans.length; i < len; i++) {
	          activePlans.push(plans[i].activate(externalSubscriptions, outObserver, function (activePlan) {
	            var idx = activePlans.indexOf(activePlan);
	            activePlans.splice(idx, 1);
	            activePlans.length === 0 && o.onCompleted();
	          }));
	        }
	      } catch (e) {
	        observableThrow(e).subscribe(o);
	      }
	      var group = new CompositeDisposable();
	      externalSubscriptions.forEach(function (joinObserver) {
	        joinObserver.subscribe();
	        group.add(joinObserver);
	      });

	      return group;
	    });
	  };

	  function observableTimerDate(dueTime, scheduler) {
	    return new AnonymousObservable(function (observer) {
	      return scheduler.scheduleWithAbsolute(dueTime, function () {
	        observer.onNext(0);
	        observer.onCompleted();
	      });
	    });
	  }

	  function observableTimerDateAndPeriod(dueTime, period, scheduler) {
	    return new AnonymousObservable(function (observer) {
	      var d = dueTime, p = normalizeTime(period);
	      return scheduler.scheduleRecursiveWithAbsoluteAndState(0, d, function (count, self) {
	        if (p > 0) {
	          var now = scheduler.now();
	          d = d + p;
	          d <= now && (d = now + p);
	        }
	        observer.onNext(count);
	        self(count + 1, d);
	      });
	    });
	  }

	  function observableTimerTimeSpan(dueTime, scheduler) {
	    return new AnonymousObservable(function (observer) {
	      return scheduler.scheduleWithRelative(normalizeTime(dueTime), function () {
	        observer.onNext(0);
	        observer.onCompleted();
	      });
	    });
	  }

	  function observableTimerTimeSpanAndPeriod(dueTime, period, scheduler) {
	    return dueTime === period ?
	      new AnonymousObservable(function (observer) {
	        return scheduler.schedulePeriodicWithState(0, period, function (count) {
	          observer.onNext(count);
	          return count + 1;
	        });
	      }) :
	      observableDefer(function () {
	        return observableTimerDateAndPeriod(scheduler.now() + dueTime, period, scheduler);
	      });
	  }

	  /**
	   *  Returns an observable sequence that produces a value after each period.
	   *
	   * @example
	   *  1 - res = Rx.Observable.interval(1000);
	   *  2 - res = Rx.Observable.interval(1000, Rx.Scheduler.timeout);
	   *
	   * @param {Number} period Period for producing the values in the resulting sequence (specified as an integer denoting milliseconds).
	   * @param {Scheduler} [scheduler] Scheduler to run the timer on. If not specified, Rx.Scheduler.timeout is used.
	   * @returns {Observable} An observable sequence that produces a value after each period.
	   */
	  var observableinterval = Observable.interval = function (period, scheduler) {
	    return observableTimerTimeSpanAndPeriod(period, period, isScheduler(scheduler) ? scheduler : timeoutScheduler);
	  };

	  /**
	   *  Returns an observable sequence that produces a value after dueTime has elapsed and then after each period.
	   * @param {Number} dueTime Absolute (specified as a Date object) or relative time (specified as an integer denoting milliseconds) at which to produce the first value.
	   * @param {Mixed} [periodOrScheduler]  Period to produce subsequent values (specified as an integer denoting milliseconds), or the scheduler to run the timer on. If not specified, the resulting timer is not recurring.
	   * @param {Scheduler} [scheduler]  Scheduler to run the timer on. If not specified, the timeout scheduler is used.
	   * @returns {Observable} An observable sequence that produces a value after due time has elapsed and then each period.
	   */
	  var observableTimer = Observable.timer = function (dueTime, periodOrScheduler, scheduler) {
	    var period;
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    if (periodOrScheduler !== undefined && typeof periodOrScheduler === 'number') {
	      period = periodOrScheduler;
	    } else if (isScheduler(periodOrScheduler)) {
	      scheduler = periodOrScheduler;
	    }
	    if (dueTime instanceof Date && period === undefined) {
	      return observableTimerDate(dueTime.getTime(), scheduler);
	    }
	    if (dueTime instanceof Date && period !== undefined) {
	      period = periodOrScheduler;
	      return observableTimerDateAndPeriod(dueTime.getTime(), period, scheduler);
	    }
	    return period === undefined ?
	      observableTimerTimeSpan(dueTime, scheduler) :
	      observableTimerTimeSpanAndPeriod(dueTime, period, scheduler);
	  };

	  function observableDelayTimeSpan(source, dueTime, scheduler) {
	    return new AnonymousObservable(function (observer) {
	      var active = false,
	        cancelable = new SerialDisposable(),
	        exception = null,
	        q = [],
	        running = false,
	        subscription;
	      subscription = source.materialize().timestamp(scheduler).subscribe(function (notification) {
	        var d, shouldRun;
	        if (notification.value.kind === 'E') {
	          q = [];
	          q.push(notification);
	          exception = notification.value.exception;
	          shouldRun = !running;
	        } else {
	          q.push({ value: notification.value, timestamp: notification.timestamp + dueTime });
	          shouldRun = !active;
	          active = true;
	        }
	        if (shouldRun) {
	          if (exception !== null) {
	            observer.onError(exception);
	          } else {
	            d = new SingleAssignmentDisposable();
	            cancelable.setDisposable(d);
	            d.setDisposable(scheduler.scheduleRecursiveWithRelative(dueTime, function (self) {
	              var e, recurseDueTime, result, shouldRecurse;
	              if (exception !== null) {
	                return;
	              }
	              running = true;
	              do {
	                result = null;
	                if (q.length > 0 && q[0].timestamp - scheduler.now() <= 0) {
	                  result = q.shift().value;
	                }
	                if (result !== null) {
	                  result.accept(observer);
	                }
	              } while (result !== null);
	              shouldRecurse = false;
	              recurseDueTime = 0;
	              if (q.length > 0) {
	                shouldRecurse = true;
	                recurseDueTime = Math.max(0, q[0].timestamp - scheduler.now());
	              } else {
	                active = false;
	              }
	              e = exception;
	              running = false;
	              if (e !== null) {
	                observer.onError(e);
	              } else if (shouldRecurse) {
	                self(recurseDueTime);
	              }
	            }));
	          }
	        }
	      });
	      return new CompositeDisposable(subscription, cancelable);
	    }, source);
	  }

	  function observableDelayDate(source, dueTime, scheduler) {
	    return observableDefer(function () {
	      return observableDelayTimeSpan(source, dueTime - scheduler.now(), scheduler);
	    });
	  }

	  /**
	   *  Time shifts the observable sequence by dueTime. The relative time intervals between the values are preserved.
	   *
	   * @example
	   *  1 - res = Rx.Observable.delay(new Date());
	   *  2 - res = Rx.Observable.delay(new Date(), Rx.Scheduler.timeout);
	   *
	   *  3 - res = Rx.Observable.delay(5000);
	   *  4 - res = Rx.Observable.delay(5000, 1000, Rx.Scheduler.timeout);
	   * @memberOf Observable#
	   * @param {Number} dueTime Absolute (specified as a Date object) or relative time (specified as an integer denoting milliseconds) by which to shift the observable sequence.
	   * @param {Scheduler} [scheduler] Scheduler to run the delay timers on. If not specified, the timeout scheduler is used.
	   * @returns {Observable} Time-shifted sequence.
	   */
	  observableProto.delay = function (dueTime, scheduler) {
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    return dueTime instanceof Date ?
	      observableDelayDate(this, dueTime.getTime(), scheduler) :
	      observableDelayTimeSpan(this, dueTime, scheduler);
	  };

	  /**
	   *  Ignores values from an observable sequence which are followed by another value before dueTime.
	   * @param {Number} dueTime Duration of the debounce period for each value (specified as an integer denoting milliseconds).
	   * @param {Scheduler} [scheduler]  Scheduler to run the debounce timers on. If not specified, the timeout scheduler is used.
	   * @returns {Observable} The debounced sequence.
	   */
	  observableProto.debounce = observableProto.throttleWithTimeout = function (dueTime, scheduler) {
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      var cancelable = new SerialDisposable(), hasvalue = false, value, id = 0;
	      var subscription = source.subscribe(
	        function (x) {
	          hasvalue = true;
	          value = x;
	          id++;
	          var currentId = id,
	            d = new SingleAssignmentDisposable();
	          cancelable.setDisposable(d);
	          d.setDisposable(scheduler.scheduleWithRelative(dueTime, function () {
	            hasvalue && id === currentId && observer.onNext(value);
	            hasvalue = false;
	          }));
	        },
	        function (e) {
	          cancelable.dispose();
	          observer.onError(e);
	          hasvalue = false;
	          id++;
	        },
	        function () {
	          cancelable.dispose();
	          hasvalue && observer.onNext(value);
	          observer.onCompleted();
	          hasvalue = false;
	          id++;
	        });
	      return new CompositeDisposable(subscription, cancelable);
	    }, this);
	  };

	  /**
	   * @deprecated use #debounce or #throttleWithTimeout instead.
	   */
	  observableProto.throttle = function(dueTime, scheduler) {
	    //deprecate('throttle', 'debounce or throttleWithTimeout');
	    return this.debounce(dueTime, scheduler);
	  };

	  /**
	   *  Projects each element of an observable sequence into zero or more windows which are produced based on timing information.
	   * @param {Number} timeSpan Length of each window (specified as an integer denoting milliseconds).
	   * @param {Mixed} [timeShiftOrScheduler]  Interval between creation of consecutive windows (specified as an integer denoting milliseconds), or an optional scheduler parameter. If not specified, the time shift corresponds to the timeSpan parameter, resulting in non-overlapping adjacent windows.
	   * @param {Scheduler} [scheduler]  Scheduler to run windowing timers on. If not specified, the timeout scheduler is used.
	   * @returns {Observable} An observable sequence of windows.
	   */
	  observableProto.windowWithTime = function (timeSpan, timeShiftOrScheduler, scheduler) {
	    var source = this, timeShift;
	    timeShiftOrScheduler == null && (timeShift = timeSpan);
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    if (typeof timeShiftOrScheduler === 'number') {
	      timeShift = timeShiftOrScheduler;
	    } else if (isScheduler(timeShiftOrScheduler)) {
	      timeShift = timeSpan;
	      scheduler = timeShiftOrScheduler;
	    }
	    return new AnonymousObservable(function (observer) {
	      var groupDisposable,
	        nextShift = timeShift,
	        nextSpan = timeSpan,
	        q = [],
	        refCountDisposable,
	        timerD = new SerialDisposable(),
	        totalTime = 0;
	        groupDisposable = new CompositeDisposable(timerD),
	        refCountDisposable = new RefCountDisposable(groupDisposable);

	       function createTimer () {
	        var m = new SingleAssignmentDisposable(),
	          isSpan = false,
	          isShift = false;
	        timerD.setDisposable(m);
	        if (nextSpan === nextShift) {
	          isSpan = true;
	          isShift = true;
	        } else if (nextSpan < nextShift) {
	            isSpan = true;
	        } else {
	          isShift = true;
	        }
	        var newTotalTime = isSpan ? nextSpan : nextShift,
	          ts = newTotalTime - totalTime;
	        totalTime = newTotalTime;
	        if (isSpan) {
	          nextSpan += timeShift;
	        }
	        if (isShift) {
	          nextShift += timeShift;
	        }
	        m.setDisposable(scheduler.scheduleWithRelative(ts, function () {
	          if (isShift) {
	            var s = new Subject();
	            q.push(s);
	            observer.onNext(addRef(s, refCountDisposable));
	          }
	          isSpan && q.shift().onCompleted();
	          createTimer();
	        }));
	      };
	      q.push(new Subject());
	      observer.onNext(addRef(q[0], refCountDisposable));
	      createTimer();
	      groupDisposable.add(source.subscribe(
	        function (x) {
	          for (var i = 0, len = q.length; i < len; i++) { q[i].onNext(x); }
	        },
	        function (e) {
	          for (var i = 0, len = q.length; i < len; i++) { q[i].onError(e); }
	          observer.onError(e);
	        },
	        function () {
	          for (var i = 0, len = q.length; i < len; i++) { q[i].onCompleted(); }
	          observer.onCompleted();
	        }
	      ));
	      return refCountDisposable;
	    }, source);
	  };

	  /**
	   *  Projects each element of an observable sequence into a window that is completed when either it's full or a given amount of time has elapsed.
	   * @param {Number} timeSpan Maximum time length of a window.
	   * @param {Number} count Maximum element count of a window.
	   * @param {Scheduler} [scheduler]  Scheduler to run windowing timers on. If not specified, the timeout scheduler is used.
	   * @returns {Observable} An observable sequence of windows.
	   */
	  observableProto.windowWithTimeOrCount = function (timeSpan, count, scheduler) {
	    var source = this;
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    return new AnonymousObservable(function (observer) {
	      var timerD = new SerialDisposable(),
	          groupDisposable = new CompositeDisposable(timerD),
	          refCountDisposable = new RefCountDisposable(groupDisposable),
	          n = 0,
	          windowId = 0,
	          s = new Subject();

	      function createTimer(id) {
	        var m = new SingleAssignmentDisposable();
	        timerD.setDisposable(m);
	        m.setDisposable(scheduler.scheduleWithRelative(timeSpan, function () {
	          if (id !== windowId) { return; }
	          n = 0;
	          var newId = ++windowId;
	          s.onCompleted();
	          s = new Subject();
	          observer.onNext(addRef(s, refCountDisposable));
	          createTimer(newId);
	        }));
	      }

	      observer.onNext(addRef(s, refCountDisposable));
	      createTimer(0);

	      groupDisposable.add(source.subscribe(
	        function (x) {
	          var newId = 0, newWindow = false;
	          s.onNext(x);
	          if (++n === count) {
	            newWindow = true;
	            n = 0;
	            newId = ++windowId;
	            s.onCompleted();
	            s = new Subject();
	            observer.onNext(addRef(s, refCountDisposable));
	          }
	          newWindow && createTimer(newId);
	        },
	        function (e) {
	          s.onError(e);
	          observer.onError(e);
	        }, function () {
	          s.onCompleted();
	          observer.onCompleted();
	        }
	      ));
	      return refCountDisposable;
	    }, source);
	  };

	    /**
	     *  Projects each element of an observable sequence into zero or more buffers which are produced based on timing information.
	     *
	     * @example
	     *  1 - res = xs.bufferWithTime(1000, scheduler); // non-overlapping segments of 1 second
	     *  2 - res = xs.bufferWithTime(1000, 500, scheduler; // segments of 1 second with time shift 0.5 seconds
	     *
	     * @param {Number} timeSpan Length of each buffer (specified as an integer denoting milliseconds).
	     * @param {Mixed} [timeShiftOrScheduler]  Interval between creation of consecutive buffers (specified as an integer denoting milliseconds), or an optional scheduler parameter. If not specified, the time shift corresponds to the timeSpan parameter, resulting in non-overlapping adjacent buffers.
	     * @param {Scheduler} [scheduler]  Scheduler to run buffer timers on. If not specified, the timeout scheduler is used.
	     * @returns {Observable} An observable sequence of buffers.
	     */
	    observableProto.bufferWithTime = function (timeSpan, timeShiftOrScheduler, scheduler) {
	        return this.windowWithTime.apply(this, arguments).selectMany(function (x) { return x.toArray(); });
	    };

	    /**
	     *  Projects each element of an observable sequence into a buffer that is completed when either it's full or a given amount of time has elapsed.
	     *
	     * @example
	     *  1 - res = source.bufferWithTimeOrCount(5000, 50); // 5s or 50 items in an array
	     *  2 - res = source.bufferWithTimeOrCount(5000, 50, scheduler); // 5s or 50 items in an array
	     *
	     * @param {Number} timeSpan Maximum time length of a buffer.
	     * @param {Number} count Maximum element count of a buffer.
	     * @param {Scheduler} [scheduler]  Scheduler to run bufferin timers on. If not specified, the timeout scheduler is used.
	     * @returns {Observable} An observable sequence of buffers.
	     */
	    observableProto.bufferWithTimeOrCount = function (timeSpan, count, scheduler) {
	        return this.windowWithTimeOrCount(timeSpan, count, scheduler).selectMany(function (x) {
	            return x.toArray();
	        });
	    };

	  /**
	   *  Records the time interval between consecutive values in an observable sequence.
	   *
	   * @example
	   *  1 - res = source.timeInterval();
	   *  2 - res = source.timeInterval(Rx.Scheduler.timeout);
	   *
	   * @param [scheduler]  Scheduler used to compute time intervals. If not specified, the timeout scheduler is used.
	   * @returns {Observable} An observable sequence with time interval information on values.
	   */
	  observableProto.timeInterval = function (scheduler) {
	    var source = this;
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    return observableDefer(function () {
	      var last = scheduler.now();
	      return source.map(function (x) {
	        var now = scheduler.now(), span = now - last;
	        last = now;
	        return { value: x, interval: span };
	      });
	    });
	  };

	  /**
	   *  Records the timestamp for each value in an observable sequence.
	   *
	   * @example
	   *  1 - res = source.timestamp(); // produces { value: x, timestamp: ts }
	   *  2 - res = source.timestamp(Rx.Scheduler.timeout);
	   *
	   * @param {Scheduler} [scheduler]  Scheduler used to compute timestamps. If not specified, the timeout scheduler is used.
	   * @returns {Observable} An observable sequence with timestamp information on values.
	   */
	  observableProto.timestamp = function (scheduler) {
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    return this.map(function (x) {
	      return { value: x, timestamp: scheduler.now() };
	    });
	  };

	  function sampleObservable(source, sampler) {
	    return new AnonymousObservable(function (observer) {
	      var atEnd, value, hasValue;

	      function sampleSubscribe() {
	        if (hasValue) {
	          hasValue = false;
	          observer.onNext(value);
	        }
	        atEnd && observer.onCompleted();
	      }

	      return new CompositeDisposable(
	        source.subscribe(function (newValue) {
	          hasValue = true;
	          value = newValue;
	        }, observer.onError.bind(observer), function () {
	          atEnd = true;
	        }),
	        sampler.subscribe(sampleSubscribe, observer.onError.bind(observer), sampleSubscribe)
	      );
	    }, source);
	  }

	  /**
	   *  Samples the observable sequence at each interval.
	   *
	   * @example
	   *  1 - res = source.sample(sampleObservable); // Sampler tick sequence
	   *  2 - res = source.sample(5000); // 5 seconds
	   *  2 - res = source.sample(5000, Rx.Scheduler.timeout); // 5 seconds
	   *
	   * @param {Mixed} intervalOrSampler Interval at which to sample (specified as an integer denoting milliseconds) or Sampler Observable.
	   * @param {Scheduler} [scheduler]  Scheduler to run the sampling timer on. If not specified, the timeout scheduler is used.
	   * @returns {Observable} Sampled observable sequence.
	   */
	  observableProto.sample = observableProto.throttleLatest = function (intervalOrSampler, scheduler) {
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    return typeof intervalOrSampler === 'number' ?
	      sampleObservable(this, observableinterval(intervalOrSampler, scheduler)) :
	      sampleObservable(this, intervalOrSampler);
	  };

	  /**
	   *  Returns the source observable sequence or the other observable sequence if dueTime elapses.
	   * @param {Number} dueTime Absolute (specified as a Date object) or relative time (specified as an integer denoting milliseconds) when a timeout occurs.
	   * @param {Observable} [other]  Sequence to return in case of a timeout. If not specified, a timeout error throwing sequence will be used.
	   * @param {Scheduler} [scheduler]  Scheduler to run the timeout timers on. If not specified, the timeout scheduler is used.
	   * @returns {Observable} The source sequence switching to the other sequence in case of a timeout.
	   */
	  observableProto.timeout = function (dueTime, other, scheduler) {
	    (other == null || typeof other === 'string') && (other = observableThrow(new Error(other || 'Timeout')));
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);

	    var source = this, schedulerMethod = dueTime instanceof Date ?
	      'scheduleWithAbsolute' :
	      'scheduleWithRelative';

	    return new AnonymousObservable(function (observer) {
	      var id = 0,
	        original = new SingleAssignmentDisposable(),
	        subscription = new SerialDisposable(),
	        switched = false,
	        timer = new SerialDisposable();

	      subscription.setDisposable(original);

	      function createTimer() {
	        var myId = id;
	        timer.setDisposable(scheduler[schedulerMethod](dueTime, function () {
	          if (id === myId) {
	            isPromise(other) && (other = observableFromPromise(other));
	            subscription.setDisposable(other.subscribe(observer));
	          }
	        }));
	      }

	      createTimer();

	      original.setDisposable(source.subscribe(function (x) {
	        if (!switched) {
	          id++;
	          observer.onNext(x);
	          createTimer();
	        }
	      }, function (e) {
	        if (!switched) {
	          id++;
	          observer.onError(e);
	        }
	      }, function () {
	        if (!switched) {
	          id++;
	          observer.onCompleted();
	        }
	      }));
	      return new CompositeDisposable(subscription, timer);
	    }, source);
	  };

	  /**
	   *  Generates an observable sequence by iterating a state from an initial state until the condition fails.
	   *
	   * @example
	   *  res = source.generateWithAbsoluteTime(0,
	   *      function (x) { return return true; },
	   *      function (x) { return x + 1; },
	   *      function (x) { return x; },
	   *      function (x) { return new Date(); }
	   *  });
	   *
	   * @param {Mixed} initialState Initial state.
	   * @param {Function} condition Condition to terminate generation (upon returning false).
	   * @param {Function} iterate Iteration step function.
	   * @param {Function} resultSelector Selector function for results produced in the sequence.
	   * @param {Function} timeSelector Time selector function to control the speed of values being produced each iteration, returning Date values.
	   * @param {Scheduler} [scheduler]  Scheduler on which to run the generator loop. If not specified, the timeout scheduler is used.
	   * @returns {Observable} The generated sequence.
	   */
	  Observable.generateWithAbsoluteTime = function (initialState, condition, iterate, resultSelector, timeSelector, scheduler) {
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    return new AnonymousObservable(function (observer) {
	      var first = true,
	        hasResult = false,
	        result,
	        state = initialState,
	        time;
	      return scheduler.scheduleRecursiveWithAbsolute(scheduler.now(), function (self) {
	        hasResult && observer.onNext(result);

	        try {
	          if (first) {
	            first = false;
	          } else {
	            state = iterate(state);
	          }
	          hasResult = condition(state);
	          if (hasResult) {
	            result = resultSelector(state);
	            time = timeSelector(state);
	          }
	        } catch (e) {
	          observer.onError(e);
	          return;
	        }
	        if (hasResult) {
	          self(time);
	        } else {
	          observer.onCompleted();
	        }
	      });
	    });
	  };

	  /**
	   *  Generates an observable sequence by iterating a state from an initial state until the condition fails.
	   *
	   * @example
	   *  res = source.generateWithRelativeTime(0,
	   *      function (x) { return return true; },
	   *      function (x) { return x + 1; },
	   *      function (x) { return x; },
	   *      function (x) { return 500; }
	   *  );
	   *
	   * @param {Mixed} initialState Initial state.
	   * @param {Function} condition Condition to terminate generation (upon returning false).
	   * @param {Function} iterate Iteration step function.
	   * @param {Function} resultSelector Selector function for results produced in the sequence.
	   * @param {Function} timeSelector Time selector function to control the speed of values being produced each iteration, returning integer values denoting milliseconds.
	   * @param {Scheduler} [scheduler]  Scheduler on which to run the generator loop. If not specified, the timeout scheduler is used.
	   * @returns {Observable} The generated sequence.
	   */
	  Observable.generateWithRelativeTime = function (initialState, condition, iterate, resultSelector, timeSelector, scheduler) {
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    return new AnonymousObservable(function (observer) {
	      var first = true,
	        hasResult = false,
	        result,
	        state = initialState,
	        time;
	      return scheduler.scheduleRecursiveWithRelative(0, function (self) {
	        hasResult && observer.onNext(result);

	        try {
	          if (first) {
	            first = false;
	          } else {
	            state = iterate(state);
	          }
	          hasResult = condition(state);
	          if (hasResult) {
	            result = resultSelector(state);
	            time = timeSelector(state);
	          }
	        } catch (e) {
	          observer.onError(e);
	          return;
	        }
	        if (hasResult) {
	          self(time);
	        } else {
	          observer.onCompleted();
	        }
	      });
	    });
	  };

	  /**
	   *  Time shifts the observable sequence by delaying the subscription.
	   *
	   * @example
	   *  1 - res = source.delaySubscription(5000); // 5s
	   *  2 - res = source.delaySubscription(5000, Rx.Scheduler.timeout); // 5 seconds
	   *
	   * @param {Number} dueTime Absolute or relative time to perform the subscription at.
	   * @param {Scheduler} [scheduler]  Scheduler to run the subscription delay timer on. If not specified, the timeout scheduler is used.
	   * @returns {Observable} Time-shifted sequence.
	   */
	  observableProto.delaySubscription = function (dueTime, scheduler) {
	    return this.delayWithSelector(observableTimer(dueTime, isScheduler(scheduler) ? scheduler : timeoutScheduler), observableEmpty);
	  };

	  /**
	   *  Time shifts the observable sequence based on a subscription delay and a delay selector function for each element.
	   *
	   * @example
	   *  1 - res = source.delayWithSelector(function (x) { return Rx.Scheduler.timer(5000); }); // with selector only
	   *  1 - res = source.delayWithSelector(Rx.Observable.timer(2000), function (x) { return Rx.Observable.timer(x); }); // with delay and selector
	   *
	   * @param {Observable} [subscriptionDelay]  Sequence indicating the delay for the subscription to the source.
	   * @param {Function} delayDurationSelector Selector function to retrieve a sequence indicating the delay for each given element.
	   * @returns {Observable} Time-shifted sequence.
	   */
	  observableProto.delayWithSelector = function (subscriptionDelay, delayDurationSelector) {
	      var source = this, subDelay, selector;
	      if (typeof subscriptionDelay === 'function') {
	        selector = subscriptionDelay;
	      } else {
	        subDelay = subscriptionDelay;
	        selector = delayDurationSelector;
	      }
	      return new AnonymousObservable(function (observer) {
	        var delays = new CompositeDisposable(), atEnd = false, done = function () {
	            if (atEnd && delays.length === 0) { observer.onCompleted(); }
	        }, subscription = new SerialDisposable(), start = function () {
	          subscription.setDisposable(source.subscribe(function (x) {
	              var delay;
	              try {
	                delay = selector(x);
	              } catch (error) {
	                observer.onError(error);
	                return;
	              }
	              var d = new SingleAssignmentDisposable();
	              delays.add(d);
	              d.setDisposable(delay.subscribe(function () {
	                observer.onNext(x);
	                delays.remove(d);
	                done();
	              }, observer.onError.bind(observer), function () {
	                observer.onNext(x);
	                delays.remove(d);
	                done();
	              }));
	          }, observer.onError.bind(observer), function () {
	            atEnd = true;
	            subscription.dispose();
	            done();
	          }));
	      };

	      if (!subDelay) {
	        start();
	      } else {
	        subscription.setDisposable(subDelay.subscribe(start, observer.onError.bind(observer), start));
	      }

	      return new CompositeDisposable(subscription, delays);
	    }, this);
	  };

	    /**
	     *  Returns the source observable sequence, switching to the other observable sequence if a timeout is signaled.
	     * @param {Observable} [firstTimeout]  Observable sequence that represents the timeout for the first element. If not provided, this defaults to Observable.never().
	     * @param {Function} timeoutDurationSelector Selector to retrieve an observable sequence that represents the timeout between the current element and the next element.
	     * @param {Observable} [other]  Sequence to return in case of a timeout. If not provided, this is set to Observable.throwException().
	     * @returns {Observable} The source sequence switching to the other sequence in case of a timeout.
	     */
	    observableProto.timeoutWithSelector = function (firstTimeout, timeoutdurationSelector, other) {
	      if (arguments.length === 1) {
	          timeoutdurationSelector = firstTimeout;
	          firstTimeout = observableNever();
	      }
	      other || (other = observableThrow(new Error('Timeout')));
	      var source = this;
	      return new AnonymousObservable(function (observer) {
	        var subscription = new SerialDisposable(), timer = new SerialDisposable(), original = new SingleAssignmentDisposable();

	        subscription.setDisposable(original);

	        var id = 0, switched = false;

	        function setTimer(timeout) {
	          var myId = id;

	          function timerWins () {
	            return id === myId;
	          }

	          var d = new SingleAssignmentDisposable();
	          timer.setDisposable(d);
	          d.setDisposable(timeout.subscribe(function () {
	            timerWins() && subscription.setDisposable(other.subscribe(observer));
	            d.dispose();
	          }, function (e) {
	            timerWins() && observer.onError(e);
	          }, function () {
	            timerWins() && subscription.setDisposable(other.subscribe(observer));
	          }));
	        };

	        setTimer(firstTimeout);

	        function observerWins() {
	          var res = !switched;
	          if (res) { id++; }
	          return res;
	        }

	        original.setDisposable(source.subscribe(function (x) {
	          if (observerWins()) {
	            observer.onNext(x);
	            var timeout;
	            try {
	              timeout = timeoutdurationSelector(x);
	            } catch (e) {
	              observer.onError(e);
	              return;
	            }
	            setTimer(isPromise(timeout) ? observableFromPromise(timeout) : timeout);
	          }
	        }, function (e) {
	          observerWins() && observer.onError(e);
	        }, function () {
	          observerWins() && observer.onCompleted();
	        }));
	        return new CompositeDisposable(subscription, timer);
	      }, source);
	    };

	  /**
	   * Ignores values from an observable sequence which are followed by another value within a computed throttle duration.
	   * @param {Function} durationSelector Selector function to retrieve a sequence indicating the throttle duration for each given element.
	   * @returns {Observable} The debounced sequence.
	   */
	  observableProto.debounceWithSelector = function (durationSelector) {
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      var value, hasValue = false, cancelable = new SerialDisposable(), id = 0;
	      var subscription = source.subscribe(function (x) {
	        var throttle;
	        try {
	          throttle = durationSelector(x);
	        } catch (e) {
	          observer.onError(e);
	          return;
	        }

	        isPromise(throttle) && (throttle = observableFromPromise(throttle));

	        hasValue = true;
	        value = x;
	        id++;
	        var currentid = id, d = new SingleAssignmentDisposable();
	        cancelable.setDisposable(d);
	        d.setDisposable(throttle.subscribe(function () {
	          hasValue && id === currentid && observer.onNext(value);
	          hasValue = false;
	          d.dispose();
	        }, observer.onError.bind(observer), function () {
	          hasValue && id === currentid && observer.onNext(value);
	          hasValue = false;
	          d.dispose();
	        }));
	      }, function (e) {
	        cancelable.dispose();
	        observer.onError(e);
	        hasValue = false;
	        id++;
	      }, function () {
	        cancelable.dispose();
	        hasValue && observer.onNext(value);
	        observer.onCompleted();
	        hasValue = false;
	        id++;
	      });
	      return new CompositeDisposable(subscription, cancelable);
	    }, source);
	  };

	  /**
	   * @deprecated use #debounceWithSelector instead.
	   */
	  observableProto.throttleWithSelector = function (durationSelector) {
	    //deprecate('throttleWithSelector', 'debounceWithSelector');
	    return this.debounceWithSelector(durationSelector);
	  };

	  /**
	   *  Skips elements for the specified duration from the end of the observable source sequence, using the specified scheduler to run timers.
	   *
	   *  1 - res = source.skipLastWithTime(5000);
	   *  2 - res = source.skipLastWithTime(5000, scheduler);
	   *
	   * @description
	   *  This operator accumulates a queue with a length enough to store elements received during the initial duration window.
	   *  As more elements are received, elements older than the specified duration are taken from the queue and produced on the
	   *  result sequence. This causes elements to be delayed with duration.
	   * @param {Number} duration Duration for skipping elements from the end of the sequence.
	   * @param {Scheduler} [scheduler]  Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout
	   * @returns {Observable} An observable sequence with the elements skipped during the specified duration from the end of the source sequence.
	   */
	  observableProto.skipLastWithTime = function (duration, scheduler) {
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      var q = [];
	      return source.subscribe(function (x) {
	        var now = scheduler.now();
	        q.push({ interval: now, value: x });
	        while (q.length > 0 && now - q[0].interval >= duration) {
	          o.onNext(q.shift().value);
	        }
	      }, function (e) { o.onError(e); }, function () {
	        var now = scheduler.now();
	        while (q.length > 0 && now - q[0].interval >= duration) {
	          o.onNext(q.shift().value);
	        }
	        o.onCompleted();
	      });
	    }, source);
	  };

	  /**
	   *  Returns elements within the specified duration from the end of the observable source sequence, using the specified schedulers to run timers and to drain the collected elements.
	   * @description
	   *  This operator accumulates a queue with a length enough to store elements received during the initial duration window.
	   *  As more elements are received, elements older than the specified duration are taken from the queue and produced on the
	   *  result sequence. This causes elements to be delayed with duration.
	   * @param {Number} duration Duration for taking elements from the end of the sequence.
	   * @param {Scheduler} [scheduler]  Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.
	   * @returns {Observable} An observable sequence with the elements taken during the specified duration from the end of the source sequence.
	   */
	  observableProto.takeLastWithTime = function (duration, scheduler) {
	    var source = this;
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    return new AnonymousObservable(function (o) {
	      var q = [];
	      return source.subscribe(function (x) {
	        var now = scheduler.now();
	        q.push({ interval: now, value: x });
	        while (q.length > 0 && now - q[0].interval >= duration) {
	          q.shift();
	        }
	      }, function (e) { o.onError(e); }, function () {
	        var now = scheduler.now();
	        while (q.length > 0) {
	          var next = q.shift();
	          if (now - next.interval <= duration) { o.onNext(next.value); }
	        }
	        o.onCompleted();
	      });
	    }, source);
	  };

	  /**
	   *  Returns an array with the elements within the specified duration from the end of the observable source sequence, using the specified scheduler to run timers.
	   * @description
	   *  This operator accumulates a queue with a length enough to store elements received during the initial duration window.
	   *  As more elements are received, elements older than the specified duration are taken from the queue and produced on the
	   *  result sequence. This causes elements to be delayed with duration.
	   * @param {Number} duration Duration for taking elements from the end of the sequence.
	   * @param {Scheduler} scheduler Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.
	   * @returns {Observable} An observable sequence containing a single array with the elements taken during the specified duration from the end of the source sequence.
	   */
	  observableProto.takeLastBufferWithTime = function (duration, scheduler) {
	    var source = this;
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    return new AnonymousObservable(function (o) {
	      var q = [];
	      return source.subscribe(function (x) {
	        var now = scheduler.now();
	        q.push({ interval: now, value: x });
	        while (q.length > 0 && now - q[0].interval >= duration) {
	          q.shift();
	        }
	      }, function (e) { o.onError(e); }, function () {
	        var now = scheduler.now(), res = [];
	        while (q.length > 0) {
	          var next = q.shift();
	          now - next.interval <= duration && res.push(next.value);
	        }
	        o.onNext(res);
	        o.onCompleted();
	      });
	    }, source);
	  };

	  /**
	   *  Takes elements for the specified duration from the start of the observable source sequence, using the specified scheduler to run timers.
	   *
	   * @example
	   *  1 - res = source.takeWithTime(5000,  [optional scheduler]);
	   * @description
	   *  This operator accumulates a queue with a length enough to store elements received during the initial duration window.
	   *  As more elements are received, elements older than the specified duration are taken from the queue and produced on the
	   *  result sequence. This causes elements to be delayed with duration.
	   * @param {Number} duration Duration for taking elements from the start of the sequence.
	   * @param {Scheduler} scheduler Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.
	   * @returns {Observable} An observable sequence with the elements taken during the specified duration from the start of the source sequence.
	   */
	  observableProto.takeWithTime = function (duration, scheduler) {
	    var source = this;
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    return new AnonymousObservable(function (o) {
	      return new CompositeDisposable(scheduler.scheduleWithRelative(duration, function () { o.onCompleted(); }), source.subscribe(o));
	    }, source);
	  };

	  /**
	   *  Skips elements for the specified duration from the start of the observable source sequence, using the specified scheduler to run timers.
	   *
	   * @example
	   *  1 - res = source.skipWithTime(5000, [optional scheduler]);
	   *
	   * @description
	   *  Specifying a zero value for duration doesn't guarantee no elements will be dropped from the start of the source sequence.
	   *  This is a side-effect of the asynchrony introduced by the scheduler, where the action that causes callbacks from the source sequence to be forwarded
	   *  may not execute immediately, despite the zero due time.
	   *
	   *  Errors produced by the source sequence are always forwarded to the result sequence, even if the error occurs before the duration.
	   * @param {Number} duration Duration for skipping elements from the start of the sequence.
	   * @param {Scheduler} scheduler Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.
	   * @returns {Observable} An observable sequence with the elements skipped during the specified duration from the start of the source sequence.
	   */
	  observableProto.skipWithTime = function (duration, scheduler) {
	    var source = this;
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    return new AnonymousObservable(function (observer) {
	      var open = false;
	      return new CompositeDisposable(
	        scheduler.scheduleWithRelative(duration, function () { open = true; }),
	        source.subscribe(function (x) { open && observer.onNext(x); }, observer.onError.bind(observer), observer.onCompleted.bind(observer)));
	    }, source);
	  };

	  /**
	   *  Skips elements from the observable source sequence until the specified start time, using the specified scheduler to run timers.
	   *  Errors produced by the source sequence are always forwarded to the result sequence, even if the error occurs before the start time.
	   *
	   * @examples
	   *  1 - res = source.skipUntilWithTime(new Date(), [scheduler]);
	   *  2 - res = source.skipUntilWithTime(5000, [scheduler]);
	   * @param {Date|Number} startTime Time to start taking elements from the source sequence. If this value is less than or equal to Date(), no elements will be skipped.
	   * @param {Scheduler} [scheduler] Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.
	   * @returns {Observable} An observable sequence with the elements skipped until the specified start time.
	   */
	  observableProto.skipUntilWithTime = function (startTime, scheduler) {
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    var source = this, schedulerMethod = startTime instanceof Date ?
	      'scheduleWithAbsolute' :
	      'scheduleWithRelative';
	    return new AnonymousObservable(function (o) {
	      var open = false;

	      return new CompositeDisposable(
	        scheduler[schedulerMethod](startTime, function () { open = true; }),
	        source.subscribe(
	          function (x) { open && o.onNext(x); },
	          function (e) { o.onError(e); }, function () { o.onCompleted(); }));
	    }, source);
	  };

	  /**
	   *  Takes elements for the specified duration until the specified end time, using the specified scheduler to run timers.
	   * @param {Number | Date} endTime Time to stop taking elements from the source sequence. If this value is less than or equal to new Date(), the result stream will complete immediately.
	   * @param {Scheduler} [scheduler] Scheduler to run the timer on.
	   * @returns {Observable} An observable sequence with the elements taken until the specified end time.
	   */
	  observableProto.takeUntilWithTime = function (endTime, scheduler) {
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    var source = this, schedulerMethod = endTime instanceof Date ?
	      'scheduleWithAbsolute' :
	      'scheduleWithRelative';
	    return new AnonymousObservable(function (o) {
	      return new CompositeDisposable(
	        scheduler[schedulerMethod](endTime, function () { o.onCompleted(); }),
	        source.subscribe(o));
	    }, source);
	  };

	  /**
	   * Returns an Observable that emits only the first item emitted by the source Observable during sequential time windows of a specified duration.
	   * @param {Number} windowDuration time to wait before emitting another item after emitting the last item
	   * @param {Scheduler} [scheduler] the Scheduler to use internally to manage the timers that handle timeout for each item. If not provided, defaults to Scheduler.timeout.
	   * @returns {Observable} An Observable that performs the throttle operation.
	   */
	  observableProto.throttleFirst = function (windowDuration, scheduler) {
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    var duration = +windowDuration || 0;
	    if (duration <= 0) { throw new RangeError('windowDuration cannot be less or equal zero.'); }
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      var lastOnNext = 0;
	      return source.subscribe(
	        function (x) {
	          var now = scheduler.now();
	          if (lastOnNext === 0 || now - lastOnNext >= duration) {
	            lastOnNext = now;
	            o.onNext(x);
	          }
	        },function (e) { o.onError(e); }, function () { o.onCompleted(); }
	      );
	    }, source);
	  };

	  /**
	   * Executes a transducer to transform the observable sequence
	   * @param {Transducer} transducer A transducer to execute
	   * @returns {Observable} An Observable sequence containing the results from the transducer.
	   */
	  observableProto.transduce = function(transducer) {
	    var source = this;

	    function transformForObserver(o) {
	      return {
	        '@@transducer/init': function() {
	          return o;
	        },
	        '@@transducer/step': function(obs, input) {
	          return obs.onNext(input);
	        },
	        '@@transducer/result': function(obs) {
	          return obs.onCompleted();
	        }
	      };
	    }

	    return new AnonymousObservable(function(o) {
	      var xform = transducer(transformForObserver(o));
	      return source.subscribe(
	        function(v) {
	          try {
	            xform['@@transducer/step'](o, v);
	          } catch (e) {
	            o.onError(e);
	          }
	        },
	        function (e) { o.onError(e); },
	        function() { xform['@@transducer/result'](o); }
	      );
	    }, source);
	  };

	  /*
	   * Performs a exclusive waiting for the first to finish before subscribing to another observable.
	   * Observables that come in between subscriptions will be dropped on the floor.
	   * @returns {Observable} A exclusive observable with only the results that happen when subscribed.
	   */
	  observableProto.exclusive = function () {
	    var sources = this;
	    return new AnonymousObservable(function (observer) {
	      var hasCurrent = false,
	        isStopped = false,
	        m = new SingleAssignmentDisposable(),
	        g = new CompositeDisposable();

	      g.add(m);

	      m.setDisposable(sources.subscribe(
	        function (innerSource) {
	          if (!hasCurrent) {
	            hasCurrent = true;

	            isPromise(innerSource) && (innerSource = observableFromPromise(innerSource));

	            var innerSubscription = new SingleAssignmentDisposable();
	            g.add(innerSubscription);

	            innerSubscription.setDisposable(innerSource.subscribe(
	              observer.onNext.bind(observer),
	              observer.onError.bind(observer),
	              function () {
	                g.remove(innerSubscription);
	                hasCurrent = false;
	                if (isStopped && g.length === 1) {
	                  observer.onCompleted();
	                }
	            }));
	          }
	        },
	        observer.onError.bind(observer),
	        function () {
	          isStopped = true;
	          if (!hasCurrent && g.length === 1) {
	            observer.onCompleted();
	          }
	        }));

	      return g;
	    }, this);
	  };

	  /*
	   * Performs a exclusive map waiting for the first to finish before subscribing to another observable.
	   * Observables that come in between subscriptions will be dropped on the floor.
	   * @param {Function} selector Selector to invoke for every item in the current subscription.
	   * @param {Any} [thisArg] An optional context to invoke with the selector parameter.
	   * @returns {Observable} An exclusive observable with only the results that happen when subscribed.
	   */
	  observableProto.exclusiveMap = function (selector, thisArg) {
	    var sources = this,
	        selectorFunc = bindCallback(selector, thisArg, 3);
	    return new AnonymousObservable(function (observer) {
	      var index = 0,
	        hasCurrent = false,
	        isStopped = true,
	        m = new SingleAssignmentDisposable(),
	        g = new CompositeDisposable();

	      g.add(m);

	      m.setDisposable(sources.subscribe(
	        function (innerSource) {

	          if (!hasCurrent) {
	            hasCurrent = true;

	            innerSubscription = new SingleAssignmentDisposable();
	            g.add(innerSubscription);

	            isPromise(innerSource) && (innerSource = observableFromPromise(innerSource));

	            innerSubscription.setDisposable(innerSource.subscribe(
	              function (x) {
	                var result;
	                try {
	                  result = selectorFunc(x, index++, innerSource);
	                } catch (e) {
	                  observer.onError(e);
	                  return;
	                }

	                observer.onNext(result);
	              },
	              function (e) { observer.onError(e); },
	              function () {
	                g.remove(innerSubscription);
	                hasCurrent = false;

	                if (isStopped && g.length === 1) {
	                  observer.onCompleted();
	                }
	              }));
	          }
	        },
	        function (e) { observer.onError(e); },
	        function () {
	          isStopped = true;
	          if (g.length === 1 && !hasCurrent) {
	            observer.onCompleted();
	          }
	        }));
	      return g;
	    }, this);
	  };

	  /** Provides a set of extension methods for virtual time scheduling. */
	  Rx.VirtualTimeScheduler = (function (__super__) {

	    function localNow() {
	      return this.toDateTimeOffset(this.clock);
	    }

	    function scheduleNow(state, action) {
	      return this.scheduleAbsoluteWithState(state, this.clock, action);
	    }

	    function scheduleRelative(state, dueTime, action) {
	      return this.scheduleRelativeWithState(state, this.toRelative(dueTime), action);
	    }

	    function scheduleAbsolute(state, dueTime, action) {
	      return this.scheduleRelativeWithState(state, this.toRelative(dueTime - this.now()), action);
	    }

	    function invokeAction(scheduler, action) {
	      action();
	      return disposableEmpty;
	    }

	    inherits(VirtualTimeScheduler, __super__);

	    /**
	     * Creates a new virtual time scheduler with the specified initial clock value and absolute time comparer.
	     *
	     * @constructor
	     * @param {Number} initialClock Initial value for the clock.
	     * @param {Function} comparer Comparer to determine causality of events based on absolute time.
	     */
	    function VirtualTimeScheduler(initialClock, comparer) {
	      this.clock = initialClock;
	      this.comparer = comparer;
	      this.isEnabled = false;
	      this.queue = new PriorityQueue(1024);
	      __super__.call(this, localNow, scheduleNow, scheduleRelative, scheduleAbsolute);
	    }

	    var VirtualTimeSchedulerPrototype = VirtualTimeScheduler.prototype;

	    /**
	     * Adds a relative time value to an absolute time value.
	     * @param {Number} absolute Absolute virtual time value.
	     * @param {Number} relative Relative virtual time value to add.
	     * @return {Number} Resulting absolute virtual time sum value.
	     */
	    VirtualTimeSchedulerPrototype.add = notImplemented;

	    /**
	     * Converts an absolute time to a number
	     * @param {Any} The absolute time.
	     * @returns {Number} The absolute time in ms
	     */
	    VirtualTimeSchedulerPrototype.toDateTimeOffset = notImplemented;

	    /**
	     * Converts the TimeSpan value to a relative virtual time value.
	     * @param {Number} timeSpan TimeSpan value to convert.
	     * @return {Number} Corresponding relative virtual time value.
	     */
	    VirtualTimeSchedulerPrototype.toRelative = notImplemented;

	    /**
	     * Schedules a periodic piece of work by dynamically discovering the scheduler's capabilities. The periodic task will be emulated using recursive scheduling.
	     * @param {Mixed} state Initial state passed to the action upon the first iteration.
	     * @param {Number} period Period for running the work periodically.
	     * @param {Function} action Action to be executed, potentially updating the state.
	     * @returns {Disposable} The disposable object used to cancel the scheduled recurring action (best effort).
	     */
	    VirtualTimeSchedulerPrototype.schedulePeriodicWithState = function (state, period, action) {
	      var s = new SchedulePeriodicRecursive(this, state, period, action);
	      return s.start();
	    };

	    /**
	     * Schedules an action to be executed after dueTime.
	     * @param {Mixed} state State passed to the action to be executed.
	     * @param {Number} dueTime Relative time after which to execute the action.
	     * @param {Function} action Action to be executed.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    VirtualTimeSchedulerPrototype.scheduleRelativeWithState = function (state, dueTime, action) {
	      var runAt = this.add(this.clock, dueTime);
	      return this.scheduleAbsoluteWithState(state, runAt, action);
	    };

	    /**
	     * Schedules an action to be executed at dueTime.
	     * @param {Number} dueTime Relative time after which to execute the action.
	     * @param {Function} action Action to be executed.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    VirtualTimeSchedulerPrototype.scheduleRelative = function (dueTime, action) {
	      return this.scheduleRelativeWithState(action, dueTime, invokeAction);
	    };

	    /**
	     * Starts the virtual time scheduler.
	     */
	    VirtualTimeSchedulerPrototype.start = function () {
	      if (!this.isEnabled) {
	        this.isEnabled = true;
	        do {
	          var next = this.getNext();
	          if (next !== null) {
	            this.comparer(next.dueTime, this.clock) > 0 && (this.clock = next.dueTime);
	            next.invoke();
	          } else {
	            this.isEnabled = false;
	          }
	        } while (this.isEnabled);
	      }
	    };

	    /**
	     * Stops the virtual time scheduler.
	     */
	    VirtualTimeSchedulerPrototype.stop = function () {
	      this.isEnabled = false;
	    };

	    /**
	     * Advances the scheduler's clock to the specified time, running all work till that point.
	     * @param {Number} time Absolute time to advance the scheduler's clock to.
	     */
	    VirtualTimeSchedulerPrototype.advanceTo = function (time) {
	      var dueToClock = this.comparer(this.clock, time);
	      if (this.comparer(this.clock, time) > 0) { throw new ArgumentOutOfRangeError(); }
	      if (dueToClock === 0) { return; }
	      if (!this.isEnabled) {
	        this.isEnabled = true;
	        do {
	          var next = this.getNext();
	          if (next !== null && this.comparer(next.dueTime, time) <= 0) {
	            this.comparer(next.dueTime, this.clock) > 0 && (this.clock = next.dueTime);
	            next.invoke();
	          } else {
	            this.isEnabled = false;
	          }
	        } while (this.isEnabled);
	        this.clock = time;
	      }
	    };

	    /**
	     * Advances the scheduler's clock by the specified relative time, running all work scheduled for that timespan.
	     * @param {Number} time Relative time to advance the scheduler's clock by.
	     */
	    VirtualTimeSchedulerPrototype.advanceBy = function (time) {
	      var dt = this.add(this.clock, time),
	          dueToClock = this.comparer(this.clock, dt);
	      if (dueToClock > 0) { throw new ArgumentOutOfRangeError(); }
	      if (dueToClock === 0) {  return; }

	      this.advanceTo(dt);
	    };

	    /**
	     * Advances the scheduler's clock by the specified relative time.
	     * @param {Number} time Relative time to advance the scheduler's clock by.
	     */
	    VirtualTimeSchedulerPrototype.sleep = function (time) {
	      var dt = this.add(this.clock, time);
	      if (this.comparer(this.clock, dt) >= 0) { throw new ArgumentOutOfRangeError(); }

	      this.clock = dt;
	    };

	    /**
	     * Gets the next scheduled item to be executed.
	     * @returns {ScheduledItem} The next scheduled item.
	     */
	    VirtualTimeSchedulerPrototype.getNext = function () {
	      while (this.queue.length > 0) {
	        var next = this.queue.peek();
	        if (next.isCancelled()) {
	          this.queue.dequeue();
	        } else {
	          return next;
	        }
	      }
	      return null;
	    };

	    /**
	     * Schedules an action to be executed at dueTime.
	     * @param {Scheduler} scheduler Scheduler to execute the action on.
	     * @param {Number} dueTime Absolute time at which to execute the action.
	     * @param {Function} action Action to be executed.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    VirtualTimeSchedulerPrototype.scheduleAbsolute = function (dueTime, action) {
	      return this.scheduleAbsoluteWithState(action, dueTime, invokeAction);
	    };

	    /**
	     * Schedules an action to be executed at dueTime.
	     * @param {Mixed} state State passed to the action to be executed.
	     * @param {Number} dueTime Absolute time at which to execute the action.
	     * @param {Function} action Action to be executed.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    VirtualTimeSchedulerPrototype.scheduleAbsoluteWithState = function (state, dueTime, action) {
	      var self = this;

	      function run(scheduler, state1) {
	        self.queue.remove(si);
	        return action(scheduler, state1);
	      }

	      var si = new ScheduledItem(this, state, run, dueTime, this.comparer);
	      this.queue.enqueue(si);

	      return si.disposable;
	    };

	    return VirtualTimeScheduler;
	  }(Scheduler));

	  /** Provides a virtual time scheduler that uses Date for absolute time and number for relative time. */
	  Rx.HistoricalScheduler = (function (__super__) {
	    inherits(HistoricalScheduler, __super__);

	    /**
	     * Creates a new historical scheduler with the specified initial clock value.
	     * @constructor
	     * @param {Number} initialClock Initial value for the clock.
	     * @param {Function} comparer Comparer to determine causality of events based on absolute time.
	     */
	    function HistoricalScheduler(initialClock, comparer) {
	      var clock = initialClock == null ? 0 : initialClock;
	      var cmp = comparer || defaultSubComparer;
	      __super__.call(this, clock, cmp);
	    }

	    var HistoricalSchedulerProto = HistoricalScheduler.prototype;

	    /**
	     * Adds a relative time value to an absolute time value.
	     * @param {Number} absolute Absolute virtual time value.
	     * @param {Number} relative Relative virtual time value to add.
	     * @return {Number} Resulting absolute virtual time sum value.
	     */
	    HistoricalSchedulerProto.add = function (absolute, relative) {
	      return absolute + relative;
	    };

	    HistoricalSchedulerProto.toDateTimeOffset = function (absolute) {
	      return new Date(absolute).getTime();
	    };

	    /**
	     * Converts the TimeSpan value to a relative virtual time value.
	     * @memberOf HistoricalScheduler
	     * @param {Number} timeSpan TimeSpan value to convert.
	     * @return {Number} Corresponding relative virtual time value.
	     */
	    HistoricalSchedulerProto.toRelative = function (timeSpan) {
	      return timeSpan;
	    };

	    return HistoricalScheduler;
	  }(Rx.VirtualTimeScheduler));

	  var AnonymousObservable = Rx.AnonymousObservable = (function (__super__) {
	    inherits(AnonymousObservable, __super__);

	    // Fix subscriber to check for undefined or function returned to decorate as Disposable
	    function fixSubscriber(subscriber) {
	      return subscriber && isFunction(subscriber.dispose) ? subscriber :
	        isFunction(subscriber) ? disposableCreate(subscriber) : disposableEmpty;
	    }

	    function setDisposable(s, state) {
	      var ado = state[0], subscribe = state[1];
	      var sub = tryCatch(subscribe)(ado);

	      if (sub === errorObj) {
	        if(!ado.fail(errorObj.e)) { return thrower(errorObj.e); }
	      }
	      ado.setDisposable(fixSubscriber(sub));
	    }

	    function AnonymousObservable(subscribe, parent) {
	      this.source = parent;

	      function s(observer) {
	        var ado = new AutoDetachObserver(observer), state = [ado, subscribe];

	        if (currentThreadScheduler.scheduleRequired()) {
	          currentThreadScheduler.scheduleWithState(state, setDisposable);
	        } else {
	          setDisposable(null, state);
	        }
	        return ado;
	      }

	      __super__.call(this, s);
	    }

	    return AnonymousObservable;

	  }(Observable));

	  var AutoDetachObserver = (function (__super__) {
	    inherits(AutoDetachObserver, __super__);

	    function AutoDetachObserver(observer) {
	      __super__.call(this);
	      this.observer = observer;
	      this.m = new SingleAssignmentDisposable();
	    }

	    var AutoDetachObserverPrototype = AutoDetachObserver.prototype;

	    AutoDetachObserverPrototype.next = function (value) {
	      var result = tryCatch(this.observer.onNext).call(this.observer, value);
	      if (result === errorObj) {
	        this.dispose();
	        thrower(result.e);
	      }
	    };

	    AutoDetachObserverPrototype.error = function (err) {
	      var result = tryCatch(this.observer.onError).call(this.observer, err);
	      this.dispose();
	      result === errorObj && thrower(result.e);
	    };

	    AutoDetachObserverPrototype.completed = function () {
	      var result = tryCatch(this.observer.onCompleted).call(this.observer);
	      this.dispose();
	      result === errorObj && thrower(result.e);
	    };

	    AutoDetachObserverPrototype.setDisposable = function (value) { this.m.setDisposable(value); };
	    AutoDetachObserverPrototype.getDisposable = function () { return this.m.getDisposable(); };

	    AutoDetachObserverPrototype.dispose = function () {
	      __super__.prototype.dispose.call(this);
	      this.m.dispose();
	    };

	    return AutoDetachObserver;
	  }(AbstractObserver));

	  var GroupedObservable = (function (__super__) {
	    inherits(GroupedObservable, __super__);

	    function subscribe(observer) {
	      return this.underlyingObservable.subscribe(observer);
	    }

	    function GroupedObservable(key, underlyingObservable, mergedDisposable) {
	      __super__.call(this, subscribe);
	      this.key = key;
	      this.underlyingObservable = !mergedDisposable ?
	        underlyingObservable :
	        new AnonymousObservable(function (observer) {
	          return new CompositeDisposable(mergedDisposable.getDisposable(), underlyingObservable.subscribe(observer));
	        });
	    }

	    return GroupedObservable;
	  }(Observable));

	  /**
	   *  Represents an object that is both an observable sequence as well as an observer.
	   *  Each notification is broadcasted to all subscribed observers.
	   */
	  var Subject = Rx.Subject = (function (__super__) {
	    function subscribe(observer) {
	      checkDisposed(this);
	      if (!this.isStopped) {
	        this.observers.push(observer);
	        return new InnerSubscription(this, observer);
	      }
	      if (this.hasError) {
	        observer.onError(this.error);
	        return disposableEmpty;
	      }
	      observer.onCompleted();
	      return disposableEmpty;
	    }

	    inherits(Subject, __super__);

	    /**
	     * Creates a subject.
	     */
	    function Subject() {
	      __super__.call(this, subscribe);
	      this.isDisposed = false,
	      this.isStopped = false,
	      this.observers = [];
	      this.hasError = false;
	    }

	    addProperties(Subject.prototype, Observer.prototype, {
	      /**
	       * Indicates whether the subject has observers subscribed to it.
	       * @returns {Boolean} Indicates whether the subject has observers subscribed to it.
	       */
	      hasObservers: function () { return this.observers.length > 0; },
	      /**
	       * Notifies all subscribed observers about the end of the sequence.
	       */
	      onCompleted: function () {
	        checkDisposed(this);
	        if (!this.isStopped) {
	          this.isStopped = true;
	          for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
	            os[i].onCompleted();
	          }

	          this.observers.length = 0;
	        }
	      },
	      /**
	       * Notifies all subscribed observers about the exception.
	       * @param {Mixed} error The exception to send to all observers.
	       */
	      onError: function (error) {
	        checkDisposed(this);
	        if (!this.isStopped) {
	          this.isStopped = true;
	          this.error = error;
	          this.hasError = true;
	          for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
	            os[i].onError(error);
	          }

	          this.observers.length = 0;
	        }
	      },
	      /**
	       * Notifies all subscribed observers about the arrival of the specified element in the sequence.
	       * @param {Mixed} value The value to send to all observers.
	       */
	      onNext: function (value) {
	        checkDisposed(this);
	        if (!this.isStopped) {
	          for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
	            os[i].onNext(value);
	          }
	        }
	      },
	      /**
	       * Unsubscribe all observers and release resources.
	       */
	      dispose: function () {
	        this.isDisposed = true;
	        this.observers = null;
	      }
	    });

	    /**
	     * Creates a subject from the specified observer and observable.
	     * @param {Observer} observer The observer used to send messages to the subject.
	     * @param {Observable} observable The observable used to subscribe to messages sent from the subject.
	     * @returns {Subject} Subject implemented using the given observer and observable.
	     */
	    Subject.create = function (observer, observable) {
	      return new AnonymousSubject(observer, observable);
	    };

	    return Subject;
	  }(Observable));

	  /**
	   *  Represents the result of an asynchronous operation.
	   *  The last value before the OnCompleted notification, or the error received through OnError, is sent to all subscribed observers.
	   */
	  var AsyncSubject = Rx.AsyncSubject = (function (__super__) {

	    function subscribe(observer) {
	      checkDisposed(this);

	      if (!this.isStopped) {
	        this.observers.push(observer);
	        return new InnerSubscription(this, observer);
	      }

	      if (this.hasError) {
	        observer.onError(this.error);
	      } else if (this.hasValue) {
	        observer.onNext(this.value);
	        observer.onCompleted();
	      } else {
	        observer.onCompleted();
	      }

	      return disposableEmpty;
	    }

	    inherits(AsyncSubject, __super__);

	    /**
	     * Creates a subject that can only receive one value and that value is cached for all future observations.
	     * @constructor
	     */
	    function AsyncSubject() {
	      __super__.call(this, subscribe);

	      this.isDisposed = false;
	      this.isStopped = false;
	      this.hasValue = false;
	      this.observers = [];
	      this.hasError = false;
	    }

	    addProperties(AsyncSubject.prototype, Observer, {
	      /**
	       * Indicates whether the subject has observers subscribed to it.
	       * @returns {Boolean} Indicates whether the subject has observers subscribed to it.
	       */
	      hasObservers: function () {
	        checkDisposed(this);
	        return this.observers.length > 0;
	      },
	      /**
	       * Notifies all subscribed observers about the end of the sequence, also causing the last received value to be sent out (if any).
	       */
	      onCompleted: function () {
	        var i, len;
	        checkDisposed(this);
	        if (!this.isStopped) {
	          this.isStopped = true;
	          var os = cloneArray(this.observers), len = os.length;

	          if (this.hasValue) {
	            for (i = 0; i < len; i++) {
	              var o = os[i];
	              o.onNext(this.value);
	              o.onCompleted();
	            }
	          } else {
	            for (i = 0; i < len; i++) {
	              os[i].onCompleted();
	            }
	          }

	          this.observers.length = 0;
	        }
	      },
	      /**
	       * Notifies all subscribed observers about the error.
	       * @param {Mixed} error The Error to send to all observers.
	       */
	      onError: function (error) {
	        checkDisposed(this);
	        if (!this.isStopped) {
	          this.isStopped = true;
	          this.hasError = true;
	          this.error = error;

	          for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
	            os[i].onError(error);
	          }

	          this.observers.length = 0;
	        }
	      },
	      /**
	       * Sends a value to the subject. The last value received before successful termination will be sent to all subscribed and future observers.
	       * @param {Mixed} value The value to store in the subject.
	       */
	      onNext: function (value) {
	        checkDisposed(this);
	        if (this.isStopped) { return; }
	        this.value = value;
	        this.hasValue = true;
	      },
	      /**
	       * Unsubscribe all observers and release resources.
	       */
	      dispose: function () {
	        this.isDisposed = true;
	        this.observers = null;
	        this.exception = null;
	        this.value = null;
	      }
	    });

	    return AsyncSubject;
	  }(Observable));

	  var AnonymousSubject = Rx.AnonymousSubject = (function (__super__) {
	    inherits(AnonymousSubject, __super__);

	    function subscribe(observer) {
	      return this.observable.subscribe(observer);
	    }

	    function AnonymousSubject(observer, observable) {
	      this.observer = observer;
	      this.observable = observable;
	      __super__.call(this, subscribe);
	    }

	    addProperties(AnonymousSubject.prototype, Observer.prototype, {
	      onCompleted: function () {
	        this.observer.onCompleted();
	      },
	      onError: function (error) {
	        this.observer.onError(error);
	      },
	      onNext: function (value) {
	        this.observer.onNext(value);
	      }
	    });

	    return AnonymousSubject;
	  }(Observable));

	  /**
	  * Used to pause and resume streams.
	  */
	  Rx.Pauser = (function (__super__) {
	    inherits(Pauser, __super__);

	    function Pauser() {
	      __super__.call(this);
	    }

	    /**
	     * Pauses the underlying sequence.
	     */
	    Pauser.prototype.pause = function () { this.onNext(false); };

	    /**
	    * Resumes the underlying sequence.
	    */
	    Pauser.prototype.resume = function () { this.onNext(true); };

	    return Pauser;
	  }(Subject));

	  if (true) {
	    root.Rx = Rx;

	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return Rx;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (freeExports && freeModule) {
	    // in Node.js or RingoJS
	    if (moduleExports) {
	      (freeModule.exports = Rx).Rx = Rx;
	    } else {
	      freeExports.Rx = Rx;
	    }
	  } else {
	    // in a browser or Rhino
	    root.Rx = Rx;
	  }

	  // All code before this point will be filtered from stack traces.
	  var rEndingLine = captureLine();

	}.call(this));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(55)(module), (function() { return this; }()), __webpack_require__(24)))

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var async_1 = __webpack_require__(94);
	var lang_1 = __webpack_require__(60);
	var pipe_1 = __webpack_require__(79);
	/**
	 * Implements async bindings to Promise.
	 *
	 * # Example
	 *
	 * In this example we bind the description promise to the DOM.
	 * The async pipe will convert a promise to the value with which it is resolved. It will also
	 * request a change detection check when the promise is resolved.
	 *
	 *  ```
	 * @Component({
	 *   selector: "task-cmp",
	 *   changeDetection: ON_PUSH
	 * })
	 * @View({
	 *   template: "Task Description {{ description | async }}"
	 * })
	 * class Task {
	 *   description:Promise<string>;
	 * }
	 *
	 * ```
	 *
	 * @exportedAs angular2/pipes
	 */
	var PromisePipe = (function (_super) {
	    __extends(PromisePipe, _super);
	    function PromisePipe(ref) {
	        _super.call(this);
	        this._ref = ref;
	        this._latestValue = null;
	        this._latestReturnedValue = null;
	    }
	    PromisePipe.prototype.supports = function (promise) { return async_1.PromiseWrapper.isPromise(promise); };
	    PromisePipe.prototype.onDestroy = function () {
	        if (lang_1.isPresent(this._sourcePromise)) {
	            this._latestValue = null;
	            this._latestReturnedValue = null;
	            this._sourcePromise = null;
	        }
	    };
	    PromisePipe.prototype.transform = function (promise) {
	        var _this = this;
	        if (lang_1.isBlank(this._sourcePromise)) {
	            this._sourcePromise = promise;
	            promise.then(function (val) {
	                if (_this._sourcePromise === promise) {
	                    _this._updateLatestValue(val);
	                }
	            });
	            return null;
	        }
	        if (promise !== this._sourcePromise) {
	            this._sourcePromise = null;
	            return this.transform(promise);
	        }
	        if (this._latestValue === this._latestReturnedValue) {
	            return this._latestReturnedValue;
	        }
	        else {
	            this._latestReturnedValue = this._latestValue;
	            return pipe_1.WrappedValue.wrap(this._latestValue);
	        }
	    };
	    PromisePipe.prototype._updateLatestValue = function (value) {
	        this._latestValue = value;
	        this._ref.requestCheck();
	    };
	    return PromisePipe;
	})(pipe_1.Pipe);
	exports.PromisePipe = PromisePipe;
	/**
	 * Provides a factory for [PromisePipe].
	 *
	 * @exportedAs angular2/pipes
	 */
	var PromisePipeFactory = (function () {
	    function PromisePipeFactory() {
	    }
	    PromisePipeFactory.prototype.supports = function (promise) { return async_1.PromiseWrapper.isPromise(promise); };
	    PromisePipeFactory.prototype.create = function (cdRef) { return new PromisePipe(cdRef); };
	    return PromisePipeFactory;
	})();
	exports.PromisePipeFactory = PromisePipeFactory;
	exports.__esModule = true;
	//# sourceMappingURL=promise_pipe.js.map

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var lang_1 = __webpack_require__(60);
	var pipe_1 = __webpack_require__(79);
	/**
	 * Implements uppercase transforms to text.
	 *
	 * # Example
	 *
	 * In this example we transform the user text uppercase.
	 *
	 *  ```
	 * @Component({
	 *   selector: "username-cmp"
	 * })
	 * @View({
	 *   template: "Username: {{ user | uppercase }}"
	 * })
	 * class Username {
	 *   user:string;
	 * }
	 *
	 * ```
	 *
	 * @exportedAs angular2/pipes
	 */
	var UpperCasePipe = (function (_super) {
	    __extends(UpperCasePipe, _super);
	    function UpperCasePipe() {
	        _super.call(this);
	        this._latestValue = null;
	    }
	    UpperCasePipe.prototype.supports = function (str) { return lang_1.isString(str); };
	    UpperCasePipe.prototype.onDestroy = function () { this._latestValue = null; };
	    UpperCasePipe.prototype.transform = function (value) {
	        if (this._latestValue !== value) {
	            this._latestValue = value;
	            return lang_1.StringWrapper.toUpperCase(value);
	        }
	        else {
	            return this._latestValue;
	        }
	    };
	    return UpperCasePipe;
	})(pipe_1.Pipe);
	exports.UpperCasePipe = UpperCasePipe;
	/**
	 * @exportedAs angular2/pipes
	 */
	var UpperCaseFactory = (function () {
	    function UpperCaseFactory() {
	    }
	    UpperCaseFactory.prototype.supports = function (str) { return lang_1.isString(str); };
	    UpperCaseFactory.prototype.create = function () { return new UpperCasePipe(); };
	    return UpperCaseFactory;
	})();
	exports.UpperCaseFactory = UpperCaseFactory;
	exports.__esModule = true;
	//# sourceMappingURL=uppercase_pipe.js.map

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(60);
	var pipe_1 = __webpack_require__(79);
	/**
	 * Implements json transforms to any object.
	 *
	 * # Example
	 *
	 * In this example we transform the user object to json.
	 *
	 *  ```
	 * @Component({
	 *   selector: "user-cmp"
	 * })
	 * @View({
	 *   template: "User: {{ user | json }}"
	 * })
	 * class Username {
	 *  user:Object
	 *  constructor() {
	 *    this.user = { name: "PatrickJS" };
	 *  }
	 * }
	 *
	 * ```
	 *
	 * @exportedAs angular2/pipes
	 */
	var JsonPipe = (function (_super) {
	    __extends(JsonPipe, _super);
	    function JsonPipe() {
	        _super.call(this);
	        this._latestRef = null;
	        this._latestValue = null;
	    }
	    JsonPipe.prototype.onDestroy = function () {
	        if (lang_1.isPresent(this._latestValue)) {
	            this._latestRef = null;
	            this._latestValue = null;
	        }
	    };
	    JsonPipe.prototype.supports = function (obj) { return true; };
	    JsonPipe.prototype.transform = function (value) {
	        if (value === this._latestRef) {
	            return this._latestValue;
	        }
	        else {
	            return this._prettyPrint(value);
	        }
	    };
	    JsonPipe.prototype._prettyPrint = function (value) {
	        this._latestRef = value;
	        this._latestValue = lang_1.Json.stringify(value);
	        return this._latestValue;
	    };
	    return JsonPipe;
	})(pipe_1.Pipe);
	exports.JsonPipe = JsonPipe;
	/**
	 * Provides a factory for [JsonPipeFactory].
	 *
	 * @exportedAs angular2/pipes
	 */
	var JsonPipeFactory = (function (_super) {
	    __extends(JsonPipeFactory, _super);
	    function JsonPipeFactory() {
	        _super.call(this);
	    }
	    JsonPipeFactory.prototype.supports = function (obj) { return true; };
	    JsonPipeFactory.prototype.create = function (cdRef) { return new JsonPipe(); };
	    JsonPipeFactory = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], JsonPipeFactory);
	    return JsonPipeFactory;
	})(pipe_1.PipeFactory);
	exports.JsonPipeFactory = JsonPipeFactory;
	exports.__esModule = true;
	//# sourceMappingURL=json_pipe.js.map

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	/**
	 * @module
	 * @public
	 * @description
	 * Define angular core API here.
	 */
	__export(__webpack_require__(101));
	__export(__webpack_require__(103));
	__export(__webpack_require__(105));
	__export(__webpack_require__(176));
	__export(__webpack_require__(177));
	__export(__webpack_require__(133));
	__export(__webpack_require__(118));
	// TODO(tbosch): remove this once render migration is complete
	__export(__webpack_require__(140));
	__export(__webpack_require__(100));
	__export(__webpack_require__(178));
	__export(__webpack_require__(179));
	__export(__webpack_require__(144));
	__export(__webpack_require__(154));
	var view_ref_1 = __webpack_require__(123);
	exports.ViewRef = view_ref_1.ViewRef;
	exports.ProtoViewRef = view_ref_1.ProtoViewRef;
	var view_container_ref_1 = __webpack_require__(130);
	exports.ViewContainerRef = view_container_ref_1.ViewContainerRef;
	var element_ref_1 = __webpack_require__(131);
	exports.ElementRef = element_ref_1.ElementRef;
	exports.__esModule = true;
	//# sourceMappingURL=core.js.map

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	var ShadowDomStrategy = (function () {
	    function ShadowDomStrategy() {
	    }
	    ShadowDomStrategy.prototype.hasNativeContentElement = function () { return true; };
	    /**
	     * Prepares and returns the shadow root for the given element.
	     */
	    ShadowDomStrategy.prototype.prepareShadowRoot = function (el) { return null; };
	    ShadowDomStrategy.prototype.constructLightDom = function (lightDomView, el) { return null; };
	    /**
	     * An optional step that can modify the template style elements.
	     */
	    ShadowDomStrategy.prototype.processStyleElement = function (hostComponentId, templateUrl, styleElement) {
	        return null;
	    };
	    ;
	    /**
	     * An optional step that can modify the template elements (style elements exlcuded).
	     */
	    ShadowDomStrategy.prototype.processElement = function (hostComponentId, elementComponentId, element) { };
	    return ShadowDomStrategy;
	})();
	exports.ShadowDomStrategy = ShadowDomStrategy;
	exports.__esModule = true;
	//# sourceMappingURL=shadow_dom_strategy.js.map

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	var visibility_1 = __webpack_require__(102);
	exports.SelfAnnotation = visibility_1.Self;
	exports.AncestorAnnotation = visibility_1.Ancestor;
	exports.ParentAnnotation = visibility_1.Parent;
	exports.UnboundedAnnotation = visibility_1.Unbounded;
	exports.__esModule = true;
	//# sourceMappingURL=visibility.js.map

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(60);
	var annotations_impl_1 = __webpack_require__(65);
	var Visibility = (function (_super) {
	    __extends(Visibility, _super);
	    function Visibility(depth, crossComponentBoundaries) {
	        _super.call(this);
	        this.depth = depth;
	        this.crossComponentBoundaries = crossComponentBoundaries;
	    }
	    Visibility.prototype.shouldIncludeSelf = function () { return this.depth === 0; };
	    Visibility = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Number, Boolean])
	    ], Visibility);
	    return Visibility;
	})(annotations_impl_1.DependencyAnnotation);
	exports.Visibility = Visibility;
	/**
	 * Specifies that an injector should retrieve a dependency from its element.
	 *
	 * ## Example
	 *
	 * Here is a simple directive that retrieves a dependency from its element.
	 *
	 * ```
	 * @Directive({
	 *   selector: '[dependency]',
	 *   properties: {
	 *     'id':'dependency'
	 *   }
	 * })
	 * class Dependency {
	 *   id:string;
	 * }
	 *
	 *
	 * @Directive({
	 *   selector: '[my-directive]'
	 * })
	 * class Dependency {
	 *   constructor(@Self() dependency:Dependency) {
	 *     expect(dependency.id).toEqual(1);
	 *   };
	 * }
	 * ```
	 *
	 * We use this with the following HTML template:
	 *
	 * ```
	 *<div dependency="1" my-directive></div>
	 * ```
	 *
	 * @exportedAs angular2/annotations
	 */
	var Self = (function (_super) {
	    __extends(Self, _super);
	    function Self() {
	        _super.call(this, 0, false);
	    }
	    Self = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], Self);
	    return Self;
	})(Visibility);
	exports.Self = Self;
	// make constants after switching to ts2dart
	exports.self = new Self();
	/**
	 * Specifies that an injector should retrieve a dependency from the direct parent.
	 *
	 * ## Example
	 *
	 * Here is a simple directive that retrieves a dependency from its parent element.
	 *
	 * ```
	 * @Directive({
	 *   selector: '[dependency]',
	 *   properties: {
	 *     'id':'dependency'
	 *   }
	 * })
	 * class Dependency {
	 *   id:string;
	 * }
	 *
	 *
	 * @Directive({
	 *   selector: '[my-directive]'
	 * })
	 * class Dependency {
	 *   constructor(@Parent() dependency:Dependency) {
	 *     expect(dependency.id).toEqual(1);
	 *   };
	 * }
	 * ```
	 *
	 * We use this with the following HTML template:
	 *
	 * ```
	 * <div dependency="1">
	 *   <div dependency="2" my-directive></div>
	 * </div>
	 * ```
	 * The `@Parent()` annotation in our constructor forces the injector to retrieve the dependency from
	 * the
	 * parent element (even thought the current element could resolve it): Angular injects
	 * `dependency=1`.
	 *
	 * @exportedAs angular2/annotations
	 */
	var Parent = (function (_super) {
	    __extends(Parent, _super);
	    function Parent() {
	        _super.call(this, 1, false);
	    }
	    Parent = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], Parent);
	    return Parent;
	})(Visibility);
	exports.Parent = Parent;
	/**
	 * Specifies that an injector should retrieve a dependency from any ancestor element within the same
	 * shadow boundary.
	 *
	 * An ancestor is any element between the parent element and shadow root.
	 *
	 *
	 * ## Example
	 *
	 * Here is a simple directive that retrieves a dependency from an ancestor element.
	 *
	 * ```
	 * @Directive({
	 *   selector: '[dependency]',
	 *   properties: {
	 *     'id':'dependency'
	 *   }
	 * })
	 * class Dependency {
	 *   id:string;
	 * }
	 *
	 *
	 * @Directive({
	 *   selector: '[my-directive]'
	 * })
	 * class Dependency {
	 *   constructor(@Ancestor() dependency:Dependency) {
	 *     expect(dependency.id).toEqual(2);
	 *   };
	 * }
	 * ```
	 *
	 *  We use this with the following HTML template:
	 *
	 * ```
	 * <div dependency="1">
	 *   <div dependency="2">
	 *     <div>
	 *       <div dependency="3" my-directive></div>
	 *     </div>
	 *   </div>
	 * </div>
	 * ```
	 *
	 * The `@Ancestor()` annotation in our constructor forces the injector to retrieve the dependency
	 * from the
	 * nearest ancestor element:
	 * - The current element `dependency="3"` is skipped because it is not an ancestor.
	 * - Next parent has no directives `<div>`
	 * - Next parent has the `Dependency` directive and so the dependency is satisfied.
	 *
	 * Angular injects `dependency=2`.
	 *
	 * @exportedAs angular2/annotations
	 */
	var Ancestor = (function (_super) {
	    __extends(Ancestor, _super);
	    function Ancestor() {
	        _super.call(this, 999999, false);
	    }
	    Ancestor = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], Ancestor);
	    return Ancestor;
	})(Visibility);
	exports.Ancestor = Ancestor;
	/**
	 * Specifies that an injector should retrieve a dependency from any ancestor element.
	 *
	 * An ancestor is any element between the parent element and shadow root.
	 *
	 *
	 * ## Example
	 *
	 * Here is a simple directive that retrieves a dependency from an ancestor element.
	 *
	 * ```
	 * @Directive({
	 *   selector: '[dependency]',
	 *   properties: {
	 *     'id':'dependency'
	 *   }
	 * })
	 * class Dependency {
	 *   id:string;
	 * }
	 *
	 *
	 * @Directive({
	 *   selector: '[my-directive]'
	 * })
	 * class Dependency {
	 *   constructor(@Unbounded() dependency:Dependency) {
	 *     expect(dependency.id).toEqual(2);
	 *   };
	 * }
	 * ```
	 *
	 * @exportedAs angular2/annotations
	 */
	var Unbounded = (function (_super) {
	    __extends(Unbounded, _super);
	    function Unbounded() {
	        _super.call(this, 999999, true);
	    }
	    Unbounded = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], Unbounded);
	    return Unbounded;
	})(Visibility);
	exports.Unbounded = Unbounded;
	exports.__esModule = true;
	//# sourceMappingURL=visibility.js.map

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	var view_1 = __webpack_require__(104);
	exports.ViewAnnotation = view_1.View;
	exports.__esModule = true;
	//# sourceMappingURL=view.js.map

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(60);
	/**
	 * Declares the available HTML templates for an application.
	 *
	 * Each angular component requires a single `@Component` and at least one `@View` annotation. The
	 * @View
	 * annotation specifies the HTML template to use, and lists the directives that are active within
	 * the template.
	 *
	 * When a component is instantiated, the template is loaded into the component's shadow root, and
	 * the
	 * expressions and statements in the template are evaluated against the component.
	 *
	 * For details on the `@Component` annotation, see {@link Component}.
	 *
	 * ## Example
	 *
	 * ```
	 * @Component({
	 *   selector: 'greet'
	 * })
	 * @View({
	 *   template: 'Hello {{name}}!',
	 *   directives: [GreetUser, Bold]
	 * })
	 * class Greet {
	 *   name: string;
	 *
	 *   constructor() {
	 *     this.name = 'World';
	 *   }
	 * }
	 * ```
	 *
	 * @exportedAs angular2/annotations
	 */
	var View = (function () {
	    function View(_a) {
	        var _b = _a === void 0 ? {} : _a, templateUrl = _b.templateUrl, template = _b.template, directives = _b.directives, renderer = _b.renderer;
	        this.templateUrl = templateUrl;
	        this.template = template;
	        this.directives = directives;
	        this.renderer = renderer;
	    }
	    View = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object])
	    ], View);
	    return View;
	})();
	exports.View = View;
	exports.__esModule = true;
	//# sourceMappingURL=view.js.map

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	var di_1 = __webpack_require__(108);
	var lang_1 = __webpack_require__(60);
	var browser_adapter_1 = __webpack_require__(116);
	var dom_adapter_1 = __webpack_require__(107);
	var compiler_1 = __webpack_require__(118);
	var reflection_1 = __webpack_require__(68);
	var change_detection_1 = __webpack_require__(58);
	var exception_handler_1 = __webpack_require__(139);
	var template_loader_1 = __webpack_require__(140);
	var template_resolver_1 = __webpack_require__(135);
	var directive_resolver_1 = __webpack_require__(127);
	var collection_1 = __webpack_require__(61);
	var async_1 = __webpack_require__(94);
	var ng_zone_1 = __webpack_require__(142);
	var life_cycle_1 = __webpack_require__(143);
	var shadow_dom_strategy_1 = __webpack_require__(100);
	var emulated_unscoped_shadow_dom_strategy_1 = __webpack_require__(144);
	var xhr_1 = __webpack_require__(141);
	var xhr_impl_1 = __webpack_require__(148);
	var event_manager_1 = __webpack_require__(106);
	var key_events_1 = __webpack_require__(149);
	var hammer_gestures_1 = __webpack_require__(150);
	var component_url_mapper_1 = __webpack_require__(136);
	var url_resolver_1 = __webpack_require__(138);
	var style_url_resolver_1 = __webpack_require__(152);
	var style_inliner_1 = __webpack_require__(153);
	var dynamic_component_loader_1 = __webpack_require__(154);
	var testability_1 = __webpack_require__(155);
	var view_pool_1 = __webpack_require__(129);
	var view_manager_1 = __webpack_require__(121);
	var view_manager_utils_1 = __webpack_require__(124);
	var proto_view_factory_1 = __webpack_require__(137);
	var api_1 = __webpack_require__(122);
	var dom_renderer_1 = __webpack_require__(157);
	var view_1 = __webpack_require__(132);
	var compiler_2 = __webpack_require__(162);
	var view_ref_1 = __webpack_require__(123);
	var application_tokens_1 = __webpack_require__(176);
	var _rootInjector;
	// Contains everything that is safe to share between applications.
	var _rootBindings = [di_1.bind(reflection_1.Reflector).toValue(reflection_1.reflector), testability_1.TestabilityRegistry];
	function _injectorBindings(appComponentType) {
	    return [
	        di_1.bind(dom_renderer_1.DOCUMENT_TOKEN)
	            .toValue(dom_adapter_1.DOM.defaultDoc()),
	        di_1.bind(application_tokens_1.appComponentTypeToken).toValue(appComponentType),
	        di_1.bind(application_tokens_1.appComponentRefToken)
	            .toAsyncFactory(function (dynamicComponentLoader, injector, testability, registry) {
	            // TODO(rado): investigate whether to support bindings on root component.
	            return dynamicComponentLoader.loadAsRoot(appComponentType, null, injector)
	                .then(function (componentRef) {
	                var domView = view_1.resolveInternalDomView(componentRef.hostView.render);
	                // We need to do this here to ensure that we create Testability and
	                // it's ready on the window for users.
	                registry.registerApplication(domView.boundElements[0], testability);
	                return componentRef;
	            });
	        }, [dynamic_component_loader_1.DynamicComponentLoader, di_1.Injector, testability_1.Testability, testability_1.TestabilityRegistry]),
	        di_1.bind(appComponentType).toFactory(function (ref) { return ref.instance; }, [application_tokens_1.appComponentRefToken]),
	        di_1.bind(life_cycle_1.LifeCycle)
	            .toFactory(function (exceptionHandler) { return new life_cycle_1.LifeCycle(exceptionHandler, null, lang_1.assertionsEnabled()); }, [exception_handler_1.ExceptionHandler]),
	        di_1.bind(event_manager_1.EventManager)
	            .toFactory(function (ngZone) {
	            var plugins = [new hammer_gestures_1.HammerGesturesPlugin(), new key_events_1.KeyEventsPlugin(), new event_manager_1.DomEventsPlugin()];
	            return new event_manager_1.EventManager(plugins, ngZone);
	        }, [ng_zone_1.NgZone]),
	        di_1.bind(shadow_dom_strategy_1.ShadowDomStrategy)
	            .toFactory(function (styleUrlResolver, doc) {
	            return new emulated_unscoped_shadow_dom_strategy_1.EmulatedUnscopedShadowDomStrategy(styleUrlResolver, doc.head);
	        }, [style_url_resolver_1.StyleUrlResolver, dom_renderer_1.DOCUMENT_TOKEN]),
	        // TODO(tbosch): We need an explicit factory here, as
	        // we are getting errors in dart2js with mirrors...
	        di_1.bind(dom_renderer_1.DomRenderer)
	            .toFactory(function (eventManager, shadowDomStrategy, doc) {
	            return new dom_renderer_1.DomRenderer(eventManager, shadowDomStrategy, doc);
	        }, [event_manager_1.EventManager, shadow_dom_strategy_1.ShadowDomStrategy, dom_renderer_1.DOCUMENT_TOKEN]),
	        compiler_2.DefaultDomCompiler,
	        di_1.bind(api_1.Renderer).toAlias(dom_renderer_1.DomRenderer),
	        di_1.bind(api_1.RenderCompiler).toAlias(compiler_2.DefaultDomCompiler),
	        proto_view_factory_1.ProtoViewFactory,
	        // TODO(tbosch): We need an explicit factory here, as
	        // we are getting errors in dart2js with mirrors...
	        di_1.bind(view_pool_1.AppViewPool).toFactory(function (capacity) { return new view_pool_1.AppViewPool(capacity); }, [view_pool_1.APP_VIEW_POOL_CAPACITY]),
	        di_1.bind(view_pool_1.APP_VIEW_POOL_CAPACITY).toValue(10000),
	        view_manager_1.AppViewManager,
	        view_manager_utils_1.AppViewManagerUtils,
	        compiler_1.Compiler,
	        compiler_1.CompilerCache,
	        template_resolver_1.TemplateResolver,
	        di_1.bind(change_detection_1.PipeRegistry).toValue(change_detection_1.defaultPipeRegistry),
	        di_1.bind(change_detection_1.ChangeDetection).toClass(change_detection_1.DynamicChangeDetection),
	        template_loader_1.TemplateLoader,
	        directive_resolver_1.DirectiveResolver,
	        change_detection_1.Parser,
	        change_detection_1.Lexer,
	        exception_handler_1.ExceptionHandler,
	        di_1.bind(xhr_1.XHR).toValue(new xhr_impl_1.XHRImpl()),
	        component_url_mapper_1.ComponentUrlMapper,
	        url_resolver_1.UrlResolver,
	        style_url_resolver_1.StyleUrlResolver,
	        style_inliner_1.StyleInliner,
	        dynamic_component_loader_1.DynamicComponentLoader,
	        testability_1.Testability
	    ];
	}
	function _createNgZone(givenReporter) {
	    var defaultErrorReporter = function (exception, stackTrace) {
	        var longStackTrace = collection_1.ListWrapper.join(stackTrace, "\n\n-----async gap-----\n");
	        dom_adapter_1.DOM.logError(exception + "\n\n" + longStackTrace);
	        throw exception;
	    };
	    var reporter = lang_1.isPresent(givenReporter) ? givenReporter : defaultErrorReporter;
	    var zone = new ng_zone_1.NgZone({ enableLongStackTrace: lang_1.assertionsEnabled() });
	    zone.initCallbacks({ onErrorHandler: reporter });
	    return zone;
	}
	/**
	 * Bootstrapping for Angular applications.
	 *
	 * You instantiate an Angular application by explicitly specifying a component to use as the root
	 * component for your
	 * application via the `bootstrap()` method.
	 *
	 * ## Simple Example
	 *
	 * Assuming this `index.html`:
	 *
	 * ```html
	 * <html>
	 *   <!-- load Angular script tags here. -->
	 *   <body>
	 *     <my-app>loading...</my-app>
	 *   </body>
	 * </html>
	 * ```
	 *
	 * An application is bootstrapped inside an existing browser DOM, typically `index.html`. Unlike
	 * Angular 1, Angular 2
	 * does not compile/process bindings in `index.html`. This is mainly for security reasons, as well
	 * as architectural
	 * changes in Angular 2. This means that `index.html` can safely be processed using server-side
	 * technologies such as
	 * bindings. Bindings can thus use double-curly `{{ syntax }}` without collision from Angular 2
	 * component double-curly
	 * `{{ syntax }}`.
	 *
	 * We can use this script code:
	 *
	 * ```
	 * @Component({
	 *    selector: 'my-app'
	 * })
	 * @View({
	 *    template: 'Hello {{ name }}!'
	 * })
	 * class MyApp {
	 *   name:string;
	 *
	 *   constructor() {
	 *     this.name = 'World';
	 *   }
	 * }
	 *
	 * main() {
	 *   return bootstrap(MyApp);
	 * }
	 * ```
	 *
	 * When the app developer invokes `bootstrap()` with the root component `MyApp` as its argument,
	 * Angular performs the
	 * following tasks:
	 *
	 *  1. It uses the component's `selector` property to locate the DOM element which needs to be
	 * upgraded into
	 *     the angular component.
	 *  2. It creates a new child injector (from the platform injector) and configures the injector with
	 * the component's
	 *     `appInjector`. Optionally, you can also override the injector configuration for an app by
	 * invoking
	 *     `bootstrap` with the `componentInjectableBindings` argument.
	 *  3. It creates a new `Zone` and connects it to the angular application's change detection domain
	 * instance.
	 *  4. It creates a shadow DOM on the selected component's host element and loads the template into
	 * it.
	 *  5. It instantiates the specified component.
	 *  6. Finally, Angular performs change detection to apply the initial data bindings for the
	 * application.
	 *
	 *
	 * ## Instantiating Multiple Applications on a Single Page
	 *
	 * There are two ways to do this.
	 *
	 *
	 * ### Isolated Applications
	 *
	 * Angular creates a new application each time that the `bootstrap()` method is invoked. When
	 * multiple applications
	 * are created for a page, Angular treats each application as independent within an isolated change
	 * detection and
	 * `Zone` domain. If you need to share data between applications, use the strategy described in the
	 * next
	 * section, "Applications That Share Change Detection."
	 *
	 *
	 * ### Applications That Share Change Detection
	 *
	 * If you need to bootstrap multiple applications that share common data, the applications must
	 * share a common
	 * change detection and zone. To do that, create a meta-component that lists the application
	 * components in its template.
	 * By only invoking the `bootstrap()` method once, with the meta-component as its argument, you
	 * ensure that only a
	 * single change detection zone is created and therefore data can be shared across the applications.
	 *
	 *
	 * ## Platform Injector
	 *
	 * When working within a browser window, there are many singleton resources: cookies, title,
	 * location, and others.
	 * Angular services that represent these resources must likewise be shared across all Angular
	 * applications that
	 * occupy the same browser window.  For this reason, Angular creates exactly one global platform
	 * injector which stores
	 * all shared services, and each angular application injector has the platform injector as its
	 * parent.
	 *
	 * Each application has its own private injector as well. When there are multiple applications on a
	 * page, Angular treats
	 * each application injector's services as private to that application.
	 *
	 *
	 * # API
	 * - `appComponentType`: The root component which should act as the application. This is a reference
	 * to a `Type`
	 *   which is annotated with `@Component(...)`.
	 * - `componentInjectableBindings`: An additional set of bindings that can be added to `appInjector`
	 * for the
	 * {@link Component} to override default injection behavior.
	 * - `errorReporter`: `function(exception:any, stackTrace:string)` a default error reporter for
	 * unhandled exceptions.
	 *
	 * Returns a `Promise` with the application`s private {@link Injector}.
	 *
	 * @exportedAs angular2/core
	 */
	function bootstrap(appComponentType, componentInjectableBindings, errorReporter) {
	    if (componentInjectableBindings === void 0) { componentInjectableBindings = null; }
	    if (errorReporter === void 0) { errorReporter = null; }
	    browser_adapter_1.BrowserDomAdapter.makeCurrent();
	    var bootstrapProcess = async_1.PromiseWrapper.completer();
	    var zone = _createNgZone(errorReporter);
	    zone.run(function () {
	        // TODO(rado): prepopulate template cache, so applications with only
	        // index.html and main.js are possible.
	        var appInjector = _createAppInjector(appComponentType, componentInjectableBindings, zone);
	        async_1.PromiseWrapper.then(appInjector.asyncGet(application_tokens_1.appComponentRefToken), function (componentRef) {
	            var appChangeDetector = view_ref_1.internalView(componentRef.hostView).changeDetector;
	            // retrieve life cycle: may have already been created if injected in root component
	            var lc = appInjector.get(life_cycle_1.LifeCycle);
	            lc.registerWith(zone, appChangeDetector);
	            lc.tick(); // the first tick that will bootstrap the app
	            bootstrapProcess.resolve(new ApplicationRef(componentRef, appComponentType, appInjector));
	        }, function (err, stackTrace) { bootstrapProcess.reject(err, stackTrace); });
	    });
	    return bootstrapProcess.promise;
	}
	exports.bootstrap = bootstrap;
	var ApplicationRef = (function () {
	    function ApplicationRef(hostComponent, hostComponentType, injector) {
	        this._hostComponent = hostComponent;
	        this._injector = injector;
	        this._hostComponentType = hostComponentType;
	    }
	    Object.defineProperty(ApplicationRef.prototype, "hostComponentType", {
	        get: function () { return this._hostComponentType; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ApplicationRef.prototype, "hostComponent", {
	        get: function () { return this._hostComponent.instance; },
	        enumerable: true,
	        configurable: true
	    });
	    ApplicationRef.prototype.dispose = function () {
	        // TODO: We also need to clean up the Zone, ... here!
	        return this._hostComponent.dispose();
	    };
	    Object.defineProperty(ApplicationRef.prototype, "injector", {
	        get: function () { return this._injector; },
	        enumerable: true,
	        configurable: true
	    });
	    return ApplicationRef;
	})();
	exports.ApplicationRef = ApplicationRef;
	function _createAppInjector(appComponentType, bindings, zone) {
	    if (lang_1.isBlank(_rootInjector))
	        _rootInjector = di_1.Injector.resolveAndCreate(_rootBindings);
	    var mergedBindings = lang_1.isPresent(bindings) ?
	        collection_1.ListWrapper.concat(_injectorBindings(appComponentType), bindings) :
	        _injectorBindings(appComponentType);
	    collection_1.ListWrapper.push(mergedBindings, di_1.bind(ng_zone_1.NgZone).toValue(zone));
	    return _rootInjector.resolveAndCreateChild(mergedBindings);
	}
	exports.__esModule = true;
	//# sourceMappingURL=application.js.map

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var lang_1 = __webpack_require__(60);
	var dom_adapter_1 = __webpack_require__(107);
	var BUBBLE_SYMBOL = '^';
	var EventManager = (function () {
	    function EventManager(plugins, zone) {
	        this._zone = zone;
	        this._plugins = plugins;
	        for (var i = 0; i < plugins.length; i++) {
	            plugins[i].manager = this;
	        }
	    }
	    EventManager.prototype.addEventListener = function (element, eventName, handler) {
	        var withoutBubbleSymbol = this._removeBubbleSymbol(eventName);
	        var plugin = this._findPluginFor(withoutBubbleSymbol);
	        plugin.addEventListener(element, withoutBubbleSymbol, handler, withoutBubbleSymbol != eventName);
	    };
	    EventManager.prototype.addGlobalEventListener = function (target, eventName, handler) {
	        var withoutBubbleSymbol = this._removeBubbleSymbol(eventName);
	        var plugin = this._findPluginFor(withoutBubbleSymbol);
	        return plugin.addGlobalEventListener(target, withoutBubbleSymbol, handler, withoutBubbleSymbol != eventName);
	    };
	    EventManager.prototype.getZone = function () { return this._zone; };
	    EventManager.prototype._findPluginFor = function (eventName) {
	        var plugins = this._plugins;
	        for (var i = 0; i < plugins.length; i++) {
	            var plugin = plugins[i];
	            if (plugin.supports(eventName)) {
	                return plugin;
	            }
	        }
	        throw new lang_1.BaseException("No event manager plugin found for event " + eventName);
	    };
	    EventManager.prototype._removeBubbleSymbol = function (eventName) {
	        return eventName[0] == BUBBLE_SYMBOL ? lang_1.StringWrapper.substring(eventName, 1) : eventName;
	    };
	    return EventManager;
	})();
	exports.EventManager = EventManager;
	var EventManagerPlugin = (function () {
	    function EventManagerPlugin() {
	    }
	    // We are assuming here that all plugins support bubbled and non-bubbled events.
	    // That is equivalent to having supporting $event.target
	    // The bubbling flag (currently ^) is stripped before calling the supports and
	    // addEventListener methods.
	    EventManagerPlugin.prototype.supports = function (eventName) { return false; };
	    EventManagerPlugin.prototype.addEventListener = function (element, eventName, handler, shouldSupportBubble) {
	        throw "not implemented";
	    };
	    EventManagerPlugin.prototype.addGlobalEventListener = function (element, eventName, handler, shouldSupportBubble) {
	        throw "not implemented";
	    };
	    return EventManagerPlugin;
	})();
	exports.EventManagerPlugin = EventManagerPlugin;
	var DomEventsPlugin = (function (_super) {
	    __extends(DomEventsPlugin, _super);
	    function DomEventsPlugin() {
	        _super.apply(this, arguments);
	    }
	    // This plugin should come last in the list of plugins, because it accepts all
	    // events.
	    DomEventsPlugin.prototype.supports = function (eventName) { return true; };
	    DomEventsPlugin.prototype.addEventListener = function (element, eventName, handler, shouldSupportBubble) {
	        var outsideHandler = this._getOutsideHandler(shouldSupportBubble, element, handler, this.manager._zone);
	        this.manager._zone.runOutsideAngular(function () { dom_adapter_1.DOM.on(element, eventName, outsideHandler); });
	    };
	    DomEventsPlugin.prototype.addGlobalEventListener = function (target, eventName, handler, shouldSupportBubble) {
	        var element = dom_adapter_1.DOM.getGlobalEventTarget(target);
	        var outsideHandler = this._getOutsideHandler(shouldSupportBubble, element, handler, this.manager._zone);
	        return this.manager._zone.runOutsideAngular(function () { return dom_adapter_1.DOM.onAndCancel(element, eventName, outsideHandler); });
	    };
	    DomEventsPlugin.prototype._getOutsideHandler = function (shouldSupportBubble, element, handler, zone) {
	        return shouldSupportBubble ? DomEventsPlugin.bubbleCallback(element, handler, zone) :
	            DomEventsPlugin.sameElementCallback(element, handler, zone);
	    };
	    DomEventsPlugin.sameElementCallback = function (element, handler, zone) {
	        return function (event) { if (event.target === element) {
	            zone.run(function () { return handler(event); });
	        } };
	    };
	    DomEventsPlugin.bubbleCallback = function (element, handler, zone) {
	        return function (event) { return zone.run(function () { return handler(event); }); };
	    };
	    return DomEventsPlugin;
	})(EventManagerPlugin);
	exports.DomEventsPlugin = DomEventsPlugin;
	exports.__esModule = true;
	//# sourceMappingURL=event_manager.js.map

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	var lang_1 = __webpack_require__(60);
	exports.DOM;
	function setRootDomAdapter(adapter) {
	    if (lang_1.isBlank(exports.DOM)) {
	        exports.DOM = adapter;
	    }
	}
	exports.setRootDomAdapter = setRootDomAdapter;
	function _abstract() {
	    return new lang_1.BaseException('This method is abstract');
	}
	/**
	 * Provides DOM operations in an environment-agnostic way.
	 */
	var DomAdapter = (function () {
	    function DomAdapter() {
	    }
	    DomAdapter.prototype.logError = function (error) { throw _abstract(); };
	    Object.defineProperty(DomAdapter.prototype, "attrToPropMap", {
	        /**
	         * Maps attribute names to their corresponding property names for cases
	         * where attribute name doesn't match property name.
	         */
	        get: function () { throw _abstract(); },
	        enumerable: true,
	        configurable: true
	    });
	    DomAdapter.prototype.parse = function (templateHtml) { throw _abstract(); };
	    DomAdapter.prototype.query = function (selector) { throw _abstract(); };
	    DomAdapter.prototype.querySelector = function (el, selector) { throw _abstract(); };
	    DomAdapter.prototype.querySelectorAll = function (el, selector) { throw _abstract(); };
	    DomAdapter.prototype.on = function (el, evt, listener) { throw _abstract(); };
	    DomAdapter.prototype.onAndCancel = function (el, evt, listener) { throw _abstract(); };
	    DomAdapter.prototype.dispatchEvent = function (el, evt) { throw _abstract(); };
	    DomAdapter.prototype.createMouseEvent = function (eventType) { throw _abstract(); };
	    DomAdapter.prototype.createEvent = function (eventType) { throw _abstract(); };
	    DomAdapter.prototype.getInnerHTML = function (el) { throw _abstract(); };
	    DomAdapter.prototype.getOuterHTML = function (el) { throw _abstract(); };
	    DomAdapter.prototype.nodeName = function (node) { throw _abstract(); };
	    DomAdapter.prototype.nodeValue = function (node) { throw _abstract(); };
	    DomAdapter.prototype.type = function (node) { throw _abstract(); };
	    DomAdapter.prototype.content = function (node) { throw _abstract(); };
	    DomAdapter.prototype.firstChild = function (el) { throw _abstract(); };
	    DomAdapter.prototype.nextSibling = function (el) { throw _abstract(); };
	    DomAdapter.prototype.parentElement = function (el) { throw _abstract(); };
	    DomAdapter.prototype.childNodes = function (el) { throw _abstract(); };
	    DomAdapter.prototype.childNodesAsList = function (el) { throw _abstract(); };
	    DomAdapter.prototype.clearNodes = function (el) { throw _abstract(); };
	    DomAdapter.prototype.appendChild = function (el, node) { throw _abstract(); };
	    DomAdapter.prototype.removeChild = function (el, node) { throw _abstract(); };
	    DomAdapter.prototype.replaceChild = function (el, newNode, oldNode) { throw _abstract(); };
	    DomAdapter.prototype.remove = function (el) { throw _abstract(); };
	    DomAdapter.prototype.insertBefore = function (el, node) { throw _abstract(); };
	    DomAdapter.prototype.insertAllBefore = function (el, nodes) { throw _abstract(); };
	    DomAdapter.prototype.insertAfter = function (el, node) { throw _abstract(); };
	    DomAdapter.prototype.setInnerHTML = function (el, value) { throw _abstract(); };
	    DomAdapter.prototype.getText = function (el) { throw _abstract(); };
	    DomAdapter.prototype.setText = function (el, value) { throw _abstract(); };
	    DomAdapter.prototype.getValue = function (el) { throw _abstract(); };
	    DomAdapter.prototype.setValue = function (el, value) { throw _abstract(); };
	    DomAdapter.prototype.getChecked = function (el) { throw _abstract(); };
	    DomAdapter.prototype.setChecked = function (el, value) { throw _abstract(); };
	    DomAdapter.prototype.createTemplate = function (html) { throw _abstract(); };
	    DomAdapter.prototype.createElement = function (tagName, doc) {
	        if (doc === void 0) { doc = null; }
	        throw _abstract();
	    };
	    DomAdapter.prototype.createTextNode = function (text, doc) {
	        if (doc === void 0) { doc = null; }
	        throw _abstract();
	    };
	    DomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc) {
	        if (doc === void 0) { doc = null; }
	        throw _abstract();
	    };
	    DomAdapter.prototype.createStyleElement = function (css, doc) {
	        if (doc === void 0) { doc = null; }
	        throw _abstract();
	    };
	    DomAdapter.prototype.createShadowRoot = function (el) { throw _abstract(); };
	    DomAdapter.prototype.getShadowRoot = function (el) { throw _abstract(); };
	    DomAdapter.prototype.getHost = function (el) { throw _abstract(); };
	    DomAdapter.prototype.getDistributedNodes = function (el) { throw _abstract(); };
	    DomAdapter.prototype.clone = function (node) { throw _abstract(); };
	    DomAdapter.prototype.hasProperty = function (element, name) { throw _abstract(); };
	    DomAdapter.prototype.getElementsByClassName = function (element, name) { throw _abstract(); };
	    DomAdapter.prototype.getElementsByTagName = function (element, name) { throw _abstract(); };
	    DomAdapter.prototype.classList = function (element) { throw _abstract(); };
	    DomAdapter.prototype.addClass = function (element, classname) { throw _abstract(); };
	    DomAdapter.prototype.removeClass = function (element, classname) { throw _abstract(); };
	    DomAdapter.prototype.hasClass = function (element, classname) { throw _abstract(); };
	    DomAdapter.prototype.setStyle = function (element, stylename, stylevalue) { throw _abstract(); };
	    DomAdapter.prototype.removeStyle = function (element, stylename) { throw _abstract(); };
	    DomAdapter.prototype.getStyle = function (element, stylename) { throw _abstract(); };
	    DomAdapter.prototype.tagName = function (element) { throw _abstract(); };
	    DomAdapter.prototype.attributeMap = function (element) { throw _abstract(); };
	    DomAdapter.prototype.hasAttribute = function (element, attribute) { throw _abstract(); };
	    DomAdapter.prototype.getAttribute = function (element, attribute) { throw _abstract(); };
	    DomAdapter.prototype.setAttribute = function (element, name, value) { throw _abstract(); };
	    DomAdapter.prototype.removeAttribute = function (element, attribute) { throw _abstract(); };
	    DomAdapter.prototype.templateAwareRoot = function (el) { throw _abstract(); };
	    DomAdapter.prototype.createHtmlDocument = function () { throw _abstract(); };
	    DomAdapter.prototype.defaultDoc = function () { throw _abstract(); };
	    DomAdapter.prototype.getBoundingClientRect = function (el) { throw _abstract(); };
	    DomAdapter.prototype.getTitle = function () { throw _abstract(); };
	    DomAdapter.prototype.setTitle = function (newTitle) { throw _abstract(); };
	    DomAdapter.prototype.elementMatches = function (n, selector) { throw _abstract(); };
	    DomAdapter.prototype.isTemplateElement = function (el) { throw _abstract(); };
	    DomAdapter.prototype.isTextNode = function (node) { throw _abstract(); };
	    DomAdapter.prototype.isCommentNode = function (node) { throw _abstract(); };
	    DomAdapter.prototype.isElementNode = function (node) { throw _abstract(); };
	    DomAdapter.prototype.hasShadowRoot = function (node) { throw _abstract(); };
	    DomAdapter.prototype.isShadowRoot = function (node) { throw _abstract(); };
	    DomAdapter.prototype.importIntoDoc = function (node) { throw _abstract(); };
	    DomAdapter.prototype.isPageRule = function (rule) { throw _abstract(); };
	    DomAdapter.prototype.isStyleRule = function (rule) { throw _abstract(); };
	    DomAdapter.prototype.isMediaRule = function (rule) { throw _abstract(); };
	    DomAdapter.prototype.isKeyframesRule = function (rule) { throw _abstract(); };
	    DomAdapter.prototype.getHref = function (element) { throw _abstract(); };
	    DomAdapter.prototype.getEventKey = function (event) { throw _abstract(); };
	    DomAdapter.prototype.resolveAndSetHref = function (element, baseUrl, href) { throw _abstract(); };
	    DomAdapter.prototype.cssToRules = function (css) { throw _abstract(); };
	    DomAdapter.prototype.supportsDOMEvents = function () { throw _abstract(); };
	    DomAdapter.prototype.supportsNativeShadowDOM = function () { throw _abstract(); };
	    DomAdapter.prototype.getGlobalEventTarget = function (target) { throw _abstract(); };
	    DomAdapter.prototype.getHistory = function () { throw _abstract(); };
	    DomAdapter.prototype.getLocation = function () { throw _abstract(); };
	    DomAdapter.prototype.getBaseHref = function () { throw _abstract(); };
	    return DomAdapter;
	})();
	exports.DomAdapter = DomAdapter;
	exports.__esModule = true;
	//# sourceMappingURL=dom_adapter.js.map

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module
	 * @public
	 * @description
	 * The `di` module provides dependency injection container services.
	 */
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(64));
	__export(__webpack_require__(63));
	__export(__webpack_require__(112));
	var injector_1 = __webpack_require__(114);
	exports.resolveBindings = injector_1.resolveBindings;
	exports.Injector = injector_1.Injector;
	var binding_1 = __webpack_require__(109);
	exports.Binding = binding_1.Binding;
	exports.ResolvedBinding = binding_1.ResolvedBinding;
	exports.Dependency = binding_1.Dependency;
	exports.bind = binding_1.bind;
	var key_1 = __webpack_require__(110);
	exports.Key = key_1.Key;
	exports.KeyRegistry = key_1.KeyRegistry;
	exports.TypeLiteral = key_1.TypeLiteral;
	var exceptions_1 = __webpack_require__(113);
	exports.NoBindingError = exceptions_1.NoBindingError;
	exports.AbstractBindingError = exceptions_1.AbstractBindingError;
	exports.AsyncBindingError = exceptions_1.AsyncBindingError;
	exports.CyclicDependencyError = exceptions_1.CyclicDependencyError;
	exports.InstantiationError = exceptions_1.InstantiationError;
	exports.InvalidBindingError = exceptions_1.InvalidBindingError;
	exports.NoAnnotationError = exceptions_1.NoAnnotationError;
	var opaque_token_1 = __webpack_require__(115);
	exports.OpaqueToken = opaque_token_1.OpaqueToken;
	exports.__esModule = true;
	//# sourceMappingURL=di.js.map

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(60);
	var collection_1 = __webpack_require__(61);
	var reflection_1 = __webpack_require__(68);
	var key_1 = __webpack_require__(110);
	var annotations_impl_1 = __webpack_require__(65);
	var exceptions_1 = __webpack_require__(113);
	var forward_ref_1 = __webpack_require__(112);
	/**
	 * @private
	 */
	var Dependency = (function () {
	    function Dependency(key, asPromise, lazy, optional, properties) {
	        this.key = key;
	        this.asPromise = asPromise;
	        this.lazy = lazy;
	        this.optional = optional;
	        this.properties = properties;
	    }
	    Dependency.fromKey = function (key) { return new Dependency(key, false, false, false, []); };
	    return Dependency;
	})();
	exports.Dependency = Dependency;
	var _EMPTY_LIST = []; // TODO: make const when supported
	/**
	 * Describes how the {@link Injector} should instantiate a given token.
	 *
	 * See {@link bind}.
	 *
	 * ## Example
	 *
	 * ```javascript
	 * var injector = Injector.resolveAndCreate([
	 *   new Binding(String, { toValue: 'Hello' })
	 * ]);
	 *
	 * expect(injector.get(String)).toEqual('Hello');
	 * ```
	 *
	 * @exportedAs angular2/di
	 */
	var Binding = (function () {
	    function Binding(token, _a) {
	        var toClass = _a.toClass, toValue = _a.toValue, toAlias = _a.toAlias, toFactory = _a.toFactory, toAsyncFactory = _a.toAsyncFactory, deps = _a.deps;
	        this.token = token;
	        this.toClass = toClass;
	        this.toValue = toValue;
	        this.toAlias = toAlias;
	        this.toFactory = toFactory;
	        this.toAsyncFactory = toAsyncFactory;
	        this.dependencies = deps;
	    }
	    /**
	     * Converts the {@link Binding} into {@link ResolvedBinding}.
	     *
	     * {@link Injector} internally only uses {@link ResolvedBinding}, {@link Binding} contains
	     * convenience binding syntax.
	     */
	    Binding.prototype.resolve = function () {
	        var _this = this;
	        var factoryFn;
	        var resolvedDeps;
	        var isAsync = false;
	        if (lang_1.isPresent(this.toClass)) {
	            var toClass = forward_ref_1.resolveForwardRef(this.toClass);
	            factoryFn = reflection_1.reflector.factory(toClass);
	            resolvedDeps = _dependenciesFor(toClass);
	        }
	        else if (lang_1.isPresent(this.toAlias)) {
	            factoryFn = function (aliasInstance) { return aliasInstance; };
	            resolvedDeps = [Dependency.fromKey(key_1.Key.get(this.toAlias))];
	        }
	        else if (lang_1.isPresent(this.toFactory)) {
	            factoryFn = this.toFactory;
	            resolvedDeps = _constructDependencies(this.toFactory, this.dependencies);
	        }
	        else if (lang_1.isPresent(this.toAsyncFactory)) {
	            factoryFn = this.toAsyncFactory;
	            resolvedDeps = _constructDependencies(this.toAsyncFactory, this.dependencies);
	            isAsync = true;
	        }
	        else {
	            factoryFn = function () { return _this.toValue; };
	            resolvedDeps = _EMPTY_LIST;
	        }
	        return new ResolvedBinding(key_1.Key.get(this.token), factoryFn, resolvedDeps, isAsync);
	    };
	    Binding = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object, Object])
	    ], Binding);
	    return Binding;
	})();
	exports.Binding = Binding;
	/**
	 * An internal resolved representation of a {@link Binding} used by the {@link Injector}.
	 *
	 * A {@link Binding} is resolved when it has a factory function. Binding to a class, alias, or
	 * value, are just convenience methods, as {@link Injector} only operates on calling factory
	 * functions.
	 *
	 * @exportedAs angular2/di
	 */
	var ResolvedBinding = (function () {
	    function ResolvedBinding(
	        /**
	         * A key, usually a `Type`.
	         */
	        key, 
	        /**
	         * Factory function which can return an instance of an object represented by a key.
	         */
	        factory, 
	        /**
	         * Arguments (dependencies) to the `factory` function.
	         */
	        dependencies, 
	        /**
	         * Specifies whether the `factory` function returns a `Promise`.
	         */
	        providedAsPromise) {
	        this.key = key;
	        this.factory = factory;
	        this.dependencies = dependencies;
	        this.providedAsPromise = providedAsPromise;
	    }
	    return ResolvedBinding;
	})();
	exports.ResolvedBinding = ResolvedBinding;
	/**
	 * Provides an API for imperatively constructing {@link Binding}s.
	 *
	 * This is only relevant for JavaScript. See {@link BindingBuilder}.
	 *
	 * ## Example
	 *
	 * ```javascript
	 * bind(MyInterface).toClass(MyClass)
	 *
	 * ```
	 *
	 * @exportedAs angular2/di
	 */
	function bind(token) {
	    return new BindingBuilder(token);
	}
	exports.bind = bind;
	/**
	 * Helper class for the {@link bind} function.
	 *
	 * @exportedAs angular2/di
	 */
	var BindingBuilder = (function () {
	    function BindingBuilder(token) {
	        this.token = token;
	    }
	    /**
	     * Binds an interface to an implementation / subclass.
	     *
	     * ## Example
	     *
	     * Because `toAlias` and `toClass` are often confused, the example contains both use cases for
	     * easy comparison.
	     *
	     * ```javascript
	     *
	     * class Vehicle {}
	     *
	     * class Car extends Vehicle {}
	     *
	     * var injectorClass = Injector.resolveAndCreate([
	     *   Car,
	     *   bind(Vehicle).toClass(Car)
	     * ]);
	     * var injectorAlias = Injector.resolveAndCreate([
	     *   Car,
	     *   bind(Vehicle).toAlias(Car)
	     * ]);
	     *
	     * expect(injectorClass.get(Vehicle)).not.toBe(injectorClass.get(Car));
	     * expect(injectorClass.get(Vehicle) instanceof Car).toBe(true);
	     *
	     * expect(injectorAlias.get(Vehicle)).toBe(injectorAlias.get(Car));
	     * expect(injectorAlias.get(Vehicle) instanceof Car).toBe(true);
	     * ```
	     */
	    BindingBuilder.prototype.toClass = function (type) { return new Binding(this.token, { toClass: type }); };
	    /**
	     * Binds a key to a value.
	     *
	     * ## Example
	     *
	     * ```javascript
	     * var injector = Injector.resolveAndCreate([
	     *   bind(String).toValue('Hello')
	     * ]);
	     *
	     * expect(injector.get(String)).toEqual('Hello');
	     * ```
	     */
	    BindingBuilder.prototype.toValue = function (value) { return new Binding(this.token, { toValue: value }); };
	    /**
	     * Binds a key to the alias for an existing key.
	     *
	     * An alias means that we will return the same instance as if the alias token was used. (This is
	     * in contrast to `toClass` where a separet instance of `toClass` will be returned.)
	     *
	     * ## Example
	     *
	     * Becuse `toAlias` and `toClass` are often confused, the example contains both use cases for easy
	     * comparison.
	     *
	     * ```javascript
	     *
	     * class Vehicle {}
	     *
	     * class Car extends Vehicle {}
	     *
	     * var injectorAlias = Injector.resolveAndCreate([
	     *   Car,
	     *   bind(Vehicle).toAlias(Car)
	     * ]);
	     * var injectorClass = Injector.resolveAndCreate([
	     *   Car,
	     *   bind(Vehicle).toClass(Car)
	     * ]);
	     *
	     * expect(injectorAlias.get(Vehicle)).toBe(injectorAlias.get(Car));
	     * expect(injectorAlias.get(Vehicle) instanceof Car).toBe(true);
	     *
	     * expect(injectorClass.get(Vehicle)).not.toBe(injectorClass.get(Car));
	     * expect(injectorClass.get(Vehicle) instanceof Car).toBe(true);
	     * ```
	     */
	    BindingBuilder.prototype.toAlias = function (aliasToken) { return new Binding(this.token, { toAlias: aliasToken }); };
	    /**
	     * Binds a key to a function which computes the value.
	     *
	     * ## Example
	     *
	     * ```javascript
	     * var injector = Injector.resolveAndCreate([
	     *   bind(Number).toFactory(() => { return 1+2; }}),
	     *   bind(String).toFactory((v) => { return "Value: " + v; }, [Number] })
	     * ]);
	     *
	     * expect(injector.get(Number)).toEqual(3);
	     * expect(injector.get(String)).toEqual('Value: 3');
	     * ```
	     */
	    BindingBuilder.prototype.toFactory = function (factoryFunction, dependencies) {
	        return new Binding(this.token, { toFactory: factoryFunction, deps: dependencies });
	    };
	    /**
	     * Binds a key to a function which computes the value asynchronously.
	     *
	     * ## Example
	     *
	     * ```javascript
	     * var injector = Injector.resolveAndCreate([
	     *   bind(Number).toAsyncFactory(() => {
	     *     return new Promise((resolve) => resolve(1 + 2));
	     *   }),
	     *   bind(String).toFactory((v) => { return "Value: " + v; }, [Number])
	     * ]);
	     *
	     * injector.asyncGet(Number).then((v) => expect(v).toBe(3));
	     * injector.asyncGet(String).then((v) => expect(v).toBe('Value: 3'));
	     * ```
	     *
	     * The interesting thing to note is that event though `Number` has an async factory, the `String`
	     * factory function takes the resolved value. This shows that the {@link Injector} delays
	     * executing of the `String` factory
	     * until after the `Number` is resolved. This can only be done if the `token` is retrieved using
	     * the `asyncGet` API in the {@link Injector}.
	     */
	    BindingBuilder.prototype.toAsyncFactory = function (factoryFunction, dependencies) {
	        return new Binding(this.token, { toAsyncFactory: factoryFunction, deps: dependencies });
	    };
	    return BindingBuilder;
	})();
	exports.BindingBuilder = BindingBuilder;
	function _constructDependencies(factoryFunction, dependencies) {
	    return lang_1.isBlank(dependencies) ?
	        _dependenciesFor(factoryFunction) :
	        collection_1.ListWrapper.map(dependencies, function (t) { return _extractToken(factoryFunction, t); });
	}
	function _dependenciesFor(typeOrFunc) {
	    var params = reflection_1.reflector.parameters(typeOrFunc);
	    if (lang_1.isBlank(params))
	        return [];
	    if (collection_1.ListWrapper.any(params, function (p) { return lang_1.isBlank(p); })) {
	        throw new exceptions_1.NoAnnotationError(typeOrFunc);
	    }
	    return collection_1.ListWrapper.map(params, function (p) { return _extractToken(typeOrFunc, p); });
	}
	function _extractToken(typeOrFunc, annotations) {
	    var depProps = [];
	    var token = null;
	    var optional = false;
	    var lazy = false;
	    var asPromise = false;
	    if (!collection_1.ListWrapper.isList(annotations)) {
	        return _createDependency(annotations, asPromise, lazy, optional, depProps);
	    }
	    for (var i = 0; i < annotations.length; ++i) {
	        var paramAnnotation = annotations[i];
	        if (paramAnnotation instanceof lang_1.Type) {
	            token = paramAnnotation;
	        }
	        else if (paramAnnotation instanceof annotations_impl_1.Inject) {
	            token = paramAnnotation.token;
	        }
	        else if (paramAnnotation instanceof annotations_impl_1.InjectPromise) {
	            token = paramAnnotation.token;
	            asPromise = true;
	        }
	        else if (paramAnnotation instanceof annotations_impl_1.InjectLazy) {
	            token = paramAnnotation.token;
	            lazy = true;
	        }
	        else if (paramAnnotation instanceof annotations_impl_1.Optional) {
	            optional = true;
	        }
	        else if (paramAnnotation instanceof annotations_impl_1.DependencyAnnotation) {
	            if (lang_1.isPresent(paramAnnotation.token)) {
	                token = paramAnnotation.token;
	            }
	            collection_1.ListWrapper.push(depProps, paramAnnotation);
	        }
	    }
	    token = forward_ref_1.resolveForwardRef(token);
	    if (lang_1.isPresent(token)) {
	        return _createDependency(token, asPromise, lazy, optional, depProps);
	    }
	    else {
	        throw new exceptions_1.NoAnnotationError(typeOrFunc);
	    }
	}
	function _createDependency(token, asPromise, lazy, optional, depProps) {
	    return new Dependency(key_1.Key.get(token), asPromise, lazy, optional, depProps);
	}
	exports.__esModule = true;
	//# sourceMappingURL=binding.js.map

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	var collection_1 = __webpack_require__(61);
	var lang_1 = __webpack_require__(60);
	var type_literal_1 = __webpack_require__(111);
	var forward_ref_1 = __webpack_require__(112);
	var type_literal_2 = __webpack_require__(111);
	exports.TypeLiteral = type_literal_2.TypeLiteral;
	// TODO: uncoment `int` once https://github.com/angular/angular/issues/1414 is fixed
	/**
	 * A unique object used for retrieving items from the {@link Injector}.
	 *
	 * Keys have:
	 * - a system-wide unique `id`.
	 * - a `token`, usually the `Type` of the instance.
	 *
	 * Keys are used internally by the {@link Injector} because their system-wide unique `id`s allow the
	 * injector to index in arrays rather than looking up items in maps.
	 *
	 * @exportedAs angular2/di
	 */
	var Key = (function () {
	    /**
	     * @private
	     */
	    function Key(token, id) {
	        if (lang_1.isBlank(token)) {
	            throw new lang_1.BaseException('Token must be defined!');
	        }
	        this.token = token;
	        this.id = id;
	    }
	    Object.defineProperty(Key.prototype, "displayName", {
	        get: function () { return lang_1.stringify(this.token); },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Retrieves a `Key` for a token.
	     */
	    Key.get = function (token) { return _globalKeyRegistry.get(forward_ref_1.resolveForwardRef(token)); };
	    Object.defineProperty(Key, "numberOfKeys", {
	        /**
	         * @returns the number of keys registered in the system.
	         */
	        get: function () { return _globalKeyRegistry.numberOfKeys; },
	        enumerable: true,
	        configurable: true
	    });
	    return Key;
	})();
	exports.Key = Key;
	/**
	 * @private
	 */
	var KeyRegistry = (function () {
	    function KeyRegistry() {
	        this._allKeys = collection_1.MapWrapper.create();
	    }
	    KeyRegistry.prototype.get = function (token) {
	        if (token instanceof Key)
	            return token;
	        // TODO: workaround for https://github.com/Microsoft/TypeScript/issues/3123
	        var theToken = token;
	        if (token instanceof type_literal_1.TypeLiteral) {
	            theToken = token.type;
	        }
	        token = theToken;
	        if (collection_1.MapWrapper.contains(this._allKeys, token)) {
	            return collection_1.MapWrapper.get(this._allKeys, token);
	        }
	        var newKey = new Key(token, Key.numberOfKeys);
	        collection_1.MapWrapper.set(this._allKeys, token, newKey);
	        return newKey;
	    };
	    Object.defineProperty(KeyRegistry.prototype, "numberOfKeys", {
	        get: function () { return collection_1.MapWrapper.size(this._allKeys); },
	        enumerable: true,
	        configurable: true
	    });
	    return KeyRegistry;
	})();
	exports.KeyRegistry = KeyRegistry;
	var _globalKeyRegistry = new KeyRegistry();
	exports.__esModule = true;
	//# sourceMappingURL=key.js.map

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Type literals is a Dart-only feature. This is here only so we can x-compile
	 * to multiple languages.
	 */
	var TypeLiteral = (function () {
	    function TypeLiteral() {
	    }
	    Object.defineProperty(TypeLiteral.prototype, "type", {
	        get: function () { throw new Error("Type literals are only supported in Dart"); },
	        enumerable: true,
	        configurable: true
	    });
	    return TypeLiteral;
	})();
	exports.TypeLiteral = TypeLiteral;
	exports.__esModule = true;
	//# sourceMappingURL=type_literal.js.map

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Allows to refer to references which are not yet defined.
	 *
	 * This situation arises when the key which we need te refer to for the purposes of DI is declared,
	 * but not yet defined.
	 *
	 * ## Example:
	 *
	 * ```
	 * class Door {
	 *   // Incorrect way to refer to a reference which is defined later.
	 *   // This fails because `Lock` is undefined at this point.
	 *   constructor(lock:Lock) { }
	 *
	 *   // Correct way to refer to a reference which is defined later.
	 *   // The reference needs to be captured in a closure.
	 *   constructor(@Inject(forwardRef(() => Lock)) lock:Lock) { }
	 * }
	 *
	 * // Only at this point the lock is defined.
	 * class Lock {
	 * }
	 * ```
	 *
	 * @exportedAs angular2/di
	 */
	function forwardRef(forwardRefFn) {
	    forwardRefFn.__forward_ref__ = forwardRef;
	    return forwardRefFn;
	}
	exports.forwardRef = forwardRef;
	/**
	 * Lazily retrieve the reference value.
	 *
	 * See: {@link forwardRef}
	 *
	 * @exportedAs angular2/di
	 */
	function resolveForwardRef(type) {
	    if (typeof type == 'function' && type.hasOwnProperty('__forward_ref__') &&
	        type.__forward_ref__ === forwardRef) {
	        return type();
	    }
	    else {
	        return type;
	    }
	}
	exports.resolveForwardRef = resolveForwardRef;
	exports.__esModule = true;
	//# sourceMappingURL=forward_ref.js.map

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var collection_1 = __webpack_require__(61);
	var lang_1 = __webpack_require__(60);
	function findFirstClosedCycle(keys) {
	    var res = [];
	    for (var i = 0; i < keys.length; ++i) {
	        if (collection_1.ListWrapper.contains(res, keys[i])) {
	            collection_1.ListWrapper.push(res, keys[i]);
	            return res;
	        }
	        else {
	            collection_1.ListWrapper.push(res, keys[i]);
	        }
	    }
	    return res;
	}
	function constructResolvingPath(keys) {
	    if (keys.length > 1) {
	        var reversed = findFirstClosedCycle(collection_1.ListWrapper.reversed(keys));
	        var tokenStrs = collection_1.ListWrapper.map(reversed, function (k) { return lang_1.stringify(k.token); });
	        return " (" + tokenStrs.join(' -> ') + ")";
	    }
	    else {
	        return "";
	    }
	}
	/**
	 * Base class for all errors arising from misconfigured bindings.
	 *
	 * @exportedAs angular2/di_errors
	 */
	var AbstractBindingError = (function (_super) {
	    __extends(AbstractBindingError, _super);
	    // TODO(tbosch): Can't do key:Key as this results in a circular dependency!
	    function AbstractBindingError(key, constructResolvingMessage) {
	        _super.call(this);
	        this.keys = [key];
	        this.constructResolvingMessage = constructResolvingMessage;
	        this.message = this.constructResolvingMessage(this.keys);
	    }
	    // TODO(tbosch): Can't do key:Key as this results in a circular dependency!
	    AbstractBindingError.prototype.addKey = function (key) {
	        collection_1.ListWrapper.push(this.keys, key);
	        this.message = this.constructResolvingMessage(this.keys);
	    };
	    AbstractBindingError.prototype.toString = function () { return this.message; };
	    return AbstractBindingError;
	})(lang_1.BaseException);
	exports.AbstractBindingError = AbstractBindingError;
	/**
	 * Thrown when trying to retrieve a dependency by `Key` from {@link Injector}, but the
	 * {@link Injector} does not have a {@link Binding} for {@link Key}.
	 *
	 * @exportedAs angular2/di_errors
	 */
	var NoBindingError = (function (_super) {
	    __extends(NoBindingError, _super);
	    // TODO(tbosch): Can't do key:Key as this results in a circular dependency!
	    function NoBindingError(key) {
	        _super.call(this, key, function (keys) {
	            var first = lang_1.stringify(collection_1.ListWrapper.first(keys).token);
	            return "No provider for " + first + "!" + constructResolvingPath(keys);
	        });
	    }
	    return NoBindingError;
	})(AbstractBindingError);
	exports.NoBindingError = NoBindingError;
	/**
	 * Thrown when trying to retrieve an async {@link Binding} using the sync API.
	 *
	 * ## Example
	 *
	 * ```javascript
	 * var injector = Injector.resolveAndCreate([
	 *   bind(Number).toAsyncFactory(() => {
	 *     return new Promise((resolve) => resolve(1 + 2));
	 *   }),
	 *   bind(String).toFactory((v) => { return "Value: " + v; }, [String])
	 * ]);
	 *
	 * injector.asyncGet(String).then((v) => expect(v).toBe('Value: 3'));
	 * expect(() => {
	 *   injector.get(String);
	 * }).toThrowError(AsycBindingError);
	 * ```
	 *
	 * The above example throws because `String` depends on `Number` which is async. If any binding in
	 * the dependency graph is async then the graph can only be retrieved using the `asyncGet` API.
	 *
	 * @exportedAs angular2/di_errors
	 */
	var AsyncBindingError = (function (_super) {
	    __extends(AsyncBindingError, _super);
	    // TODO(tbosch): Can't do key:Key as this results in a circular dependency!
	    function AsyncBindingError(key) {
	        _super.call(this, key, function (keys) {
	            var first = lang_1.stringify(collection_1.ListWrapper.first(keys).token);
	            return "Cannot instantiate " + first + " synchronously. It is provided as a promise!" + constructResolvingPath(keys);
	        });
	    }
	    return AsyncBindingError;
	})(AbstractBindingError);
	exports.AsyncBindingError = AsyncBindingError;
	/**
	 * Thrown when dependencies form a cycle.
	 *
	 * ## Example:
	 *
	 * ```javascript
	 * class A {
	 *   constructor(b:B) {}
	 * }
	 * class B {
	 *   constructor(a:A) {}
	 * }
	 * ```
	 *
	 * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.
	 *
	 * @exportedAs angular2/di_errors
	 */
	var CyclicDependencyError = (function (_super) {
	    __extends(CyclicDependencyError, _super);
	    // TODO(tbosch): Can't do key:Key as this results in a circular dependency!
	    function CyclicDependencyError(key) {
	        _super.call(this, key, function (keys) {
	            return "Cannot instantiate cyclic dependency!" + constructResolvingPath(keys);
	        });
	    }
	    return CyclicDependencyError;
	})(AbstractBindingError);
	exports.CyclicDependencyError = CyclicDependencyError;
	/**
	 * Thrown when a constructing type returns with an Error.
	 *
	 * The `InstantiationError` class contains the original error plus the dependency graph which caused
	 * this object to be instantiated.
	 *
	 * @exportedAs angular2/di_errors
	 */
	var InstantiationError = (function (_super) {
	    __extends(InstantiationError, _super);
	    // TODO(tbosch): Can't do key:Key as this results in a circular dependency!
	    function InstantiationError(cause, key) {
	        _super.call(this, key, function (keys) {
	            var first = lang_1.stringify(collection_1.ListWrapper.first(keys).token);
	            return "Error during instantiation of " + first + "!" + constructResolvingPath(keys) + ". ORIGINAL ERROR: " + cause;
	        });
	        this.cause = cause;
	        this.causeKey = key;
	    }
	    return InstantiationError;
	})(AbstractBindingError);
	exports.InstantiationError = InstantiationError;
	/**
	 * Thrown when an object other then {@link Binding} (or `Type`) is passed to {@link Injector}
	 * creation.
	 *
	 * @exportedAs angular2/di_errors
	 */
	var InvalidBindingError = (function (_super) {
	    __extends(InvalidBindingError, _super);
	    function InvalidBindingError(binding) {
	        _super.call(this);
	        this.message = "Invalid binding - only instances of Binding and Type are allowed, got: " +
	            binding.toString();
	    }
	    InvalidBindingError.prototype.toString = function () { return this.message; };
	    return InvalidBindingError;
	})(lang_1.BaseException);
	exports.InvalidBindingError = InvalidBindingError;
	/**
	 * Thrown when the class has no annotation information.
	 *
	 * Lack of annotation information prevents the {@link Injector} from determining which dependencies
	 * need to be injected into the constructor.
	 *
	 * @exportedAs angular2/di_errors
	 */
	var NoAnnotationError = (function (_super) {
	    __extends(NoAnnotationError, _super);
	    function NoAnnotationError(typeOrFunc) {
	        _super.call(this);
	        this.message = "Cannot resolve all parameters for " + lang_1.stringify(typeOrFunc) + ". " +
	            'Make sure they all have valid type or annotations.';
	    }
	    NoAnnotationError.prototype.toString = function () { return this.message; };
	    return NoAnnotationError;
	})(lang_1.BaseException);
	exports.NoAnnotationError = NoAnnotationError;
	exports.__esModule = true;
	//# sourceMappingURL=exceptions.js.map

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../../typings/es6-promise/es6-promise.d.ts" />
	var collection_1 = __webpack_require__(61);
	var binding_1 = __webpack_require__(109);
	var exceptions_1 = __webpack_require__(113);
	var lang_1 = __webpack_require__(60);
	var async_1 = __webpack_require__(94);
	var key_1 = __webpack_require__(110);
	var forward_ref_1 = __webpack_require__(112);
	var _constructing = new Object();
	var _notFound = new Object();
	var _Waiting = (function () {
	    function _Waiting(promise) {
	        this.promise = promise;
	    }
	    return _Waiting;
	})();
	function _isWaiting(obj) {
	    return obj instanceof _Waiting;
	}
	/**
	 * A dependency injection container used for resolving dependencies.
	 *
	 * An `Injector` is a replacement for a `new` operator, which can automatically resolve the
	 * constructor dependencies.
	 * In typical use, application code asks for the dependencies in the constructor and they are
	 * resolved by the `Injector`.
	 *
	 * ## Example:
	 *
	 * Suppose that we want to inject an `Engine` into class `Car`, we would define it like this:
	 *
	 * ```javascript
	 * class Engine {
	 * }
	 *
	 * class Car {
	 *   constructor(@Inject(Engine) engine) {
	 *   }
	 * }
	 *
	 * ```
	 *
	 * Next we need to write the code that creates and instantiates the `Injector`. We then ask for the
	 * `root` object, `Car`, so that the `Injector` can recursively build all of that object's
	 *dependencies.
	 *
	 * ```javascript
	 * main() {
	 *   var injector = Injector.resolveAndCreate([Car, Engine]);
	 *
	 *   // Get a reference to the `root` object, which will recursively instantiate the tree.
	 *   var car = injector.get(Car);
	 * }
	 * ```
	 * Notice that we don't use the `new` operator because we explicitly want to have the `Injector`
	 * resolve all of the object's dependencies automatically.
	 *
	 * @exportedAs angular2/di
	 */
	var Injector = (function () {
	    /**
	     * @param `bindings` A sparse list of {@link ResolvedBinding}s. See `resolve` for the {@link
	     * Injector}.
	     * @param `parent` Parent Injector or `null` if root Injector.
	     * @param `defaultBindings` Setting to true will auto-create bindings. (Only use with root
	     * injector.)
	     */
	    function Injector(bindings, parent, defaultBindings) {
	        this._bindings = bindings;
	        this._instances = this._createInstances();
	        this._parent = parent;
	        this._defaultBindings = defaultBindings;
	        this._asyncStrategy = new _AsyncInjectorStrategy(this);
	        this._syncStrategy = new _SyncInjectorStrategy(this);
	    }
	    /**
	     * Turns a list of binding definitions into an internal resolved list of resolved bindings.
	     *
	     * A resolution is a process of flattening multiple nested lists and converting individual
	     * bindings into a list of {@link ResolvedBinding}s. The resolution can be cached by `resolve`
	     * for the {@link Injector} for performance-sensitive code.
	     *
	     * @param `bindings` can be a list of `Type`, {@link Binding}, {@link ResolvedBinding}, or a
	     * recursive list of more bindings.
	     *
	     * The returned list is sparse, indexed by `id` for the {@link Key}. It is generally not useful to
	     *application code
	     * other than for passing it to {@link Injector} functions that require resolved binding lists,
	     *such as
	     * `fromResolvedBindings` and `createChildFromResolved`.
	     */
	    Injector.resolve = function (bindings) {
	        var resolvedBindings = resolveBindings(bindings);
	        var flatten = _flattenBindings(resolvedBindings, collection_1.MapWrapper.create());
	        return _createListOfBindings(flatten);
	    };
	    /**
	     * Resolves bindings and creates an injector based on those bindings. This function is slower than
	     * the corresponding `fromResolvedBindings` because it needs to resolve bindings first. See
	     *`resolve`
	     * for the {@link Injector}.
	     *
	     * Prefer `fromResolvedBindings` in performance-critical code that creates lots of injectors.
	     *
	     * @param `bindings` can be a list of `Type`, {@link Binding}, {@link ResolvedBinding}, or a
	     *recursive list of more
	     * bindings.
	     * @param `defaultBindings` Setting to true will auto-create bindings.
	     */
	    Injector.resolveAndCreate = function (bindings, _a) {
	        var _b = (_a === void 0 ? {} : _a).defaultBindings, defaultBindings = _b === void 0 ? false : _b;
	        return new Injector(Injector.resolve(bindings), null, defaultBindings);
	    };
	    /**
	     * Creates an injector from previously resolved bindings. This bypasses resolution and flattening.
	     * This API is the recommended way to construct injectors in performance-sensitive parts.
	     *
	     * @param `bindings` A sparse list of {@link ResolvedBinding}s. See `resolve` for the {@link
	     *Injector}.
	     * @param `defaultBindings` Setting to true will auto-create bindings.
	     */
	    Injector.fromResolvedBindings = function (bindings, _a) {
	        var _b = (_a === void 0 ? {} : _a).defaultBindings, defaultBindings = _b === void 0 ? false : _b;
	        return new Injector(bindings, null, defaultBindings);
	    };
	    Object.defineProperty(Injector.prototype, "parent", {
	        /**
	         * Direct parent of this injector.
	         */
	        get: function () { return this._parent; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Retrieves an instance from the injector.
	     *
	     * @param `token`: usually the `Type` of an object. (Same as the token used while setting up a
	     *binding).
	     * @returns an instance represented by the token. Throws if not found.
	     */
	    Injector.prototype.get = function (token) { return this._getByKey(key_1.Key.get(token), false, false, false); };
	    /**
	     * Retrieves an instance from the injector.
	     *
	     * @param `token`: usually a `Type`. (Same as the token used while setting up a binding).
	     * @returns an instance represented by the token. Returns `null` if not found.
	     */
	    Injector.prototype.getOptional = function (token) { return this._getByKey(key_1.Key.get(token), false, false, true); };
	    /**
	     * Retrieves an instance from the injector asynchronously. Used with asynchronous bindings.
	     *
	     * @param `token`: usually a `Type`. (Same as token used while setting up a binding).
	     * @returns a `Promise` which resolves to the instance represented by the token.
	     */
	    Injector.prototype.asyncGet = function (token) { return this._getByKey(key_1.Key.get(token), true, false, false); };
	    /**
	     * Creates a child injector and loads a new set of bindings into it.
	     *
	     * A resolution is a process of flattening multiple nested lists and converting individual
	     * bindings into a list of {@link ResolvedBinding}s. The resolution can be cached by `resolve`
	     * for the {@link Injector} for performance-sensitive code.
	     *
	     * @param `bindings` can be a list of `Type`, {@link Binding}, {@link ResolvedBinding}, or a
	     * recursive list of more bindings.
	     *
	     */
	    Injector.prototype.resolveAndCreateChild = function (bindings) {
	        return new Injector(Injector.resolve(bindings), this, false);
	    };
	    /**
	     * Creates a child injector and loads a new set of {@link ResolvedBinding}s into it.
	     *
	     * @param `bindings`: A sparse list of {@link ResolvedBinding}s.
	     * See `resolve` for the {@link Injector}.
	     * @returns a new child {@link Injector}.
	     */
	    Injector.prototype.createChildFromResolved = function (bindings) {
	        return new Injector(bindings, this, false);
	    };
	    Injector.prototype._createInstances = function () { return collection_1.ListWrapper.createFixedSize(key_1.Key.numberOfKeys + 1); };
	    Injector.prototype._getByKey = function (key, returnPromise, returnLazy, optional) {
	        var _this = this;
	        if (returnLazy) {
	            return function () { return _this._getByKey(key, returnPromise, false, optional); };
	        }
	        var strategy = returnPromise ? this._asyncStrategy : this._syncStrategy;
	        var instance = strategy.readFromCache(key);
	        if (instance !== _notFound)
	            return instance;
	        instance = strategy.instantiate(key);
	        if (instance !== _notFound)
	            return instance;
	        if (lang_1.isPresent(this._parent)) {
	            return this._parent._getByKey(key, returnPromise, returnLazy, optional);
	        }
	        if (optional) {
	            return null;
	        }
	        else {
	            throw new exceptions_1.NoBindingError(key);
	        }
	    };
	    Injector.prototype._resolveDependencies = function (key, binding, forceAsync) {
	        var _this = this;
	        try {
	            var getDependency = function (d) { return _this._getByKey(d.key, forceAsync || d.asPromise, d.lazy, d.optional); };
	            return collection_1.ListWrapper.map(binding.dependencies, getDependency);
	        }
	        catch (e) {
	            this._clear(key);
	            if (e instanceof exceptions_1.AbstractBindingError)
	                e.addKey(key);
	            throw e;
	        }
	    };
	    Injector.prototype._getInstance = function (key) {
	        if (this._instances.length <= key.id)
	            return null;
	        return collection_1.ListWrapper.get(this._instances, key.id);
	    };
	    Injector.prototype._setInstance = function (key, obj) { collection_1.ListWrapper.set(this._instances, key.id, obj); };
	    Injector.prototype._getBinding = function (key) {
	        var binding = this._bindings.length <= key.id ? null : collection_1.ListWrapper.get(this._bindings, key.id);
	        if (lang_1.isBlank(binding) && this._defaultBindings) {
	            var token = key.token;
	            return binding_1.bind(key.token).toClass(token).resolve();
	        }
	        else {
	            return binding;
	        }
	    };
	    Injector.prototype._markAsConstructing = function (key) { this._setInstance(key, _constructing); };
	    Injector.prototype._clear = function (key) { this._setInstance(key, null); };
	    return Injector;
	})();
	exports.Injector = Injector;
	var _SyncInjectorStrategy = (function () {
	    function _SyncInjectorStrategy(injector) {
	        this.injector = injector;
	    }
	    _SyncInjectorStrategy.prototype.readFromCache = function (key) {
	        if (key.token === Injector) {
	            return this.injector;
	        }
	        var instance = this.injector._getInstance(key);
	        if (instance === _constructing) {
	            throw new exceptions_1.CyclicDependencyError(key);
	        }
	        else if (lang_1.isPresent(instance) && !_isWaiting(instance)) {
	            return instance;
	        }
	        else {
	            return _notFound;
	        }
	    };
	    _SyncInjectorStrategy.prototype.instantiate = function (key) {
	        var binding = this.injector._getBinding(key);
	        if (lang_1.isBlank(binding))
	            return _notFound;
	        if (binding.providedAsPromise)
	            throw new exceptions_1.AsyncBindingError(key);
	        // add a marker so we can detect cyclic dependencies
	        this.injector._markAsConstructing(key);
	        var deps = this.injector._resolveDependencies(key, binding, false);
	        return this._createInstance(key, binding, deps);
	    };
	    _SyncInjectorStrategy.prototype._createInstance = function (key, binding, deps) {
	        try {
	            var instance = lang_1.FunctionWrapper.apply(binding.factory, deps);
	            this.injector._setInstance(key, instance);
	            return instance;
	        }
	        catch (e) {
	            this.injector._clear(key);
	            throw new exceptions_1.InstantiationError(e, key);
	        }
	    };
	    return _SyncInjectorStrategy;
	})();
	var _AsyncInjectorStrategy = (function () {
	    function _AsyncInjectorStrategy(injector) {
	        this.injector = injector;
	    }
	    _AsyncInjectorStrategy.prototype.readFromCache = function (key) {
	        if (key.token === Injector) {
	            return async_1.PromiseWrapper.resolve(this.injector);
	        }
	        var instance = this.injector._getInstance(key);
	        if (instance === _constructing) {
	            throw new exceptions_1.CyclicDependencyError(key);
	        }
	        else if (_isWaiting(instance)) {
	            return instance.promise;
	        }
	        else if (lang_1.isPresent(instance)) {
	            return async_1.PromiseWrapper.resolve(instance);
	        }
	        else {
	            return _notFound;
	        }
	    };
	    _AsyncInjectorStrategy.prototype.instantiate = function (key) {
	        var _this = this;
	        var binding = this.injector._getBinding(key);
	        if (lang_1.isBlank(binding))
	            return _notFound;
	        // add a marker so we can detect cyclic dependencies
	        this.injector._markAsConstructing(key);
	        var deps = this.injector._resolveDependencies(key, binding, true);
	        var depsPromise = async_1.PromiseWrapper.all(deps);
	        var promise = async_1.PromiseWrapper.then(depsPromise, null, function (e, s) { return _this._errorHandler(key, e, s); })
	            .then(function (deps) { return _this._findOrCreate(key, binding, deps); })
	            .then(function (instance) { return _this._cacheInstance(key, instance); });
	        this.injector._setInstance(key, new _Waiting(promise));
	        return promise;
	    };
	    _AsyncInjectorStrategy.prototype._errorHandler = function (key, e, stack) {
	        if (e instanceof exceptions_1.AbstractBindingError)
	            e.addKey(key);
	        return async_1.PromiseWrapper.reject(e, stack);
	    };
	    _AsyncInjectorStrategy.prototype._findOrCreate = function (key, binding, deps) {
	        try {
	            var instance = this.injector._getInstance(key);
	            if (!_isWaiting(instance))
	                return instance;
	            return lang_1.FunctionWrapper.apply(binding.factory, deps);
	        }
	        catch (e) {
	            this.injector._clear(key);
	            throw new exceptions_1.InstantiationError(e, key);
	        }
	    };
	    _AsyncInjectorStrategy.prototype._cacheInstance = function (key, instance) {
	        this.injector._setInstance(key, instance);
	        return instance;
	    };
	    return _AsyncInjectorStrategy;
	})();
	function resolveBindings(bindings) {
	    var resolvedList = collection_1.ListWrapper.createFixedSize(bindings.length);
	    for (var i = 0; i < bindings.length; i++) {
	        var unresolved = forward_ref_1.resolveForwardRef(bindings[i]);
	        var resolved;
	        if (unresolved instanceof binding_1.ResolvedBinding) {
	            resolved = unresolved; // ha-ha! I'm easily amused
	        }
	        else if (unresolved instanceof lang_1.Type) {
	            resolved = binding_1.bind(unresolved).toClass(unresolved).resolve();
	        }
	        else if (unresolved instanceof binding_1.Binding) {
	            resolved = unresolved.resolve();
	        }
	        else if (unresolved instanceof collection_1.List) {
	            resolved = resolveBindings(unresolved);
	        }
	        else if (unresolved instanceof binding_1.BindingBuilder) {
	            throw new exceptions_1.InvalidBindingError(unresolved.token);
	        }
	        else {
	            throw new exceptions_1.InvalidBindingError(unresolved);
	        }
	        resolvedList[i] = resolved;
	    }
	    return resolvedList;
	}
	exports.resolveBindings = resolveBindings;
	function flattenBindings(bindings) {
	    var map = _flattenBindings(bindings, collection_1.MapWrapper.create());
	    var res = collection_1.ListWrapper.create();
	    collection_1.MapWrapper.forEach(map, function (binding, keyId) { return collection_1.ListWrapper.push(res, binding); });
	    return res;
	}
	function _createListOfBindings(flattenedBindings) {
	    var bindings = collection_1.ListWrapper.createFixedSize(key_1.Key.numberOfKeys + 1);
	    collection_1.MapWrapper.forEach(flattenedBindings, function (v, keyId) { return bindings[keyId] = v; });
	    return bindings;
	}
	function _flattenBindings(bindings, res) {
	    collection_1.ListWrapper.forEach(bindings, function (b) {
	        if (b instanceof binding_1.ResolvedBinding) {
	            collection_1.MapWrapper.set(res, b.key.id, b);
	        }
	        else if (b instanceof collection_1.List) {
	            _flattenBindings(b, res);
	        }
	    });
	    return res;
	}
	exports.__esModule = true;
	//# sourceMappingURL=injector.js.map

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 *
	 *
	 * @exportedAs angular2/di
	 */
	var OpaqueToken = (function () {
	    function OpaqueToken(desc) {
	        this._desc = "Token(" + desc + ")";
	    }
	    OpaqueToken.prototype.toString = function () { return this._desc; };
	    return OpaqueToken;
	})();
	exports.OpaqueToken = OpaqueToken;
	exports.__esModule = true;
	//# sourceMappingURL=opaque_token.js.map

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var collection_1 = __webpack_require__(61);
	var lang_1 = __webpack_require__(60);
	var dom_adapter_1 = __webpack_require__(107);
	var generic_browser_adapter_1 = __webpack_require__(117);
	var _attrToPropMap = { 'innerHtml': 'innerHTML', 'readonly': 'readOnly', 'tabindex': 'tabIndex' };
	var DOM_KEY_LOCATION_NUMPAD = 3;
	// Map to convert some key or keyIdentifier values to what will be returned by getEventKey
	var _keyMap = {
	    // The following values are here for cross-browser compatibility and to match the W3C standard
	    // cf http://www.w3.org/TR/DOM-Level-3-Events-key/
	    '\b': 'Backspace',
	    '\t': 'Tab',
	    '\x7F': 'Delete',
	    '\x1B': 'Escape',
	    'Del': 'Delete',
	    'Esc': 'Escape',
	    'Left': 'ArrowLeft',
	    'Right': 'ArrowRight',
	    'Up': 'ArrowUp',
	    'Down': 'ArrowDown',
	    'Menu': 'ContextMenu',
	    'Scroll': 'ScrollLock',
	    'Win': 'OS'
	};
	// There is a bug in Chrome for numeric keypad keys:
	// https://code.google.com/p/chromium/issues/detail?id=155654
	// 1, 2, 3 ... are reported as A, B, C ...
	var _chromeNumKeyPadMap = {
	    'A': '1',
	    'B': '2',
	    'C': '3',
	    'D': '4',
	    'E': '5',
	    'F': '6',
	    'G': '7',
	    'H': '8',
	    'I': '9',
	    'J': '*',
	    'K': '+',
	    'M': '-',
	    'N': '.',
	    'O': '/',
	    '\x60': '0',
	    '\x90': 'NumLock'
	};
	var BrowserDomAdapter = (function (_super) {
	    __extends(BrowserDomAdapter, _super);
	    function BrowserDomAdapter() {
	        _super.apply(this, arguments);
	    }
	    BrowserDomAdapter.makeCurrent = function () { dom_adapter_1.setRootDomAdapter(new BrowserDomAdapter()); };
	    BrowserDomAdapter.prototype.logError = function (error) { window.console.error(error); };
	    Object.defineProperty(BrowserDomAdapter.prototype, "attrToPropMap", {
	        get: function () { return _attrToPropMap; },
	        enumerable: true,
	        configurable: true
	    });
	    BrowserDomAdapter.prototype.query = function (selector) { return document.querySelector(selector); };
	    BrowserDomAdapter.prototype.querySelector = function (el, selector) { return el.querySelector(selector); };
	    BrowserDomAdapter.prototype.querySelectorAll = function (el, selector) { return el.querySelectorAll(selector); };
	    BrowserDomAdapter.prototype.on = function (el, evt, listener) { el.addEventListener(evt, listener, false); };
	    BrowserDomAdapter.prototype.onAndCancel = function (el, evt, listener) {
	        el.addEventListener(evt, listener, false);
	        // Needed to follow Dart's subscription semantic, until fix of
	        // https://code.google.com/p/dart/issues/detail?id=17406
	        return function () {
	            el.removeEventListener(evt, listener, false);
	        };
	    };
	    BrowserDomAdapter.prototype.dispatchEvent = function (el, evt) {
	        el.dispatchEvent(evt);
	    };
	    BrowserDomAdapter.prototype.createMouseEvent = function (eventType) {
	        var evt = new MouseEvent(eventType);
	        evt.initEvent(eventType, true, true);
	        return evt;
	    };
	    BrowserDomAdapter.prototype.createEvent = function (eventType) {
	        return new Event(eventType, true);
	    };
	    BrowserDomAdapter.prototype.getInnerHTML = function (el) {
	        return el.innerHTML;
	    };
	    BrowserDomAdapter.prototype.getOuterHTML = function (el) {
	        return el.outerHTML;
	    };
	    BrowserDomAdapter.prototype.nodeName = function (node) {
	        return node.nodeName;
	    };
	    BrowserDomAdapter.prototype.nodeValue = function (node) {
	        return node.nodeValue;
	    };
	    BrowserDomAdapter.prototype.type = function (node) {
	        return node.type;
	    };
	    BrowserDomAdapter.prototype.content = function (node) {
	        if (this.hasProperty(node, "content")) {
	            return node.content;
	        }
	        else {
	            return node;
	        }
	    };
	    BrowserDomAdapter.prototype.firstChild = function (el) {
	        return el.firstChild;
	    };
	    BrowserDomAdapter.prototype.nextSibling = function (el) {
	        return el.nextSibling;
	    };
	    BrowserDomAdapter.prototype.parentElement = function (el) {
	        return el.parentElement;
	    };
	    BrowserDomAdapter.prototype.childNodes = function (el) {
	        return el.childNodes;
	    };
	    BrowserDomAdapter.prototype.childNodesAsList = function (el) {
	        var childNodes = el.childNodes;
	        var res = collection_1.ListWrapper.createFixedSize(childNodes.length);
	        for (var i = 0; i < childNodes.length; i++) {
	            res[i] = childNodes[i];
	        }
	        return res;
	    };
	    BrowserDomAdapter.prototype.clearNodes = function (el) {
	        for (var i = 0; i < el.childNodes.length; i++) {
	            this.remove(el.childNodes[i]);
	        }
	    };
	    BrowserDomAdapter.prototype.appendChild = function (el, node) {
	        el.appendChild(node);
	    };
	    BrowserDomAdapter.prototype.removeChild = function (el, node) {
	        el.removeChild(node);
	    };
	    BrowserDomAdapter.prototype.replaceChild = function (el, newChild, oldChild) {
	        el.replaceChild(newChild, oldChild);
	    };
	    BrowserDomAdapter.prototype.remove = function (el) {
	        var parent = el.parentNode;
	        parent.removeChild(el);
	        return el;
	    };
	    BrowserDomAdapter.prototype.insertBefore = function (el, node) {
	        el.parentNode.insertBefore(node, el);
	    };
	    BrowserDomAdapter.prototype.insertAllBefore = function (el, nodes) {
	        collection_1.ListWrapper.forEach(nodes, function (n) { el.parentNode.insertBefore(n, el); });
	    };
	    BrowserDomAdapter.prototype.insertAfter = function (el, node) {
	        el.parentNode.insertBefore(node, el.nextSibling);
	    };
	    BrowserDomAdapter.prototype.setInnerHTML = function (el, value) {
	        el.innerHTML = value;
	    };
	    BrowserDomAdapter.prototype.getText = function (el) {
	        return el.textContent;
	    };
	    // TODO(vicb): removed Element type because it does not support StyleElement
	    BrowserDomAdapter.prototype.setText = function (el, value) {
	        el.textContent = value;
	    };
	    BrowserDomAdapter.prototype.getValue = function (el) {
	        return el.value;
	    };
	    BrowserDomAdapter.prototype.setValue = function (el, value) {
	        el.value = value;
	    };
	    BrowserDomAdapter.prototype.getChecked = function (el) {
	        return el.checked;
	    };
	    BrowserDomAdapter.prototype.setChecked = function (el, value) {
	        el.checked = value;
	    };
	    BrowserDomAdapter.prototype.createTemplate = function (html) {
	        var t = document.createElement('template');
	        t.innerHTML = html;
	        return t;
	    };
	    BrowserDomAdapter.prototype.createElement = function (tagName, doc) {
	        if (doc === void 0) { doc = document; }
	        return doc.createElement(tagName);
	    };
	    BrowserDomAdapter.prototype.createTextNode = function (text, doc) {
	        if (doc === void 0) { doc = document; }
	        return doc.createTextNode(text);
	    };
	    BrowserDomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc) {
	        if (doc === void 0) { doc = document; }
	        var el = doc.createElement('SCRIPT');
	        el.setAttribute(attrName, attrValue);
	        return el;
	    };
	    BrowserDomAdapter.prototype.createStyleElement = function (css, doc) {
	        if (doc === void 0) { doc = document; }
	        var style = doc.createElement('STYLE');
	        style.innerText = css;
	        return style;
	    };
	    BrowserDomAdapter.prototype.createShadowRoot = function (el) {
	        return el.createShadowRoot();
	    };
	    BrowserDomAdapter.prototype.getShadowRoot = function (el) {
	        return el.shadowRoot;
	    };
	    BrowserDomAdapter.prototype.getHost = function (el) {
	        return el.host;
	    };
	    BrowserDomAdapter.prototype.clone = function (node) {
	        return node.cloneNode(true);
	    };
	    BrowserDomAdapter.prototype.hasProperty = function (element, name) {
	        return name in element;
	    };
	    BrowserDomAdapter.prototype.getElementsByClassName = function (element, name) {
	        return element.getElementsByClassName(name);
	    };
	    BrowserDomAdapter.prototype.getElementsByTagName = function (element, name) {
	        return element.getElementsByTagName(name);
	    };
	    BrowserDomAdapter.prototype.classList = function (element) {
	        return Array.prototype.slice.call(element.classList, 0);
	    };
	    BrowserDomAdapter.prototype.addClass = function (element, classname) {
	        element.classList.add(classname);
	    };
	    BrowserDomAdapter.prototype.removeClass = function (element, classname) {
	        element.classList.remove(classname);
	    };
	    BrowserDomAdapter.prototype.hasClass = function (element, classname) {
	        return element.classList.contains(classname);
	    };
	    BrowserDomAdapter.prototype.setStyle = function (element, stylename, stylevalue) {
	        element.style[stylename] = stylevalue;
	    };
	    BrowserDomAdapter.prototype.removeStyle = function (element, stylename) {
	        element.style[stylename] = null;
	    };
	    BrowserDomAdapter.prototype.getStyle = function (element, stylename) {
	        return element.style[stylename];
	    };
	    BrowserDomAdapter.prototype.tagName = function (element) {
	        return element.tagName;
	    };
	    BrowserDomAdapter.prototype.attributeMap = function (element) {
	        var res = collection_1.MapWrapper.create();
	        var elAttrs = element.attributes;
	        for (var i = 0; i < elAttrs.length; i++) {
	            var attrib = elAttrs[i];
	            collection_1.MapWrapper.set(res, attrib.name, attrib.value);
	        }
	        return res;
	    };
	    BrowserDomAdapter.prototype.hasAttribute = function (element, attribute) {
	        return element.hasAttribute(attribute);
	    };
	    BrowserDomAdapter.prototype.getAttribute = function (element, attribute) {
	        return element.getAttribute(attribute);
	    };
	    BrowserDomAdapter.prototype.setAttribute = function (element, name, value) {
	        element.setAttribute(name, value);
	    };
	    BrowserDomAdapter.prototype.removeAttribute = function (element, attribute) {
	        return element.removeAttribute(attribute);
	    };
	    BrowserDomAdapter.prototype.templateAwareRoot = function (el) {
	        return this.isTemplateElement(el) ? this.content(el) : el;
	    };
	    BrowserDomAdapter.prototype.createHtmlDocument = function () {
	        return document.implementation.createHTMLDocument('fakeTitle');
	    };
	    BrowserDomAdapter.prototype.defaultDoc = function () {
	        return document;
	    };
	    BrowserDomAdapter.prototype.getBoundingClientRect = function (el) {
	        return el.getBoundingClientRect();
	    };
	    BrowserDomAdapter.prototype.getTitle = function () {
	        return document.title;
	    };
	    BrowserDomAdapter.prototype.setTitle = function (newTitle) {
	        document.title = newTitle;
	    };
	    BrowserDomAdapter.prototype.elementMatches = function (n, selector) {
	        return n instanceof HTMLElement && n.matches(selector);
	    };
	    BrowserDomAdapter.prototype.isTemplateElement = function (el) {
	        return el instanceof HTMLElement && el.nodeName == "TEMPLATE";
	    };
	    BrowserDomAdapter.prototype.isTextNode = function (node) {
	        return node.nodeType === Node.TEXT_NODE;
	    };
	    BrowserDomAdapter.prototype.isCommentNode = function (node) {
	        return node.nodeType === Node.COMMENT_NODE;
	    };
	    BrowserDomAdapter.prototype.isElementNode = function (node) {
	        return node.nodeType === Node.ELEMENT_NODE;
	    };
	    BrowserDomAdapter.prototype.hasShadowRoot = function (node) {
	        return node instanceof HTMLElement && lang_1.isPresent(node.shadowRoot);
	    };
	    BrowserDomAdapter.prototype.isShadowRoot = function (node) {
	        return node instanceof DocumentFragment;
	    };
	    BrowserDomAdapter.prototype.importIntoDoc = function (node) {
	        var toImport = node;
	        if (this.isTemplateElement(node)) {
	            toImport = this.content(node);
	        }
	        return document.importNode(toImport, true);
	    };
	    BrowserDomAdapter.prototype.isPageRule = function (rule) {
	        return rule.type === CSSRule.PAGE_RULE;
	    };
	    BrowserDomAdapter.prototype.isStyleRule = function (rule) {
	        return rule.type === CSSRule.STYLE_RULE;
	    };
	    BrowserDomAdapter.prototype.isMediaRule = function (rule) {
	        return rule.type === CSSRule.MEDIA_RULE;
	    };
	    BrowserDomAdapter.prototype.isKeyframesRule = function (rule) {
	        return rule.type === CSSRule.KEYFRAMES_RULE;
	    };
	    BrowserDomAdapter.prototype.getHref = function (el) {
	        return el.href;
	    };
	    BrowserDomAdapter.prototype.getEventKey = function (event) {
	        var key = event.key;
	        if (lang_1.isBlank(key)) {
	            key = event.keyIdentifier;
	            // keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and
	            // Safari
	            // cf
	            // http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces
	            if (lang_1.isBlank(key)) {
	                return 'Unidentified';
	            }
	            if (key.startsWith('U+')) {
	                key = String.fromCharCode(parseInt(key.substring(2), 16));
	                if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {
	                    // There is a bug in Chrome for numeric keypad keys:
	                    // https://code.google.com/p/chromium/issues/detail?id=155654
	                    // 1, 2, 3 ... are reported as A, B, C ...
	                    key = _chromeNumKeyPadMap[key];
	                }
	            }
	        }
	        if (_keyMap.hasOwnProperty(key)) {
	            key = _keyMap[key];
	        }
	        return key;
	    };
	    BrowserDomAdapter.prototype.getGlobalEventTarget = function (target) {
	        if (target == "window") {
	            return window;
	        }
	        else if (target == "document") {
	            return document;
	        }
	        else if (target == "body") {
	            return document.body;
	        }
	    };
	    BrowserDomAdapter.prototype.getHistory = function () {
	        return window.history;
	    };
	    BrowserDomAdapter.prototype.getLocation = function () {
	        return window.location;
	    };
	    BrowserDomAdapter.prototype.getBaseHref = function () {
	        return relativePath(document.baseURI);
	    };
	    return BrowserDomAdapter;
	})(generic_browser_adapter_1.GenericBrowserDomAdapter);
	exports.BrowserDomAdapter = BrowserDomAdapter;
	// based on urlUtils.js in AngularJS 1
	var urlParsingNode = null;
	function relativePath(url) {
	    if (lang_1.isBlank(urlParsingNode)) {
	        urlParsingNode = document.createElement("a");
	    }
	    urlParsingNode.setAttribute('href', url);
	    return (urlParsingNode.pathname.charAt(0) === '/') ? urlParsingNode.pathname :
	        '/' + urlParsingNode.pathname;
	}
	exports.__esModule = true;
	//# sourceMappingURL=browser_adapter.js.map

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var collection_1 = __webpack_require__(61);
	var lang_1 = __webpack_require__(60);
	var dom_adapter_1 = __webpack_require__(107);
	/**
	 * Provides DOM operations in any browser environment.
	 */
	var GenericBrowserDomAdapter = (function (_super) {
	    __extends(GenericBrowserDomAdapter, _super);
	    function GenericBrowserDomAdapter() {
	        _super.apply(this, arguments);
	    }
	    GenericBrowserDomAdapter.prototype.getDistributedNodes = function (el) { return el.getDistributedNodes(); };
	    GenericBrowserDomAdapter.prototype.resolveAndSetHref = function (el, baseUrl, href) {
	        el.href = href == null ? baseUrl : baseUrl + '/../' + href;
	    };
	    GenericBrowserDomAdapter.prototype.cssToRules = function (css) {
	        var style = this.createStyleElement(css);
	        this.appendChild(this.defaultDoc().head, style);
	        var rules = collection_1.ListWrapper.create();
	        if (lang_1.isPresent(style.sheet)) {
	            // TODO(sorvell): Firefox throws when accessing the rules of a stylesheet
	            // with an @import
	            // https://bugzilla.mozilla.org/show_bug.cgi?id=625013
	            try {
	                var rawRules = style.sheet.cssRules;
	                rules = collection_1.ListWrapper.createFixedSize(rawRules.length);
	                for (var i = 0; i < rawRules.length; i++) {
	                    rules[i] = rawRules[i];
	                }
	            }
	            catch (e) {
	            }
	        }
	        else {
	        }
	        this.remove(style);
	        return rules;
	    };
	    GenericBrowserDomAdapter.prototype.supportsDOMEvents = function () { return true; };
	    GenericBrowserDomAdapter.prototype.supportsNativeShadowDOM = function () { return lang_1.isFunction(this.defaultDoc().body.createShadowRoot); };
	    return GenericBrowserDomAdapter;
	})(dom_adapter_1.DomAdapter);
	exports.GenericBrowserDomAdapter = GenericBrowserDomAdapter;
	exports.__esModule = true;
	//# sourceMappingURL=generic_browser_adapter.js.map

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(108);
	var lang_1 = __webpack_require__(60);
	var async_1 = __webpack_require__(94);
	var collection_1 = __webpack_require__(61);
	var directive_resolver_1 = __webpack_require__(127);
	var view_ref_1 = __webpack_require__(123);
	var element_injector_1 = __webpack_require__(119);
	var template_resolver_1 = __webpack_require__(135);
	var component_url_mapper_1 = __webpack_require__(136);
	var proto_view_factory_1 = __webpack_require__(137);
	var url_resolver_1 = __webpack_require__(138);
	var renderApi = __webpack_require__(122);
	/**
	 * Cache that stores the AppProtoView of the template of a component.
	 * Used to prevent duplicate work and resolve cyclic dependencies.
	 */
	var CompilerCache = (function () {
	    function CompilerCache() {
	        this._cache = collection_1.MapWrapper.create();
	    }
	    CompilerCache.prototype.set = function (component, protoView) {
	        collection_1.MapWrapper.set(this._cache, component, protoView);
	    };
	    CompilerCache.prototype.get = function (component) {
	        var result = collection_1.MapWrapper.get(this._cache, component);
	        return lang_1.normalizeBlank(result);
	    };
	    CompilerCache.prototype.clear = function () { collection_1.MapWrapper.clear(this._cache); };
	    CompilerCache = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], CompilerCache);
	    return CompilerCache;
	})();
	exports.CompilerCache = CompilerCache;
	/**
	 * @exportedAs angular2/view
	 */
	var Compiler = (function () {
	    function Compiler(reader, cache, templateResolver, componentUrlMapper, urlResolver, render, protoViewFactory) {
	        this._reader = reader;
	        this._compilerCache = cache;
	        this._compiling = collection_1.MapWrapper.create();
	        this._templateResolver = templateResolver;
	        this._componentUrlMapper = componentUrlMapper;
	        this._urlResolver = urlResolver;
	        this._appUrl = urlResolver.resolve(null, './');
	        this._render = render;
	        this._protoViewFactory = protoViewFactory;
	    }
	    Compiler.prototype._bindDirective = function (directiveTypeOrBinding) {
	        if (directiveTypeOrBinding instanceof element_injector_1.DirectiveBinding) {
	            return directiveTypeOrBinding;
	        }
	        else if (directiveTypeOrBinding instanceof di_1.Binding) {
	            var annotation = this._reader.resolve(directiveTypeOrBinding.token);
	            return element_injector_1.DirectiveBinding.createFromBinding(directiveTypeOrBinding, annotation);
	        }
	        else {
	            var annotation = this._reader.resolve(directiveTypeOrBinding);
	            return element_injector_1.DirectiveBinding.createFromType(directiveTypeOrBinding, annotation);
	        }
	    };
	    // Create a hostView as if the compiler encountered <hostcmp></hostcmp>.
	    // Used for bootstrapping.
	    Compiler.prototype.compileInHost = function (componentTypeOrBinding) {
	        var _this = this;
	        var componentBinding = this._bindDirective(componentTypeOrBinding);
	        Compiler._assertTypeIsComponent(componentBinding);
	        var directiveMetadata = componentBinding.metadata;
	        return this._render.compileHost(directiveMetadata)
	            .then(function (hostRenderPv) {
	            return _this._compileNestedProtoViews(componentBinding, hostRenderPv, [componentBinding]);
	        })
	            .then(function (appProtoView) { return new view_ref_1.ProtoViewRef(appProtoView); });
	    };
	    Compiler.prototype.compile = function (component) {
	        var componentBinding = this._bindDirective(component);
	        Compiler._assertTypeIsComponent(componentBinding);
	        var pvOrPromise = this._compile(componentBinding);
	        var pvPromise = async_1.PromiseWrapper.isPromise(pvOrPromise) ? pvOrPromise :
	            async_1.PromiseWrapper.resolve(pvOrPromise);
	        return pvPromise.then(function (appProtoView) { return new view_ref_1.ProtoViewRef(appProtoView); });
	    };
	    Compiler.prototype._compile = function (componentBinding) {
	        var _this = this;
	        var component = componentBinding.key.token;
	        var protoView = this._compilerCache.get(component);
	        if (lang_1.isPresent(protoView)) {
	            // The component has already been compiled into an AppProtoView,
	            // returns a plain AppProtoView, not wrapped inside of a Promise.
	            // Needed for recursive components.
	            return protoView;
	        }
	        var pvPromise = collection_1.MapWrapper.get(this._compiling, component);
	        if (lang_1.isPresent(pvPromise)) {
	            // The component is already being compiled, attach to the existing Promise
	            // instead of re-compiling the component.
	            // It happens when a template references a component multiple times.
	            return pvPromise;
	        }
	        var template = this._templateResolver.resolve(component);
	        if (lang_1.isBlank(template)) {
	            return null;
	        }
	        var directives = this._flattenDirectives(template);
	        for (var i = 0; i < directives.length; i++) {
	            if (!Compiler._isValidDirective(directives[i])) {
	                throw new lang_1.BaseException("Unexpected directive value '" + lang_1.stringify(directives[i]) + "' on the View of component '" + lang_1.stringify(component) + "'");
	            }
	        }
	        var boundDirectives = collection_1.ListWrapper.map(directives, function (directive) { return _this._bindDirective(directive); });
	        var renderTemplate = this._buildRenderTemplate(component, template, boundDirectives);
	        pvPromise =
	            this._render.compile(renderTemplate)
	                .then(function (renderPv) {
	                return _this._compileNestedProtoViews(componentBinding, renderPv, boundDirectives);
	            });
	        collection_1.MapWrapper.set(this._compiling, component, pvPromise);
	        return pvPromise;
	    };
	    Compiler.prototype._compileNestedProtoViews = function (componentBinding, renderPv, directives) {
	        var _this = this;
	        var protoViews = this._protoViewFactory.createAppProtoViews(componentBinding, renderPv, directives);
	        var protoView = protoViews[0];
	        // TODO(tbosch): we should be caching host protoViews as well!
	        // -> need a separate cache for this...
	        if (renderPv.type === renderApi.ProtoViewDto.COMPONENT_VIEW_TYPE &&
	            lang_1.isPresent(componentBinding)) {
	            // Populate the cache before compiling the nested components,
	            // so that components can reference themselves in their template.
	            var component = componentBinding.key.token;
	            this._compilerCache.set(component, protoView);
	            collection_1.MapWrapper.delete(this._compiling, component);
	        }
	        var nestedPVPromises = [];
	        collection_1.ListWrapper.forEach(this._collectComponentElementBinders(protoViews), function (elementBinder) {
	            var nestedComponent = elementBinder.componentDirective;
	            var elementBinderDone = function (nestedPv) {
	                elementBinder.nestedProtoView = nestedPv;
	            };
	            var nestedCall = _this._compile(nestedComponent);
	            if (async_1.PromiseWrapper.isPromise(nestedCall)) {
	                collection_1.ListWrapper.push(nestedPVPromises, nestedCall.then(elementBinderDone));
	            }
	            else if (lang_1.isPresent(nestedCall)) {
	                elementBinderDone(nestedCall);
	            }
	        });
	        if (nestedPVPromises.length > 0) {
	            return async_1.PromiseWrapper.all(nestedPVPromises).then(function (_) { return protoView; });
	        }
	        else {
	            return protoView;
	        }
	    };
	    Compiler.prototype._collectComponentElementBinders = function (protoViews) {
	        var componentElementBinders = [];
	        collection_1.ListWrapper.forEach(protoViews, function (protoView) {
	            collection_1.ListWrapper.forEach(protoView.elementBinders, function (elementBinder) {
	                if (lang_1.isPresent(elementBinder.componentDirective)) {
	                    collection_1.ListWrapper.push(componentElementBinders, elementBinder);
	                }
	            });
	        });
	        return componentElementBinders;
	    };
	    Compiler.prototype._buildRenderTemplate = function (component, view, directives) {
	        var componentUrl = this._urlResolver.resolve(this._appUrl, this._componentUrlMapper.getUrl(component));
	        var templateAbsUrl = null;
	        if (lang_1.isPresent(view.templateUrl)) {
	            templateAbsUrl = this._urlResolver.resolve(componentUrl, view.templateUrl);
	        }
	        else if (lang_1.isPresent(view.template)) {
	            // Note: If we have an inline template, we also need to send
	            // the url for the component to the render so that it
	            // is able to resolve urls in stylesheets.
	            templateAbsUrl = componentUrl;
	        }
	        return new renderApi.ViewDefinition({
	            componentId: lang_1.stringify(component),
	            absUrl: templateAbsUrl, template: view.template,
	            directives: collection_1.ListWrapper.map(directives, function (directiveBinding) { return directiveBinding.metadata; })
	        });
	    };
	    Compiler.prototype._flattenDirectives = function (template) {
	        if (lang_1.isBlank(template.directives))
	            return [];
	        var directives = [];
	        this._flattenList(template.directives, directives);
	        return directives;
	    };
	    Compiler.prototype._flattenList = function (tree, out) {
	        for (var i = 0; i < tree.length; i++) {
	            var item = di_1.resolveForwardRef(tree[i]);
	            if (collection_1.ListWrapper.isList(item)) {
	                this._flattenList(item, out);
	            }
	            else {
	                collection_1.ListWrapper.push(out, item);
	            }
	        }
	    };
	    Compiler._isValidDirective = function (value) {
	        return lang_1.isPresent(value) && (value instanceof lang_1.Type || value instanceof di_1.Binding);
	    };
	    Compiler._assertTypeIsComponent = function (directiveBinding) {
	        if (directiveBinding.metadata.type !== renderApi.DirectiveMetadata.COMPONENT_TYPE) {
	            throw new lang_1.BaseException("Could not load '" + lang_1.stringify(directiveBinding.key.token) + "' because it is not a component.");
	        }
	    };
	    Compiler = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [directive_resolver_1.DirectiveResolver, CompilerCache, template_resolver_1.TemplateResolver, component_url_mapper_1.ComponentUrlMapper, url_resolver_1.UrlResolver, renderApi.RenderCompiler, proto_view_factory_1.ProtoViewFactory])
	    ], Compiler);
	    return Compiler;
	})();
	exports.Compiler = Compiler;
	exports.__esModule = true;
	//# sourceMappingURL=compiler.js.map

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var lang_1 = __webpack_require__(60);
	var async_1 = __webpack_require__(94);
	var collection_1 = __webpack_require__(61);
	var di_1 = __webpack_require__(108);
	var visibility_1 = __webpack_require__(102);
	var di_2 = __webpack_require__(120);
	var avmModule = __webpack_require__(121);
	var view_container_ref_1 = __webpack_require__(130);
	var element_ref_1 = __webpack_require__(131);
	var view_ref_1 = __webpack_require__(123);
	var annotations_1 = __webpack_require__(128);
	var change_detection_1 = __webpack_require__(58);
	var query_list_1 = __webpack_require__(133);
	var reflection_1 = __webpack_require__(68);
	var api_1 = __webpack_require__(122);
	var _MAX_DIRECTIVE_CONSTRUCTION_COUNTER = 10;
	var _undefined = new Object();
	var _staticKeys;
	var StaticKeys = (function () {
	    function StaticKeys() {
	        // TODO: vsavkin Key.annotate(Key.get(AppView), 'static')
	        this.viewManagerId = di_1.Key.get(avmModule.AppViewManager).id;
	        this.protoViewId = di_1.Key.get(view_ref_1.ProtoViewRef).id;
	        this.viewContainerId = di_1.Key.get(view_container_ref_1.ViewContainerRef).id;
	        this.changeDetectorRefId = di_1.Key.get(change_detection_1.ChangeDetectorRef).id;
	        this.elementRefId = di_1.Key.get(element_ref_1.ElementRef).id;
	    }
	    StaticKeys.instance = function () {
	        if (lang_1.isBlank(_staticKeys))
	            _staticKeys = new StaticKeys();
	        return _staticKeys;
	    };
	    return StaticKeys;
	})();
	var TreeNode = (function () {
	    function TreeNode(parent) {
	        this._head = null;
	        this._tail = null;
	        this._next = null;
	        if (lang_1.isPresent(parent))
	            parent.addChild(this);
	    }
	    TreeNode.prototype._assertConsistency = function () {
	        this._assertHeadBeforeTail();
	        this._assertTailReachable();
	        this._assertPresentInParentList();
	    };
	    TreeNode.prototype._assertHeadBeforeTail = function () {
	        if (lang_1.isBlank(this._tail) && lang_1.isPresent(this._head))
	            throw new lang_1.BaseException('null tail but non-null head');
	    };
	    TreeNode.prototype._assertTailReachable = function () {
	        if (lang_1.isBlank(this._tail))
	            return;
	        if (lang_1.isPresent(this._tail._next))
	            throw new lang_1.BaseException('node after tail');
	        var p = this._head;
	        while (lang_1.isPresent(p) && p != this._tail)
	            p = p._next;
	        if (lang_1.isBlank(p) && lang_1.isPresent(this._tail))
	            throw new lang_1.BaseException('tail not reachable.');
	    };
	    TreeNode.prototype._assertPresentInParentList = function () {
	        var p = this._parent;
	        if (lang_1.isBlank(p)) {
	            return;
	        }
	        var cur = p._head;
	        while (lang_1.isPresent(cur) && cur != this)
	            cur = cur._next;
	        if (lang_1.isBlank(cur))
	            throw new lang_1.BaseException('node not reachable through parent.');
	    };
	    /**
	     * Adds a child to the parent node. The child MUST NOT be a part of a tree.
	     */
	    TreeNode.prototype.addChild = function (child) {
	        if (lang_1.isPresent(this._tail)) {
	            this._tail._next = child;
	            this._tail = child;
	        }
	        else {
	            this._tail = this._head = child;
	        }
	        child._next = null;
	        child._parent = this;
	        this._assertConsistency();
	    };
	    /**
	     * Adds a child to the parent node after a given sibling.
	     * The child MUST NOT be a part of a tree and the sibling must be present.
	     */
	    TreeNode.prototype.addChildAfter = function (child, prevSibling) {
	        this._assertConsistency();
	        if (lang_1.isBlank(prevSibling)) {
	            var prevHead = this._head;
	            this._head = child;
	            child._next = prevHead;
	            if (lang_1.isBlank(this._tail))
	                this._tail = child;
	        }
	        else if (lang_1.isBlank(prevSibling._next)) {
	            this.addChild(child);
	            return;
	        }
	        else {
	            prevSibling._assertPresentInParentList();
	            child._next = prevSibling._next;
	            prevSibling._next = child;
	        }
	        child._parent = this;
	        this._assertConsistency();
	    };
	    /**
	     * Detaches a node from the parent's tree.
	     */
	    TreeNode.prototype.remove = function () {
	        this._assertConsistency();
	        if (lang_1.isBlank(this.parent))
	            return;
	        var nextSibling = this._next;
	        var prevSibling = this._findPrev();
	        if (lang_1.isBlank(prevSibling)) {
	            this.parent._head = this._next;
	        }
	        else {
	            prevSibling._next = this._next;
	        }
	        if (lang_1.isBlank(nextSibling)) {
	            this._parent._tail = prevSibling;
	        }
	        this._parent._assertConsistency();
	        this._parent = null;
	        this._next = null;
	        this._assertConsistency();
	    };
	    /**
	     * Finds a previous sibling or returns null if first child.
	     * Assumes the node has a parent.
	     * TODO(rado): replace with DoublyLinkedList to avoid O(n) here.
	     */
	    TreeNode.prototype._findPrev = function () {
	        var node = this.parent._head;
	        if (node == this)
	            return null;
	        while (node._next !== this)
	            node = node._next;
	        return node;
	    };
	    Object.defineProperty(TreeNode.prototype, "parent", {
	        get: function () { return this._parent; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeNode.prototype, "children", {
	        // TODO(rado): replace with a function call, does too much work for a getter.
	        get: function () {
	            var res = [];
	            var child = this._head;
	            while (child != null) {
	                collection_1.ListWrapper.push(res, child);
	                child = child._next;
	            }
	            return res;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return TreeNode;
	})();
	exports.TreeNode = TreeNode;
	var DependencyWithVisibility = (function (_super) {
	    __extends(DependencyWithVisibility, _super);
	    function DependencyWithVisibility(key, asPromise, lazy, optional, properties, visibility) {
	        _super.call(this, key, asPromise, lazy, optional, properties);
	        this.visibility = visibility;
	    }
	    DependencyWithVisibility.createFrom = function (d) {
	        return new DependencyWithVisibility(d.key, d.asPromise, d.lazy, d.optional, d.properties, DependencyWithVisibility._visibility(d.properties));
	    };
	    DependencyWithVisibility._visibility = function (properties) {
	        if (properties.length == 0)
	            return visibility_1.self;
	        var p = collection_1.ListWrapper.find(properties, function (p) { return p instanceof visibility_1.Visibility; });
	        return lang_1.isPresent(p) ? p : visibility_1.self;
	    };
	    return DependencyWithVisibility;
	})(di_1.Dependency);
	exports.DependencyWithVisibility = DependencyWithVisibility;
	var DirectiveDependency = (function (_super) {
	    __extends(DirectiveDependency, _super);
	    function DirectiveDependency(key, asPromise, lazy, optional, properties, visibility, attributeName, queryDirective) {
	        _super.call(this, key, asPromise, lazy, optional, properties, visibility);
	        this.attributeName = attributeName;
	        this.queryDirective = queryDirective;
	        this._verify();
	    }
	    DirectiveDependency.prototype._verify = function () {
	        var count = 0;
	        if (lang_1.isPresent(this.queryDirective))
	            count++;
	        if (lang_1.isPresent(this.attributeName))
	            count++;
	        if (count > 1)
	            throw new lang_1.BaseException('A directive injectable can contain only one of the following @Attribute or @Query.');
	    };
	    DirectiveDependency.createFrom = function (d) {
	        return new DirectiveDependency(d.key, d.asPromise, d.lazy, d.optional, d.properties, DependencyWithVisibility._visibility(d.properties), DirectiveDependency._attributeName(d.properties), DirectiveDependency._query(d.properties));
	    };
	    DirectiveDependency._attributeName = function (properties) {
	        var p = collection_1.ListWrapper.find(properties, function (p) { return p instanceof di_2.Attribute; });
	        return lang_1.isPresent(p) ? p.attributeName : null;
	    };
	    DirectiveDependency._query = function (properties) {
	        var p = collection_1.ListWrapper.find(properties, function (p) { return p instanceof di_2.Query; });
	        return lang_1.isPresent(p) ? di_1.resolveForwardRef(p.directive) : null;
	    };
	    return DirectiveDependency;
	})(DependencyWithVisibility);
	exports.DirectiveDependency = DirectiveDependency;
	var DirectiveBinding = (function (_super) {
	    __extends(DirectiveBinding, _super);
	    function DirectiveBinding(key, factory, dependencies, providedAsPromise, resolvedAppInjectables, resolvedHostInjectables, resolvedViewInjectables, metadata) {
	        _super.call(this, key, factory, dependencies, providedAsPromise);
	        this.resolvedAppInjectables = resolvedAppInjectables;
	        this.resolvedHostInjectables = resolvedHostInjectables;
	        this.resolvedViewInjectables = resolvedViewInjectables;
	        this.metadata = metadata;
	    }
	    Object.defineProperty(DirectiveBinding.prototype, "callOnDestroy", {
	        get: function () { return this.metadata.callOnDestroy; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DirectiveBinding.prototype, "callOnChange", {
	        get: function () { return this.metadata.callOnChange; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DirectiveBinding.prototype, "callOnAllChangesDone", {
	        get: function () { return this.metadata.callOnAllChangesDone; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DirectiveBinding.prototype, "displayName", {
	        get: function () { return this.key.displayName; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DirectiveBinding.prototype, "eventEmitters", {
	        get: function () {
	            return lang_1.isPresent(this.metadata) && lang_1.isPresent(this.metadata.events) ? this.metadata.events : [];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DirectiveBinding.prototype, "hostActions", {
	        get: function () {
	            return lang_1.isPresent(this.metadata) && lang_1.isPresent(this.metadata.hostActions) ?
	                this.metadata.hostActions :
	                collection_1.MapWrapper.create();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DirectiveBinding.prototype, "changeDetection", {
	        get: function () { return this.metadata.changeDetection; },
	        enumerable: true,
	        configurable: true
	    });
	    DirectiveBinding.createFromBinding = function (binding, ann) {
	        if (lang_1.isBlank(ann)) {
	            ann = new annotations_1.Directive();
	        }
	        var rb = binding.resolve();
	        var deps = collection_1.ListWrapper.map(rb.dependencies, DirectiveDependency.createFrom);
	        var resolvedAppInjectables = ann instanceof annotations_1.Component && lang_1.isPresent(ann.appInjector) ?
	            di_1.Injector.resolve(ann.appInjector) :
	            [];
	        var resolvedHostInjectables = lang_1.isPresent(ann.hostInjector) ? di_1.resolveBindings(ann.hostInjector) : [];
	        var resolvedViewInjectables = ann instanceof annotations_1.Component && lang_1.isPresent(ann.viewInjector) ?
	            di_1.resolveBindings(ann.viewInjector) :
	            [];
	        var metadata = new api_1.DirectiveMetadata({
	            id: lang_1.stringify(rb.key.token),
	            type: ann instanceof
	                annotations_1.Component ? api_1.DirectiveMetadata.COMPONENT_TYPE : api_1.DirectiveMetadata.DIRECTIVE_TYPE,
	            selector: ann.selector,
	            compileChildren: ann.compileChildren,
	            events: ann.events,
	            hostListeners: lang_1.isPresent(ann.hostListeners) ? collection_1.MapWrapper.createFromStringMap(ann.hostListeners) : null,
	            hostProperties: lang_1.isPresent(ann.hostProperties) ? collection_1.MapWrapper.createFromStringMap(ann.hostProperties) : null,
	            hostAttributes: lang_1.isPresent(ann.hostAttributes) ? collection_1.MapWrapper.createFromStringMap(ann.hostAttributes) : null,
	            hostActions: lang_1.isPresent(ann.hostActions) ? collection_1.MapWrapper.createFromStringMap(ann.hostActions) :
	                null,
	            properties: lang_1.isPresent(ann.properties) ? collection_1.MapWrapper.createFromStringMap(ann.properties) : null,
	            readAttributes: DirectiveBinding._readAttributes(deps),
	            callOnDestroy: ann.hasLifecycleHook(annotations_1.onDestroy),
	            callOnChange: ann.hasLifecycleHook(annotations_1.onChange),
	            callOnAllChangesDone: ann.hasLifecycleHook(annotations_1.onAllChangesDone),
	            changeDetection: ann instanceof
	                annotations_1.Component ? ann.changeDetection : null
	        });
	        return new DirectiveBinding(rb.key, rb.factory, deps, rb.providedAsPromise, resolvedAppInjectables, resolvedHostInjectables, resolvedViewInjectables, metadata);
	    };
	    DirectiveBinding._readAttributes = function (deps) {
	        var readAttributes = [];
	        collection_1.ListWrapper.forEach(deps, function (dep) {
	            if (lang_1.isPresent(dep.attributeName)) {
	                collection_1.ListWrapper.push(readAttributes, dep.attributeName);
	            }
	        });
	        return readAttributes;
	    };
	    DirectiveBinding.createFromType = function (type, annotation) {
	        var binding = new di_1.Binding(type, { toClass: type });
	        return DirectiveBinding.createFromBinding(binding, annotation);
	    };
	    return DirectiveBinding;
	})(di_1.ResolvedBinding);
	exports.DirectiveBinding = DirectiveBinding;
	// TODO(rado): benchmark and consider rolling in as ElementInjector fields.
	var PreBuiltObjects = (function () {
	    function PreBuiltObjects(viewManager, view, protoView) {
	        this.viewManager = viewManager;
	        this.view = view;
	        this.protoView = protoView;
	    }
	    return PreBuiltObjects;
	})();
	exports.PreBuiltObjects = PreBuiltObjects;
	var EventEmitterAccessor = (function () {
	    function EventEmitterAccessor(eventName, getter) {
	        this.eventName = eventName;
	        this.getter = getter;
	    }
	    EventEmitterAccessor.prototype.subscribe = function (view, boundElementIndex, directive) {
	        var _this = this;
	        var eventEmitter = this.getter(directive);
	        return async_1.ObservableWrapper.subscribe(eventEmitter, function (eventObj) { return view.triggerEventHandlers(_this.eventName, eventObj, boundElementIndex); });
	    };
	    return EventEmitterAccessor;
	})();
	exports.EventEmitterAccessor = EventEmitterAccessor;
	var HostActionAccessor = (function () {
	    function HostActionAccessor(actionExpression, getter) {
	        this.actionExpression = actionExpression;
	        this.getter = getter;
	    }
	    HostActionAccessor.prototype.subscribe = function (view, boundElementIndex, directive) {
	        var _this = this;
	        var eventEmitter = this.getter(directive);
	        return async_1.ObservableWrapper.subscribe(eventEmitter, function (actionObj) { return view.callAction(boundElementIndex, _this.actionExpression, actionObj); });
	    };
	    return HostActionAccessor;
	})();
	exports.HostActionAccessor = HostActionAccessor;
	var LIGHT_DOM = 1;
	var SHADOW_DOM = 2;
	var LIGHT_DOM_AND_SHADOW_DOM = 3;
	var BindingData = (function () {
	    function BindingData(binding, visibility) {
	        this.binding = binding;
	        this.visibility = visibility;
	    }
	    BindingData.prototype.getKeyId = function () { return this.binding.key.id; };
	    BindingData.prototype.createEventEmitterAccessors = function () {
	        if (!(this.binding instanceof DirectiveBinding))
	            return [];
	        var db = this.binding;
	        return collection_1.ListWrapper.map(db.eventEmitters, function (eventName) { return new EventEmitterAccessor(eventName, reflection_1.reflector.getter(eventName)); });
	    };
	    BindingData.prototype.createHostActionAccessors = function () {
	        if (!(this.binding instanceof DirectiveBinding))
	            return [];
	        var res = [];
	        var db = this.binding;
	        collection_1.MapWrapper.forEach(db.hostActions, function (actionExpression, actionName) {
	            collection_1.ListWrapper.push(res, new HostActionAccessor(actionExpression, reflection_1.reflector.getter(actionName)));
	        });
	        return res;
	    };
	    return BindingData;
	})();
	exports.BindingData = BindingData;
	/**

	Difference between di.Injector and ElementInjector

	di.Injector:
	 - imperative based (can create child injectors imperativly)
	 - Lazy loading of code
	 - Component/App Level services which are usually not DOM Related.


	ElementInjector:
	  - ProtoBased (Injector structure fixed at compile time)
	  - understands @Ancestor, @Parent, @Child, @Descendent
	  - Fast
	  - Query mechanism for children
	  - 1:1 to DOM structure.

	 PERF BENCHMARK:
	http://www.williambrownstreet.net/blog/2014/04/faster-angularjs-rendering-angularjs-and-reactjs/
	 */
	var ProtoElementInjector = (function () {
	    function ProtoElementInjector(parent, index, bd, distanceToParent, firstBindingIsComponent) {
	        this.parent = parent;
	        this.index = index;
	        this.distanceToParent = distanceToParent;
	        this.exportComponent = false;
	        this.exportElement = false;
	        this._firstBindingIsComponent = firstBindingIsComponent;
	        this._binding0 = null;
	        this._keyId0 = null;
	        this._visibility0 = null;
	        this._binding1 = null;
	        this._keyId1 = null;
	        this._visibility1 = null;
	        this._binding2 = null;
	        this._keyId2 = null;
	        this._visibility2 = null;
	        this._binding3 = null;
	        this._keyId3 = null;
	        this._visibility3 = null;
	        this._binding4 = null;
	        this._keyId4 = null;
	        this._visibility4 = null;
	        this._binding5 = null;
	        this._keyId5 = null;
	        this._visibility5 = null;
	        this._binding6 = null;
	        this._keyId6 = null;
	        this._visibility6 = null;
	        this._binding7 = null;
	        this._keyId7 = null;
	        this._visibility7 = null;
	        this._binding8 = null;
	        this._keyId8 = null;
	        this._visibility8 = null;
	        this._binding9 = null;
	        this._keyId9 = null;
	        this._visibility9 = null;
	        var length = bd.length;
	        this.eventEmitterAccessors = collection_1.ListWrapper.createFixedSize(length);
	        this.hostActionAccessors = collection_1.ListWrapper.createFixedSize(length);
	        if (length > 0) {
	            this._binding0 = bd[0].binding;
	            this._keyId0 = bd[0].getKeyId();
	            this._visibility0 = bd[0].visibility;
	            this.eventEmitterAccessors[0] = bd[0].createEventEmitterAccessors();
	            this.hostActionAccessors[0] = bd[0].createHostActionAccessors();
	        }
	        if (length > 1) {
	            this._binding1 = bd[1].binding;
	            this._keyId1 = bd[1].getKeyId();
	            this._visibility1 = bd[1].visibility;
	            this.eventEmitterAccessors[1] = bd[1].createEventEmitterAccessors();
	            this.hostActionAccessors[1] = bd[1].createHostActionAccessors();
	        }
	        if (length > 2) {
	            this._binding2 = bd[2].binding;
	            this._keyId2 = bd[2].getKeyId();
	            this._visibility2 = bd[2].visibility;
	            this.eventEmitterAccessors[2] = bd[2].createEventEmitterAccessors();
	            this.hostActionAccessors[2] = bd[2].createHostActionAccessors();
	        }
	        if (length > 3) {
	            this._binding3 = bd[3].binding;
	            this._keyId3 = bd[3].getKeyId();
	            this._visibility3 = bd[3].visibility;
	            this.eventEmitterAccessors[3] = bd[3].createEventEmitterAccessors();
	            this.hostActionAccessors[3] = bd[3].createHostActionAccessors();
	        }
	        if (length > 4) {
	            this._binding4 = bd[4].binding;
	            this._keyId4 = bd[4].getKeyId();
	            this._visibility4 = bd[4].visibility;
	            this.eventEmitterAccessors[4] = bd[4].createEventEmitterAccessors();
	            this.hostActionAccessors[4] = bd[4].createHostActionAccessors();
	        }
	        if (length > 5) {
	            this._binding5 = bd[5].binding;
	            this._keyId5 = bd[5].getKeyId();
	            this._visibility5 = bd[5].visibility;
	            this.eventEmitterAccessors[5] = bd[5].createEventEmitterAccessors();
	            this.hostActionAccessors[5] = bd[5].createHostActionAccessors();
	        }
	        if (length > 6) {
	            this._binding6 = bd[6].binding;
	            this._keyId6 = bd[6].getKeyId();
	            this._visibility6 = bd[6].visibility;
	            this.eventEmitterAccessors[6] = bd[6].createEventEmitterAccessors();
	            this.hostActionAccessors[6] = bd[6].createHostActionAccessors();
	        }
	        if (length > 7) {
	            this._binding7 = bd[7].binding;
	            this._keyId7 = bd[7].getKeyId();
	            this._visibility7 = bd[7].visibility;
	            this.eventEmitterAccessors[7] = bd[7].createEventEmitterAccessors();
	            this.hostActionAccessors[7] = bd[7].createHostActionAccessors();
	        }
	        if (length > 8) {
	            this._binding8 = bd[8].binding;
	            this._keyId8 = bd[8].getKeyId();
	            this._visibility8 = bd[8].visibility;
	            this.eventEmitterAccessors[8] = bd[8].createEventEmitterAccessors();
	            this.hostActionAccessors[8] = bd[8].createHostActionAccessors();
	        }
	        if (length > 9) {
	            this._binding9 = bd[9].binding;
	            this._keyId9 = bd[9].getKeyId();
	            this._visibility9 = bd[9].visibility;
	            this.eventEmitterAccessors[9] = bd[9].createEventEmitterAccessors();
	            this.hostActionAccessors[9] = bd[9].createHostActionAccessors();
	        }
	        if (length > 10) {
	            throw 'Maximum number of directives per element has been reached.';
	        }
	    }
	    ProtoElementInjector.create = function (parent, index, bindings, firstBindingIsComponent, distanceToParent) {
	        var bd = [];
	        ProtoElementInjector._createDirectiveBindingData(bindings, bd, firstBindingIsComponent);
	        ProtoElementInjector._createHostInjectorBindingData(bindings, bd);
	        if (firstBindingIsComponent) {
	            ProtoElementInjector._createViewInjectorBindingData(bindings, bd);
	        }
	        return new ProtoElementInjector(parent, index, bd, distanceToParent, firstBindingIsComponent);
	    };
	    ProtoElementInjector._createDirectiveBindingData = function (bindings, bd, firstBindingIsComponent) {
	        if (firstBindingIsComponent) {
	            collection_1.ListWrapper.push(bd, new BindingData(bindings[0], LIGHT_DOM_AND_SHADOW_DOM));
	            for (var i = 1; i < bindings.length; ++i) {
	                collection_1.ListWrapper.push(bd, new BindingData(bindings[i], LIGHT_DOM));
	            }
	        }
	        else {
	            collection_1.ListWrapper.forEach(bindings, function (b) { collection_1.ListWrapper.push(bd, new BindingData(b, LIGHT_DOM)); });
	        }
	    };
	    ProtoElementInjector._createHostInjectorBindingData = function (bindings, bd) {
	        collection_1.ListWrapper.forEach(bindings, function (b) {
	            collection_1.ListWrapper.forEach(b.resolvedHostInjectables, function (b) {
	                collection_1.ListWrapper.push(bd, new BindingData(ProtoElementInjector._createBinding(b), LIGHT_DOM));
	            });
	        });
	    };
	    ProtoElementInjector._createViewInjectorBindingData = function (bindings, bd) {
	        var db = bindings[0];
	        collection_1.ListWrapper.forEach(db.resolvedViewInjectables, function (b) { return collection_1.ListWrapper.push(bd, new BindingData(ProtoElementInjector._createBinding(b), SHADOW_DOM)); });
	    };
	    ProtoElementInjector._createBinding = function (b) {
	        var deps = collection_1.ListWrapper.map(b.dependencies, function (d) { return DependencyWithVisibility.createFrom(d); });
	        return new di_1.ResolvedBinding(b.key, b.factory, deps, b.providedAsPromise);
	    };
	    ProtoElementInjector.prototype.instantiate = function (parent) {
	        return new ElementInjector(this, parent);
	    };
	    ProtoElementInjector.prototype.directParent = function () { return this.distanceToParent < 2 ? this.parent : null; };
	    Object.defineProperty(ProtoElementInjector.prototype, "hasBindings", {
	        get: function () { return lang_1.isPresent(this._binding0); },
	        enumerable: true,
	        configurable: true
	    });
	    ProtoElementInjector.prototype.getBindingAtIndex = function (index) {
	        if (index == 0)
	            return this._binding0;
	        if (index == 1)
	            return this._binding1;
	        if (index == 2)
	            return this._binding2;
	        if (index == 3)
	            return this._binding3;
	        if (index == 4)
	            return this._binding4;
	        if (index == 5)
	            return this._binding5;
	        if (index == 6)
	            return this._binding6;
	        if (index == 7)
	            return this._binding7;
	        if (index == 8)
	            return this._binding8;
	        if (index == 9)
	            return this._binding9;
	        throw new OutOfBoundsAccess(index);
	    };
	    return ProtoElementInjector;
	})();
	exports.ProtoElementInjector = ProtoElementInjector;
	var ElementInjector = (function (_super) {
	    __extends(ElementInjector, _super);
	    function ElementInjector(proto, parent) {
	        _super.call(this, parent);
	        this._proto = proto;
	        // we cannot call dehydrate because fields won't be detected
	        this._preBuiltObjects = null;
	        this._lightDomAppInjector = null;
	        this._shadowDomAppInjector = null;
	        this._obj0 = null;
	        this._obj1 = null;
	        this._obj2 = null;
	        this._obj3 = null;
	        this._obj4 = null;
	        this._obj5 = null;
	        this._obj6 = null;
	        this._obj7 = null;
	        this._obj8 = null;
	        this._obj9 = null;
	        this._constructionCounter = 0;
	        this._inheritQueries(parent);
	        this._buildQueries();
	    }
	    ElementInjector.prototype.dehydrate = function () {
	        this._host = null;
	        this._preBuiltObjects = null;
	        this._lightDomAppInjector = null;
	        this._shadowDomAppInjector = null;
	        var p = this._proto;
	        if (p._binding0 instanceof DirectiveBinding && p._binding0.callOnDestroy) {
	            this._obj0.onDestroy();
	        }
	        if (p._binding1 instanceof DirectiveBinding && p._binding1.callOnDestroy) {
	            this._obj1.onDestroy();
	        }
	        if (p._binding2 instanceof DirectiveBinding && p._binding2.callOnDestroy) {
	            this._obj2.onDestroy();
	        }
	        if (p._binding3 instanceof DirectiveBinding && p._binding3.callOnDestroy) {
	            this._obj3.onDestroy();
	        }
	        if (p._binding4 instanceof DirectiveBinding && p._binding4.callOnDestroy) {
	            this._obj4.onDestroy();
	        }
	        if (p._binding5 instanceof DirectiveBinding && p._binding5.callOnDestroy) {
	            this._obj5.onDestroy();
	        }
	        if (p._binding6 instanceof DirectiveBinding && p._binding6.callOnDestroy) {
	            this._obj6.onDestroy();
	        }
	        if (p._binding7 instanceof DirectiveBinding && p._binding7.callOnDestroy) {
	            this._obj7.onDestroy();
	        }
	        if (p._binding8 instanceof DirectiveBinding && p._binding8.callOnDestroy) {
	            this._obj8.onDestroy();
	        }
	        if (p._binding9 instanceof DirectiveBinding && p._binding9.callOnDestroy) {
	            this._obj9.onDestroy();
	        }
	        if (lang_1.isPresent(this._dynamicallyCreatedComponentBinding) &&
	            this._dynamicallyCreatedComponentBinding.callOnDestroy) {
	            this._dynamicallyCreatedComponent.onDestroy();
	        }
	        this._obj0 = null;
	        this._obj1 = null;
	        this._obj2 = null;
	        this._obj3 = null;
	        this._obj4 = null;
	        this._obj5 = null;
	        this._obj6 = null;
	        this._obj7 = null;
	        this._obj8 = null;
	        this._obj9 = null;
	        this._dynamicallyCreatedComponent = null;
	        this._dynamicallyCreatedComponentBinding = null;
	        this._constructionCounter = 0;
	    };
	    ElementInjector.prototype.hydrate = function (injector, host, preBuiltObjects) {
	        var p = this._proto;
	        this._host = host;
	        this._lightDomAppInjector = injector;
	        this._preBuiltObjects = preBuiltObjects;
	        if (p._firstBindingIsComponent) {
	            this._shadowDomAppInjector =
	                this._createShadowDomAppInjector(p._binding0, injector);
	        }
	        this._checkShadowDomAppInjector(this._shadowDomAppInjector);
	        if (lang_1.isPresent(p._keyId0))
	            this._getObjByKeyId(p._keyId0, LIGHT_DOM_AND_SHADOW_DOM);
	        if (lang_1.isPresent(p._keyId1))
	            this._getObjByKeyId(p._keyId1, LIGHT_DOM_AND_SHADOW_DOM);
	        if (lang_1.isPresent(p._keyId2))
	            this._getObjByKeyId(p._keyId2, LIGHT_DOM_AND_SHADOW_DOM);
	        if (lang_1.isPresent(p._keyId3))
	            this._getObjByKeyId(p._keyId3, LIGHT_DOM_AND_SHADOW_DOM);
	        if (lang_1.isPresent(p._keyId4))
	            this._getObjByKeyId(p._keyId4, LIGHT_DOM_AND_SHADOW_DOM);
	        if (lang_1.isPresent(p._keyId5))
	            this._getObjByKeyId(p._keyId5, LIGHT_DOM_AND_SHADOW_DOM);
	        if (lang_1.isPresent(p._keyId6))
	            this._getObjByKeyId(p._keyId6, LIGHT_DOM_AND_SHADOW_DOM);
	        if (lang_1.isPresent(p._keyId7))
	            this._getObjByKeyId(p._keyId7, LIGHT_DOM_AND_SHADOW_DOM);
	        if (lang_1.isPresent(p._keyId8))
	            this._getObjByKeyId(p._keyId8, LIGHT_DOM_AND_SHADOW_DOM);
	        if (lang_1.isPresent(p._keyId9))
	            this._getObjByKeyId(p._keyId9, LIGHT_DOM_AND_SHADOW_DOM);
	    };
	    ElementInjector.prototype._createShadowDomAppInjector = function (componentDirective, appInjector) {
	        if (!collection_1.ListWrapper.isEmpty(componentDirective.resolvedAppInjectables)) {
	            return appInjector.createChildFromResolved(componentDirective.resolvedAppInjectables);
	        }
	        else {
	            return appInjector;
	        }
	    };
	    ElementInjector.prototype.dynamicallyCreateComponent = function (componentDirective, parentInjector) {
	        this._shadowDomAppInjector =
	            this._createShadowDomAppInjector(componentDirective, parentInjector);
	        this._dynamicallyCreatedComponentBinding = componentDirective;
	        this._dynamicallyCreatedComponent = this._new(this._dynamicallyCreatedComponentBinding);
	        return this._dynamicallyCreatedComponent;
	    };
	    ElementInjector.prototype._checkShadowDomAppInjector = function (shadowDomAppInjector) {
	        if (this._proto._firstBindingIsComponent && lang_1.isBlank(shadowDomAppInjector)) {
	            throw new lang_1.BaseException('A shadowDomAppInjector is required as this ElementInjector contains a component');
	        }
	        else if (!this._proto._firstBindingIsComponent && lang_1.isPresent(shadowDomAppInjector)) {
	            throw new lang_1.BaseException('No shadowDomAppInjector allowed as there is not component stored in this ElementInjector');
	        }
	    };
	    ElementInjector.prototype.get = function (token) {
	        if (this._isDynamicallyLoadedComponent(token)) {
	            return this._dynamicallyCreatedComponent;
	        }
	        return this._getByKey(di_1.Key.get(token), visibility_1.self, false, null);
	    };
	    ElementInjector.prototype._isDynamicallyLoadedComponent = function (token) {
	        return lang_1.isPresent(this._dynamicallyCreatedComponentBinding) &&
	            di_1.Key.get(token) === this._dynamicallyCreatedComponentBinding.key;
	    };
	    ElementInjector.prototype.hasDirective = function (type) {
	        return this._getObjByKeyId(di_1.Key.get(type).id, LIGHT_DOM_AND_SHADOW_DOM) !== _undefined;
	    };
	    ElementInjector.prototype.getEventEmitterAccessors = function () { return this._proto.eventEmitterAccessors; };
	    ElementInjector.prototype.getHostActionAccessors = function () { return this._proto.hostActionAccessors; };
	    ElementInjector.prototype.getComponent = function () { return this._obj0; };
	    ElementInjector.prototype.getElementRef = function () {
	        return new element_ref_1.ElementRef(new view_ref_1.ViewRef(this._preBuiltObjects.view), this._proto.index);
	    };
	    ElementInjector.prototype.getViewContainerRef = function () {
	        return new view_container_ref_1.ViewContainerRef(this._preBuiltObjects.viewManager, this.getElementRef());
	    };
	    ElementInjector.prototype.getDynamicallyLoadedComponent = function () { return this._dynamicallyCreatedComponent; };
	    ElementInjector.prototype.directParent = function () { return this._proto.distanceToParent < 2 ? this.parent : null; };
	    ElementInjector.prototype._isComponentKey = function (key) {
	        return this._proto._firstBindingIsComponent && lang_1.isPresent(key) && key.id === this._proto._keyId0;
	    };
	    ElementInjector.prototype._isDynamicallyLoadedComponentKey = function (key) {
	        return lang_1.isPresent(this._dynamicallyCreatedComponentBinding) &&
	            key.id === this._dynamicallyCreatedComponentBinding.key.id;
	    };
	    ElementInjector.prototype._new = function (binding) {
	        if (this._constructionCounter++ > _MAX_DIRECTIVE_CONSTRUCTION_COUNTER) {
	            throw new di_1.CyclicDependencyError(binding.key);
	        }
	        var factory = binding.factory;
	        var deps = binding.dependencies;
	        var length = deps.length;
	        var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;
	        try {
	            d0 = length > 0 ? this._getByDependency(deps[0], binding.key) : null;
	            d1 = length > 1 ? this._getByDependency(deps[1], binding.key) : null;
	            d2 = length > 2 ? this._getByDependency(deps[2], binding.key) : null;
	            d3 = length > 3 ? this._getByDependency(deps[3], binding.key) : null;
	            d4 = length > 4 ? this._getByDependency(deps[4], binding.key) : null;
	            d5 = length > 5 ? this._getByDependency(deps[5], binding.key) : null;
	            d6 = length > 6 ? this._getByDependency(deps[6], binding.key) : null;
	            d7 = length > 7 ? this._getByDependency(deps[7], binding.key) : null;
	            d8 = length > 8 ? this._getByDependency(deps[8], binding.key) : null;
	            d9 = length > 9 ? this._getByDependency(deps[9], binding.key) : null;
	        }
	        catch (e) {
	            if (e instanceof di_1.AbstractBindingError)
	                e.addKey(binding.key);
	            throw e;
	        }
	        var obj;
	        switch (length) {
	            case 0:
	                obj = factory();
	                break;
	            case 1:
	                obj = factory(d0);
	                break;
	            case 2:
	                obj = factory(d0, d1);
	                break;
	            case 3:
	                obj = factory(d0, d1, d2);
	                break;
	            case 4:
	                obj = factory(d0, d1, d2, d3);
	                break;
	            case 5:
	                obj = factory(d0, d1, d2, d3, d4);
	                break;
	            case 6:
	                obj = factory(d0, d1, d2, d3, d4, d5);
	                break;
	            case 7:
	                obj = factory(d0, d1, d2, d3, d4, d5, d6);
	                break;
	            case 8:
	                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7);
	                break;
	            case 9:
	                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8);
	                break;
	            case 10:
	                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9);
	                break;
	            default:
	                throw "Directive " + binding.key.token + " can only have up to 10 dependencies.";
	        }
	        this._addToQueries(obj, binding.key.token);
	        return obj;
	    };
	    ElementInjector.prototype._getByDependency = function (dep, requestor) {
	        if (!(dep instanceof DirectiveDependency)) {
	            return this._getByKey(dep.key, dep.visibility, dep.optional, requestor);
	        }
	        var dirDep = dep;
	        if (lang_1.isPresent(dirDep.attributeName))
	            return this._buildAttribute(dirDep);
	        if (lang_1.isPresent(dirDep.queryDirective))
	            return this._findQuery(dirDep.queryDirective).list;
	        if (dirDep.key.id === StaticKeys.instance().changeDetectorRefId) {
	            var componentView = this._preBuiltObjects.view.componentChildViews[this._proto.index];
	            return componentView.changeDetector.ref;
	        }
	        if (dirDep.key.id === StaticKeys.instance().elementRefId) {
	            return this.getElementRef();
	        }
	        if (dirDep.key.id === StaticKeys.instance().viewContainerId) {
	            return this.getViewContainerRef();
	        }
	        if (dirDep.key.id === StaticKeys.instance().protoViewId) {
	            if (lang_1.isBlank(this._preBuiltObjects.protoView)) {
	                if (dirDep.optional) {
	                    return null;
	                }
	                throw new di_1.NoBindingError(dirDep.key);
	            }
	            return new view_ref_1.ProtoViewRef(this._preBuiltObjects.protoView);
	        }
	        return this._getByKey(dirDep.key, dirDep.visibility, dirDep.optional, requestor);
	    };
	    ElementInjector.prototype._buildAttribute = function (dep) {
	        var attributes = this._proto.attributes;
	        if (lang_1.isPresent(attributes) && collection_1.MapWrapper.contains(attributes, dep.attributeName)) {
	            return collection_1.MapWrapper.get(attributes, dep.attributeName);
	        }
	        else {
	            return null;
	        }
	    };
	    ElementInjector.prototype._buildQueriesForDeps = function (deps) {
	        for (var i = 0; i < deps.length; i++) {
	            var dep = deps[i];
	            if (lang_1.isPresent(dep.queryDirective)) {
	                this._createQueryRef(dep.queryDirective);
	            }
	        }
	    };
	    ElementInjector.prototype._createQueryRef = function (directive) {
	        var queryList = new query_list_1.QueryList();
	        if (lang_1.isBlank(this._query0)) {
	            this._query0 = new QueryRef(directive, queryList, this);
	        }
	        else if (lang_1.isBlank(this._query1)) {
	            this._query1 = new QueryRef(directive, queryList, this);
	        }
	        else if (lang_1.isBlank(this._query2)) {
	            this._query2 = new QueryRef(directive, queryList, this);
	        }
	        else
	            throw new QueryError();
	    };
	    ElementInjector.prototype._addToQueries = function (obj, token) {
	        if (lang_1.isPresent(this._query0) && (this._query0.directive === token)) {
	            this._query0.list.add(obj);
	        }
	        if (lang_1.isPresent(this._query1) && (this._query1.directive === token)) {
	            this._query1.list.add(obj);
	        }
	        if (lang_1.isPresent(this._query2) && (this._query2.directive === token)) {
	            this._query2.list.add(obj);
	        }
	    };
	    // TODO(rado): unify with _addParentQueries.
	    ElementInjector.prototype._inheritQueries = function (parent) {
	        if (lang_1.isBlank(parent))
	            return;
	        if (lang_1.isPresent(parent._query0)) {
	            this._query0 = parent._query0;
	        }
	        if (lang_1.isPresent(parent._query1)) {
	            this._query1 = parent._query1;
	        }
	        if (lang_1.isPresent(parent._query2)) {
	            this._query2 = parent._query2;
	        }
	    };
	    ElementInjector.prototype._buildQueries = function () {
	        if (lang_1.isBlank(this._proto))
	            return;
	        var p = this._proto;
	        if (p._binding0 instanceof DirectiveBinding) {
	            this._buildQueriesForDeps(p._binding0.dependencies);
	        }
	        if (p._binding1 instanceof DirectiveBinding) {
	            this._buildQueriesForDeps(p._binding1.dependencies);
	        }
	        if (p._binding2 instanceof DirectiveBinding) {
	            this._buildQueriesForDeps(p._binding2.dependencies);
	        }
	        if (p._binding3 instanceof DirectiveBinding) {
	            this._buildQueriesForDeps(p._binding3.dependencies);
	        }
	        if (p._binding4 instanceof DirectiveBinding) {
	            this._buildQueriesForDeps(p._binding4.dependencies);
	        }
	        if (p._binding5 instanceof DirectiveBinding) {
	            this._buildQueriesForDeps(p._binding5.dependencies);
	        }
	        if (p._binding6 instanceof DirectiveBinding) {
	            this._buildQueriesForDeps(p._binding6.dependencies);
	        }
	        if (p._binding7 instanceof DirectiveBinding) {
	            this._buildQueriesForDeps(p._binding7.dependencies);
	        }
	        if (p._binding8 instanceof DirectiveBinding) {
	            this._buildQueriesForDeps(p._binding8.dependencies);
	        }
	        if (p._binding9 instanceof DirectiveBinding) {
	            this._buildQueriesForDeps(p._binding9.dependencies);
	        }
	    };
	    ElementInjector.prototype._findQuery = function (token) {
	        if (lang_1.isPresent(this._query0) && this._query0.directive === token) {
	            return this._query0;
	        }
	        if (lang_1.isPresent(this._query1) && this._query1.directive === token) {
	            return this._query1;
	        }
	        if (lang_1.isPresent(this._query2) && this._query2.directive === token) {
	            return this._query2;
	        }
	        throw new lang_1.BaseException("Cannot find query for directive " + token + ".");
	    };
	    ElementInjector.prototype.link = function (parent) {
	        parent.addChild(this);
	        this._addParentQueries();
	    };
	    ElementInjector.prototype.linkAfter = function (parent, prevSibling) {
	        parent.addChildAfter(this, prevSibling);
	        this._addParentQueries();
	    };
	    ElementInjector.prototype._addParentQueries = function () {
	        if (lang_1.isPresent(this.parent._query0)) {
	            this._addQueryToTree(this.parent._query0);
	            this.parent._query0.update();
	        }
	        if (lang_1.isPresent(this.parent._query1)) {
	            this._addQueryToTree(this.parent._query1);
	            this.parent._query1.update();
	        }
	        if (lang_1.isPresent(this.parent._query2)) {
	            this._addQueryToTree(this.parent._query2);
	            this.parent._query2.update();
	        }
	    };
	    ElementInjector.prototype.unlink = function () {
	        var queriesToUpDate = [];
	        if (lang_1.isPresent(this.parent._query0)) {
	            this._pruneQueryFromTree(this.parent._query0);
	            collection_1.ListWrapper.push(queriesToUpDate, this.parent._query0);
	        }
	        if (lang_1.isPresent(this.parent._query1)) {
	            this._pruneQueryFromTree(this.parent._query1);
	            collection_1.ListWrapper.push(queriesToUpDate, this.parent._query1);
	        }
	        if (lang_1.isPresent(this.parent._query2)) {
	            this._pruneQueryFromTree(this.parent._query2);
	            collection_1.ListWrapper.push(queriesToUpDate, this.parent._query2);
	        }
	        this.remove();
	        collection_1.ListWrapper.forEach(queriesToUpDate, function (q) { return q.update(); });
	    };
	    ElementInjector.prototype._pruneQueryFromTree = function (query) {
	        this._removeQueryRef(query);
	        var child = this._head;
	        while (lang_1.isPresent(child)) {
	            child._pruneQueryFromTree(query);
	            child = child._next;
	        }
	    };
	    ElementInjector.prototype._addQueryToTree = function (query) {
	        this._assignQueryRef(query);
	        var child = this._head;
	        while (lang_1.isPresent(child)) {
	            child._addQueryToTree(query);
	            child = child._next;
	        }
	    };
	    ElementInjector.prototype._assignQueryRef = function (query) {
	        if (lang_1.isBlank(this._query0)) {
	            this._query0 = query;
	            return;
	        }
	        else if (lang_1.isBlank(this._query1)) {
	            this._query1 = query;
	            return;
	        }
	        else if (lang_1.isBlank(this._query2)) {
	            this._query2 = query;
	            return;
	        }
	        throw new QueryError();
	    };
	    ElementInjector.prototype._removeQueryRef = function (query) {
	        if (this._query0 == query)
	            this._query0 = null;
	        if (this._query1 == query)
	            this._query1 = null;
	        if (this._query2 == query)
	            this._query2 = null;
	    };
	    ElementInjector.prototype._getByKey = function (key, visibility, optional, requestor) {
	        var ei = this;
	        var currentVisibility = this._isComponentKey(requestor) ?
	            LIGHT_DOM_AND_SHADOW_DOM :
	            // and light dom dependencies
	            LIGHT_DOM;
	        var depth = visibility.depth;
	        if (!visibility.shouldIncludeSelf()) {
	            depth -= ei._proto.distanceToParent;
	            if (lang_1.isPresent(ei._parent)) {
	                ei = ei._parent;
	            }
	            else {
	                ei = ei._host;
	                currentVisibility = visibility.crossComponentBoundaries ? LIGHT_DOM : SHADOW_DOM;
	            }
	        }
	        while (ei != null && depth >= 0) {
	            var preBuiltObj = ei._getPreBuiltObjectByKeyId(key.id);
	            if (preBuiltObj !== _undefined)
	                return preBuiltObj;
	            var dir = ei._getObjByKeyId(key.id, currentVisibility);
	            if (dir !== _undefined)
	                return dir;
	            depth -= ei._proto.distanceToParent;
	            // we check only one mode with the SHADOW_DOM visibility
	            if (currentVisibility === SHADOW_DOM)
	                break;
	            if (lang_1.isPresent(ei._parent)) {
	                ei = ei._parent;
	            }
	            else {
	                ei = ei._host;
	                currentVisibility = visibility.crossComponentBoundaries ? LIGHT_DOM : SHADOW_DOM;
	            }
	        }
	        if (lang_1.isPresent(this._host) && this._host._isComponentKey(key)) {
	            return this._host.getComponent();
	        }
	        else if (lang_1.isPresent(this._host) && this._host._isDynamicallyLoadedComponentKey(key)) {
	            return this._host.getDynamicallyLoadedComponent();
	        }
	        else if (optional) {
	            return this._appInjector(requestor).getOptional(key);
	        }
	        else {
	            return this._appInjector(requestor).get(key);
	        }
	    };
	    ElementInjector.prototype._appInjector = function (requestor) {
	        if (lang_1.isPresent(requestor) &&
	            (this._isComponentKey(requestor) || this._isDynamicallyLoadedComponentKey(requestor))) {
	            return this._shadowDomAppInjector;
	        }
	        else {
	            return this._lightDomAppInjector;
	        }
	    };
	    ElementInjector.prototype._getPreBuiltObjectByKeyId = function (keyId) {
	        var staticKeys = StaticKeys.instance();
	        if (keyId === staticKeys.viewManagerId)
	            return this._preBuiltObjects.viewManager;
	        // TODO add other objects as needed
	        return _undefined;
	    };
	    ElementInjector.prototype._getObjByKeyId = function (keyId, visibility) {
	        var p = this._proto;
	        if (p._keyId0 === keyId && (p._visibility0 & visibility) > 0) {
	            if (lang_1.isBlank(this._obj0)) {
	                this._obj0 = this._new(p._binding0);
	            }
	            return this._obj0;
	        }
	        if (p._keyId1 === keyId && (p._visibility1 & visibility) > 0) {
	            if (lang_1.isBlank(this._obj1)) {
	                this._obj1 = this._new(p._binding1);
	            }
	            return this._obj1;
	        }
	        if (p._keyId2 === keyId && (p._visibility2 & visibility) > 0) {
	            if (lang_1.isBlank(this._obj2)) {
	                this._obj2 = this._new(p._binding2);
	            }
	            return this._obj2;
	        }
	        if (p._keyId3 === keyId && (p._visibility3 & visibility) > 0) {
	            if (lang_1.isBlank(this._obj3)) {
	                this._obj3 = this._new(p._binding3);
	            }
	            return this._obj3;
	        }
	        if (p._keyId4 === keyId && (p._visibility4 & visibility) > 0) {
	            if (lang_1.isBlank(this._obj4)) {
	                this._obj4 = this._new(p._binding4);
	            }
	            return this._obj4;
	        }
	        if (p._keyId5 === keyId && (p._visibility5 & visibility) > 0) {
	            if (lang_1.isBlank(this._obj5)) {
	                this._obj5 = this._new(p._binding5);
	            }
	            return this._obj5;
	        }
	        if (p._keyId6 === keyId && (p._visibility6 & visibility) > 0) {
	            if (lang_1.isBlank(this._obj6)) {
	                this._obj6 = this._new(p._binding6);
	            }
	            return this._obj6;
	        }
	        if (p._keyId7 === keyId && (p._visibility7 & visibility) > 0) {
	            if (lang_1.isBlank(this._obj7)) {
	                this._obj7 = this._new(p._binding7);
	            }
	            return this._obj7;
	        }
	        if (p._keyId8 === keyId && (p._visibility8 & visibility) > 0) {
	            if (lang_1.isBlank(this._obj8)) {
	                this._obj8 = this._new(p._binding8);
	            }
	            return this._obj8;
	        }
	        if (p._keyId9 === keyId && (p._visibility9 & visibility) > 0) {
	            if (lang_1.isBlank(this._obj9)) {
	                this._obj9 = this._new(p._binding9);
	            }
	            return this._obj9;
	        }
	        return _undefined;
	    };
	    ElementInjector.prototype.getDirectiveAtIndex = function (index) {
	        if (index == 0)
	            return this._obj0;
	        if (index == 1)
	            return this._obj1;
	        if (index == 2)
	            return this._obj2;
	        if (index == 3)
	            return this._obj3;
	        if (index == 4)
	            return this._obj4;
	        if (index == 5)
	            return this._obj5;
	        if (index == 6)
	            return this._obj6;
	        if (index == 7)
	            return this._obj7;
	        if (index == 8)
	            return this._obj8;
	        if (index == 9)
	            return this._obj9;
	        throw new OutOfBoundsAccess(index);
	    };
	    ElementInjector.prototype.hasInstances = function () { return this._constructionCounter > 0; };
	    /** Gets whether this element is exporting a component instance as $implicit. */
	    ElementInjector.prototype.isExportingComponent = function () { return this._proto.exportComponent; };
	    /** Gets whether this element is exporting its element as $implicit. */
	    ElementInjector.prototype.isExportingElement = function () { return this._proto.exportElement; };
	    /** Get the name to which this element's $implicit is to be assigned. */
	    ElementInjector.prototype.getExportImplicitName = function () { return this._proto.exportImplicitName; };
	    ElementInjector.prototype.getLightDomAppInjector = function () { return this._lightDomAppInjector; };
	    ElementInjector.prototype.getShadowDomAppInjector = function () { return this._shadowDomAppInjector; };
	    ElementInjector.prototype.getHost = function () { return this._host; };
	    ElementInjector.prototype.getBoundElementIndex = function () { return this._proto.index; };
	    return ElementInjector;
	})(TreeNode);
	exports.ElementInjector = ElementInjector;
	var OutOfBoundsAccess = (function (_super) {
	    __extends(OutOfBoundsAccess, _super);
	    function OutOfBoundsAccess(index) {
	        _super.call(this);
	        this.message = "Index " + index + " is out-of-bounds.";
	    }
	    OutOfBoundsAccess.prototype.toString = function () { return this.message; };
	    return OutOfBoundsAccess;
	})(lang_1.BaseException);
	var QueryError = (function (_super) {
	    __extends(QueryError, _super);
	    // TODO(rado): pass the names of the active directives.
	    function QueryError() {
	        _super.call(this);
	        this.message = 'Only 3 queries can be concurrently active in a template.';
	    }
	    QueryError.prototype.toString = function () { return this.message; };
	    return QueryError;
	})(lang_1.BaseException);
	var QueryRef = (function () {
	    function QueryRef(directive, list, originator) {
	        this.directive = directive;
	        this.list = list;
	        this.originator = originator;
	    }
	    QueryRef.prototype.update = function () {
	        var aggregator = [];
	        this.visit(this.originator, aggregator);
	        this.list.reset(aggregator);
	    };
	    QueryRef.prototype.visit = function (inj, aggregator) {
	        if (lang_1.isBlank(inj))
	            return;
	        if (inj.hasDirective(this.directive)) {
	            collection_1.ListWrapper.push(aggregator, inj.get(this.directive));
	        }
	        var child = inj._head;
	        while (lang_1.isPresent(child)) {
	            this.visit(child, aggregator);
	            child = child._next;
	        }
	    };
	    return QueryRef;
	})();
	exports.__esModule = true;
	//# sourceMappingURL=element_injector.js.map

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(60);
	var annotations_impl_1 = __webpack_require__(65);
	/**
	 * Specifies that a constant attribute value should be injected.
	 *
	 * The directive can inject constant string literals of host element attributes.
	 *
	 * ## Example
	 *
	 * Suppose we have an `<input>` element and want to know its `type`.
	 *
	 * ```html
	 * <input type="text">
	 * ```
	 *
	 * A decorator can inject string literal `text` like so:
	 *
	 * ```javascript
	 * @Directive({
	 *   selector: `input'
	 * })
	 * class InputDirective {
	 *   constructor(@Attribute('type') type) {
	 *     // type would be `text` in this example
	 *   }
	 * }
	 * ```
	 *
	 * @exportedAs angular2/annotations
	 */
	var Attribute = (function (_super) {
	    __extends(Attribute, _super);
	    function Attribute(attributeName) {
	        _super.call(this);
	        this.attributeName = attributeName;
	    }
	    Object.defineProperty(Attribute.prototype, "token", {
	        get: function () {
	            // Normally one would default a token to a type of an injected value but here
	            // the type of a variable is "string" and we can't use primitive type as a return value
	            // so we use instance of Attribute instead. This doesn't matter much in practice as arguments
	            // with @Attribute annotation are injected by ElementInjector that doesn't take tokens into
	            // account.
	            return this;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Attribute = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [String])
	    ], Attribute);
	    return Attribute;
	})(annotations_impl_1.DependencyAnnotation);
	exports.Attribute = Attribute;
	/**
	 * Specifies that a {@link QueryList} should be injected.
	 *
	 * See {@link QueryList} for usage and example.
	 *
	 * @exportedAs angular2/annotations
	 */
	var Query = (function (_super) {
	    __extends(Query, _super);
	    function Query(directive) {
	        _super.call(this);
	        this.directive = directive;
	    }
	    Query = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object])
	    ], Query);
	    return Query;
	})(annotations_impl_1.DependencyAnnotation);
	exports.Query = Query;
	exports.__esModule = true;
	//# sourceMappingURL=di.js.map

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(108);
	var lang_1 = __webpack_require__(60);
	var view_ref_1 = __webpack_require__(123);
	var api_1 = __webpack_require__(122);
	var view_manager_utils_1 = __webpack_require__(124);
	var view_pool_1 = __webpack_require__(129);
	/**
	 * Entry point for creating, moving views in the view hierarchy and destroying views.
	 * This manager contains all recursion and delegates to helper methods
	 * in AppViewManagerUtils and the Renderer, so unit tests get simpler.
	 */
	var AppViewManager = (function () {
	    function AppViewManager(viewPool, utils, renderer) {
	        this._renderer = renderer;
	        this._viewPool = viewPool;
	        this._utils = utils;
	    }
	    AppViewManager.prototype.getComponentView = function (hostLocation) {
	        var hostView = view_ref_1.internalView(hostLocation.parentView);
	        var boundElementIndex = hostLocation.boundElementIndex;
	        return new view_ref_1.ViewRef(hostView.componentChildViews[boundElementIndex]);
	    };
	    AppViewManager.prototype.getViewContainer = function (location) {
	        var hostView = view_ref_1.internalView(location.parentView);
	        return hostView.elementInjectors[location.boundElementIndex].getViewContainerRef();
	    };
	    AppViewManager.prototype.getComponent = function (hostLocation) {
	        var hostView = view_ref_1.internalView(hostLocation.parentView);
	        var boundElementIndex = hostLocation.boundElementIndex;
	        return this._utils.getComponentInstance(hostView, boundElementIndex);
	    };
	    AppViewManager.prototype.createDynamicComponentView = function (hostLocation, componentProtoViewRef, componentBinding, injector) {
	        var componentProtoView = view_ref_1.internalProtoView(componentProtoViewRef);
	        var hostView = view_ref_1.internalView(hostLocation.parentView);
	        var boundElementIndex = hostLocation.boundElementIndex;
	        var binder = hostView.proto.elementBinders[boundElementIndex];
	        if (!binder.hasDynamicComponent()) {
	            throw new lang_1.BaseException("There is no dynamic component directive at element " + boundElementIndex);
	        }
	        var componentView = this._createPooledView(componentProtoView);
	        this._renderer.attachComponentView(hostView.render, boundElementIndex, componentView.render);
	        this._utils.attachComponentView(hostView, boundElementIndex, componentView);
	        this._utils.hydrateDynamicComponentInElementInjector(hostView, boundElementIndex, componentBinding, injector);
	        this._utils.hydrateComponentView(hostView, boundElementIndex);
	        this._viewHydrateRecurse(componentView);
	        return new view_ref_1.ViewRef(componentView);
	    };
	    AppViewManager.prototype.createRootHostView = function (hostProtoViewRef, overrideSelector, injector) {
	        var hostProtoView = view_ref_1.internalProtoView(hostProtoViewRef);
	        var hostElementSelector = overrideSelector;
	        if (lang_1.isBlank(hostElementSelector)) {
	            hostElementSelector = hostProtoView.elementBinders[0].componentDirective.metadata.selector;
	        }
	        var renderView = this._renderer.createRootHostView(hostProtoView.render, hostElementSelector);
	        var hostView = this._utils.createView(hostProtoView, renderView, this, this._renderer);
	        this._renderer.setEventDispatcher(hostView.render, hostView);
	        this._createViewRecurse(hostView);
	        this._utils.hydrateRootHostView(hostView, injector);
	        this._viewHydrateRecurse(hostView);
	        return new view_ref_1.ViewRef(hostView);
	    };
	    AppViewManager.prototype.destroyRootHostView = function (hostViewRef) {
	        // Note: Don't detach the hostView as we want to leave the
	        // root element in place. Also don't put the hostView into the view pool
	        // as it is depending on the element for which it was created.
	        var hostView = view_ref_1.internalView(hostViewRef);
	        // We do want to destroy the component view though.
	        this._viewDehydrateRecurse(hostView, true);
	        this._renderer.destroyView(hostView.render);
	    };
	    AppViewManager.prototype.createFreeHostView = function (parentComponentLocation, hostProtoViewRef, injector) {
	        var hostProtoView = view_ref_1.internalProtoView(hostProtoViewRef);
	        var hostView = this._createPooledView(hostProtoView);
	        var parentComponentHostView = view_ref_1.internalView(parentComponentLocation.parentView);
	        var parentComponentBoundElementIndex = parentComponentLocation.boundElementIndex;
	        this._utils.attachAndHydrateFreeHostView(parentComponentHostView, parentComponentBoundElementIndex, hostView, injector);
	        this._viewHydrateRecurse(hostView);
	        return new view_ref_1.ViewRef(hostView);
	    };
	    AppViewManager.prototype.destroyFreeHostView = function (parentComponentLocation, hostViewRef) {
	        var hostView = view_ref_1.internalView(hostViewRef);
	        var parentView = view_ref_1.internalView(parentComponentLocation.parentView)
	            .componentChildViews[parentComponentLocation.boundElementIndex];
	        this._destroyFreeHostView(parentView, hostView);
	    };
	    AppViewManager.prototype.createViewInContainer = function (viewContainerLocation, atIndex, protoViewRef, context, injector) {
	        if (context === void 0) { context = null; }
	        if (injector === void 0) { injector = null; }
	        var protoView = view_ref_1.internalProtoView(protoViewRef);
	        var parentView = view_ref_1.internalView(viewContainerLocation.parentView);
	        var boundElementIndex = viewContainerLocation.boundElementIndex;
	        var contextView = null;
	        var contextBoundElementIndex = null;
	        if (lang_1.isPresent(context)) {
	            contextView = view_ref_1.internalView(context.parentView);
	            contextBoundElementIndex = context.boundElementIndex;
	        }
	        var view = this._createPooledView(protoView);
	        this._renderer.attachViewInContainer(parentView.render, boundElementIndex, atIndex, view.render);
	        this._utils.attachViewInContainer(parentView, boundElementIndex, contextView, contextBoundElementIndex, atIndex, view);
	        this._utils.hydrateViewInContainer(parentView, boundElementIndex, contextView, contextBoundElementIndex, atIndex, injector);
	        this._viewHydrateRecurse(view);
	        return new view_ref_1.ViewRef(view);
	    };
	    AppViewManager.prototype.destroyViewInContainer = function (viewContainerLocation, atIndex) {
	        var parentView = view_ref_1.internalView(viewContainerLocation.parentView);
	        var boundElementIndex = viewContainerLocation.boundElementIndex;
	        this._destroyViewInContainer(parentView, boundElementIndex, atIndex);
	    };
	    AppViewManager.prototype.attachViewInContainer = function (viewContainerLocation, atIndex, viewRef) {
	        var view = view_ref_1.internalView(viewRef);
	        var parentView = view_ref_1.internalView(viewContainerLocation.parentView);
	        var boundElementIndex = viewContainerLocation.boundElementIndex;
	        // TODO(tbosch): the public methods attachViewInContainer/detachViewInContainer
	        // are used for moving elements without the same container.
	        // We will change this into an atomic `move` operation, which should preserve the
	        // previous parent injector (see https://github.com/angular/angular/issues/1377).
	        // Right now we are destroying any special
	        // context view that might have been used.
	        this._utils.attachViewInContainer(parentView, boundElementIndex, null, null, atIndex, view);
	        this._renderer.attachViewInContainer(parentView.render, boundElementIndex, atIndex, view.render);
	        return viewRef;
	    };
	    AppViewManager.prototype.detachViewInContainer = function (viewContainerLocation, atIndex) {
	        var parentView = view_ref_1.internalView(viewContainerLocation.parentView);
	        var boundElementIndex = viewContainerLocation.boundElementIndex;
	        var viewContainer = parentView.viewContainers[boundElementIndex];
	        var view = viewContainer.views[atIndex];
	        this._utils.detachViewInContainer(parentView, boundElementIndex, atIndex);
	        this._renderer.detachViewInContainer(parentView.render, boundElementIndex, atIndex, view.render);
	        return new view_ref_1.ViewRef(view);
	    };
	    AppViewManager.prototype._createPooledView = function (protoView) {
	        var view = this._viewPool.getView(protoView);
	        if (lang_1.isBlank(view)) {
	            view = this._utils.createView(protoView, this._renderer.createView(protoView.render), this, this._renderer);
	            this._renderer.setEventDispatcher(view.render, view);
	            this._createViewRecurse(view);
	        }
	        return view;
	    };
	    AppViewManager.prototype._createViewRecurse = function (view) {
	        var binders = view.proto.elementBinders;
	        for (var binderIdx = 0; binderIdx < binders.length; binderIdx++) {
	            var binder = binders[binderIdx];
	            if (binder.hasStaticComponent()) {
	                var childView = this._createPooledView(binder.nestedProtoView);
	                this._renderer.attachComponentView(view.render, binderIdx, childView.render);
	                this._utils.attachComponentView(view, binderIdx, childView);
	            }
	        }
	    };
	    AppViewManager.prototype._destroyPooledView = function (view) {
	        // TODO: if the pool is full, call renderer.destroyView as well!
	        this._viewPool.returnView(view);
	    };
	    AppViewManager.prototype._destroyViewInContainer = function (parentView, boundElementIndex, atIndex) {
	        var viewContainer = parentView.viewContainers[boundElementIndex];
	        var view = viewContainer.views[atIndex];
	        this._viewDehydrateRecurse(view, false);
	        this._utils.detachViewInContainer(parentView, boundElementIndex, atIndex);
	        this._renderer.detachViewInContainer(parentView.render, boundElementIndex, atIndex, view.render);
	        this._destroyPooledView(view);
	    };
	    AppViewManager.prototype._destroyComponentView = function (hostView, boundElementIndex, componentView) {
	        this._viewDehydrateRecurse(componentView, false);
	        this._renderer.detachComponentView(hostView.render, boundElementIndex, componentView.render);
	        this._utils.detachComponentView(hostView, boundElementIndex);
	        this._destroyPooledView(componentView);
	    };
	    AppViewManager.prototype._destroyFreeHostView = function (parentView, hostView) {
	        this._viewDehydrateRecurse(hostView, true);
	        this._renderer.detachFreeHostView(parentView.render, hostView.render);
	        this._utils.detachFreeHostView(parentView, hostView);
	        this._destroyPooledView(hostView);
	    };
	    AppViewManager.prototype._viewHydrateRecurse = function (view) {
	        this._renderer.hydrateView(view.render);
	        var binders = view.proto.elementBinders;
	        for (var i = 0; i < binders.length; ++i) {
	            if (binders[i].hasStaticComponent()) {
	                this._utils.hydrateComponentView(view, i);
	                this._viewHydrateRecurse(view.componentChildViews[i]);
	            }
	        }
	    };
	    AppViewManager.prototype._viewDehydrateRecurse = function (view, forceDestroyComponents) {
	        this._utils.dehydrateView(view);
	        this._renderer.dehydrateView(view.render);
	        var binders = view.proto.elementBinders;
	        for (var i = 0; i < binders.length; i++) {
	            var componentView = view.componentChildViews[i];
	            if (lang_1.isPresent(componentView)) {
	                if (binders[i].hasDynamicComponent() || forceDestroyComponents) {
	                    this._destroyComponentView(view, i, componentView);
	                }
	                else {
	                    this._viewDehydrateRecurse(componentView, false);
	                }
	            }
	            var vc = view.viewContainers[i];
	            if (lang_1.isPresent(vc)) {
	                for (var j = vc.views.length - 1; j >= 0; j--) {
	                    this._destroyViewInContainer(view, i, j);
	                }
	            }
	        }
	        // freeHostViews
	        for (var i = view.freeHostViews.length - 1; i >= 0; i--) {
	            var hostView = view.freeHostViews[i];
	            this._destroyFreeHostView(view, hostView);
	        }
	    };
	    AppViewManager = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [view_pool_1.AppViewPool, view_manager_utils_1.AppViewManagerUtils, api_1.Renderer])
	    ], AppViewManager);
	    return AppViewManager;
	})();
	exports.AppViewManager = AppViewManager;
	exports.__esModule = true;
	//# sourceMappingURL=view_manager.js.map

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	var lang_1 = __webpack_require__(60);
	/**
	 * General notes:
	 *
	 * The methods for creating / destroying views in this API are used in the AppViewHydrator
	 * and RenderViewHydrator as well.
	 *
	 * We are already parsing expressions on the render side:
	 * - this makes the ElementBinders more compact
	 *   (e.g. no need to distinguish interpolations from regular expressions from literals)
	 * - allows to retrieve which properties should be accessed from the event
	 *   by looking at the expression
	 * - we need the parse at least for the `template` attribute to match
	 *   directives in it
	 * - render compiler is not on the critical path as
	 *   its output will be stored in precompiled templates.
	 */
	var EventBinding = (function () {
	    function EventBinding(fullName, source) {
	        this.fullName = fullName;
	        this.source = source;
	    }
	    return EventBinding;
	})();
	exports.EventBinding = EventBinding;
	var ElementBinder = (function () {
	    function ElementBinder(_a) {
	        var _b = _a === void 0 ? {} : _a, index = _b.index, parentIndex = _b.parentIndex, distanceToParent = _b.distanceToParent, directives = _b.directives, nestedProtoView = _b.nestedProtoView, propertyBindings = _b.propertyBindings, variableBindings = _b.variableBindings, eventBindings = _b.eventBindings, textBindings = _b.textBindings, readAttributes = _b.readAttributes;
	        this.index = index;
	        this.parentIndex = parentIndex;
	        this.distanceToParent = distanceToParent;
	        this.directives = directives;
	        this.nestedProtoView = nestedProtoView;
	        this.propertyBindings = propertyBindings;
	        this.variableBindings = variableBindings;
	        this.eventBindings = eventBindings;
	        this.textBindings = textBindings;
	        this.readAttributes = readAttributes;
	    }
	    return ElementBinder;
	})();
	exports.ElementBinder = ElementBinder;
	var DirectiveBinder = (function () {
	    function DirectiveBinder(_a) {
	        var directiveIndex = _a.directiveIndex, propertyBindings = _a.propertyBindings, eventBindings = _a.eventBindings, hostPropertyBindings = _a.hostPropertyBindings;
	        this.directiveIndex = directiveIndex;
	        this.propertyBindings = propertyBindings;
	        this.eventBindings = eventBindings;
	        this.hostPropertyBindings = hostPropertyBindings;
	    }
	    return DirectiveBinder;
	})();
	exports.DirectiveBinder = DirectiveBinder;
	var ProtoViewDto = (function () {
	    function ProtoViewDto(_a) {
	        var render = _a.render, elementBinders = _a.elementBinders, variableBindings = _a.variableBindings, type = _a.type;
	        this.render = render;
	        this.elementBinders = elementBinders;
	        this.variableBindings = variableBindings;
	        this.type = type;
	    }
	    Object.defineProperty(ProtoViewDto, "HOST_VIEW_TYPE", {
	        // A view that contains the host element with bound
	        // component directive.
	        // Contains a view of type #COMPONENT_VIEW_TYPE.
	        get: function () { return 0; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ProtoViewDto, "COMPONENT_VIEW_TYPE", {
	        // The view of the component
	        // Can contain 0 to n views of type #EMBEDDED_VIEW_TYPE
	        get: function () { return 1; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ProtoViewDto, "EMBEDDED_VIEW_TYPE", {
	        // A view that is embedded into another View via a <template> element
	        // inside of a component view
	        get: function () { return 2; },
	        enumerable: true,
	        configurable: true
	    });
	    return ProtoViewDto;
	})();
	exports.ProtoViewDto = ProtoViewDto;
	var DirectiveMetadata = (function () {
	    function DirectiveMetadata(_a) {
	        var id = _a.id, selector = _a.selector, compileChildren = _a.compileChildren, events = _a.events, hostListeners = _a.hostListeners, hostProperties = _a.hostProperties, hostAttributes = _a.hostAttributes, hostActions = _a.hostActions, properties = _a.properties, readAttributes = _a.readAttributes, type = _a.type, callOnDestroy = _a.callOnDestroy, callOnChange = _a.callOnChange, callOnAllChangesDone = _a.callOnAllChangesDone, changeDetection = _a.changeDetection;
	        this.id = id;
	        this.selector = selector;
	        this.compileChildren = lang_1.isPresent(compileChildren) ? compileChildren : true;
	        this.events = events;
	        this.hostListeners = hostListeners;
	        this.hostProperties = hostProperties;
	        this.hostAttributes = hostAttributes;
	        this.hostActions = hostActions;
	        this.properties = properties;
	        this.readAttributes = readAttributes;
	        this.type = type;
	        this.callOnDestroy = callOnDestroy;
	        this.callOnChange = callOnChange;
	        this.callOnAllChangesDone = callOnAllChangesDone;
	        this.changeDetection = changeDetection;
	    }
	    Object.defineProperty(DirectiveMetadata, "DIRECTIVE_TYPE", {
	        get: function () { return 0; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DirectiveMetadata, "COMPONENT_TYPE", {
	        get: function () { return 1; },
	        enumerable: true,
	        configurable: true
	    });
	    return DirectiveMetadata;
	})();
	exports.DirectiveMetadata = DirectiveMetadata;
	// An opaque reference to a DomProtoView
	var RenderProtoViewRef = (function () {
	    function RenderProtoViewRef() {
	    }
	    return RenderProtoViewRef;
	})();
	exports.RenderProtoViewRef = RenderProtoViewRef;
	// An opaque reference to a DomView
	var RenderViewRef = (function () {
	    function RenderViewRef() {
	    }
	    return RenderViewRef;
	})();
	exports.RenderViewRef = RenderViewRef;
	var ViewDefinition = (function () {
	    function ViewDefinition(_a) {
	        var componentId = _a.componentId, absUrl = _a.absUrl, template = _a.template, directives = _a.directives;
	        this.componentId = componentId;
	        this.absUrl = absUrl;
	        this.template = template;
	        this.directives = directives;
	    }
	    return ViewDefinition;
	})();
	exports.ViewDefinition = ViewDefinition;
	var RenderCompiler = (function () {
	    function RenderCompiler() {
	    }
	    /**
	     * Creats a ProtoViewDto that contains a single nested component with the given componentId.
	     */
	    RenderCompiler.prototype.compileHost = function (directiveMetadata) { return null; };
	    /**
	     * Compiles a single DomProtoView. Non recursive so that
	     * we don't need to serialize all possible components over the wire,
	     * but only the needed ones based on previous calls.
	     */
	    RenderCompiler.prototype.compile = function (template) { return null; };
	    return RenderCompiler;
	})();
	exports.RenderCompiler = RenderCompiler;
	var Renderer = (function () {
	    function Renderer() {
	    }
	    /**
	     * Creates a root host view that includes the given element.
	     * @param {RenderProtoViewRef} hostProtoViewRef a RenderProtoViewRef of type
	     * ProtoViewDto.HOST_VIEW_TYPE
	     * @param {any} hostElementSelector css selector for the host element (will be queried against the
	     * main document)
	     * @return {RenderViewRef} the created view
	     */
	    Renderer.prototype.createRootHostView = function (hostProtoViewRef, hostElementSelector) {
	        return null;
	    };
	    /**
	     * Detaches a free host view's element from the DOM.
	     */
	    Renderer.prototype.detachFreeHostView = function (parentHostViewRef, hostViewRef) { };
	    /**
	     * Creates a regular view out of the given ProtoView
	     */
	    Renderer.prototype.createView = function (protoViewRef) { return null; };
	    /**
	     * Destroys the given view after it has been dehydrated and detached
	     */
	    Renderer.prototype.destroyView = function (viewRef) { };
	    /**
	     * Attaches a componentView into the given hostView at the given element
	     */
	    Renderer.prototype.attachComponentView = function (hostViewRef, elementIndex, componentViewRef) { };
	    /**
	     * Detaches a componentView into the given hostView at the given element
	     */
	    Renderer.prototype.detachComponentView = function (hostViewRef, boundElementIndex, componentViewRef) { };
	    /**
	     * Attaches a view into a ViewContainer (in the given parentView at the given element) at the
	     * given index.
	     */
	    Renderer.prototype.attachViewInContainer = function (parentViewRef, boundElementIndex, atIndex, viewRef) { };
	    /**
	     * Detaches a view into a ViewContainer (in the given parentView at the given element) at the
	     * given index.
	     */
	    // TODO(tbosch): this should return a promise as it can be animated!
	    Renderer.prototype.detachViewInContainer = function (parentViewRef, boundElementIndex, atIndex, viewRef) { };
	    /**
	     * Hydrates a view after it has been attached. Hydration/dehydration is used for reusing views
	     * inside of the view pool.
	     */
	    Renderer.prototype.hydrateView = function (viewRef) { };
	    /**
	     * Dehydrates a view after it has been attached. Hydration/dehydration is used for reusing views
	     * inside of the view pool.
	     */
	    Renderer.prototype.dehydrateView = function (viewRef) { };
	    /**
	     * Sets a property on an element.
	     * Note: This will fail if the property was not mentioned previously as a host property
	     * in the ProtoView
	     */
	    Renderer.prototype.setElementProperty = function (viewRef, elementIndex, propertyName, propertyValue) { };
	    /**
	     * Calls an action.
	     * Note: This will fail if the action was not mentioned previously as a host action
	     * in the ProtoView
	     */
	    Renderer.prototype.callAction = function (viewRef, elementIndex, actionExpression, actionArgs) { };
	    /**
	     * Sets the value of a text node.
	     */
	    Renderer.prototype.setText = function (viewRef, textNodeIndex, text) { };
	    /**
	     * Sets the dispatcher for all events of the given view
	     */
	    Renderer.prototype.setEventDispatcher = function (viewRef, dispatcher) { };
	    return Renderer;
	})();
	exports.Renderer = Renderer;
	exports.__esModule = true;
	//# sourceMappingURL=api.js.map

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	var lang_1 = __webpack_require__(60);
	// This is a workaround for privacy in Dart as we don't have library parts
	function internalView(viewRef) {
	    return viewRef._view;
	}
	exports.internalView = internalView;
	// This is a workaround for privacy in Dart as we don't have library parts
	function internalProtoView(protoViewRef) {
	    return lang_1.isPresent(protoViewRef) ? protoViewRef._protoView : null;
	}
	exports.internalProtoView = internalProtoView;
	/**
	 * @exportedAs angular2/view
	 */
	var ViewRef = (function () {
	    function ViewRef(view) {
	        this._view = view;
	    }
	    Object.defineProperty(ViewRef.prototype, "render", {
	        get: function () { return this._view.render; },
	        enumerable: true,
	        configurable: true
	    });
	    ViewRef.prototype.setLocal = function (contextName, value) { this._view.setLocal(contextName, value); };
	    return ViewRef;
	})();
	exports.ViewRef = ViewRef;
	/**
	 * @exportedAs angular2/view
	 */
	var ProtoViewRef = (function () {
	    function ProtoViewRef(protoView) {
	        this._protoView = protoView;
	    }
	    return ProtoViewRef;
	})();
	exports.ProtoViewRef = ProtoViewRef;
	exports.__esModule = true;
	//# sourceMappingURL=view_ref.js.map

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(108);
	var collection_1 = __webpack_require__(61);
	var eli = __webpack_require__(119);
	var lang_1 = __webpack_require__(60);
	var viewModule = __webpack_require__(125);
	var directive_resolver_1 = __webpack_require__(127);
	var AppViewManagerUtils = (function () {
	    function AppViewManagerUtils(metadataReader) {
	        this._directiveResolver = metadataReader;
	    }
	    AppViewManagerUtils.prototype.getComponentInstance = function (parentView, boundElementIndex) {
	        var binder = parentView.proto.elementBinders[boundElementIndex];
	        var eli = parentView.elementInjectors[boundElementIndex];
	        if (binder.hasDynamicComponent()) {
	            return eli.getDynamicallyLoadedComponent();
	        }
	        else {
	            return eli.getComponent();
	        }
	    };
	    AppViewManagerUtils.prototype.createView = function (protoView, renderView, viewManager, renderer) {
	        var view = new viewModule.AppView(renderer, protoView, protoView.protoLocals);
	        // TODO(tbosch): pass RenderViewRef as argument to AppView!
	        view.render = renderView;
	        var changeDetector = protoView.protoChangeDetector.instantiate(view);
	        var binders = protoView.elementBinders;
	        var elementInjectors = collection_1.ListWrapper.createFixedSize(binders.length);
	        var rootElementInjectors = [];
	        var preBuiltObjects = collection_1.ListWrapper.createFixedSize(binders.length);
	        var componentChildViews = collection_1.ListWrapper.createFixedSize(binders.length);
	        for (var binderIdx = 0; binderIdx < binders.length; binderIdx++) {
	            var binder = binders[binderIdx];
	            var elementInjector = null;
	            // elementInjectors and rootElementInjectors
	            var protoElementInjector = binder.protoElementInjector;
	            if (lang_1.isPresent(protoElementInjector)) {
	                if (lang_1.isPresent(protoElementInjector.parent)) {
	                    var parentElementInjector = elementInjectors[protoElementInjector.parent.index];
	                    elementInjector = protoElementInjector.instantiate(parentElementInjector);
	                }
	                else {
	                    elementInjector = protoElementInjector.instantiate(null);
	                    collection_1.ListWrapper.push(rootElementInjectors, elementInjector);
	                }
	            }
	            elementInjectors[binderIdx] = elementInjector;
	            // preBuiltObjects
	            if (lang_1.isPresent(elementInjector)) {
	                var embeddedProtoView = binder.hasEmbeddedProtoView() ? binder.nestedProtoView : null;
	                preBuiltObjects[binderIdx] = new eli.PreBuiltObjects(viewManager, view, embeddedProtoView);
	            }
	        }
	        view.init(changeDetector, elementInjectors, rootElementInjectors, preBuiltObjects, componentChildViews);
	        return view;
	    };
	    AppViewManagerUtils.prototype.attachComponentView = function (hostView, boundElementIndex, componentView) {
	        var childChangeDetector = componentView.changeDetector;
	        hostView.changeDetector.addShadowDomChild(childChangeDetector);
	        hostView.componentChildViews[boundElementIndex] = componentView;
	    };
	    AppViewManagerUtils.prototype.detachComponentView = function (hostView, boundElementIndex) {
	        var componentView = hostView.componentChildViews[boundElementIndex];
	        hostView.changeDetector.removeShadowDomChild(componentView.changeDetector);
	        hostView.componentChildViews[boundElementIndex] = null;
	    };
	    AppViewManagerUtils.prototype.hydrateComponentView = function (hostView, boundElementIndex, injector) {
	        if (injector === void 0) { injector = null; }
	        var elementInjector = hostView.elementInjectors[boundElementIndex];
	        var componentView = hostView.componentChildViews[boundElementIndex];
	        var component = this.getComponentInstance(hostView, boundElementIndex);
	        this._hydrateView(componentView, injector, elementInjector, component, null);
	    };
	    AppViewManagerUtils.prototype.hydrateRootHostView = function (hostView, injector) {
	        if (injector === void 0) { injector = null; }
	        this._hydrateView(hostView, injector, null, new Object(), null);
	    };
	    AppViewManagerUtils.prototype.attachAndHydrateFreeHostView = function (parentComponentHostView, parentComponentBoundElementIndex, hostView, injector) {
	        if (injector === void 0) { injector = null; }
	        var hostElementInjector = parentComponentHostView.elementInjectors[parentComponentBoundElementIndex];
	        var parentView = parentComponentHostView.componentChildViews[parentComponentBoundElementIndex];
	        parentView.changeDetector.addChild(hostView.changeDetector);
	        collection_1.ListWrapper.push(parentView.freeHostViews, hostView);
	        this._hydrateView(hostView, injector, hostElementInjector, new Object(), null);
	    };
	    AppViewManagerUtils.prototype.detachFreeHostView = function (parentView, hostView) {
	        parentView.changeDetector.removeChild(hostView.changeDetector);
	        collection_1.ListWrapper.remove(parentView.freeHostViews, hostView);
	    };
	    AppViewManagerUtils.prototype.attachViewInContainer = function (parentView, boundElementIndex, contextView, contextBoundElementIndex, atIndex, view) {
	        if (lang_1.isBlank(contextView)) {
	            contextView = parentView;
	            contextBoundElementIndex = boundElementIndex;
	        }
	        parentView.changeDetector.addChild(view.changeDetector);
	        var viewContainer = parentView.viewContainers[boundElementIndex];
	        if (lang_1.isBlank(viewContainer)) {
	            viewContainer = new viewModule.AppViewContainer();
	            parentView.viewContainers[boundElementIndex] = viewContainer;
	        }
	        collection_1.ListWrapper.insert(viewContainer.views, atIndex, view);
	        var sibling;
	        if (atIndex == 0) {
	            sibling = null;
	        }
	        else {
	            sibling = collection_1.ListWrapper.last(viewContainer.views[atIndex - 1].rootElementInjectors);
	        }
	        var elementInjector = contextView.elementInjectors[contextBoundElementIndex];
	        for (var i = view.rootElementInjectors.length - 1; i >= 0; i--) {
	            view.rootElementInjectors[i].linkAfter(elementInjector, sibling);
	        }
	    };
	    AppViewManagerUtils.prototype.detachViewInContainer = function (parentView, boundElementIndex, atIndex) {
	        var viewContainer = parentView.viewContainers[boundElementIndex];
	        var view = viewContainer.views[atIndex];
	        view.changeDetector.remove();
	        collection_1.ListWrapper.removeAt(viewContainer.views, atIndex);
	        for (var i = 0; i < view.rootElementInjectors.length; ++i) {
	            view.rootElementInjectors[i].unlink();
	        }
	    };
	    AppViewManagerUtils.prototype.hydrateViewInContainer = function (parentView, boundElementIndex, contextView, contextBoundElementIndex, atIndex, injector) {
	        if (lang_1.isBlank(contextView)) {
	            contextView = parentView;
	            contextBoundElementIndex = boundElementIndex;
	        }
	        var viewContainer = parentView.viewContainers[boundElementIndex];
	        var view = viewContainer.views[atIndex];
	        var elementInjector = contextView.elementInjectors[contextBoundElementIndex].getHost();
	        this._hydrateView(view, injector, elementInjector, contextView.context, contextView.locals);
	    };
	    AppViewManagerUtils.prototype.hydrateDynamicComponentInElementInjector = function (hostView, boundElementIndex, componentBinding, injector) {
	        if (injector === void 0) { injector = null; }
	        var elementInjector = hostView.elementInjectors[boundElementIndex];
	        if (lang_1.isPresent(elementInjector.getDynamicallyLoadedComponent())) {
	            throw new lang_1.BaseException("There already is a dynamic component loaded at element " + boundElementIndex);
	        }
	        if (lang_1.isBlank(injector)) {
	            injector = elementInjector.getLightDomAppInjector();
	        }
	        var annotation = this._directiveResolver.resolve(componentBinding.token);
	        var componentDirective = eli.DirectiveBinding.createFromBinding(componentBinding, annotation);
	        elementInjector.dynamicallyCreateComponent(componentDirective, injector);
	    };
	    AppViewManagerUtils.prototype._hydrateView = function (view, appInjector, hostElementInjector, context, parentLocals) {
	        if (lang_1.isBlank(appInjector)) {
	            appInjector = hostElementInjector.getShadowDomAppInjector();
	        }
	        if (lang_1.isBlank(appInjector)) {
	            appInjector = hostElementInjector.getLightDomAppInjector();
	        }
	        view.context = context;
	        view.locals.parent = parentLocals;
	        var binders = view.proto.elementBinders;
	        for (var i = 0; i < binders.length; ++i) {
	            var elementInjector = view.elementInjectors[i];
	            if (lang_1.isPresent(elementInjector)) {
	                elementInjector.hydrate(appInjector, hostElementInjector, view.preBuiltObjects[i]);
	                this._setUpEventEmitters(view, elementInjector, i);
	                this._setUpHostActions(view, elementInjector, i);
	                // The exporting of $implicit is a special case. Since multiple elements will all export
	                // the different values as $implicit, directly assign $implicit bindings to the variable
	                // name.
	                var exportImplicitName = elementInjector.getExportImplicitName();
	                if (elementInjector.isExportingComponent()) {
	                    view.locals.set(exportImplicitName, elementInjector.getComponent());
	                }
	                else if (elementInjector.isExportingElement()) {
	                    view.locals.set(exportImplicitName, elementInjector.getElementRef().domElement);
	                }
	            }
	        }
	        view.changeDetector.hydrate(view.context, view.locals, view);
	    };
	    AppViewManagerUtils.prototype._setUpEventEmitters = function (view, elementInjector, boundElementIndex) {
	        var emitters = elementInjector.getEventEmitterAccessors();
	        for (var directiveIndex = 0; directiveIndex < emitters.length; ++directiveIndex) {
	            var directiveEmitters = emitters[directiveIndex];
	            var directive = elementInjector.getDirectiveAtIndex(directiveIndex);
	            for (var eventIndex = 0; eventIndex < directiveEmitters.length; ++eventIndex) {
	                var eventEmitterAccessor = directiveEmitters[eventIndex];
	                eventEmitterAccessor.subscribe(view, boundElementIndex, directive);
	            }
	        }
	    };
	    AppViewManagerUtils.prototype._setUpHostActions = function (view, elementInjector, boundElementIndex) {
	        var hostActions = elementInjector.getHostActionAccessors();
	        for (var directiveIndex = 0; directiveIndex < hostActions.length; ++directiveIndex) {
	            var directiveHostActions = hostActions[directiveIndex];
	            var directive = elementInjector.getDirectiveAtIndex(directiveIndex);
	            for (var index = 0; index < directiveHostActions.length; ++index) {
	                var hostActionAccessor = directiveHostActions[index];
	                hostActionAccessor.subscribe(view, boundElementIndex, directive);
	            }
	        }
	    };
	    AppViewManagerUtils.prototype.dehydrateView = function (view) {
	        var binders = view.proto.elementBinders;
	        for (var i = 0; i < binders.length; ++i) {
	            var elementInjector = view.elementInjectors[i];
	            if (lang_1.isPresent(elementInjector)) {
	                elementInjector.dehydrate();
	            }
	        }
	        if (lang_1.isPresent(view.locals)) {
	            view.locals.clearValues();
	        }
	        view.context = null;
	        view.changeDetector.dehydrate();
	    };
	    AppViewManagerUtils = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [directive_resolver_1.DirectiveResolver])
	    ], AppViewManagerUtils);
	    return AppViewManagerUtils;
	})();
	exports.AppViewManagerUtils = AppViewManagerUtils;
	exports.__esModule = true;
	//# sourceMappingURL=view_manager_utils.js.map

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	var collection_1 = __webpack_require__(61);
	var change_detection_1 = __webpack_require__(58);
	var element_binder_1 = __webpack_require__(126);
	var lang_1 = __webpack_require__(60);
	var AppViewContainer = (function () {
	    function AppViewContainer() {
	        // The order in this list matches the DOM order.
	        this.views = [];
	    }
	    return AppViewContainer;
	})();
	exports.AppViewContainer = AppViewContainer;
	/**
	 * Const of making objects: http://jsperf.com/instantiate-size-of-object
	 *
	 */
	var AppView = (function () {
	    function AppView(renderer, proto, protoLocals) {
	        this.renderer = renderer;
	        this.proto = proto;
	        this.render = null;
	        this.changeDetector = null;
	        this.elementInjectors = null;
	        this.rootElementInjectors = null;
	        this.componentChildViews = null;
	        this.viewContainers = collection_1.ListWrapper.createFixedSize(this.proto.elementBinders.length);
	        this.preBuiltObjects = null;
	        this.context = null;
	        this.locals = new change_detection_1.Locals(null, collection_1.MapWrapper.clone(protoLocals)); // TODO optimize this
	        this.freeHostViews = [];
	    }
	    AppView.prototype.init = function (changeDetector, elementInjectors, rootElementInjectors, preBuiltObjects, componentChildViews) {
	        this.changeDetector = changeDetector;
	        this.elementInjectors = elementInjectors;
	        this.rootElementInjectors = rootElementInjectors;
	        this.preBuiltObjects = preBuiltObjects;
	        this.componentChildViews = componentChildViews;
	    };
	    AppView.prototype.setLocal = function (contextName, value) {
	        if (!this.hydrated())
	            throw new lang_1.BaseException('Cannot set locals on dehydrated view.');
	        if (!collection_1.MapWrapper.contains(this.proto.variableBindings, contextName)) {
	            return;
	        }
	        var templateName = collection_1.MapWrapper.get(this.proto.variableBindings, contextName);
	        this.locals.set(templateName, value);
	    };
	    AppView.prototype.hydrated = function () { return lang_1.isPresent(this.context); };
	    /**
	     * Triggers the event handlers for the element and the directives.
	     *
	     * This method is intended to be called from directive EventEmitters.
	     *
	     * @param {string} eventName
	     * @param {*} eventObj
	     * @param {int} binderIndex
	     */
	    AppView.prototype.triggerEventHandlers = function (eventName, eventObj, binderIndex) {
	        var locals = collection_1.MapWrapper.create();
	        collection_1.MapWrapper.set(locals, '$event', eventObj);
	        this.dispatchEvent(binderIndex, eventName, locals);
	    };
	    // dispatch to element injector or text nodes based on context
	    AppView.prototype.notifyOnBinding = function (b, currentValue) {
	        if (b.isElement()) {
	            this.renderer.setElementProperty(this.render, b.elementIndex, b.propertyName, currentValue);
	        }
	        else {
	            // we know it refers to _textNodes.
	            this.renderer.setText(this.render, b.elementIndex, currentValue);
	        }
	    };
	    AppView.prototype.getDirectiveFor = function (directive) {
	        var elementInjector = this.elementInjectors[directive.elementIndex];
	        return elementInjector.getDirectiveAtIndex(directive.directiveIndex);
	    };
	    AppView.prototype.getDetectorFor = function (directive) {
	        var childView = this.componentChildViews[directive.elementIndex];
	        return lang_1.isPresent(childView) ? childView.changeDetector : null;
	    };
	    AppView.prototype.callAction = function (elementIndex, actionExpression, action) {
	        this.renderer.callAction(this.render, elementIndex, actionExpression, action);
	    };
	    // implementation of EventDispatcher#dispatchEvent
	    // returns false if preventDefault must be applied to the DOM event
	    AppView.prototype.dispatchEvent = function (elementIndex, eventName, locals) {
	        var _this = this;
	        // Most of the time the event will be fired only when the view is in the live document.
	        // However, in a rare circumstance the view might get dehydrated, in between the event
	        // queuing up and firing.
	        var allowDefaultBehavior = true;
	        if (this.hydrated()) {
	            var elBinder = this.proto.elementBinders[elementIndex];
	            if (lang_1.isBlank(elBinder.hostListeners))
	                return allowDefaultBehavior;
	            var eventMap = elBinder.hostListeners[eventName];
	            if (lang_1.isBlank(eventMap))
	                return allowDefaultBehavior;
	            collection_1.MapWrapper.forEach(eventMap, function (expr, directiveIndex) {
	                var context;
	                if (directiveIndex === -1) {
	                    context = _this.context;
	                }
	                else {
	                    context = _this.elementInjectors[elementIndex].getDirectiveAtIndex(directiveIndex);
	                }
	                var result = expr.eval(context, new change_detection_1.Locals(_this.locals, locals));
	                if (lang_1.isPresent(result)) {
	                    allowDefaultBehavior = allowDefaultBehavior && result == true;
	                }
	            });
	        }
	        return allowDefaultBehavior;
	    };
	    return AppView;
	})();
	exports.AppView = AppView;
	/**
	 *
	 */
	var AppProtoView = (function () {
	    function AppProtoView(render, protoChangeDetector, variableBindings) {
	        var _this = this;
	        this.render = render;
	        this.protoChangeDetector = protoChangeDetector;
	        this.variableBindings = variableBindings;
	        this.elementBinders = [];
	        this.protoLocals = collection_1.MapWrapper.create();
	        if (lang_1.isPresent(variableBindings)) {
	            collection_1.MapWrapper.forEach(variableBindings, function (templateName, _) {
	                collection_1.MapWrapper.set(_this.protoLocals, templateName, null);
	            });
	        }
	    }
	    AppProtoView.prototype.bindElement = function (parent, distanceToParent, protoElementInjector, componentDirective) {
	        if (componentDirective === void 0) { componentDirective = null; }
	        var elBinder = new element_binder_1.ElementBinder(this.elementBinders.length, parent, distanceToParent, protoElementInjector, componentDirective);
	        collection_1.ListWrapper.push(this.elementBinders, elBinder);
	        return elBinder;
	    };
	    /**
	     * Adds an event binding for the last created ElementBinder via bindElement.
	     *
	     * If the directive index is a positive integer, the event is evaluated in the context of
	     * the given directive.
	     *
	     * If the directive index is -1, the event is evaluated in the context of the enclosing view.
	     *
	     * @param {string} eventName
	     * @param {AST} expression
	     * @param {int} directiveIndex The directive index in the binder or -1 when the event is not bound
	     *                             to a directive
	     */
	    AppProtoView.prototype.bindEvent = function (eventBindings, boundElementIndex, directiveIndex) {
	        if (directiveIndex === void 0) { directiveIndex = -1; }
	        var elBinder = this.elementBinders[boundElementIndex];
	        var events = elBinder.hostListeners;
	        if (lang_1.isBlank(events)) {
	            events = collection_1.StringMapWrapper.create();
	            elBinder.hostListeners = events;
	        }
	        for (var i = 0; i < eventBindings.length; i++) {
	            var eventBinding = eventBindings[i];
	            var eventName = eventBinding.fullName;
	            var event = collection_1.StringMapWrapper.get(events, eventName);
	            if (lang_1.isBlank(event)) {
	                event = collection_1.MapWrapper.create();
	                collection_1.StringMapWrapper.set(events, eventName, event);
	            }
	            collection_1.MapWrapper.set(event, directiveIndex, eventBinding.source);
	        }
	    };
	    return AppProtoView;
	})();
	exports.AppProtoView = AppProtoView;
	exports.__esModule = true;
	//# sourceMappingURL=view.js.map

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	var lang_1 = __webpack_require__(60);
	var ElementBinder = (function () {
	    function ElementBinder(index, parent, distanceToParent, protoElementInjector, componentDirective) {
	        this.index = index;
	        this.parent = parent;
	        this.distanceToParent = distanceToParent;
	        this.protoElementInjector = protoElementInjector;
	        this.componentDirective = componentDirective;
	        if (lang_1.isBlank(index)) {
	            throw new lang_1.BaseException('null index not allowed.');
	        }
	        // updated later when events are bound
	        this.hostListeners = null;
	        // updated later, so we are able to resolve cycles
	        this.nestedProtoView = null;
	    }
	    ElementBinder.prototype.hasStaticComponent = function () {
	        return lang_1.isPresent(this.componentDirective) && lang_1.isPresent(this.nestedProtoView);
	    };
	    ElementBinder.prototype.hasDynamicComponent = function () {
	        return lang_1.isPresent(this.componentDirective) && lang_1.isBlank(this.nestedProtoView);
	    };
	    ElementBinder.prototype.hasEmbeddedProtoView = function () {
	        return !lang_1.isPresent(this.componentDirective) && lang_1.isPresent(this.nestedProtoView);
	    };
	    return ElementBinder;
	})();
	exports.ElementBinder = ElementBinder;
	exports.__esModule = true;
	//# sourceMappingURL=element_binder.js.map

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(108);
	var lang_1 = __webpack_require__(60);
	var annotations_1 = __webpack_require__(128);
	var reflection_1 = __webpack_require__(68);
	var DirectiveResolver = (function () {
	    function DirectiveResolver() {
	    }
	    DirectiveResolver.prototype.resolve = function (type) {
	        var annotations = reflection_1.reflector.annotations(di_1.resolveForwardRef(type));
	        if (lang_1.isPresent(annotations)) {
	            for (var i = 0; i < annotations.length; i++) {
	                var annotation = annotations[i];
	                if (annotation instanceof annotations_1.Directive) {
	                    return annotation;
	                }
	            }
	        }
	        throw new lang_1.BaseException("No Directive annotation found on " + lang_1.stringify(type));
	    };
	    DirectiveResolver = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], DirectiveResolver);
	    return DirectiveResolver;
	})();
	exports.DirectiveResolver = DirectiveResolver;
	exports.__esModule = true;
	//# sourceMappingURL=directive_resolver.js.map

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(60);
	var collection_1 = __webpack_require__(61);
	var annotations_impl_1 = __webpack_require__(65);
	var change_detection_1 = __webpack_require__(58);
	// type StringMap = {[idx: string]: string};
	/**
	 * Directives allow you to attach behavior to elements in the DOM.
	 *
	 * {@link Directive}s with an embedded view are called {@link Component}s.
	 *
	 * A directive consists of a single directive annotation and a controller class. When the
	 * directive's `selector` matches
	 * elements in the DOM, the following steps occur:
	 *
	 * 1. For each directive, the `ElementInjector` attempts to resolve the directive's constructor
	 * arguments.
	 * 2. Angular instantiates directives for each matched element using `ElementInjector` in a
	 * depth-first order,
	 *    as declared in the HTML.
	 *
	 * ## Understanding How Injection Works
	 *
	 * There are three stages of injection resolution.
	 * - *Pre-existing Injectors*:
	 *   - The terminal {@link Injector} cannot resolve dependencies. It either throws an error or, if
	 * the dependency was
	 *     specified as `@Optional`, returns `null`.
	 *   - The platform injector resolves browser singleton resources, such as: cookies, title,
	 * location, and others.
	 * - *Component Injectors*: Each component instance has its own {@link Injector}, and they follow
	 * the same parent-child hierarchy
	 *     as the component instances in the DOM.
	 * - *Element Injectors*: Each component instance has a Shadow DOM. Within the Shadow DOM each
	 * element has an `ElementInjector`
	 *     which follow the same parent-child hierarchy as the DOM elements themselves.
	 *
	 * When a template is instantiated, it also must instantiate the corresponding directives in a
	 * depth-first order. The
	 * current `ElementInjector` resolves the constructor dependencies for each directive.
	 *
	 * Angular then resolves dependencies as follows, according to the order in which they appear in the
	 * {@link View}:
	 *
	 * 1. Dependencies on the current element
	 * 2. Dependencies on element injectors and their parents until it encounters a Shadow DOM boundary
	 * 3. Dependencies on component injectors and their parents until it encounters the root component
	 * 4. Dependencies on pre-existing injectors
	 *
	 *
	 * The `ElementInjector` can inject other directives, element-specific special objects, or it can
	 * delegate to the parent
	 * injector.
	 *
	 * To inject other directives, declare the constructor parameter as:
	 * - `directive:DirectiveType`: a directive on the current element only
	 * - `@Ancestor() directive:DirectiveType`: any directive that matches the type between the current
	 * element and the
	 *    Shadow DOM root. Current element is not included in the resolution, therefore even if it could
	 * resolve it, it will
	 *    be ignored.
	 * - `@Parent() directive:DirectiveType`: any directive that matches the type on a direct parent
	 * element only.
	 * - `@Query(DirectiveType) query:QueryList<DirectiveType>`: A live collection of direct child
	 * directives.
	 * - `@QueryDescendants(DirectiveType) query:QueryList<DirectiveType>`: A live collection of any
	 * child directives.
	 *
	 * To inject element-specific special objects, declare the constructor parameter as:
	 * - `element: ElementRef` to obtain a reference to logical element in the view.
	 * - `viewContainer: ViewContainerRef` to control child template instantiation, for {@link
	 * Directive} directives only
	 * - `bindingPropagation: BindingPropagation` to control change detection in a more granular way.
	 *
	 * ## Example
	 *
	 * The following example demonstrates how dependency injection resolves constructor arguments in
	 * practice.
	 *
	 *
	 * Assume this HTML template:
	 *
	 * ```
	 * <div dependency="1">
	 *   <div dependency="2">
	 *     <div dependency="3" my-directive>
	 *       <div dependency="4">
	 *         <div dependency="5"></div>
	 *       </div>
	 *       <div dependency="6"></div>
	 *     </div>
	 *   </div>
	 * </div>
	 * ```
	 *
	 * With the following `dependency` decorator and `SomeService` injectable class.
	 *
	 * ```
	 * @Injectable()
	 * class SomeService {
	 * }
	 *
	 * @Directive({
	 *   selector: '[dependency]',
	 *   properties: {
	 *     'id':'dependency'
	 *   }
	 * })
	 * class Dependency {
	 *   id:string;
	 * }
	 * ```
	 *
	 * Let's step through the different ways in which `MyDirective` could be declared...
	 *
	 *
	 * ### No injection
	 *
	 * Here the constructor is declared with no arguments, therefore nothing is injected into
	 * `MyDirective`.
	 *
	 * ```
	 * @Directive({ selector: '[my-directive]' })
	 * class MyDirective {
	 *   constructor() {
	 *   }
	 * }
	 * ```
	 *
	 * This directive would be instantiated with no dependencies.
	 *
	 *
	 * ### Component-level injection
	 *
	 * Directives can inject any injectable instance from the closest component injector or any of its
	 * parents.
	 *
	 * Here, the constructor declares a parameter, `someService`, and injects the `SomeService` type
	 * from the parent
	 * component's injector.
	 * ```
	 * @Directive({ selector: '[my-directive]' })
	 * class MyDirective {
	 *   constructor(someService: SomeService) {
	 *   }
	 * }
	 * ```
	 *
	 * This directive would be instantiated with a dependency on `SomeService`.
	 *
	 *
	 * ### Injecting a directive from the current element
	 *
	 * Directives can inject other directives declared on the current element.
	 *
	 * ```
	 * @Directive({ selector: '[my-directive]' })
	 * class MyDirective {
	 *   constructor(dependency: Dependency) {
	 *     expect(dependency.id).toEqual(3);
	 *   }
	 * }
	 * ```
	 * This directive would be instantiated with `Dependency` declared at the same element, in this case
	 * `dependency="3"`.
	 *
	 *
	 * ### Injecting a directive from a direct parent element
	 *
	 * Directives can inject other directives declared on a direct parent element. By definition, a
	 * directive with a
	 * `@Parent` annotation does not attempt to resolve dependencies for the current element, even if
	 * this would satisfy
	 * the dependency.
	 *
	 * ```
	 * @Directive({ selector: '[my-directive]' })
	 * class MyDirective {
	 *   constructor(@Parent() dependency: Dependency) {
	 *     expect(dependency.id).toEqual(2);
	 *   }
	 * }
	 * ```
	 * This directive would be instantiated with `Dependency` declared at the parent element, in this
	 * case `dependency="2"`.
	 *
	 *
	 * ### Injecting a directive from any ancestor elements
	 *
	 * Directives can inject other directives declared on any ancestor element (in the current Shadow
	 * DOM), i.e. on the
	 * parent element and its parents. By definition, a directive with an `@Ancestor` annotation does
	 * not attempt to
	 * resolve dependencies for the current element, even if this would satisfy the dependency.
	 *
	 * ```
	 * @Directive({ selector: '[my-directive]' })
	 * class MyDirective {
	 *   constructor(@Ancestor() dependency: Dependency) {
	 *     expect(dependency.id).toEqual(2);
	 *   }
	 * }
	 * ```
	 *
	 * Unlike the `@Parent` which only checks the parent, `@Ancestor` checks the parent, as well as its
	 * parents recursively. If `dependency="2"` didn't exist on the direct parent, this injection would
	 * have returned
	 * `dependency="1"`.
	 *
	 *
	 * ### Injecting a live collection of direct child directives
	 *
	 *
	 * A directive can also query for other child directives. Since parent directives are instantiated
	 * before child
	 * directives, a directive can't simply inject the list of child directives. Instead, the directive
	 * injects a {@link QueryList}, which updates its contents as children are added, removed, or moved
	 * by a directive
	 * that uses a {@link ViewContainerRef} such as a `for`, an `if`, or a `switch`.
	 *
	 * ```
	 * @Directive({ selector: '[my-directive]' })
	 * class MyDirective {
	 *   constructor(@Query(Dependency) dependencies:QueryList<Dependency>) {
	 *   }
	 * }
	 * ```
	 *
	 * This directive would be instantiated with a {@link QueryList} which contains `Dependency` 4 and
	 * 6. Here, `Dependency`
	 * 5 would not be included, because it is not a direct child.
	 *
	 * ### Injecting a live collection of descendant directives
	 *
	 * Note: This is will be implemented in later release. ()
	 *
	 * Similar to `@Query` above, but also includes the children of the child elements.
	 *
	 * ```
	 * @Directive({ selector: '[my-directive]' })
	 * class MyDirective {
	 *   constructor(@QueryDescendents(Dependency) dependencies:QueryList<Dependency>) {
	 *   }
	 * }
	 * ```
	 *
	 * This directive would be instantiated with a Query which would contain `Dependency` 4, 5 and 6.
	 *
	 * ### Optional injection
	 *
	 * The normal behavior of directives is to return an error when a specified dependency cannot be
	 * resolved. If you
	 * would like to inject `null` on unresolved dependency instead, you can annotate that dependency
	 * with `@Optional()`.
	 * This explicitly permits the author of a template to treat some of the surrounding directives as
	 * optional.
	 *
	 * ```
	 * @Directive({ selector: '[my-directive]' })
	 * class MyDirective {
	 *   constructor(@Optional() dependency:Dependency) {
	 *   }
	 * }
	 * ```
	 *
	 * This directive would be instantiated with a `Dependency` directive found on the current element.
	 * If none can be
	 * found, the injector supplies `null` instead of throwing an error.
	 *
	 * ## Example
	 *
	 * Here we use a decorator directive to simply define basic tool-tip behavior.
	 *
	 * ```
	 * @Directive({
	 *   selector: '[tooltip]',
	 *   properties: {
	 *     'text': 'tooltip'
	 *   },
	 *   hostListeners: {
	 *     'onmouseenter': 'onMouseEnter()',
	 *     'onmouseleave': 'onMouseLeave()'
	 *   }
	 * })
	 * class Tooltip{
	 *   text:string;
	 *   overlay:Overlay; // NOT YET IMPLEMENTED
	 *   overlayManager:OverlayManager; // NOT YET IMPLEMENTED
	 *
	 *   constructor(overlayManager:OverlayManager) {
	 *     this.overlay = overlay;
	 *   }
	 *
	 *   onMouseEnter() {
	 *     // exact signature to be determined
	 *     this.overlay = this.overlayManager.open(text, ...);
	 *   }
	 *
	 *   onMouseLeave() {
	 *     this.overlay.close();
	 *     this.overlay = null;
	 *   }
	 * }
	 * ```
	 * In our HTML template, we can then add this behavior to a `<div>` or any other element with the
	 * `tooltip` selector,
	 * like so:
	 *
	 * ```
	 * <div tooltip="some text here"></div>
	 * ```
	 *
	 * Directives can also control the instantiation, destruction, and positioning of inline template
	 * elements:
	 *
	 * A directive uses a {@link ViewContainerRef} to instantiate, insert, move, and destroy views at
	 * runtime.
	 * The {@link ViewContainerRef} is created as a result of `<template>` element, and represents a
	 * location in the current view
	 * where these actions are performed.
	 *
	 * Views are always created as children of the current {@link View}, and as siblings of the
	 * `<template>` element. Thus a
	 * directive in a child view cannot inject the directive that created it.
	 *
	 * Since directives that create views via ViewContainers are common in Angular, and using the full
	 * `<template>` element syntax is wordy, Angular
	 * also supports a shorthand notation: `<li *foo="bar">` and `<li template="foo: bar">` are
	 * equivalent.
	 *
	 * Thus,
	 *
	 * ```
	 * <ul>
	 *   <li *foo="bar" title="text"></li>
	 * </ul>
	 * ```
	 *
	 * Expands in use to:
	 *
	 * ```
	 * <ul>
	 *   <template [foo]="bar">
	 *     <li title="text"></li>
	 *   </template>
	 * </ul>
	 * ```
	 *
	 * Notice that although the shorthand places `*foo="bar"` within the `<li>` element, the binding for
	 * the directive
	 * controller is correctly instantiated on the `<template>` element rather than the `<li>` element.
	 *
	 *
	 * ## Example
	 *
	 * Let's suppose we want to implement the `unless` behavior, to conditionally include a template.
	 *
	 * Here is a simple directive that triggers on an `unless` selector:
	 *
	 * ```
	 * @Directive({
	 *   selector: '[unless]',
	 *   properties: {
	 *     'unless': 'unless'
	 *   }
	 * })
	 * export class Unless {
	 *   viewContainer: ViewContainerRef;
	 *   protoViewRef: ProtoViewRef;
	 *   prevCondition: boolean;
	 *
	 *   constructor(viewContainer: ViewContainerRef, protoViewRef: ProtoViewRef) {
	 *     this.viewContainer = viewContainer;
	 *     this.protoViewRef = protoViewRef;
	 *     this.prevCondition = null;
	 *   }
	 *
	 *   set unless(newCondition) {
	 *     if (newCondition && (isBlank(this.prevCondition) || !this.prevCondition)) {
	 *       this.prevCondition = true;
	 *       this.viewContainer.clear();
	 *     } else if (!newCondition && (isBlank(this.prevCondition) || this.prevCondition)) {
	 *       this.prevCondition = false;
	 *       this.viewContainer.create(this.protoViewRef);
	 *     }
	 *   }
	 * }
	 * ```
	 *
	 * We can then use this `unless` selector in a template:
	 * ```
	 * <ul>
	 *   <li *unless="expr"></li>
	 * </ul>
	 * ```
	 *
	 * Once the directive instantiates the child view, the shorthand notation for the template expands
	 * and the result is:
	 *
	 * ```
	 * <ul>
	 *   <template [unless]="exp">
	 *     <li></li>
	 *   </template>
	 *   <li></li>
	 * </ul>
	 * ```
	 *
	 * Note also that although the `<li></li>` template still exists inside the `<template></template>`,
	 * the instantiated
	 * view occurs on the second `<li></li>` which is a sibling to the `<template>` element.
	 *
	 * @exportedAs angular2/annotations
	 */
	var Directive = (function (_super) {
	    __extends(Directive, _super);
	    function Directive(_a) {
	        var _b = _a === void 0 ? {} : _a, selector = _b.selector, properties = _b.properties, events = _b.events, hostListeners = _b.hostListeners, hostProperties = _b.hostProperties, hostAttributes = _b.hostAttributes, hostActions = _b.hostActions, lifecycle = _b.lifecycle, hostInjector = _b.hostInjector, _c = _b.compileChildren, compileChildren = _c === void 0 ? true : _c;
	        _super.call(this);
	        this.selector = selector;
	        this.properties = properties;
	        this.events = events;
	        this.hostListeners = hostListeners;
	        this.hostProperties = hostProperties;
	        this.hostAttributes = hostAttributes;
	        this.hostActions = hostActions;
	        this.lifecycle = lifecycle;
	        this.compileChildren = compileChildren;
	        this.hostInjector = hostInjector;
	    }
	    /**
	     * Returns true if a directive participates in a given `LifecycleEvent`.
	     *
	     * See {@link onChange}, {@link onDestroy}, {@link onAllChangesDone} for details.
	     */
	    Directive.prototype.hasLifecycleHook = function (hook) {
	        return lang_1.isPresent(this.lifecycle) ? collection_1.ListWrapper.contains(this.lifecycle, hook) : false;
	    };
	    Directive = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object])
	    ], Directive);
	    return Directive;
	})(annotations_impl_1.Injectable);
	exports.Directive = Directive;
	/**
	 * Declare reusable UI building blocks for an application.
	 *
	 * Each Angular component requires a single `@Component` and at least one `@View` annotation. The
	 * `@Component`
	 * annotation specifies when a component is instantiated, and which properties and hostListeners it
	 * binds to.
	 *
	 * When a component is instantiated, Angular
	 * - creates a shadow DOM for the component.
	 * - loads the selected template into the shadow DOM.
	 * - creates a child {@link Injector} which is configured with the `appInjector` for the {@link
	 * Component}.
	 *
	 * All template expressions and statements are then evaluated against the component instance.
	 *
	 * For details on the `@View` annotation, see {@link View}.
	 *
	 * ## Example
	 *
	 * ```
	 * @Component({
	 *   selector: 'greet'
	 * })
	 * @View({
	 *   template: 'Hello {{name}}!'
	 * })
	 * class Greet {
	 *   name: string;
	 *
	 *   constructor() {
	 *     this.name = 'World';
	 *   }
	 * }
	 * ```
	 *
	 *
	 * Dynamically loading a component at runtime:
	 *
	 * Regular Angular components are statically resolved. Dynamic components allows to resolve a
	 * component at runtime
	 * instead by providing a placeholder into which a regular Angular component can be dynamically
	 * loaded. Once loaded,
	 * the dynamically-loaded component becomes permanent and cannot be changed.
	 * Dynamic components are declared just like components, but without a `@View` annotation.
	 *
	 *
	 * ## Example
	 *
	 * Here we have `DynamicComp` which acts as the placeholder for `HelloCmp`. At runtime, the dynamic
	 * component
	 * `DynamicComp` requests loading of the `HelloCmp` component.
	 *
	 * There is nothing special about `HelloCmp`, which is a regular Angular component. It can also be
	 * used in other static
	 * locations.
	 *
	 * ```
	 * @Component({
	 *   selector: 'dynamic-comp'
	 * })
	 * class DynamicComp {
	 *   helloCmp:HelloCmp;
	 *   constructor(loader:DynamicComponentLoader, location:ElementRef) {
	 *     loader.load(HelloCmp, location).then((helloCmp) => {
	 *       this.helloCmp = helloCmp;
	 *     });
	 *   }
	 * }
	 *
	 * @Component({
	 *   selector: 'hello-cmp'
	 * })
	 * @View({
	 *   template: "{{greeting}}"
	 * })
	 * class HelloCmp {
	 *   greeting:string;
	 *   constructor() {
	 *     this.greeting = "hello";
	 *   }
	 * }
	 * ```
	 *
	 *
	 * @exportedAs angular2/annotations
	 */
	var Component = (function (_super) {
	    __extends(Component, _super);
	    function Component(_a) {
	        var _b = _a === void 0 ? {} : _a, selector = _b.selector, properties = _b.properties, events = _b.events, hostListeners = _b.hostListeners, hostProperties = _b.hostProperties, hostAttributes = _b.hostAttributes, hostActions = _b.hostActions, appInjector = _b.appInjector, lifecycle = _b.lifecycle, hostInjector = _b.hostInjector, viewInjector = _b.viewInjector, _c = _b.changeDetection, changeDetection = _c === void 0 ? change_detection_1.DEFAULT : _c, _d = _b.compileChildren, compileChildren = _d === void 0 ? true : _d;
	        _super.call(this, {
	            selector: selector,
	            properties: properties,
	            events: events,
	            hostListeners: hostListeners,
	            hostProperties: hostProperties,
	            hostAttributes: hostAttributes,
	            hostActions: hostActions,
	            hostInjector: hostInjector,
	            lifecycle: lifecycle,
	            compileChildren: compileChildren
	        });
	        this.changeDetection = changeDetection;
	        this.appInjector = appInjector;
	        this.viewInjector = viewInjector;
	    }
	    Component = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object])
	    ], Component);
	    return Component;
	})(Directive);
	exports.Component = Component;
	var LifecycleEvent = (function () {
	    function LifecycleEvent(name) {
	        this.name = name;
	    }
	    LifecycleEvent = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [String])
	    ], LifecycleEvent);
	    return LifecycleEvent;
	})();
	exports.LifecycleEvent = LifecycleEvent;
	/**
	 * Notify a directive whenever a {@link View} that contains it is destroyed.
	 *
	 * ## Example
	 *
	 * ```
	 * @Directive({
	 *   ...,
	 *   lifecycle: [onDestroy]
	 * })
	 * class ClassSet {
	 *   onDestroy() {
	 *     // invoked to notify directive of the containing view destruction.
	 *   }
	 * }
	 * ```
	 * @exportedAs angular2/annotations
	 */
	exports.onDestroy = lang_1.CONST_EXPR(new LifecycleEvent("onDestroy"));
	/**
	 * Notify a directive when any of its bindings have changed.
	 *
	 * This method is called right after the directive's bindings have been checked,
	 * and before any of its children's bindings have been checked.
	 *
	 * It is invoked only if at least one of the directive's bindings has changed.
	 *
	 * ## Example:
	 *
	 * ```
	 * @Directive({
	 *   selector: '[class-set]',
	 *   properties: {
	 *     'propA': 'propA'
	 *     'propB': 'propB'
	 *   },
	 *   lifecycle: [onChange]
	 * })
	 * class ClassSet {
	 *   propA;
	 *   propB;
	 *   onChange(changes:{[idx: string, PropertyUpdate]}) {
	 *     // This will get called after any of the properties have been updated.
	 *     if (changes['propA']) {
	 *       // if propA was updated
	 *     }
	 *     if (changes['propA']) {
	 *       // if propB was updated
	 *     }
	 *   }
	 * }
	 *  ```
	 * @exportedAs angular2/annotations
	 */
	exports.onChange = lang_1.CONST_EXPR(new LifecycleEvent("onChange"));
	/**
	 * Notify a directive when the bindings of all its children have been changed.
	 *
	 * ## Example:
	 *
	 * ```
	 * @Directive({
	 *   selector: '[class-set]',
	 *   lifecycle: [onAllChangesDone]
	 * })
	 * class ClassSet {
	 *
	 *   onAllChangesDone() {
	 *   }
	 *
	 * }
	 *  ```
	 * @exportedAs angular2/annotations
	 */
	exports.onAllChangesDone = lang_1.CONST_EXPR(new LifecycleEvent("onAllChangesDone"));
	exports.__esModule = true;
	//# sourceMappingURL=annotations.js.map

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var di_1 = __webpack_require__(108);
	var collection_1 = __webpack_require__(61);
	var lang_1 = __webpack_require__(60);
	// TODO(tbosch): Make this an OpaqueToken as soon as our transpiler supports this!
	exports.APP_VIEW_POOL_CAPACITY = 'AppViewPool.viewPoolCapacity';
	var AppViewPool = (function () {
	    function AppViewPool(poolCapacityPerProtoView) {
	        this._poolCapacityPerProtoView = poolCapacityPerProtoView;
	        this._pooledViewsPerProtoView = collection_1.MapWrapper.create();
	    }
	    AppViewPool.prototype.getView = function (protoView) {
	        var pooledViews = collection_1.MapWrapper.get(this._pooledViewsPerProtoView, protoView);
	        if (lang_1.isPresent(pooledViews) && pooledViews.length > 0) {
	            return collection_1.ListWrapper.removeLast(pooledViews);
	        }
	        return null;
	    };
	    AppViewPool.prototype.returnView = function (view) {
	        var protoView = view.proto;
	        var pooledViews = collection_1.MapWrapper.get(this._pooledViewsPerProtoView, protoView);
	        if (lang_1.isBlank(pooledViews)) {
	            pooledViews = [];
	            collection_1.MapWrapper.set(this._pooledViewsPerProtoView, protoView, pooledViews);
	        }
	        if (pooledViews.length < this._poolCapacityPerProtoView) {
	            collection_1.ListWrapper.push(pooledViews, view);
	        }
	    };
	    AppViewPool = __decorate([
	        __param(0, di_1.Inject(exports.APP_VIEW_POOL_CAPACITY)), 
	        __metadata('design:paramtypes', [Object])
	    ], AppViewPool);
	    return AppViewPool;
	})();
	exports.AppViewPool = AppViewPool;
	exports.__esModule = true;
	//# sourceMappingURL=view_pool.js.map

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	var collection_1 = __webpack_require__(61);
	var lang_1 = __webpack_require__(60);
	var view_ref_1 = __webpack_require__(123);
	/**
	 * @exportedAs angular2/core
	 */
	var ViewContainerRef = (function () {
	    function ViewContainerRef(viewManager, element) {
	        this.viewManager = viewManager;
	        this.element = element;
	    }
	    ViewContainerRef.prototype._getViews = function () {
	        var vc = view_ref_1.internalView(this.element.parentView).viewContainers[this.element.boundElementIndex];
	        return lang_1.isPresent(vc) ? vc.views : [];
	    };
	    ViewContainerRef.prototype.clear = function () {
	        for (var i = this.length - 1; i >= 0; i--) {
	            this.remove(i);
	        }
	    };
	    ViewContainerRef.prototype.get = function (index) { return new view_ref_1.ViewRef(this._getViews()[index]); };
	    Object.defineProperty(ViewContainerRef.prototype, "length", {
	        get: function () { return this._getViews().length; },
	        enumerable: true,
	        configurable: true
	    });
	    // TODO(rado): profile and decide whether bounds checks should be added
	    // to the methods below.
	    ViewContainerRef.prototype.create = function (protoViewRef, atIndex, context, injector) {
	        if (protoViewRef === void 0) { protoViewRef = null; }
	        if (atIndex === void 0) { atIndex = -1; }
	        if (context === void 0) { context = null; }
	        if (injector === void 0) { injector = null; }
	        if (atIndex == -1)
	            atIndex = this.length;
	        return this.viewManager.createViewInContainer(this.element, atIndex, protoViewRef, context, injector);
	    };
	    ViewContainerRef.prototype.insert = function (viewRef, atIndex) {
	        if (atIndex === void 0) { atIndex = -1; }
	        if (atIndex == -1)
	            atIndex = this.length;
	        return this.viewManager.attachViewInContainer(this.element, atIndex, viewRef);
	    };
	    ViewContainerRef.prototype.indexOf = function (viewRef) { return collection_1.ListWrapper.indexOf(this._getViews(), view_ref_1.internalView(viewRef)); };
	    ViewContainerRef.prototype.remove = function (atIndex) {
	        if (atIndex === void 0) { atIndex = -1; }
	        if (atIndex == -1)
	            atIndex = this.length - 1;
	        this.viewManager.destroyViewInContainer(this.element, atIndex);
	        // view is intentionally not returned to the client.
	    };
	    /**
	     * The method can be used together with insert to implement a view move, i.e.
	     * moving the dom nodes while the directives in the view stay intact.
	     */
	    ViewContainerRef.prototype.detach = function (atIndex) {
	        if (atIndex === void 0) { atIndex = -1; }
	        if (atIndex == -1)
	            atIndex = this.length - 1;
	        return this.viewManager.detachViewInContainer(this.element, atIndex);
	    };
	    return ViewContainerRef;
	})();
	exports.ViewContainerRef = ViewContainerRef;
	exports.__esModule = true;
	//# sourceMappingURL=view_container_ref.js.map

/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	var dom_adapter_1 = __webpack_require__(107);
	var lang_1 = __webpack_require__(60);
	var view_1 = __webpack_require__(132);
	/**
	 * @exportedAs angular2/view
	 */
	var ElementRef = (function () {
	    function ElementRef(parentView, boundElementIndex) {
	        this.parentView = parentView;
	        this.boundElementIndex = boundElementIndex;
	    }
	    Object.defineProperty(ElementRef.prototype, "domElement", {
	        /**
	         * Exposes the underlying DOM element.
	         * (DEPRECATED way of accessing the DOM, replacement coming)
	         */
	        // TODO(tbosch): Here we expose the real DOM element.
	        // We need a more general way to read/write to the DOM element
	        // via a proper abstraction in the render layer
	        get: function () {
	            return view_1.resolveInternalDomView(this.parentView.render).boundElements[this.boundElementIndex];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Gets an attribute from the underlying DOM element.
	     * (DEPRECATED way of accessing the DOM, replacement coming)
	     */
	    // TODO(tbosch): Here we expose the real DOM element.
	    // We need a more general way to read/write to the DOM element
	    // via a proper abstraction in the render layer
	    ElementRef.prototype.getAttribute = function (name) {
	        return lang_1.normalizeBlank(dom_adapter_1.DOM.getAttribute(this.domElement, name));
	    };
	    return ElementRef;
	})();
	exports.ElementRef = ElementRef;
	exports.__esModule = true;
	//# sourceMappingURL=element_ref.js.map

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var dom_adapter_1 = __webpack_require__(107);
	var collection_1 = __webpack_require__(61);
	var change_detection_1 = __webpack_require__(58);
	var lang_1 = __webpack_require__(60);
	var api_1 = __webpack_require__(122);
	function resolveInternalDomView(viewRef) {
	    return viewRef._view;
	}
	exports.resolveInternalDomView = resolveInternalDomView;
	var DomViewRef = (function (_super) {
	    __extends(DomViewRef, _super);
	    function DomViewRef(view) {
	        _super.call(this);
	        this._view = view;
	    }
	    return DomViewRef;
	})(api_1.RenderViewRef);
	exports.DomViewRef = DomViewRef;
	var NG_BINDING_CLASS = 'ng-binding';
	/**
	 * Const of making objects: http://jsperf.com/instantiate-size-of-object
	 */
	var DomView = (function () {
	    function DomView(proto, rootNodes, boundTextNodes, boundElements, contentTags) {
	        this.proto = proto;
	        this.rootNodes = rootNodes;
	        this.boundTextNodes = boundTextNodes;
	        this.boundElements = boundElements;
	        this.contentTags = contentTags;
	        this.viewContainers = collection_1.ListWrapper.createFixedSize(boundElements.length);
	        this.lightDoms = collection_1.ListWrapper.createFixedSize(boundElements.length);
	        this.hostLightDom = null;
	        this.hydrated = false;
	        this.eventHandlerRemovers = [];
	        this.eventDispatcher = null;
	        this.shadowRoot = null;
	    }
	    DomView.prototype.getDirectParentLightDom = function (boundElementIndex) {
	        var binder = this.proto.elementBinders[boundElementIndex];
	        var destLightDom = null;
	        if (binder.parentIndex !== -1 && binder.distanceToParent === 1) {
	            destLightDom = this.lightDoms[binder.parentIndex];
	        }
	        return destLightDom;
	    };
	    DomView.prototype.setElementProperty = function (elementIndex, propertyName, value) {
	        var setter = collection_1.MapWrapper.get(this.proto.elementBinders[elementIndex].propertySetters, propertyName);
	        setter(this.boundElements[elementIndex], value);
	    };
	    DomView.prototype.callAction = function (elementIndex, actionExpression, actionArgs) {
	        var binder = this.proto.elementBinders[elementIndex];
	        var hostAction = collection_1.MapWrapper.get(binder.hostActions, actionExpression);
	        hostAction.eval(this.boundElements[elementIndex], this._localsWithAction(actionArgs));
	    };
	    DomView.prototype._localsWithAction = function (action) {
	        var map = collection_1.MapWrapper.create();
	        collection_1.MapWrapper.set(map, '$action', action);
	        return new change_detection_1.Locals(null, map);
	    };
	    DomView.prototype.setText = function (textIndex, value) { dom_adapter_1.DOM.setText(this.boundTextNodes[textIndex], value); };
	    DomView.prototype.dispatchEvent = function (elementIndex, eventName, event) {
	        var allowDefaultBehavior = true;
	        if (lang_1.isPresent(this.eventDispatcher)) {
	            var evalLocals = collection_1.MapWrapper.create();
	            collection_1.MapWrapper.set(evalLocals, '$event', event);
	            // TODO(tbosch): reenable this when we are parsing element properties
	            // out of action expressions
	            // var localValues = this.proto.elementBinders[elementIndex].eventLocals.eval(null, new
	            // Locals(null, evalLocals));
	            // this.eventDispatcher.dispatchEvent(elementIndex, eventName, localValues);
	            allowDefaultBehavior =
	                this.eventDispatcher.dispatchEvent(elementIndex, eventName, evalLocals);
	            if (!allowDefaultBehavior) {
	                event.preventDefault();
	            }
	        }
	        return allowDefaultBehavior;
	    };
	    return DomView;
	})();
	exports.DomView = DomView;
	exports.__esModule = true;
	//# sourceMappingURL=view.js.map

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var base_query_list_1 = __webpack_require__(134);
	/**
	 * An iterable live list of components in the Light DOM.
	 *
	 * Injectable Objects that contains a live list of child directives in the light DOM of a directive.
	 * The directives are kept in depth-first pre-order traversal of the DOM.
	 *
	 * The `QueryList` is iterable, therefore it can be used in both javascript code with `for..of` loop
	 * as well as in
	 * template with `*ng-for="of"` directive.
	 *
	 * NOTE: In the future this class will implement an `Observable` interface. For now it uses a plain
	 * list of observable
	 * callbacks.
	 *
	 * # Example:
	 *
	 * Assume that `<tabs>` component would like to get a list its children which are `<pane>`
	 * components as shown in this
	 * example:
	 *
	 * ```html
	 * <tabs>
	 *   <pane title="Overview">...</pane>
	 *   <pane *ng-for="#o of objects" [title]="o.title">{{o.text}}</pane>
	 * </tabs>
	 * ```
	 *
	 * In the above example the list of `<tabs>` elements needs to get a list of `<pane>` elements so
	 * that it could render
	 * tabs with the correct titles and in the correct order.
	 *
	 * A possible solution would be for a `<pane>` to inject `<tabs>` component and then register itself
	 * with `<tabs>`
	 * component's on `hydrate` and deregister on `dehydrate` event. While a reasonable approach, this
	 * would only work
	 * partialy since `*ng-for` could rearange the list of `<pane>` components which would not be
	 * reported to `<tabs>`
	 * component and thus the list of `<pane>` componets would be out of sync with respect to the list
	 * of `<pane>` elements.
	 *
	 * A preferred solution is to inject a `QueryList` which is a live list of directives in the
	 * component`s light DOM.
	 *
	 * ```javascript
	 * @Component({
	 *   selector: 'tabs'
	 * })
	 * @View({
	 *  template: `
	 *    <ul>
	 *      <li *ng-for="#pane of panes">{{pane.title}}</li>
	 *    </ul>
	 *    <content></content>
	 *  `
	 * })
	 * class Tabs {
	 *   panes: QueryList<Pane>
	 *
	 *   constructor(@Query(Pane) panes:QueryList<Pane>) {
	 *     this.panes = panes;
	 *   }
	 * }
	 *
	 * @Component({
	 *   selector: 'pane',
	 *   properties: ['title']
	 * })
	 * @View(...)
	 * class Pane {
	 *   title:string;
	 * }
	 * ```
	 *
	 * @exportedAs angular2/view
	 */
	var QueryList = (function (_super) {
	    __extends(QueryList, _super);
	    function QueryList() {
	        _super.apply(this, arguments);
	    }
	    /**
	     */
	    QueryList.prototype.onChange = function (callback) { return _super.prototype.onChange.call(this, callback); };
	    /**
	     */
	    QueryList.prototype.removeCallback = function (callback) { return _super.prototype.removeCallback.call(this, callback); };
	    return QueryList;
	})(base_query_list_1.BaseQueryList);
	exports.QueryList = QueryList;
	exports.__esModule = true;
	//# sourceMappingURL=query_list.js.map

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	var collection_1 = __webpack_require__(61);
	/**
	 * Injectable Objects that contains a live list of child directives in the light Dom of a directive.
	 * The directives are kept in depth-first pre-order traversal of the DOM.
	 *
	 * In the future this class will implement an Observable interface.
	 * For now it uses a plain list of observable callbacks.
	 *
	 * @exportedAs angular2/view
	 */
	var BaseQueryList = (function () {
	    function BaseQueryList() {
	        this._results = [];
	        this._callbacks = [];
	        this._dirty = false;
	    }
	    BaseQueryList.prototype[Symbol.iterator] = function () { return this._results[Symbol.iterator](); };
	    BaseQueryList.prototype.reset = function (newList) {
	        this._results = newList;
	        this._dirty = true;
	    };
	    BaseQueryList.prototype.add = function (obj) {
	        collection_1.ListWrapper.push(this._results, obj);
	        this._dirty = true;
	    };
	    // TODO(rado): hook up with change detection after #995.
	    BaseQueryList.prototype.fireCallbacks = function () {
	        if (this._dirty) {
	            collection_1.ListWrapper.forEach(this._callbacks, function (c) { return c(); });
	            this._dirty = false;
	        }
	    };
	    BaseQueryList.prototype.onChange = function (callback) { collection_1.ListWrapper.push(this._callbacks, callback); };
	    BaseQueryList.prototype.removeCallback = function (callback) { collection_1.ListWrapper.remove(this._callbacks, callback); };
	    return BaseQueryList;
	})();
	exports.BaseQueryList = BaseQueryList;
	exports.__esModule = true;
	//# sourceMappingURL=base_query_list.js.map

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(108);
	var view_1 = __webpack_require__(104);
	var lang_1 = __webpack_require__(60);
	var collection_1 = __webpack_require__(61);
	var reflection_1 = __webpack_require__(68);
	var TemplateResolver = (function () {
	    function TemplateResolver() {
	        this._cache = collection_1.MapWrapper.create();
	    }
	    TemplateResolver.prototype.resolve = function (component) {
	        var view = collection_1.MapWrapper.get(this._cache, component);
	        if (lang_1.isBlank(view)) {
	            view = this._resolve(component);
	            collection_1.MapWrapper.set(this._cache, component, view);
	        }
	        return view;
	    };
	    TemplateResolver.prototype._resolve = function (component) {
	        var annotations = reflection_1.reflector.annotations(component);
	        for (var i = 0; i < annotations.length; i++) {
	            var annotation = annotations[i];
	            if (annotation instanceof view_1.View) {
	                return annotation;
	            }
	        }
	        // No annotation = dynamic component!
	        return null;
	    };
	    TemplateResolver = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], TemplateResolver);
	    return TemplateResolver;
	})();
	exports.TemplateResolver = TemplateResolver;
	exports.__esModule = true;
	//# sourceMappingURL=template_resolver.js.map

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(108);
	var lang_1 = __webpack_require__(60);
	var collection_1 = __webpack_require__(61);
	var ComponentUrlMapper = (function () {
	    function ComponentUrlMapper() {
	    }
	    // Returns the base URL to the component source file.
	    // The returned URL could be:
	    // - an absolute URL,
	    // - a path relative to the application
	    ComponentUrlMapper.prototype.getUrl = function (component) { return './'; };
	    ComponentUrlMapper = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], ComponentUrlMapper);
	    return ComponentUrlMapper;
	})();
	exports.ComponentUrlMapper = ComponentUrlMapper;
	var RuntimeComponentUrlMapper = (function (_super) {
	    __extends(RuntimeComponentUrlMapper, _super);
	    function RuntimeComponentUrlMapper() {
	        _super.call(this);
	        this._componentUrls = collection_1.MapWrapper.create();
	    }
	    RuntimeComponentUrlMapper.prototype.setComponentUrl = function (component, url) {
	        collection_1.MapWrapper.set(this._componentUrls, component, url);
	    };
	    RuntimeComponentUrlMapper.prototype.getUrl = function (component) {
	        var url = collection_1.MapWrapper.get(this._componentUrls, component);
	        if (lang_1.isPresent(url))
	            return url;
	        return _super.prototype.getUrl.call(this, component);
	    };
	    return RuntimeComponentUrlMapper;
	})(ComponentUrlMapper);
	exports.RuntimeComponentUrlMapper = RuntimeComponentUrlMapper;
	exports.__esModule = true;
	//# sourceMappingURL=component_url_mapper.js.map

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(108);
	var collection_1 = __webpack_require__(61);
	var lang_1 = __webpack_require__(60);
	var reflection_1 = __webpack_require__(68);
	var change_detection_1 = __webpack_require__(58);
	var renderApi = __webpack_require__(122);
	var view_1 = __webpack_require__(125);
	var element_injector_1 = __webpack_require__(119);
	var BindingRecordsCreator = (function () {
	    function BindingRecordsCreator() {
	        this._directiveRecordsMap = collection_1.MapWrapper.create();
	        this._textNodeIndex = 0;
	    }
	    BindingRecordsCreator.prototype.getBindingRecords = function (elementBinders, allDirectiveMetadatas) {
	        var bindings = [];
	        for (var boundElementIndex = 0; boundElementIndex < elementBinders.length; boundElementIndex++) {
	            var renderElementBinder = elementBinders[boundElementIndex];
	            this._createTextNodeRecords(bindings, renderElementBinder);
	            this._createElementPropertyRecords(bindings, boundElementIndex, renderElementBinder);
	            this._createDirectiveRecords(bindings, boundElementIndex, renderElementBinder.directives, allDirectiveMetadatas);
	        }
	        return bindings;
	    };
	    BindingRecordsCreator.prototype.getDirectiveRecords = function (elementBinders, allDirectiveMetadatas) {
	        var directiveRecords = [];
	        for (var elementIndex = 0; elementIndex < elementBinders.length; ++elementIndex) {
	            var dirs = elementBinders[elementIndex].directives;
	            for (var dirIndex = 0; dirIndex < dirs.length; ++dirIndex) {
	                collection_1.ListWrapper.push(directiveRecords, this._getDirectiveRecord(elementIndex, dirIndex, allDirectiveMetadatas[dirs[dirIndex].directiveIndex]));
	            }
	        }
	        return directiveRecords;
	    };
	    BindingRecordsCreator.prototype._createTextNodeRecords = function (bindings, renderElementBinder) {
	        var _this = this;
	        if (lang_1.isBlank(renderElementBinder.textBindings))
	            return;
	        collection_1.ListWrapper.forEach(renderElementBinder.textBindings, function (b) {
	            collection_1.ListWrapper.push(bindings, change_detection_1.BindingRecord.createForTextNode(b, _this._textNodeIndex++));
	        });
	    };
	    BindingRecordsCreator.prototype._createElementPropertyRecords = function (bindings, boundElementIndex, renderElementBinder) {
	        collection_1.MapWrapper.forEach(renderElementBinder.propertyBindings, function (astWithSource, propertyName) {
	            collection_1.ListWrapper.push(bindings, change_detection_1.BindingRecord.createForElement(astWithSource, boundElementIndex, propertyName));
	        });
	    };
	    BindingRecordsCreator.prototype._createDirectiveRecords = function (bindings, boundElementIndex, directiveBinders, allDirectiveMetadatas) {
	        var _this = this;
	        for (var i = 0; i < directiveBinders.length; i++) {
	            var directiveBinder = directiveBinders[i];
	            var directiveMetadata = allDirectiveMetadatas[directiveBinder.directiveIndex];
	            // directive properties
	            collection_1.MapWrapper.forEach(directiveBinder.propertyBindings, function (astWithSource, propertyName) {
	                // TODO: these setters should eventually be created by change detection, to make
	                // it monomorphic!
	                var setter = reflection_1.reflector.setter(propertyName);
	                var directiveRecord = _this._getDirectiveRecord(boundElementIndex, i, directiveMetadata);
	                collection_1.ListWrapper.push(bindings, change_detection_1.BindingRecord.createForDirective(astWithSource, propertyName, setter, directiveRecord));
	            });
	            // host properties
	            collection_1.MapWrapper.forEach(directiveBinder.hostPropertyBindings, function (astWithSource, propertyName) {
	                var dirIndex = new change_detection_1.DirectiveIndex(boundElementIndex, i);
	                collection_1.ListWrapper.push(bindings, change_detection_1.BindingRecord.createForHostProperty(dirIndex, astWithSource, propertyName));
	            });
	        }
	    };
	    BindingRecordsCreator.prototype._getDirectiveRecord = function (boundElementIndex, directiveIndex, directiveMetadata) {
	        var id = boundElementIndex * 100 + directiveIndex;
	        if (!collection_1.MapWrapper.contains(this._directiveRecordsMap, id)) {
	            var changeDetection = directiveMetadata.changeDetection;
	            collection_1.MapWrapper.set(this._directiveRecordsMap, id, new change_detection_1.DirectiveRecord(new change_detection_1.DirectiveIndex(boundElementIndex, directiveIndex), directiveMetadata.callOnAllChangesDone, directiveMetadata.callOnChange, changeDetection));
	        }
	        return collection_1.MapWrapper.get(this._directiveRecordsMap, id);
	    };
	    return BindingRecordsCreator;
	})();
	var ProtoViewFactory = (function () {
	    function ProtoViewFactory(changeDetection) {
	        this._changeDetection = changeDetection;
	    }
	    ProtoViewFactory.prototype.createAppProtoViews = function (hostComponentBinding, rootRenderProtoView, allDirectives) {
	        var _this = this;
	        var allRenderDirectiveMetadata = collection_1.ListWrapper.map(allDirectives, function (directiveBinding) { return directiveBinding.metadata; });
	        var nestedPvsWithIndex = _collectNestedProtoViews(rootRenderProtoView);
	        var nestedPvVariableBindings = _collectNestedProtoViewsVariableBindings(nestedPvsWithIndex);
	        var nestedPvVariableNames = _collectNestedProtoViewsVariableNames(nestedPvsWithIndex, nestedPvVariableBindings);
	        var changeDetectorDefs = _getChangeDetectorDefinitions(hostComponentBinding.metadata, nestedPvsWithIndex, nestedPvVariableNames, allRenderDirectiveMetadata);
	        var protoChangeDetectors = collection_1.ListWrapper.map(changeDetectorDefs, function (changeDetectorDef) { return _this._changeDetection.createProtoChangeDetector(changeDetectorDef); });
	        var appProtoViews = collection_1.ListWrapper.createFixedSize(nestedPvsWithIndex.length);
	        collection_1.ListWrapper.forEach(nestedPvsWithIndex, function (pvWithIndex) {
	            var appProtoView = _createAppProtoView(pvWithIndex.renderProtoView, protoChangeDetectors[pvWithIndex.index], nestedPvVariableBindings[pvWithIndex.index], allDirectives);
	            if (lang_1.isPresent(pvWithIndex.parentIndex)) {
	                var parentView = appProtoViews[pvWithIndex.parentIndex];
	                parentView.elementBinders[pvWithIndex.boundElementIndex].nestedProtoView = appProtoView;
	            }
	            appProtoViews[pvWithIndex.index] = appProtoView;
	        });
	        return appProtoViews;
	    };
	    ProtoViewFactory = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [change_detection_1.ChangeDetection])
	    ], ProtoViewFactory);
	    return ProtoViewFactory;
	})();
	exports.ProtoViewFactory = ProtoViewFactory;
	/**
	 * Returns the data needed to create ChangeDetectors
	 * for the given ProtoView and all nested ProtoViews.
	 */
	function getChangeDetectorDefinitions(hostComponentMetadata, rootRenderProtoView, allRenderDirectiveMetadata) {
	    var nestedPvsWithIndex = _collectNestedProtoViews(rootRenderProtoView);
	    var nestedPvVariableBindings = _collectNestedProtoViewsVariableBindings(nestedPvsWithIndex);
	    var nestedPvVariableNames = _collectNestedProtoViewsVariableNames(nestedPvsWithIndex, nestedPvVariableBindings);
	    return _getChangeDetectorDefinitions(hostComponentMetadata, nestedPvsWithIndex, nestedPvVariableNames, allRenderDirectiveMetadata);
	}
	exports.getChangeDetectorDefinitions = getChangeDetectorDefinitions;
	function _collectNestedProtoViews(renderProtoView, parentIndex, boundElementIndex, result) {
	    if (parentIndex === void 0) { parentIndex = null; }
	    if (boundElementIndex === void 0) { boundElementIndex = null; }
	    if (result === void 0) { result = null; }
	    if (lang_1.isBlank(result)) {
	        result = [];
	    }
	    collection_1.ListWrapper.push(result, new RenderProtoViewWithIndex(renderProtoView, result.length, parentIndex, boundElementIndex));
	    var currentIndex = result.length - 1;
	    var childBoundElementIndex = 0;
	    collection_1.ListWrapper.forEach(renderProtoView.elementBinders, function (elementBinder) {
	        if (lang_1.isPresent(elementBinder.nestedProtoView)) {
	            _collectNestedProtoViews(elementBinder.nestedProtoView, currentIndex, childBoundElementIndex, result);
	        }
	        childBoundElementIndex++;
	    });
	    return result;
	}
	function _getChangeDetectorDefinitions(hostComponentMetadata, nestedPvsWithIndex, nestedPvVariableNames, allRenderDirectiveMetadata) {
	    return collection_1.ListWrapper.map(nestedPvsWithIndex, function (pvWithIndex) {
	        var elementBinders = pvWithIndex.renderProtoView.elementBinders;
	        var bindingRecordsCreator = new BindingRecordsCreator();
	        var bindingRecords = bindingRecordsCreator.getBindingRecords(elementBinders, allRenderDirectiveMetadata);
	        var directiveRecords = bindingRecordsCreator.getDirectiveRecords(elementBinders, allRenderDirectiveMetadata);
	        var strategyName = change_detection_1.DEFAULT;
	        var typeString;
	        if (pvWithIndex.renderProtoView.type === renderApi.ProtoViewDto.COMPONENT_VIEW_TYPE) {
	            strategyName = hostComponentMetadata.changeDetection;
	            typeString = 'comp';
	        }
	        else if (pvWithIndex.renderProtoView.type === renderApi.ProtoViewDto.HOST_VIEW_TYPE) {
	            typeString = 'host';
	        }
	        else {
	            typeString = 'embedded';
	        }
	        var id = hostComponentMetadata.id + "_" + typeString + "_" + pvWithIndex.index;
	        var variableNames = nestedPvVariableNames[pvWithIndex.index];
	        return new change_detection_1.ChangeDetectorDefinition(id, strategyName, variableNames, bindingRecords, directiveRecords);
	    });
	}
	function _createAppProtoView(renderProtoView, protoChangeDetector, variableBindings, allDirectives) {
	    var elementBinders = renderProtoView.elementBinders;
	    var protoView = new view_1.AppProtoView(renderProtoView.render, protoChangeDetector, variableBindings);
	    // TODO: vsavkin refactor to pass element binders into proto view
	    _createElementBinders(protoView, elementBinders, allDirectives);
	    _bindDirectiveEvents(protoView, elementBinders);
	    return protoView;
	}
	function _collectNestedProtoViewsVariableBindings(nestedPvsWithIndex) {
	    return collection_1.ListWrapper.map(nestedPvsWithIndex, function (pvWithIndex) {
	        return _createVariableBindings(pvWithIndex.renderProtoView);
	    });
	}
	function _createVariableBindings(renderProtoView) {
	    var variableBindings = collection_1.MapWrapper.create();
	    collection_1.MapWrapper.forEach(renderProtoView.variableBindings, function (mappedName, varName) {
	        collection_1.MapWrapper.set(variableBindings, varName, mappedName);
	    });
	    collection_1.ListWrapper.forEach(renderProtoView.elementBinders, function (binder) {
	        collection_1.MapWrapper.forEach(binder.variableBindings, function (mappedName, varName) {
	            collection_1.MapWrapper.set(variableBindings, varName, mappedName);
	        });
	    });
	    return variableBindings;
	}
	function _collectNestedProtoViewsVariableNames(nestedPvsWithIndex, nestedPvVariableBindings) {
	    var nestedPvVariableNames = collection_1.ListWrapper.createFixedSize(nestedPvsWithIndex.length);
	    collection_1.ListWrapper.forEach(nestedPvsWithIndex, function (pvWithIndex) {
	        var parentVariableNames = lang_1.isPresent(pvWithIndex.parentIndex) ? nestedPvVariableNames[pvWithIndex.parentIndex] : null;
	        nestedPvVariableNames[pvWithIndex.index] =
	            _createVariableNames(parentVariableNames, nestedPvVariableBindings[pvWithIndex.index]);
	    });
	    return nestedPvVariableNames;
	}
	function _createVariableNames(parentVariableNames, variableBindings) {
	    var variableNames = lang_1.isPresent(parentVariableNames) ? collection_1.ListWrapper.clone(parentVariableNames) : [];
	    collection_1.MapWrapper.forEach(variableBindings, function (local, v) { collection_1.ListWrapper.push(variableNames, local); });
	    return variableNames;
	}
	function _createElementBinders(protoView, elementBinders, allDirectiveBindings) {
	    for (var i = 0; i < elementBinders.length; i++) {
	        var renderElementBinder = elementBinders[i];
	        var dirs = elementBinders[i].directives;
	        var parentPeiWithDistance = _findParentProtoElementInjectorWithDistance(i, protoView.elementBinders, elementBinders);
	        var directiveBindings = collection_1.ListWrapper.map(dirs, function (dir) { return allDirectiveBindings[dir.directiveIndex]; });
	        var componentDirectiveBinding = null;
	        if (directiveBindings.length > 0) {
	            if (directiveBindings[0].metadata.type === renderApi.DirectiveMetadata.COMPONENT_TYPE) {
	                componentDirectiveBinding = directiveBindings[0];
	            }
	        }
	        var protoElementInjector = _createProtoElementInjector(i, parentPeiWithDistance, renderElementBinder, componentDirectiveBinding, directiveBindings);
	        _createElementBinder(protoView, i, renderElementBinder, protoElementInjector, componentDirectiveBinding);
	    }
	}
	function _findParentProtoElementInjectorWithDistance(binderIndex, elementBinders, renderElementBinders) {
	    var distance = 0;
	    do {
	        var renderElementBinder = renderElementBinders[binderIndex];
	        binderIndex = renderElementBinder.parentIndex;
	        if (binderIndex !== -1) {
	            distance += renderElementBinder.distanceToParent;
	            var elementBinder = elementBinders[binderIndex];
	            if (lang_1.isPresent(elementBinder.protoElementInjector)) {
	                return new ParentProtoElementInjectorWithDistance(elementBinder.protoElementInjector, distance);
	            }
	        }
	    } while (binderIndex !== -1);
	    return new ParentProtoElementInjectorWithDistance(null, -1);
	}
	function _createProtoElementInjector(binderIndex, parentPeiWithDistance, renderElementBinder, componentDirectiveBinding, directiveBindings) {
	    var protoElementInjector = null;
	    // Create a protoElementInjector for any element that either has bindings *or* has one
	    // or more var- defined. Elements with a var- defined need a their own element injector
	    // so that, when hydrating, $implicit can be set to the element.
	    var hasVariables = collection_1.MapWrapper.size(renderElementBinder.variableBindings) > 0;
	    if (directiveBindings.length > 0 || hasVariables) {
	        protoElementInjector = element_injector_1.ProtoElementInjector.create(parentPeiWithDistance.protoElementInjector, binderIndex, directiveBindings, lang_1.isPresent(componentDirectiveBinding), parentPeiWithDistance.distance);
	        protoElementInjector.attributes = renderElementBinder.readAttributes;
	        if (hasVariables) {
	            protoElementInjector.exportComponent = lang_1.isPresent(componentDirectiveBinding);
	            protoElementInjector.exportElement = lang_1.isBlank(componentDirectiveBinding);
	            // experiment
	            var exportImplicitName = collection_1.MapWrapper.get(renderElementBinder.variableBindings, '\$implicit');
	            if (lang_1.isPresent(exportImplicitName)) {
	                protoElementInjector.exportImplicitName = exportImplicitName;
	            }
	        }
	    }
	    return protoElementInjector;
	}
	function _createElementBinder(protoView, boundElementIndex, renderElementBinder, protoElementInjector, componentDirectiveBinding) {
	    var parent = null;
	    if (renderElementBinder.parentIndex !== -1) {
	        parent = protoView.elementBinders[renderElementBinder.parentIndex];
	    }
	    var elBinder = protoView.bindElement(parent, renderElementBinder.distanceToParent, protoElementInjector, componentDirectiveBinding);
	    protoView.bindEvent(renderElementBinder.eventBindings, boundElementIndex, -1);
	    // variables
	    // The view's locals needs to have a full set of variable names at construction time
	    // in order to prevent new variables from being set later in the lifecycle. Since we don't want
	    // to actually create variable bindings for the $implicit bindings, add to the
	    // protoLocals manually.
	    collection_1.MapWrapper.forEach(renderElementBinder.variableBindings, function (mappedName, varName) {
	        collection_1.MapWrapper.set(protoView.protoLocals, mappedName, null);
	    });
	    return elBinder;
	}
	function _bindDirectiveEvents(protoView, elementBinders) {
	    for (var boundElementIndex = 0; boundElementIndex < elementBinders.length; ++boundElementIndex) {
	        var dirs = elementBinders[boundElementIndex].directives;
	        for (var i = 0; i < dirs.length; i++) {
	            var directiveBinder = dirs[i];
	            // directive events
	            protoView.bindEvent(directiveBinder.eventBindings, boundElementIndex, i);
	        }
	    }
	}
	var RenderProtoViewWithIndex = (function () {
	    function RenderProtoViewWithIndex(renderProtoView, index, parentIndex, boundElementIndex) {
	        this.renderProtoView = renderProtoView;
	        this.index = index;
	        this.parentIndex = parentIndex;
	        this.boundElementIndex = boundElementIndex;
	    }
	    return RenderProtoViewWithIndex;
	})();
	var ParentProtoElementInjectorWithDistance = (function () {
	    function ParentProtoElementInjectorWithDistance(protoElementInjector, distance) {
	        this.protoElementInjector = protoElementInjector;
	        this.distance = distance;
	    }
	    return ParentProtoElementInjectorWithDistance;
	})();
	exports.__esModule = true;
	//# sourceMappingURL=proto_view_factory.js.map

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(108);
	var lang_1 = __webpack_require__(60);
	var dom_adapter_1 = __webpack_require__(107);
	var UrlResolver = (function () {
	    function UrlResolver() {
	        if (lang_1.isBlank(UrlResolver.a)) {
	            UrlResolver.a = dom_adapter_1.DOM.createElement('a');
	        }
	    }
	    /**
	     * Resolves the `url` given the `baseUrl`.
	     *
	     * ## When the `baseUrl` is null
	     *
	     * `url` is resolved in the context of the current document.
	     * If the document location is 'http://www.foo.com/base' and the `url` is 'path/to/here', the
	     * resolved url will be
	     * 'http://www.foo.com/base/path/to/here'
	     *
	     * ## When the `baseUrl` is not null
	     *
	     * - when the `url` is null, the `baseUrl` is returned,
	     * - due to a limitation in the process used to resolve urls (a HTMLLinkElement), `url` must not
	     * start with a `/`,
	     * - if `url` is relative ('path/to/here', './path/to/here'), the resolved url is a combination of
	     * `baseUrl` and `url`,
	     * - if `url` is absolute (it has a scheme: 'http://', 'https://'), the `url` is returned
	     * (ignoring the `baseUrl`)
	     *
	     * @param {string} baseUrl
	     * @param {string} url
	     * @returns {string} the resolved URL
	     */
	    UrlResolver.prototype.resolve = function (baseUrl, url) {
	        if (lang_1.isBlank(baseUrl)) {
	            dom_adapter_1.DOM.resolveAndSetHref(UrlResolver.a, url, null);
	            return dom_adapter_1.DOM.getHref(UrlResolver.a);
	        }
	        if (lang_1.isBlank(url) || url == '')
	            return baseUrl;
	        if (url[0] == '/') {
	            // The `HTMLLinkElement` does not allow resolving this case (the `url` would be interpreted as
	            // relative):
	            // - `baseUrl` = 'http://www.foo.com/base'
	            // - `url` = '/absolute/path/to/here'
	            // - the result would be 'http://www.foo.com/base/absolute/path/to/here' while
	            // 'http://www.foo.com/absolute/path/to/here'
	            // is expected (without the 'base' segment).
	            throw new lang_1.BaseException("Could not resolve the url " + url + " from " + baseUrl);
	        }
	        var m = lang_1.RegExpWrapper.firstMatch(_schemeRe, url);
	        if (lang_1.isPresent(m[1])) {
	            return url;
	        }
	        dom_adapter_1.DOM.resolveAndSetHref(UrlResolver.a, baseUrl, url);
	        return dom_adapter_1.DOM.getHref(UrlResolver.a);
	    };
	    UrlResolver = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], UrlResolver);
	    return UrlResolver;
	})();
	exports.UrlResolver = UrlResolver;
	var _schemeRe = lang_1.RegExpWrapper.create('^([^:/?#]+:)?');
	exports.__esModule = true;
	//# sourceMappingURL=url_resolver.js.map

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(108);
	var lang_1 = __webpack_require__(60);
	var collection_1 = __webpack_require__(61);
	var dom_adapter_1 = __webpack_require__(107);
	/**
	 * Provides a hook for centralized exception handling.
	 *
	 * The default implementation of `ExceptionHandler` prints error messages to the `Console`. To
	 * intercept error handling,
	 * write a custom exception handler that replaces this default as appropriate for your app.
	 *
	 * # Example
	 *
	 * ```javascript
	 * @Component({
	 *   selector: 'my-app',
	 *   appInjector: [
	 *     bind(ExceptionHandler).toClass(MyExceptionHandler)
	 *   ]
	 * })
	 * @View(...)
	 * class MyApp { ... }
	 *
	 *
	 * class MyExceptionHandler implements ExceptionHandler {
	 *   call(error, stackTrace = null, reason = null) {
	 *     // do something with the exception
	 *   }
	 * }
	 *
	 * ```
	 *
	 * @exportedAs angular2/core
	 */
	var ExceptionHandler = (function () {
	    function ExceptionHandler() {
	    }
	    ExceptionHandler.prototype.call = function (error, stackTrace, reason) {
	        if (stackTrace === void 0) { stackTrace = null; }
	        if (reason === void 0) { reason = null; }
	        var longStackTrace = collection_1.isListLikeIterable(stackTrace) ? collection_1.ListWrapper.join(stackTrace, "\n\n") : stackTrace;
	        var reasonStr = lang_1.isPresent(reason) ? "\n" + reason : '';
	        dom_adapter_1.DOM.logError("" + error + reasonStr + "\nSTACKTRACE:\n" + longStackTrace);
	    };
	    ExceptionHandler = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], ExceptionHandler);
	    return ExceptionHandler;
	})();
	exports.ExceptionHandler = ExceptionHandler;
	exports.__esModule = true;
	//# sourceMappingURL=exception_handler.js.map

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(108);
	var lang_1 = __webpack_require__(60);
	var collection_1 = __webpack_require__(61);
	var async_1 = __webpack_require__(94);
	var dom_adapter_1 = __webpack_require__(107);
	var xhr_1 = __webpack_require__(141);
	var url_resolver_1 = __webpack_require__(138);
	/**
	 * Strategy to load component templates.
	 * TODO: Make public API once we are more confident in this approach.
	 */
	var TemplateLoader = (function () {
	    function TemplateLoader(xhr, urlResolver) {
	        this._xhr = xhr;
	        this._htmlCache = collection_1.StringMapWrapper.create();
	    }
	    TemplateLoader.prototype.load = function (template) {
	        if (lang_1.isPresent(template.template)) {
	            return async_1.PromiseWrapper.resolve(dom_adapter_1.DOM.createTemplate(template.template));
	        }
	        var url = template.absUrl;
	        if (lang_1.isPresent(url)) {
	            var promise = collection_1.StringMapWrapper.get(this._htmlCache, url);
	            if (lang_1.isBlank(promise)) {
	                promise = this._xhr.get(url).then(function (html) {
	                    var template = dom_adapter_1.DOM.createTemplate(html);
	                    return template;
	                });
	                collection_1.StringMapWrapper.set(this._htmlCache, url, promise);
	            }
	            // We need to clone the result as others might change it
	            // (e.g. the compiler).
	            return promise.then(function (tplElement) { return dom_adapter_1.DOM.clone(tplElement); });
	        }
	        throw new lang_1.BaseException('View should have either the url or template property set');
	    };
	    TemplateLoader = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [xhr_1.XHR, url_resolver_1.UrlResolver])
	    ], TemplateLoader);
	    return TemplateLoader;
	})();
	exports.TemplateLoader = TemplateLoader;
	exports.__esModule = true;
	//# sourceMappingURL=template_loader.js.map

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	var XHR = (function () {
	    function XHR() {
	    }
	    XHR.prototype.get = function (url) { return null; };
	    return XHR;
	})();
	exports.XHR = XHR;
	exports.__esModule = true;
	//# sourceMappingURL=xhr.js.map

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	var collection_1 = __webpack_require__(61);
	var lang_1 = __webpack_require__(60);
	/**
	 * A wrapper around zones that lets you schedule tasks after it has executed a task.
	 *
	 * The wrapper maintains an "inner" and an "mount" `Zone`. The application code will executes
	 * in the "inner" zone unless `runOutsideAngular` is explicitely called.
	 *
	 * A typical application will create a singleton `NgZone`. The outer `Zone` is a fork of the root
	 * `Zone`. The default `onTurnDone` runs the Angular change detection.
	 *
	 * @exportedAs angular2/core
	 */
	var NgZone = (function () {
	    /**
	     * Associates with this
	     *
	     * - a "root" zone, which the one that instantiated this.
	     * - an "inner" zone, which is a child of the root zone.
	     *
	     * @param {bool} enableLongStackTrace whether to enable long stack trace. They should only be
	     *               enabled in development mode as they significantly impact perf.
	     */
	    function NgZone(_a) {
	        var enableLongStackTrace = _a.enableLongStackTrace;
	        this._onTurnStart = null;
	        this._onTurnDone = null;
	        this._onErrorHandler = null;
	        this._pendingMicrotasks = 0;
	        this._hasExecutedCodeInInnerZone = false;
	        this._nestedRun = 0;
	        if (lang_1.global.zone) {
	            this._disabled = false;
	            this._mountZone = lang_1.global.zone;
	            this._innerZone = this._createInnerZone(this._mountZone, enableLongStackTrace);
	        }
	        else {
	            this._disabled = true;
	            this._mountZone = null;
	        }
	    }
	    /**
	     * Initializes the zone hooks.
	     *
	     * @param {() => void} onTurnStart called before code executes in the inner zone for each VM turn
	     * @param {() => void} onTurnDone called at the end of a VM turn if code has executed in the inner
	     * zone
	     * @param {(error, stack) => void} onErrorHandler called when an exception is thrown by a macro or
	     * micro task
	     */
	    NgZone.prototype.initCallbacks = function (_a) {
	        var _b = _a === void 0 ? {} : _a, onTurnStart = _b.onTurnStart, onTurnDone = _b.onTurnDone, onErrorHandler = _b.onErrorHandler;
	        this._onTurnStart = lang_1.normalizeBlank(onTurnStart);
	        this._onTurnDone = lang_1.normalizeBlank(onTurnDone);
	        this._onErrorHandler = lang_1.normalizeBlank(onErrorHandler);
	    };
	    /**
	     * Runs `fn` in the inner zone and returns whatever it returns.
	     *
	     * In a typical app where the inner zone is the Angular zone, this allows one to make use of the
	     * Angular's auto digest mechanism.
	     *
	     * ```
	     * var zone: NgZone = [ref to the application zone];
	     *
	     * zone.run(() => {
	     *   // the change detection will run after this function and the microtasks it enqueues have
	     * executed.
	     * });
	     * ```
	     */
	    NgZone.prototype.run = function (fn) {
	        if (this._disabled) {
	            return fn();
	        }
	        else {
	            return this._innerZone.run(fn);
	        }
	    };
	    /**
	     * Runs `fn` in the outer zone and returns whatever it returns.
	     *
	     * In a typical app where the inner zone is the Angular zone, this allows one to escape Angular's
	     * auto-digest mechanism.
	     *
	     * ```
	     * var zone: NgZone = [ref to the application zone];
	     *
	     * zone.runOusideAngular(() => {
	     *   element.onClick(() => {
	     *     // Clicking on the element would not trigger the change detection
	     *   });
	     * });
	     * ```
	     */
	    NgZone.prototype.runOutsideAngular = function (fn) {
	        if (this._disabled) {
	            return fn();
	        }
	        else {
	            return this._mountZone.run(fn);
	        }
	    };
	    NgZone.prototype._createInnerZone = function (zone, enableLongStackTrace) {
	        var ngZone = this;
	        var errorHandling;
	        if (enableLongStackTrace) {
	            errorHandling = collection_1.StringMapWrapper.merge(Zone.longStackTraceZone, { onError: function (e) { ngZone._onError(this, e); } });
	        }
	        else {
	            errorHandling = {
	                onError: function (e) { ngZone._onError(this, e); }
	            };
	        }
	        return zone.fork(errorHandling)
	            .fork({
	            '$run': function (parentRun) {
	                return function () {
	                    try {
	                        ngZone._nestedRun++;
	                        if (!ngZone._hasExecutedCodeInInnerZone) {
	                            ngZone._hasExecutedCodeInInnerZone = true;
	                            if (ngZone._onTurnStart) {
	                                parentRun.call(ngZone._innerZone, ngZone._onTurnStart);
	                            }
	                        }
	                        return parentRun.apply(this, arguments);
	                    }
	                    finally {
	                        ngZone._nestedRun--;
	                        // If there are no more pending microtasks, we are at the end of a VM turn (or in
	                        // onTurnStart)
	                        // _nestedRun will be 0 at the end of a macrotasks (it could be > 0 when there are
	                        // nested calls
	                        // to run()).
	                        if (ngZone._pendingMicrotasks == 0 && ngZone._nestedRun == 0) {
	                            if (ngZone._onTurnDone && ngZone._hasExecutedCodeInInnerZone) {
	                                try {
	                                    parentRun.call(ngZone._innerZone, ngZone._onTurnDone);
	                                }
	                                finally {
	                                    ngZone._hasExecutedCodeInInnerZone = false;
	                                }
	                            }
	                        }
	                    }
	                };
	            },
	            '$scheduleMicrotask': function (parentScheduleMicrotask) {
	                return function (fn) {
	                    ngZone._pendingMicrotasks++;
	                    var microtask = function () {
	                        try {
	                            fn();
	                        }
	                        finally {
	                            ngZone._pendingMicrotasks--;
	                        }
	                    };
	                    parentScheduleMicrotask.call(this, microtask);
	                };
	            },
	            _innerZone: true
	        });
	    };
	    NgZone.prototype._onError = function (zone, e) {
	        if (lang_1.isPresent(this._onErrorHandler)) {
	            var trace = [lang_1.normalizeBlank(e.stack)];
	            while (zone && zone.constructedAtException) {
	                trace.push(zone.constructedAtException.get());
	                zone = zone.parent;
	            }
	            this._onErrorHandler(e, trace);
	        }
	        else {
	            console.log('## _onError ##');
	            console.log(e.stack);
	            throw e;
	        }
	    };
	    return NgZone;
	})();
	exports.NgZone = NgZone;
	exports.__esModule = true;
	//# sourceMappingURL=ng_zone.js.map

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(108);
	var change_detection_1 = __webpack_require__(58);
	var exception_handler_1 = __webpack_require__(139);
	var lang_1 = __webpack_require__(60);
	/**
	 * Provides access to explicitly trigger change detection in an application.
	 *
	 * By default, `Zone` triggers change detection in Angular on each virtual machine (VM) turn. When
	 * testing, or in some
	 * limited application use cases, a developer can also trigger change detection with the
	 * `lifecycle.tick()` method.
	 *
	 * Each Angular application has a single `LifeCycle` instance.
	 *
	 * # Example
	 *
	 * This is a contrived example, since the bootstrap automatically runs inside of the `Zone`, which
	 * invokes
	 * `lifecycle.tick()` on your behalf.
	 *
	 * ```javascript
	 * bootstrap(MyApp).then((ref:ComponentRef) => {
	 *   var lifeCycle = ref.injector.get(LifeCycle);
	 *   var myApp = ref.instance;
	 *
	 *   ref.doSomething();
	 *   lifecycle.tick();
	 * });
	 * ```
	 * @exportedAs angular2/change_detection
	 */
	var LifeCycle = (function () {
	    function LifeCycle(exceptionHandler, changeDetector, enforceNoNewChanges) {
	        if (changeDetector === void 0) { changeDetector = null; }
	        if (enforceNoNewChanges === void 0) { enforceNoNewChanges = false; }
	        this._errorHandler = function (exception, stackTrace) {
	            exceptionHandler.call(exception, stackTrace);
	            throw exception;
	        };
	        this._changeDetector =
	            changeDetector; // may be null when instantiated from application bootstrap
	        this._enforceNoNewChanges = enforceNoNewChanges;
	    }
	    /**
	     * @private
	     */
	    LifeCycle.prototype.registerWith = function (zone, changeDetector) {
	        var _this = this;
	        if (changeDetector === void 0) { changeDetector = null; }
	        if (lang_1.isPresent(changeDetector)) {
	            this._changeDetector = changeDetector;
	        }
	        zone.initCallbacks({ onErrorHandler: this._errorHandler, onTurnDone: function () { return _this.tick(); } });
	    };
	    /**
	     *  Invoke this method to explicitly process change detection and its side-effects.
	     *
	     *  In development mode, `tick()` also performs a second change detection cycle to ensure that no
	     * further
	     *  changes are detected. If additional changes are picked up during this second cycle, bindings in
	     * the app have
	     *  side-effects that cannot be resolved in a single change detection pass. In this case, Angular
	     * throws an error,
	     *  since an Angular application can only have one change detection pass during which all change
	     * detection must
	     *  complete.
	     *
	     */
	    LifeCycle.prototype.tick = function () {
	        this._changeDetector.detectChanges();
	        if (this._enforceNoNewChanges) {
	            this._changeDetector.checkNoChanges();
	        }
	    };
	    LifeCycle = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [exception_handler_1.ExceptionHandler, change_detection_1.ChangeDetector, Boolean])
	    ], LifeCycle);
	    return LifeCycle;
	})();
	exports.LifeCycle = LifeCycle;
	exports.__esModule = true;
	//# sourceMappingURL=life_cycle.js.map

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var dom_adapter_1 = __webpack_require__(107);
	var light_dom_1 = __webpack_require__(145);
	var shadow_dom_strategy_1 = __webpack_require__(100);
	var util_1 = __webpack_require__(146);
	/**
	 * This strategy emulates the Shadow DOM for the templates, styles **excluded**:
	 * - components templates are added as children of their component element,
	 * - styles are moved from the templates to the styleHost (i.e. the document head).
	 *
	 * Notes:
	 * - styles are **not** scoped to their component and will apply to the whole document,
	 * - you can **not** use shadow DOM specific selectors in the styles
	 */
	var EmulatedUnscopedShadowDomStrategy = (function (_super) {
	    __extends(EmulatedUnscopedShadowDomStrategy, _super);
	    function EmulatedUnscopedShadowDomStrategy(styleUrlResolver, styleHost) {
	        _super.call(this);
	        this.styleUrlResolver = styleUrlResolver;
	        this.styleHost = styleHost;
	    }
	    EmulatedUnscopedShadowDomStrategy.prototype.hasNativeContentElement = function () { return false; };
	    EmulatedUnscopedShadowDomStrategy.prototype.prepareShadowRoot = function (el) { return el; };
	    EmulatedUnscopedShadowDomStrategy.prototype.constructLightDom = function (lightDomView, el) {
	        return new light_dom_1.LightDom(lightDomView, el);
	    };
	    EmulatedUnscopedShadowDomStrategy.prototype.processStyleElement = function (hostComponentId, templateUrl, styleEl) {
	        var cssText = dom_adapter_1.DOM.getText(styleEl);
	        cssText = this.styleUrlResolver.resolveUrls(cssText, templateUrl);
	        dom_adapter_1.DOM.setText(styleEl, cssText);
	        dom_adapter_1.DOM.remove(styleEl);
	        util_1.insertSharedStyleText(cssText, this.styleHost, styleEl);
	        return null;
	    };
	    return EmulatedUnscopedShadowDomStrategy;
	})(shadow_dom_strategy_1.ShadowDomStrategy);
	exports.EmulatedUnscopedShadowDomStrategy = EmulatedUnscopedShadowDomStrategy;
	exports.__esModule = true;
	//# sourceMappingURL=emulated_unscoped_shadow_dom_strategy.js.map

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	var dom_adapter_1 = __webpack_require__(107);
	var collection_1 = __webpack_require__(61);
	var lang_1 = __webpack_require__(60);
	var DestinationLightDom = (function () {
	    function DestinationLightDom() {
	    }
	    return DestinationLightDom;
	})();
	exports.DestinationLightDom = DestinationLightDom;
	var _Root = (function () {
	    function _Root(node, boundElementIndex) {
	        this.node = node;
	        this.boundElementIndex = boundElementIndex;
	    }
	    return _Root;
	})();
	// TODO: LightDom should implement DestinationLightDom
	// once interfaces are supported
	var LightDom = (function () {
	    function LightDom(lightDomView, element) {
	        this.lightDomView = lightDomView;
	        this.nodes = dom_adapter_1.DOM.childNodesAsList(element);
	        this._roots = null;
	        this.shadowDomView = null;
	    }
	    LightDom.prototype.attachShadowDomView = function (shadowDomView) { this.shadowDomView = shadowDomView; };
	    LightDom.prototype.detachShadowDomView = function () { this.shadowDomView = null; };
	    LightDom.prototype.redistribute = function () { redistributeNodes(this.contentTags(), this.expandedDomNodes()); };
	    LightDom.prototype.contentTags = function () {
	        if (lang_1.isPresent(this.shadowDomView)) {
	            return this._collectAllContentTags(this.shadowDomView, []);
	        }
	        else {
	            return [];
	        }
	    };
	    // Collects the Content directives from the view and all its child views
	    LightDom.prototype._collectAllContentTags = function (view, acc) {
	        var _this = this;
	        var contentTags = view.contentTags;
	        var vcs = view.viewContainers;
	        for (var i = 0; i < vcs.length; i++) {
	            var vc = vcs[i];
	            var contentTag = contentTags[i];
	            if (lang_1.isPresent(contentTag)) {
	                collection_1.ListWrapper.push(acc, contentTag);
	            }
	            if (lang_1.isPresent(vc)) {
	                collection_1.ListWrapper.forEach(vc.contentTagContainers(), function (view) { _this._collectAllContentTags(view, acc); });
	            }
	        }
	        return acc;
	    };
	    // Collects the nodes of the light DOM by merging:
	    // - nodes from enclosed ViewContainers,
	    // - nodes from enclosed content tags,
	    // - plain DOM nodes
	    LightDom.prototype.expandedDomNodes = function () {
	        var res = [];
	        var roots = this._findRoots();
	        for (var i = 0; i < roots.length; ++i) {
	            var root = roots[i];
	            if (lang_1.isPresent(root.boundElementIndex)) {
	                var vc = this.lightDomView.viewContainers[root.boundElementIndex];
	                var content = this.lightDomView.contentTags[root.boundElementIndex];
	                if (lang_1.isPresent(vc)) {
	                    res = collection_1.ListWrapper.concat(res, vc.nodes());
	                }
	                else if (lang_1.isPresent(content)) {
	                    res = collection_1.ListWrapper.concat(res, content.nodes());
	                }
	                else {
	                    collection_1.ListWrapper.push(res, root.node);
	                }
	            }
	            else {
	                collection_1.ListWrapper.push(res, root.node);
	            }
	        }
	        return res;
	    };
	    // Returns a list of Roots for all the nodes of the light DOM.
	    // The Root object contains the DOM node and its corresponding boundElementIndex
	    LightDom.prototype._findRoots = function () {
	        if (lang_1.isPresent(this._roots))
	            return this._roots;
	        var boundElements = this.lightDomView.boundElements;
	        this._roots = collection_1.ListWrapper.map(this.nodes, function (n) {
	            var boundElementIndex = null;
	            for (var i = 0; i < boundElements.length; i++) {
	                var boundEl = boundElements[i];
	                if (lang_1.isPresent(boundEl) && boundEl === n) {
	                    boundElementIndex = i;
	                    break;
	                }
	            }
	            return new _Root(n, boundElementIndex);
	        });
	        return this._roots;
	    };
	    return LightDom;
	})();
	exports.LightDom = LightDom;
	// Projects the light DOM into the shadow DOM
	function redistributeNodes(contents, nodes) {
	    for (var i = 0; i < contents.length; ++i) {
	        var content = contents[i];
	        var select = content.select;
	        // Empty selector is identical to <content/>
	        if (select.length === 0) {
	            content.insert(collection_1.ListWrapper.clone(nodes));
	            collection_1.ListWrapper.clear(nodes);
	        }
	        else {
	            var matchSelector = function (n) { return dom_adapter_1.DOM.elementMatches(n, select); };
	            var matchingNodes = collection_1.ListWrapper.filter(nodes, matchSelector);
	            content.insert(matchingNodes);
	            collection_1.ListWrapper.removeAll(nodes, matchingNodes);
	        }
	    }
	    for (var i = 0; i < nodes.length; i++) {
	        var node = nodes[i];
	        if (lang_1.isPresent(node.parentNode)) {
	            dom_adapter_1.DOM.remove(nodes[i]);
	        }
	    }
	}
	exports.__esModule = true;
	//# sourceMappingURL=light_dom.js.map

/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	var lang_1 = __webpack_require__(60);
	var collection_1 = __webpack_require__(61);
	var dom_adapter_1 = __webpack_require__(107);
	var shadow_css_1 = __webpack_require__(147);
	var _componentUIDs = collection_1.MapWrapper.create();
	var _nextComponentUID = 0;
	var _sharedStyleTexts = collection_1.MapWrapper.create();
	var _lastInsertedStyleEl;
	function getComponentId(componentStringId) {
	    var id = collection_1.MapWrapper.get(_componentUIDs, componentStringId);
	    if (lang_1.isBlank(id)) {
	        id = _nextComponentUID++;
	        collection_1.MapWrapper.set(_componentUIDs, componentStringId, id);
	    }
	    return id;
	}
	exports.getComponentId = getComponentId;
	function insertSharedStyleText(cssText, styleHost, styleEl) {
	    if (!collection_1.MapWrapper.contains(_sharedStyleTexts, cssText)) {
	        // Styles are unscoped and shared across components, only append them to the head
	        // when there are not present yet
	        collection_1.MapWrapper.set(_sharedStyleTexts, cssText, true);
	        insertStyleElement(styleHost, styleEl);
	    }
	}
	exports.insertSharedStyleText = insertSharedStyleText;
	function insertStyleElement(host, styleEl) {
	    if (lang_1.isBlank(_lastInsertedStyleEl)) {
	        var firstChild = dom_adapter_1.DOM.firstChild(host);
	        if (lang_1.isPresent(firstChild)) {
	            dom_adapter_1.DOM.insertBefore(firstChild, styleEl);
	        }
	        else {
	            dom_adapter_1.DOM.appendChild(host, styleEl);
	        }
	    }
	    else {
	        dom_adapter_1.DOM.insertAfter(_lastInsertedStyleEl, styleEl);
	    }
	    _lastInsertedStyleEl = styleEl;
	}
	exports.insertStyleElement = insertStyleElement;
	// Return the attribute to be added to the component
	function getHostAttribute(id) {
	    return "_nghost-" + id;
	}
	exports.getHostAttribute = getHostAttribute;
	// Returns the attribute to be added on every single element nodes in the component
	function getContentAttribute(id) {
	    return "_ngcontent-" + id;
	}
	exports.getContentAttribute = getContentAttribute;
	function shimCssForComponent(cssText, componentId) {
	    var id = getComponentId(componentId);
	    var shadowCss = new shadow_css_1.ShadowCss();
	    return shadowCss.shimCssText(cssText, getContentAttribute(id), getHostAttribute(id));
	}
	exports.shimCssForComponent = shimCssForComponent;
	// Reset the caches - used for tests only
	function resetShadowDomCache() {
	    collection_1.MapWrapper.clear(_componentUIDs);
	    _nextComponentUID = 0;
	    collection_1.MapWrapper.clear(_sharedStyleTexts);
	    _lastInsertedStyleEl = null;
	}
	exports.resetShadowDomCache = resetShadowDomCache;
	exports.__esModule = true;
	//# sourceMappingURL=util.js.map

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	var dom_adapter_1 = __webpack_require__(107);
	var collection_1 = __webpack_require__(61);
	var lang_1 = __webpack_require__(60);
	/**
	 * This file is a port of shadowCSS from webcomponents.js to AtScript.
	 *
	 * Please make sure to keep to edits in sync with the source file.
	 *
	 * Source:
	 * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js
	 *
	 * The original file level comment is reproduced below
	 */
	/*
	  This is a limited shim for ShadowDOM css styling.
	  https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html#styles

	  The intention here is to support only the styling features which can be
	  relatively simply implemented. The goal is to allow users to avoid the
	  most obvious pitfalls and do so without compromising performance significantly.
	  For ShadowDOM styling that's not covered here, a set of best practices
	  can be provided that should allow users to accomplish more complex styling.

	  The following is a list of specific ShadowDOM styling features and a brief
	  discussion of the approach used to shim.

	  Shimmed features:

	  * :host, :host-context: ShadowDOM allows styling of the shadowRoot's host
	  element using the :host rule. To shim this feature, the :host styles are
	  reformatted and prefixed with a given scope name and promoted to a
	  document level stylesheet.
	  For example, given a scope name of .foo, a rule like this:

	    :host {
	        background: red;
	      }
	    }

	  becomes:

	    .foo {
	      background: red;
	    }

	  * encapsultion: Styles defined within ShadowDOM, apply only to
	  dom inside the ShadowDOM. Polymer uses one of two techniques to imlement
	  this feature.

	  By default, rules are prefixed with the host element tag name
	  as a descendant selector. This ensures styling does not leak out of the 'top'
	  of the element's ShadowDOM. For example,

	  div {
	      font-weight: bold;
	    }

	  becomes:

	  x-foo div {
	      font-weight: bold;
	    }

	  becomes:


	  Alternatively, if WebComponents.ShadowCSS.strictStyling is set to true then
	  selectors are scoped by adding an attribute selector suffix to each
	  simple selector that contains the host element tag name. Each element
	  in the element's ShadowDOM template is also given the scope attribute.
	  Thus, these rules match only elements that have the scope attribute.
	  For example, given a scope name of x-foo, a rule like this:

	    div {
	      font-weight: bold;
	    }

	  becomes:

	    div[x-foo] {
	      font-weight: bold;
	    }

	  Note that elements that are dynamically added to a scope must have the scope
	  selector added to them manually.

	  * upper/lower bound encapsulation: Styles which are defined outside a
	  shadowRoot should not cross the ShadowDOM boundary and should not apply
	  inside a shadowRoot.

	  This styling behavior is not emulated. Some possible ways to do this that
	  were rejected due to complexity and/or performance concerns include: (1) reset
	  every possible property for every possible selector for a given scope name;
	  (2) re-implement css in javascript.

	  As an alternative, users should make sure to use selectors
	  specific to the scope in which they are working.

	  * ::distributed: This behavior is not emulated. It's often not necessary
	  to style the contents of a specific insertion point and instead, descendants
	  of the host element can be styled selectively. Users can also create an
	  extra node around an insertion point and style that node's contents
	  via descendent selectors. For example, with a shadowRoot like this:

	    <style>
	      ::content(div) {
	        background: red;
	      }
	    </style>
	    <content></content>

	  could become:

	    <style>
	      / *@polyfill .content-container div * /
	      ::content(div) {
	        background: red;
	      }
	    </style>
	    <div class="content-container">
	      <content></content>
	    </div>

	  Note the use of @polyfill in the comment above a ShadowDOM specific style
	  declaration. This is a directive to the styling shim to use the selector
	  in comments in lieu of the next selector when running under polyfill.
	*/
	var ShadowCss = (function () {
	    function ShadowCss() {
	        this.strictStyling = true;
	    }
	    /*
	    * Shim a style element with the given selector. Returns cssText that can
	    * be included in the document via WebComponents.ShadowCSS.addCssToDocument(css).
	    */
	    ShadowCss.prototype.shimStyle = function (style, selector, hostSelector) {
	        if (hostSelector === void 0) { hostSelector = ''; }
	        var cssText = dom_adapter_1.DOM.getText(style);
	        return this.shimCssText(cssText, selector, hostSelector);
	    };
	    /*
	    * Shim some cssText with the given selector. Returns cssText that can
	    * be included in the document via WebComponents.ShadowCSS.addCssToDocument(css).
	    *
	    * When strictStyling is true:
	    * - selector is the attribute added to all elements inside the host,
	    * - hostSelector is the attribute added to the host itself.
	    */
	    ShadowCss.prototype.shimCssText = function (cssText, selector, hostSelector) {
	        if (hostSelector === void 0) { hostSelector = ''; }
	        cssText = this._insertDirectives(cssText);
	        return this._scopeCssText(cssText, selector, hostSelector);
	    };
	    ShadowCss.prototype._insertDirectives = function (cssText) {
	        cssText = this._insertPolyfillDirectivesInCssText(cssText);
	        return this._insertPolyfillRulesInCssText(cssText);
	    };
	    /*
	     * Process styles to convert native ShadowDOM rules that will trip
	     * up the css parser; we rely on decorating the stylesheet with inert rules.
	     *
	     * For example, we convert this rule:
	     *
	     * polyfill-next-selector { content: ':host menu-item'; }
	     * ::content menu-item {
	     *
	     * to this:
	     *
	     * scopeName menu-item {
	     *
	    **/
	    ShadowCss.prototype._insertPolyfillDirectivesInCssText = function (cssText) {
	        // Difference with webcomponents.js: does not handle comments
	        return lang_1.StringWrapper.replaceAllMapped(cssText, _cssContentNextSelectorRe, function (m) { return m[1] + '{'; });
	    };
	    /*
	     * Process styles to add rules which will only apply under the polyfill
	     *
	     * For example, we convert this rule:
	     *
	     * polyfill-rule {
	     *   content: ':host menu-item';
	     * ...
	     * }
	     *
	     * to this:
	     *
	     * scopeName menu-item {...}
	     *
	    **/
	    ShadowCss.prototype._insertPolyfillRulesInCssText = function (cssText) {
	        // Difference with webcomponents.js: does not handle comments
	        return lang_1.StringWrapper.replaceAllMapped(cssText, _cssContentRuleRe, function (m) {
	            var rule = m[0];
	            rule = lang_1.StringWrapper.replace(rule, m[1], '');
	            rule = lang_1.StringWrapper.replace(rule, m[2], '');
	            return m[3] + rule;
	        });
	    };
	    /* Ensure styles are scoped. Pseudo-scoping takes a rule like:
	     *
	     *  .foo {... }
	     *
	     *  and converts this to
	     *
	     *  scopeName .foo { ... }
	    */
	    ShadowCss.prototype._scopeCssText = function (cssText, scopeSelector, hostSelector) {
	        var _this = this;
	        var unscoped = this._extractUnscopedRulesFromCssText(cssText);
	        cssText = this._insertPolyfillHostInCssText(cssText);
	        cssText = this._convertColonHost(cssText);
	        cssText = this._convertColonHostContext(cssText);
	        cssText = this._convertShadowDOMSelectors(cssText);
	        if (lang_1.isPresent(scopeSelector)) {
	            _withCssRules(cssText, function (rules) { cssText = _this._scopeRules(rules, scopeSelector, hostSelector); });
	        }
	        cssText = cssText + '\n' + unscoped;
	        return cssText.trim();
	    };
	    /*
	     * Process styles to add rules which will only apply under the polyfill
	     * and do not process via CSSOM. (CSSOM is destructive to rules on rare
	     * occasions, e.g. -webkit-calc on Safari.)
	     * For example, we convert this rule:
	     *
	     * @polyfill-unscoped-rule {
	     *   content: 'menu-item';
	     * ... }
	     *
	     * to this:
	     *
	     * menu-item {...}
	     *
	    **/
	    ShadowCss.prototype._extractUnscopedRulesFromCssText = function (cssText) {
	        // Difference with webcomponents.js: does not handle comments
	        var r = '', m;
	        var matcher = lang_1.RegExpWrapper.matcher(_cssContentUnscopedRuleRe, cssText);
	        while (lang_1.isPresent(m = lang_1.RegExpMatcherWrapper.next(matcher))) {
	            var rule = m[0];
	            rule = lang_1.StringWrapper.replace(rule, m[2], '');
	            rule = lang_1.StringWrapper.replace(rule, m[1], m[3]);
	            r = rule + '\n\n';
	        }
	        return r;
	    };
	    /*
	     * convert a rule like :host(.foo) > .bar { }
	     *
	     * to
	     *
	     * scopeName.foo > .bar
	    */
	    ShadowCss.prototype._convertColonHost = function (cssText) {
	        return this._convertColonRule(cssText, _cssColonHostRe, this._colonHostPartReplacer);
	    };
	    /*
	     * convert a rule like :host-context(.foo) > .bar { }
	     *
	     * to
	     *
	     * scopeName.foo > .bar, .foo scopeName > .bar { }
	     *
	     * and
	     *
	     * :host-context(.foo:host) .bar { ... }
	     *
	     * to
	     *
	     * scopeName.foo .bar { ... }
	    */
	    ShadowCss.prototype._convertColonHostContext = function (cssText) {
	        return this._convertColonRule(cssText, _cssColonHostContextRe, this._colonHostContextPartReplacer);
	    };
	    ShadowCss.prototype._convertColonRule = function (cssText, regExp, partReplacer) {
	        // p1 = :host, p2 = contents of (), p3 rest of rule
	        return lang_1.StringWrapper.replaceAllMapped(cssText, regExp, function (m) {
	            if (lang_1.isPresent(m[2])) {
	                var parts = m[2].split(','), r = [];
	                for (var i = 0; i < parts.length; i++) {
	                    var p = parts[i];
	                    if (lang_1.isBlank(p))
	                        break;
	                    p = p.trim();
	                    collection_1.ListWrapper.push(r, partReplacer(_polyfillHostNoCombinator, p, m[3]));
	                }
	                return r.join(',');
	            }
	            else {
	                return _polyfillHostNoCombinator + m[3];
	            }
	        });
	    };
	    ShadowCss.prototype._colonHostContextPartReplacer = function (host, part, suffix) {
	        if (lang_1.StringWrapper.contains(part, _polyfillHost)) {
	            return this._colonHostPartReplacer(host, part, suffix);
	        }
	        else {
	            return host + part + suffix + ', ' + part + ' ' + host + suffix;
	        }
	    };
	    ShadowCss.prototype._colonHostPartReplacer = function (host, part, suffix) {
	        return host + lang_1.StringWrapper.replace(part, _polyfillHost, '') + suffix;
	    };
	    /*
	     * Convert combinators like ::shadow and pseudo-elements like ::content
	     * by replacing with space.
	    */
	    ShadowCss.prototype._convertShadowDOMSelectors = function (cssText) {
	        for (var i = 0; i < _shadowDOMSelectorsRe.length; i++) {
	            cssText = lang_1.StringWrapper.replaceAll(cssText, _shadowDOMSelectorsRe[i], ' ');
	        }
	        return cssText;
	    };
	    // change a selector like 'div' to 'name div'
	    ShadowCss.prototype._scopeRules = function (cssRules, scopeSelector, hostSelector) {
	        var cssText = '';
	        if (lang_1.isPresent(cssRules)) {
	            for (var i = 0; i < cssRules.length; i++) {
	                var rule = cssRules[i];
	                if (dom_adapter_1.DOM.isStyleRule(rule) || dom_adapter_1.DOM.isPageRule(rule)) {
	                    cssText += this._scopeSelector(rule.selectorText, scopeSelector, hostSelector, this.strictStyling) +
	                        ' {\n';
	                    cssText += this._propertiesFromRule(rule) + '\n}\n\n';
	                }
	                else if (dom_adapter_1.DOM.isMediaRule(rule)) {
	                    cssText += '@media ' + rule.media.mediaText + ' {\n';
	                    cssText += this._scopeRules(rule.cssRules, scopeSelector, hostSelector);
	                    cssText += '\n}\n\n';
	                }
	                else {
	                    // KEYFRAMES_RULE in IE throws when we query cssText
	                    // when it contains a -webkit- property.
	                    // if this happens, we fallback to constructing the rule
	                    // from the CSSRuleSet
	                    // https://connect.microsoft.com/IE/feedbackdetail/view/955703/accessing-csstext-of-a-keyframe-rule-that-contains-a-webkit-property-via-cssom-generates-exception
	                    try {
	                        if (lang_1.isPresent(rule.cssText)) {
	                            cssText += rule.cssText + '\n\n';
	                        }
	                    }
	                    catch (x) {
	                        if (dom_adapter_1.DOM.isKeyframesRule(rule) && lang_1.isPresent(rule.cssRules)) {
	                            cssText += this._ieSafeCssTextFromKeyFrameRule(rule);
	                        }
	                    }
	                }
	            }
	        }
	        return cssText;
	    };
	    ShadowCss.prototype._ieSafeCssTextFromKeyFrameRule = function (rule) {
	        var cssText = '@keyframes ' + rule.name + ' {';
	        for (var i = 0; i < rule.cssRules.length; i++) {
	            var r = rule.cssRules[i];
	            cssText += ' ' + r.keyText + ' {' + r.style.cssText + '}';
	        }
	        cssText += ' }';
	        return cssText;
	    };
	    ShadowCss.prototype._scopeSelector = function (selector, scopeSelector, hostSelector, strict) {
	        var r = [], parts = selector.split(',');
	        for (var i = 0; i < parts.length; i++) {
	            var p = parts[i];
	            p = p.trim();
	            if (this._selectorNeedsScoping(p, scopeSelector)) {
	                p = strict && !lang_1.StringWrapper.contains(p, _polyfillHostNoCombinator) ?
	                    this._applyStrictSelectorScope(p, scopeSelector) :
	                    this._applySelectorScope(p, scopeSelector, hostSelector);
	            }
	            collection_1.ListWrapper.push(r, p);
	        }
	        return r.join(', ');
	    };
	    ShadowCss.prototype._selectorNeedsScoping = function (selector, scopeSelector) {
	        var re = this._makeScopeMatcher(scopeSelector);
	        return !lang_1.isPresent(lang_1.RegExpWrapper.firstMatch(re, selector));
	    };
	    ShadowCss.prototype._makeScopeMatcher = function (scopeSelector) {
	        var lre = lang_1.RegExpWrapper.create('\\[');
	        var rre = lang_1.RegExpWrapper.create('\\]');
	        scopeSelector = lang_1.StringWrapper.replaceAll(scopeSelector, lre, '\\[');
	        scopeSelector = lang_1.StringWrapper.replaceAll(scopeSelector, rre, '\\]');
	        return lang_1.RegExpWrapper.create('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');
	    };
	    ShadowCss.prototype._applySelectorScope = function (selector, scopeSelector, hostSelector) {
	        // Difference from webcomponentsjs: scopeSelector could not be an array
	        return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);
	    };
	    // scope via name and [is=name]
	    ShadowCss.prototype._applySimpleSelectorScope = function (selector, scopeSelector, hostSelector) {
	        if (lang_1.isPresent(lang_1.RegExpWrapper.firstMatch(_polyfillHostRe, selector))) {
	            var replaceBy = this.strictStyling ? "[" + hostSelector + "]" : scopeSelector;
	            selector = lang_1.StringWrapper.replace(selector, _polyfillHostNoCombinator, replaceBy);
	            return lang_1.StringWrapper.replaceAll(selector, _polyfillHostRe, replaceBy + ' ');
	        }
	        else {
	            return scopeSelector + ' ' + selector;
	        }
	    };
	    // return a selector with [name] suffix on each simple selector
	    // e.g. .foo.bar > .zot becomes .foo[name].bar[name] > .zot[name]
	    ShadowCss.prototype._applyStrictSelectorScope = function (selector, scopeSelector) {
	        var isRe = lang_1.RegExpWrapper.create('\\[is=([^\\]]*)\\]');
	        scopeSelector = lang_1.StringWrapper.replaceAllMapped(scopeSelector, isRe, function (m) { return m[1]; });
	        var splits = [' ', '>', '+', '~'], scoped = selector, attrName = '[' + scopeSelector + ']';
	        for (var i = 0; i < splits.length; i++) {
	            var sep = splits[i];
	            var parts = scoped.split(sep);
	            scoped = collection_1.ListWrapper.map(parts, function (p) {
	                // remove :host since it should be unnecessary
	                var t = lang_1.StringWrapper.replaceAll(p.trim(), _polyfillHostRe, '');
	                if (t.length > 0 && !collection_1.ListWrapper.contains(splits, t) &&
	                    !lang_1.StringWrapper.contains(t, attrName)) {
	                    var re = lang_1.RegExpWrapper.create('([^:]*)(:*)(.*)');
	                    var m = lang_1.RegExpWrapper.firstMatch(re, t);
	                    if (lang_1.isPresent(m)) {
	                        p = m[1] + attrName + m[2] + m[3];
	                    }
	                }
	                return p;
	            }).join(sep);
	        }
	        return scoped;
	    };
	    ShadowCss.prototype._insertPolyfillHostInCssText = function (selector) {
	        selector = lang_1.StringWrapper.replaceAll(selector, _colonHostContextRe, _polyfillHostContext);
	        selector = lang_1.StringWrapper.replaceAll(selector, _colonHostRe, _polyfillHost);
	        return selector;
	    };
	    ShadowCss.prototype._propertiesFromRule = function (rule) {
	        var cssText = rule.style.cssText;
	        // TODO(sorvell): Safari cssom incorrectly removes quotes from the content
	        // property. (https://bugs.webkit.org/show_bug.cgi?id=118045)
	        // don't replace attr rules
	        var attrRe = lang_1.RegExpWrapper.create('[\'"]+|attr');
	        if (rule.style.content.length > 0 &&
	            !lang_1.isPresent(lang_1.RegExpWrapper.firstMatch(attrRe, rule.style.content))) {
	            var contentRe = lang_1.RegExpWrapper.create('content:[^;]*;');
	            cssText =
	                lang_1.StringWrapper.replaceAll(cssText, contentRe, 'content: \'' + rule.style.content + '\';');
	        }
	        // TODO(sorvell): we can workaround this issue here, but we need a list
	        // of troublesome properties to fix https://github.com/Polymer/platform/issues/53
	        //
	        // inherit rules can be omitted from cssText
	        // TODO(sorvell): remove when Blink bug is fixed:
	        // https://code.google.com/p/chromium/issues/detail?id=358273
	        // var style = rule.style;
	        // for (var i = 0; i < style.length; i++) {
	        //  var name = style.item(i);
	        //  var value = style.getPropertyValue(name);
	        //  if (value == 'initial') {
	        //    cssText += name + ': initial; ';
	        //  }
	        //}
	        return cssText;
	    };
	    return ShadowCss;
	})();
	exports.ShadowCss = ShadowCss;
	var _cssContentNextSelectorRe = lang_1.RegExpWrapper.create('polyfill-next-selector[^}]*content:[\\s]*?[\'"](.*?)[\'"][;\\s]*}([^{]*?){', 'im');
	var _cssContentRuleRe = lang_1.RegExpWrapper.create('(polyfill-rule)[^}]*(content:[\\s]*[\'"](.*?)[\'"])[;\\s]*[^}]*}', 'im');
	var _cssContentUnscopedRuleRe = lang_1.RegExpWrapper.create('(polyfill-unscoped-rule)[^}]*(content:[\\s]*[\'"](.*?)[\'"])[;\\s]*[^}]*}', 'im');
	var _polyfillHost = '-shadowcsshost';
	// note: :host-context pre-processed to -shadowcsshostcontext.
	var _polyfillHostContext = '-shadowcsscontext';
	var _parenSuffix = ')(?:\\((' +
	    '(?:\\([^)(]*\\)|[^)(]*)+?' +
	    ')\\))?([^,{]*)';
	var _cssColonHostRe = lang_1.RegExpWrapper.create('(' + _polyfillHost + _parenSuffix, 'im');
	var _cssColonHostContextRe = lang_1.RegExpWrapper.create('(' + _polyfillHostContext + _parenSuffix, 'im');
	var _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';
	var _shadowDOMSelectorsRe = [
	    lang_1.RegExpWrapper.create('>>>'),
	    lang_1.RegExpWrapper.create('::shadow'),
	    lang_1.RegExpWrapper.create('::content'),
	    // Deprecated selectors
	    lang_1.RegExpWrapper.create('/deep/'),
	    lang_1.RegExpWrapper.create('/shadow-deep/'),
	    lang_1.RegExpWrapper.create('/shadow/'),
	];
	var _selectorReSuffix = '([>\\s~+\[.,{:][\\s\\S]*)?$';
	var _polyfillHostRe = lang_1.RegExpWrapper.create(_polyfillHost, 'im');
	var _colonHostRe = lang_1.RegExpWrapper.create(':host', 'im');
	var _colonHostContextRe = lang_1.RegExpWrapper.create(':host-context', 'im');
	function _cssToRules(cssText) {
	    return dom_adapter_1.DOM.cssToRules(cssText);
	}
	function _withCssRules(cssText, callback) {
	    // Difference from webcomponentjs: remove the workaround for an old bug in Chrome
	    if (lang_1.isBlank(callback))
	        return;
	    var rules = _cssToRules(cssText);
	    callback(rules);
	}
	exports.__esModule = true;
	//# sourceMappingURL=shadow_css.js.map

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(108);
	var async_1 = __webpack_require__(94);
	var xhr_1 = __webpack_require__(141);
	var XHRImpl = (function (_super) {
	    __extends(XHRImpl, _super);
	    function XHRImpl() {
	        _super.apply(this, arguments);
	    }
	    XHRImpl.prototype.get = function (url) {
	        var completer = async_1.PromiseWrapper.completer();
	        var xhr = new XMLHttpRequest();
	        xhr.open('GET', url, true);
	        xhr.responseType = 'text';
	        xhr.onload = function () {
	            var status = xhr.status;
	            if (200 <= status && status <= 300) {
	                completer.resolve(xhr.responseText);
	            }
	            else {
	                completer.reject("Failed to load " + url, null);
	            }
	        };
	        xhr.onerror = function () { completer.reject("Failed to load " + url, null); };
	        xhr.send();
	        return completer.promise;
	    };
	    XHRImpl = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], XHRImpl);
	    return XHRImpl;
	})(xhr_1.XHR);
	exports.XHRImpl = XHRImpl;
	exports.__esModule = true;
	//# sourceMappingURL=xhr_impl.js.map

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var dom_adapter_1 = __webpack_require__(107);
	var lang_1 = __webpack_require__(60);
	var collection_1 = __webpack_require__(61);
	var event_manager_1 = __webpack_require__(106);
	var modifierKeys = ['alt', 'control', 'meta', 'shift'];
	var modifierKeyGetters = {
	    'alt': function (event) { return event.altKey; },
	    'control': function (event) { return event.ctrlKey; },
	    'meta': function (event) { return event.metaKey; },
	    'shift': function (event) { return event.shiftKey; }
	};
	var KeyEventsPlugin = (function (_super) {
	    __extends(KeyEventsPlugin, _super);
	    function KeyEventsPlugin() {
	        _super.call(this);
	    }
	    KeyEventsPlugin.prototype.supports = function (eventName) {
	        return lang_1.isPresent(KeyEventsPlugin.parseEventName(eventName));
	    };
	    KeyEventsPlugin.prototype.addEventListener = function (element, eventName, handler, shouldSupportBubble) {
	        var parsedEvent = KeyEventsPlugin.parseEventName(eventName);
	        var outsideHandler = KeyEventsPlugin.eventCallback(element, shouldSupportBubble, collection_1.StringMapWrapper.get(parsedEvent, 'fullKey'), handler, this.manager.getZone());
	        this.manager.getZone().runOutsideAngular(function () {
	            dom_adapter_1.DOM.on(element, collection_1.StringMapWrapper.get(parsedEvent, 'domEventName'), outsideHandler);
	        });
	    };
	    KeyEventsPlugin.parseEventName = function (eventName) {
	        eventName = eventName.toLowerCase();
	        var parts = eventName.split('.');
	        var domEventName = collection_1.ListWrapper.removeAt(parts, 0);
	        if ((parts.length === 0) ||
	            !(lang_1.StringWrapper.equals(domEventName, 'keydown') ||
	                lang_1.StringWrapper.equals(domEventName, 'keyup'))) {
	            return null;
	        }
	        var key = collection_1.ListWrapper.removeLast(parts);
	        var fullKey = '';
	        collection_1.ListWrapper.forEach(modifierKeys, function (modifierName) {
	            if (collection_1.ListWrapper.contains(parts, modifierName)) {
	                collection_1.ListWrapper.remove(parts, modifierName);
	                fullKey += modifierName + '.';
	            }
	        });
	        fullKey += key;
	        if (parts.length != 0 || key.length === 0) {
	            // returning null instead of throwing to let another plugin process the event
	            return null;
	        }
	        return { 'domEventName': domEventName, 'fullKey': fullKey };
	    };
	    KeyEventsPlugin.getEventFullKey = function (event) {
	        var fullKey = '';
	        var key = dom_adapter_1.DOM.getEventKey(event);
	        key = key.toLowerCase();
	        if (lang_1.StringWrapper.equals(key, ' ')) {
	            key = 'space'; // for readability
	        }
	        else if (lang_1.StringWrapper.equals(key, '.')) {
	            key = 'dot'; // because '.' is used as a separator in event names
	        }
	        collection_1.ListWrapper.forEach(modifierKeys, function (modifierName) {
	            if (modifierName != key) {
	                var modifierGetter = collection_1.StringMapWrapper.get(modifierKeyGetters, modifierName);
	                if (modifierGetter(event)) {
	                    fullKey += modifierName + '.';
	                }
	            }
	        });
	        fullKey += key;
	        return fullKey;
	    };
	    KeyEventsPlugin.eventCallback = function (element, shouldSupportBubble, fullKey, handler, zone) {
	        return function (event) {
	            var correctElement = shouldSupportBubble || event.target === element;
	            if (correctElement && KeyEventsPlugin.getEventFullKey(event) === fullKey) {
	                zone.run(function () { return handler(event); });
	            }
	        };
	    };
	    return KeyEventsPlugin;
	})(event_manager_1.EventManagerPlugin);
	exports.KeyEventsPlugin = KeyEventsPlugin;
	exports.__esModule = true;
	//# sourceMappingURL=key_events.js.map

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../../../../typings/hammerjs/hammerjs"/>
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var hammer_common_1 = __webpack_require__(151);
	var lang_1 = __webpack_require__(60);
	var HammerGesturesPlugin = (function (_super) {
	    __extends(HammerGesturesPlugin, _super);
	    function HammerGesturesPlugin() {
	        _super.call(this);
	    }
	    HammerGesturesPlugin.prototype.supports = function (eventName) {
	        if (!_super.prototype.supports.call(this, eventName))
	            return false;
	        if (!lang_1.isPresent(window['Hammer'])) {
	            throw new lang_1.BaseException("Hammer.js is not loaded, can not bind " + eventName + " event");
	        }
	        return true;
	    };
	    HammerGesturesPlugin.prototype.addEventListener = function (element, eventName, handler, shouldSupportBubble) {
	        if (shouldSupportBubble)
	            throw new lang_1.BaseException('Hammer.js plugin does not support bubbling gestures.');
	        var zone = this.manager.getZone();
	        eventName = eventName.toLowerCase();
	        zone.runOutsideAngular(function () {
	            // Creating the manager bind events, must be done outside of angular
	            var mc = new Hammer(element);
	            mc.get('pinch').set({ enable: true });
	            mc.get('rotate').set({ enable: true });
	            mc.on(eventName, function (eventObj) { zone.run(function () { handler(eventObj); }); });
	        });
	    };
	    return HammerGesturesPlugin;
	})(hammer_common_1.HammerGesturesPluginCommon);
	exports.HammerGesturesPlugin = HammerGesturesPlugin;
	exports.__esModule = true;
	//# sourceMappingURL=hammer_gestures.js.map

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var event_manager_1 = __webpack_require__(106);
	var collection_1 = __webpack_require__(61);
	var _eventNames = {
	    // pan
	    'pan': true,
	    'panstart': true,
	    'panmove': true,
	    'panend': true,
	    'pancancel': true,
	    'panleft': true,
	    'panright': true,
	    'panup': true,
	    'pandown': true,
	    // pinch
	    'pinch': true,
	    'pinchstart': true,
	    'pinchmove': true,
	    'pinchend': true,
	    'pinchcancel': true,
	    'pinchin': true,
	    'pinchout': true,
	    // press
	    'press': true,
	    'pressup': true,
	    // rotate
	    'rotate': true,
	    'rotatestart': true,
	    'rotatemove': true,
	    'rotateend': true,
	    'rotatecancel': true,
	    // swipe
	    'swipe': true,
	    'swipeleft': true,
	    'swiperight': true,
	    'swipeup': true,
	    'swipedown': true,
	    // tap
	    'tap': true,
	};
	var HammerGesturesPluginCommon = (function (_super) {
	    __extends(HammerGesturesPluginCommon, _super);
	    function HammerGesturesPluginCommon() {
	        _super.call(this);
	    }
	    HammerGesturesPluginCommon.prototype.supports = function (eventName) {
	        eventName = eventName.toLowerCase();
	        return collection_1.StringMapWrapper.contains(_eventNames, eventName);
	    };
	    return HammerGesturesPluginCommon;
	})(event_manager_1.EventManagerPlugin);
	exports.HammerGesturesPluginCommon = HammerGesturesPluginCommon;
	exports.__esModule = true;
	//# sourceMappingURL=hammer_common.js.map

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	// Some of the code comes from WebComponents.JS
	// https://github.com/webcomponents/webcomponentsjs/blob/master/src/HTMLImports/path.js
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(108);
	var lang_1 = __webpack_require__(60);
	var url_resolver_1 = __webpack_require__(138);
	/**
	 * Rewrites URLs by resolving '@import' and 'url()' URLs from the given base URL.
	 */
	var StyleUrlResolver = (function () {
	    function StyleUrlResolver(resolver) {
	        this._resolver = resolver;
	    }
	    StyleUrlResolver.prototype.resolveUrls = function (cssText, baseUrl) {
	        cssText = this._replaceUrls(cssText, _cssUrlRe, baseUrl);
	        cssText = this._replaceUrls(cssText, _cssImportRe, baseUrl);
	        return cssText;
	    };
	    StyleUrlResolver.prototype._replaceUrls = function (cssText, re, baseUrl) {
	        var _this = this;
	        return lang_1.StringWrapper.replaceAllMapped(cssText, re, function (m) {
	            var pre = m[1];
	            var url = lang_1.StringWrapper.replaceAll(m[2], _quoteRe, '');
	            var post = m[3];
	            var resolvedUrl = _this._resolver.resolve(baseUrl, url);
	            return pre + "'" + resolvedUrl + "'" + post;
	        });
	    };
	    StyleUrlResolver = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [url_resolver_1.UrlResolver])
	    ], StyleUrlResolver);
	    return StyleUrlResolver;
	})();
	exports.StyleUrlResolver = StyleUrlResolver;
	var _cssUrlRe = lang_1.RegExpWrapper.create('(url\\()([^)]*)(\\))');
	var _cssImportRe = lang_1.RegExpWrapper.create('(@import[\\s]+(?!url\\())[\'"]([^\'"]*)[\'"](.*;)');
	var _quoteRe = lang_1.RegExpWrapper.create('[\'"]');
	exports.__esModule = true;
	//# sourceMappingURL=style_url_resolver.js.map

/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(108);
	var xhr_1 = __webpack_require__(141);
	var collection_1 = __webpack_require__(61);
	var url_resolver_1 = __webpack_require__(138);
	var style_url_resolver_1 = __webpack_require__(152);
	var lang_1 = __webpack_require__(60);
	var async_1 = __webpack_require__(94);
	/**
	 * Inline @import rules in the given CSS.
	 *
	 * When an @import rules is inlined, it's url are rewritten.
	 */
	var StyleInliner = (function () {
	    function StyleInliner(xhr, styleUrlResolver, urlResolver) {
	        this._xhr = xhr;
	        this._urlResolver = urlResolver;
	        this._styleUrlResolver = styleUrlResolver;
	    }
	    /**
	     * Inline the @imports rules in the given CSS text.
	     *
	     * The baseUrl is required to rewrite URLs in the inlined content.
	     *
	     * @param {string} cssText
	     * @param {string} baseUrl
	     * @returns {*} a Promise<string> when @import rules are present, a string otherwise
	     */
	    StyleInliner.prototype.inlineImports = function (cssText, baseUrl) {
	        return this._inlineImports(cssText, baseUrl, []);
	    };
	    StyleInliner.prototype._inlineImports = function (cssText, baseUrl, inlinedUrls) {
	        var _this = this;
	        var partIndex = 0;
	        var parts = lang_1.StringWrapper.split(cssText, _importRe);
	        if (parts.length === 1) {
	            // no @import rule found, return the original css
	            return cssText;
	        }
	        var promises = [];
	        while (partIndex < parts.length - 1) {
	            // prefix is the content before the @import rule
	            var prefix = parts[partIndex];
	            // rule is the parameter of the @import rule
	            var rule = parts[partIndex + 1];
	            var url = _extractUrl(rule);
	            if (lang_1.isPresent(url)) {
	                url = this._urlResolver.resolve(baseUrl, url);
	            }
	            var mediaQuery = _extractMediaQuery(rule);
	            var promise;
	            if (lang_1.isBlank(url)) {
	                promise = async_1.PromiseWrapper.resolve("/* Invalid import rule: \"@import " + rule + ";\" */");
	            }
	            else if (collection_1.ListWrapper.contains(inlinedUrls, url)) {
	                // The current import rule has already been inlined, return the prefix only
	                // Importing again might cause a circular dependency
	                promise = async_1.PromiseWrapper.resolve(prefix);
	            }
	            else {
	                collection_1.ListWrapper.push(inlinedUrls, url);
	                promise = async_1.PromiseWrapper.then(this._xhr.get(url), function (rawCss) {
	                    // resolve nested @import rules
	                    var inlinedCss = _this._inlineImports(rawCss, url, inlinedUrls);
	                    if (async_1.PromiseWrapper.isPromise(inlinedCss)) {
	                        // wait until nested @import are inlined
	                        return inlinedCss
	                            .then(function (css) {
	                            return prefix + _this._transformImportedCss(css, mediaQuery, url) +
	                                '\n';
	                        });
	                    }
	                    else {
	                        // there are no nested @import, return the css
	                        return prefix + _this._transformImportedCss(inlinedCss, mediaQuery, url) + '\n';
	                    }
	                }, function (error) { return ("/* failed to import " + url + " */\n"); });
	            }
	            collection_1.ListWrapper.push(promises, promise);
	            partIndex += 2;
	        }
	        return async_1.PromiseWrapper.all(promises).then(function (cssParts) {
	            var cssText = cssParts.join('');
	            if (partIndex < parts.length) {
	                // append then content located after the last @import rule
	                cssText += parts[partIndex];
	            }
	            return cssText;
	        });
	    };
	    StyleInliner.prototype._transformImportedCss = function (css, mediaQuery, url) {
	        css = this._styleUrlResolver.resolveUrls(css, url);
	        return _wrapInMediaRule(css, mediaQuery);
	    };
	    StyleInliner = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [xhr_1.XHR, style_url_resolver_1.StyleUrlResolver, url_resolver_1.UrlResolver])
	    ], StyleInliner);
	    return StyleInliner;
	})();
	exports.StyleInliner = StyleInliner;
	// Extracts the url from an import rule, supported formats:
	// - 'url' / "url",
	// - url(url) / url('url') / url("url")
	function _extractUrl(importRule) {
	    var match = lang_1.RegExpWrapper.firstMatch(_urlRe, importRule);
	    if (lang_1.isBlank(match))
	        return null;
	    return lang_1.isPresent(match[1]) ? match[1] : match[2];
	}
	// Extracts the media query from an import rule.
	// Returns null when there is no media query.
	function _extractMediaQuery(importRule) {
	    var match = lang_1.RegExpWrapper.firstMatch(_mediaQueryRe, importRule);
	    if (lang_1.isBlank(match))
	        return null;
	    var mediaQuery = match[1].trim();
	    return (mediaQuery.length > 0) ? mediaQuery : null;
	}
	// Wraps the css in a media rule when the media query is not null
	function _wrapInMediaRule(css, query) {
	    return (lang_1.isBlank(query)) ? css : "@media " + query + " {\n" + css + "\n}";
	}
	var _importRe = lang_1.RegExpWrapper.create('@import\\s+([^;]+);');
	var _urlRe = lang_1.RegExpWrapper.create('url\\(\\s*?[\'"]?([^\'")]+)[\'"]?|' +
	    '[\'"]([^\'")]+)[\'"]' // "url" or 'url'
	);
	var _mediaQueryRe = lang_1.RegExpWrapper.create('[\'"][^\'"]+[\'"]\\s*\\)?\\s*(.*)');
	exports.__esModule = true;
	//# sourceMappingURL=style_inliner.js.map

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(108);
	var compiler_1 = __webpack_require__(118);
	var lang_1 = __webpack_require__(60);
	var view_manager_1 = __webpack_require__(121);
	var element_ref_1 = __webpack_require__(131);
	/**
	 * @exportedAs angular2/view
	 */
	var ComponentRef = (function () {
	    function ComponentRef(location, instance, dispose) {
	        this.location = location;
	        this.instance = instance;
	        this.dispose = dispose;
	    }
	    Object.defineProperty(ComponentRef.prototype, "hostView", {
	        get: function () { return this.location.parentView; },
	        enumerable: true,
	        configurable: true
	    });
	    return ComponentRef;
	})();
	exports.ComponentRef = ComponentRef;
	/**
	 * Service for dynamically loading a Component into an arbitrary position in the internal Angular
	 * application tree.
	 *
	 * @exportedAs angular2/view
	 */
	var DynamicComponentLoader = (function () {
	    function DynamicComponentLoader(compiler, viewManager) {
	        this._compiler = compiler;
	        this._viewManager = viewManager;
	    }
	    /**
	     * Loads a component into the location given by the provided ElementRef. The loaded component
	     * receives injection as if it in the place of the provided ElementRef.
	     */
	    DynamicComponentLoader.prototype.loadIntoExistingLocation = function (typeOrBinding, location, injector) {
	        var _this = this;
	        if (injector === void 0) { injector = null; }
	        var binding = this._getBinding(typeOrBinding);
	        return this._compiler.compile(binding.token).then(function (componentProtoViewRef) {
	            _this._viewManager.createDynamicComponentView(location, componentProtoViewRef, binding, injector);
	            var component = _this._viewManager.getComponent(location);
	            var dispose = function () { throw new lang_1.BaseException("Not implemented"); };
	            return new ComponentRef(location, component, dispose);
	        });
	    };
	    /**
	     * Loads a root component that is placed at the first element that matches the
	     * component's selector.
	     * The loaded component receives injection normally as a hosted view.
	     */
	    DynamicComponentLoader.prototype.loadAsRoot = function (typeOrBinding, overrideSelector, injector) {
	        var _this = this;
	        if (overrideSelector === void 0) { overrideSelector = null; }
	        if (injector === void 0) { injector = null; }
	        return this._compiler.compileInHost(this._getBinding(typeOrBinding)).then(function (hostProtoViewRef) {
	            var hostViewRef = _this._viewManager.createRootHostView(hostProtoViewRef, overrideSelector, injector);
	            var newLocation = new element_ref_1.ElementRef(hostViewRef, 0);
	            var component = _this._viewManager.getComponent(newLocation);
	            var dispose = function () {
	                _this._viewManager.destroyRootHostView(hostViewRef);
	            };
	            return new ComponentRef(newLocation, component, dispose);
	        });
	    };
	    /**
	     * Loads a component into a free host view that is not yet attached to
	     * a parent on the render side, although it is attached to a parent in the injector hierarchy.
	     * The loaded component receives injection normally as a hosted view.
	     */
	    DynamicComponentLoader.prototype.loadIntoNewLocation = function (typeOrBinding, parentComponentLocation, injector) {
	        var _this = this;
	        if (injector === void 0) { injector = null; }
	        return this._compiler.compileInHost(this._getBinding(typeOrBinding)).then(function (hostProtoViewRef) {
	            var hostViewRef = _this._viewManager.createFreeHostView(parentComponentLocation, hostProtoViewRef, injector);
	            var newLocation = new element_ref_1.ElementRef(hostViewRef, 0);
	            var component = _this._viewManager.getComponent(newLocation);
	            var dispose = function () {
	                _this._viewManager.destroyFreeHostView(parentComponentLocation, hostViewRef);
	            };
	            return new ComponentRef(newLocation, component, dispose);
	        });
	    };
	    /**
	     * Loads a component next to the provided ElementRef. The loaded component receives
	     * injection normally as a hosted view.
	     */
	    DynamicComponentLoader.prototype.loadNextToExistingLocation = function (typeOrBinding, location, injector) {
	        var _this = this;
	        if (injector === void 0) { injector = null; }
	        var binding = this._getBinding(typeOrBinding);
	        return this._compiler.compileInHost(binding).then(function (hostProtoViewRef) {
	            var viewContainer = _this._viewManager.getViewContainer(location);
	            var hostViewRef = viewContainer.create(hostProtoViewRef, viewContainer.length, null, injector);
	            var newLocation = new element_ref_1.ElementRef(hostViewRef, 0);
	            var component = _this._viewManager.getComponent(newLocation);
	            var dispose = function () {
	                var index = viewContainer.indexOf(hostViewRef);
	                viewContainer.remove(index);
	            };
	            return new ComponentRef(newLocation, component, dispose);
	        });
	    };
	    DynamicComponentLoader.prototype._getBinding = function (typeOrBinding) {
	        var binding;
	        if (typeOrBinding instanceof di_1.Binding) {
	            binding = typeOrBinding;
	        }
	        else {
	            binding = di_1.bind(typeOrBinding).toClass(typeOrBinding);
	        }
	        return binding;
	    };
	    DynamicComponentLoader = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [compiler_1.Compiler, view_manager_1.AppViewManager])
	    ], DynamicComponentLoader);
	    return DynamicComponentLoader;
	})();
	exports.DynamicComponentLoader = DynamicComponentLoader;
	exports.__esModule = true;
	//# sourceMappingURL=dynamic_component_loader.js.map

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(108);
	var dom_adapter_1 = __webpack_require__(107);
	var collection_1 = __webpack_require__(61);
	var lang_1 = __webpack_require__(60);
	var getTestabilityModule = __webpack_require__(156);
	/**
	 * The Testability service provides testing hooks that can be accessed from
	 * the browser and by services such as Protractor. Each bootstrapped Angular
	 * application on the page will have an instance of Testability.
	 */
	var Testability = (function () {
	    function Testability() {
	        this._pendingCount = 0;
	        this._callbacks = collection_1.ListWrapper.create();
	    }
	    Testability.prototype.increaseCount = function (delta) {
	        if (delta === void 0) { delta = 1; }
	        this._pendingCount += delta;
	        if (this._pendingCount < 0) {
	            throw new lang_1.BaseException('pending async requests below zero');
	        }
	        else if (this._pendingCount == 0) {
	            this._runCallbacks();
	        }
	        return this._pendingCount;
	    };
	    Testability.prototype._runCallbacks = function () {
	        while (this._callbacks.length !== 0) {
	            collection_1.ListWrapper.removeLast(this._callbacks)();
	        }
	    };
	    Testability.prototype.whenStable = function (callback) {
	        collection_1.ListWrapper.push(this._callbacks, callback);
	        if (this._pendingCount === 0) {
	            this._runCallbacks();
	        }
	        // TODO(juliemr) - hook into the zone api.
	    };
	    Testability.prototype.getPendingCount = function () { return this._pendingCount; };
	    Testability.prototype.findBindings = function (using, binding, exactMatch) {
	        // TODO(juliemr): implement.
	        return [];
	    };
	    Testability = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], Testability);
	    return Testability;
	})();
	exports.Testability = Testability;
	var TestabilityRegistry = (function () {
	    function TestabilityRegistry() {
	        this._applications = collection_1.MapWrapper.create();
	        getTestabilityModule.GetTestability.addToWindow(this);
	    }
	    TestabilityRegistry.prototype.registerApplication = function (token, testability) {
	        collection_1.MapWrapper.set(this._applications, token, testability);
	    };
	    TestabilityRegistry.prototype.findTestabilityInTree = function (elem) {
	        if (elem == null) {
	            return null;
	        }
	        if (collection_1.MapWrapper.contains(this._applications, elem)) {
	            return collection_1.MapWrapper.get(this._applications, elem);
	        }
	        if (dom_adapter_1.DOM.isShadowRoot(elem)) {
	            return this.findTestabilityInTree(dom_adapter_1.DOM.getHost(elem));
	        }
	        return this.findTestabilityInTree(dom_adapter_1.DOM.parentElement(elem));
	    };
	    TestabilityRegistry = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], TestabilityRegistry);
	    return TestabilityRegistry;
	})();
	exports.TestabilityRegistry = TestabilityRegistry;
	exports.__esModule = true;
	//# sourceMappingURL=testability.js.map

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	var lang_1 = __webpack_require__(60);
	var PublicTestability = (function () {
	    function PublicTestability(testability) {
	        this._testability = testability;
	    }
	    PublicTestability.prototype.whenStable = function (callback) { this._testability.whenStable(callback); };
	    PublicTestability.prototype.findBindings = function (using, binding, exactMatch) {
	        return this._testability.findBindings(using, binding, exactMatch);
	    };
	    return PublicTestability;
	})();
	var GetTestability = (function () {
	    function GetTestability() {
	    }
	    GetTestability.addToWindow = function (registry) {
	        lang_1.global.getAngularTestability = function (elem) {
	            var testability = registry.findTestabilityInTree(elem);
	            if (testability == null) {
	                throw new Error('Could not find testability for element.');
	            }
	            return new PublicTestability(testability);
	        };
	    };
	    return GetTestability;
	})();
	exports.GetTestability = GetTestability;
	exports.__esModule = true;
	//# sourceMappingURL=get_testability.js.map

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var di_1 = __webpack_require__(108);
	var lang_1 = __webpack_require__(60);
	var collection_1 = __webpack_require__(61);
	var dom_adapter_1 = __webpack_require__(107);
	var content_tag_1 = __webpack_require__(158);
	var shadow_dom_strategy_1 = __webpack_require__(100);
	var event_manager_1 = __webpack_require__(106);
	var proto_view_1 = __webpack_require__(159);
	var view_1 = __webpack_require__(132);
	var view_container_1 = __webpack_require__(161);
	var util_1 = __webpack_require__(160);
	var api_1 = __webpack_require__(122);
	// TODO(tbosch): use an OpaqueToken here once our transpiler supports
	// const expressions!
	exports.DOCUMENT_TOKEN = 'DocumentToken';
	var DomRenderer = (function (_super) {
	    __extends(DomRenderer, _super);
	    function DomRenderer(eventManager, shadowDomStrategy, document) {
	        _super.call(this);
	        this._eventManager = eventManager;
	        this._shadowDomStrategy = shadowDomStrategy;
	        this._document = document;
	    }
	    DomRenderer.prototype.createRootHostView = function (hostProtoViewRef, hostElementSelector) {
	        var hostProtoView = proto_view_1.resolveInternalDomProtoView(hostProtoViewRef);
	        var element = dom_adapter_1.DOM.querySelector(this._document, hostElementSelector);
	        if (lang_1.isBlank(element)) {
	            throw new lang_1.BaseException("The selector \"" + hostElementSelector + "\" did not match any elements");
	        }
	        return new view_1.DomViewRef(this._createView(hostProtoView, element));
	    };
	    DomRenderer.prototype.detachFreeHostView = function (parentHostViewRef, hostViewRef) {
	        var hostView = view_1.resolveInternalDomView(hostViewRef);
	        this._removeViewNodes(hostView);
	    };
	    DomRenderer.prototype.createView = function (protoViewRef) {
	        var protoView = proto_view_1.resolveInternalDomProtoView(protoViewRef);
	        return new view_1.DomViewRef(this._createView(protoView, null));
	    };
	    DomRenderer.prototype.destroyView = function (view) {
	        // noop for now
	    };
	    DomRenderer.prototype.attachComponentView = function (hostViewRef, elementIndex, componentViewRef) {
	        var hostView = view_1.resolveInternalDomView(hostViewRef);
	        var componentView = view_1.resolveInternalDomView(componentViewRef);
	        var element = hostView.boundElements[elementIndex];
	        var lightDom = hostView.lightDoms[elementIndex];
	        if (lang_1.isPresent(lightDom)) {
	            lightDom.attachShadowDomView(componentView);
	        }
	        var shadowRoot = this._shadowDomStrategy.prepareShadowRoot(element);
	        this._moveViewNodesIntoParent(shadowRoot, componentView);
	        componentView.hostLightDom = lightDom;
	        componentView.shadowRoot = shadowRoot;
	    };
	    DomRenderer.prototype.setComponentViewRootNodes = function (componentViewRef, rootNodes) {
	        var componentView = view_1.resolveInternalDomView(componentViewRef);
	        this._removeViewNodes(componentView);
	        componentView.rootNodes = rootNodes;
	        this._moveViewNodesIntoParent(componentView.shadowRoot, componentView);
	    };
	    DomRenderer.prototype.getHostElement = function (hostViewRef) {
	        var hostView = view_1.resolveInternalDomView(hostViewRef);
	        return hostView.boundElements[0];
	    };
	    DomRenderer.prototype.detachComponentView = function (hostViewRef, boundElementIndex, componentViewRef) {
	        var hostView = view_1.resolveInternalDomView(hostViewRef);
	        var componentView = view_1.resolveInternalDomView(componentViewRef);
	        this._removeViewNodes(componentView);
	        var lightDom = hostView.lightDoms[boundElementIndex];
	        if (lang_1.isPresent(lightDom)) {
	            lightDom.detachShadowDomView();
	        }
	        componentView.hostLightDom = null;
	        componentView.shadowRoot = null;
	    };
	    DomRenderer.prototype.attachViewInContainer = function (parentViewRef, boundElementIndex, atIndex, viewRef) {
	        var parentView = view_1.resolveInternalDomView(parentViewRef);
	        var view = view_1.resolveInternalDomView(viewRef);
	        var viewContainer = this._getOrCreateViewContainer(parentView, boundElementIndex);
	        collection_1.ListWrapper.insert(viewContainer.views, atIndex, view);
	        view.hostLightDom = parentView.hostLightDom;
	        var directParentLightDom = parentView.getDirectParentLightDom(boundElementIndex);
	        if (lang_1.isBlank(directParentLightDom)) {
	            var siblingToInsertAfter;
	            if (atIndex == 0) {
	                siblingToInsertAfter = parentView.boundElements[boundElementIndex];
	            }
	            else {
	                siblingToInsertAfter = collection_1.ListWrapper.last(viewContainer.views[atIndex - 1].rootNodes);
	            }
	            this._moveViewNodesAfterSibling(siblingToInsertAfter, view);
	        }
	        else {
	            directParentLightDom.redistribute();
	        }
	        // new content tags might have appeared, we need to redistribute.
	        if (lang_1.isPresent(parentView.hostLightDom)) {
	            parentView.hostLightDom.redistribute();
	        }
	    };
	    DomRenderer.prototype.detachViewInContainer = function (parentViewRef, boundElementIndex, atIndex, viewRef) {
	        var parentView = view_1.resolveInternalDomView(parentViewRef);
	        var view = view_1.resolveInternalDomView(viewRef);
	        var viewContainer = parentView.viewContainers[boundElementIndex];
	        var detachedView = viewContainer.views[atIndex];
	        collection_1.ListWrapper.removeAt(viewContainer.views, atIndex);
	        var directParentLightDom = parentView.getDirectParentLightDom(boundElementIndex);
	        if (lang_1.isBlank(directParentLightDom)) {
	            this._removeViewNodes(detachedView);
	        }
	        else {
	            directParentLightDom.redistribute();
	        }
	        view.hostLightDom = null;
	        // content tags might have disappeared we need to do redistribution.
	        if (lang_1.isPresent(parentView.hostLightDom)) {
	            parentView.hostLightDom.redistribute();
	        }
	    };
	    DomRenderer.prototype.hydrateView = function (viewRef) {
	        var view = view_1.resolveInternalDomView(viewRef);
	        if (view.hydrated)
	            throw new lang_1.BaseException('The view is already hydrated.');
	        view.hydrated = true;
	        for (var i = 0; i < view.lightDoms.length; ++i) {
	            var lightDom = view.lightDoms[i];
	            if (lang_1.isPresent(lightDom)) {
	                lightDom.redistribute();
	            }
	        }
	        // add global events
	        view.eventHandlerRemovers = collection_1.ListWrapper.create();
	        var binders = view.proto.elementBinders;
	        for (var binderIdx = 0; binderIdx < binders.length; binderIdx++) {
	            var binder = binders[binderIdx];
	            if (lang_1.isPresent(binder.globalEvents)) {
	                for (var i = 0; i < binder.globalEvents.length; i++) {
	                    var globalEvent = binder.globalEvents[i];
	                    var remover = this._createGlobalEventListener(view, binderIdx, globalEvent.name, globalEvent.target, globalEvent.fullName);
	                    collection_1.ListWrapper.push(view.eventHandlerRemovers, remover);
	                }
	            }
	        }
	        if (lang_1.isPresent(view.hostLightDom)) {
	            view.hostLightDom.redistribute();
	        }
	    };
	    DomRenderer.prototype.dehydrateView = function (viewRef) {
	        var view = view_1.resolveInternalDomView(viewRef);
	        // remove global events
	        for (var i = 0; i < view.eventHandlerRemovers.length; i++) {
	            view.eventHandlerRemovers[i]();
	        }
	        view.eventHandlerRemovers = null;
	        view.hydrated = false;
	    };
	    DomRenderer.prototype.setElementProperty = function (viewRef, elementIndex, propertyName, propertyValue) {
	        var view = view_1.resolveInternalDomView(viewRef);
	        view.setElementProperty(elementIndex, propertyName, propertyValue);
	    };
	    DomRenderer.prototype.callAction = function (viewRef, elementIndex, actionExpression, actionArgs) {
	        var view = view_1.resolveInternalDomView(viewRef);
	        view.callAction(elementIndex, actionExpression, actionArgs);
	    };
	    DomRenderer.prototype.setText = function (viewRef, textNodeIndex, text) {
	        var view = view_1.resolveInternalDomView(viewRef);
	        dom_adapter_1.DOM.setText(view.boundTextNodes[textNodeIndex], text);
	    };
	    DomRenderer.prototype.setEventDispatcher = function (viewRef, dispatcher /*api.EventDispatcher*/) {
	        var view = view_1.resolveInternalDomView(viewRef);
	        view.eventDispatcher = dispatcher;
	    };
	    DomRenderer.prototype._createView = function (protoView, inplaceElement) {
	        var rootElementClone = lang_1.isPresent(inplaceElement) ? inplaceElement : dom_adapter_1.DOM.importIntoDoc(protoView.element);
	        var elementsWithBindingsDynamic;
	        if (protoView.isTemplateElement) {
	            elementsWithBindingsDynamic =
	                dom_adapter_1.DOM.querySelectorAll(dom_adapter_1.DOM.content(rootElementClone), util_1.NG_BINDING_CLASS_SELECTOR);
	        }
	        else {
	            elementsWithBindingsDynamic = dom_adapter_1.DOM.getElementsByClassName(rootElementClone, util_1.NG_BINDING_CLASS);
	        }
	        var elementsWithBindings = collection_1.ListWrapper.createFixedSize(elementsWithBindingsDynamic.length);
	        for (var binderIdx = 0; binderIdx < elementsWithBindingsDynamic.length; ++binderIdx) {
	            elementsWithBindings[binderIdx] = elementsWithBindingsDynamic[binderIdx];
	        }
	        var viewRootNodes;
	        if (protoView.isTemplateElement) {
	            var childNode = dom_adapter_1.DOM.firstChild(dom_adapter_1.DOM.content(rootElementClone));
	            viewRootNodes =
	                []; // TODO(perf): Should be fixed size, since we could pre-compute in in DomProtoView
	            // Note: An explicit loop is the fastest way to convert a DOM array into a JS array!
	            while (childNode != null) {
	                collection_1.ListWrapper.push(viewRootNodes, childNode);
	                childNode = dom_adapter_1.DOM.nextSibling(childNode);
	            }
	        }
	        else {
	            viewRootNodes = [rootElementClone];
	        }
	        var binders = protoView.elementBinders;
	        var boundTextNodes = [];
	        var boundElements = collection_1.ListWrapper.createFixedSize(binders.length);
	        var contentTags = collection_1.ListWrapper.createFixedSize(binders.length);
	        for (var binderIdx = 0; binderIdx < binders.length; binderIdx++) {
	            var binder = binders[binderIdx];
	            var element;
	            if (binderIdx === 0 && protoView.rootBindingOffset === 1) {
	                element = rootElementClone;
	            }
	            else {
	                element = elementsWithBindings[binderIdx - protoView.rootBindingOffset];
	            }
	            boundElements[binderIdx] = element;
	            // boundTextNodes
	            var childNodes = dom_adapter_1.DOM.childNodes(dom_adapter_1.DOM.templateAwareRoot(element));
	            var textNodeIndices = binder.textNodeIndices;
	            for (var i = 0; i < textNodeIndices.length; i++) {
	                collection_1.ListWrapper.push(boundTextNodes, childNodes[textNodeIndices[i]]);
	            }
	            // contentTags
	            var contentTag = null;
	            if (lang_1.isPresent(binder.contentTagSelector)) {
	                contentTag = new content_tag_1.Content(element, binder.contentTagSelector);
	            }
	            contentTags[binderIdx] = contentTag;
	        }
	        var view = new view_1.DomView(protoView, viewRootNodes, boundTextNodes, boundElements, contentTags);
	        for (var binderIdx = 0; binderIdx < binders.length; binderIdx++) {
	            var binder = binders[binderIdx];
	            var element = boundElements[binderIdx];
	            // lightDoms
	            var lightDom = null;
	            if (lang_1.isPresent(binder.componentId)) {
	                lightDom = this._shadowDomStrategy.constructLightDom(view, boundElements[binderIdx]);
	            }
	            view.lightDoms[binderIdx] = lightDom;
	            // init contentTags
	            var contentTag = contentTags[binderIdx];
	            if (lang_1.isPresent(contentTag)) {
	                var destLightDom = view.getDirectParentLightDom(binderIdx);
	                contentTag.init(destLightDom);
	            }
	            // events
	            if (lang_1.isPresent(binder.eventLocals) && lang_1.isPresent(binder.localEvents)) {
	                for (var i = 0; i < binder.localEvents.length; i++) {
	                    this._createEventListener(view, element, binderIdx, binder.localEvents[i].name, binder.eventLocals);
	                }
	            }
	        }
	        return view;
	    };
	    DomRenderer.prototype._createEventListener = function (view, element, elementIndex, eventName, eventLocals) {
	        this._eventManager.addEventListener(element, eventName, function (event) { view.dispatchEvent(elementIndex, eventName, event); });
	    };
	    DomRenderer.prototype._moveViewNodesAfterSibling = function (sibling, view) {
	        for (var i = view.rootNodes.length - 1; i >= 0; --i) {
	            dom_adapter_1.DOM.insertAfter(sibling, view.rootNodes[i]);
	        }
	    };
	    DomRenderer.prototype._moveViewNodesIntoParent = function (parent, view) {
	        for (var i = 0; i < view.rootNodes.length; ++i) {
	            dom_adapter_1.DOM.appendChild(parent, view.rootNodes[i]);
	        }
	    };
	    DomRenderer.prototype._removeViewNodes = function (view) {
	        var len = view.rootNodes.length;
	        if (len == 0)
	            return;
	        var parent = view.rootNodes[0].parentNode;
	        for (var i = len - 1; i >= 0; --i) {
	            dom_adapter_1.DOM.removeChild(parent, view.rootNodes[i]);
	        }
	    };
	    DomRenderer.prototype._getOrCreateViewContainer = function (parentView, boundElementIndex) {
	        var vc = parentView.viewContainers[boundElementIndex];
	        if (lang_1.isBlank(vc)) {
	            vc = new view_container_1.DomViewContainer();
	            parentView.viewContainers[boundElementIndex] = vc;
	        }
	        return vc;
	    };
	    DomRenderer.prototype._createGlobalEventListener = function (view, elementIndex, eventName, eventTarget, fullName) {
	        return this._eventManager.addGlobalEventListener(eventTarget, eventName, function (event) { view.dispatchEvent(elementIndex, fullName, event); });
	    };
	    DomRenderer = __decorate([
	        di_1.Injectable(),
	        __param(2, di_1.Inject(exports.DOCUMENT_TOKEN)), 
	        __metadata('design:paramtypes', [event_manager_1.EventManager, shadow_dom_strategy_1.ShadowDomStrategy, Object])
	    ], DomRenderer);
	    return DomRenderer;
	})(api_1.Renderer);
	exports.DomRenderer = DomRenderer;
	exports.__esModule = true;
	//# sourceMappingURL=dom_renderer.js.map

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var dom_adapter_1 = __webpack_require__(107);
	var lang_1 = __webpack_require__(60);
	var collection_1 = __webpack_require__(61);
	var ContentStrategy = (function () {
	    function ContentStrategy() {
	    }
	    ContentStrategy.prototype.insert = function (nodes) { };
	    return ContentStrategy;
	})();
	/**
	 * An implementation of the content tag that is used by transcluding components.
	 * It is used when the content tag is not a direct child of another component,
	 * and thus does not affect redistribution.
	 */
	var RenderedContent = (function (_super) {
	    __extends(RenderedContent, _super);
	    function RenderedContent(contentEl) {
	        _super.call(this);
	        this.beginScript = contentEl;
	        this.endScript = dom_adapter_1.DOM.nextSibling(this.beginScript);
	        this.nodes = [];
	    }
	    // Inserts the nodes in between the start and end scripts.
	    // Previous content is removed.
	    RenderedContent.prototype.insert = function (nodes) {
	        this.nodes = nodes;
	        dom_adapter_1.DOM.insertAllBefore(this.endScript, nodes);
	        this._removeNodesUntil(collection_1.ListWrapper.isEmpty(nodes) ? this.endScript : nodes[0]);
	    };
	    RenderedContent.prototype._removeNodesUntil = function (node) {
	        var p = dom_adapter_1.DOM.parentElement(this.beginScript);
	        for (var next = dom_adapter_1.DOM.nextSibling(this.beginScript); next !== node; next = dom_adapter_1.DOM.nextSibling(this.beginScript)) {
	            dom_adapter_1.DOM.removeChild(p, next);
	        }
	    };
	    return RenderedContent;
	})(ContentStrategy);
	/**
	 * An implementation of the content tag that is used by transcluding components.
	 * It is used when the content tag is a direct child of another component,
	 * and thus does not get rendered but only affect the distribution of its parent component.
	 */
	var IntermediateContent = (function (_super) {
	    __extends(IntermediateContent, _super);
	    function IntermediateContent(destinationLightDom) {
	        _super.call(this);
	        this.nodes = [];
	        this.destinationLightDom = destinationLightDom;
	    }
	    IntermediateContent.prototype.insert = function (nodes) {
	        this.nodes = nodes;
	        this.destinationLightDom.redistribute();
	    };
	    return IntermediateContent;
	})(ContentStrategy);
	var Content = (function () {
	    function Content(contentStartEl, selector) {
	        this.select = selector;
	        this.contentStartElement = contentStartEl;
	        this._strategy = null;
	    }
	    Content.prototype.init = function (destinationLightDom) {
	        this._strategy = lang_1.isPresent(destinationLightDom) ? new IntermediateContent(destinationLightDom) :
	            new RenderedContent(this.contentStartElement);
	    };
	    Content.prototype.nodes = function () { return this._strategy.nodes; };
	    Content.prototype.insert = function (nodes) { this._strategy.insert(nodes); };
	    return Content;
	})();
	exports.Content = Content;
	exports.__esModule = true;
	//# sourceMappingURL=content_tag.js.map

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var lang_1 = __webpack_require__(60);
	var dom_adapter_1 = __webpack_require__(107);
	var util_1 = __webpack_require__(160);
	var api_1 = __webpack_require__(122);
	function resolveInternalDomProtoView(protoViewRef) {
	    return protoViewRef._protoView;
	}
	exports.resolveInternalDomProtoView = resolveInternalDomProtoView;
	var DomProtoViewRef = (function (_super) {
	    __extends(DomProtoViewRef, _super);
	    function DomProtoViewRef(protoView) {
	        _super.call(this);
	        this._protoView = protoView;
	    }
	    return DomProtoViewRef;
	})(api_1.RenderProtoViewRef);
	exports.DomProtoViewRef = DomProtoViewRef;
	var DomProtoView = (function () {
	    function DomProtoView(_a) {
	        var elementBinders = _a.elementBinders, element = _a.element;
	        this.element = element;
	        this.elementBinders = elementBinders;
	        this.isTemplateElement = dom_adapter_1.DOM.isTemplateElement(this.element);
	        this.rootBindingOffset =
	            (lang_1.isPresent(this.element) && dom_adapter_1.DOM.hasClass(this.element, util_1.NG_BINDING_CLASS)) ? 1 : 0;
	    }
	    return DomProtoView;
	})();
	exports.DomProtoView = DomProtoView;
	exports.__esModule = true;
	//# sourceMappingURL=proto_view.js.map

/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	var lang_1 = __webpack_require__(60);
	exports.NG_BINDING_CLASS_SELECTOR = '.ng-binding';
	exports.NG_BINDING_CLASS = 'ng-binding';
	exports.EVENT_TARGET_SEPARATOR = ':';
	var CAMEL_CASE_REGEXP = lang_1.RegExpWrapper.create('([A-Z])');
	var DASH_CASE_REGEXP = lang_1.RegExpWrapper.create('-([a-z])');
	function camelCaseToDashCase(input) {
	    return lang_1.StringWrapper.replaceAllMapped(input, CAMEL_CASE_REGEXP, function (m) { return '-' + m[1].toLowerCase(); });
	}
	exports.camelCaseToDashCase = camelCaseToDashCase;
	function dashCaseToCamelCase(input) {
	    return lang_1.StringWrapper.replaceAllMapped(input, DASH_CASE_REGEXP, function (m) { return m[1].toUpperCase(); });
	}
	exports.dashCaseToCamelCase = dashCaseToCamelCase;
	exports.__esModule = true;
	//# sourceMappingURL=util.js.map

/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	var collection_1 = __webpack_require__(61);
	var DomViewContainer = (function () {
	    function DomViewContainer() {
	        // The order in this list matches the DOM order.
	        this.views = [];
	    }
	    DomViewContainer.prototype.contentTagContainers = function () { return this.views; };
	    DomViewContainer.prototype.nodes = function () {
	        var r = [];
	        for (var i = 0; i < this.views.length; ++i) {
	            r = collection_1.ListWrapper.concat(r, this.views[i].rootNodes);
	        }
	        return r;
	    };
	    return DomViewContainer;
	})();
	exports.DomViewContainer = DomViewContainer;
	exports.__esModule = true;
	//# sourceMappingURL=view_container.js.map

/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(108);
	var async_1 = __webpack_require__(94);
	var lang_1 = __webpack_require__(60);
	var dom_adapter_1 = __webpack_require__(107);
	var api_1 = __webpack_require__(122);
	var compile_pipeline_1 = __webpack_require__(163);
	var template_loader_1 = __webpack_require__(140);
	var compile_step_factory_1 = __webpack_require__(169);
	var change_detection_1 = __webpack_require__(58);
	var shadow_dom_strategy_1 = __webpack_require__(100);
	/**
	 * The compiler loads and translates the html templates of components into
	 * nested ProtoViews. To decompose its functionality it uses
	 * the CompilePipeline and the CompileSteps.
	 */
	var DomCompiler = (function (_super) {
	    __extends(DomCompiler, _super);
	    function DomCompiler(stepFactory, templateLoader) {
	        _super.call(this);
	        this._templateLoader = templateLoader;
	        this._stepFactory = stepFactory;
	    }
	    DomCompiler.prototype.compile = function (template) {
	        var _this = this;
	        var tplPromise = this._templateLoader.load(template);
	        return async_1.PromiseWrapper.then(tplPromise, function (el) { return _this._compileTemplate(template, el, api_1.ProtoViewDto.COMPONENT_VIEW_TYPE); }, function (_) {
	            throw new lang_1.BaseException("Failed to load the template \"" + template.componentId + "\"");
	        });
	    };
	    DomCompiler.prototype.compileHost = function (directiveMetadata) {
	        var hostViewDef = new api_1.ViewDefinition({
	            componentId: directiveMetadata.id,
	            absUrl: null, template: null,
	            directives: [directiveMetadata]
	        });
	        var element = dom_adapter_1.DOM.createElement(directiveMetadata.selector);
	        return this._compileTemplate(hostViewDef, element, api_1.ProtoViewDto.HOST_VIEW_TYPE);
	    };
	    DomCompiler.prototype._compileTemplate = function (viewDef, tplElement, protoViewType) {
	        var subTaskPromises = [];
	        var pipeline = new compile_pipeline_1.CompilePipeline(this._stepFactory.createSteps(viewDef, subTaskPromises));
	        var compileElements = pipeline.process(tplElement, protoViewType, viewDef.componentId);
	        var protoView = compileElements[0].inheritedProtoView.build();
	        if (subTaskPromises.length > 0) {
	            return async_1.PromiseWrapper.all(subTaskPromises).then(function (_) { return protoView; });
	        }
	        else {
	            return async_1.PromiseWrapper.resolve(protoView);
	        }
	    };
	    return DomCompiler;
	})(api_1.RenderCompiler);
	exports.DomCompiler = DomCompiler;
	var DefaultDomCompiler = (function (_super) {
	    __extends(DefaultDomCompiler, _super);
	    function DefaultDomCompiler(parser, shadowDomStrategy, templateLoader) {
	        _super.call(this, new compile_step_factory_1.DefaultStepFactory(parser, shadowDomStrategy), templateLoader);
	    }
	    DefaultDomCompiler = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [change_detection_1.Parser, shadow_dom_strategy_1.ShadowDomStrategy, template_loader_1.TemplateLoader])
	    ], DefaultDomCompiler);
	    return DefaultDomCompiler;
	})(DomCompiler);
	exports.DefaultDomCompiler = DefaultDomCompiler;
	exports.__esModule = true;
	//# sourceMappingURL=compiler.js.map

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	var lang_1 = __webpack_require__(60);
	var collection_1 = __webpack_require__(61);
	var dom_adapter_1 = __webpack_require__(107);
	var compile_element_1 = __webpack_require__(164);
	var compile_control_1 = __webpack_require__(165);
	var proto_view_builder_1 = __webpack_require__(166);
	var api_1 = __webpack_require__(122);
	/**
	 * CompilePipeline for executing CompileSteps recursively for
	 * all elements in a template.
	 */
	var CompilePipeline = (function () {
	    function CompilePipeline(steps) {
	        this._control = new compile_control_1.CompileControl(steps);
	    }
	    CompilePipeline.prototype.process = function (rootElement, protoViewType, compilationCtxtDescription) {
	        if (protoViewType === void 0) { protoViewType = null; }
	        if (compilationCtxtDescription === void 0) { compilationCtxtDescription = ''; }
	        if (lang_1.isBlank(protoViewType)) {
	            protoViewType = api_1.ProtoViewDto.COMPONENT_VIEW_TYPE;
	        }
	        var results = collection_1.ListWrapper.create();
	        var rootCompileElement = new compile_element_1.CompileElement(rootElement, compilationCtxtDescription);
	        rootCompileElement.inheritedProtoView = new proto_view_builder_1.ProtoViewBuilder(rootElement, protoViewType);
	        rootCompileElement.isViewRoot = true;
	        this._process(results, null, rootCompileElement, compilationCtxtDescription);
	        return results;
	    };
	    CompilePipeline.prototype._process = function (results, parent, current, compilationCtxtDescription) {
	        if (compilationCtxtDescription === void 0) { compilationCtxtDescription = ''; }
	        var additionalChildren = this._control.internalProcess(results, 0, parent, current);
	        if (current.compileChildren) {
	            var node = dom_adapter_1.DOM.firstChild(dom_adapter_1.DOM.templateAwareRoot(current.element));
	            while (lang_1.isPresent(node)) {
	                // compiliation can potentially move the node, so we need to store the
	                // next sibling before recursing.
	                var nextNode = dom_adapter_1.DOM.nextSibling(node);
	                if (dom_adapter_1.DOM.isElementNode(node)) {
	                    var childCompileElement = new compile_element_1.CompileElement(node, compilationCtxtDescription);
	                    childCompileElement.inheritedProtoView = current.inheritedProtoView;
	                    childCompileElement.inheritedElementBinder = current.inheritedElementBinder;
	                    childCompileElement.distanceToInheritedBinder = current.distanceToInheritedBinder + 1;
	                    this._process(results, current, childCompileElement);
	                }
	                node = nextNode;
	            }
	        }
	        if (lang_1.isPresent(additionalChildren)) {
	            for (var i = 0; i < additionalChildren.length; i++) {
	                this._process(results, current, additionalChildren[i]);
	            }
	        }
	    };
	    return CompilePipeline;
	})();
	exports.CompilePipeline = CompilePipeline;
	exports.__esModule = true;
	//# sourceMappingURL=compile_pipeline.js.map

/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	var collection_1 = __webpack_require__(61);
	var dom_adapter_1 = __webpack_require__(107);
	var lang_1 = __webpack_require__(60);
	/**
	 * Collects all data that is needed to process an element
	 * in the compile process. Fields are filled
	 * by the CompileSteps starting out with the pure HTMLElement.
	 */
	var CompileElement = (function () {
	    // error
	    function CompileElement(element, compilationUnit) {
	        if (compilationUnit === void 0) { compilationUnit = ''; }
	        this.element = element;
	        this._attrs = null;
	        this._classList = null;
	        this.isViewRoot = false;
	        // inherited down to children if they don't have
	        // an own protoView
	        this.inheritedProtoView = null;
	        // inherited down to children if they don't have
	        // an own elementBinder
	        this.inheritedElementBinder = null;
	        this.distanceToInheritedBinder = 0;
	        this.compileChildren = true;
	        // description is calculated here as compilation steps may change the element
	        var tplDesc = lang_1.assertionsEnabled() ? getElementDescription(element) : null;
	        if (compilationUnit !== '') {
	            this.elementDescription = compilationUnit;
	            if (lang_1.isPresent(tplDesc))
	                this.elementDescription += ": " + tplDesc;
	        }
	        else {
	            this.elementDescription = tplDesc;
	        }
	    }
	    CompileElement.prototype.isBound = function () {
	        return lang_1.isPresent(this.inheritedElementBinder) && this.distanceToInheritedBinder === 0;
	    };
	    CompileElement.prototype.bindElement = function () {
	        if (!this.isBound()) {
	            var parentBinder = this.inheritedElementBinder;
	            this.inheritedElementBinder =
	                this.inheritedProtoView.bindElement(this.element, this.elementDescription);
	            if (lang_1.isPresent(parentBinder)) {
	                this.inheritedElementBinder.setParent(parentBinder, this.distanceToInheritedBinder);
	            }
	            this.distanceToInheritedBinder = 0;
	        }
	        return this.inheritedElementBinder;
	    };
	    CompileElement.prototype.refreshAttrs = function () { this._attrs = null; };
	    CompileElement.prototype.attrs = function () {
	        if (lang_1.isBlank(this._attrs)) {
	            this._attrs = dom_adapter_1.DOM.attributeMap(this.element);
	        }
	        return this._attrs;
	    };
	    CompileElement.prototype.refreshClassList = function () { this._classList = null; };
	    CompileElement.prototype.classList = function () {
	        if (lang_1.isBlank(this._classList)) {
	            this._classList = collection_1.ListWrapper.create();
	            var elClassList = dom_adapter_1.DOM.classList(this.element);
	            for (var i = 0; i < elClassList.length; i++) {
	                collection_1.ListWrapper.push(this._classList, elClassList[i]);
	            }
	        }
	        return this._classList;
	    };
	    return CompileElement;
	})();
	exports.CompileElement = CompileElement;
	// return an HTML representation of an element start tag - without its content
	// this is used to give contextual information in case of errors
	function getElementDescription(domElement) {
	    var buf = new lang_1.StringJoiner();
	    var atts = dom_adapter_1.DOM.attributeMap(domElement);
	    buf.add("<");
	    buf.add(dom_adapter_1.DOM.tagName(domElement).toLowerCase());
	    // show id and class first to ease element identification
	    addDescriptionAttribute(buf, "id", collection_1.MapWrapper.get(atts, "id"));
	    addDescriptionAttribute(buf, "class", collection_1.MapWrapper.get(atts, "class"));
	    collection_1.MapWrapper.forEach(atts, function (attValue, attName) {
	        if (attName !== "id" && attName !== "class") {
	            addDescriptionAttribute(buf, attName, attValue);
	        }
	    });
	    buf.add(">");
	    return buf.toString();
	}
	function addDescriptionAttribute(buffer, attName, attValue) {
	    if (lang_1.isPresent(attValue)) {
	        if (attValue.length === 0) {
	            buffer.add(' ' + attName);
	        }
	        else {
	            buffer.add(' ' + attName + '="' + attValue + '"');
	        }
	    }
	}
	exports.__esModule = true;
	//# sourceMappingURL=compile_element.js.map

/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	var lang_1 = __webpack_require__(60);
	var collection_1 = __webpack_require__(61);
	/**
	 * Controls the processing order of elements.
	 * Right now it only allows to add a parent element.
	 */
	var CompileControl = (function () {
	    function CompileControl(steps) {
	        this._steps = steps;
	        this._currentStepIndex = 0;
	        this._parent = null;
	        this._results = null;
	        this._additionalChildren = null;
	    }
	    // only public so that it can be used by compile_pipeline
	    CompileControl.prototype.internalProcess = function (results, startStepIndex, parent, current) {
	        this._results = results;
	        var previousStepIndex = this._currentStepIndex;
	        var previousParent = this._parent;
	        this._ignoreCurrentElement = false;
	        for (var i = startStepIndex; i < this._steps.length && !this._ignoreCurrentElement; i++) {
	            var step = this._steps[i];
	            this._parent = parent;
	            this._currentStepIndex = i;
	            step.process(parent, current, this);
	            parent = this._parent;
	        }
	        if (!this._ignoreCurrentElement) {
	            collection_1.ListWrapper.push(results, current);
	        }
	        this._currentStepIndex = previousStepIndex;
	        this._parent = previousParent;
	        var localAdditionalChildren = this._additionalChildren;
	        this._additionalChildren = null;
	        return localAdditionalChildren;
	    };
	    CompileControl.prototype.addParent = function (newElement) {
	        this.internalProcess(this._results, this._currentStepIndex + 1, this._parent, newElement);
	        this._parent = newElement;
	    };
	    CompileControl.prototype.addChild = function (element) {
	        if (lang_1.isBlank(this._additionalChildren)) {
	            this._additionalChildren = collection_1.ListWrapper.create();
	        }
	        collection_1.ListWrapper.push(this._additionalChildren, element);
	    };
	    /**
	     * Ignores the current element.
	     *
	     * When a step calls `ignoreCurrentElement`, no further steps are executed on the current
	     * element and no `CompileElement` is added to the result list.
	     */
	    CompileControl.prototype.ignoreCurrentElement = function () { this._ignoreCurrentElement = true; };
	    return CompileControl;
	})();
	exports.CompileControl = CompileControl;
	exports.__esModule = true;
	//# sourceMappingURL=compile_control.js.map

/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var lang_1 = __webpack_require__(60);
	var collection_1 = __webpack_require__(61);
	var dom_adapter_1 = __webpack_require__(107);
	var change_detection_1 = __webpack_require__(58);
	var proto_view_1 = __webpack_require__(159);
	var element_binder_1 = __webpack_require__(167);
	var property_setter_factory_1 = __webpack_require__(168);
	var api = __webpack_require__(122);
	var util_1 = __webpack_require__(160);
	var ProtoViewBuilder = (function () {
	    function ProtoViewBuilder(rootElement, type) {
	        this.rootElement = rootElement;
	        this.elements = [];
	        this.variableBindings = collection_1.MapWrapper.create();
	        this.type = type;
	    }
	    ProtoViewBuilder.prototype.bindElement = function (element, description) {
	        if (description === void 0) { description = null; }
	        var builder = new ElementBinderBuilder(this.elements.length, element, description);
	        collection_1.ListWrapper.push(this.elements, builder);
	        dom_adapter_1.DOM.addClass(element, util_1.NG_BINDING_CLASS);
	        return builder;
	    };
	    ProtoViewBuilder.prototype.bindVariable = function (name, value) {
	        // Store the variable map from value to variable, reflecting how it will be used later by
	        // DomView. When a local is set to the view, a lookup for the variable name will take place
	        // keyed
	        // by the "value", or exported identifier. For example, ng-for sets a view local of "index".
	        // When this occurs, a lookup keyed by "index" must occur to find if there is a var referencing
	        // it.
	        collection_1.MapWrapper.set(this.variableBindings, value, name);
	    };
	    ProtoViewBuilder.prototype.build = function () {
	        var renderElementBinders = [];
	        var apiElementBinders = [];
	        collection_1.ListWrapper.forEach(this.elements, function (ebb) {
	            var propertySetters = collection_1.MapWrapper.create();
	            var hostActions = collection_1.MapWrapper.create();
	            var apiDirectiveBinders = collection_1.ListWrapper.map(ebb.directives, function (dbb) {
	                ebb.eventBuilder.merge(dbb.eventBuilder);
	                collection_1.MapWrapper.forEach(dbb.hostPropertyBindings, function (_, hostPropertyName) {
	                    collection_1.MapWrapper.set(propertySetters, hostPropertyName, property_setter_factory_1.setterFactory(hostPropertyName));
	                });
	                collection_1.ListWrapper.forEach(dbb.hostActions, function (hostAction) {
	                    collection_1.MapWrapper.set(hostActions, hostAction.actionExpression, hostAction.expression);
	                });
	                return new api.DirectiveBinder({
	                    directiveIndex: dbb.directiveIndex,
	                    propertyBindings: dbb.propertyBindings,
	                    eventBindings: dbb.eventBindings,
	                    hostPropertyBindings: dbb.hostPropertyBindings
	                });
	            });
	            collection_1.MapWrapper.forEach(ebb.propertyBindings, function (_, propertyName) {
	                collection_1.MapWrapper.set(propertySetters, propertyName, property_setter_factory_1.setterFactory(propertyName));
	            });
	            var nestedProtoView = lang_1.isPresent(ebb.nestedProtoView) ? ebb.nestedProtoView.build() : null;
	            var parentIndex = lang_1.isPresent(ebb.parent) ? ebb.parent.index : -1;
	            collection_1.ListWrapper.push(apiElementBinders, new api.ElementBinder({
	                index: ebb.index,
	                parentIndex: parentIndex,
	                distanceToParent: ebb.distanceToParent,
	                directives: apiDirectiveBinders,
	                nestedProtoView: nestedProtoView,
	                propertyBindings: ebb.propertyBindings,
	                variableBindings: ebb.variableBindings,
	                eventBindings: ebb.eventBindings,
	                textBindings: ebb.textBindings,
	                readAttributes: ebb.readAttributes
	            }));
	            collection_1.ListWrapper.push(renderElementBinders, new element_binder_1.ElementBinder({
	                textNodeIndices: ebb.textBindingIndices,
	                contentTagSelector: ebb.contentTagSelector,
	                parentIndex: parentIndex,
	                distanceToParent: ebb.distanceToParent,
	                nestedProtoView: lang_1.isPresent(nestedProtoView) ?
	                    proto_view_1.resolveInternalDomProtoView(nestedProtoView.render) :
	                    null,
	                componentId: ebb.componentId,
	                eventLocals: new change_detection_1.LiteralArray(ebb.eventBuilder.buildEventLocals()),
	                localEvents: ebb.eventBuilder.buildLocalEvents(),
	                globalEvents: ebb.eventBuilder.buildGlobalEvents(),
	                hostActions: hostActions,
	                propertySetters: propertySetters
	            }));
	        });
	        return new api.ProtoViewDto({
	            render: new proto_view_1.DomProtoViewRef(new proto_view_1.DomProtoView({ element: this.rootElement, elementBinders: renderElementBinders })),
	            type: this.type,
	            elementBinders: apiElementBinders,
	            variableBindings: this.variableBindings
	        });
	    };
	    return ProtoViewBuilder;
	})();
	exports.ProtoViewBuilder = ProtoViewBuilder;
	var ElementBinderBuilder = (function () {
	    function ElementBinderBuilder(index, element, description) {
	        this.element = element;
	        this.index = index;
	        this.parent = null;
	        this.distanceToParent = 0;
	        this.directives = [];
	        this.nestedProtoView = null;
	        this.propertyBindings = collection_1.MapWrapper.create();
	        this.variableBindings = collection_1.MapWrapper.create();
	        this.eventBindings = collection_1.ListWrapper.create();
	        this.eventBuilder = new EventBuilder();
	        this.textBindings = [];
	        this.textBindingIndices = [];
	        this.contentTagSelector = null;
	        this.componentId = null;
	        this.readAttributes = collection_1.MapWrapper.create();
	    }
	    ElementBinderBuilder.prototype.setParent = function (parent, distanceToParent) {
	        this.parent = parent;
	        if (lang_1.isPresent(parent)) {
	            this.distanceToParent = distanceToParent;
	        }
	        return this;
	    };
	    ElementBinderBuilder.prototype.readAttribute = function (attrName) {
	        if (lang_1.isBlank(collection_1.MapWrapper.get(this.readAttributes, attrName))) {
	            collection_1.MapWrapper.set(this.readAttributes, attrName, dom_adapter_1.DOM.getAttribute(this.element, attrName));
	        }
	    };
	    ElementBinderBuilder.prototype.bindDirective = function (directiveIndex) {
	        var directive = new DirectiveBuilder(directiveIndex);
	        collection_1.ListWrapper.push(this.directives, directive);
	        return directive;
	    };
	    ElementBinderBuilder.prototype.bindNestedProtoView = function (rootElement) {
	        if (lang_1.isPresent(this.nestedProtoView)) {
	            throw new lang_1.BaseException('Only one nested view per element is allowed');
	        }
	        this.nestedProtoView = new ProtoViewBuilder(rootElement, api.ProtoViewDto.EMBEDDED_VIEW_TYPE);
	        return this.nestedProtoView;
	    };
	    ElementBinderBuilder.prototype.bindProperty = function (name, expression) { collection_1.MapWrapper.set(this.propertyBindings, name, expression); };
	    ElementBinderBuilder.prototype.bindVariable = function (name, value) {
	        // When current is a view root, the variable bindings are set to the *nested* proto view.
	        // The root view conceptually signifies a new "block scope" (the nested view), to which
	        // the variables are bound.
	        if (lang_1.isPresent(this.nestedProtoView)) {
	            this.nestedProtoView.bindVariable(name, value);
	        }
	        else {
	            // Store the variable map from value to variable, reflecting how it will be used later by
	            // DomView. When a local is set to the view, a lookup for the variable name will take place
	            // keyed
	            // by the "value", or exported identifier. For example, ng-for sets a view local of "index".
	            // When this occurs, a lookup keyed by "index" must occur to find if there is a var
	            // referencing
	            // it.
	            collection_1.MapWrapper.set(this.variableBindings, value, name);
	        }
	    };
	    ElementBinderBuilder.prototype.bindEvent = function (name, expression, target) {
	        if (target === void 0) { target = null; }
	        collection_1.ListWrapper.push(this.eventBindings, this.eventBuilder.add(name, expression, target));
	    };
	    ElementBinderBuilder.prototype.bindText = function (index, expression) {
	        collection_1.ListWrapper.push(this.textBindingIndices, index);
	        collection_1.ListWrapper.push(this.textBindings, expression);
	    };
	    ElementBinderBuilder.prototype.setContentTagSelector = function (value) { this.contentTagSelector = value; };
	    ElementBinderBuilder.prototype.setComponentId = function (componentId) { this.componentId = componentId; };
	    return ElementBinderBuilder;
	})();
	exports.ElementBinderBuilder = ElementBinderBuilder;
	var DirectiveBuilder = (function () {
	    function DirectiveBuilder(directiveIndex) {
	        this.directiveIndex = directiveIndex;
	        this.propertyBindings = collection_1.MapWrapper.create();
	        this.hostPropertyBindings = collection_1.MapWrapper.create();
	        this.hostActions = collection_1.ListWrapper.create();
	        this.eventBindings = collection_1.ListWrapper.create();
	        this.eventBuilder = new EventBuilder();
	    }
	    DirectiveBuilder.prototype.bindProperty = function (name, expression) { collection_1.MapWrapper.set(this.propertyBindings, name, expression); };
	    DirectiveBuilder.prototype.bindHostProperty = function (name, expression) {
	        collection_1.MapWrapper.set(this.hostPropertyBindings, name, expression);
	    };
	    DirectiveBuilder.prototype.bindHostAction = function (actionName, actionExpression, expression) {
	        collection_1.ListWrapper.push(this.hostActions, new element_binder_1.HostAction(actionName, actionExpression, expression));
	    };
	    DirectiveBuilder.prototype.bindEvent = function (name, expression, target) {
	        if (target === void 0) { target = null; }
	        collection_1.ListWrapper.push(this.eventBindings, this.eventBuilder.add(name, expression, target));
	    };
	    return DirectiveBuilder;
	})();
	exports.DirectiveBuilder = DirectiveBuilder;
	var EventBuilder = (function (_super) {
	    __extends(EventBuilder, _super);
	    function EventBuilder() {
	        _super.call(this);
	        this.locals = [];
	        this.localEvents = [];
	        this.globalEvents = [];
	        this._implicitReceiver = new change_detection_1.ImplicitReceiver();
	    }
	    EventBuilder.prototype.add = function (name, source, target) {
	        // TODO(tbosch): reenable this when we are parsing element properties
	        // out of action expressions
	        // var adjustedAst = astWithSource.ast.visit(this);
	        var adjustedAst = source.ast;
	        var fullName = lang_1.isPresent(target) ? target + util_1.EVENT_TARGET_SEPARATOR + name : name;
	        var result = new api.EventBinding(fullName, new change_detection_1.ASTWithSource(adjustedAst, source.source, source.location));
	        var event = new element_binder_1.Event(name, target, fullName);
	        if (lang_1.isBlank(target)) {
	            collection_1.ListWrapper.push(this.localEvents, event);
	        }
	        else {
	            collection_1.ListWrapper.push(this.globalEvents, event);
	        }
	        return result;
	    };
	    EventBuilder.prototype.visitAccessMember = function (ast) {
	        var isEventAccess = false;
	        var current = ast;
	        while (!isEventAccess && (current instanceof change_detection_1.AccessMember)) {
	            var am = current;
	            if (am.name == '$event') {
	                isEventAccess = true;
	            }
	            current = am.receiver;
	        }
	        if (isEventAccess) {
	            collection_1.ListWrapper.push(this.locals, ast);
	            var index = this.locals.length - 1;
	            return new change_detection_1.AccessMember(this._implicitReceiver, "" + index, function (arr) { return arr[index]; }, null);
	        }
	        else {
	            return ast;
	        }
	    };
	    EventBuilder.prototype.buildEventLocals = function () { return this.locals; };
	    EventBuilder.prototype.buildLocalEvents = function () { return this.localEvents; };
	    EventBuilder.prototype.buildGlobalEvents = function () { return this.globalEvents; };
	    EventBuilder.prototype.merge = function (eventBuilder) {
	        this._merge(this.localEvents, eventBuilder.localEvents);
	        this._merge(this.globalEvents, eventBuilder.globalEvents);
	        collection_1.ListWrapper.concat(this.locals, eventBuilder.locals);
	    };
	    EventBuilder.prototype._merge = function (host, tobeAdded) {
	        var names = collection_1.ListWrapper.create();
	        for (var i = 0; i < host.length; i++) {
	            collection_1.ListWrapper.push(names, host[i].fullName);
	        }
	        for (var j = 0; j < tobeAdded.length; j++) {
	            if (!collection_1.ListWrapper.contains(names, tobeAdded[j].fullName)) {
	                collection_1.ListWrapper.push(host, tobeAdded[j]);
	            }
	        }
	    };
	    return EventBuilder;
	})(change_detection_1.AstTransformer);
	exports.EventBuilder = EventBuilder;
	exports.__esModule = true;
	//# sourceMappingURL=proto_view_builder.js.map

/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	var ElementBinder = (function () {
	    function ElementBinder(_a) {
	        var _b = _a === void 0 ? {} : _a, textNodeIndices = _b.textNodeIndices, contentTagSelector = _b.contentTagSelector, nestedProtoView = _b.nestedProtoView, componentId = _b.componentId, eventLocals = _b.eventLocals, localEvents = _b.localEvents, globalEvents = _b.globalEvents, hostActions = _b.hostActions, parentIndex = _b.parentIndex, distanceToParent = _b.distanceToParent, propertySetters = _b.propertySetters;
	        this.textNodeIndices = textNodeIndices;
	        this.contentTagSelector = contentTagSelector;
	        this.nestedProtoView = nestedProtoView;
	        this.componentId = componentId;
	        this.eventLocals = eventLocals;
	        this.localEvents = localEvents;
	        this.globalEvents = globalEvents;
	        this.hostActions = hostActions;
	        this.parentIndex = parentIndex;
	        this.distanceToParent = distanceToParent;
	        this.propertySetters = propertySetters;
	    }
	    return ElementBinder;
	})();
	exports.ElementBinder = ElementBinder;
	var Event = (function () {
	    function Event(name, target, fullName) {
	        this.name = name;
	        this.target = target;
	        this.fullName = fullName;
	    }
	    return Event;
	})();
	exports.Event = Event;
	var HostAction = (function () {
	    function HostAction(actionName, actionExpression, expression) {
	        this.actionName = actionName;
	        this.actionExpression = actionExpression;
	        this.expression = expression;
	    }
	    return HostAction;
	})();
	exports.HostAction = HostAction;
	exports.__esModule = true;
	//# sourceMappingURL=element_binder.js.map

/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	var lang_1 = __webpack_require__(60);
	var collection_1 = __webpack_require__(61);
	var dom_adapter_1 = __webpack_require__(107);
	var util_1 = __webpack_require__(160);
	var reflection_1 = __webpack_require__(68);
	var STYLE_SEPARATOR = '.';
	var propertySettersCache = collection_1.StringMapWrapper.create();
	var innerHTMLSetterCache;
	var ATTRIBUTE_PREFIX = 'attr.';
	var attributeSettersCache = collection_1.StringMapWrapper.create();
	var CLASS_PREFIX = 'class.';
	var classSettersCache = collection_1.StringMapWrapper.create();
	var STYLE_PREFIX = 'style.';
	var styleSettersCache = collection_1.StringMapWrapper.create();
	function setterFactory(property) {
	    var setterFn, styleParts, styleSuffix;
	    if (lang_1.StringWrapper.startsWith(property, ATTRIBUTE_PREFIX)) {
	        setterFn = attributeSetterFactory(lang_1.StringWrapper.substring(property, ATTRIBUTE_PREFIX.length));
	    }
	    else if (lang_1.StringWrapper.startsWith(property, CLASS_PREFIX)) {
	        setterFn = classSetterFactory(lang_1.StringWrapper.substring(property, CLASS_PREFIX.length));
	    }
	    else if (lang_1.StringWrapper.startsWith(property, STYLE_PREFIX)) {
	        styleParts = property.split(STYLE_SEPARATOR);
	        styleSuffix = styleParts.length > 2 ? collection_1.ListWrapper.get(styleParts, 2) : '';
	        setterFn = styleSetterFactory(collection_1.ListWrapper.get(styleParts, 1), styleSuffix);
	    }
	    else if (lang_1.StringWrapper.equals(property, 'innerHtml')) {
	        if (lang_1.isBlank(innerHTMLSetterCache)) {
	            innerHTMLSetterCache = function (el, value) { return dom_adapter_1.DOM.setInnerHTML(el, value); };
	        }
	        setterFn = innerHTMLSetterCache;
	    }
	    else {
	        property = resolvePropertyName(property);
	        setterFn = collection_1.StringMapWrapper.get(propertySettersCache, property);
	        if (lang_1.isBlank(setterFn)) {
	            var propertySetterFn = reflection_1.reflector.setter(property);
	            setterFn = function (receiver, value) {
	                if (dom_adapter_1.DOM.hasProperty(receiver, property)) {
	                    return propertySetterFn(receiver, value);
	                }
	            };
	            collection_1.StringMapWrapper.set(propertySettersCache, property, setterFn);
	        }
	    }
	    return setterFn;
	}
	exports.setterFactory = setterFactory;
	function _isValidAttributeValue(attrName, value) {
	    if (attrName == "role") {
	        return lang_1.isString(value);
	    }
	    else {
	        return lang_1.isPresent(value);
	    }
	}
	function attributeSetterFactory(attrName) {
	    var setterFn = collection_1.StringMapWrapper.get(attributeSettersCache, attrName);
	    var dashCasedAttributeName;
	    if (lang_1.isBlank(setterFn)) {
	        dashCasedAttributeName = util_1.camelCaseToDashCase(attrName);
	        setterFn = function (element, value) {
	            if (_isValidAttributeValue(dashCasedAttributeName, value)) {
	                dom_adapter_1.DOM.setAttribute(element, dashCasedAttributeName, lang_1.stringify(value));
	            }
	            else {
	                if (lang_1.isPresent(value)) {
	                    throw new lang_1.BaseException("Invalid " + dashCasedAttributeName +
	                        " attribute, only string values are allowed, got '" +
	                        lang_1.stringify(value) + "'");
	                }
	                dom_adapter_1.DOM.removeAttribute(element, dashCasedAttributeName);
	            }
	        };
	        collection_1.StringMapWrapper.set(attributeSettersCache, attrName, setterFn);
	    }
	    return setterFn;
	}
	function classSetterFactory(className) {
	    var setterFn = collection_1.StringMapWrapper.get(classSettersCache, className);
	    var dashCasedClassName;
	    if (lang_1.isBlank(setterFn)) {
	        dashCasedClassName = util_1.camelCaseToDashCase(className);
	        setterFn = function (element, value) {
	            if (value) {
	                dom_adapter_1.DOM.addClass(element, dashCasedClassName);
	            }
	            else {
	                dom_adapter_1.DOM.removeClass(element, dashCasedClassName);
	            }
	        };
	        collection_1.StringMapWrapper.set(classSettersCache, className, setterFn);
	    }
	    return setterFn;
	}
	function styleSetterFactory(styleName, styleSuffix) {
	    var cacheKey = styleName + styleSuffix;
	    var setterFn = collection_1.StringMapWrapper.get(styleSettersCache, cacheKey);
	    var dashCasedStyleName;
	    if (lang_1.isBlank(setterFn)) {
	        dashCasedStyleName = util_1.camelCaseToDashCase(styleName);
	        setterFn = function (element, value) {
	            var valAsStr;
	            if (lang_1.isPresent(value)) {
	                valAsStr = lang_1.stringify(value);
	                dom_adapter_1.DOM.setStyle(element, dashCasedStyleName, valAsStr + styleSuffix);
	            }
	            else {
	                dom_adapter_1.DOM.removeStyle(element, dashCasedStyleName);
	            }
	        };
	        collection_1.StringMapWrapper.set(styleSettersCache, cacheKey, setterFn);
	    }
	    return setterFn;
	}
	function resolvePropertyName(attrName) {
	    var mappedPropName = collection_1.StringMapWrapper.get(dom_adapter_1.DOM.attrToPropMap, attrName);
	    return lang_1.isPresent(mappedPropName) ? mappedPropName : attrName;
	}
	exports.__esModule = true;
	//# sourceMappingURL=property_setter_factory.js.map

/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var property_binding_parser_1 = __webpack_require__(170);
	var text_interpolation_parser_1 = __webpack_require__(171);
	var directive_parser_1 = __webpack_require__(172);
	var view_splitter_1 = __webpack_require__(174);
	var shadow_dom_compile_step_1 = __webpack_require__(175);
	var CompileStepFactory = (function () {
	    function CompileStepFactory() {
	    }
	    CompileStepFactory.prototype.createSteps = function (template, subTaskPromises) {
	        return null;
	    };
	    return CompileStepFactory;
	})();
	exports.CompileStepFactory = CompileStepFactory;
	var DefaultStepFactory = (function (_super) {
	    __extends(DefaultStepFactory, _super);
	    function DefaultStepFactory(parser, shadowDomStrategy) {
	        _super.call(this);
	        this._parser = parser;
	        this._shadowDomStrategy = shadowDomStrategy;
	    }
	    DefaultStepFactory.prototype.createSteps = function (template, subTaskPromises) {
	        return [
	            new view_splitter_1.ViewSplitter(this._parser),
	            new property_binding_parser_1.PropertyBindingParser(this._parser),
	            new directive_parser_1.DirectiveParser(this._parser, template.directives),
	            new text_interpolation_parser_1.TextInterpolationParser(this._parser),
	            new shadow_dom_compile_step_1.ShadowDomCompileStep(this._shadowDomStrategy, template, subTaskPromises)
	        ];
	    };
	    return DefaultStepFactory;
	})(CompileStepFactory);
	exports.DefaultStepFactory = DefaultStepFactory;
	exports.__esModule = true;
	//# sourceMappingURL=compile_step_factory.js.map

/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	var lang_1 = __webpack_require__(60);
	var collection_1 = __webpack_require__(61);
	var util_1 = __webpack_require__(160);
	// Group 1 = "bind-"
	// Group 2 = "var-" or "#"
	// Group 3 = "on-"
	// Group 4 = "bindon-"
	// Group 5 = the identifier after "bind-", "var-/#", or "on-"
	// Group 6 = idenitifer inside [()]
	// Group 7 = idenitifer inside []
	// Group 8 = identifier inside ()
	var BIND_NAME_REGEXP = lang_1.RegExpWrapper.create('^(?:(?:(?:(bind-)|(var-|#)|(on-)|(bindon-))(.+))|\\[\\(([^\\)]+)\\)\\]|\\[([^\\]]+)\\]|\\(([^\\)]+)\\))$');
	/**
	 * Parses the property bindings on a single element.
	 */
	var PropertyBindingParser = (function () {
	    function PropertyBindingParser(parser) {
	        this._parser = parser;
	    }
	    PropertyBindingParser.prototype.process = function (parent, current, control) {
	        var _this = this;
	        var attrs = current.attrs();
	        var newAttrs = collection_1.MapWrapper.create();
	        collection_1.MapWrapper.forEach(attrs, function (attrValue, attrName) {
	            var bindParts = lang_1.RegExpWrapper.firstMatch(BIND_NAME_REGEXP, attrName);
	            if (lang_1.isPresent(bindParts)) {
	                if (lang_1.isPresent(bindParts[1])) {
	                    _this._bindProperty(bindParts[5], attrValue, current, newAttrs);
	                }
	                else if (lang_1.isPresent(bindParts[2])) {
	                    var identifier = bindParts[5];
	                    var value = attrValue == '' ? '\$implicit' : attrValue;
	                    _this._bindVariable(identifier, value, current, newAttrs);
	                }
	                else if (lang_1.isPresent(bindParts[3])) {
	                    _this._bindEvent(bindParts[5], attrValue, current, newAttrs);
	                }
	                else if (lang_1.isPresent(bindParts[4])) {
	                    _this._bindProperty(bindParts[5], attrValue, current, newAttrs);
	                    _this._bindAssignmentEvent(bindParts[5], attrValue, current, newAttrs);
	                }
	                else if (lang_1.isPresent(bindParts[6])) {
	                    _this._bindProperty(bindParts[6], attrValue, current, newAttrs);
	                    _this._bindAssignmentEvent(bindParts[6], attrValue, current, newAttrs);
	                }
	                else if (lang_1.isPresent(bindParts[7])) {
	                    _this._bindProperty(bindParts[7], attrValue, current, newAttrs);
	                }
	                else if (lang_1.isPresent(bindParts[8])) {
	                    _this._bindEvent(bindParts[8], attrValue, current, newAttrs);
	                }
	            }
	            else {
	                var expr = _this._parser.parseInterpolation(attrValue, current.elementDescription);
	                if (lang_1.isPresent(expr)) {
	                    _this._bindPropertyAst(attrName, expr, current, newAttrs);
	                }
	            }
	        });
	        collection_1.MapWrapper.forEach(newAttrs, function (attrValue, attrName) { collection_1.MapWrapper.set(attrs, attrName, attrValue); });
	    };
	    PropertyBindingParser.prototype._bindVariable = function (identifier, value, current, newAttrs) {
	        current.bindElement().bindVariable(util_1.dashCaseToCamelCase(identifier), value);
	        collection_1.MapWrapper.set(newAttrs, identifier, value);
	    };
	    PropertyBindingParser.prototype._bindProperty = function (name, expression, current, newAttrs) {
	        this._bindPropertyAst(name, this._parser.parseBinding(expression, current.elementDescription), current, newAttrs);
	    };
	    PropertyBindingParser.prototype._bindPropertyAst = function (name, ast, current, newAttrs) {
	        var binder = current.bindElement();
	        var camelCaseName = util_1.dashCaseToCamelCase(name);
	        binder.bindProperty(camelCaseName, ast);
	        collection_1.MapWrapper.set(newAttrs, name, ast.source);
	    };
	    PropertyBindingParser.prototype._bindAssignmentEvent = function (name, expression, current, newAttrs) {
	        this._bindEvent(name, expression + "=$event", current, newAttrs);
	    };
	    PropertyBindingParser.prototype._bindEvent = function (name, expression, current, newAttrs) {
	        current.bindElement().bindEvent(util_1.dashCaseToCamelCase(name), this._parser.parseAction(expression, current.elementDescription));
	        // Don't detect directives for event names for now,
	        // so don't add the event name to the CompileElement.attrs
	    };
	    return PropertyBindingParser;
	})();
	exports.PropertyBindingParser = PropertyBindingParser;
	exports.__esModule = true;
	//# sourceMappingURL=property_binding_parser.js.map

/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	var lang_1 = __webpack_require__(60);
	var dom_adapter_1 = __webpack_require__(107);
	/**
	 * Parses interpolations in direct text child nodes of the current element.
	 */
	var TextInterpolationParser = (function () {
	    function TextInterpolationParser(parser) {
	        this._parser = parser;
	    }
	    TextInterpolationParser.prototype.process = function (parent, current, control) {
	        if (!current.compileChildren) {
	            return;
	        }
	        var element = current.element;
	        var childNodes = dom_adapter_1.DOM.childNodes(dom_adapter_1.DOM.templateAwareRoot(element));
	        for (var i = 0; i < childNodes.length; i++) {
	            var node = childNodes[i];
	            if (dom_adapter_1.DOM.isTextNode(node)) {
	                var text = dom_adapter_1.DOM.nodeValue(node);
	                var expr = this._parser.parseInterpolation(text, current.elementDescription);
	                if (lang_1.isPresent(expr)) {
	                    dom_adapter_1.DOM.setText(node, ' ');
	                    current.bindElement().bindText(i, expr);
	                }
	            }
	        }
	    };
	    return TextInterpolationParser;
	})();
	exports.TextInterpolationParser = TextInterpolationParser;
	exports.__esModule = true;
	//# sourceMappingURL=text_interpolation_parser.js.map

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	var lang_1 = __webpack_require__(60);
	var collection_1 = __webpack_require__(61);
	var dom_adapter_1 = __webpack_require__(107);
	var selector_1 = __webpack_require__(173);
	var api_1 = __webpack_require__(122);
	var util_1 = __webpack_require__(160);
	/**
	 * Parses the directives on a single element. Assumes ViewSplitter has already created
	 * <template> elements for template directives.
	 */
	var DirectiveParser = (function () {
	    function DirectiveParser(parser, directives) {
	        this._parser = parser;
	        this._selectorMatcher = new selector_1.SelectorMatcher();
	        this._directives = directives;
	        for (var i = 0; i < directives.length; i++) {
	            var directive = directives[i];
	            var selector = selector_1.CssSelector.parse(directive.selector);
	            this._ensureComponentOnlyHasElementSelector(selector, directive);
	            this._selectorMatcher.addSelectables(selector, i);
	        }
	    }
	    DirectiveParser.prototype._ensureComponentOnlyHasElementSelector = function (selector, directive) {
	        var isElementSelector = selector.length === 1 && selector[0].isElementSelector();
	        if (!isElementSelector && directive.type === api_1.DirectiveMetadata.COMPONENT_TYPE) {
	            throw new lang_1.BaseException("Component '" + directive.id + "' can only have an element selector, but had '" + directive.selector + "'");
	        }
	    };
	    DirectiveParser.prototype.process = function (parent, current, control) {
	        var _this = this;
	        var attrs = current.attrs();
	        var classList = current.classList();
	        var cssSelector = new selector_1.CssSelector();
	        var nodeName = dom_adapter_1.DOM.nodeName(current.element);
	        cssSelector.setElement(nodeName);
	        for (var i = 0; i < classList.length; i++) {
	            cssSelector.addClassName(classList[i]);
	        }
	        collection_1.MapWrapper.forEach(attrs, function (attrValue, attrName) { cssSelector.addAttribute(attrName, attrValue); });
	        var componentDirective;
	        var foundDirectiveIndices = [];
	        var elementBinder = null;
	        this._selectorMatcher.match(cssSelector, function (selector, directiveIndex) {
	            elementBinder = current.bindElement();
	            var directive = _this._directives[directiveIndex];
	            if (directive.type === api_1.DirectiveMetadata.COMPONENT_TYPE) {
	                // components need to go first, so it is easier to locate them in the result.
	                collection_1.ListWrapper.insert(foundDirectiveIndices, 0, directiveIndex);
	                if (lang_1.isPresent(componentDirective)) {
	                    throw new lang_1.BaseException("Only one component directive is allowed per element - check " + current.elementDescription);
	                }
	                componentDirective = directive;
	                elementBinder.setComponentId(directive.id);
	            }
	            else {
	                collection_1.ListWrapper.push(foundDirectiveIndices, directiveIndex);
	            }
	        });
	        collection_1.ListWrapper.forEach(foundDirectiveIndices, function (directiveIndex) {
	            var directive = _this._directives[directiveIndex];
	            var directiveBinderBuilder = elementBinder.bindDirective(directiveIndex);
	            current.compileChildren = current.compileChildren && directive.compileChildren;
	            if (lang_1.isPresent(directive.properties)) {
	                collection_1.MapWrapper.forEach(directive.properties, function (bindConfig, dirProperty) {
	                    _this._bindDirectiveProperty(dirProperty, bindConfig, current, directiveBinderBuilder);
	                });
	            }
	            if (lang_1.isPresent(directive.hostListeners)) {
	                collection_1.MapWrapper.forEach(directive.hostListeners, function (action, eventName) {
	                    _this._bindDirectiveEvent(eventName, action, current, directiveBinderBuilder);
	                });
	            }
	            if (lang_1.isPresent(directive.hostActions)) {
	                collection_1.MapWrapper.forEach(directive.hostActions, function (action, actionName) {
	                    _this._bindHostAction(actionName, action, current, directiveBinderBuilder);
	                });
	            }
	            if (lang_1.isPresent(directive.hostProperties)) {
	                collection_1.MapWrapper.forEach(directive.hostProperties, function (hostPropertyName, directivePropertyName) {
	                    _this._bindHostProperty(hostPropertyName, directivePropertyName, current, directiveBinderBuilder);
	                });
	            }
	            if (lang_1.isPresent(directive.hostAttributes)) {
	                collection_1.MapWrapper.forEach(directive.hostAttributes, function (hostAttrValue, hostAttrName) {
	                    _this._addHostAttribute(hostAttrName, hostAttrValue, current);
	                });
	            }
	            if (lang_1.isPresent(directive.readAttributes)) {
	                collection_1.ListWrapper.forEach(directive.readAttributes, function (attrName) { elementBinder.readAttribute(attrName); });
	            }
	        });
	    };
	    DirectiveParser.prototype._bindDirectiveProperty = function (dirProperty, bindConfig, compileElement, directiveBinderBuilder) {
	        var pipes = this._splitBindConfig(bindConfig);
	        var elProp = collection_1.ListWrapper.removeAt(pipes, 0);
	        var bindingAst = collection_1.MapWrapper.get(compileElement.bindElement().propertyBindings, util_1.dashCaseToCamelCase(elProp));
	        if (lang_1.isBlank(bindingAst)) {
	            var attributeValue = collection_1.MapWrapper.get(compileElement.attrs(), util_1.camelCaseToDashCase(elProp));
	            if (lang_1.isPresent(attributeValue)) {
	                bindingAst =
	                    this._parser.wrapLiteralPrimitive(attributeValue, compileElement.elementDescription);
	            }
	        }
	        // Bindings are optional, so this binding only needs to be set up if an expression is given.
	        if (lang_1.isPresent(bindingAst)) {
	            var fullExpAstWithBindPipes = this._parser.addPipes(bindingAst, pipes);
	            directiveBinderBuilder.bindProperty(dirProperty, fullExpAstWithBindPipes);
	        }
	    };
	    DirectiveParser.prototype._bindDirectiveEvent = function (eventName, action, compileElement, directiveBinderBuilder) {
	        var ast = this._parser.parseAction(action, compileElement.elementDescription);
	        if (lang_1.StringWrapper.contains(eventName, util_1.EVENT_TARGET_SEPARATOR)) {
	            var parts = eventName.split(util_1.EVENT_TARGET_SEPARATOR);
	            directiveBinderBuilder.bindEvent(parts[1], ast, parts[0]);
	        }
	        else {
	            directiveBinderBuilder.bindEvent(eventName, ast);
	        }
	    };
	    DirectiveParser.prototype._bindHostAction = function (actionName, actionExpression, compileElement, directiveBinderBuilder) {
	        var ast = this._parser.parseAction(actionExpression, compileElement.elementDescription);
	        directiveBinderBuilder.bindHostAction(actionName, actionExpression, ast);
	    };
	    DirectiveParser.prototype._bindHostProperty = function (hostPropertyName, directivePropertyName, compileElement, directiveBinderBuilder) {
	        var ast = this._parser.parseBinding(directivePropertyName, "hostProperties of " + compileElement.elementDescription);
	        directiveBinderBuilder.bindHostProperty(hostPropertyName, ast);
	    };
	    DirectiveParser.prototype._addHostAttribute = function (attrName, attrValue, compileElement) {
	        if (lang_1.StringWrapper.equals(attrName, 'class')) {
	            collection_1.ListWrapper.forEach(attrValue.split(' '), function (className) { dom_adapter_1.DOM.addClass(compileElement.element, className); });
	        }
	        else if (!dom_adapter_1.DOM.hasAttribute(compileElement.element, attrName)) {
	            dom_adapter_1.DOM.setAttribute(compileElement.element, attrName, attrValue);
	        }
	    };
	    DirectiveParser.prototype._splitBindConfig = function (bindConfig) {
	        return collection_1.ListWrapper.map(bindConfig.split('|'), function (s) { return s.trim(); });
	    };
	    return DirectiveParser;
	})();
	exports.DirectiveParser = DirectiveParser;
	exports.__esModule = true;
	//# sourceMappingURL=directive_parser.js.map

/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	var collection_1 = __webpack_require__(61);
	var lang_1 = __webpack_require__(60);
	var _EMPTY_ATTR_VALUE = '';
	// TODO: Can't use `const` here as
	// in Dart this is not transpiled into `final` yet...
	var _SELECTOR_REGEXP = lang_1.RegExpWrapper.create('(\\:not\\()|' +
	    '([-\\w]+)|' +
	    '(?:\\.([-\\w]+))|' +
	    '(?:\\[([-\\w*]+)(?:=([^\\]]*))?\\])|' +
	    '(?:\\))|' +
	    '(\\s*,\\s*)'); // ","
	/**
	 * A css selector contains an element name,
	 * css classes and attribute/value pairs with the purpose
	 * of selecting subsets out of them.
	 */
	var CssSelector = (function () {
	    function CssSelector() {
	        this.element = null;
	        this.classNames = collection_1.ListWrapper.create();
	        this.attrs = collection_1.ListWrapper.create();
	        this.notSelector = null;
	    }
	    CssSelector.parse = function (selector) {
	        var results = collection_1.ListWrapper.create();
	        var _addResult = function (res, cssSel) {
	            if (lang_1.isPresent(cssSel.notSelector) && lang_1.isBlank(cssSel.element) &&
	                collection_1.ListWrapper.isEmpty(cssSel.classNames) && collection_1.ListWrapper.isEmpty(cssSel.attrs)) {
	                cssSel.element = "*";
	            }
	            collection_1.ListWrapper.push(res, cssSel);
	        };
	        var cssSelector = new CssSelector();
	        var matcher = lang_1.RegExpWrapper.matcher(_SELECTOR_REGEXP, selector);
	        var match;
	        var current = cssSelector;
	        while (lang_1.isPresent(match = lang_1.RegExpMatcherWrapper.next(matcher))) {
	            if (lang_1.isPresent(match[1])) {
	                if (lang_1.isPresent(cssSelector.notSelector)) {
	                    throw new lang_1.BaseException('Nesting :not is not allowed in a selector');
	                }
	                current.notSelector = new CssSelector();
	                current = current.notSelector;
	            }
	            if (lang_1.isPresent(match[2])) {
	                current.setElement(match[2]);
	            }
	            if (lang_1.isPresent(match[3])) {
	                current.addClassName(match[3]);
	            }
	            if (lang_1.isPresent(match[4])) {
	                current.addAttribute(match[4], match[5]);
	            }
	            if (lang_1.isPresent(match[6])) {
	                _addResult(results, cssSelector);
	                cssSelector = current = new CssSelector();
	            }
	        }
	        _addResult(results, cssSelector);
	        return results;
	    };
	    CssSelector.prototype.isElementSelector = function () {
	        return lang_1.isPresent(this.element) && collection_1.ListWrapper.isEmpty(this.classNames) &&
	            collection_1.ListWrapper.isEmpty(this.attrs) && lang_1.isBlank(this.notSelector);
	    };
	    CssSelector.prototype.setElement = function (element) {
	        if (element === void 0) { element = null; }
	        if (lang_1.isPresent(element)) {
	            element = element.toLowerCase();
	        }
	        this.element = element;
	    };
	    CssSelector.prototype.addAttribute = function (name, value) {
	        if (value === void 0) { value = _EMPTY_ATTR_VALUE; }
	        collection_1.ListWrapper.push(this.attrs, name.toLowerCase());
	        if (lang_1.isPresent(value)) {
	            value = value.toLowerCase();
	        }
	        else {
	            value = _EMPTY_ATTR_VALUE;
	        }
	        collection_1.ListWrapper.push(this.attrs, value);
	    };
	    CssSelector.prototype.addClassName = function (name) {
	        collection_1.ListWrapper.push(this.classNames, name.toLowerCase());
	    };
	    CssSelector.prototype.toString = function () {
	        var res = '';
	        if (lang_1.isPresent(this.element)) {
	            res += this.element;
	        }
	        if (lang_1.isPresent(this.classNames)) {
	            for (var i = 0; i < this.classNames.length; i++) {
	                res += '.' + this.classNames[i];
	            }
	        }
	        if (lang_1.isPresent(this.attrs)) {
	            for (var i = 0; i < this.attrs.length;) {
	                var attrName = this.attrs[i++];
	                var attrValue = this.attrs[i++];
	                res += '[' + attrName;
	                if (attrValue.length > 0) {
	                    res += '=' + attrValue;
	                }
	                res += ']';
	            }
	        }
	        if (lang_1.isPresent(this.notSelector)) {
	            res += ":not(" + this.notSelector.toString() + ")";
	        }
	        return res;
	    };
	    return CssSelector;
	})();
	exports.CssSelector = CssSelector;
	/**
	 * Reads a list of CssSelectors and allows to calculate which ones
	 * are contained in a given CssSelector.
	 */
	var SelectorMatcher = (function () {
	    function SelectorMatcher() {
	        this._elementMap = collection_1.MapWrapper.create();
	        this._elementPartialMap = collection_1.MapWrapper.create();
	        this._classMap = collection_1.MapWrapper.create();
	        this._classPartialMap = collection_1.MapWrapper.create();
	        this._attrValueMap = collection_1.MapWrapper.create();
	        this._attrValuePartialMap = collection_1.MapWrapper.create();
	        this._listContexts = collection_1.ListWrapper.create();
	    }
	    SelectorMatcher.createNotMatcher = function (notSelector) {
	        var notMatcher = new SelectorMatcher();
	        notMatcher._addSelectable(notSelector, null, null);
	        return notMatcher;
	    };
	    SelectorMatcher.prototype.addSelectables = function (cssSelectors, callbackCtxt) {
	        var listContext = null;
	        if (cssSelectors.length > 1) {
	            listContext = new SelectorListContext(cssSelectors);
	            collection_1.ListWrapper.push(this._listContexts, listContext);
	        }
	        for (var i = 0; i < cssSelectors.length; i++) {
	            this._addSelectable(cssSelectors[i], callbackCtxt, listContext);
	        }
	    };
	    /**
	     * Add an object that can be found later on by calling `match`.
	     * @param cssSelector A css selector
	     * @param callbackCtxt An opaque object that will be given to the callback of the `match` function
	     */
	    SelectorMatcher.prototype._addSelectable = function (cssSelector, callbackCtxt, listContext) {
	        var matcher = this;
	        var element = cssSelector.element;
	        var classNames = cssSelector.classNames;
	        var attrs = cssSelector.attrs;
	        var selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);
	        if (lang_1.isPresent(element)) {
	            var isTerminal = attrs.length === 0 && classNames.length === 0;
	            if (isTerminal) {
	                this._addTerminal(matcher._elementMap, element, selectable);
	            }
	            else {
	                matcher = this._addPartial(matcher._elementPartialMap, element);
	            }
	        }
	        if (lang_1.isPresent(classNames)) {
	            for (var index = 0; index < classNames.length; index++) {
	                var isTerminal = attrs.length === 0 && index === classNames.length - 1;
	                var className = classNames[index];
	                if (isTerminal) {
	                    this._addTerminal(matcher._classMap, className, selectable);
	                }
	                else {
	                    matcher = this._addPartial(matcher._classPartialMap, className);
	                }
	            }
	        }
	        if (lang_1.isPresent(attrs)) {
	            for (var index = 0; index < attrs.length;) {
	                var isTerminal = index === attrs.length - 2;
	                var attrName = attrs[index++];
	                var attrValue = attrs[index++];
	                if (isTerminal) {
	                    var terminalMap = matcher._attrValueMap;
	                    var terminalValuesMap = collection_1.MapWrapper.get(terminalMap, attrName);
	                    if (lang_1.isBlank(terminalValuesMap)) {
	                        terminalValuesMap = collection_1.MapWrapper.create();
	                        collection_1.MapWrapper.set(terminalMap, attrName, terminalValuesMap);
	                    }
	                    this._addTerminal(terminalValuesMap, attrValue, selectable);
	                }
	                else {
	                    var parttialMap = matcher._attrValuePartialMap;
	                    var partialValuesMap = collection_1.MapWrapper.get(parttialMap, attrName);
	                    if (lang_1.isBlank(partialValuesMap)) {
	                        partialValuesMap = collection_1.MapWrapper.create();
	                        collection_1.MapWrapper.set(parttialMap, attrName, partialValuesMap);
	                    }
	                    matcher = this._addPartial(partialValuesMap, attrValue);
	                }
	            }
	        }
	    };
	    SelectorMatcher.prototype._addTerminal = function (map, name, selectable) {
	        var terminalList = collection_1.MapWrapper.get(map, name);
	        if (lang_1.isBlank(terminalList)) {
	            terminalList = collection_1.ListWrapper.create();
	            collection_1.MapWrapper.set(map, name, terminalList);
	        }
	        collection_1.ListWrapper.push(terminalList, selectable);
	    };
	    SelectorMatcher.prototype._addPartial = function (map, name) {
	        var matcher = collection_1.MapWrapper.get(map, name);
	        if (lang_1.isBlank(matcher)) {
	            matcher = new SelectorMatcher();
	            collection_1.MapWrapper.set(map, name, matcher);
	        }
	        return matcher;
	    };
	    /**
	     * Find the objects that have been added via `addSelectable`
	     * whose css selector is contained in the given css selector.
	     * @param cssSelector A css selector
	     * @param matchedCallback This callback will be called with the object handed into `addSelectable`
	     * @return boolean true if a match was found
	    */
	    SelectorMatcher.prototype.match = function (cssSelector, matchedCallback /*: (CssSelector, any) => void*/) {
	        var result = false;
	        var element = cssSelector.element;
	        var classNames = cssSelector.classNames;
	        var attrs = cssSelector.attrs;
	        for (var i = 0; i < this._listContexts.length; i++) {
	            this._listContexts[i].alreadyMatched = false;
	        }
	        result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result;
	        result = this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) ||
	            result;
	        if (lang_1.isPresent(classNames)) {
	            for (var index = 0; index < classNames.length; index++) {
	                var className = classNames[index];
	                result =
	                    this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result;
	                result =
	                    this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) ||
	                        result;
	            }
	        }
	        if (lang_1.isPresent(attrs)) {
	            for (var index = 0; index < attrs.length;) {
	                var attrName = attrs[index++];
	                var attrValue = attrs[index++];
	                var terminalValuesMap = collection_1.MapWrapper.get(this._attrValueMap, attrName);
	                if (!lang_1.StringWrapper.equals(attrValue, _EMPTY_ATTR_VALUE)) {
	                    result = this._matchTerminal(terminalValuesMap, _EMPTY_ATTR_VALUE, cssSelector, matchedCallback) ||
	                        result;
	                }
	                result = this._matchTerminal(terminalValuesMap, attrValue, cssSelector, matchedCallback) ||
	                    result;
	                var partialValuesMap = collection_1.MapWrapper.get(this._attrValuePartialMap, attrName);
	                result =
	                    this._matchPartial(partialValuesMap, attrValue, cssSelector, matchedCallback) || result;
	            }
	        }
	        return result;
	    };
	    SelectorMatcher.prototype._matchTerminal = function (map, name, cssSelector, matchedCallback /*: (CssSelector, any) => void*/) {
	        if (lang_1.isBlank(map) || lang_1.isBlank(name)) {
	            return false;
	        }
	        var selectables = collection_1.MapWrapper.get(map, name);
	        var starSelectables = collection_1.MapWrapper.get(map, "*");
	        if (lang_1.isPresent(starSelectables)) {
	            selectables = collection_1.ListWrapper.concat(selectables, starSelectables);
	        }
	        if (lang_1.isBlank(selectables)) {
	            return false;
	        }
	        var selectable;
	        var result = false;
	        for (var index = 0; index < selectables.length; index++) {
	            selectable = selectables[index];
	            result = selectable.finalize(cssSelector, matchedCallback) || result;
	        }
	        return result;
	    };
	    SelectorMatcher.prototype._matchPartial = function (map, name, cssSelector, matchedCallback /*: (CssSelector, any) => void*/) {
	        if (lang_1.isBlank(map) || lang_1.isBlank(name)) {
	            return false;
	        }
	        var nestedSelector = collection_1.MapWrapper.get(map, name);
	        if (lang_1.isBlank(nestedSelector)) {
	            return false;
	        }
	        // TODO(perf): get rid of recursion and measure again
	        // TODO(perf): don't pass the whole selector into the recursion,
	        // but only the not processed parts
	        return nestedSelector.match(cssSelector, matchedCallback);
	    };
	    return SelectorMatcher;
	})();
	exports.SelectorMatcher = SelectorMatcher;
	var SelectorListContext = (function () {
	    function SelectorListContext(selectors) {
	        this.selectors = selectors;
	        this.alreadyMatched = false;
	    }
	    return SelectorListContext;
	})();
	// Store context to pass back selector and context when a selector is matched
	var SelectorContext = (function () {
	    function SelectorContext(selector, cbContext, listContext) {
	        this.selector = selector;
	        this.notSelector = selector.notSelector;
	        this.cbContext = cbContext;
	        this.listContext = listContext;
	    }
	    SelectorContext.prototype.finalize = function (cssSelector, callback /*: (CssSelector, any) => void*/) {
	        var result = true;
	        if (lang_1.isPresent(this.notSelector) &&
	            (lang_1.isBlank(this.listContext) || !this.listContext.alreadyMatched)) {
	            var notMatcher = SelectorMatcher.createNotMatcher(this.notSelector);
	            result = !notMatcher.match(cssSelector, null);
	        }
	        if (result && lang_1.isPresent(callback) &&
	            (lang_1.isBlank(this.listContext) || !this.listContext.alreadyMatched)) {
	            if (lang_1.isPresent(this.listContext)) {
	                this.listContext.alreadyMatched = true;
	            }
	            callback(this.selector, this.cbContext);
	        }
	        return result;
	    };
	    return SelectorContext;
	})();
	exports.__esModule = true;
	//# sourceMappingURL=selector.js.map

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	var lang_1 = __webpack_require__(60);
	var dom_adapter_1 = __webpack_require__(107);
	var collection_1 = __webpack_require__(61);
	var compile_element_1 = __webpack_require__(164);
	var util_1 = __webpack_require__(160);
	/**
	 * Splits views at `<template>` elements or elements with `template` attribute:
	 * For `<template>` elements:
	 * - moves the content into a new and disconnected `<template>` element
	 *   that is marked as view root.
	 *
	 * For elements with a `template` attribute:
	 * - replaces the element with an empty `<template>` element,
	 *   parses the content of the `template` attribute and adds the information to that
	 *   `<template>` element. Marks the elements as view root.
	 *
	 * Note: In both cases the root of the nested view is disconnected from its parent element.
	 * This is needed for browsers that don't support the `<template>` element
	 * as we want to do locate elements with bindings using `getElementsByClassName` later on,
	 * which should not descend into the nested view.
	 */
	var ViewSplitter = (function () {
	    function ViewSplitter(parser) {
	        this._parser = parser;
	    }
	    ViewSplitter.prototype.process = function (parent, current, control) {
	        var attrs = current.attrs();
	        var templateBindings = collection_1.MapWrapper.get(attrs, 'template');
	        var hasTemplateBinding = lang_1.isPresent(templateBindings);
	        // look for template shortcuts such as *ng-if="condition" and treat them as template="if
	        // condition"
	        collection_1.MapWrapper.forEach(attrs, function (attrValue, attrName) {
	            if (lang_1.StringWrapper.startsWith(attrName, '*')) {
	                var key = lang_1.StringWrapper.substring(attrName, 1); // remove the star
	                if (hasTemplateBinding) {
	                    // 2nd template binding detected
	                    throw new lang_1.BaseException("Only one template directive per element is allowed: " +
	                        (templateBindings + " and " + key + " cannot be used simultaneously ") +
	                        ("in " + current.elementDescription));
	                }
	                else {
	                    templateBindings = (attrValue.length == 0) ? key : key + ' ' + attrValue;
	                    hasTemplateBinding = true;
	                }
	            }
	        });
	        if (lang_1.isPresent(parent)) {
	            if (dom_adapter_1.DOM.isTemplateElement(current.element)) {
	                if (!current.isViewRoot) {
	                    var viewRoot = new compile_element_1.CompileElement(dom_adapter_1.DOM.createTemplate(''));
	                    viewRoot.inheritedProtoView = current.bindElement().bindNestedProtoView(viewRoot.element);
	                    // viewRoot doesn't appear in the original template, so we associate
	                    // the current element description to get a more meaningful message in case of error
	                    viewRoot.elementDescription = current.elementDescription;
	                    viewRoot.isViewRoot = true;
	                    this._moveChildNodes(dom_adapter_1.DOM.content(current.element), dom_adapter_1.DOM.content(viewRoot.element));
	                    control.addChild(viewRoot);
	                }
	            }
	            if (hasTemplateBinding) {
	                var newParent = new compile_element_1.CompileElement(dom_adapter_1.DOM.createTemplate(''));
	                newParent.inheritedProtoView = current.inheritedProtoView;
	                newParent.inheritedElementBinder = current.inheritedElementBinder;
	                newParent.distanceToInheritedBinder = current.distanceToInheritedBinder;
	                // newParent doesn't appear in the original template, so we associate
	                // the current element description to get a more meaningful message in case of error
	                newParent.elementDescription = current.elementDescription;
	                current.inheritedProtoView = newParent.bindElement().bindNestedProtoView(current.element);
	                current.inheritedElementBinder = null;
	                current.distanceToInheritedBinder = 0;
	                current.isViewRoot = true;
	                this._parseTemplateBindings(templateBindings, newParent);
	                this._addParentElement(current.element, newParent.element);
	                control.addParent(newParent);
	                dom_adapter_1.DOM.remove(current.element);
	            }
	        }
	    };
	    ViewSplitter.prototype._moveChildNodes = function (source, target) {
	        var next = dom_adapter_1.DOM.firstChild(source);
	        while (lang_1.isPresent(next)) {
	            dom_adapter_1.DOM.appendChild(target, next);
	            next = dom_adapter_1.DOM.firstChild(source);
	        }
	    };
	    ViewSplitter.prototype._addParentElement = function (currentElement, newParentElement) {
	        dom_adapter_1.DOM.insertBefore(currentElement, newParentElement);
	        dom_adapter_1.DOM.appendChild(newParentElement, currentElement);
	    };
	    ViewSplitter.prototype._parseTemplateBindings = function (templateBindings, compileElement) {
	        var bindings = this._parser.parseTemplateBindings(templateBindings, compileElement.elementDescription);
	        for (var i = 0; i < bindings.length; i++) {
	            var binding = bindings[i];
	            if (binding.keyIsVar) {
	                compileElement.bindElement().bindVariable(util_1.dashCaseToCamelCase(binding.key), binding.name);
	                collection_1.MapWrapper.set(compileElement.attrs(), binding.key, binding.name);
	            }
	            else if (lang_1.isPresent(binding.expression)) {
	                compileElement.bindElement().bindProperty(util_1.dashCaseToCamelCase(binding.key), binding.expression);
	                collection_1.MapWrapper.set(compileElement.attrs(), binding.key, binding.expression.source);
	            }
	            else {
	                dom_adapter_1.DOM.setAttribute(compileElement.element, binding.key, '');
	            }
	        }
	    };
	    return ViewSplitter;
	})();
	exports.ViewSplitter = ViewSplitter;
	exports.__esModule = true;
	//# sourceMappingURL=view_splitter.js.map

/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	var lang_1 = __webpack_require__(60);
	var collection_1 = __webpack_require__(61);
	var async_1 = __webpack_require__(94);
	var dom_adapter_1 = __webpack_require__(107);
	var ShadowDomCompileStep = (function () {
	    function ShadowDomCompileStep(shadowDomStrategy, template, subTaskPromises) {
	        this._shadowDomStrategy = shadowDomStrategy;
	        this._template = template;
	        this._subTaskPromises = subTaskPromises;
	    }
	    ShadowDomCompileStep.prototype.process = function (parent, current, control) {
	        var tagName = dom_adapter_1.DOM.tagName(current.element).toUpperCase();
	        if (tagName == 'STYLE') {
	            this._processStyleElement(current, control);
	        }
	        else if (tagName == 'CONTENT') {
	            this._processContentElement(current);
	        }
	        else {
	            var componentId = current.isBound() ? current.inheritedElementBinder.componentId : null;
	            this._shadowDomStrategy.processElement(this._template.componentId, componentId, current.element);
	        }
	    };
	    ShadowDomCompileStep.prototype._processStyleElement = function (current, control) {
	        var stylePromise = this._shadowDomStrategy.processStyleElement(this._template.componentId, this._template.absUrl, current.element);
	        if (lang_1.isPresent(stylePromise) && async_1.PromiseWrapper.isPromise(stylePromise)) {
	            collection_1.ListWrapper.push(this._subTaskPromises, stylePromise);
	        }
	        // Style elements should not be further processed by the compiler, as they can not contain
	        // bindings. Skipping further compiler steps allow speeding up the compilation process.
	        control.ignoreCurrentElement();
	    };
	    ShadowDomCompileStep.prototype._processContentElement = function (current) {
	        if (this._shadowDomStrategy.hasNativeContentElement()) {
	            return;
	        }
	        var attrs = current.attrs();
	        var selector = collection_1.MapWrapper.get(attrs, 'select');
	        selector = lang_1.isPresent(selector) ? selector : '';
	        var contentStart = dom_adapter_1.DOM.createScriptTag('type', 'ng/contentStart');
	        if (lang_1.assertionsEnabled()) {
	            dom_adapter_1.DOM.setAttribute(contentStart, 'select', selector);
	        }
	        var contentEnd = dom_adapter_1.DOM.createScriptTag('type', 'ng/contentEnd');
	        dom_adapter_1.DOM.insertBefore(current.element, contentStart);
	        dom_adapter_1.DOM.insertBefore(current.element, contentEnd);
	        dom_adapter_1.DOM.remove(current.element);
	        current.element = contentStart;
	        current.bindElement().setContentTagSelector(selector);
	    };
	    return ShadowDomCompileStep;
	})();
	exports.ShadowDomCompileStep = ShadowDomCompileStep;
	exports.__esModule = true;
	//# sourceMappingURL=shadow_dom_compile_step.js.map

/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	var di_1 = __webpack_require__(108);
	exports.appComponentRefToken = new di_1.OpaqueToken('ComponentRef');
	exports.appComponentTypeToken = new di_1.OpaqueToken('RootComponent');
	exports.__esModule = true;
	//# sourceMappingURL=application_tokens.js.map

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	var di_1 = __webpack_require__(120);
	exports.QueryAnnotation = di_1.Query;
	exports.AttributeAnnotation = di_1.Attribute;
	exports.__esModule = true;
	//# sourceMappingURL=di.js.map

/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var dom_adapter_1 = __webpack_require__(107);
	var shadow_dom_strategy_1 = __webpack_require__(100);
	/**
	 * This strategies uses the native Shadow DOM support.
	 *
	 * The templates for the component are inserted in a Shadow Root created on the component element.
	 * Hence they are strictly isolated.
	 */
	var NativeShadowDomStrategy = (function (_super) {
	    __extends(NativeShadowDomStrategy, _super);
	    function NativeShadowDomStrategy(styleUrlResolver) {
	        _super.call(this);
	        this.styleUrlResolver = styleUrlResolver;
	    }
	    NativeShadowDomStrategy.prototype.prepareShadowRoot = function (el) { return dom_adapter_1.DOM.createShadowRoot(el); };
	    NativeShadowDomStrategy.prototype.processStyleElement = function (hostComponentId, templateUrl, styleEl) {
	        var cssText = dom_adapter_1.DOM.getText(styleEl);
	        cssText = this.styleUrlResolver.resolveUrls(cssText, templateUrl);
	        dom_adapter_1.DOM.setText(styleEl, cssText);
	        return null;
	    };
	    return NativeShadowDomStrategy;
	})(shadow_dom_strategy_1.ShadowDomStrategy);
	exports.NativeShadowDomStrategy = NativeShadowDomStrategy;
	exports.__esModule = true;
	//# sourceMappingURL=native_shadow_dom_strategy.js.map

/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var lang_1 = __webpack_require__(60);
	var async_1 = __webpack_require__(94);
	var dom_adapter_1 = __webpack_require__(107);
	var emulated_unscoped_shadow_dom_strategy_1 = __webpack_require__(144);
	var util_1 = __webpack_require__(146);
	/**
	 * This strategy emulates the Shadow DOM for the templates, styles **included**:
	 * - components templates are added as children of their component element,
	 * - both the template and the styles are modified so that styles are scoped to the component
	 *   they belong to,
	 * - styles are moved from the templates to the styleHost (i.e. the document head).
	 *
	 * Notes:
	 * - styles are scoped to their component and will apply only to it,
	 * - a common subset of shadow DOM selectors are supported,
	 * - see `ShadowCss` for more information and limitations.
	 */
	var EmulatedScopedShadowDomStrategy = (function (_super) {
	    __extends(EmulatedScopedShadowDomStrategy, _super);
	    function EmulatedScopedShadowDomStrategy(styleInliner, styleUrlResolver, styleHost) {
	        _super.call(this, styleUrlResolver, styleHost);
	        this.styleInliner = styleInliner;
	    }
	    EmulatedScopedShadowDomStrategy.prototype.processStyleElement = function (hostComponentId, templateUrl, styleEl) {
	        var cssText = dom_adapter_1.DOM.getText(styleEl);
	        cssText = this.styleUrlResolver.resolveUrls(cssText, templateUrl);
	        var inlinedCss = this.styleInliner.inlineImports(cssText, templateUrl);
	        if (async_1.PromiseWrapper.isPromise(inlinedCss)) {
	            dom_adapter_1.DOM.setText(styleEl, '');
	            return inlinedCss
	                .then(function (css) {
	                css = util_1.shimCssForComponent(css, hostComponentId);
	                dom_adapter_1.DOM.setText(styleEl, css);
	            });
	        }
	        else {
	            var css = util_1.shimCssForComponent(inlinedCss, hostComponentId);
	            dom_adapter_1.DOM.setText(styleEl, css);
	            dom_adapter_1.DOM.remove(styleEl);
	            util_1.insertStyleElement(this.styleHost, styleEl);
	            return null;
	        }
	    };
	    EmulatedScopedShadowDomStrategy.prototype.processElement = function (hostComponentId, elementComponentId, element) {
	        // Shim the element as a child of the compiled component
	        if (lang_1.isPresent(hostComponentId)) {
	            var contentAttribute = util_1.getContentAttribute(util_1.getComponentId(hostComponentId));
	            dom_adapter_1.DOM.setAttribute(element, contentAttribute, '');
	        }
	        // If the current element is also a component, shim it as a host
	        if (lang_1.isPresent(elementComponentId)) {
	            var hostAttribute = util_1.getHostAttribute(util_1.getComponentId(elementComponentId));
	            dom_adapter_1.DOM.setAttribute(element, hostAttribute, '');
	        }
	    };
	    return EmulatedScopedShadowDomStrategy;
	})(emulated_unscoped_shadow_dom_strategy_1.EmulatedUnscopedShadowDomStrategy);
	exports.EmulatedScopedShadowDomStrategy = EmulatedScopedShadowDomStrategy;
	exports.__esModule = true;
	//# sourceMappingURL=emulated_scoped_shadow_dom_strategy.js.map

/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	/**
	 * @module
	 * @public
	 * @description
	 *
	 * Annotations provide the additional information that Angular requires in order to run your
	 * application. This module
	 * contains {@link Component}, {@link Directive}, and {@link View} annotations, as well as {@link
	 * Parent} and {@link Ancestor} annotations that are
	 * used by Angular to resolve dependencies.
	 *
	 */
	__export(__webpack_require__(181));
	__export(__webpack_require__(182));
	exports.__esModule = true;
	//# sourceMappingURL=annotations.js.map

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * This indirection is needed to free up Component, etc symbols in the public API
	 * to be used by the decorator versions of these annotations.
	 */
	var annotations_1 = __webpack_require__(128);
	exports.ComponentAnnotation = annotations_1.Component;
	exports.DirectiveAnnotation = annotations_1.Directive;
	exports.onDestroy = annotations_1.onDestroy;
	exports.onChange = annotations_1.onChange;
	exports.onAllChangesDone = annotations_1.onAllChangesDone;
	exports.__esModule = true;
	//# sourceMappingURL=annotations.js.map

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	var annotations_1 = __webpack_require__(181);
	var view_1 = __webpack_require__(103);
	var visibility_1 = __webpack_require__(101);
	var di_1 = __webpack_require__(177);
	var decorators_1 = __webpack_require__(66);
	/* from annotations */
	exports.Component = decorators_1.makeDecorator(annotations_1.ComponentAnnotation);
	exports.Directive = decorators_1.makeDecorator(annotations_1.DirectiveAnnotation);
	/* from view */
	exports.View = decorators_1.makeDecorator(view_1.ViewAnnotation);
	/* from visibility */
	exports.Self = decorators_1.makeParamDecorator(visibility_1.SelfAnnotation);
	exports.Parent = decorators_1.makeParamDecorator(visibility_1.ParentAnnotation);
	exports.Ancestor = decorators_1.makeParamDecorator(visibility_1.AncestorAnnotation);
	exports.Unbounded = decorators_1.makeParamDecorator(visibility_1.UnboundedAnnotation);
	/* from di */
	exports.Attribute = decorators_1.makeParamDecorator(di_1.AttributeAnnotation);
	exports.Query = decorators_1.makeParamDecorator(di_1.QueryAnnotation);
	exports.__esModule = true;
	//# sourceMappingURL=decorators.js.map

/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module
	 * @public
	 * @description
	 * Common directives shipped with Angular.
	 */
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	var lang_1 = __webpack_require__(60);
	var ng_for_1 = __webpack_require__(185);
	var ng_if_1 = __webpack_require__(186);
	var ng_non_bindable_1 = __webpack_require__(187);
	var ng_switch_1 = __webpack_require__(188);
	__export(__webpack_require__(184));
	__export(__webpack_require__(185));
	__export(__webpack_require__(186));
	__export(__webpack_require__(187));
	__export(__webpack_require__(188));
	/**
	 * A collection of the Angular core directives that are likely to be used in each and every Angular
	 * application.
	 *
	 * This collection can be used to quickly enumerate all the built-in directives in the `@View`
	 * annotation. For example,
	 * instead of writing:
	 *
	 * ```
	 * import {If, NgFor, NgSwitch, NgSwitchWhen, NgSwitchDefault} from 'angular2/angular2';
	 * import {OtherDirective} from 'myDirectives';
	 *
	 * @Component({
	 *  selector: 'my-component'
	 * })
	 * @View({
	 *   templateUrl: 'myComponent.html',
	 *   directives: [If, NgFor, NgSwitch, NgSwitchWhen, NgSwitchDefault, OtherDirective]
	 * })
	 * export class MyComponent {
	 *   ...
	 * }
	 * ```
	 * one could enumerate all the core directives at once:
	 *
	 * ```
	 * import {coreDirectives} from 'angular2/angular2';
	 * import {OtherDirective} from 'myDirectives';
	 *
	 * @Component({
	 *  selector: 'my-component'
	 * })
	 * @View({
	 *   templateUrl: 'myComponent.html',
	 *   directives: [coreDirectives, OtherDirective]
	 * })
	 * export class MyComponent {
	 *   ...
	 * }
	 * ```
	 *
	 */
	exports.coreDirectives = lang_1.CONST_EXPR([ng_for_1.NgFor, ng_if_1.NgIf, ng_non_bindable_1.NgNonBindable, ng_switch_1.NgSwitch, ng_switch_1.NgSwitchWhen, ng_switch_1.NgSwitchDefault]);
	exports.__esModule = true;
	//# sourceMappingURL=directives.js.map

/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var annotations_1 = __webpack_require__(180);
	var core_1 = __webpack_require__(99);
	var lang_1 = __webpack_require__(60);
	var dom_adapter_1 = __webpack_require__(107);
	var CSSClass = (function () {
	    function CSSClass(ngEl) {
	        this._domEl = ngEl.domElement;
	    }
	    CSSClass.prototype._toggleClass = function (className, enabled) {
	        if (enabled) {
	            dom_adapter_1.DOM.addClass(this._domEl, className);
	        }
	        else {
	            dom_adapter_1.DOM.removeClass(this._domEl, className);
	        }
	    };
	    Object.defineProperty(CSSClass.prototype, "iterableChanges", {
	        set: function (changes) {
	            var _this = this;
	            if (lang_1.isPresent(changes)) {
	                changes.forEachAddedItem(function (record) { _this._toggleClass(record.key, record.currentValue); });
	                changes.forEachChangedItem(function (record) { _this._toggleClass(record.key, record.currentValue); });
	                changes.forEachRemovedItem(function (record) {
	                    if (record.previousValue) {
	                        dom_adapter_1.DOM.removeClass(_this._domEl, record.key);
	                    }
	                });
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    CSSClass = __decorate([
	        annotations_1.Directive({ selector: '[class]', properties: { 'iterableChanges': 'class | keyValDiff' } }), 
	        __metadata('design:paramtypes', [core_1.ElementRef])
	    ], CSSClass);
	    return CSSClass;
	})();
	exports.CSSClass = CSSClass;
	exports.__esModule = true;
	//# sourceMappingURL=class.js.map

/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var annotations_1 = __webpack_require__(180);
	var core_1 = __webpack_require__(99);
	var lang_1 = __webpack_require__(60);
	var collection_1 = __webpack_require__(61);
	/**
	 * The `For` directive instantiates a template once per item from an iterable. The context for each
	 * instantiated template inherits from the outer context with the given loop variable set to the
	 * current item from the iterable.
	 *
	 * It is possible to alias the `index` to a local variable that will be set to the current loop
	 * iteration in the template context.
	 *
	 * When the contents of the iterator changes, `For` makes the corresponding changes to the DOM:
	 *
	 * * When an item is added, a new instance of the template is added to the DOM.
	 * * When an item is removed, its template instance is removed from the DOM.
	 * * When items are reordered, their respective templates are reordered in the DOM.
	 *
	 * # Example
	 *
	 * ```
	 * <ul>
	 *   <li *ng-for="#error of errors; #i = index">
	 *     Error {{i}} of {{errors.length}}: {{error.message}}
	 *   </li>
	 * </ul>
	 * ```
	 *
	 * # Syntax
	 *
	 * - `<li *ng-for="#item of items; #i = index">...</li>`
	 * - `<li template="ng-for #item of items; #i = index">...</li>`
	 * - `<template [ng-for] #item [ng-for-of]="items" #i="index"><li>...</li></template>`
	 *
	 * @exportedAs angular2/directives
	 */
	var NgFor = (function () {
	    function NgFor(viewContainer, protoViewRef) {
	        this.viewContainer = viewContainer;
	        this.protoViewRef = protoViewRef;
	    }
	    Object.defineProperty(NgFor.prototype, "iterableChanges", {
	        set: function (changes) {
	            if (lang_1.isBlank(changes)) {
	                this.viewContainer.clear();
	                return;
	            }
	            // TODO(rado): check if change detection can produce a change record that is
	            // easier to consume than current.
	            var recordViewTuples = [];
	            changes.forEachRemovedItem(function (removedRecord) { return collection_1.ListWrapper.push(recordViewTuples, new RecordViewTuple(removedRecord, null)); });
	            changes.forEachMovedItem(function (movedRecord) { return collection_1.ListWrapper.push(recordViewTuples, new RecordViewTuple(movedRecord, null)); });
	            var insertTuples = NgFor.bulkRemove(recordViewTuples, this.viewContainer);
	            changes.forEachAddedItem(function (addedRecord) { return collection_1.ListWrapper.push(insertTuples, new RecordViewTuple(addedRecord, null)); });
	            NgFor.bulkInsert(insertTuples, this.viewContainer, this.protoViewRef);
	            for (var i = 0; i < insertTuples.length; i++) {
	                this.perViewChange(insertTuples[i].view, insertTuples[i].record);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    NgFor.prototype.perViewChange = function (view, record) {
	        view.setLocal('\$implicit', record.item);
	        view.setLocal('index', record.currentIndex);
	    };
	    NgFor.bulkRemove = function (tuples, viewContainer) {
	        tuples.sort(function (a, b) { return a.record.previousIndex - b.record.previousIndex; });
	        var movedTuples = [];
	        for (var i = tuples.length - 1; i >= 0; i--) {
	            var tuple = tuples[i];
	            // separate moved views from removed views.
	            if (lang_1.isPresent(tuple.record.currentIndex)) {
	                tuple.view = viewContainer.detach(tuple.record.previousIndex);
	                collection_1.ListWrapper.push(movedTuples, tuple);
	            }
	            else {
	                viewContainer.remove(tuple.record.previousIndex);
	            }
	        }
	        return movedTuples;
	    };
	    NgFor.bulkInsert = function (tuples, viewContainer, protoViewRef) {
	        tuples.sort(function (a, b) { return a.record.currentIndex - b.record.currentIndex; });
	        for (var i = 0; i < tuples.length; i++) {
	            var tuple = tuples[i];
	            if (lang_1.isPresent(tuple.view)) {
	                viewContainer.insert(tuple.view, tuple.record.currentIndex);
	            }
	            else {
	                tuple.view = viewContainer.create(protoViewRef, tuple.record.currentIndex);
	            }
	        }
	        return tuples;
	    };
	    NgFor = __decorate([
	        annotations_1.Directive({ selector: '[ng-for][ng-for-of]', properties: { 'iterableChanges': 'ngForOf | iterableDiff' } }), 
	        __metadata('design:paramtypes', [core_1.ViewContainerRef, core_1.ProtoViewRef])
	    ], NgFor);
	    return NgFor;
	})();
	exports.NgFor = NgFor;
	var RecordViewTuple = (function () {
	    function RecordViewTuple(record, view) {
	        this.record = record;
	        this.view = view;
	    }
	    return RecordViewTuple;
	})();
	exports.__esModule = true;
	//# sourceMappingURL=ng_for.js.map

/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var annotations_1 = __webpack_require__(180);
	var core_1 = __webpack_require__(99);
	var lang_1 = __webpack_require__(60);
	/**
	 * Removes or recreates a portion of the DOM tree based on an {expression}.
	 *
	 * If the expression assigned to `if` evaluates to a false value then the element is removed from
	 * the
	 * DOM, otherwise a clone of the element is reinserted into the DOM.
	 *
	 * # Example:
	 *
	 * ```
	 * <div *ng-if="errorCount > 0" class="error">
	 *   <!-- Error message displayed when the errorCount property on the current context is greater
	 * than 0. -->
	 *   {{errorCount}} errors detected
	 * </div>
	 * ```
	 *
	 * # Syntax
	 *
	 * - `<div *ng-if="condition">...</div>`
	 * - `<div template="ng-if condition">...</div>`
	 * - `<template [ng-if]="condition"><div>...</div></template>`
	 *
	 * @exportedAs angular2/directives
	 */
	var NgIf = (function () {
	    function NgIf(viewContainer, protoViewRef) {
	        this.viewContainer = viewContainer;
	        this.prevCondition = null;
	        this.protoViewRef = protoViewRef;
	    }
	    Object.defineProperty(NgIf.prototype, "ngIf", {
	        set: function (newCondition /* boolean */) {
	            if (newCondition && (lang_1.isBlank(this.prevCondition) || !this.prevCondition)) {
	                this.prevCondition = true;
	                this.viewContainer.create(this.protoViewRef);
	            }
	            else if (!newCondition && (lang_1.isBlank(this.prevCondition) || this.prevCondition)) {
	                this.prevCondition = false;
	                this.viewContainer.clear();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    NgIf = __decorate([
	        annotations_1.Directive({ selector: '[ng-if]', properties: { 'ngIf': 'ngIf' } }), 
	        __metadata('design:paramtypes', [core_1.ViewContainerRef, core_1.ProtoViewRef])
	    ], NgIf);
	    return NgIf;
	})();
	exports.NgIf = NgIf;
	exports.__esModule = true;
	//# sourceMappingURL=ng_if.js.map

/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var annotations_1 = __webpack_require__(180);
	/**
	 * The `NgNonBindable` directive tells Angular not to compile or bind the contents of the current
	 * DOM element. This is useful if the element contains what appears to be Angular directives and
	 * bindings but which should be ignored by Angular. This could be the case if you have a site that
	 * displays snippets of code, for instance.
	 *
	 * Example:
	 *
	 * ```
	 * <div>Normal: {{1 + 2}}</div> // output "Normal: 3"
	 * <div non-bindable>Ignored: {{1 + 2}}</div> // output "Ignored: {{1 + 2}}"
	 * ```
	 *
	 * @exportedAs angular2/directives
	 */
	var NgNonBindable = (function () {
	    function NgNonBindable() {
	    }
	    NgNonBindable = __decorate([
	        annotations_1.Directive({ selector: '[ng-non-bindable]', compileChildren: false }), 
	        __metadata('design:paramtypes', [])
	    ], NgNonBindable);
	    return NgNonBindable;
	})();
	exports.NgNonBindable = NgNonBindable;
	exports.__esModule = true;
	//# sourceMappingURL=ng_non_bindable.js.map

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var annotations_1 = __webpack_require__(180);
	var core_1 = __webpack_require__(99);
	var lang_1 = __webpack_require__(60);
	var collection_1 = __webpack_require__(61);
	var SwitchView = (function () {
	    function SwitchView(viewContainerRef, protoViewRef) {
	        this._protoViewRef = protoViewRef;
	        this._viewContainerRef = viewContainerRef;
	    }
	    SwitchView.prototype.create = function () { this._viewContainerRef.create(this._protoViewRef); };
	    SwitchView.prototype.destroy = function () { this._viewContainerRef.clear(); };
	    return SwitchView;
	})();
	exports.SwitchView = SwitchView;
	/**
	 * The `NgSwitch` directive is used to conditionally swap DOM structure on your template based on a
	 * scope expression.
	 * Elements within `NgSwitch` but without `NgSwitchWhen` or `NgSwitchDefault` directives will be
	 * preserved at the location as specified in the template.
	 *
	 * `NgSwitch` simply chooses nested elements and makes them visible based on which element matches
	 * the value obtained from the evaluated expression. In other words, you define a container element
	 * (where you place the directive), place an expression on the **`[ng-switch]="..."` attribute**),
	 * define any inner elements inside of the directive and place a `[ng-switch-when]` attribute per
	 * element.
	 * The when attribute is used to inform NgSwitch which element to display when the expression is
	 * evaluated. If a matching expression is not found via a when attribute then an element with the
	 * default attribute is displayed.
	 *
	 * # Example:
	 *
	 * ```
	 * <ANY [ng-switch]="expression">
	 *   <template [ng-switch-when]="whenExpression1">...</template>
	 *   <template [ng-switch-when]="whenExpression1">...</template>
	 *   <template [ng-switch-default]>...</template>
	 * </ANY>
	 * ```
	 *
	 * @exportedAs angular2/directives
	 */
	var NgSwitch = (function () {
	    function NgSwitch() {
	        this._valueViews = collection_1.MapWrapper.create();
	        this._activeViews = collection_1.ListWrapper.create();
	        this._useDefault = false;
	    }
	    Object.defineProperty(NgSwitch.prototype, "ngSwitch", {
	        set: function (value) {
	            // Empty the currently active ViewContainers
	            this._emptyAllActiveViews();
	            // Add the ViewContainers matching the value (with a fallback to default)
	            this._useDefault = false;
	            var views = collection_1.MapWrapper.get(this._valueViews, value);
	            if (lang_1.isBlank(views)) {
	                this._useDefault = true;
	                views = lang_1.normalizeBlank(collection_1.MapWrapper.get(this._valueViews, _whenDefault));
	            }
	            this._activateViews(views);
	            this._switchValue = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    NgSwitch.prototype._onWhenValueChanged = function (oldWhen, newWhen, view) {
	        this._deregisterView(oldWhen, view);
	        this._registerView(newWhen, view);
	        if (oldWhen === this._switchValue) {
	            view.destroy();
	            collection_1.ListWrapper.remove(this._activeViews, view);
	        }
	        else if (newWhen === this._switchValue) {
	            if (this._useDefault) {
	                this._useDefault = false;
	                this._emptyAllActiveViews();
	            }
	            view.create();
	            collection_1.ListWrapper.push(this._activeViews, view);
	        }
	        // Switch to default when there is no more active ViewContainers
	        if (this._activeViews.length === 0 && !this._useDefault) {
	            this._useDefault = true;
	            this._activateViews(collection_1.MapWrapper.get(this._valueViews, _whenDefault));
	        }
	    };
	    NgSwitch.prototype._emptyAllActiveViews = function () {
	        var activeContainers = this._activeViews;
	        for (var i = 0; i < activeContainers.length; i++) {
	            activeContainers[i].destroy();
	        }
	        this._activeViews = collection_1.ListWrapper.create();
	    };
	    NgSwitch.prototype._activateViews = function (views) {
	        // TODO(vicb): assert(this._activeViews.length === 0);
	        if (lang_1.isPresent(views)) {
	            for (var i = 0; i < views.length; i++) {
	                views[i].create();
	            }
	            this._activeViews = views;
	        }
	    };
	    NgSwitch.prototype._registerView = function (value, view) {
	        var views = collection_1.MapWrapper.get(this._valueViews, value);
	        if (lang_1.isBlank(views)) {
	            views = collection_1.ListWrapper.create();
	            collection_1.MapWrapper.set(this._valueViews, value, views);
	        }
	        collection_1.ListWrapper.push(views, view);
	    };
	    NgSwitch.prototype._deregisterView = function (value, view) {
	        // `_whenDefault` is used a marker for non-registered whens
	        if (value == _whenDefault)
	            return;
	        var views = collection_1.MapWrapper.get(this._valueViews, value);
	        if (views.length == 1) {
	            collection_1.MapWrapper.delete(this._valueViews, value);
	        }
	        else {
	            collection_1.ListWrapper.remove(views, view);
	        }
	    };
	    NgSwitch = __decorate([
	        annotations_1.Directive({ selector: '[ng-switch]', properties: { 'ngSwitch': 'ngSwitch' } }), 
	        __metadata('design:paramtypes', [])
	    ], NgSwitch);
	    return NgSwitch;
	})();
	exports.NgSwitch = NgSwitch;
	/**
	 * Defines a case statement as an expression.
	 *
	 * If multiple `NgSwitchWhen` match the `NgSwitch` value, all of them are displayed.
	 *
	 * Example:
	 *
	 * ```
	 * // match against a context variable
	 * <template [ng-switch-when]="contextVariable">...</template>
	 *
	 * // match against a constant string
	 * <template [ng-switch-when]="'stringValue'">...</template>
	 * ```
	 *
	 * @exportedAs angular2/directives
	 */
	var NgSwitchWhen = (function () {
	    function NgSwitchWhen(viewContainer, protoViewRef, sswitch) {
	        // `_whenDefault` is used as a marker for a not yet initialized value
	        this._value = _whenDefault;
	        this._switch = sswitch;
	        this._view = new SwitchView(viewContainer, protoViewRef);
	    }
	    NgSwitchWhen.prototype.onDestroy = function () { this._switch; };
	    Object.defineProperty(NgSwitchWhen.prototype, "ngSwitchWhen", {
	        set: function (value) {
	            this._switch._onWhenValueChanged(this._value, value, this._view);
	            this._value = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    NgSwitchWhen = __decorate([
	        annotations_1.Directive({ selector: '[ng-switch-when]', properties: { 'ngSwitchWhen': 'ngSwitchWhen' } }),
	        __param(2, annotations_1.Parent()), 
	        __metadata('design:paramtypes', [core_1.ViewContainerRef, core_1.ProtoViewRef, NgSwitch])
	    ], NgSwitchWhen);
	    return NgSwitchWhen;
	})();
	exports.NgSwitchWhen = NgSwitchWhen;
	/**
	 * Defines a default case statement.
	 *
	 * Default case statements are displayed when no `NgSwitchWhen` match the `switch` value.
	 *
	 * Example:
	 *
	 * ```
	 * <template [ng-switch-default]>...</template>
	 * ```
	 *
	 * @exportedAs angular2/directives
	 */
	var NgSwitchDefault = (function () {
	    function NgSwitchDefault(viewContainer, protoViewRef, sswitch) {
	        sswitch._registerView(_whenDefault, new SwitchView(viewContainer, protoViewRef));
	    }
	    NgSwitchDefault = __decorate([
	        annotations_1.Directive({ selector: '[ng-switch-default]' }),
	        __param(2, annotations_1.Parent()), 
	        __metadata('design:paramtypes', [core_1.ViewContainerRef, core_1.ProtoViewRef, NgSwitch])
	    ], NgSwitchDefault);
	    return NgSwitchDefault;
	})();
	exports.NgSwitchDefault = NgSwitchDefault;
	var _whenDefault = new Object();
	exports.__esModule = true;
	//# sourceMappingURL=ng_switch.js.map

/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module
	 * @public
	 * @description
	 * This module is used for handling user input, by defining and building a {@link ControlGroup} that
	 * consists of
	 * {@link Control} objects, and mapping them onto the DOM. {@link Control} objects can then be used
	 * to read information
	 * from the form DOM elements.
	 *
	 * This module is not included in the `angular2` module; you must import the forms module
	 * explicitly.
	 *
	 */
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(190));
	__export(__webpack_require__(192));
	__export(__webpack_require__(191));
	__export(__webpack_require__(193));
	__export(__webpack_require__(194));
	exports.__esModule = true;
	//# sourceMappingURL=forms.js.map

/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var lang_1 = __webpack_require__(60);
	var async_1 = __webpack_require__(94);
	var collection_1 = __webpack_require__(61);
	var validators_1 = __webpack_require__(191);
	/**
	 * Indicates that a Control is valid, i.e. that no errors exist in the input value.
	 *
	 * @exportedAs angular2/forms
	 */
	exports.VALID = "VALID";
	/**
	 * Indicates that a Control is invalid, i.e. that an error exists in the input value.
	 *
	 * @exportedAs angular2/forms
	 */
	exports.INVALID = "INVALID";
	function isControl(c) {
	    return c instanceof AbstractControl;
	}
	exports.isControl = isControl;
	/**
	 * Omitting from external API doc as this is really an abstract internal concept.
	 */
	var AbstractControl = (function () {
	    function AbstractControl(validator) {
	        this.validator = validator;
	        this._pristine = true;
	    }
	    Object.defineProperty(AbstractControl.prototype, "value", {
	        get: function () { return this._value; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControl.prototype, "status", {
	        get: function () { return this._status; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControl.prototype, "valid", {
	        get: function () { return this._status === exports.VALID; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControl.prototype, "errors", {
	        get: function () { return this._errors; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControl.prototype, "pristine", {
	        get: function () { return this._pristine; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControl.prototype, "dirty", {
	        get: function () { return !this.pristine; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControl.prototype, "valueChanges", {
	        get: function () { return this._valueChanges; },
	        enumerable: true,
	        configurable: true
	    });
	    AbstractControl.prototype.setParent = function (parent) { this._parent = parent; };
	    AbstractControl.prototype._updateParent = function () {
	        if (lang_1.isPresent(this._parent)) {
	            this._parent._updateValue();
	        }
	    };
	    return AbstractControl;
	})();
	exports.AbstractControl = AbstractControl;
	/**
	 * Defines a part of a form that cannot be divided into other controls.
	 *
	 * `Control` is one of the three fundamental building blocks used to define forms in Angular, along
	 * with
	 * {@link ControlGroup} and {@link ControlArray}.
	 *
	 * @exportedAs angular2/forms
	 */
	var Control = (function (_super) {
	    __extends(Control, _super);
	    function Control(value, validator) {
	        if (validator === void 0) { validator = validators_1.Validators.nullValidator; }
	        _super.call(this, validator);
	        this._setValueErrorsStatus(value);
	        this._valueChanges = new async_1.EventEmitter();
	    }
	    Control.prototype.updateValue = function (value) {
	        this._setValueErrorsStatus(value);
	        this._pristine = false;
	        async_1.ObservableWrapper.callNext(this._valueChanges, this._value);
	        this._updateParent();
	    };
	    Control.prototype._setValueErrorsStatus = function (value) {
	        this._value = value;
	        this._errors = this.validator(this);
	        this._status = lang_1.isPresent(this._errors) ? exports.INVALID : exports.VALID;
	    };
	    return Control;
	})(AbstractControl);
	exports.Control = Control;
	/**
	 * Defines a part of a form, of fixed length, that can contain other controls.
	 *
	 * A ControlGroup aggregates the values and errors of each {@link Control} in the group. Thus, if
	 * one of the controls
	 * in a group is invalid, the entire group is invalid. Similarly, if a control changes its value,
	 * the entire group
	 * changes as well.
	 *
	 * `ControlGroup` is one of the three fundamental building blocks used to define forms in Angular,
	 * along with
	 * {@link Control} and {@link ControlArray}. {@link ControlArray} can also contain other controls,
	 * but is of variable
	 * length.
	 *
	 * @exportedAs angular2/forms
	 */
	var ControlGroup = (function (_super) {
	    __extends(ControlGroup, _super);
	    function ControlGroup(controls, optionals, validator) {
	        if (optionals === void 0) { optionals = null; }
	        if (validator === void 0) { validator = validators_1.Validators.group; }
	        _super.call(this, validator);
	        this.controls = controls;
	        this._optionals = lang_1.isPresent(optionals) ? optionals : {};
	        this._valueChanges = new async_1.EventEmitter();
	        this._setParentForControls();
	        this._setValueErrorsStatus();
	    }
	    ControlGroup.prototype.include = function (controlName) {
	        collection_1.StringMapWrapper.set(this._optionals, controlName, true);
	        this._updateValue();
	    };
	    ControlGroup.prototype.exclude = function (controlName) {
	        collection_1.StringMapWrapper.set(this._optionals, controlName, false);
	        this._updateValue();
	    };
	    ControlGroup.prototype.contains = function (controlName) {
	        var c = collection_1.StringMapWrapper.contains(this.controls, controlName);
	        return c && this._included(controlName);
	    };
	    ControlGroup.prototype._setParentForControls = function () {
	        var _this = this;
	        collection_1.StringMapWrapper.forEach(this.controls, function (control, name) { control.setParent(_this); });
	    };
	    ControlGroup.prototype._updateValue = function () {
	        this._setValueErrorsStatus();
	        this._pristine = false;
	        async_1.ObservableWrapper.callNext(this._valueChanges, this._value);
	        this._updateParent();
	    };
	    ControlGroup.prototype._setValueErrorsStatus = function () {
	        this._value = this._reduceValue();
	        this._errors = this.validator(this);
	        this._status = lang_1.isPresent(this._errors) ? exports.INVALID : exports.VALID;
	    };
	    ControlGroup.prototype._reduceValue = function () {
	        return this._reduceChildren({}, function (acc, control, name) {
	            acc[name] = control.value;
	            return acc;
	        });
	    };
	    ControlGroup.prototype._reduceChildren = function (initValue, fn) {
	        var _this = this;
	        var res = initValue;
	        collection_1.StringMapWrapper.forEach(this.controls, function (control, name) {
	            if (_this._included(name)) {
	                res = fn(res, control, name);
	            }
	        });
	        return res;
	    };
	    ControlGroup.prototype._included = function (controlName) {
	        var isOptional = collection_1.StringMapWrapper.contains(this._optionals, controlName);
	        return !isOptional || collection_1.StringMapWrapper.get(this._optionals, controlName);
	    };
	    return ControlGroup;
	})(AbstractControl);
	exports.ControlGroup = ControlGroup;
	/**
	 * Defines a part of a form, of variable length, that can contain other controls.
	 *
	 * A `ControlArray` aggregates the values and errors of each {@link Control} in the group. Thus, if
	 * one of the controls
	 * in a group is invalid, the entire group is invalid. Similarly, if a control changes its value,
	 * the entire group
	 * changes as well.
	 *
	 * `ControlArray` is one of the three fundamental building blocks used to define forms in Angular,
	 * along with
	 * {@link Control} and {@link ControlGroup}. {@link ControlGroup} can also contain other controls,
	 * but is of fixed
	 * length.
	 *
	 * @exportedAs angular2/forms
	 */
	var ControlArray = (function (_super) {
	    __extends(ControlArray, _super);
	    function ControlArray(controls, validator) {
	        if (validator === void 0) { validator = validators_1.Validators.array; }
	        _super.call(this, validator);
	        this.controls = controls;
	        this._valueChanges = new async_1.EventEmitter();
	        this._setParentForControls();
	        this._setValueErrorsStatus();
	    }
	    ControlArray.prototype.at = function (index) { return this.controls[index]; };
	    ControlArray.prototype.push = function (control) {
	        collection_1.ListWrapper.push(this.controls, control);
	        control.setParent(this);
	        this._updateValue();
	    };
	    ControlArray.prototype.insert = function (index, control) {
	        collection_1.ListWrapper.insert(this.controls, index, control);
	        control.setParent(this);
	        this._updateValue();
	    };
	    ControlArray.prototype.removeAt = function (index) {
	        collection_1.ListWrapper.removeAt(this.controls, index);
	        this._updateValue();
	    };
	    Object.defineProperty(ControlArray.prototype, "length", {
	        get: function () { return this.controls.length; },
	        enumerable: true,
	        configurable: true
	    });
	    ControlArray.prototype._updateValue = function () {
	        this._setValueErrorsStatus();
	        this._pristine = false;
	        async_1.ObservableWrapper.callNext(this._valueChanges, this._value);
	        this._updateParent();
	    };
	    ControlArray.prototype._setParentForControls = function () {
	        var _this = this;
	        collection_1.ListWrapper.forEach(this.controls, function (control) { control.setParent(_this); });
	    };
	    ControlArray.prototype._setValueErrorsStatus = function () {
	        this._value = collection_1.ListWrapper.map(this.controls, function (c) { return c.value; });
	        this._errors = this.validator(this);
	        this._status = lang_1.isPresent(this._errors) ? exports.INVALID : exports.VALID;
	    };
	    return ControlArray;
	})(AbstractControl);
	exports.ControlArray = ControlArray;
	exports.__esModule = true;
	//# sourceMappingURL=model.js.map

/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	var lang_1 = __webpack_require__(60);
	var collection_1 = __webpack_require__(61);
	/**
	 * Provides a set of validators used by form controls.
	 *
	 * # Example
	 *
	 * ```
	 * var loginControl = new Control("", Validators.required)
	 * ```
	 *
	 * @exportedAs angular2/forms
	 */
	var Validators = (function () {
	    function Validators() {
	    }
	    Validators.required = function (c) {
	        return lang_1.isBlank(c.value) || c.value == "" ? { "required": true } : null;
	    };
	    Validators.nullValidator = function (c) { return null; };
	    Validators.compose = function (validators) {
	        return function (c) {
	            var res = collection_1.ListWrapper.reduce(validators, function (res, validator) {
	                var errors = validator(c);
	                return lang_1.isPresent(errors) ? collection_1.StringMapWrapper.merge(res, errors) : res;
	            }, {});
	            return collection_1.StringMapWrapper.isEmpty(res) ? null : res;
	        };
	    };
	    Validators.group = function (c) {
	        var res = {};
	        collection_1.StringMapWrapper.forEach(c.controls, function (control, name) {
	            if (c.contains(name) && lang_1.isPresent(control.errors)) {
	                Validators._mergeErrors(control, res);
	            }
	        });
	        return collection_1.StringMapWrapper.isEmpty(res) ? null : res;
	    };
	    Validators.array = function (c) {
	        var res = {};
	        collection_1.ListWrapper.forEach(c.controls, function (control) {
	            if (lang_1.isPresent(control.errors)) {
	                Validators._mergeErrors(control, res);
	            }
	        });
	        return collection_1.StringMapWrapper.isEmpty(res) ? null : res;
	    };
	    Validators._mergeErrors = function (control, res) {
	        collection_1.StringMapWrapper.forEach(control.errors, function (value, error) {
	            if (!collection_1.StringMapWrapper.contains(res, error)) {
	                res[error] = [];
	            }
	            collection_1.ListWrapper.push(res[error], control);
	        });
	    };
	    return Validators;
	})();
	exports.Validators = Validators;
	exports.__esModule = true;
	//# sourceMappingURL=validators.js.map

/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var decorators_1 = __webpack_require__(182);
	var decorators_2 = __webpack_require__(63);
	var element_ref_1 = __webpack_require__(131);
	var api_1 = __webpack_require__(122);
	var lang_1 = __webpack_require__(60);
	var collection_1 = __webpack_require__(61);
	var model_1 = __webpack_require__(190);
	var validators_1 = __webpack_require__(191);
	function _lookupControl(groupDirective, controlOrName) {
	    if (model_1.isControl(controlOrName)) {
	        return controlOrName;
	    }
	    if (lang_1.isBlank(groupDirective)) {
	        throw new lang_1.BaseException("No control group found for \"" + controlOrName + "\"");
	    }
	    var control = groupDirective.findControl(controlOrName);
	    if (lang_1.isBlank(control)) {
	        throw new lang_1.BaseException("Cannot find control \"" + controlOrName + "\"");
	    }
	    return control;
	}
	/**
	 * Binds a control group to a DOM element.
	 *
	 * # Example
	 *
	 * In this example, we bind the control group to the form element, and we bind the login and
	 * password controls to the
	 * login and password elements.
	 *
	 * Here we use {@link formDirectives}, rather than importing each form directive individually, e.g.
	 * `ControlDirective`, `ControlGroupDirective`. This is just a shorthand for the same end result.
	 *
	 *  ```
	 * @Component({selector: "login-comp"})
	 * @View({
	 *      directives: [formDirectives],
	 *      inline: "<form [control-group]='loginForm'>" +
	 *              "Login <input type='text' control='login'>" +
	 *              "Password <input type='password' control='password'>" +
	 *              "<button (click)="onLogin()">Login</button>" +
	 *              "</form>"
	 *      })
	 * class LoginComp {
	 *  loginForm:ControlGroup;
	 *
	 *  constructor() {
	 *    this.loginForm = new ControlGroup({
	 *      login: new Control(""),
	 *      password: new Control("")
	 *    });
	 *  }
	 *
	 *  onLogin() {
	 *    // this.loginForm.value
	 *  }
	 * }
	 *
	 *  ```
	 *
	 * @exportedAs angular2/forms
	 */
	var ControlGroupDirective = (function () {
	    function ControlGroupDirective(groupDirective) {
	        this._groupDirective = groupDirective;
	        this._directives = collection_1.ListWrapper.create();
	    }
	    Object.defineProperty(ControlGroupDirective.prototype, "controlOrName", {
	        set: function (controlOrName) {
	            this._controlOrName = controlOrName;
	            this._updateDomValue();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ControlGroupDirective.prototype._updateDomValue = function () { collection_1.ListWrapper.forEach(this._directives, function (cd) { return cd._updateDomValue(); }); };
	    ControlGroupDirective.prototype.addDirective = function (c) { collection_1.ListWrapper.push(this._directives, c); };
	    ControlGroupDirective.prototype.findControl = function (name) { return this._getControlGroup().controls[name]; };
	    ControlGroupDirective.prototype._getControlGroup = function () {
	        return _lookupControl(this._groupDirective, this._controlOrName);
	    };
	    ControlGroupDirective = __decorate([
	        decorators_1.Directive({ selector: '[control-group]', properties: { 'controlOrName': 'control-group' } }),
	        __param(0, decorators_2.Optional()),
	        __param(0, decorators_1.Ancestor()), 
	        __metadata('design:paramtypes', [ControlGroupDirective])
	    ], ControlGroupDirective);
	    return ControlGroupDirective;
	})();
	exports.ControlGroupDirective = ControlGroupDirective;
	/**
	 * Binds a control to a DOM element.
	 *
	 * # Example
	 *
	 * In this example, we bind the control to an input element. When the value of the input element
	 * changes, the value of
	 * the control will reflect that change. Likewise, if the value of the control changes, the input
	 * element reflects that
	 * change.
	 *
	 * Here we use {@link formDirectives}, rather than importing each form directive individually, e.g.
	 * `ControlDirective`, `ControlGroupDirective`. This is just a shorthand for the same end result.
	 *
	 *  ```
	 * @Component({selector: "login-comp"})
	 * @View({
	 *      directives: [formDirectives],
	 *      inline: "<input type='text' [control]='loginControl'>"
	 *      })
	 * class LoginComp {
	 *  loginControl:Control;
	 *
	 *  constructor() {
	 *    this.loginControl = new Control('');
	 *  }
	 * }
	 *
	 *  ```
	 *
	 * @exportedAs angular2/forms
	 */
	var ControlDirective = (function () {
	    function ControlDirective(groupDirective) {
	        this._groupDirective = groupDirective;
	        this._controlOrName = null;
	        this.validator = validators_1.Validators.nullValidator;
	    }
	    Object.defineProperty(ControlDirective.prototype, "controlOrName", {
	        set: function (controlOrName) {
	            this._controlOrName = controlOrName;
	            if (lang_1.isPresent(this._groupDirective)) {
	                this._groupDirective.addDirective(this);
	            }
	            var c = this._control();
	            c.validator = validators_1.Validators.compose([c.validator, this.validator]);
	            if (lang_1.isBlank(this.valueAccessor)) {
	                throw new lang_1.BaseException("Cannot find value accessor for control \"" + controlOrName + "\"");
	            }
	            this._updateDomValue();
	            this._setUpUpdateControlValue();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ControlDirective.prototype._updateDomValue = function () { this.valueAccessor.writeValue(this._control().value); };
	    ControlDirective.prototype._setUpUpdateControlValue = function () {
	        var _this = this;
	        this.valueAccessor.onChange = function (newValue) { return _this._control().updateValue(newValue); };
	    };
	    ControlDirective.prototype._control = function () { return _lookupControl(this._groupDirective, this._controlOrName); };
	    ControlDirective = __decorate([
	        decorators_1.Directive({ selector: '[control]', properties: { 'controlOrName': 'control' } }),
	        __param(0, decorators_2.Optional()),
	        __param(0, decorators_1.Ancestor()), 
	        __metadata('design:paramtypes', [ControlGroupDirective])
	    ], ControlDirective);
	    return ControlDirective;
	})();
	exports.ControlDirective = ControlDirective;
	/**
	 * The default accessor for writing a value and listening to changes that is used by a {@link
	  * Control} directive.
	 *
	 * This is the default strategy that Angular uses when no other accessor is applied.
	 *
	 *  # Example
	 *  ```
	 *  <input type="text" [control]="loginControl">
	 *  ```
	 *
	 * @exportedAs angular2/forms
	 */
	var DefaultValueAccessor = (function () {
	    function DefaultValueAccessor(cd, _elementRef, _renderer) {
	        this._elementRef = _elementRef;
	        this._renderer = _renderer;
	        this.value = null;
	        this.onChange = function (_) { };
	        cd.valueAccessor = this;
	    }
	    DefaultValueAccessor.prototype.writeValue = function (value) {
	        this._renderer.setElementProperty(this._elementRef.parentView.render, this._elementRef.boundElementIndex, 'value', value);
	    };
	    DefaultValueAccessor = __decorate([
	        decorators_1.Directive({
	            selector: 'input:not([type=checkbox])[control],textarea[control]',
	            hostListeners: { 'change': 'onChange($event.target.value)', 'input': 'onChange($event.target.value)' },
	            hostProperties: { 'value': 'value' }
	        }), 
	        __metadata('design:paramtypes', [ControlDirective, element_ref_1.ElementRef, api_1.Renderer])
	    ], DefaultValueAccessor);
	    return DefaultValueAccessor;
	})();
	exports.DefaultValueAccessor = DefaultValueAccessor;
	/**
	 * The accessor for writing a value and listening to changes that is used by a {@link
	  * Control} directive.
	 *
	 * This is the default strategy that Angular uses when no other accessor is applied.
	 *
	 *  # Example
	 *  ```
	 *  <input type="text" [control]="loginControl">
	 *  ```
	 *
	 * @exportedAs angular2/forms
	 */
	var SelectControlValueAccessor = (function () {
	    function SelectControlValueAccessor(cd, _elementRef, _renderer) {
	        this._elementRef = _elementRef;
	        this._renderer = _renderer;
	        this.value = null;
	        this.onChange = function (_) { };
	        this.value = '';
	        cd.valueAccessor = this;
	    }
	    SelectControlValueAccessor.prototype.writeValue = function (value) {
	        this._renderer.setElementProperty(this._elementRef.parentView.render, this._elementRef.boundElementIndex, 'value', value);
	    };
	    SelectControlValueAccessor = __decorate([
	        decorators_1.Directive({
	            selector: 'select[control]',
	            hostListeners: { 'change': 'onChange($event.target.value)', 'input': 'onChange($event.target.value)' },
	            hostProperties: { 'value': 'value' }
	        }), 
	        __metadata('design:paramtypes', [ControlDirective, element_ref_1.ElementRef, api_1.Renderer])
	    ], SelectControlValueAccessor);
	    return SelectControlValueAccessor;
	})();
	exports.SelectControlValueAccessor = SelectControlValueAccessor;
	/**
	 * The accessor for writing a value and listening to changes on a checkbox input element.
	 *
	 *
	 *  # Example
	 *  ```
	 *  <input type="checkbox" [control]="rememberLogin">
	 *  ```
	 *
	 * @exportedAs angular2/forms
	 */
	var CheckboxControlValueAccessor = (function () {
	    function CheckboxControlValueAccessor(cd, _elementRef, _renderer) {
	        this._elementRef = _elementRef;
	        this._renderer = _renderer;
	        this.onChange = function (_) { };
	        cd.valueAccessor = this;
	    }
	    CheckboxControlValueAccessor.prototype.writeValue = function (value) {
	        this._renderer.setElementProperty(this._elementRef.parentView.render, this._elementRef.boundElementIndex, 'checked', value);
	    };
	    CheckboxControlValueAccessor = __decorate([
	        decorators_1.Directive({
	            selector: 'input[type=checkbox][control]',
	            hostListeners: { 'change': 'onChange($event.target.checked)' },
	            hostProperties: { 'checked': 'checked' }
	        }), 
	        __metadata('design:paramtypes', [ControlDirective, element_ref_1.ElementRef, api_1.Renderer])
	    ], CheckboxControlValueAccessor);
	    return CheckboxControlValueAccessor;
	})();
	exports.CheckboxControlValueAccessor = CheckboxControlValueAccessor;
	/**
	 *
	 * A list of all the form directives used as part of a `@View` annotation.
	 *
	 *  This is a shorthand for importing them each individually.
	 *
	 * @exportedAs angular2/forms
	 */
	exports.formDirectives = lang_1.CONST_EXPR([
	    ControlGroupDirective,
	    ControlDirective,
	    CheckboxControlValueAccessor,
	    DefaultValueAccessor,
	    SelectControlValueAccessor
	]);
	exports.__esModule = true;
	//# sourceMappingURL=directives.js.map

/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var decorators_1 = __webpack_require__(182);
	var validators_1 = __webpack_require__(191);
	var directives_1 = __webpack_require__(192);
	var RequiredValidatorDirective = (function () {
	    function RequiredValidatorDirective(c) {
	        c.validator = validators_1.Validators.compose([c.validator, validators_1.Validators.required]);
	    }
	    RequiredValidatorDirective = __decorate([
	        decorators_1.Directive({ selector: '[required]' }), 
	        __metadata('design:paramtypes', [directives_1.ControlDirective])
	    ], RequiredValidatorDirective);
	    return RequiredValidatorDirective;
	})();
	exports.RequiredValidatorDirective = RequiredValidatorDirective;
	exports.__esModule = true;
	//# sourceMappingURL=validator_directives.js.map

/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	var collection_1 = __webpack_require__(61);
	var lang_1 = __webpack_require__(60);
	var modelModule = __webpack_require__(190);
	/**
	 * Creates a form object from a user-specified configuration.
	 *
	 * # Example
	 *
	 * ```
	 * import {Component, View, bootstrap} from 'angular2/angular2';
	 * import {FormBuilder, Validators, formDirectives, ControlGroup} from 'angular2/forms';
	 *
	 * @Component({
	 *   selector: 'login-comp',
	 *   appInjector: [
	 *     FormBuilder
	 *   ]
	 * })
	 * @View({
	 *   template: `
	 *     <form [control-group]="loginForm">
	 *       Login <input control="login">
	 *
	 *       <div control-group="passwordRetry">
	 *         Password <input type="password" control="password">
	 *         Confirm password <input type="password" control="passwordConfirmation">
	 *       </div>
	 *     </form>
	 *   `,
	 *   directives: [
	 *     formDirectives
	 *   ]
	 * })
	 * class LoginComp {
	 *   loginForm: ControlGroup;
	 *
	 *   constructor(builder: FormBuilder) {
	 *     this.loginForm = builder.group({
	 *       login: ["", Validators.required],
	 *
	 *       passwordRetry: builder.group({
	 *         password: ["", Validators.required],
	 *         passwordConfirmation: ["", Validators.required]
	 *       })
	 *     });
	 *   }
	 * }
	 *
	 * bootstrap(LoginComp)
	 * ```
	 *
	 * This example creates a {@link ControlGroup} that consists of a `login` {@link Control}, and a
	 * nested
	 * {@link ControlGroup} that defines a `password` and a `passwordConfirmation` {@link Control}:
	 *
	 * ```
	 *  var loginForm = builder.group({
	 *    login: ["", Validators.required],
	 *
	 *    passwordRetry: builder.group({
	 *      password: ["", Validators.required],
	 *      passwordConfirmation: ["", Validators.required]
	 *    })
	 *  });
	 *
	 *  ```
	 * @exportedAs angular2/forms
	 */
	var FormBuilder = (function () {
	    function FormBuilder() {
	    }
	    FormBuilder.prototype.group = function (controlsConfig, extra) {
	        if (extra === void 0) { extra = null; }
	        var controls = this._reduceControls(controlsConfig);
	        var optionals = lang_1.isPresent(extra) ? collection_1.StringMapWrapper.get(extra, "optionals") : null;
	        var validator = lang_1.isPresent(extra) ? collection_1.StringMapWrapper.get(extra, "validator") : null;
	        if (lang_1.isPresent(validator)) {
	            return new modelModule.ControlGroup(controls, optionals, validator);
	        }
	        else {
	            return new modelModule.ControlGroup(controls, optionals);
	        }
	    };
	    FormBuilder.prototype.control = function (value, validator) {
	        if (validator === void 0) { validator = null; }
	        if (lang_1.isPresent(validator)) {
	            return new modelModule.Control(value, validator);
	        }
	        else {
	            return new modelModule.Control(value);
	        }
	    };
	    FormBuilder.prototype.array = function (controlsConfig, validator) {
	        var _this = this;
	        if (validator === void 0) { validator = null; }
	        var controls = collection_1.ListWrapper.map(controlsConfig, function (c) { return _this._createControl(c); });
	        if (lang_1.isPresent(validator)) {
	            return new modelModule.ControlArray(controls, validator);
	        }
	        else {
	            return new modelModule.ControlArray(controls);
	        }
	    };
	    FormBuilder.prototype._reduceControls = function (controlsConfig) {
	        var _this = this;
	        var controls = {};
	        collection_1.StringMapWrapper.forEach(controlsConfig, function (controlConfig, controlName) {
	            controls[controlName] = _this._createControl(controlConfig);
	        });
	        return controls;
	    };
	    FormBuilder.prototype._createControl = function (controlConfig) {
	        if (controlConfig instanceof modelModule.Control || controlConfig instanceof
	            modelModule.ControlGroup || controlConfig instanceof
	            modelModule.ControlArray) {
	            return controlConfig;
	        }
	        else if (collection_1.ListWrapper.isList(controlConfig)) {
	            var value = collection_1.ListWrapper.get(controlConfig, 0);
	            var validator = controlConfig.length > 1 ? controlConfig[1] : null;
	            return this.control(value, validator);
	        }
	        else {
	            return this.control(controlConfig);
	        }
	    };
	    return FormBuilder;
	})();
	exports.FormBuilder = FormBuilder;
	exports.__esModule = true;
	//# sourceMappingURL=form_builder.js.map

/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = "<div>\n    <button id=\"clickerButton\" (mousemove)=\"onMouseMove($event)\" (click)=\"onClick()\">Click Count {{clickCounter}}</button>\n    <p id=\"clickerxy\">x = {{x}}, y = {{y}}</p>\n</div>\n\n"

/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = "<div>\n    <h1 class=\"ng2header\"><b>Hello, NEW World!</b></h1>\n    <note></note>\n    <br/>\n    <clicker></clicker>\n    <clock></clock>\n</div>\n\n"

/***/ }
/******/ ]);